
sdmmc_h7_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000745c  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  081076f4  081076f4  000176f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08107704  08107704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08107708  08107708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  0810770c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000037c  10000010  0810771c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000038c  0810771c  0002038c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b764  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ec4  00000000  00000000  0003b7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001708  00000000  00000000  0003e668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015d8  00000000  00000000  0003fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00045a6e  00000000  00000000  00041348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001cff5  00000000  00000000  00086db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001bc962  00000000  00000000  000a3dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0026070d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006364  00000000  00000000  00260760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081076dc 	.word	0x081076dc

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081076dc 	.word	0x081076dc

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b24      	ldr	r3, [pc, #144]	; (81003a0 <main+0x98>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a22      	ldr	r2, [pc, #136]	; (81003a0 <main+0x98>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b20      	ldr	r3, [pc, #128]	; (81003a0 <main+0x98>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f002 fcf9 	bl	8102d24 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f002 fd83 	bl	8102e3c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f002 fd04 	bl	8102d48 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b18      	ldr	r3, [pc, #96]	; (81003a4 <main+0x9c>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b16      	ldr	r3, [pc, #88]	; (81003a8 <main+0xa0>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a14      	ldr	r2, [pc, #80]	; (81003a8 <main+0xa0>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b11      	ldr	r3, [pc, #68]	; (81003a8 <main+0xa0>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a10      	ldr	r2, [pc, #64]	; (81003a8 <main+0xa0>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 ff3e 	bl	81011f0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 fb96 	bl	8100aa4 <_ZL12MX_GPIO_Initv>
  MX_MDMA_Init();
 8100378:	f000 fb7a 	bl	8100a70 <_ZL12MX_MDMA_Initv>
  MX_ADC3_Init();
 810037c:	f000 f89e 	bl	81004bc <_ZL12MX_ADC3_Initv>
  MX_HDMI_CEC_Init();
 8100380:	f000 f906 	bl	8100590 <_ZL16MX_HDMI_CEC_Initv>
  MX_RTC_Init();
 8100384:	f000 f93e 	bl	8100604 <_ZL11MX_RTC_Initv>
  MX_SAI1_Init();
 8100388:	f000 f994 	bl	81006b4 <_ZL12MX_SAI1_Initv>
  MX_SPDIFRX1_Init();
 810038c:	f000 fa38 	bl	8100800 <_ZL16MX_SPDIFRX1_Initv>
  MX_TIM8_Init();
 8100390:	f000 fa74 	bl	810087c <_ZL12MX_TIM8_Initv>
  MX_ADC1_Init();
 8100394:	f000 f80a 	bl	81003ac <_ZL12MX_ADC1_Initv>
  MX_TIM13_Init();
 8100398:	f000 fb14 	bl	81009c4 <_ZL13MX_TIM13_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810039c:	e7fe      	b.n	810039c <main+0x94>
 810039e:	bf00      	nop
 81003a0:	58024400 	.word	0x58024400
 81003a4:	e000ed00 	.word	0xe000ed00
 81003a8:	58026400 	.word	0x58026400

081003ac <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81003ac:	b580      	push	{r7, lr}
 81003ae:	b08a      	sub	sp, #40	; 0x28
 81003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81003b2:	f107 031c 	add.w	r3, r7, #28
 81003b6:	2200      	movs	r2, #0
 81003b8:	601a      	str	r2, [r3, #0]
 81003ba:	605a      	str	r2, [r3, #4]
 81003bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81003be:	463b      	mov	r3, r7
 81003c0:	2200      	movs	r2, #0
 81003c2:	601a      	str	r2, [r3, #0]
 81003c4:	605a      	str	r2, [r3, #4]
 81003c6:	609a      	str	r2, [r3, #8]
 81003c8:	60da      	str	r2, [r3, #12]
 81003ca:	611a      	str	r2, [r3, #16]
 81003cc:	615a      	str	r2, [r3, #20]
 81003ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81003d0:	4b37      	ldr	r3, [pc, #220]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003d2:	4a38      	ldr	r2, [pc, #224]	; (81004b4 <_ZL12MX_ADC1_Initv+0x108>)
 81003d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 81003d6:	4b36      	ldr	r3, [pc, #216]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003d8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 81003dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81003de:	4b34      	ldr	r3, [pc, #208]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003e0:	2200      	movs	r2, #0
 81003e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81003e4:	4b32      	ldr	r3, [pc, #200]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003e6:	2200      	movs	r2, #0
 81003e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81003ea:	4b31      	ldr	r3, [pc, #196]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003ec:	2204      	movs	r2, #4
 81003ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81003f0:	4b2f      	ldr	r3, [pc, #188]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003f2:	2200      	movs	r2, #0
 81003f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81003f6:	4b2e      	ldr	r3, [pc, #184]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003f8:	2200      	movs	r2, #0
 81003fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81003fc:	4b2c      	ldr	r3, [pc, #176]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 81003fe:	2201      	movs	r2, #1
 8100400:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100402:	4b2b      	ldr	r3, [pc, #172]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100404:	2200      	movs	r2, #0
 8100406:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100408:	4b29      	ldr	r3, [pc, #164]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 810040a:	2200      	movs	r2, #0
 810040c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810040e:	4b28      	ldr	r3, [pc, #160]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100410:	2200      	movs	r2, #0
 8100412:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100414:	4b26      	ldr	r3, [pc, #152]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100416:	2200      	movs	r2, #0
 8100418:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810041a:	4b25      	ldr	r3, [pc, #148]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 810041c:	2200      	movs	r2, #0
 810041e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100420:	4b23      	ldr	r3, [pc, #140]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100422:	2200      	movs	r2, #0
 8100424:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100426:	4b22      	ldr	r3, [pc, #136]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100428:	2200      	movs	r2, #0
 810042a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810042e:	4820      	ldr	r0, [pc, #128]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100430:	f001 f940 	bl	81016b4 <HAL_ADC_Init>
 8100434:	4603      	mov	r3, r0
 8100436:	2b00      	cmp	r3, #0
 8100438:	bf14      	ite	ne
 810043a:	2301      	movne	r3, #1
 810043c:	2300      	moveq	r3, #0
 810043e:	b2db      	uxtb	r3, r3
 8100440:	2b00      	cmp	r3, #0
 8100442:	d001      	beq.n	8100448 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8100444:	f000 fbb2 	bl	8100bac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100448:	2300      	movs	r3, #0
 810044a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 810044c:	f107 031c 	add.w	r3, r7, #28
 8100450:	4619      	mov	r1, r3
 8100452:	4817      	ldr	r0, [pc, #92]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100454:	f001 ff52 	bl	81022fc <HAL_ADCEx_MultiModeConfigChannel>
 8100458:	4603      	mov	r3, r0
 810045a:	2b00      	cmp	r3, #0
 810045c:	bf14      	ite	ne
 810045e:	2301      	movne	r3, #1
 8100460:	2300      	moveq	r3, #0
 8100462:	b2db      	uxtb	r3, r3
 8100464:	2b00      	cmp	r3, #0
 8100466:	d001      	beq.n	810046c <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8100468:	f000 fba0 	bl	8100bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 810046c:	4b12      	ldr	r3, [pc, #72]	; (81004b8 <_ZL12MX_ADC1_Initv+0x10c>)
 810046e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100470:	2306      	movs	r3, #6
 8100472:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100474:	2300      	movs	r3, #0
 8100476:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100478:	f240 73ff 	movw	r3, #2047	; 0x7ff
 810047c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810047e:	2304      	movs	r3, #4
 8100480:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100482:	2300      	movs	r3, #0
 8100484:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100486:	2300      	movs	r3, #0
 8100488:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 810048a:	463b      	mov	r3, r7
 810048c:	4619      	mov	r1, r3
 810048e:	4808      	ldr	r0, [pc, #32]	; (81004b0 <_ZL12MX_ADC1_Initv+0x104>)
 8100490:	f001 fab2 	bl	81019f8 <HAL_ADC_ConfigChannel>
 8100494:	4603      	mov	r3, r0
 8100496:	2b00      	cmp	r3, #0
 8100498:	bf14      	ite	ne
 810049a:	2301      	movne	r3, #1
 810049c:	2300      	moveq	r3, #0
 810049e:	b2db      	uxtb	r3, r3
 81004a0:	2b00      	cmp	r3, #0
 81004a2:	d001      	beq.n	81004a8 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 81004a4:	f000 fb82 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81004a8:	bf00      	nop
 81004aa:	3728      	adds	r7, #40	; 0x28
 81004ac:	46bd      	mov	sp, r7
 81004ae:	bd80      	pop	{r7, pc}
 81004b0:	1000002c 	.word	0x1000002c
 81004b4:	40022000 	.word	0x40022000
 81004b8:	04300002 	.word	0x04300002

081004bc <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81004bc:	b580      	push	{r7, lr}
 81004be:	b088      	sub	sp, #32
 81004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81004c2:	1d3b      	adds	r3, r7, #4
 81004c4:	2200      	movs	r2, #0
 81004c6:	601a      	str	r2, [r3, #0]
 81004c8:	605a      	str	r2, [r3, #4]
 81004ca:	609a      	str	r2, [r3, #8]
 81004cc:	60da      	str	r2, [r3, #12]
 81004ce:	611a      	str	r2, [r3, #16]
 81004d0:	615a      	str	r2, [r3, #20]
 81004d2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 81004d4:	4b2c      	ldr	r3, [pc, #176]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 81004d6:	4a2d      	ldr	r2, [pc, #180]	; (810058c <_ZL12MX_ADC3_Initv+0xd0>)
 81004d8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 81004da:	4b2b      	ldr	r3, [pc, #172]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 81004dc:	2200      	movs	r2, #0
 81004de:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81004e0:	4b29      	ldr	r3, [pc, #164]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 81004e2:	2200      	movs	r2, #0
 81004e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81004e6:	4b28      	ldr	r3, [pc, #160]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 81004e8:	2204      	movs	r2, #4
 81004ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 81004ec:	4b26      	ldr	r3, [pc, #152]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 81004ee:	2200      	movs	r2, #0
 81004f0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 81004f2:	4b25      	ldr	r3, [pc, #148]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 81004f4:	2200      	movs	r2, #0
 81004f6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 81004f8:	4b23      	ldr	r3, [pc, #140]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 81004fa:	2201      	movs	r2, #1
 81004fc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 81004fe:	4b22      	ldr	r3, [pc, #136]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 8100500:	2200      	movs	r2, #0
 8100502:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100504:	4b20      	ldr	r3, [pc, #128]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 8100506:	2200      	movs	r2, #0
 8100508:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810050a:	4b1f      	ldr	r3, [pc, #124]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 810050c:	2200      	movs	r2, #0
 810050e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100510:	4b1d      	ldr	r3, [pc, #116]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 8100512:	2200      	movs	r2, #0
 8100514:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100516:	4b1c      	ldr	r3, [pc, #112]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 8100518:	2200      	movs	r2, #0
 810051a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810051c:	4b1a      	ldr	r3, [pc, #104]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 810051e:	2200      	movs	r2, #0
 8100520:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100522:	4b19      	ldr	r3, [pc, #100]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 8100524:	2200      	movs	r2, #0
 8100526:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 810052a:	4817      	ldr	r0, [pc, #92]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 810052c:	f001 f8c2 	bl	81016b4 <HAL_ADC_Init>
 8100530:	4603      	mov	r3, r0
 8100532:	2b00      	cmp	r3, #0
 8100534:	bf14      	ite	ne
 8100536:	2301      	movne	r3, #1
 8100538:	2300      	moveq	r3, #0
 810053a:	b2db      	uxtb	r3, r3
 810053c:	2b00      	cmp	r3, #0
 810053e:	d001      	beq.n	8100544 <_ZL12MX_ADC3_Initv+0x88>
  {
    Error_Handler();
 8100540:	f000 fb34 	bl	8100bac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100544:	2301      	movs	r3, #1
 8100546:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100548:	2306      	movs	r3, #6
 810054a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 810054c:	2300      	movs	r3, #0
 810054e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100550:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100554:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100556:	2304      	movs	r3, #4
 8100558:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 810055a:	2300      	movs	r3, #0
 810055c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 810055e:	2300      	movs	r3, #0
 8100560:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8100562:	1d3b      	adds	r3, r7, #4
 8100564:	4619      	mov	r1, r3
 8100566:	4808      	ldr	r0, [pc, #32]	; (8100588 <_ZL12MX_ADC3_Initv+0xcc>)
 8100568:	f001 fa46 	bl	81019f8 <HAL_ADC_ConfigChannel>
 810056c:	4603      	mov	r3, r0
 810056e:	2b00      	cmp	r3, #0
 8100570:	bf14      	ite	ne
 8100572:	2301      	movne	r3, #1
 8100574:	2300      	moveq	r3, #0
 8100576:	b2db      	uxtb	r3, r3
 8100578:	2b00      	cmp	r3, #0
 810057a:	d001      	beq.n	8100580 <_ZL12MX_ADC3_Initv+0xc4>
  {
    Error_Handler();
 810057c:	f000 fb16 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8100580:	bf00      	nop
 8100582:	3720      	adds	r7, #32
 8100584:	46bd      	mov	sp, r7
 8100586:	bd80      	pop	{r7, pc}
 8100588:	10000090 	.word	0x10000090
 810058c:	58026000 	.word	0x58026000

08100590 <_ZL16MX_HDMI_CEC_Initv>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100590:	b580      	push	{r7, lr}
 8100592:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100594:	4b18      	ldr	r3, [pc, #96]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100596:	4a19      	ldr	r2, [pc, #100]	; (81005fc <_ZL16MX_HDMI_CEC_Initv+0x6c>)
 8100598:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 810059a:	4b17      	ldr	r3, [pc, #92]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 810059c:	2200      	movs	r2, #0
 810059e:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 81005a0:	4b15      	ldr	r3, [pc, #84]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005a2:	2200      	movs	r2, #0
 81005a4:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 81005a6:	4b14      	ldr	r3, [pc, #80]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005a8:	2210      	movs	r2, #16
 81005aa:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 81005ac:	4b12      	ldr	r3, [pc, #72]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005ae:	2200      	movs	r2, #0
 81005b0:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 81005b2:	4b11      	ldr	r3, [pc, #68]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005b4:	2200      	movs	r2, #0
 81005b6:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 81005b8:	4b0f      	ldr	r3, [pc, #60]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005ba:	2200      	movs	r2, #0
 81005bc:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 81005be:	4b0e      	ldr	r3, [pc, #56]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005c0:	2200      	movs	r2, #0
 81005c2:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 81005c4:	4b0c      	ldr	r3, [pc, #48]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81005ca:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 81005cc:	4b0a      	ldr	r3, [pc, #40]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005ce:	2200      	movs	r2, #0
 81005d0:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 81005d2:	4b09      	ldr	r3, [pc, #36]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005d4:	4a0a      	ldr	r2, [pc, #40]	; (8100600 <_ZL16MX_HDMI_CEC_Initv+0x70>)
 81005d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 81005d8:	4807      	ldr	r0, [pc, #28]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005da:	f001 ff71 	bl	81024c0 <HAL_CEC_Init>
 81005de:	4603      	mov	r3, r0
 81005e0:	2b00      	cmp	r3, #0
 81005e2:	bf14      	ite	ne
 81005e4:	2301      	movne	r3, #1
 81005e6:	2300      	moveq	r3, #0
 81005e8:	b2db      	uxtb	r3, r3
 81005ea:	2b00      	cmp	r3, #0
 81005ec:	d001      	beq.n	81005f2 <_ZL16MX_HDMI_CEC_Initv+0x62>
  {
    Error_Handler();
 81005ee:	f000 fadd 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 81005f2:	bf00      	nop
 81005f4:	bd80      	pop	{r7, pc}
 81005f6:	bf00      	nop
 81005f8:	100000f4 	.word	0x100000f4
 81005fc:	40006c00 	.word	0x40006c00
 8100600:	10000374 	.word	0x10000374

08100604 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100604:	b580      	push	{r7, lr}
 8100606:	b08a      	sub	sp, #40	; 0x28
 8100608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 810060a:	463b      	mov	r3, r7
 810060c:	2228      	movs	r2, #40	; 0x28
 810060e:	2100      	movs	r1, #0
 8100610:	4618      	mov	r0, r3
 8100612:	f007 f85b 	bl	81076cc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100616:	4b25      	ldr	r3, [pc, #148]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 8100618:	4a25      	ldr	r2, [pc, #148]	; (81006b0 <_ZL11MX_RTC_Initv+0xac>)
 810061a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 810061c:	4b23      	ldr	r3, [pc, #140]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 810061e:	2200      	movs	r2, #0
 8100620:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100622:	4b22      	ldr	r3, [pc, #136]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 8100624:	227f      	movs	r2, #127	; 0x7f
 8100626:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100628:	4b20      	ldr	r3, [pc, #128]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 810062a:	22ff      	movs	r2, #255	; 0xff
 810062c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 810062e:	4b1f      	ldr	r3, [pc, #124]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 8100630:	2200      	movs	r2, #0
 8100632:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100634:	4b1d      	ldr	r3, [pc, #116]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 8100636:	2200      	movs	r2, #0
 8100638:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 810063a:	4b1c      	ldr	r3, [pc, #112]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 810063c:	2200      	movs	r2, #0
 810063e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100640:	4b1a      	ldr	r3, [pc, #104]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 8100642:	2200      	movs	r2, #0
 8100644:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100646:	4819      	ldr	r0, [pc, #100]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 8100648:	f005 fb06 	bl	8105c58 <HAL_RTC_Init>
 810064c:	4603      	mov	r3, r0
 810064e:	2b00      	cmp	r3, #0
 8100650:	bf14      	ite	ne
 8100652:	2301      	movne	r3, #1
 8100654:	2300      	moveq	r3, #0
 8100656:	b2db      	uxtb	r3, r3
 8100658:	2b00      	cmp	r3, #0
 810065a:	d001      	beq.n	8100660 <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 810065c:	f000 faa6 	bl	8100bac <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100660:	2301      	movs	r3, #1
 8100662:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100664:	2301      	movs	r3, #1
 8100666:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100668:	2300      	movs	r3, #0
 810066a:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 810066c:	2300      	movs	r3, #0
 810066e:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100670:	2300      	movs	r3, #0
 8100672:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100674:	2300      	movs	r3, #0
 8100676:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100678:	2300      	movs	r3, #0
 810067a:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 810067c:	2300      	movs	r3, #0
 810067e:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100680:	2380      	movs	r3, #128	; 0x80
 8100682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100684:	463b      	mov	r3, r7
 8100686:	4619      	mov	r1, r3
 8100688:	4808      	ldr	r0, [pc, #32]	; (81006ac <_ZL11MX_RTC_Initv+0xa8>)
 810068a:	f005 fbfd 	bl	8105e88 <HAL_RTCEx_SetTamper>
 810068e:	4603      	mov	r3, r0
 8100690:	2b00      	cmp	r3, #0
 8100692:	bf14      	ite	ne
 8100694:	2301      	movne	r3, #1
 8100696:	2300      	moveq	r3, #0
 8100698:	b2db      	uxtb	r3, r3
 810069a:	2b00      	cmp	r3, #0
 810069c:	d001      	beq.n	81006a2 <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 810069e:	f000 fa85 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 81006a2:	bf00      	nop
 81006a4:	3728      	adds	r7, #40	; 0x28
 81006a6:	46bd      	mov	sp, r7
 81006a8:	bd80      	pop	{r7, pc}
 81006aa:	bf00      	nop
 81006ac:	10000138 	.word	0x10000138
 81006b0:	58004000 	.word	0x58004000

081006b4 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 81006b4:	b580      	push	{r7, lr}
 81006b6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 81006b8:	4b4c      	ldr	r3, [pc, #304]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006ba:	4a4d      	ldr	r2, [pc, #308]	; (81007f0 <_ZL12MX_SAI1_Initv+0x13c>)
 81006bc:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 81006be:	4b4b      	ldr	r3, [pc, #300]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006c0:	2200      	movs	r2, #0
 81006c2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 81006c4:	4b49      	ldr	r3, [pc, #292]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006c6:	2200      	movs	r2, #0
 81006c8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 81006ca:	4b48      	ldr	r3, [pc, #288]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006cc:	2240      	movs	r2, #64	; 0x40
 81006ce:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 81006d0:	4b46      	ldr	r3, [pc, #280]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006d2:	2200      	movs	r2, #0
 81006d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 81006d6:	4b45      	ldr	r3, [pc, #276]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006d8:	2200      	movs	r2, #0
 81006da:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 81006dc:	4b43      	ldr	r3, [pc, #268]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006de:	2200      	movs	r2, #0
 81006e0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81006e2:	4b42      	ldr	r3, [pc, #264]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006e4:	2200      	movs	r2, #0
 81006e6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 81006e8:	4b40      	ldr	r3, [pc, #256]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006ea:	2200      	movs	r2, #0
 81006ec:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81006ee:	4b3f      	ldr	r3, [pc, #252]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006f0:	2200      	movs	r2, #0
 81006f2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 81006f4:	4b3d      	ldr	r3, [pc, #244]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006f6:	4a3f      	ldr	r2, [pc, #252]	; (81007f4 <_ZL12MX_SAI1_Initv+0x140>)
 81006f8:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81006fa:	4b3c      	ldr	r3, [pc, #240]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 81006fc:	2200      	movs	r2, #0
 81006fe:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100700:	4b3a      	ldr	r3, [pc, #232]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100702:	2200      	movs	r2, #0
 8100704:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100706:	4b39      	ldr	r3, [pc, #228]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100708:	2200      	movs	r2, #0
 810070a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 810070c:	4b37      	ldr	r3, [pc, #220]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 810070e:	2200      	movs	r2, #0
 8100710:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100712:	4b36      	ldr	r3, [pc, #216]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100714:	2200      	movs	r2, #0
 8100716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 810071a:	4b34      	ldr	r3, [pc, #208]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 810071c:	2201      	movs	r2, #1
 810071e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100720:	4b32      	ldr	r3, [pc, #200]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100726:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100728:	4b30      	ldr	r3, [pc, #192]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 810072a:	2208      	movs	r2, #8
 810072c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 810072e:	4b2f      	ldr	r3, [pc, #188]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100730:	2201      	movs	r2, #1
 8100732:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100734:	4b2d      	ldr	r3, [pc, #180]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100736:	2200      	movs	r2, #0
 8100738:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 810073a:	4b2c      	ldr	r3, [pc, #176]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 810073c:	2200      	movs	r2, #0
 810073e:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100740:	4b2a      	ldr	r3, [pc, #168]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100742:	2200      	movs	r2, #0
 8100744:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100746:	4b29      	ldr	r3, [pc, #164]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100748:	2200      	movs	r2, #0
 810074a:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 810074c:	4b27      	ldr	r3, [pc, #156]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 810074e:	2200      	movs	r2, #0
 8100750:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100752:	4b26      	ldr	r3, [pc, #152]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100754:	2201      	movs	r2, #1
 8100756:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100758:	4b24      	ldr	r3, [pc, #144]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 810075a:	2200      	movs	r2, #0
 810075c:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 810075e:	4823      	ldr	r0, [pc, #140]	; (81007ec <_ZL12MX_SAI1_Initv+0x138>)
 8100760:	f005 fc72 	bl	8106048 <HAL_SAI_Init>
 8100764:	4603      	mov	r3, r0
 8100766:	2b00      	cmp	r3, #0
 8100768:	bf14      	ite	ne
 810076a:	2301      	movne	r3, #1
 810076c:	2300      	moveq	r3, #0
 810076e:	b2db      	uxtb	r3, r3
 8100770:	2b00      	cmp	r3, #0
 8100772:	d001      	beq.n	8100778 <_ZL12MX_SAI1_Initv+0xc4>
  {
    Error_Handler();
 8100774:	f000 fa1a 	bl	8100bac <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100778:	4b1f      	ldr	r3, [pc, #124]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 810077a:	4a20      	ldr	r2, [pc, #128]	; (81007fc <_ZL12MX_SAI1_Initv+0x148>)
 810077c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 810077e:	4b1e      	ldr	r3, [pc, #120]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 8100780:	2204      	movs	r2, #4
 8100782:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100784:	4b1c      	ldr	r3, [pc, #112]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 8100786:	2200      	movs	r2, #0
 8100788:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 810078a:	4b1b      	ldr	r3, [pc, #108]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 810078c:	2200      	movs	r2, #0
 810078e:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100790:	4b19      	ldr	r3, [pc, #100]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 8100792:	2200      	movs	r2, #0
 8100794:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100796:	4b18      	ldr	r3, [pc, #96]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 8100798:	2200      	movs	r2, #0
 810079a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 810079c:	4b16      	ldr	r3, [pc, #88]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 810079e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 81007a2:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81007a4:	4b14      	ldr	r3, [pc, #80]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 81007a6:	2200      	movs	r2, #0
 81007a8:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 81007aa:	4b13      	ldr	r3, [pc, #76]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 81007ac:	2200      	movs	r2, #0
 81007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 81007b0:	4b11      	ldr	r3, [pc, #68]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 81007b2:	2200      	movs	r2, #0
 81007b4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 81007b6:	4b10      	ldr	r3, [pc, #64]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 81007b8:	2200      	movs	r2, #0
 81007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 81007be:	4b0e      	ldr	r3, [pc, #56]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 81007c0:	2201      	movs	r2, #1
 81007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81007c4:	4b0c      	ldr	r3, [pc, #48]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 81007c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 81007ca:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 81007cc:	480a      	ldr	r0, [pc, #40]	; (81007f8 <_ZL12MX_SAI1_Initv+0x144>)
 81007ce:	f005 fc3b 	bl	8106048 <HAL_SAI_Init>
 81007d2:	4603      	mov	r3, r0
 81007d4:	2b00      	cmp	r3, #0
 81007d6:	bf14      	ite	ne
 81007d8:	2301      	movne	r3, #1
 81007da:	2300      	moveq	r3, #0
 81007dc:	b2db      	uxtb	r3, r3
 81007de:	2b00      	cmp	r3, #0
 81007e0:	d001      	beq.n	81007e6 <_ZL12MX_SAI1_Initv+0x132>
  {
    Error_Handler();
 81007e2:	f000 f9e3 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 81007e6:	bf00      	nop
 81007e8:	bd80      	pop	{r7, pc}
 81007ea:	bf00      	nop
 81007ec:	1000015c 	.word	0x1000015c
 81007f0:	40015804 	.word	0x40015804
 81007f4:	0002ee00 	.word	0x0002ee00
 81007f8:	100001f4 	.word	0x100001f4
 81007fc:	40015824 	.word	0x40015824

08100800 <_ZL16MX_SPDIFRX1_Initv>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100800:	b580      	push	{r7, lr}
 8100802:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100804:	4b1c      	ldr	r3, [pc, #112]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100806:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 810080a:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 810080c:	4b1a      	ldr	r3, [pc, #104]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810080e:	2200      	movs	r2, #0
 8100810:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100812:	4b19      	ldr	r3, [pc, #100]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100814:	2200      	movs	r2, #0
 8100816:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100818:	4b17      	ldr	r3, [pc, #92]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810081a:	2200      	movs	r2, #0
 810081c:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 810081e:	4b16      	ldr	r3, [pc, #88]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100820:	2200      	movs	r2, #0
 8100822:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100824:	4b14      	ldr	r3, [pc, #80]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100826:	2200      	movs	r2, #0
 8100828:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 810082a:	4b13      	ldr	r3, [pc, #76]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810082c:	2200      	movs	r2, #0
 810082e:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100830:	4b11      	ldr	r3, [pc, #68]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100832:	2200      	movs	r2, #0
 8100834:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100836:	4b10      	ldr	r3, [pc, #64]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100838:	2200      	movs	r2, #0
 810083a:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 810083c:	4b0e      	ldr	r3, [pc, #56]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810083e:	2200      	movs	r2, #0
 8100840:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100842:	4b0d      	ldr	r3, [pc, #52]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100844:	2200      	movs	r2, #0
 8100846:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100848:	4b0b      	ldr	r3, [pc, #44]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810084a:	2200      	movs	r2, #0
 810084c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100850:	4b09      	ldr	r3, [pc, #36]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100852:	2200      	movs	r2, #0
 8100854:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100858:	4807      	ldr	r0, [pc, #28]	; (8100878 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810085a:	f005 fed9 	bl	8106610 <HAL_SPDIFRX_Init>
 810085e:	4603      	mov	r3, r0
 8100860:	2b00      	cmp	r3, #0
 8100862:	bf14      	ite	ne
 8100864:	2301      	movne	r3, #1
 8100866:	2300      	moveq	r3, #0
 8100868:	b2db      	uxtb	r3, r3
 810086a:	2b00      	cmp	r3, #0
 810086c:	d001      	beq.n	8100872 <_ZL16MX_SPDIFRX1_Initv+0x72>
  {
    Error_Handler();
 810086e:	f000 f99d 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100872:	bf00      	nop
 8100874:	bd80      	pop	{r7, pc}
 8100876:	bf00      	nop
 8100878:	1000028c 	.word	0x1000028c

0810087c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 810087c:	b580      	push	{r7, lr}
 810087e:	b096      	sub	sp, #88	; 0x58
 8100880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100882:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100886:	2200      	movs	r2, #0
 8100888:	601a      	str	r2, [r3, #0]
 810088a:	605a      	str	r2, [r3, #4]
 810088c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810088e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100892:	2200      	movs	r2, #0
 8100894:	601a      	str	r2, [r3, #0]
 8100896:	605a      	str	r2, [r3, #4]
 8100898:	609a      	str	r2, [r3, #8]
 810089a:	60da      	str	r2, [r3, #12]
 810089c:	611a      	str	r2, [r3, #16]
 810089e:	615a      	str	r2, [r3, #20]
 81008a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 81008a2:	1d3b      	adds	r3, r7, #4
 81008a4:	222c      	movs	r2, #44	; 0x2c
 81008a6:	2100      	movs	r1, #0
 81008a8:	4618      	mov	r0, r3
 81008aa:	f006 ff0f 	bl	81076cc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 81008ae:	4b43      	ldr	r3, [pc, #268]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008b0:	4a43      	ldr	r2, [pc, #268]	; (81009c0 <_ZL12MX_TIM8_Initv+0x144>)
 81008b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 81008b4:	4b41      	ldr	r3, [pc, #260]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008b6:	2200      	movs	r2, #0
 81008b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 81008ba:	4b40      	ldr	r3, [pc, #256]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008bc:	2200      	movs	r2, #0
 81008be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 81008c0:	4b3e      	ldr	r3, [pc, #248]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81008c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81008c8:	4b3c      	ldr	r3, [pc, #240]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008ca:	2200      	movs	r2, #0
 81008cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 81008ce:	4b3b      	ldr	r3, [pc, #236]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008d0:	2200      	movs	r2, #0
 81008d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81008d4:	4b39      	ldr	r3, [pc, #228]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008d6:	2200      	movs	r2, #0
 81008d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 81008da:	4838      	ldr	r0, [pc, #224]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81008dc:	f005 ff5d 	bl	810679a <HAL_TIM_OC_Init>
 81008e0:	4603      	mov	r3, r0
 81008e2:	2b00      	cmp	r3, #0
 81008e4:	bf14      	ite	ne
 81008e6:	2301      	movne	r3, #1
 81008e8:	2300      	moveq	r3, #0
 81008ea:	b2db      	uxtb	r3, r3
 81008ec:	2b00      	cmp	r3, #0
 81008ee:	d001      	beq.n	81008f4 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 81008f0:	f000 f95c 	bl	8100bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81008f4:	2300      	movs	r3, #0
 81008f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81008f8:	2300      	movs	r3, #0
 81008fa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81008fc:	2300      	movs	r3, #0
 81008fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100900:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100904:	4619      	mov	r1, r3
 8100906:	482d      	ldr	r0, [pc, #180]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 8100908:	f006 fdb0 	bl	810746c <HAL_TIMEx_MasterConfigSynchronization>
 810090c:	4603      	mov	r3, r0
 810090e:	2b00      	cmp	r3, #0
 8100910:	bf14      	ite	ne
 8100912:	2301      	movne	r3, #1
 8100914:	2300      	moveq	r3, #0
 8100916:	b2db      	uxtb	r3, r3
 8100918:	2b00      	cmp	r3, #0
 810091a:	d001      	beq.n	8100920 <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 810091c:	f000 f946 	bl	8100bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100920:	2300      	movs	r3, #0
 8100922:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8100924:	2300      	movs	r3, #0
 8100926:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100928:	2300      	movs	r3, #0
 810092a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810092c:	2300      	movs	r3, #0
 810092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100930:	2300      	movs	r3, #0
 8100932:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100934:	2300      	movs	r3, #0
 8100936:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100938:	2300      	movs	r3, #0
 810093a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810093c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100940:	2204      	movs	r2, #4
 8100942:	4619      	mov	r1, r3
 8100944:	481d      	ldr	r0, [pc, #116]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 8100946:	f005 ffe1 	bl	810690c <HAL_TIM_OC_ConfigChannel>
 810094a:	4603      	mov	r3, r0
 810094c:	2b00      	cmp	r3, #0
 810094e:	bf14      	ite	ne
 8100950:	2301      	movne	r3, #1
 8100952:	2300      	moveq	r3, #0
 8100954:	b2db      	uxtb	r3, r3
 8100956:	2b00      	cmp	r3, #0
 8100958:	d001      	beq.n	810095e <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 810095a:	f000 f927 	bl	8100bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810095e:	2300      	movs	r3, #0
 8100960:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100962:	2300      	movs	r3, #0
 8100964:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100966:	2300      	movs	r3, #0
 8100968:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 810096a:	2300      	movs	r3, #0
 810096c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810096e:	2300      	movs	r3, #0
 8100970:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100976:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100978:	2300      	movs	r3, #0
 810097a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810097c:	2300      	movs	r3, #0
 810097e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100984:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100986:	2300      	movs	r3, #0
 8100988:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 810098a:	2300      	movs	r3, #0
 810098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 810098e:	1d3b      	adds	r3, r7, #4
 8100990:	4619      	mov	r1, r3
 8100992:	480a      	ldr	r0, [pc, #40]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 8100994:	f006 fdf8 	bl	8107588 <HAL_TIMEx_ConfigBreakDeadTime>
 8100998:	4603      	mov	r3, r0
 810099a:	2b00      	cmp	r3, #0
 810099c:	bf14      	ite	ne
 810099e:	2301      	movne	r3, #1
 81009a0:	2300      	moveq	r3, #0
 81009a2:	b2db      	uxtb	r3, r3
 81009a4:	2b00      	cmp	r3, #0
 81009a6:	d001      	beq.n	81009ac <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 81009a8:	f000 f900 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 81009ac:	4803      	ldr	r0, [pc, #12]	; (81009bc <_ZL12MX_TIM8_Initv+0x140>)
 81009ae:	f000 fb09 	bl	8100fc4 <HAL_TIM_MspPostInit>

}
 81009b2:	bf00      	nop
 81009b4:	3758      	adds	r7, #88	; 0x58
 81009b6:	46bd      	mov	sp, r7
 81009b8:	bd80      	pop	{r7, pc}
 81009ba:	bf00      	nop
 81009bc:	100002dc 	.word	0x100002dc
 81009c0:	40010400 	.word	0x40010400

081009c4 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 81009c4:	b580      	push	{r7, lr}
 81009c6:	b084      	sub	sp, #16
 81009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 81009ca:	463b      	mov	r3, r7
 81009cc:	2200      	movs	r2, #0
 81009ce:	601a      	str	r2, [r3, #0]
 81009d0:	605a      	str	r2, [r3, #4]
 81009d2:	609a      	str	r2, [r3, #8]
 81009d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 81009d6:	4b24      	ldr	r3, [pc, #144]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 81009d8:	4a24      	ldr	r2, [pc, #144]	; (8100a6c <_ZL13MX_TIM13_Initv+0xa8>)
 81009da:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 81009dc:	4b22      	ldr	r3, [pc, #136]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 81009de:	2200      	movs	r2, #0
 81009e0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 81009e2:	4b21      	ldr	r3, [pc, #132]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 81009e4:	2200      	movs	r2, #0
 81009e6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 81009e8:	4b1f      	ldr	r3, [pc, #124]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 81009ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81009ee:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81009f0:	4b1d      	ldr	r3, [pc, #116]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 81009f2:	2200      	movs	r2, #0
 81009f4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81009f6:	4b1c      	ldr	r3, [pc, #112]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 81009f8:	2200      	movs	r2, #0
 81009fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 81009fc:	481a      	ldr	r0, [pc, #104]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 81009fe:	f005 fe75 	bl	81066ec <HAL_TIM_Base_Init>
 8100a02:	4603      	mov	r3, r0
 8100a04:	2b00      	cmp	r3, #0
 8100a06:	bf14      	ite	ne
 8100a08:	2301      	movne	r3, #1
 8100a0a:	2300      	moveq	r3, #0
 8100a0c:	b2db      	uxtb	r3, r3
 8100a0e:	2b00      	cmp	r3, #0
 8100a10:	d001      	beq.n	8100a16 <_ZL13MX_TIM13_Initv+0x52>
  {
    Error_Handler();
 8100a12:	f000 f8cb 	bl	8100bac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100a16:	4814      	ldr	r0, [pc, #80]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 8100a18:	f005 ff16 	bl	8106848 <HAL_TIM_IC_Init>
 8100a1c:	4603      	mov	r3, r0
 8100a1e:	2b00      	cmp	r3, #0
 8100a20:	bf14      	ite	ne
 8100a22:	2301      	movne	r3, #1
 8100a24:	2300      	moveq	r3, #0
 8100a26:	b2db      	uxtb	r3, r3
 8100a28:	2b00      	cmp	r3, #0
 8100a2a:	d001      	beq.n	8100a30 <_ZL13MX_TIM13_Initv+0x6c>
  {
    Error_Handler();
 8100a2c:	f000 f8be 	bl	8100bac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100a30:	2300      	movs	r3, #0
 8100a32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100a34:	2301      	movs	r3, #1
 8100a36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100a38:	2300      	movs	r3, #0
 8100a3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100a3c:	2300      	movs	r3, #0
 8100a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100a40:	463b      	mov	r3, r7
 8100a42:	2200      	movs	r2, #0
 8100a44:	4619      	mov	r1, r3
 8100a46:	4808      	ldr	r0, [pc, #32]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa4>)
 8100a48:	f005 ffda 	bl	8106a00 <HAL_TIM_IC_ConfigChannel>
 8100a4c:	4603      	mov	r3, r0
 8100a4e:	2b00      	cmp	r3, #0
 8100a50:	bf14      	ite	ne
 8100a52:	2301      	movne	r3, #1
 8100a54:	2300      	moveq	r3, #0
 8100a56:	b2db      	uxtb	r3, r3
 8100a58:	2b00      	cmp	r3, #0
 8100a5a:	d001      	beq.n	8100a60 <_ZL13MX_TIM13_Initv+0x9c>
  {
    Error_Handler();
 8100a5c:	f000 f8a6 	bl	8100bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100a60:	bf00      	nop
 8100a62:	3710      	adds	r7, #16
 8100a64:	46bd      	mov	sp, r7
 8100a66:	bd80      	pop	{r7, pc}
 8100a68:	10000328 	.word	0x10000328
 8100a6c:	40001c00 	.word	0x40001c00

08100a70 <_ZL12MX_MDMA_Initv>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8100a70:	b480      	push	{r7}
 8100a72:	b083      	sub	sp, #12
 8100a74:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8100a76:	4b0a      	ldr	r3, [pc, #40]	; (8100aa0 <_ZL12MX_MDMA_Initv+0x30>)
 8100a78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100a7c:	4a08      	ldr	r2, [pc, #32]	; (8100aa0 <_ZL12MX_MDMA_Initv+0x30>)
 8100a7e:	f043 0301 	orr.w	r3, r3, #1
 8100a82:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8100a86:	4b06      	ldr	r3, [pc, #24]	; (8100aa0 <_ZL12MX_MDMA_Initv+0x30>)
 8100a88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8100a8c:	f003 0301 	and.w	r3, r3, #1
 8100a90:	607b      	str	r3, [r7, #4]
 8100a92:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8100a94:	bf00      	nop
 8100a96:	370c      	adds	r7, #12
 8100a98:	46bd      	mov	sp, r7
 8100a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a9e:	4770      	bx	lr
 8100aa0:	58024400 	.word	0x58024400

08100aa4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100aa4:	b480      	push	{r7}
 8100aa6:	b089      	sub	sp, #36	; 0x24
 8100aa8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100aaa:	4b3f      	ldr	r3, [pc, #252]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ab0:	4a3d      	ldr	r2, [pc, #244]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100ab2:	f043 0302 	orr.w	r3, r3, #2
 8100ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100aba:	4b3b      	ldr	r3, [pc, #236]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ac0:	f003 0302 	and.w	r3, r3, #2
 8100ac4:	61fb      	str	r3, [r7, #28]
 8100ac6:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ac8:	4b37      	ldr	r3, [pc, #220]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ace:	4a36      	ldr	r2, [pc, #216]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100ad0:	f043 0308 	orr.w	r3, r3, #8
 8100ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ad8:	4b33      	ldr	r3, [pc, #204]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ade:	f003 0308 	and.w	r3, r3, #8
 8100ae2:	61bb      	str	r3, [r7, #24]
 8100ae4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100ae6:	4b30      	ldr	r3, [pc, #192]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100aec:	4a2e      	ldr	r2, [pc, #184]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100aee:	f043 0310 	orr.w	r3, r3, #16
 8100af2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100af6:	4b2c      	ldr	r3, [pc, #176]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100afc:	f003 0310 	and.w	r3, r3, #16
 8100b00:	617b      	str	r3, [r7, #20]
 8100b02:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100b04:	4b28      	ldr	r3, [pc, #160]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b0a:	4a27      	ldr	r2, [pc, #156]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b0c:	f043 0304 	orr.w	r3, r3, #4
 8100b10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b14:	4b24      	ldr	r3, [pc, #144]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b1a:	f003 0304 	and.w	r3, r3, #4
 8100b1e:	613b      	str	r3, [r7, #16]
 8100b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100b22:	4b21      	ldr	r3, [pc, #132]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b28:	4a1f      	ldr	r2, [pc, #124]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b32:	4b1d      	ldr	r3, [pc, #116]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100b3c:	60fb      	str	r3, [r7, #12]
 8100b3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b40:	4b19      	ldr	r3, [pc, #100]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b46:	4a18      	ldr	r2, [pc, #96]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b48:	f043 0320 	orr.w	r3, r3, #32
 8100b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b50:	4b15      	ldr	r3, [pc, #84]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b56:	f003 0320 	and.w	r3, r3, #32
 8100b5a:	60bb      	str	r3, [r7, #8]
 8100b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100b5e:	4b12      	ldr	r3, [pc, #72]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b64:	4a10      	ldr	r2, [pc, #64]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b6e:	4b0e      	ldr	r3, [pc, #56]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100b78:	607b      	str	r3, [r7, #4]
 8100b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b7c:	4b0a      	ldr	r3, [pc, #40]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b82:	4a09      	ldr	r2, [pc, #36]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b84:	f043 0301 	orr.w	r3, r3, #1
 8100b88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b8c:	4b06      	ldr	r3, [pc, #24]	; (8100ba8 <_ZL12MX_GPIO_Initv+0x104>)
 8100b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b92:	f003 0301 	and.w	r3, r3, #1
 8100b96:	603b      	str	r3, [r7, #0]
 8100b98:	683b      	ldr	r3, [r7, #0]

}
 8100b9a:	bf00      	nop
 8100b9c:	3724      	adds	r7, #36	; 0x24
 8100b9e:	46bd      	mov	sp, r7
 8100ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ba4:	4770      	bx	lr
 8100ba6:	bf00      	nop
 8100ba8:	58024400 	.word	0x58024400

08100bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100bac:	b480      	push	{r7}
 8100bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100bb0:	b672      	cpsid	i
}
 8100bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100bb4:	e7fe      	b.n	8100bb4 <Error_Handler+0x8>
	...

08100bb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100bb8:	b480      	push	{r7}
 8100bba:	b083      	sub	sp, #12
 8100bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100bbe:	4b0a      	ldr	r3, [pc, #40]	; (8100be8 <HAL_MspInit+0x30>)
 8100bc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100bc4:	4a08      	ldr	r2, [pc, #32]	; (8100be8 <HAL_MspInit+0x30>)
 8100bc6:	f043 0302 	orr.w	r3, r3, #2
 8100bca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100bce:	4b06      	ldr	r3, [pc, #24]	; (8100be8 <HAL_MspInit+0x30>)
 8100bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100bd4:	f003 0302 	and.w	r3, r3, #2
 8100bd8:	607b      	str	r3, [r7, #4]
 8100bda:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100bdc:	bf00      	nop
 8100bde:	370c      	adds	r7, #12
 8100be0:	46bd      	mov	sp, r7
 8100be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100be6:	4770      	bx	lr
 8100be8:	58024400 	.word	0x58024400

08100bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8100bec:	b580      	push	{r7, lr}
 8100bee:	b08c      	sub	sp, #48	; 0x30
 8100bf0:	af00      	add	r7, sp, #0
 8100bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100bf4:	f107 031c 	add.w	r3, r7, #28
 8100bf8:	2200      	movs	r2, #0
 8100bfa:	601a      	str	r2, [r3, #0]
 8100bfc:	605a      	str	r2, [r3, #4]
 8100bfe:	609a      	str	r2, [r3, #8]
 8100c00:	60da      	str	r2, [r3, #12]
 8100c02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8100c04:	687b      	ldr	r3, [r7, #4]
 8100c06:	681b      	ldr	r3, [r3, #0]
 8100c08:	4a3e      	ldr	r2, [pc, #248]	; (8100d04 <HAL_ADC_MspInit+0x118>)
 8100c0a:	4293      	cmp	r3, r2
 8100c0c:	d12a      	bne.n	8100c64 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100c0e:	4b3e      	ldr	r3, [pc, #248]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100c14:	4a3c      	ldr	r2, [pc, #240]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c16:	f043 0320 	orr.w	r3, r3, #32
 8100c1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100c1e:	4b3a      	ldr	r3, [pc, #232]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100c24:	f003 0320 	and.w	r3, r3, #32
 8100c28:	61bb      	str	r3, [r7, #24]
 8100c2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100c2c:	4b36      	ldr	r3, [pc, #216]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c32:	4a35      	ldr	r2, [pc, #212]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c34:	f043 0301 	orr.w	r3, r3, #1
 8100c38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c3c:	4b32      	ldr	r3, [pc, #200]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c42:	f003 0301 	and.w	r3, r3, #1
 8100c46:	617b      	str	r3, [r7, #20]
 8100c48:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100c4a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8100c4e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8100c52:	f000 fb8d 	bl	8101370 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8100c56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8100c5a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8100c5e:	f000 fb87 	bl	8101370 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8100c62:	e04a      	b.n	8100cfa <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 8100c64:	687b      	ldr	r3, [r7, #4]
 8100c66:	681b      	ldr	r3, [r3, #0]
 8100c68:	4a28      	ldr	r2, [pc, #160]	; (8100d0c <HAL_ADC_MspInit+0x120>)
 8100c6a:	4293      	cmp	r3, r2
 8100c6c:	d145      	bne.n	8100cfa <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8100c6e:	4b26      	ldr	r3, [pc, #152]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c74:	4a24      	ldr	r2, [pc, #144]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8100c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c7e:	4b22      	ldr	r3, [pc, #136]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8100c88:	613b      	str	r3, [r7, #16]
 8100c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100c8c:	4b1e      	ldr	r3, [pc, #120]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c92:	4a1d      	ldr	r2, [pc, #116]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c94:	f043 0320 	orr.w	r3, r3, #32
 8100c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c9c:	4b1a      	ldr	r3, [pc, #104]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ca2:	f003 0320 	and.w	r3, r3, #32
 8100ca6:	60fb      	str	r3, [r7, #12]
 8100ca8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100caa:	4b17      	ldr	r3, [pc, #92]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cb0:	4a15      	ldr	r2, [pc, #84]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100cb2:	f043 0304 	orr.w	r3, r3, #4
 8100cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cba:	4b13      	ldr	r3, [pc, #76]	; (8100d08 <HAL_ADC_MspInit+0x11c>)
 8100cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cc0:	f003 0304 	and.w	r3, r3, #4
 8100cc4:	60bb      	str	r3, [r7, #8]
 8100cc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8100cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8100cce:	2303      	movs	r3, #3
 8100cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cd2:	2300      	movs	r3, #0
 8100cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8100cd6:	f107 031c 	add.w	r3, r7, #28
 8100cda:	4619      	mov	r1, r3
 8100cdc:	480c      	ldr	r0, [pc, #48]	; (8100d10 <HAL_ADC_MspInit+0x124>)
 8100cde:	f001 fe71 	bl	81029c4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8100ce2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8100ce6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8100cea:	f000 fb41 	bl	8101370 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8100cee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8100cf2:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8100cf6:	f000 fb3b 	bl	8101370 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8100cfa:	bf00      	nop
 8100cfc:	3730      	adds	r7, #48	; 0x30
 8100cfe:	46bd      	mov	sp, r7
 8100d00:	bd80      	pop	{r7, pc}
 8100d02:	bf00      	nop
 8100d04:	40022000 	.word	0x40022000
 8100d08:	58024400 	.word	0x58024400
 8100d0c:	58026000 	.word	0x58026000
 8100d10:	58021400 	.word	0x58021400

08100d14 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8100d14:	b580      	push	{r7, lr}
 8100d16:	b0bc      	sub	sp, #240	; 0xf0
 8100d18:	af00      	add	r7, sp, #0
 8100d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100d1c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100d20:	2200      	movs	r2, #0
 8100d22:	601a      	str	r2, [r3, #0]
 8100d24:	605a      	str	r2, [r3, #4]
 8100d26:	609a      	str	r2, [r3, #8]
 8100d28:	60da      	str	r2, [r3, #12]
 8100d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100d2c:	f107 0310 	add.w	r3, r7, #16
 8100d30:	22c8      	movs	r2, #200	; 0xc8
 8100d32:	2100      	movs	r1, #0
 8100d34:	4618      	mov	r0, r3
 8100d36:	f006 fcc9 	bl	81076cc <memset>
  if(hcec->Instance==CEC)
 8100d3a:	687b      	ldr	r3, [r7, #4]
 8100d3c:	681b      	ldr	r3, [r3, #0]
 8100d3e:	4a2b      	ldr	r2, [pc, #172]	; (8100dec <HAL_CEC_MspInit+0xd8>)
 8100d40:	4293      	cmp	r3, r2
 8100d42:	d14e      	bne.n	8100de2 <HAL_CEC_MspInit+0xce>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8100d44:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8100d48:	f04f 0300 	mov.w	r3, #0
 8100d4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8100d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d58:	f107 0310 	add.w	r3, r7, #16
 8100d5c:	4618      	mov	r0, r3
 8100d5e:	f002 fa3d 	bl	81031dc <HAL_RCCEx_PeriphCLKConfig>
 8100d62:	4603      	mov	r3, r0
 8100d64:	2b00      	cmp	r3, #0
 8100d66:	d001      	beq.n	8100d6c <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8100d68:	f7ff ff20 	bl	8100bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8100d6c:	4b20      	ldr	r3, [pc, #128]	; (8100df0 <HAL_CEC_MspInit+0xdc>)
 8100d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d72:	4a1f      	ldr	r2, [pc, #124]	; (8100df0 <HAL_CEC_MspInit+0xdc>)
 8100d74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8100d78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100d7c:	4b1c      	ldr	r3, [pc, #112]	; (8100df0 <HAL_CEC_MspInit+0xdc>)
 8100d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8100d86:	60fb      	str	r3, [r7, #12]
 8100d88:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100d8a:	4b19      	ldr	r3, [pc, #100]	; (8100df0 <HAL_CEC_MspInit+0xdc>)
 8100d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d90:	4a17      	ldr	r2, [pc, #92]	; (8100df0 <HAL_CEC_MspInit+0xdc>)
 8100d92:	f043 0302 	orr.w	r3, r3, #2
 8100d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d9a:	4b15      	ldr	r3, [pc, #84]	; (8100df0 <HAL_CEC_MspInit+0xdc>)
 8100d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100da0:	f003 0302 	and.w	r3, r3, #2
 8100da4:	60bb      	str	r3, [r7, #8]
 8100da6:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8100da8:	2340      	movs	r3, #64	; 0x40
 8100daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100dae:	2312      	movs	r3, #18
 8100db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100db4:	2300      	movs	r3, #0
 8100db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100dba:	2300      	movs	r3, #0
 8100dbc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8100dc0:	2305      	movs	r3, #5
 8100dc2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8100dc6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100dca:	4619      	mov	r1, r3
 8100dcc:	4809      	ldr	r0, [pc, #36]	; (8100df4 <HAL_CEC_MspInit+0xe0>)
 8100dce:	f001 fdf9 	bl	81029c4 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 8100dd2:	2200      	movs	r2, #0
 8100dd4:	2100      	movs	r1, #0
 8100dd6:	205e      	movs	r0, #94	; 0x5e
 8100dd8:	f001 fdab 	bl	8102932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8100ddc:	205e      	movs	r0, #94	; 0x5e
 8100dde:	f001 fdc2 	bl	8102966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 8100de2:	bf00      	nop
 8100de4:	37f0      	adds	r7, #240	; 0xf0
 8100de6:	46bd      	mov	sp, r7
 8100de8:	bd80      	pop	{r7, pc}
 8100dea:	bf00      	nop
 8100dec:	40006c00 	.word	0x40006c00
 8100df0:	58024400 	.word	0x58024400
 8100df4:	58020400 	.word	0x58020400

08100df8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100df8:	b580      	push	{r7, lr}
 8100dfa:	b0b4      	sub	sp, #208	; 0xd0
 8100dfc:	af00      	add	r7, sp, #0
 8100dfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100e00:	f107 0308 	add.w	r3, r7, #8
 8100e04:	22c8      	movs	r2, #200	; 0xc8
 8100e06:	2100      	movs	r1, #0
 8100e08:	4618      	mov	r0, r3
 8100e0a:	f006 fc5f 	bl	81076cc <memset>
  if(hrtc->Instance==RTC)
 8100e0e:	687b      	ldr	r3, [r7, #4]
 8100e10:	681b      	ldr	r3, [r3, #0]
 8100e12:	4a10      	ldr	r2, [pc, #64]	; (8100e54 <HAL_RTC_MspInit+0x5c>)
 8100e14:	4293      	cmp	r3, r2
 8100e16:	d119      	bne.n	8100e4c <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100e18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100e1c:	f04f 0300 	mov.w	r3, #0
 8100e20:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100e24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100e28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100e2c:	f107 0308 	add.w	r3, r7, #8
 8100e30:	4618      	mov	r0, r3
 8100e32:	f002 f9d3 	bl	81031dc <HAL_RCCEx_PeriphCLKConfig>
 8100e36:	4603      	mov	r3, r0
 8100e38:	2b00      	cmp	r3, #0
 8100e3a:	d001      	beq.n	8100e40 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8100e3c:	f7ff feb6 	bl	8100bac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100e40:	4b05      	ldr	r3, [pc, #20]	; (8100e58 <HAL_RTC_MspInit+0x60>)
 8100e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100e44:	4a04      	ldr	r2, [pc, #16]	; (8100e58 <HAL_RTC_MspInit+0x60>)
 8100e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100e4a:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8100e4c:	bf00      	nop
 8100e4e:	37d0      	adds	r7, #208	; 0xd0
 8100e50:	46bd      	mov	sp, r7
 8100e52:	bd80      	pop	{r7, pc}
 8100e54:	58004000 	.word	0x58004000
 8100e58:	58024400 	.word	0x58024400

08100e5c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8100e5c:	b580      	push	{r7, lr}
 8100e5e:	b08a      	sub	sp, #40	; 0x28
 8100e60:	af00      	add	r7, sp, #0
 8100e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e64:	f107 0314 	add.w	r3, r7, #20
 8100e68:	2200      	movs	r2, #0
 8100e6a:	601a      	str	r2, [r3, #0]
 8100e6c:	605a      	str	r2, [r3, #4]
 8100e6e:	609a      	str	r2, [r3, #8]
 8100e70:	60da      	str	r2, [r3, #12]
 8100e72:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8100e74:	687b      	ldr	r3, [r7, #4]
 8100e76:	681b      	ldr	r3, [r3, #0]
 8100e78:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8100e7c:	d12d      	bne.n	8100eda <HAL_SPDIFRX_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8100e7e:	4b19      	ldr	r3, [pc, #100]	; (8100ee4 <HAL_SPDIFRX_MspInit+0x88>)
 8100e80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e84:	4a17      	ldr	r2, [pc, #92]	; (8100ee4 <HAL_SPDIFRX_MspInit+0x88>)
 8100e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100e8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100e8e:	4b15      	ldr	r3, [pc, #84]	; (8100ee4 <HAL_SPDIFRX_MspInit+0x88>)
 8100e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100e98:	613b      	str	r3, [r7, #16]
 8100e9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e9c:	4b11      	ldr	r3, [pc, #68]	; (8100ee4 <HAL_SPDIFRX_MspInit+0x88>)
 8100e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ea2:	4a10      	ldr	r2, [pc, #64]	; (8100ee4 <HAL_SPDIFRX_MspInit+0x88>)
 8100ea4:	f043 0308 	orr.w	r3, r3, #8
 8100ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100eac:	4b0d      	ldr	r3, [pc, #52]	; (8100ee4 <HAL_SPDIFRX_MspInit+0x88>)
 8100eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eb2:	f003 0308 	and.w	r3, r3, #8
 8100eb6:	60fb      	str	r3, [r7, #12]
 8100eb8:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8100eba:	2380      	movs	r3, #128	; 0x80
 8100ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ebe:	2302      	movs	r3, #2
 8100ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ec2:	2300      	movs	r3, #0
 8100ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ec6:	2300      	movs	r3, #0
 8100ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8100eca:	2309      	movs	r3, #9
 8100ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8100ece:	f107 0314 	add.w	r3, r7, #20
 8100ed2:	4619      	mov	r1, r3
 8100ed4:	4804      	ldr	r0, [pc, #16]	; (8100ee8 <HAL_SPDIFRX_MspInit+0x8c>)
 8100ed6:	f001 fd75 	bl	81029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8100eda:	bf00      	nop
 8100edc:	3728      	adds	r7, #40	; 0x28
 8100ede:	46bd      	mov	sp, r7
 8100ee0:	bd80      	pop	{r7, pc}
 8100ee2:	bf00      	nop
 8100ee4:	58024400 	.word	0x58024400
 8100ee8:	58020c00 	.word	0x58020c00

08100eec <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8100eec:	b480      	push	{r7}
 8100eee:	b085      	sub	sp, #20
 8100ef0:	af00      	add	r7, sp, #0
 8100ef2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8100ef4:	687b      	ldr	r3, [r7, #4]
 8100ef6:	681b      	ldr	r3, [r3, #0]
 8100ef8:	4a0b      	ldr	r2, [pc, #44]	; (8100f28 <HAL_TIM_OC_MspInit+0x3c>)
 8100efa:	4293      	cmp	r3, r2
 8100efc:	d10e      	bne.n	8100f1c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8100efe:	4b0b      	ldr	r3, [pc, #44]	; (8100f2c <HAL_TIM_OC_MspInit+0x40>)
 8100f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f04:	4a09      	ldr	r2, [pc, #36]	; (8100f2c <HAL_TIM_OC_MspInit+0x40>)
 8100f06:	f043 0302 	orr.w	r3, r3, #2
 8100f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100f0e:	4b07      	ldr	r3, [pc, #28]	; (8100f2c <HAL_TIM_OC_MspInit+0x40>)
 8100f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f14:	f003 0302 	and.w	r3, r3, #2
 8100f18:	60fb      	str	r3, [r7, #12]
 8100f1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8100f1c:	bf00      	nop
 8100f1e:	3714      	adds	r7, #20
 8100f20:	46bd      	mov	sp, r7
 8100f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f26:	4770      	bx	lr
 8100f28:	40010400 	.word	0x40010400
 8100f2c:	58024400 	.word	0x58024400

08100f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100f30:	b580      	push	{r7, lr}
 8100f32:	b08a      	sub	sp, #40	; 0x28
 8100f34:	af00      	add	r7, sp, #0
 8100f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f38:	f107 0314 	add.w	r3, r7, #20
 8100f3c:	2200      	movs	r2, #0
 8100f3e:	601a      	str	r2, [r3, #0]
 8100f40:	605a      	str	r2, [r3, #4]
 8100f42:	609a      	str	r2, [r3, #8]
 8100f44:	60da      	str	r2, [r3, #12]
 8100f46:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	681b      	ldr	r3, [r3, #0]
 8100f4c:	4a1a      	ldr	r2, [pc, #104]	; (8100fb8 <HAL_TIM_Base_MspInit+0x88>)
 8100f4e:	4293      	cmp	r3, r2
 8100f50:	d12e      	bne.n	8100fb0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8100f52:	4b1a      	ldr	r3, [pc, #104]	; (8100fbc <HAL_TIM_Base_MspInit+0x8c>)
 8100f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f58:	4a18      	ldr	r2, [pc, #96]	; (8100fbc <HAL_TIM_Base_MspInit+0x8c>)
 8100f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100f5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f62:	4b16      	ldr	r3, [pc, #88]	; (8100fbc <HAL_TIM_Base_MspInit+0x8c>)
 8100f64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100f6c:	613b      	str	r3, [r7, #16]
 8100f6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100f70:	4b12      	ldr	r3, [pc, #72]	; (8100fbc <HAL_TIM_Base_MspInit+0x8c>)
 8100f72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f76:	4a11      	ldr	r2, [pc, #68]	; (8100fbc <HAL_TIM_Base_MspInit+0x8c>)
 8100f78:	f043 0320 	orr.w	r3, r3, #32
 8100f7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f80:	4b0e      	ldr	r3, [pc, #56]	; (8100fbc <HAL_TIM_Base_MspInit+0x8c>)
 8100f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f86:	f003 0320 	and.w	r3, r3, #32
 8100f8a:	60fb      	str	r3, [r7, #12]
 8100f8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8100f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8100f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100f94:	2302      	movs	r3, #2
 8100f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f98:	2300      	movs	r3, #0
 8100f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f9c:	2300      	movs	r3, #0
 8100f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8100fa0:	2309      	movs	r3, #9
 8100fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8100fa4:	f107 0314 	add.w	r3, r7, #20
 8100fa8:	4619      	mov	r1, r3
 8100faa:	4805      	ldr	r0, [pc, #20]	; (8100fc0 <HAL_TIM_Base_MspInit+0x90>)
 8100fac:	f001 fd0a 	bl	81029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8100fb0:	bf00      	nop
 8100fb2:	3728      	adds	r7, #40	; 0x28
 8100fb4:	46bd      	mov	sp, r7
 8100fb6:	bd80      	pop	{r7, pc}
 8100fb8:	40001c00 	.word	0x40001c00
 8100fbc:	58024400 	.word	0x58024400
 8100fc0:	58021400 	.word	0x58021400

08100fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100fc4:	b580      	push	{r7, lr}
 8100fc6:	b088      	sub	sp, #32
 8100fc8:	af00      	add	r7, sp, #0
 8100fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fcc:	f107 030c 	add.w	r3, r7, #12
 8100fd0:	2200      	movs	r2, #0
 8100fd2:	601a      	str	r2, [r3, #0]
 8100fd4:	605a      	str	r2, [r3, #4]
 8100fd6:	609a      	str	r2, [r3, #8]
 8100fd8:	60da      	str	r2, [r3, #12]
 8100fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8100fdc:	687b      	ldr	r3, [r7, #4]
 8100fde:	681b      	ldr	r3, [r3, #0]
 8100fe0:	4a12      	ldr	r2, [pc, #72]	; (810102c <HAL_TIM_MspPostInit+0x68>)
 8100fe2:	4293      	cmp	r3, r2
 8100fe4:	d11e      	bne.n	8101024 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100fe6:	4b12      	ldr	r3, [pc, #72]	; (8101030 <HAL_TIM_MspPostInit+0x6c>)
 8100fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fec:	4a10      	ldr	r2, [pc, #64]	; (8101030 <HAL_TIM_MspPostInit+0x6c>)
 8100fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ff6:	4b0e      	ldr	r3, [pc, #56]	; (8101030 <HAL_TIM_MspPostInit+0x6c>)
 8100ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101000:	60bb      	str	r3, [r7, #8]
 8101002:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8101004:	23c0      	movs	r3, #192	; 0xc0
 8101006:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101008:	2302      	movs	r3, #2
 810100a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810100c:	2300      	movs	r3, #0
 810100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101010:	2300      	movs	r3, #0
 8101012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101014:	2303      	movs	r3, #3
 8101016:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101018:	f107 030c 	add.w	r3, r7, #12
 810101c:	4619      	mov	r1, r3
 810101e:	4805      	ldr	r0, [pc, #20]	; (8101034 <HAL_TIM_MspPostInit+0x70>)
 8101020:	f001 fcd0 	bl	81029c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8101024:	bf00      	nop
 8101026:	3720      	adds	r7, #32
 8101028:	46bd      	mov	sp, r7
 810102a:	bd80      	pop	{r7, pc}
 810102c:	40010400 	.word	0x40010400
 8101030:	58024400 	.word	0x58024400
 8101034:	58022400 	.word	0x58022400

08101038 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101038:	b580      	push	{r7, lr}
 810103a:	b08a      	sub	sp, #40	; 0x28
 810103c:	af00      	add	r7, sp, #0
 810103e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101040:	687b      	ldr	r3, [r7, #4]
 8101042:	681b      	ldr	r3, [r3, #0]
 8101044:	4a35      	ldr	r2, [pc, #212]	; (810111c <HAL_SAI_MspInit+0xe4>)
 8101046:	4293      	cmp	r3, r2
 8101048:	d137      	bne.n	81010ba <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 810104a:	4b35      	ldr	r3, [pc, #212]	; (8101120 <HAL_SAI_MspInit+0xe8>)
 810104c:	681b      	ldr	r3, [r3, #0]
 810104e:	2b00      	cmp	r3, #0
 8101050:	d10e      	bne.n	8101070 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101052:	4b34      	ldr	r3, [pc, #208]	; (8101124 <HAL_SAI_MspInit+0xec>)
 8101054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101058:	4a32      	ldr	r2, [pc, #200]	; (8101124 <HAL_SAI_MspInit+0xec>)
 810105a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810105e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101062:	4b30      	ldr	r3, [pc, #192]	; (8101124 <HAL_SAI_MspInit+0xec>)
 8101064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810106c:	613b      	str	r3, [r7, #16]
 810106e:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8101070:	4b2b      	ldr	r3, [pc, #172]	; (8101120 <HAL_SAI_MspInit+0xe8>)
 8101072:	681b      	ldr	r3, [r3, #0]
 8101074:	3301      	adds	r3, #1
 8101076:	4a2a      	ldr	r2, [pc, #168]	; (8101120 <HAL_SAI_MspInit+0xe8>)
 8101078:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 810107a:	2370      	movs	r3, #112	; 0x70
 810107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810107e:	2302      	movs	r3, #2
 8101080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101082:	2300      	movs	r3, #0
 8101084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101086:	2300      	movs	r3, #0
 8101088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810108a:	2306      	movs	r3, #6
 810108c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810108e:	f107 0314 	add.w	r3, r7, #20
 8101092:	4619      	mov	r1, r3
 8101094:	4824      	ldr	r0, [pc, #144]	; (8101128 <HAL_SAI_MspInit+0xf0>)
 8101096:	f001 fc95 	bl	81029c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 810109a:	2380      	movs	r3, #128	; 0x80
 810109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810109e:	2302      	movs	r3, #2
 81010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010a2:	2300      	movs	r3, #0
 81010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010a6:	2300      	movs	r3, #0
 81010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81010aa:	2306      	movs	r3, #6
 81010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81010ae:	f107 0314 	add.w	r3, r7, #20
 81010b2:	4619      	mov	r1, r3
 81010b4:	481d      	ldr	r0, [pc, #116]	; (810112c <HAL_SAI_MspInit+0xf4>)
 81010b6:	f001 fc85 	bl	81029c4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81010ba:	687b      	ldr	r3, [r7, #4]
 81010bc:	681b      	ldr	r3, [r3, #0]
 81010be:	4a1c      	ldr	r2, [pc, #112]	; (8101130 <HAL_SAI_MspInit+0xf8>)
 81010c0:	4293      	cmp	r3, r2
 81010c2:	d127      	bne.n	8101114 <HAL_SAI_MspInit+0xdc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 81010c4:	4b16      	ldr	r3, [pc, #88]	; (8101120 <HAL_SAI_MspInit+0xe8>)
 81010c6:	681b      	ldr	r3, [r3, #0]
 81010c8:	2b00      	cmp	r3, #0
 81010ca:	d10e      	bne.n	81010ea <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81010cc:	4b15      	ldr	r3, [pc, #84]	; (8101124 <HAL_SAI_MspInit+0xec>)
 81010ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81010d2:	4a14      	ldr	r2, [pc, #80]	; (8101124 <HAL_SAI_MspInit+0xec>)
 81010d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81010d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81010dc:	4b11      	ldr	r3, [pc, #68]	; (8101124 <HAL_SAI_MspInit+0xec>)
 81010de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81010e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81010e6:	60fb      	str	r3, [r7, #12]
 81010e8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 81010ea:	4b0d      	ldr	r3, [pc, #52]	; (8101120 <HAL_SAI_MspInit+0xe8>)
 81010ec:	681b      	ldr	r3, [r3, #0]
 81010ee:	3301      	adds	r3, #1
 81010f0:	4a0b      	ldr	r2, [pc, #44]	; (8101120 <HAL_SAI_MspInit+0xe8>)
 81010f2:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81010f4:	2308      	movs	r3, #8
 81010f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010f8:	2302      	movs	r3, #2
 81010fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010fc:	2300      	movs	r3, #0
 81010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101100:	2300      	movs	r3, #0
 8101102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101104:	2306      	movs	r3, #6
 8101106:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101108:	f107 0314 	add.w	r3, r7, #20
 810110c:	4619      	mov	r1, r3
 810110e:	4806      	ldr	r0, [pc, #24]	; (8101128 <HAL_SAI_MspInit+0xf0>)
 8101110:	f001 fc58 	bl	81029c4 <HAL_GPIO_Init>

    }
}
 8101114:	bf00      	nop
 8101116:	3728      	adds	r7, #40	; 0x28
 8101118:	46bd      	mov	sp, r7
 810111a:	bd80      	pop	{r7, pc}
 810111c:	40015804 	.word	0x40015804
 8101120:	10000384 	.word	0x10000384
 8101124:	58024400 	.word	0x58024400
 8101128:	58021000 	.word	0x58021000
 810112c:	58021800 	.word	0x58021800
 8101130:	40015824 	.word	0x40015824

08101134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101134:	b480      	push	{r7}
 8101136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101138:	e7fe      	b.n	8101138 <NMI_Handler+0x4>

0810113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810113a:	b480      	push	{r7}
 810113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810113e:	e7fe      	b.n	810113e <HardFault_Handler+0x4>

08101140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101140:	b480      	push	{r7}
 8101142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101144:	e7fe      	b.n	8101144 <MemManage_Handler+0x4>

08101146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101146:	b480      	push	{r7}
 8101148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810114a:	e7fe      	b.n	810114a <BusFault_Handler+0x4>

0810114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810114c:	b480      	push	{r7}
 810114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101150:	e7fe      	b.n	8101150 <UsageFault_Handler+0x4>

08101152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101152:	b480      	push	{r7}
 8101154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101156:	bf00      	nop
 8101158:	46bd      	mov	sp, r7
 810115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810115e:	4770      	bx	lr

08101160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101160:	b480      	push	{r7}
 8101162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101164:	bf00      	nop
 8101166:	46bd      	mov	sp, r7
 8101168:	f85d 7b04 	ldr.w	r7, [sp], #4
 810116c:	4770      	bx	lr

0810116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810116e:	b480      	push	{r7}
 8101170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101172:	bf00      	nop
 8101174:	46bd      	mov	sp, r7
 8101176:	f85d 7b04 	ldr.w	r7, [sp], #4
 810117a:	4770      	bx	lr

0810117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810117c:	b580      	push	{r7, lr}
 810117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101180:	f000 f8ca 	bl	8101318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101184:	bf00      	nop
 8101186:	bd80      	pop	{r7, pc}

08101188 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8101188:	b580      	push	{r7, lr}
 810118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 810118c:	4802      	ldr	r0, [pc, #8]	; (8101198 <CEC_IRQHandler+0x10>)
 810118e:	f001 f9f9 	bl	8102584 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8101192:	bf00      	nop
 8101194:	bd80      	pop	{r7, pc}
 8101196:	bf00      	nop
 8101198:	100000f4 	.word	0x100000f4

0810119c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810119c:	f8df d034 	ldr.w	sp, [pc, #52]	; 81011d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81011a0:	f7ff f89a 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81011a4:	480c      	ldr	r0, [pc, #48]	; (81011d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81011a6:	490d      	ldr	r1, [pc, #52]	; (81011dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81011a8:	4a0d      	ldr	r2, [pc, #52]	; (81011e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81011ac:	e002      	b.n	81011b4 <LoopCopyDataInit>

081011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81011b2:	3304      	adds	r3, #4

081011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81011b8:	d3f9      	bcc.n	81011ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81011ba:	4a0a      	ldr	r2, [pc, #40]	; (81011e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81011bc:	4c0a      	ldr	r4, [pc, #40]	; (81011e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 81011c0:	e001      	b.n	81011c6 <LoopFillZerobss>

081011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81011c4:	3204      	adds	r2, #4

081011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81011c8:	d3fb      	bcc.n	81011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81011ca:	f006 fa5b 	bl	8107684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81011ce:	f7ff f89b 	bl	8100308 <main>
  bx  lr
 81011d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81011d4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81011d8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 81011dc:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81011e0:	0810770c 	.word	0x0810770c
  ldr r2, =_sbss
 81011e4:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81011e8:	1000038c 	.word	0x1000038c

081011ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81011ec:	e7fe      	b.n	81011ec <ADC3_IRQHandler>
	...

081011f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81011f0:	b580      	push	{r7, lr}
 81011f2:	b082      	sub	sp, #8
 81011f4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81011f6:	4b28      	ldr	r3, [pc, #160]	; (8101298 <HAL_Init+0xa8>)
 81011f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81011fc:	4a26      	ldr	r2, [pc, #152]	; (8101298 <HAL_Init+0xa8>)
 81011fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101202:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101206:	4b24      	ldr	r3, [pc, #144]	; (8101298 <HAL_Init+0xa8>)
 8101208:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810120c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101210:	603b      	str	r3, [r7, #0]
 8101212:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101214:	4b21      	ldr	r3, [pc, #132]	; (810129c <HAL_Init+0xac>)
 8101216:	681b      	ldr	r3, [r3, #0]
 8101218:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810121c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101220:	4a1e      	ldr	r2, [pc, #120]	; (810129c <HAL_Init+0xac>)
 8101222:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101226:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101228:	4b1c      	ldr	r3, [pc, #112]	; (810129c <HAL_Init+0xac>)
 810122a:	681b      	ldr	r3, [r3, #0]
 810122c:	4a1b      	ldr	r2, [pc, #108]	; (810129c <HAL_Init+0xac>)
 810122e:	f043 0301 	orr.w	r3, r3, #1
 8101232:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101234:	2003      	movs	r0, #3
 8101236:	f001 fb71 	bl	810291c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810123a:	f001 fe0d 	bl	8102e58 <HAL_RCC_GetSysClockFreq>
 810123e:	4602      	mov	r2, r0
 8101240:	4b15      	ldr	r3, [pc, #84]	; (8101298 <HAL_Init+0xa8>)
 8101242:	699b      	ldr	r3, [r3, #24]
 8101244:	0a1b      	lsrs	r3, r3, #8
 8101246:	f003 030f 	and.w	r3, r3, #15
 810124a:	4915      	ldr	r1, [pc, #84]	; (81012a0 <HAL_Init+0xb0>)
 810124c:	5ccb      	ldrb	r3, [r1, r3]
 810124e:	f003 031f 	and.w	r3, r3, #31
 8101252:	fa22 f303 	lsr.w	r3, r2, r3
 8101256:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101258:	4b0f      	ldr	r3, [pc, #60]	; (8101298 <HAL_Init+0xa8>)
 810125a:	699b      	ldr	r3, [r3, #24]
 810125c:	f003 030f 	and.w	r3, r3, #15
 8101260:	4a0f      	ldr	r2, [pc, #60]	; (81012a0 <HAL_Init+0xb0>)
 8101262:	5cd3      	ldrb	r3, [r2, r3]
 8101264:	f003 031f 	and.w	r3, r3, #31
 8101268:	687a      	ldr	r2, [r7, #4]
 810126a:	fa22 f303 	lsr.w	r3, r2, r3
 810126e:	4a0d      	ldr	r2, [pc, #52]	; (81012a4 <HAL_Init+0xb4>)
 8101270:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101272:	4b0c      	ldr	r3, [pc, #48]	; (81012a4 <HAL_Init+0xb4>)
 8101274:	681b      	ldr	r3, [r3, #0]
 8101276:	4a0c      	ldr	r2, [pc, #48]	; (81012a8 <HAL_Init+0xb8>)
 8101278:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810127a:	2000      	movs	r0, #0
 810127c:	f000 f816 	bl	81012ac <HAL_InitTick>
 8101280:	4603      	mov	r3, r0
 8101282:	2b00      	cmp	r3, #0
 8101284:	d001      	beq.n	810128a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101286:	2301      	movs	r3, #1
 8101288:	e002      	b.n	8101290 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810128a:	f7ff fc95 	bl	8100bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810128e:	2300      	movs	r3, #0
}
 8101290:	4618      	mov	r0, r3
 8101292:	3708      	adds	r7, #8
 8101294:	46bd      	mov	sp, r7
 8101296:	bd80      	pop	{r7, pc}
 8101298:	58024400 	.word	0x58024400
 810129c:	40024400 	.word	0x40024400
 81012a0:	081076f4 	.word	0x081076f4
 81012a4:	10000004 	.word	0x10000004
 81012a8:	10000000 	.word	0x10000000

081012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81012ac:	b580      	push	{r7, lr}
 81012ae:	b082      	sub	sp, #8
 81012b0:	af00      	add	r7, sp, #0
 81012b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81012b4:	4b15      	ldr	r3, [pc, #84]	; (810130c <HAL_InitTick+0x60>)
 81012b6:	781b      	ldrb	r3, [r3, #0]
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	d101      	bne.n	81012c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81012bc:	2301      	movs	r3, #1
 81012be:	e021      	b.n	8101304 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81012c0:	4b13      	ldr	r3, [pc, #76]	; (8101310 <HAL_InitTick+0x64>)
 81012c2:	681a      	ldr	r2, [r3, #0]
 81012c4:	4b11      	ldr	r3, [pc, #68]	; (810130c <HAL_InitTick+0x60>)
 81012c6:	781b      	ldrb	r3, [r3, #0]
 81012c8:	4619      	mov	r1, r3
 81012ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012ce:	fbb3 f3f1 	udiv	r3, r3, r1
 81012d2:	fbb2 f3f3 	udiv	r3, r2, r3
 81012d6:	4618      	mov	r0, r3
 81012d8:	f001 fb53 	bl	8102982 <HAL_SYSTICK_Config>
 81012dc:	4603      	mov	r3, r0
 81012de:	2b00      	cmp	r3, #0
 81012e0:	d001      	beq.n	81012e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81012e2:	2301      	movs	r3, #1
 81012e4:	e00e      	b.n	8101304 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81012e6:	687b      	ldr	r3, [r7, #4]
 81012e8:	2b0f      	cmp	r3, #15
 81012ea:	d80a      	bhi.n	8101302 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81012ec:	2200      	movs	r2, #0
 81012ee:	6879      	ldr	r1, [r7, #4]
 81012f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81012f4:	f001 fb1d 	bl	8102932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81012f8:	4a06      	ldr	r2, [pc, #24]	; (8101314 <HAL_InitTick+0x68>)
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81012fe:	2300      	movs	r3, #0
 8101300:	e000      	b.n	8101304 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101302:	2301      	movs	r3, #1
}
 8101304:	4618      	mov	r0, r3
 8101306:	3708      	adds	r7, #8
 8101308:	46bd      	mov	sp, r7
 810130a:	bd80      	pop	{r7, pc}
 810130c:	1000000c 	.word	0x1000000c
 8101310:	10000000 	.word	0x10000000
 8101314:	10000008 	.word	0x10000008

08101318 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101318:	b480      	push	{r7}
 810131a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810131c:	4b06      	ldr	r3, [pc, #24]	; (8101338 <HAL_IncTick+0x20>)
 810131e:	781b      	ldrb	r3, [r3, #0]
 8101320:	461a      	mov	r2, r3
 8101322:	4b06      	ldr	r3, [pc, #24]	; (810133c <HAL_IncTick+0x24>)
 8101324:	681b      	ldr	r3, [r3, #0]
 8101326:	4413      	add	r3, r2
 8101328:	4a04      	ldr	r2, [pc, #16]	; (810133c <HAL_IncTick+0x24>)
 810132a:	6013      	str	r3, [r2, #0]
}
 810132c:	bf00      	nop
 810132e:	46bd      	mov	sp, r7
 8101330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101334:	4770      	bx	lr
 8101336:	bf00      	nop
 8101338:	1000000c 	.word	0x1000000c
 810133c:	10000388 	.word	0x10000388

08101340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101340:	b480      	push	{r7}
 8101342:	af00      	add	r7, sp, #0
  return uwTick;
 8101344:	4b03      	ldr	r3, [pc, #12]	; (8101354 <HAL_GetTick+0x14>)
 8101346:	681b      	ldr	r3, [r3, #0]
}
 8101348:	4618      	mov	r0, r3
 810134a:	46bd      	mov	sp, r7
 810134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101350:	4770      	bx	lr
 8101352:	bf00      	nop
 8101354:	10000388 	.word	0x10000388

08101358 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101358:	b480      	push	{r7}
 810135a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 810135c:	4b03      	ldr	r3, [pc, #12]	; (810136c <HAL_GetREVID+0x14>)
 810135e:	681b      	ldr	r3, [r3, #0]
 8101360:	0c1b      	lsrs	r3, r3, #16
}
 8101362:	4618      	mov	r0, r3
 8101364:	46bd      	mov	sp, r7
 8101366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136a:	4770      	bx	lr
 810136c:	5c001000 	.word	0x5c001000

08101370 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101370:	b480      	push	{r7}
 8101372:	b083      	sub	sp, #12
 8101374:	af00      	add	r7, sp, #0
 8101376:	6078      	str	r0, [r7, #4]
 8101378:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 810137a:	4b07      	ldr	r3, [pc, #28]	; (8101398 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 810137c:	685a      	ldr	r2, [r3, #4]
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	43db      	mvns	r3, r3
 8101382:	401a      	ands	r2, r3
 8101384:	4904      	ldr	r1, [pc, #16]	; (8101398 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101386:	683b      	ldr	r3, [r7, #0]
 8101388:	4313      	orrs	r3, r2
 810138a:	604b      	str	r3, [r1, #4]
}
 810138c:	bf00      	nop
 810138e:	370c      	adds	r7, #12
 8101390:	46bd      	mov	sp, r7
 8101392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101396:	4770      	bx	lr
 8101398:	58000400 	.word	0x58000400

0810139c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 810139c:	b480      	push	{r7}
 810139e:	b083      	sub	sp, #12
 81013a0:	af00      	add	r7, sp, #0
 81013a2:	6078      	str	r0, [r7, #4]
 81013a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	689b      	ldr	r3, [r3, #8]
 81013aa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81013ae:	683b      	ldr	r3, [r7, #0]
 81013b0:	431a      	orrs	r2, r3
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	609a      	str	r2, [r3, #8]
}
 81013b6:	bf00      	nop
 81013b8:	370c      	adds	r7, #12
 81013ba:	46bd      	mov	sp, r7
 81013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c0:	4770      	bx	lr

081013c2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81013c2:	b480      	push	{r7}
 81013c4:	b083      	sub	sp, #12
 81013c6:	af00      	add	r7, sp, #0
 81013c8:	6078      	str	r0, [r7, #4]
 81013ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81013cc:	687b      	ldr	r3, [r7, #4]
 81013ce:	689b      	ldr	r3, [r3, #8]
 81013d0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81013d4:	683b      	ldr	r3, [r7, #0]
 81013d6:	431a      	orrs	r2, r3
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	609a      	str	r2, [r3, #8]
}
 81013dc:	bf00      	nop
 81013de:	370c      	adds	r7, #12
 81013e0:	46bd      	mov	sp, r7
 81013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e6:	4770      	bx	lr

081013e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81013e8:	b480      	push	{r7}
 81013ea:	b083      	sub	sp, #12
 81013ec:	af00      	add	r7, sp, #0
 81013ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81013f0:	687b      	ldr	r3, [r7, #4]
 81013f2:	689b      	ldr	r3, [r3, #8]
 81013f4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 81013f8:	4618      	mov	r0, r3
 81013fa:	370c      	adds	r7, #12
 81013fc:	46bd      	mov	sp, r7
 81013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101402:	4770      	bx	lr

08101404 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101404:	b480      	push	{r7}
 8101406:	b087      	sub	sp, #28
 8101408:	af00      	add	r7, sp, #0
 810140a:	60f8      	str	r0, [r7, #12]
 810140c:	60b9      	str	r1, [r7, #8]
 810140e:	607a      	str	r2, [r7, #4]
 8101410:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101412:	68fb      	ldr	r3, [r7, #12]
 8101414:	3360      	adds	r3, #96	; 0x60
 8101416:	461a      	mov	r2, r3
 8101418:	68bb      	ldr	r3, [r7, #8]
 810141a:	009b      	lsls	r3, r3, #2
 810141c:	4413      	add	r3, r2
 810141e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101420:	697b      	ldr	r3, [r7, #20]
 8101422:	681b      	ldr	r3, [r3, #0]
 8101424:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101428:	687b      	ldr	r3, [r7, #4]
 810142a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810142e:	683b      	ldr	r3, [r7, #0]
 8101430:	430b      	orrs	r3, r1
 8101432:	431a      	orrs	r2, r3
 8101434:	697b      	ldr	r3, [r7, #20]
 8101436:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101438:	bf00      	nop
 810143a:	371c      	adds	r7, #28
 810143c:	46bd      	mov	sp, r7
 810143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101442:	4770      	bx	lr

08101444 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101444:	b480      	push	{r7}
 8101446:	b085      	sub	sp, #20
 8101448:	af00      	add	r7, sp, #0
 810144a:	60f8      	str	r0, [r7, #12]
 810144c:	60b9      	str	r1, [r7, #8]
 810144e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101450:	68fb      	ldr	r3, [r7, #12]
 8101452:	691b      	ldr	r3, [r3, #16]
 8101454:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101458:	68bb      	ldr	r3, [r7, #8]
 810145a:	f003 031f 	and.w	r3, r3, #31
 810145e:	6879      	ldr	r1, [r7, #4]
 8101460:	fa01 f303 	lsl.w	r3, r1, r3
 8101464:	431a      	orrs	r2, r3
 8101466:	68fb      	ldr	r3, [r7, #12]
 8101468:	611a      	str	r2, [r3, #16]
}
 810146a:	bf00      	nop
 810146c:	3714      	adds	r7, #20
 810146e:	46bd      	mov	sp, r7
 8101470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101474:	4770      	bx	lr

08101476 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101476:	b480      	push	{r7}
 8101478:	b087      	sub	sp, #28
 810147a:	af00      	add	r7, sp, #0
 810147c:	60f8      	str	r0, [r7, #12]
 810147e:	60b9      	str	r1, [r7, #8]
 8101480:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101482:	68fb      	ldr	r3, [r7, #12]
 8101484:	3360      	adds	r3, #96	; 0x60
 8101486:	461a      	mov	r2, r3
 8101488:	68bb      	ldr	r3, [r7, #8]
 810148a:	009b      	lsls	r3, r3, #2
 810148c:	4413      	add	r3, r2
 810148e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8101490:	697b      	ldr	r3, [r7, #20]
 8101492:	681b      	ldr	r3, [r3, #0]
 8101494:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8101498:	687b      	ldr	r3, [r7, #4]
 810149a:	431a      	orrs	r2, r3
 810149c:	697b      	ldr	r3, [r7, #20]
 810149e:	601a      	str	r2, [r3, #0]
  }
}
 81014a0:	bf00      	nop
 81014a2:	371c      	adds	r7, #28
 81014a4:	46bd      	mov	sp, r7
 81014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014aa:	4770      	bx	lr

081014ac <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81014ac:	b480      	push	{r7}
 81014ae:	b087      	sub	sp, #28
 81014b0:	af00      	add	r7, sp, #0
 81014b2:	60f8      	str	r0, [r7, #12]
 81014b4:	60b9      	str	r1, [r7, #8]
 81014b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81014b8:	68fb      	ldr	r3, [r7, #12]
 81014ba:	3330      	adds	r3, #48	; 0x30
 81014bc:	461a      	mov	r2, r3
 81014be:	68bb      	ldr	r3, [r7, #8]
 81014c0:	0a1b      	lsrs	r3, r3, #8
 81014c2:	009b      	lsls	r3, r3, #2
 81014c4:	f003 030c 	and.w	r3, r3, #12
 81014c8:	4413      	add	r3, r2
 81014ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81014cc:	697b      	ldr	r3, [r7, #20]
 81014ce:	681a      	ldr	r2, [r3, #0]
 81014d0:	68bb      	ldr	r3, [r7, #8]
 81014d2:	f003 031f 	and.w	r3, r3, #31
 81014d6:	211f      	movs	r1, #31
 81014d8:	fa01 f303 	lsl.w	r3, r1, r3
 81014dc:	43db      	mvns	r3, r3
 81014de:	401a      	ands	r2, r3
 81014e0:	687b      	ldr	r3, [r7, #4]
 81014e2:	0e9b      	lsrs	r3, r3, #26
 81014e4:	f003 011f 	and.w	r1, r3, #31
 81014e8:	68bb      	ldr	r3, [r7, #8]
 81014ea:	f003 031f 	and.w	r3, r3, #31
 81014ee:	fa01 f303 	lsl.w	r3, r1, r3
 81014f2:	431a      	orrs	r2, r3
 81014f4:	697b      	ldr	r3, [r7, #20]
 81014f6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 81014f8:	bf00      	nop
 81014fa:	371c      	adds	r7, #28
 81014fc:	46bd      	mov	sp, r7
 81014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101502:	4770      	bx	lr

08101504 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101504:	b480      	push	{r7}
 8101506:	b087      	sub	sp, #28
 8101508:	af00      	add	r7, sp, #0
 810150a:	60f8      	str	r0, [r7, #12]
 810150c:	60b9      	str	r1, [r7, #8]
 810150e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8101510:	68fb      	ldr	r3, [r7, #12]
 8101512:	3314      	adds	r3, #20
 8101514:	461a      	mov	r2, r3
 8101516:	68bb      	ldr	r3, [r7, #8]
 8101518:	0e5b      	lsrs	r3, r3, #25
 810151a:	009b      	lsls	r3, r3, #2
 810151c:	f003 0304 	and.w	r3, r3, #4
 8101520:	4413      	add	r3, r2
 8101522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101524:	697b      	ldr	r3, [r7, #20]
 8101526:	681a      	ldr	r2, [r3, #0]
 8101528:	68bb      	ldr	r3, [r7, #8]
 810152a:	0d1b      	lsrs	r3, r3, #20
 810152c:	f003 031f 	and.w	r3, r3, #31
 8101530:	2107      	movs	r1, #7
 8101532:	fa01 f303 	lsl.w	r3, r1, r3
 8101536:	43db      	mvns	r3, r3
 8101538:	401a      	ands	r2, r3
 810153a:	68bb      	ldr	r3, [r7, #8]
 810153c:	0d1b      	lsrs	r3, r3, #20
 810153e:	f003 031f 	and.w	r3, r3, #31
 8101542:	6879      	ldr	r1, [r7, #4]
 8101544:	fa01 f303 	lsl.w	r3, r1, r3
 8101548:	431a      	orrs	r2, r3
 810154a:	697b      	ldr	r3, [r7, #20]
 810154c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810154e:	bf00      	nop
 8101550:	371c      	adds	r7, #28
 8101552:	46bd      	mov	sp, r7
 8101554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101558:	4770      	bx	lr
	...

0810155c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 810155c:	b480      	push	{r7}
 810155e:	b085      	sub	sp, #20
 8101560:	af00      	add	r7, sp, #0
 8101562:	60f8      	str	r0, [r7, #12]
 8101564:	60b9      	str	r1, [r7, #8]
 8101566:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101568:	68fb      	ldr	r3, [r7, #12]
 810156a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 810156e:	68bb      	ldr	r3, [r7, #8]
 8101570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101574:	43db      	mvns	r3, r3
 8101576:	401a      	ands	r2, r3
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	f003 0318 	and.w	r3, r3, #24
 810157e:	4908      	ldr	r1, [pc, #32]	; (81015a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8101580:	40d9      	lsrs	r1, r3
 8101582:	68bb      	ldr	r3, [r7, #8]
 8101584:	400b      	ands	r3, r1
 8101586:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810158a:	431a      	orrs	r2, r3
 810158c:	68fb      	ldr	r3, [r7, #12]
 810158e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8101592:	bf00      	nop
 8101594:	3714      	adds	r7, #20
 8101596:	46bd      	mov	sp, r7
 8101598:	f85d 7b04 	ldr.w	r7, [sp], #4
 810159c:	4770      	bx	lr
 810159e:	bf00      	nop
 81015a0:	000fffff 	.word	0x000fffff

081015a4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81015a4:	b480      	push	{r7}
 81015a6:	b083      	sub	sp, #12
 81015a8:	af00      	add	r7, sp, #0
 81015aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	689b      	ldr	r3, [r3, #8]
 81015b0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81015b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81015b8:	687a      	ldr	r2, [r7, #4]
 81015ba:	6093      	str	r3, [r2, #8]
}
 81015bc:	bf00      	nop
 81015be:	370c      	adds	r7, #12
 81015c0:	46bd      	mov	sp, r7
 81015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c6:	4770      	bx	lr

081015c8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81015c8:	b480      	push	{r7}
 81015ca:	b083      	sub	sp, #12
 81015cc:	af00      	add	r7, sp, #0
 81015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81015d0:	687b      	ldr	r3, [r7, #4]
 81015d2:	689b      	ldr	r3, [r3, #8]
 81015d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81015d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81015dc:	d101      	bne.n	81015e2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 81015de:	2301      	movs	r3, #1
 81015e0:	e000      	b.n	81015e4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 81015e2:	2300      	movs	r3, #0
}
 81015e4:	4618      	mov	r0, r3
 81015e6:	370c      	adds	r7, #12
 81015e8:	46bd      	mov	sp, r7
 81015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ee:	4770      	bx	lr

081015f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81015f0:	b480      	push	{r7}
 81015f2:	b083      	sub	sp, #12
 81015f4:	af00      	add	r7, sp, #0
 81015f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81015f8:	687b      	ldr	r3, [r7, #4]
 81015fa:	689b      	ldr	r3, [r3, #8]
 81015fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8101600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101604:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8101608:	687b      	ldr	r3, [r7, #4]
 810160a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 810160c:	bf00      	nop
 810160e:	370c      	adds	r7, #12
 8101610:	46bd      	mov	sp, r7
 8101612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101616:	4770      	bx	lr

08101618 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101618:	b480      	push	{r7}
 810161a:	b083      	sub	sp, #12
 810161c:	af00      	add	r7, sp, #0
 810161e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	689b      	ldr	r3, [r3, #8]
 8101624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101628:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810162c:	d101      	bne.n	8101632 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 810162e:	2301      	movs	r3, #1
 8101630:	e000      	b.n	8101634 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101632:	2300      	movs	r3, #0
}
 8101634:	4618      	mov	r0, r3
 8101636:	370c      	adds	r7, #12
 8101638:	46bd      	mov	sp, r7
 810163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810163e:	4770      	bx	lr

08101640 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101640:	b480      	push	{r7}
 8101642:	b083      	sub	sp, #12
 8101644:	af00      	add	r7, sp, #0
 8101646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101648:	687b      	ldr	r3, [r7, #4]
 810164a:	689b      	ldr	r3, [r3, #8]
 810164c:	f003 0301 	and.w	r3, r3, #1
 8101650:	2b01      	cmp	r3, #1
 8101652:	d101      	bne.n	8101658 <LL_ADC_IsEnabled+0x18>
 8101654:	2301      	movs	r3, #1
 8101656:	e000      	b.n	810165a <LL_ADC_IsEnabled+0x1a>
 8101658:	2300      	movs	r3, #0
}
 810165a:	4618      	mov	r0, r3
 810165c:	370c      	adds	r7, #12
 810165e:	46bd      	mov	sp, r7
 8101660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101664:	4770      	bx	lr

08101666 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101666:	b480      	push	{r7}
 8101668:	b083      	sub	sp, #12
 810166a:	af00      	add	r7, sp, #0
 810166c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810166e:	687b      	ldr	r3, [r7, #4]
 8101670:	689b      	ldr	r3, [r3, #8]
 8101672:	f003 0304 	and.w	r3, r3, #4
 8101676:	2b04      	cmp	r3, #4
 8101678:	d101      	bne.n	810167e <LL_ADC_REG_IsConversionOngoing+0x18>
 810167a:	2301      	movs	r3, #1
 810167c:	e000      	b.n	8101680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 810167e:	2300      	movs	r3, #0
}
 8101680:	4618      	mov	r0, r3
 8101682:	370c      	adds	r7, #12
 8101684:	46bd      	mov	sp, r7
 8101686:	f85d 7b04 	ldr.w	r7, [sp], #4
 810168a:	4770      	bx	lr

0810168c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810168c:	b480      	push	{r7}
 810168e:	b083      	sub	sp, #12
 8101690:	af00      	add	r7, sp, #0
 8101692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101694:	687b      	ldr	r3, [r7, #4]
 8101696:	689b      	ldr	r3, [r3, #8]
 8101698:	f003 0308 	and.w	r3, r3, #8
 810169c:	2b08      	cmp	r3, #8
 810169e:	d101      	bne.n	81016a4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 81016a0:	2301      	movs	r3, #1
 81016a2:	e000      	b.n	81016a6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81016a4:	2300      	movs	r3, #0
}
 81016a6:	4618      	mov	r0, r3
 81016a8:	370c      	adds	r7, #12
 81016aa:	46bd      	mov	sp, r7
 81016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016b0:	4770      	bx	lr
	...

081016b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81016b4:	b590      	push	{r4, r7, lr}
 81016b6:	b089      	sub	sp, #36	; 0x24
 81016b8:	af00      	add	r7, sp, #0
 81016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81016bc:	2300      	movs	r3, #0
 81016be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81016c0:	2300      	movs	r3, #0
 81016c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81016c4:	687b      	ldr	r3, [r7, #4]
 81016c6:	2b00      	cmp	r3, #0
 81016c8:	d101      	bne.n	81016ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81016ca:	2301      	movs	r3, #1
 81016cc:	e18f      	b.n	81019ee <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	68db      	ldr	r3, [r3, #12]
 81016d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81016d4:	687b      	ldr	r3, [r7, #4]
 81016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81016d8:	2b00      	cmp	r3, #0
 81016da:	d109      	bne.n	81016f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81016dc:	6878      	ldr	r0, [r7, #4]
 81016de:	f7ff fa85 	bl	8100bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81016e2:	687b      	ldr	r3, [r7, #4]
 81016e4:	2200      	movs	r2, #0
 81016e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81016e8:	687b      	ldr	r3, [r7, #4]
 81016ea:	2200      	movs	r2, #0
 81016ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81016f0:	687b      	ldr	r3, [r7, #4]
 81016f2:	681b      	ldr	r3, [r3, #0]
 81016f4:	4618      	mov	r0, r3
 81016f6:	f7ff ff67 	bl	81015c8 <LL_ADC_IsDeepPowerDownEnabled>
 81016fa:	4603      	mov	r3, r0
 81016fc:	2b00      	cmp	r3, #0
 81016fe:	d004      	beq.n	810170a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101700:	687b      	ldr	r3, [r7, #4]
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	4618      	mov	r0, r3
 8101706:	f7ff ff4d 	bl	81015a4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	681b      	ldr	r3, [r3, #0]
 810170e:	4618      	mov	r0, r3
 8101710:	f7ff ff82 	bl	8101618 <LL_ADC_IsInternalRegulatorEnabled>
 8101714:	4603      	mov	r3, r0
 8101716:	2b00      	cmp	r3, #0
 8101718:	d114      	bne.n	8101744 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 810171a:	687b      	ldr	r3, [r7, #4]
 810171c:	681b      	ldr	r3, [r3, #0]
 810171e:	4618      	mov	r0, r3
 8101720:	f7ff ff66 	bl	81015f0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101724:	4b88      	ldr	r3, [pc, #544]	; (8101948 <HAL_ADC_Init+0x294>)
 8101726:	681b      	ldr	r3, [r3, #0]
 8101728:	099b      	lsrs	r3, r3, #6
 810172a:	4a88      	ldr	r2, [pc, #544]	; (810194c <HAL_ADC_Init+0x298>)
 810172c:	fba2 2303 	umull	r2, r3, r2, r3
 8101730:	099b      	lsrs	r3, r3, #6
 8101732:	3301      	adds	r3, #1
 8101734:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101736:	e002      	b.n	810173e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101738:	68bb      	ldr	r3, [r7, #8]
 810173a:	3b01      	subs	r3, #1
 810173c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810173e:	68bb      	ldr	r3, [r7, #8]
 8101740:	2b00      	cmp	r3, #0
 8101742:	d1f9      	bne.n	8101738 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101744:	687b      	ldr	r3, [r7, #4]
 8101746:	681b      	ldr	r3, [r3, #0]
 8101748:	4618      	mov	r0, r3
 810174a:	f7ff ff65 	bl	8101618 <LL_ADC_IsInternalRegulatorEnabled>
 810174e:	4603      	mov	r3, r0
 8101750:	2b00      	cmp	r3, #0
 8101752:	d10d      	bne.n	8101770 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101754:	687b      	ldr	r3, [r7, #4]
 8101756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101758:	f043 0210 	orr.w	r2, r3, #16
 810175c:	687b      	ldr	r3, [r7, #4]
 810175e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101760:	687b      	ldr	r3, [r7, #4]
 8101762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101764:	f043 0201 	orr.w	r2, r3, #1
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 810176c:	2301      	movs	r3, #1
 810176e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101770:	687b      	ldr	r3, [r7, #4]
 8101772:	681b      	ldr	r3, [r3, #0]
 8101774:	4618      	mov	r0, r3
 8101776:	f7ff ff76 	bl	8101666 <LL_ADC_REG_IsConversionOngoing>
 810177a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101780:	f003 0310 	and.w	r3, r3, #16
 8101784:	2b00      	cmp	r3, #0
 8101786:	f040 8129 	bne.w	81019dc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 810178a:	697b      	ldr	r3, [r7, #20]
 810178c:	2b00      	cmp	r3, #0
 810178e:	f040 8125 	bne.w	81019dc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101792:	687b      	ldr	r3, [r7, #4]
 8101794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101796:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 810179a:	f043 0202 	orr.w	r2, r3, #2
 810179e:	687b      	ldr	r3, [r7, #4]
 81017a0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81017a2:	687b      	ldr	r3, [r7, #4]
 81017a4:	681b      	ldr	r3, [r3, #0]
 81017a6:	4618      	mov	r0, r3
 81017a8:	f7ff ff4a 	bl	8101640 <LL_ADC_IsEnabled>
 81017ac:	4603      	mov	r3, r0
 81017ae:	2b00      	cmp	r3, #0
 81017b0:	d136      	bne.n	8101820 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81017b2:	687b      	ldr	r3, [r7, #4]
 81017b4:	681b      	ldr	r3, [r3, #0]
 81017b6:	4a66      	ldr	r2, [pc, #408]	; (8101950 <HAL_ADC_Init+0x29c>)
 81017b8:	4293      	cmp	r3, r2
 81017ba:	d004      	beq.n	81017c6 <HAL_ADC_Init+0x112>
 81017bc:	687b      	ldr	r3, [r7, #4]
 81017be:	681b      	ldr	r3, [r3, #0]
 81017c0:	4a64      	ldr	r2, [pc, #400]	; (8101954 <HAL_ADC_Init+0x2a0>)
 81017c2:	4293      	cmp	r3, r2
 81017c4:	d10e      	bne.n	81017e4 <HAL_ADC_Init+0x130>
 81017c6:	4862      	ldr	r0, [pc, #392]	; (8101950 <HAL_ADC_Init+0x29c>)
 81017c8:	f7ff ff3a 	bl	8101640 <LL_ADC_IsEnabled>
 81017cc:	4604      	mov	r4, r0
 81017ce:	4861      	ldr	r0, [pc, #388]	; (8101954 <HAL_ADC_Init+0x2a0>)
 81017d0:	f7ff ff36 	bl	8101640 <LL_ADC_IsEnabled>
 81017d4:	4603      	mov	r3, r0
 81017d6:	4323      	orrs	r3, r4
 81017d8:	2b00      	cmp	r3, #0
 81017da:	bf0c      	ite	eq
 81017dc:	2301      	moveq	r3, #1
 81017de:	2300      	movne	r3, #0
 81017e0:	b2db      	uxtb	r3, r3
 81017e2:	e008      	b.n	81017f6 <HAL_ADC_Init+0x142>
 81017e4:	485c      	ldr	r0, [pc, #368]	; (8101958 <HAL_ADC_Init+0x2a4>)
 81017e6:	f7ff ff2b 	bl	8101640 <LL_ADC_IsEnabled>
 81017ea:	4603      	mov	r3, r0
 81017ec:	2b00      	cmp	r3, #0
 81017ee:	bf0c      	ite	eq
 81017f0:	2301      	moveq	r3, #1
 81017f2:	2300      	movne	r3, #0
 81017f4:	b2db      	uxtb	r3, r3
 81017f6:	2b00      	cmp	r3, #0
 81017f8:	d012      	beq.n	8101820 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81017fa:	687b      	ldr	r3, [r7, #4]
 81017fc:	681b      	ldr	r3, [r3, #0]
 81017fe:	4a54      	ldr	r2, [pc, #336]	; (8101950 <HAL_ADC_Init+0x29c>)
 8101800:	4293      	cmp	r3, r2
 8101802:	d004      	beq.n	810180e <HAL_ADC_Init+0x15a>
 8101804:	687b      	ldr	r3, [r7, #4]
 8101806:	681b      	ldr	r3, [r3, #0]
 8101808:	4a52      	ldr	r2, [pc, #328]	; (8101954 <HAL_ADC_Init+0x2a0>)
 810180a:	4293      	cmp	r3, r2
 810180c:	d101      	bne.n	8101812 <HAL_ADC_Init+0x15e>
 810180e:	4a53      	ldr	r2, [pc, #332]	; (810195c <HAL_ADC_Init+0x2a8>)
 8101810:	e000      	b.n	8101814 <HAL_ADC_Init+0x160>
 8101812:	4a53      	ldr	r2, [pc, #332]	; (8101960 <HAL_ADC_Init+0x2ac>)
 8101814:	687b      	ldr	r3, [r7, #4]
 8101816:	685b      	ldr	r3, [r3, #4]
 8101818:	4619      	mov	r1, r3
 810181a:	4610      	mov	r0, r2
 810181c:	f7ff fdbe 	bl	810139c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101820:	f7ff fd9a 	bl	8101358 <HAL_GetREVID>
 8101824:	4603      	mov	r3, r0
 8101826:	f241 0203 	movw	r2, #4099	; 0x1003
 810182a:	4293      	cmp	r3, r2
 810182c:	d914      	bls.n	8101858 <HAL_ADC_Init+0x1a4>
 810182e:	687b      	ldr	r3, [r7, #4]
 8101830:	689b      	ldr	r3, [r3, #8]
 8101832:	2b10      	cmp	r3, #16
 8101834:	d110      	bne.n	8101858 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101836:	687b      	ldr	r3, [r7, #4]
 8101838:	7d5b      	ldrb	r3, [r3, #21]
 810183a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101840:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101842:	687b      	ldr	r3, [r7, #4]
 8101844:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101846:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	7f1b      	ldrb	r3, [r3, #28]
 810184c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810184e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101850:	f043 030c 	orr.w	r3, r3, #12
 8101854:	61bb      	str	r3, [r7, #24]
 8101856:	e00d      	b.n	8101874 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	7d5b      	ldrb	r3, [r3, #21]
 810185c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101862:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101868:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 810186a:	687b      	ldr	r3, [r7, #4]
 810186c:	7f1b      	ldrb	r3, [r3, #28]
 810186e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101870:	4313      	orrs	r3, r2
 8101872:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101874:	687b      	ldr	r3, [r7, #4]
 8101876:	7f1b      	ldrb	r3, [r3, #28]
 8101878:	2b01      	cmp	r3, #1
 810187a:	d106      	bne.n	810188a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	6a1b      	ldr	r3, [r3, #32]
 8101880:	3b01      	subs	r3, #1
 8101882:	045b      	lsls	r3, r3, #17
 8101884:	69ba      	ldr	r2, [r7, #24]
 8101886:	4313      	orrs	r3, r2
 8101888:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 810188a:	687b      	ldr	r3, [r7, #4]
 810188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810188e:	2b00      	cmp	r3, #0
 8101890:	d009      	beq.n	81018a6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101896:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 810189a:	687b      	ldr	r3, [r7, #4]
 810189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810189e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81018a0:	69ba      	ldr	r2, [r7, #24]
 81018a2:	4313      	orrs	r3, r2
 81018a4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	68da      	ldr	r2, [r3, #12]
 81018ac:	4b2d      	ldr	r3, [pc, #180]	; (8101964 <HAL_ADC_Init+0x2b0>)
 81018ae:	4013      	ands	r3, r2
 81018b0:	687a      	ldr	r2, [r7, #4]
 81018b2:	6812      	ldr	r2, [r2, #0]
 81018b4:	69b9      	ldr	r1, [r7, #24]
 81018b6:	430b      	orrs	r3, r1
 81018b8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81018ba:	687b      	ldr	r3, [r7, #4]
 81018bc:	681b      	ldr	r3, [r3, #0]
 81018be:	4618      	mov	r0, r3
 81018c0:	f7ff fed1 	bl	8101666 <LL_ADC_REG_IsConversionOngoing>
 81018c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81018c6:	687b      	ldr	r3, [r7, #4]
 81018c8:	681b      	ldr	r3, [r3, #0]
 81018ca:	4618      	mov	r0, r3
 81018cc:	f7ff fede 	bl	810168c <LL_ADC_INJ_IsConversionOngoing>
 81018d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81018d2:	693b      	ldr	r3, [r7, #16]
 81018d4:	2b00      	cmp	r3, #0
 81018d6:	d15f      	bne.n	8101998 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81018d8:	68fb      	ldr	r3, [r7, #12]
 81018da:	2b00      	cmp	r3, #0
 81018dc:	d15c      	bne.n	8101998 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	7d1b      	ldrb	r3, [r3, #20]
 81018e2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 81018e8:	4313      	orrs	r3, r2
 81018ea:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81018ec:	687b      	ldr	r3, [r7, #4]
 81018ee:	681b      	ldr	r3, [r3, #0]
 81018f0:	68db      	ldr	r3, [r3, #12]
 81018f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81018f6:	f023 0303 	bic.w	r3, r3, #3
 81018fa:	687a      	ldr	r2, [r7, #4]
 81018fc:	6812      	ldr	r2, [r2, #0]
 81018fe:	69b9      	ldr	r1, [r7, #24]
 8101900:	430b      	orrs	r3, r1
 8101902:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101904:	687b      	ldr	r3, [r7, #4]
 8101906:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810190a:	2b01      	cmp	r3, #1
 810190c:	d12e      	bne.n	810196c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101912:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101914:	687b      	ldr	r3, [r7, #4]
 8101916:	681b      	ldr	r3, [r3, #0]
 8101918:	691a      	ldr	r2, [r3, #16]
 810191a:	4b13      	ldr	r3, [pc, #76]	; (8101968 <HAL_ADC_Init+0x2b4>)
 810191c:	4013      	ands	r3, r2
 810191e:	687a      	ldr	r2, [r7, #4]
 8101920:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8101922:	3a01      	subs	r2, #1
 8101924:	0411      	lsls	r1, r2, #16
 8101926:	687a      	ldr	r2, [r7, #4]
 8101928:	6c12      	ldr	r2, [r2, #64]	; 0x40
 810192a:	4311      	orrs	r1, r2
 810192c:	687a      	ldr	r2, [r7, #4]
 810192e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101930:	4311      	orrs	r1, r2
 8101932:	687a      	ldr	r2, [r7, #4]
 8101934:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8101936:	430a      	orrs	r2, r1
 8101938:	431a      	orrs	r2, r3
 810193a:	687b      	ldr	r3, [r7, #4]
 810193c:	681b      	ldr	r3, [r3, #0]
 810193e:	f042 0201 	orr.w	r2, r2, #1
 8101942:	611a      	str	r2, [r3, #16]
 8101944:	e01a      	b.n	810197c <HAL_ADC_Init+0x2c8>
 8101946:	bf00      	nop
 8101948:	10000000 	.word	0x10000000
 810194c:	053e2d63 	.word	0x053e2d63
 8101950:	40022000 	.word	0x40022000
 8101954:	40022100 	.word	0x40022100
 8101958:	58026000 	.word	0x58026000
 810195c:	40022300 	.word	0x40022300
 8101960:	58026300 	.word	0x58026300
 8101964:	fff0c003 	.word	0xfff0c003
 8101968:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 810196c:	687b      	ldr	r3, [r7, #4]
 810196e:	681b      	ldr	r3, [r3, #0]
 8101970:	691a      	ldr	r2, [r3, #16]
 8101972:	687b      	ldr	r3, [r7, #4]
 8101974:	681b      	ldr	r3, [r3, #0]
 8101976:	f022 0201 	bic.w	r2, r2, #1
 810197a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 810197c:	687b      	ldr	r3, [r7, #4]
 810197e:	681b      	ldr	r3, [r3, #0]
 8101980:	691b      	ldr	r3, [r3, #16]
 8101982:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	681b      	ldr	r3, [r3, #0]
 810198e:	430a      	orrs	r2, r1
 8101990:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101992:	6878      	ldr	r0, [r7, #4]
 8101994:	f000 fb80 	bl	8102098 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101998:	687b      	ldr	r3, [r7, #4]
 810199a:	68db      	ldr	r3, [r3, #12]
 810199c:	2b01      	cmp	r3, #1
 810199e:	d10c      	bne.n	81019ba <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81019a0:	687b      	ldr	r3, [r7, #4]
 81019a2:	681b      	ldr	r3, [r3, #0]
 81019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019a6:	f023 010f 	bic.w	r1, r3, #15
 81019aa:	687b      	ldr	r3, [r7, #4]
 81019ac:	699b      	ldr	r3, [r3, #24]
 81019ae:	1e5a      	subs	r2, r3, #1
 81019b0:	687b      	ldr	r3, [r7, #4]
 81019b2:	681b      	ldr	r3, [r3, #0]
 81019b4:	430a      	orrs	r2, r1
 81019b6:	631a      	str	r2, [r3, #48]	; 0x30
 81019b8:	e007      	b.n	81019ca <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81019ba:	687b      	ldr	r3, [r7, #4]
 81019bc:	681b      	ldr	r3, [r3, #0]
 81019be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	681b      	ldr	r3, [r3, #0]
 81019c4:	f022 020f 	bic.w	r2, r2, #15
 81019c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81019ce:	f023 0303 	bic.w	r3, r3, #3
 81019d2:	f043 0201 	orr.w	r2, r3, #1
 81019d6:	687b      	ldr	r3, [r7, #4]
 81019d8:	655a      	str	r2, [r3, #84]	; 0x54
 81019da:	e007      	b.n	81019ec <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81019e0:	f043 0210 	orr.w	r2, r3, #16
 81019e4:	687b      	ldr	r3, [r7, #4]
 81019e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81019e8:	2301      	movs	r3, #1
 81019ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81019ec:	7ffb      	ldrb	r3, [r7, #31]
}
 81019ee:	4618      	mov	r0, r3
 81019f0:	3724      	adds	r7, #36	; 0x24
 81019f2:	46bd      	mov	sp, r7
 81019f4:	bd90      	pop	{r4, r7, pc}
 81019f6:	bf00      	nop

081019f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81019f8:	b590      	push	{r4, r7, lr}
 81019fa:	b0a1      	sub	sp, #132	; 0x84
 81019fc:	af00      	add	r7, sp, #0
 81019fe:	6078      	str	r0, [r7, #4]
 8101a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101a02:	2300      	movs	r3, #0
 8101a04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8101a08:	2300      	movs	r3, #0
 8101a0a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8101a0c:	683b      	ldr	r3, [r7, #0]
 8101a0e:	68db      	ldr	r3, [r3, #12]
 8101a10:	4a9d      	ldr	r2, [pc, #628]	; (8101c88 <HAL_ADC_ConfigChannel+0x290>)
 8101a12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101a1a:	2b01      	cmp	r3, #1
 8101a1c:	d101      	bne.n	8101a22 <HAL_ADC_ConfigChannel+0x2a>
 8101a1e:	2302      	movs	r3, #2
 8101a20:	e321      	b.n	8102066 <HAL_ADC_ConfigChannel+0x66e>
 8101a22:	687b      	ldr	r3, [r7, #4]
 8101a24:	2201      	movs	r2, #1
 8101a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	681b      	ldr	r3, [r3, #0]
 8101a2e:	4618      	mov	r0, r3
 8101a30:	f7ff fe19 	bl	8101666 <LL_ADC_REG_IsConversionOngoing>
 8101a34:	4603      	mov	r3, r0
 8101a36:	2b00      	cmp	r3, #0
 8101a38:	f040 8306 	bne.w	8102048 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8101a3c:	683b      	ldr	r3, [r7, #0]
 8101a3e:	681b      	ldr	r3, [r3, #0]
 8101a40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101a44:	2b00      	cmp	r3, #0
 8101a46:	d108      	bne.n	8101a5a <HAL_ADC_ConfigChannel+0x62>
 8101a48:	683b      	ldr	r3, [r7, #0]
 8101a4a:	681b      	ldr	r3, [r3, #0]
 8101a4c:	0e9b      	lsrs	r3, r3, #26
 8101a4e:	f003 031f 	and.w	r3, r3, #31
 8101a52:	2201      	movs	r2, #1
 8101a54:	fa02 f303 	lsl.w	r3, r2, r3
 8101a58:	e016      	b.n	8101a88 <HAL_ADC_ConfigChannel+0x90>
 8101a5a:	683b      	ldr	r3, [r7, #0]
 8101a5c:	681b      	ldr	r3, [r3, #0]
 8101a5e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101a62:	fa93 f3a3 	rbit	r3, r3
 8101a66:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8101a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101a6a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8101a6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101a6e:	2b00      	cmp	r3, #0
 8101a70:	d101      	bne.n	8101a76 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8101a72:	2320      	movs	r3, #32
 8101a74:	e003      	b.n	8101a7e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8101a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101a78:	fab3 f383 	clz	r3, r3
 8101a7c:	b2db      	uxtb	r3, r3
 8101a7e:	f003 031f 	and.w	r3, r3, #31
 8101a82:	2201      	movs	r2, #1
 8101a84:	fa02 f303 	lsl.w	r3, r2, r3
 8101a88:	687a      	ldr	r2, [r7, #4]
 8101a8a:	6812      	ldr	r2, [r2, #0]
 8101a8c:	69d1      	ldr	r1, [r2, #28]
 8101a8e:	687a      	ldr	r2, [r7, #4]
 8101a90:	6812      	ldr	r2, [r2, #0]
 8101a92:	430b      	orrs	r3, r1
 8101a94:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8101a96:	687b      	ldr	r3, [r7, #4]
 8101a98:	6818      	ldr	r0, [r3, #0]
 8101a9a:	683b      	ldr	r3, [r7, #0]
 8101a9c:	6859      	ldr	r1, [r3, #4]
 8101a9e:	683b      	ldr	r3, [r7, #0]
 8101aa0:	681b      	ldr	r3, [r3, #0]
 8101aa2:	461a      	mov	r2, r3
 8101aa4:	f7ff fd02 	bl	81014ac <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101aa8:	687b      	ldr	r3, [r7, #4]
 8101aaa:	681b      	ldr	r3, [r3, #0]
 8101aac:	4618      	mov	r0, r3
 8101aae:	f7ff fdda 	bl	8101666 <LL_ADC_REG_IsConversionOngoing>
 8101ab2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101ab4:	687b      	ldr	r3, [r7, #4]
 8101ab6:	681b      	ldr	r3, [r3, #0]
 8101ab8:	4618      	mov	r0, r3
 8101aba:	f7ff fde7 	bl	810168c <LL_ADC_INJ_IsConversionOngoing>
 8101abe:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101ac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101ac2:	2b00      	cmp	r3, #0
 8101ac4:	f040 80b3 	bne.w	8101c2e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101aca:	2b00      	cmp	r3, #0
 8101acc:	f040 80af 	bne.w	8101c2e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8101ad0:	687b      	ldr	r3, [r7, #4]
 8101ad2:	6818      	ldr	r0, [r3, #0]
 8101ad4:	683b      	ldr	r3, [r7, #0]
 8101ad6:	6819      	ldr	r1, [r3, #0]
 8101ad8:	683b      	ldr	r3, [r7, #0]
 8101ada:	689b      	ldr	r3, [r3, #8]
 8101adc:	461a      	mov	r2, r3
 8101ade:	f7ff fd11 	bl	8101504 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8101ae2:	4b6a      	ldr	r3, [pc, #424]	; (8101c8c <HAL_ADC_ConfigChannel+0x294>)
 8101ae4:	681b      	ldr	r3, [r3, #0]
 8101ae6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8101aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101aee:	d10b      	bne.n	8101b08 <HAL_ADC_ConfigChannel+0x110>
 8101af0:	683b      	ldr	r3, [r7, #0]
 8101af2:	695a      	ldr	r2, [r3, #20]
 8101af4:	687b      	ldr	r3, [r7, #4]
 8101af6:	681b      	ldr	r3, [r3, #0]
 8101af8:	68db      	ldr	r3, [r3, #12]
 8101afa:	089b      	lsrs	r3, r3, #2
 8101afc:	f003 0307 	and.w	r3, r3, #7
 8101b00:	005b      	lsls	r3, r3, #1
 8101b02:	fa02 f303 	lsl.w	r3, r2, r3
 8101b06:	e01d      	b.n	8101b44 <HAL_ADC_ConfigChannel+0x14c>
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	681b      	ldr	r3, [r3, #0]
 8101b0c:	68db      	ldr	r3, [r3, #12]
 8101b0e:	f003 0310 	and.w	r3, r3, #16
 8101b12:	2b00      	cmp	r3, #0
 8101b14:	d10b      	bne.n	8101b2e <HAL_ADC_ConfigChannel+0x136>
 8101b16:	683b      	ldr	r3, [r7, #0]
 8101b18:	695a      	ldr	r2, [r3, #20]
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	68db      	ldr	r3, [r3, #12]
 8101b20:	089b      	lsrs	r3, r3, #2
 8101b22:	f003 0307 	and.w	r3, r3, #7
 8101b26:	005b      	lsls	r3, r3, #1
 8101b28:	fa02 f303 	lsl.w	r3, r2, r3
 8101b2c:	e00a      	b.n	8101b44 <HAL_ADC_ConfigChannel+0x14c>
 8101b2e:	683b      	ldr	r3, [r7, #0]
 8101b30:	695a      	ldr	r2, [r3, #20]
 8101b32:	687b      	ldr	r3, [r7, #4]
 8101b34:	681b      	ldr	r3, [r3, #0]
 8101b36:	68db      	ldr	r3, [r3, #12]
 8101b38:	089b      	lsrs	r3, r3, #2
 8101b3a:	f003 0304 	and.w	r3, r3, #4
 8101b3e:	005b      	lsls	r3, r3, #1
 8101b40:	fa02 f303 	lsl.w	r3, r2, r3
 8101b44:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8101b46:	683b      	ldr	r3, [r7, #0]
 8101b48:	691b      	ldr	r3, [r3, #16]
 8101b4a:	2b04      	cmp	r3, #4
 8101b4c:	d027      	beq.n	8101b9e <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8101b4e:	687b      	ldr	r3, [r7, #4]
 8101b50:	6818      	ldr	r0, [r3, #0]
 8101b52:	683b      	ldr	r3, [r7, #0]
 8101b54:	6919      	ldr	r1, [r3, #16]
 8101b56:	683b      	ldr	r3, [r7, #0]
 8101b58:	681a      	ldr	r2, [r3, #0]
 8101b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101b5c:	f7ff fc52 	bl	8101404 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8101b60:	687b      	ldr	r3, [r7, #4]
 8101b62:	6818      	ldr	r0, [r3, #0]
 8101b64:	683b      	ldr	r3, [r7, #0]
 8101b66:	6919      	ldr	r1, [r3, #16]
 8101b68:	683b      	ldr	r3, [r7, #0]
 8101b6a:	7e5b      	ldrb	r3, [r3, #25]
 8101b6c:	2b01      	cmp	r3, #1
 8101b6e:	d102      	bne.n	8101b76 <HAL_ADC_ConfigChannel+0x17e>
 8101b70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8101b74:	e000      	b.n	8101b78 <HAL_ADC_ConfigChannel+0x180>
 8101b76:	2300      	movs	r3, #0
 8101b78:	461a      	mov	r2, r3
 8101b7a:	f7ff fc7c 	bl	8101476 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101b7e:	687b      	ldr	r3, [r7, #4]
 8101b80:	6818      	ldr	r0, [r3, #0]
 8101b82:	683b      	ldr	r3, [r7, #0]
 8101b84:	6919      	ldr	r1, [r3, #16]
 8101b86:	683b      	ldr	r3, [r7, #0]
 8101b88:	7e1b      	ldrb	r3, [r3, #24]
 8101b8a:	2b01      	cmp	r3, #1
 8101b8c:	d102      	bne.n	8101b94 <HAL_ADC_ConfigChannel+0x19c>
 8101b8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101b92:	e000      	b.n	8101b96 <HAL_ADC_ConfigChannel+0x19e>
 8101b94:	2300      	movs	r3, #0
 8101b96:	461a      	mov	r2, r3
 8101b98:	f7ff fc54 	bl	8101444 <LL_ADC_SetDataRightShift>
 8101b9c:	e047      	b.n	8101c2e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101b9e:	687b      	ldr	r3, [r7, #4]
 8101ba0:	681b      	ldr	r3, [r3, #0]
 8101ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101ba4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101ba8:	683b      	ldr	r3, [r7, #0]
 8101baa:	681b      	ldr	r3, [r3, #0]
 8101bac:	069b      	lsls	r3, r3, #26
 8101bae:	429a      	cmp	r2, r3
 8101bb0:	d107      	bne.n	8101bc2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8101bb2:	687b      	ldr	r3, [r7, #4]
 8101bb4:	681b      	ldr	r3, [r3, #0]
 8101bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	681b      	ldr	r3, [r3, #0]
 8101bbc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101bc0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	681b      	ldr	r3, [r3, #0]
 8101bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101bc8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101bcc:	683b      	ldr	r3, [r7, #0]
 8101bce:	681b      	ldr	r3, [r3, #0]
 8101bd0:	069b      	lsls	r3, r3, #26
 8101bd2:	429a      	cmp	r2, r3
 8101bd4:	d107      	bne.n	8101be6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	681b      	ldr	r3, [r3, #0]
 8101be0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101be4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101be6:	687b      	ldr	r3, [r7, #4]
 8101be8:	681b      	ldr	r3, [r3, #0]
 8101bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101bec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101bf0:	683b      	ldr	r3, [r7, #0]
 8101bf2:	681b      	ldr	r3, [r3, #0]
 8101bf4:	069b      	lsls	r3, r3, #26
 8101bf6:	429a      	cmp	r2, r3
 8101bf8:	d107      	bne.n	8101c0a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8101bfa:	687b      	ldr	r3, [r7, #4]
 8101bfc:	681b      	ldr	r3, [r3, #0]
 8101bfe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8101c00:	687b      	ldr	r3, [r7, #4]
 8101c02:	681b      	ldr	r3, [r3, #0]
 8101c04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101c08:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101c0a:	687b      	ldr	r3, [r7, #4]
 8101c0c:	681b      	ldr	r3, [r3, #0]
 8101c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101c14:	683b      	ldr	r3, [r7, #0]
 8101c16:	681b      	ldr	r3, [r3, #0]
 8101c18:	069b      	lsls	r3, r3, #26
 8101c1a:	429a      	cmp	r2, r3
 8101c1c:	d107      	bne.n	8101c2e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	681b      	ldr	r3, [r3, #0]
 8101c22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8101c24:	687b      	ldr	r3, [r7, #4]
 8101c26:	681b      	ldr	r3, [r3, #0]
 8101c28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101c2c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	4618      	mov	r0, r3
 8101c34:	f7ff fd04 	bl	8101640 <LL_ADC_IsEnabled>
 8101c38:	4603      	mov	r3, r0
 8101c3a:	2b00      	cmp	r3, #0
 8101c3c:	f040 820d 	bne.w	810205a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8101c40:	687b      	ldr	r3, [r7, #4]
 8101c42:	6818      	ldr	r0, [r3, #0]
 8101c44:	683b      	ldr	r3, [r7, #0]
 8101c46:	6819      	ldr	r1, [r3, #0]
 8101c48:	683b      	ldr	r3, [r7, #0]
 8101c4a:	68db      	ldr	r3, [r3, #12]
 8101c4c:	461a      	mov	r2, r3
 8101c4e:	f7ff fc85 	bl	810155c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8101c52:	683b      	ldr	r3, [r7, #0]
 8101c54:	68db      	ldr	r3, [r3, #12]
 8101c56:	4a0c      	ldr	r2, [pc, #48]	; (8101c88 <HAL_ADC_ConfigChannel+0x290>)
 8101c58:	4293      	cmp	r3, r2
 8101c5a:	f040 8133 	bne.w	8101ec4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101c62:	683b      	ldr	r3, [r7, #0]
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101c6a:	2b00      	cmp	r3, #0
 8101c6c:	d110      	bne.n	8101c90 <HAL_ADC_ConfigChannel+0x298>
 8101c6e:	683b      	ldr	r3, [r7, #0]
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	0e9b      	lsrs	r3, r3, #26
 8101c74:	3301      	adds	r3, #1
 8101c76:	f003 031f 	and.w	r3, r3, #31
 8101c7a:	2b09      	cmp	r3, #9
 8101c7c:	bf94      	ite	ls
 8101c7e:	2301      	movls	r3, #1
 8101c80:	2300      	movhi	r3, #0
 8101c82:	b2db      	uxtb	r3, r3
 8101c84:	e01e      	b.n	8101cc4 <HAL_ADC_ConfigChannel+0x2cc>
 8101c86:	bf00      	nop
 8101c88:	47ff0000 	.word	0x47ff0000
 8101c8c:	5c001000 	.word	0x5c001000
 8101c90:	683b      	ldr	r3, [r7, #0]
 8101c92:	681b      	ldr	r3, [r3, #0]
 8101c94:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101c98:	fa93 f3a3 	rbit	r3, r3
 8101c9c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8101c9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8101ca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101ca4:	2b00      	cmp	r3, #0
 8101ca6:	d101      	bne.n	8101cac <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8101ca8:	2320      	movs	r3, #32
 8101caa:	e003      	b.n	8101cb4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8101cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101cae:	fab3 f383 	clz	r3, r3
 8101cb2:	b2db      	uxtb	r3, r3
 8101cb4:	3301      	adds	r3, #1
 8101cb6:	f003 031f 	and.w	r3, r3, #31
 8101cba:	2b09      	cmp	r3, #9
 8101cbc:	bf94      	ite	ls
 8101cbe:	2301      	movls	r3, #1
 8101cc0:	2300      	movhi	r3, #0
 8101cc2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d079      	beq.n	8101dbc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101cc8:	683b      	ldr	r3, [r7, #0]
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101cd0:	2b00      	cmp	r3, #0
 8101cd2:	d107      	bne.n	8101ce4 <HAL_ADC_ConfigChannel+0x2ec>
 8101cd4:	683b      	ldr	r3, [r7, #0]
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	0e9b      	lsrs	r3, r3, #26
 8101cda:	3301      	adds	r3, #1
 8101cdc:	069b      	lsls	r3, r3, #26
 8101cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101ce2:	e015      	b.n	8101d10 <HAL_ADC_ConfigChannel+0x318>
 8101ce4:	683b      	ldr	r3, [r7, #0]
 8101ce6:	681b      	ldr	r3, [r3, #0]
 8101ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101cec:	fa93 f3a3 	rbit	r3, r3
 8101cf0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8101cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101cf4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8101cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101cf8:	2b00      	cmp	r3, #0
 8101cfa:	d101      	bne.n	8101d00 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8101cfc:	2320      	movs	r3, #32
 8101cfe:	e003      	b.n	8101d08 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8101d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101d02:	fab3 f383 	clz	r3, r3
 8101d06:	b2db      	uxtb	r3, r3
 8101d08:	3301      	adds	r3, #1
 8101d0a:	069b      	lsls	r3, r3, #26
 8101d0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101d10:	683b      	ldr	r3, [r7, #0]
 8101d12:	681b      	ldr	r3, [r3, #0]
 8101d14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101d18:	2b00      	cmp	r3, #0
 8101d1a:	d109      	bne.n	8101d30 <HAL_ADC_ConfigChannel+0x338>
 8101d1c:	683b      	ldr	r3, [r7, #0]
 8101d1e:	681b      	ldr	r3, [r3, #0]
 8101d20:	0e9b      	lsrs	r3, r3, #26
 8101d22:	3301      	adds	r3, #1
 8101d24:	f003 031f 	and.w	r3, r3, #31
 8101d28:	2101      	movs	r1, #1
 8101d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8101d2e:	e017      	b.n	8101d60 <HAL_ADC_ConfigChannel+0x368>
 8101d30:	683b      	ldr	r3, [r7, #0]
 8101d32:	681b      	ldr	r3, [r3, #0]
 8101d34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101d38:	fa93 f3a3 	rbit	r3, r3
 8101d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8101d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101d40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8101d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d44:	2b00      	cmp	r3, #0
 8101d46:	d101      	bne.n	8101d4c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8101d48:	2320      	movs	r3, #32
 8101d4a:	e003      	b.n	8101d54 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8101d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d4e:	fab3 f383 	clz	r3, r3
 8101d52:	b2db      	uxtb	r3, r3
 8101d54:	3301      	adds	r3, #1
 8101d56:	f003 031f 	and.w	r3, r3, #31
 8101d5a:	2101      	movs	r1, #1
 8101d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8101d60:	ea42 0103 	orr.w	r1, r2, r3
 8101d64:	683b      	ldr	r3, [r7, #0]
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101d6c:	2b00      	cmp	r3, #0
 8101d6e:	d10a      	bne.n	8101d86 <HAL_ADC_ConfigChannel+0x38e>
 8101d70:	683b      	ldr	r3, [r7, #0]
 8101d72:	681b      	ldr	r3, [r3, #0]
 8101d74:	0e9b      	lsrs	r3, r3, #26
 8101d76:	3301      	adds	r3, #1
 8101d78:	f003 021f 	and.w	r2, r3, #31
 8101d7c:	4613      	mov	r3, r2
 8101d7e:	005b      	lsls	r3, r3, #1
 8101d80:	4413      	add	r3, r2
 8101d82:	051b      	lsls	r3, r3, #20
 8101d84:	e018      	b.n	8101db8 <HAL_ADC_ConfigChannel+0x3c0>
 8101d86:	683b      	ldr	r3, [r7, #0]
 8101d88:	681b      	ldr	r3, [r3, #0]
 8101d8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d8e:	fa93 f3a3 	rbit	r3, r3
 8101d92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8101d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8101d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d9a:	2b00      	cmp	r3, #0
 8101d9c:	d101      	bne.n	8101da2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8101d9e:	2320      	movs	r3, #32
 8101da0:	e003      	b.n	8101daa <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8101da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101da4:	fab3 f383 	clz	r3, r3
 8101da8:	b2db      	uxtb	r3, r3
 8101daa:	3301      	adds	r3, #1
 8101dac:	f003 021f 	and.w	r2, r3, #31
 8101db0:	4613      	mov	r3, r2
 8101db2:	005b      	lsls	r3, r3, #1
 8101db4:	4413      	add	r3, r2
 8101db6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101db8:	430b      	orrs	r3, r1
 8101dba:	e07e      	b.n	8101eba <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101dbc:	683b      	ldr	r3, [r7, #0]
 8101dbe:	681b      	ldr	r3, [r3, #0]
 8101dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101dc4:	2b00      	cmp	r3, #0
 8101dc6:	d107      	bne.n	8101dd8 <HAL_ADC_ConfigChannel+0x3e0>
 8101dc8:	683b      	ldr	r3, [r7, #0]
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	0e9b      	lsrs	r3, r3, #26
 8101dce:	3301      	adds	r3, #1
 8101dd0:	069b      	lsls	r3, r3, #26
 8101dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101dd6:	e015      	b.n	8101e04 <HAL_ADC_ConfigChannel+0x40c>
 8101dd8:	683b      	ldr	r3, [r7, #0]
 8101dda:	681b      	ldr	r3, [r3, #0]
 8101ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101de0:	fa93 f3a3 	rbit	r3, r3
 8101de4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8101de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8101dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101dec:	2b00      	cmp	r3, #0
 8101dee:	d101      	bne.n	8101df4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8101df0:	2320      	movs	r3, #32
 8101df2:	e003      	b.n	8101dfc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8101df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101df6:	fab3 f383 	clz	r3, r3
 8101dfa:	b2db      	uxtb	r3, r3
 8101dfc:	3301      	adds	r3, #1
 8101dfe:	069b      	lsls	r3, r3, #26
 8101e00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101e04:	683b      	ldr	r3, [r7, #0]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e0c:	2b00      	cmp	r3, #0
 8101e0e:	d109      	bne.n	8101e24 <HAL_ADC_ConfigChannel+0x42c>
 8101e10:	683b      	ldr	r3, [r7, #0]
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	0e9b      	lsrs	r3, r3, #26
 8101e16:	3301      	adds	r3, #1
 8101e18:	f003 031f 	and.w	r3, r3, #31
 8101e1c:	2101      	movs	r1, #1
 8101e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8101e22:	e017      	b.n	8101e54 <HAL_ADC_ConfigChannel+0x45c>
 8101e24:	683b      	ldr	r3, [r7, #0]
 8101e26:	681b      	ldr	r3, [r3, #0]
 8101e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e2a:	69fb      	ldr	r3, [r7, #28]
 8101e2c:	fa93 f3a3 	rbit	r3, r3
 8101e30:	61bb      	str	r3, [r7, #24]
  return result;
 8101e32:	69bb      	ldr	r3, [r7, #24]
 8101e34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8101e36:	6a3b      	ldr	r3, [r7, #32]
 8101e38:	2b00      	cmp	r3, #0
 8101e3a:	d101      	bne.n	8101e40 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8101e3c:	2320      	movs	r3, #32
 8101e3e:	e003      	b.n	8101e48 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8101e40:	6a3b      	ldr	r3, [r7, #32]
 8101e42:	fab3 f383 	clz	r3, r3
 8101e46:	b2db      	uxtb	r3, r3
 8101e48:	3301      	adds	r3, #1
 8101e4a:	f003 031f 	and.w	r3, r3, #31
 8101e4e:	2101      	movs	r1, #1
 8101e50:	fa01 f303 	lsl.w	r3, r1, r3
 8101e54:	ea42 0103 	orr.w	r1, r2, r3
 8101e58:	683b      	ldr	r3, [r7, #0]
 8101e5a:	681b      	ldr	r3, [r3, #0]
 8101e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e60:	2b00      	cmp	r3, #0
 8101e62:	d10d      	bne.n	8101e80 <HAL_ADC_ConfigChannel+0x488>
 8101e64:	683b      	ldr	r3, [r7, #0]
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	0e9b      	lsrs	r3, r3, #26
 8101e6a:	3301      	adds	r3, #1
 8101e6c:	f003 021f 	and.w	r2, r3, #31
 8101e70:	4613      	mov	r3, r2
 8101e72:	005b      	lsls	r3, r3, #1
 8101e74:	4413      	add	r3, r2
 8101e76:	3b1e      	subs	r3, #30
 8101e78:	051b      	lsls	r3, r3, #20
 8101e7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e7e:	e01b      	b.n	8101eb8 <HAL_ADC_ConfigChannel+0x4c0>
 8101e80:	683b      	ldr	r3, [r7, #0]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e86:	693b      	ldr	r3, [r7, #16]
 8101e88:	fa93 f3a3 	rbit	r3, r3
 8101e8c:	60fb      	str	r3, [r7, #12]
  return result;
 8101e8e:	68fb      	ldr	r3, [r7, #12]
 8101e90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8101e92:	697b      	ldr	r3, [r7, #20]
 8101e94:	2b00      	cmp	r3, #0
 8101e96:	d101      	bne.n	8101e9c <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8101e98:	2320      	movs	r3, #32
 8101e9a:	e003      	b.n	8101ea4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8101e9c:	697b      	ldr	r3, [r7, #20]
 8101e9e:	fab3 f383 	clz	r3, r3
 8101ea2:	b2db      	uxtb	r3, r3
 8101ea4:	3301      	adds	r3, #1
 8101ea6:	f003 021f 	and.w	r2, r3, #31
 8101eaa:	4613      	mov	r3, r2
 8101eac:	005b      	lsls	r3, r3, #1
 8101eae:	4413      	add	r3, r2
 8101eb0:	3b1e      	subs	r3, #30
 8101eb2:	051b      	lsls	r3, r3, #20
 8101eb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101eb8:	430b      	orrs	r3, r1
 8101eba:	683a      	ldr	r2, [r7, #0]
 8101ebc:	6892      	ldr	r2, [r2, #8]
 8101ebe:	4619      	mov	r1, r3
 8101ec0:	f7ff fb20 	bl	8101504 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8101ec4:	683b      	ldr	r3, [r7, #0]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	2b00      	cmp	r3, #0
 8101eca:	f280 80c6 	bge.w	810205a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	4a67      	ldr	r2, [pc, #412]	; (8102070 <HAL_ADC_ConfigChannel+0x678>)
 8101ed4:	4293      	cmp	r3, r2
 8101ed6:	d004      	beq.n	8101ee2 <HAL_ADC_ConfigChannel+0x4ea>
 8101ed8:	687b      	ldr	r3, [r7, #4]
 8101eda:	681b      	ldr	r3, [r3, #0]
 8101edc:	4a65      	ldr	r2, [pc, #404]	; (8102074 <HAL_ADC_ConfigChannel+0x67c>)
 8101ede:	4293      	cmp	r3, r2
 8101ee0:	d101      	bne.n	8101ee6 <HAL_ADC_ConfigChannel+0x4ee>
 8101ee2:	4b65      	ldr	r3, [pc, #404]	; (8102078 <HAL_ADC_ConfigChannel+0x680>)
 8101ee4:	e000      	b.n	8101ee8 <HAL_ADC_ConfigChannel+0x4f0>
 8101ee6:	4b65      	ldr	r3, [pc, #404]	; (810207c <HAL_ADC_ConfigChannel+0x684>)
 8101ee8:	4618      	mov	r0, r3
 8101eea:	f7ff fa7d 	bl	81013e8 <LL_ADC_GetCommonPathInternalCh>
 8101eee:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	4a5e      	ldr	r2, [pc, #376]	; (8102070 <HAL_ADC_ConfigChannel+0x678>)
 8101ef6:	4293      	cmp	r3, r2
 8101ef8:	d004      	beq.n	8101f04 <HAL_ADC_ConfigChannel+0x50c>
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	681b      	ldr	r3, [r3, #0]
 8101efe:	4a5d      	ldr	r2, [pc, #372]	; (8102074 <HAL_ADC_ConfigChannel+0x67c>)
 8101f00:	4293      	cmp	r3, r2
 8101f02:	d10e      	bne.n	8101f22 <HAL_ADC_ConfigChannel+0x52a>
 8101f04:	485a      	ldr	r0, [pc, #360]	; (8102070 <HAL_ADC_ConfigChannel+0x678>)
 8101f06:	f7ff fb9b 	bl	8101640 <LL_ADC_IsEnabled>
 8101f0a:	4604      	mov	r4, r0
 8101f0c:	4859      	ldr	r0, [pc, #356]	; (8102074 <HAL_ADC_ConfigChannel+0x67c>)
 8101f0e:	f7ff fb97 	bl	8101640 <LL_ADC_IsEnabled>
 8101f12:	4603      	mov	r3, r0
 8101f14:	4323      	orrs	r3, r4
 8101f16:	2b00      	cmp	r3, #0
 8101f18:	bf0c      	ite	eq
 8101f1a:	2301      	moveq	r3, #1
 8101f1c:	2300      	movne	r3, #0
 8101f1e:	b2db      	uxtb	r3, r3
 8101f20:	e008      	b.n	8101f34 <HAL_ADC_ConfigChannel+0x53c>
 8101f22:	4857      	ldr	r0, [pc, #348]	; (8102080 <HAL_ADC_ConfigChannel+0x688>)
 8101f24:	f7ff fb8c 	bl	8101640 <LL_ADC_IsEnabled>
 8101f28:	4603      	mov	r3, r0
 8101f2a:	2b00      	cmp	r3, #0
 8101f2c:	bf0c      	ite	eq
 8101f2e:	2301      	moveq	r3, #1
 8101f30:	2300      	movne	r3, #0
 8101f32:	b2db      	uxtb	r3, r3
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d07d      	beq.n	8102034 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8101f38:	683b      	ldr	r3, [r7, #0]
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	4a51      	ldr	r2, [pc, #324]	; (8102084 <HAL_ADC_ConfigChannel+0x68c>)
 8101f3e:	4293      	cmp	r3, r2
 8101f40:	d130      	bne.n	8101fa4 <HAL_ADC_ConfigChannel+0x5ac>
 8101f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101f48:	2b00      	cmp	r3, #0
 8101f4a:	d12b      	bne.n	8101fa4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	4a4b      	ldr	r2, [pc, #300]	; (8102080 <HAL_ADC_ConfigChannel+0x688>)
 8101f52:	4293      	cmp	r3, r2
 8101f54:	f040 8081 	bne.w	810205a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8101f58:	687b      	ldr	r3, [r7, #4]
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	4a44      	ldr	r2, [pc, #272]	; (8102070 <HAL_ADC_ConfigChannel+0x678>)
 8101f5e:	4293      	cmp	r3, r2
 8101f60:	d004      	beq.n	8101f6c <HAL_ADC_ConfigChannel+0x574>
 8101f62:	687b      	ldr	r3, [r7, #4]
 8101f64:	681b      	ldr	r3, [r3, #0]
 8101f66:	4a43      	ldr	r2, [pc, #268]	; (8102074 <HAL_ADC_ConfigChannel+0x67c>)
 8101f68:	4293      	cmp	r3, r2
 8101f6a:	d101      	bne.n	8101f70 <HAL_ADC_ConfigChannel+0x578>
 8101f6c:	4a42      	ldr	r2, [pc, #264]	; (8102078 <HAL_ADC_ConfigChannel+0x680>)
 8101f6e:	e000      	b.n	8101f72 <HAL_ADC_ConfigChannel+0x57a>
 8101f70:	4a42      	ldr	r2, [pc, #264]	; (810207c <HAL_ADC_ConfigChannel+0x684>)
 8101f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101f78:	4619      	mov	r1, r3
 8101f7a:	4610      	mov	r0, r2
 8101f7c:	f7ff fa21 	bl	81013c2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101f80:	4b41      	ldr	r3, [pc, #260]	; (8102088 <HAL_ADC_ConfigChannel+0x690>)
 8101f82:	681b      	ldr	r3, [r3, #0]
 8101f84:	099b      	lsrs	r3, r3, #6
 8101f86:	4a41      	ldr	r2, [pc, #260]	; (810208c <HAL_ADC_ConfigChannel+0x694>)
 8101f88:	fba2 2303 	umull	r2, r3, r2, r3
 8101f8c:	099b      	lsrs	r3, r3, #6
 8101f8e:	3301      	adds	r3, #1
 8101f90:	005b      	lsls	r3, r3, #1
 8101f92:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101f94:	e002      	b.n	8101f9c <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8101f96:	68bb      	ldr	r3, [r7, #8]
 8101f98:	3b01      	subs	r3, #1
 8101f9a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101f9c:	68bb      	ldr	r3, [r7, #8]
 8101f9e:	2b00      	cmp	r3, #0
 8101fa0:	d1f9      	bne.n	8101f96 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101fa2:	e05a      	b.n	810205a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8101fa4:	683b      	ldr	r3, [r7, #0]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	4a39      	ldr	r2, [pc, #228]	; (8102090 <HAL_ADC_ConfigChannel+0x698>)
 8101faa:	4293      	cmp	r3, r2
 8101fac:	d11e      	bne.n	8101fec <HAL_ADC_ConfigChannel+0x5f4>
 8101fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101fb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101fb4:	2b00      	cmp	r3, #0
 8101fb6:	d119      	bne.n	8101fec <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101fb8:	687b      	ldr	r3, [r7, #4]
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	4a30      	ldr	r2, [pc, #192]	; (8102080 <HAL_ADC_ConfigChannel+0x688>)
 8101fbe:	4293      	cmp	r3, r2
 8101fc0:	d14b      	bne.n	810205a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	4a2a      	ldr	r2, [pc, #168]	; (8102070 <HAL_ADC_ConfigChannel+0x678>)
 8101fc8:	4293      	cmp	r3, r2
 8101fca:	d004      	beq.n	8101fd6 <HAL_ADC_ConfigChannel+0x5de>
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	4a28      	ldr	r2, [pc, #160]	; (8102074 <HAL_ADC_ConfigChannel+0x67c>)
 8101fd2:	4293      	cmp	r3, r2
 8101fd4:	d101      	bne.n	8101fda <HAL_ADC_ConfigChannel+0x5e2>
 8101fd6:	4a28      	ldr	r2, [pc, #160]	; (8102078 <HAL_ADC_ConfigChannel+0x680>)
 8101fd8:	e000      	b.n	8101fdc <HAL_ADC_ConfigChannel+0x5e4>
 8101fda:	4a28      	ldr	r2, [pc, #160]	; (810207c <HAL_ADC_ConfigChannel+0x684>)
 8101fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8101fe2:	4619      	mov	r1, r3
 8101fe4:	4610      	mov	r0, r2
 8101fe6:	f7ff f9ec 	bl	81013c2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101fea:	e036      	b.n	810205a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8101fec:	683b      	ldr	r3, [r7, #0]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	4a28      	ldr	r2, [pc, #160]	; (8102094 <HAL_ADC_ConfigChannel+0x69c>)
 8101ff2:	4293      	cmp	r3, r2
 8101ff4:	d131      	bne.n	810205a <HAL_ADC_ConfigChannel+0x662>
 8101ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101ff8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101ffc:	2b00      	cmp	r3, #0
 8101ffe:	d12c      	bne.n	810205a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	681b      	ldr	r3, [r3, #0]
 8102004:	4a1e      	ldr	r2, [pc, #120]	; (8102080 <HAL_ADC_ConfigChannel+0x688>)
 8102006:	4293      	cmp	r3, r2
 8102008:	d127      	bne.n	810205a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	681b      	ldr	r3, [r3, #0]
 810200e:	4a18      	ldr	r2, [pc, #96]	; (8102070 <HAL_ADC_ConfigChannel+0x678>)
 8102010:	4293      	cmp	r3, r2
 8102012:	d004      	beq.n	810201e <HAL_ADC_ConfigChannel+0x626>
 8102014:	687b      	ldr	r3, [r7, #4]
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	4a16      	ldr	r2, [pc, #88]	; (8102074 <HAL_ADC_ConfigChannel+0x67c>)
 810201a:	4293      	cmp	r3, r2
 810201c:	d101      	bne.n	8102022 <HAL_ADC_ConfigChannel+0x62a>
 810201e:	4a16      	ldr	r2, [pc, #88]	; (8102078 <HAL_ADC_ConfigChannel+0x680>)
 8102020:	e000      	b.n	8102024 <HAL_ADC_ConfigChannel+0x62c>
 8102022:	4a16      	ldr	r2, [pc, #88]	; (810207c <HAL_ADC_ConfigChannel+0x684>)
 8102024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102026:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810202a:	4619      	mov	r1, r3
 810202c:	4610      	mov	r0, r2
 810202e:	f7ff f9c8 	bl	81013c2 <LL_ADC_SetCommonPathInternalCh>
 8102032:	e012      	b.n	810205a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102034:	687b      	ldr	r3, [r7, #4]
 8102036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102038:	f043 0220 	orr.w	r2, r3, #32
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102040:	2301      	movs	r3, #1
 8102042:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102046:	e008      	b.n	810205a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102048:	687b      	ldr	r3, [r7, #4]
 810204a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810204c:	f043 0220 	orr.w	r2, r3, #32
 8102050:	687b      	ldr	r3, [r7, #4]
 8102052:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102054:	2301      	movs	r3, #1
 8102056:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	2200      	movs	r2, #0
 810205e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102062:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8102066:	4618      	mov	r0, r3
 8102068:	3784      	adds	r7, #132	; 0x84
 810206a:	46bd      	mov	sp, r7
 810206c:	bd90      	pop	{r4, r7, pc}
 810206e:	bf00      	nop
 8102070:	40022000 	.word	0x40022000
 8102074:	40022100 	.word	0x40022100
 8102078:	40022300 	.word	0x40022300
 810207c:	58026300 	.word	0x58026300
 8102080:	58026000 	.word	0x58026000
 8102084:	cb840000 	.word	0xcb840000
 8102088:	10000000 	.word	0x10000000
 810208c:	053e2d63 	.word	0x053e2d63
 8102090:	c7520000 	.word	0xc7520000
 8102094:	cfb80000 	.word	0xcfb80000

08102098 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8102098:	b580      	push	{r7, lr}
 810209a:	b084      	sub	sp, #16
 810209c:	af00      	add	r7, sp, #0
 810209e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81020a0:	687b      	ldr	r3, [r7, #4]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	4a7a      	ldr	r2, [pc, #488]	; (8102290 <ADC_ConfigureBoostMode+0x1f8>)
 81020a6:	4293      	cmp	r3, r2
 81020a8:	d004      	beq.n	81020b4 <ADC_ConfigureBoostMode+0x1c>
 81020aa:	687b      	ldr	r3, [r7, #4]
 81020ac:	681b      	ldr	r3, [r3, #0]
 81020ae:	4a79      	ldr	r2, [pc, #484]	; (8102294 <ADC_ConfigureBoostMode+0x1fc>)
 81020b0:	4293      	cmp	r3, r2
 81020b2:	d109      	bne.n	81020c8 <ADC_ConfigureBoostMode+0x30>
 81020b4:	4b78      	ldr	r3, [pc, #480]	; (8102298 <ADC_ConfigureBoostMode+0x200>)
 81020b6:	689b      	ldr	r3, [r3, #8]
 81020b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020bc:	2b00      	cmp	r3, #0
 81020be:	bf14      	ite	ne
 81020c0:	2301      	movne	r3, #1
 81020c2:	2300      	moveq	r3, #0
 81020c4:	b2db      	uxtb	r3, r3
 81020c6:	e008      	b.n	81020da <ADC_ConfigureBoostMode+0x42>
 81020c8:	4b74      	ldr	r3, [pc, #464]	; (810229c <ADC_ConfigureBoostMode+0x204>)
 81020ca:	689b      	ldr	r3, [r3, #8]
 81020cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020d0:	2b00      	cmp	r3, #0
 81020d2:	bf14      	ite	ne
 81020d4:	2301      	movne	r3, #1
 81020d6:	2300      	moveq	r3, #0
 81020d8:	b2db      	uxtb	r3, r3
 81020da:	2b00      	cmp	r3, #0
 81020dc:	d01c      	beq.n	8102118 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 81020de:	f001 f835 	bl	810314c <HAL_RCC_GetHCLKFreq>
 81020e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81020e4:	687b      	ldr	r3, [r7, #4]
 81020e6:	685b      	ldr	r3, [r3, #4]
 81020e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020ec:	d010      	beq.n	8102110 <ADC_ConfigureBoostMode+0x78>
 81020ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020f2:	d873      	bhi.n	81021dc <ADC_ConfigureBoostMode+0x144>
 81020f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81020f8:	d002      	beq.n	8102100 <ADC_ConfigureBoostMode+0x68>
 81020fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81020fe:	d16d      	bne.n	81021dc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	685b      	ldr	r3, [r3, #4]
 8102104:	0c1b      	lsrs	r3, r3, #16
 8102106:	68fa      	ldr	r2, [r7, #12]
 8102108:	fbb2 f3f3 	udiv	r3, r2, r3
 810210c:	60fb      	str	r3, [r7, #12]
        break;
 810210e:	e068      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8102110:	68fb      	ldr	r3, [r7, #12]
 8102112:	089b      	lsrs	r3, r3, #2
 8102114:	60fb      	str	r3, [r7, #12]
        break;
 8102116:	e064      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102118:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 810211c:	f04f 0100 	mov.w	r1, #0
 8102120:	f002 faa6 	bl	8104670 <HAL_RCCEx_GetPeriphCLKFreq>
 8102124:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	685b      	ldr	r3, [r3, #4]
 810212a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810212e:	d051      	beq.n	81021d4 <ADC_ConfigureBoostMode+0x13c>
 8102130:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102134:	d854      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 8102136:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 810213a:	d047      	beq.n	81021cc <ADC_ConfigureBoostMode+0x134>
 810213c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102140:	d84e      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 8102142:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102146:	d03d      	beq.n	81021c4 <ADC_ConfigureBoostMode+0x12c>
 8102148:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810214c:	d848      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 810214e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102152:	d033      	beq.n	81021bc <ADC_ConfigureBoostMode+0x124>
 8102154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102158:	d842      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 810215a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810215e:	d029      	beq.n	81021b4 <ADC_ConfigureBoostMode+0x11c>
 8102160:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102164:	d83c      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 8102166:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810216a:	d01a      	beq.n	81021a2 <ADC_ConfigureBoostMode+0x10a>
 810216c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102170:	d836      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 8102172:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102176:	d014      	beq.n	81021a2 <ADC_ConfigureBoostMode+0x10a>
 8102178:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810217c:	d830      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 810217e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102182:	d00e      	beq.n	81021a2 <ADC_ConfigureBoostMode+0x10a>
 8102184:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102188:	d82a      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 810218a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 810218e:	d008      	beq.n	81021a2 <ADC_ConfigureBoostMode+0x10a>
 8102190:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102194:	d824      	bhi.n	81021e0 <ADC_ConfigureBoostMode+0x148>
 8102196:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810219a:	d002      	beq.n	81021a2 <ADC_ConfigureBoostMode+0x10a>
 810219c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81021a0:	d11e      	bne.n	81021e0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81021a2:	687b      	ldr	r3, [r7, #4]
 81021a4:	685b      	ldr	r3, [r3, #4]
 81021a6:	0c9b      	lsrs	r3, r3, #18
 81021a8:	005b      	lsls	r3, r3, #1
 81021aa:	68fa      	ldr	r2, [r7, #12]
 81021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 81021b0:	60fb      	str	r3, [r7, #12]
        break;
 81021b2:	e016      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81021b4:	68fb      	ldr	r3, [r7, #12]
 81021b6:	091b      	lsrs	r3, r3, #4
 81021b8:	60fb      	str	r3, [r7, #12]
        break;
 81021ba:	e012      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81021bc:	68fb      	ldr	r3, [r7, #12]
 81021be:	095b      	lsrs	r3, r3, #5
 81021c0:	60fb      	str	r3, [r7, #12]
        break;
 81021c2:	e00e      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81021c4:	68fb      	ldr	r3, [r7, #12]
 81021c6:	099b      	lsrs	r3, r3, #6
 81021c8:	60fb      	str	r3, [r7, #12]
        break;
 81021ca:	e00a      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81021cc:	68fb      	ldr	r3, [r7, #12]
 81021ce:	09db      	lsrs	r3, r3, #7
 81021d0:	60fb      	str	r3, [r7, #12]
        break;
 81021d2:	e006      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81021d4:	68fb      	ldr	r3, [r7, #12]
 81021d6:	0a1b      	lsrs	r3, r3, #8
 81021d8:	60fb      	str	r3, [r7, #12]
        break;
 81021da:	e002      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
        break;
 81021dc:	bf00      	nop
 81021de:	e000      	b.n	81021e2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 81021e0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 81021e2:	f7ff f8b9 	bl	8101358 <HAL_GetREVID>
 81021e6:	4603      	mov	r3, r0
 81021e8:	f241 0203 	movw	r2, #4099	; 0x1003
 81021ec:	4293      	cmp	r3, r2
 81021ee:	d815      	bhi.n	810221c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 81021f0:	68fb      	ldr	r3, [r7, #12]
 81021f2:	4a2b      	ldr	r2, [pc, #172]	; (81022a0 <ADC_ConfigureBoostMode+0x208>)
 81021f4:	4293      	cmp	r3, r2
 81021f6:	d908      	bls.n	810220a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81021f8:	687b      	ldr	r3, [r7, #4]
 81021fa:	681b      	ldr	r3, [r3, #0]
 81021fc:	689a      	ldr	r2, [r3, #8]
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	681b      	ldr	r3, [r3, #0]
 8102202:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102206:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102208:	e03e      	b.n	8102288 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	689a      	ldr	r2, [r3, #8]
 8102210:	687b      	ldr	r3, [r7, #4]
 8102212:	681b      	ldr	r3, [r3, #0]
 8102214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102218:	609a      	str	r2, [r3, #8]
}
 810221a:	e035      	b.n	8102288 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 810221c:	68fb      	ldr	r3, [r7, #12]
 810221e:	085b      	lsrs	r3, r3, #1
 8102220:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8102222:	68fb      	ldr	r3, [r7, #12]
 8102224:	4a1f      	ldr	r2, [pc, #124]	; (81022a4 <ADC_ConfigureBoostMode+0x20c>)
 8102226:	4293      	cmp	r3, r2
 8102228:	d808      	bhi.n	810223c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	681b      	ldr	r3, [r3, #0]
 810222e:	689a      	ldr	r2, [r3, #8]
 8102230:	687b      	ldr	r3, [r7, #4]
 8102232:	681b      	ldr	r3, [r3, #0]
 8102234:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102238:	609a      	str	r2, [r3, #8]
}
 810223a:	e025      	b.n	8102288 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 810223c:	68fb      	ldr	r3, [r7, #12]
 810223e:	4a1a      	ldr	r2, [pc, #104]	; (81022a8 <ADC_ConfigureBoostMode+0x210>)
 8102240:	4293      	cmp	r3, r2
 8102242:	d80a      	bhi.n	810225a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102244:	687b      	ldr	r3, [r7, #4]
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	689b      	ldr	r3, [r3, #8]
 810224a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	681b      	ldr	r3, [r3, #0]
 8102252:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102256:	609a      	str	r2, [r3, #8]
}
 8102258:	e016      	b.n	8102288 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 810225a:	68fb      	ldr	r3, [r7, #12]
 810225c:	4a13      	ldr	r2, [pc, #76]	; (81022ac <ADC_ConfigureBoostMode+0x214>)
 810225e:	4293      	cmp	r3, r2
 8102260:	d80a      	bhi.n	8102278 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	681b      	ldr	r3, [r3, #0]
 8102266:	689b      	ldr	r3, [r3, #8]
 8102268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102274:	609a      	str	r2, [r3, #8]
}
 8102276:	e007      	b.n	8102288 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102278:	687b      	ldr	r3, [r7, #4]
 810227a:	681b      	ldr	r3, [r3, #0]
 810227c:	689a      	ldr	r2, [r3, #8]
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8102286:	609a      	str	r2, [r3, #8]
}
 8102288:	bf00      	nop
 810228a:	3710      	adds	r7, #16
 810228c:	46bd      	mov	sp, r7
 810228e:	bd80      	pop	{r7, pc}
 8102290:	40022000 	.word	0x40022000
 8102294:	40022100 	.word	0x40022100
 8102298:	40022300 	.word	0x40022300
 810229c:	58026300 	.word	0x58026300
 81022a0:	01312d00 	.word	0x01312d00
 81022a4:	005f5e10 	.word	0x005f5e10
 81022a8:	00bebc20 	.word	0x00bebc20
 81022ac:	017d7840 	.word	0x017d7840

081022b0 <LL_ADC_IsEnabled>:
{
 81022b0:	b480      	push	{r7}
 81022b2:	b083      	sub	sp, #12
 81022b4:	af00      	add	r7, sp, #0
 81022b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	689b      	ldr	r3, [r3, #8]
 81022bc:	f003 0301 	and.w	r3, r3, #1
 81022c0:	2b01      	cmp	r3, #1
 81022c2:	d101      	bne.n	81022c8 <LL_ADC_IsEnabled+0x18>
 81022c4:	2301      	movs	r3, #1
 81022c6:	e000      	b.n	81022ca <LL_ADC_IsEnabled+0x1a>
 81022c8:	2300      	movs	r3, #0
}
 81022ca:	4618      	mov	r0, r3
 81022cc:	370c      	adds	r7, #12
 81022ce:	46bd      	mov	sp, r7
 81022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022d4:	4770      	bx	lr

081022d6 <LL_ADC_REG_IsConversionOngoing>:
{
 81022d6:	b480      	push	{r7}
 81022d8:	b083      	sub	sp, #12
 81022da:	af00      	add	r7, sp, #0
 81022dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	689b      	ldr	r3, [r3, #8]
 81022e2:	f003 0304 	and.w	r3, r3, #4
 81022e6:	2b04      	cmp	r3, #4
 81022e8:	d101      	bne.n	81022ee <LL_ADC_REG_IsConversionOngoing+0x18>
 81022ea:	2301      	movs	r3, #1
 81022ec:	e000      	b.n	81022f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81022ee:	2300      	movs	r3, #0
}
 81022f0:	4618      	mov	r0, r3
 81022f2:	370c      	adds	r7, #12
 81022f4:	46bd      	mov	sp, r7
 81022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fa:	4770      	bx	lr

081022fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81022fc:	b590      	push	{r4, r7, lr}
 81022fe:	b09f      	sub	sp, #124	; 0x7c
 8102300:	af00      	add	r7, sp, #0
 8102302:	6078      	str	r0, [r7, #4]
 8102304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8102306:	2300      	movs	r3, #0
 8102308:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810230c:	687b      	ldr	r3, [r7, #4]
 810230e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102312:	2b01      	cmp	r3, #1
 8102314:	d101      	bne.n	810231a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8102316:	2302      	movs	r3, #2
 8102318:	e0c4      	b.n	81024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	2201      	movs	r2, #1
 810231e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8102322:	2300      	movs	r3, #0
 8102324:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8102326:	2300      	movs	r3, #0
 8102328:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 810232a:	687b      	ldr	r3, [r7, #4]
 810232c:	681b      	ldr	r3, [r3, #0]
 810232e:	4a5f      	ldr	r2, [pc, #380]	; (81024ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102330:	4293      	cmp	r3, r2
 8102332:	d102      	bne.n	810233a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8102334:	4b5e      	ldr	r3, [pc, #376]	; (81024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102336:	60bb      	str	r3, [r7, #8]
 8102338:	e001      	b.n	810233e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 810233a:	2300      	movs	r3, #0
 810233c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 810233e:	68bb      	ldr	r3, [r7, #8]
 8102340:	2b00      	cmp	r3, #0
 8102342:	d10b      	bne.n	810235c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102344:	687b      	ldr	r3, [r7, #4]
 8102346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102348:	f043 0220 	orr.w	r2, r3, #32
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8102350:	687b      	ldr	r3, [r7, #4]
 8102352:	2200      	movs	r2, #0
 8102354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8102358:	2301      	movs	r3, #1
 810235a:	e0a3      	b.n	81024a4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 810235c:	68bb      	ldr	r3, [r7, #8]
 810235e:	4618      	mov	r0, r3
 8102360:	f7ff ffb9 	bl	81022d6 <LL_ADC_REG_IsConversionOngoing>
 8102364:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	4618      	mov	r0, r3
 810236c:	f7ff ffb3 	bl	81022d6 <LL_ADC_REG_IsConversionOngoing>
 8102370:	4603      	mov	r3, r0
 8102372:	2b00      	cmp	r3, #0
 8102374:	f040 8085 	bne.w	8102482 <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8102378:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810237a:	2b00      	cmp	r3, #0
 810237c:	f040 8081 	bne.w	8102482 <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8102380:	687b      	ldr	r3, [r7, #4]
 8102382:	681b      	ldr	r3, [r3, #0]
 8102384:	4a49      	ldr	r2, [pc, #292]	; (81024ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102386:	4293      	cmp	r3, r2
 8102388:	d004      	beq.n	8102394 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 810238a:	687b      	ldr	r3, [r7, #4]
 810238c:	681b      	ldr	r3, [r3, #0]
 810238e:	4a48      	ldr	r2, [pc, #288]	; (81024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102390:	4293      	cmp	r3, r2
 8102392:	d101      	bne.n	8102398 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8102394:	4b47      	ldr	r3, [pc, #284]	; (81024b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8102396:	e000      	b.n	810239a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8102398:	4b47      	ldr	r3, [pc, #284]	; (81024b8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 810239a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810239c:	683b      	ldr	r3, [r7, #0]
 810239e:	681b      	ldr	r3, [r3, #0]
 81023a0:	2b00      	cmp	r3, #0
 81023a2:	d03b      	beq.n	810241c <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81023a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023a6:	689b      	ldr	r3, [r3, #8]
 81023a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81023ac:	683b      	ldr	r3, [r7, #0]
 81023ae:	685b      	ldr	r3, [r3, #4]
 81023b0:	431a      	orrs	r2, r3
 81023b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023b4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81023b6:	687b      	ldr	r3, [r7, #4]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	4a3c      	ldr	r2, [pc, #240]	; (81024ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81023bc:	4293      	cmp	r3, r2
 81023be:	d004      	beq.n	81023ca <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	681b      	ldr	r3, [r3, #0]
 81023c4:	4a3a      	ldr	r2, [pc, #232]	; (81024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81023c6:	4293      	cmp	r3, r2
 81023c8:	d10e      	bne.n	81023e8 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81023ca:	4838      	ldr	r0, [pc, #224]	; (81024ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81023cc:	f7ff ff70 	bl	81022b0 <LL_ADC_IsEnabled>
 81023d0:	4604      	mov	r4, r0
 81023d2:	4837      	ldr	r0, [pc, #220]	; (81024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81023d4:	f7ff ff6c 	bl	81022b0 <LL_ADC_IsEnabled>
 81023d8:	4603      	mov	r3, r0
 81023da:	4323      	orrs	r3, r4
 81023dc:	2b00      	cmp	r3, #0
 81023de:	bf0c      	ite	eq
 81023e0:	2301      	moveq	r3, #1
 81023e2:	2300      	movne	r3, #0
 81023e4:	b2db      	uxtb	r3, r3
 81023e6:	e008      	b.n	81023fa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81023e8:	4834      	ldr	r0, [pc, #208]	; (81024bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81023ea:	f7ff ff61 	bl	81022b0 <LL_ADC_IsEnabled>
 81023ee:	4603      	mov	r3, r0
 81023f0:	2b00      	cmp	r3, #0
 81023f2:	bf0c      	ite	eq
 81023f4:	2301      	moveq	r3, #1
 81023f6:	2300      	movne	r3, #0
 81023f8:	b2db      	uxtb	r3, r3
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d04b      	beq.n	8102496 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81023fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102400:	689b      	ldr	r3, [r3, #8]
 8102402:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102406:	f023 030f 	bic.w	r3, r3, #15
 810240a:	683a      	ldr	r2, [r7, #0]
 810240c:	6811      	ldr	r1, [r2, #0]
 810240e:	683a      	ldr	r2, [r7, #0]
 8102410:	6892      	ldr	r2, [r2, #8]
 8102412:	430a      	orrs	r2, r1
 8102414:	431a      	orrs	r2, r3
 8102416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102418:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810241a:	e03c      	b.n	8102496 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 810241c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810241e:	689b      	ldr	r3, [r3, #8]
 8102420:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102426:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102428:	687b      	ldr	r3, [r7, #4]
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	4a1f      	ldr	r2, [pc, #124]	; (81024ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810242e:	4293      	cmp	r3, r2
 8102430:	d004      	beq.n	810243c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	4a1e      	ldr	r2, [pc, #120]	; (81024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102438:	4293      	cmp	r3, r2
 810243a:	d10e      	bne.n	810245a <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 810243c:	481b      	ldr	r0, [pc, #108]	; (81024ac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 810243e:	f7ff ff37 	bl	81022b0 <LL_ADC_IsEnabled>
 8102442:	4604      	mov	r4, r0
 8102444:	481a      	ldr	r0, [pc, #104]	; (81024b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102446:	f7ff ff33 	bl	81022b0 <LL_ADC_IsEnabled>
 810244a:	4603      	mov	r3, r0
 810244c:	4323      	orrs	r3, r4
 810244e:	2b00      	cmp	r3, #0
 8102450:	bf0c      	ite	eq
 8102452:	2301      	moveq	r3, #1
 8102454:	2300      	movne	r3, #0
 8102456:	b2db      	uxtb	r3, r3
 8102458:	e008      	b.n	810246c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 810245a:	4818      	ldr	r0, [pc, #96]	; (81024bc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 810245c:	f7ff ff28 	bl	81022b0 <LL_ADC_IsEnabled>
 8102460:	4603      	mov	r3, r0
 8102462:	2b00      	cmp	r3, #0
 8102464:	bf0c      	ite	eq
 8102466:	2301      	moveq	r3, #1
 8102468:	2300      	movne	r3, #0
 810246a:	b2db      	uxtb	r3, r3
 810246c:	2b00      	cmp	r3, #0
 810246e:	d012      	beq.n	8102496 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102472:	689b      	ldr	r3, [r3, #8]
 8102474:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102478:	f023 030f 	bic.w	r3, r3, #15
 810247c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810247e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102480:	e009      	b.n	8102496 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102482:	687b      	ldr	r3, [r7, #4]
 8102484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102486:	f043 0220 	orr.w	r2, r3, #32
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810248e:	2301      	movs	r3, #1
 8102490:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8102494:	e000      	b.n	8102498 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102496:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	2200      	movs	r2, #0
 810249c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81024a0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81024a4:	4618      	mov	r0, r3
 81024a6:	377c      	adds	r7, #124	; 0x7c
 81024a8:	46bd      	mov	sp, r7
 81024aa:	bd90      	pop	{r4, r7, pc}
 81024ac:	40022000 	.word	0x40022000
 81024b0:	40022100 	.word	0x40022100
 81024b4:	40022300 	.word	0x40022300
 81024b8:	58026300 	.word	0x58026300
 81024bc:	58026000 	.word	0x58026000

081024c0 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 81024c0:	b580      	push	{r7, lr}
 81024c2:	b082      	sub	sp, #8
 81024c4:	af00      	add	r7, sp, #0
 81024c6:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	2b00      	cmp	r3, #0
 81024cc:	d003      	beq.n	81024d6 <HAL_CEC_Init+0x16>
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024d2:	2b00      	cmp	r3, #0
 81024d4:	d101      	bne.n	81024da <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 81024d6:	2301      	movs	r3, #1
 81024d8:	e050      	b.n	810257c <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 81024da:	687b      	ldr	r3, [r7, #4]
 81024dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81024de:	2b00      	cmp	r3, #0
 81024e0:	d106      	bne.n	81024f0 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	2200      	movs	r2, #0
 81024e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 81024ea:	6878      	ldr	r0, [r7, #4]
 81024ec:	f7fe fc12 	bl	8100d14 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	2224      	movs	r2, #36	; 0x24
 81024f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	681b      	ldr	r3, [r3, #0]
 81024fa:	681a      	ldr	r2, [r3, #0]
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	681b      	ldr	r3, [r3, #0]
 8102500:	f022 0201 	bic.w	r2, r2, #1
 8102504:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	685a      	ldr	r2, [r3, #4]
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	689b      	ldr	r3, [r3, #8]
 810250e:	431a      	orrs	r2, r3
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	68db      	ldr	r3, [r3, #12]
 8102514:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102516:	687b      	ldr	r3, [r7, #4]
 8102518:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810251a:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	695b      	ldr	r3, [r3, #20]
 8102520:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102526:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 810252c:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8102532:	041b      	lsls	r3, r3, #16
 8102534:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102540:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102542:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	681b      	ldr	r3, [r3, #0]
 8102548:	695b      	ldr	r3, [r3, #20]
 810254a:	687a      	ldr	r2, [r7, #4]
 810254c:	6812      	ldr	r2, [r2, #0]
 810254e:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8102552:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8102556:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102558:	687b      	ldr	r3, [r7, #4]
 810255a:	681b      	ldr	r3, [r3, #0]
 810255c:	681a      	ldr	r2, [r3, #0]
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	681b      	ldr	r3, [r3, #0]
 8102562:	f042 0201 	orr.w	r2, r2, #1
 8102566:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	2200      	movs	r2, #0
 810256c:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 810256e:	687b      	ldr	r3, [r7, #4]
 8102570:	2220      	movs	r2, #32
 8102572:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	2220      	movs	r2, #32
 8102578:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810257a:	2300      	movs	r3, #0
}
 810257c:	4618      	mov	r0, r3
 810257e:	3708      	adds	r7, #8
 8102580:	46bd      	mov	sp, r7
 8102582:	bd80      	pop	{r7, pc}

08102584 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8102584:	b580      	push	{r7, lr}
 8102586:	b084      	sub	sp, #16
 8102588:	af00      	add	r7, sp, #0
 810258a:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 810258c:	687b      	ldr	r3, [r7, #4]
 810258e:	681b      	ldr	r3, [r3, #0]
 8102590:	691b      	ldr	r3, [r3, #16]
 8102592:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8102594:	68fb      	ldr	r3, [r7, #12]
 8102596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810259a:	2b00      	cmp	r3, #0
 810259c:	d00a      	beq.n	81025b4 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 810259e:	687b      	ldr	r3, [r7, #4]
 81025a0:	2280      	movs	r2, #128	; 0x80
 81025a2:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 81025a4:	687b      	ldr	r3, [r7, #4]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	691a      	ldr	r2, [r3, #16]
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 81025b2:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 81025b4:	68fb      	ldr	r3, [r7, #12]
 81025b6:	f003 0301 	and.w	r3, r3, #1
 81025ba:	2b00      	cmp	r3, #0
 81025bc:	d01c      	beq.n	81025f8 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	2222      	movs	r2, #34	; 0x22
 81025c2:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 81025c4:	687b      	ldr	r3, [r7, #4]
 81025c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 81025c8:	3301      	adds	r3, #1
 81025ca:	b29a      	uxth	r2, r3
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 81025d0:	687b      	ldr	r3, [r7, #4]
 81025d2:	681b      	ldr	r3, [r3, #0]
 81025d4:	68da      	ldr	r2, [r3, #12]
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025da:	b2d2      	uxtb	r2, r2
 81025dc:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81025e2:	1c5a      	adds	r2, r3, #1
 81025e4:	687b      	ldr	r3, [r7, #4]
 81025e6:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	691a      	ldr	r2, [r3, #16]
 81025ee:	687b      	ldr	r3, [r7, #4]
 81025f0:	681b      	ldr	r3, [r3, #0]
 81025f2:	f042 0201 	orr.w	r2, r2, #1
 81025f6:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 81025f8:	68fb      	ldr	r3, [r7, #12]
 81025fa:	f003 0302 	and.w	r3, r3, #2
 81025fe:	2b00      	cmp	r3, #0
 8102600:	d01e      	beq.n	8102640 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	681b      	ldr	r3, [r3, #0]
 8102606:	691a      	ldr	r2, [r3, #16]
 8102608:	687b      	ldr	r3, [r7, #4]
 810260a:	681b      	ldr	r3, [r3, #0]
 810260c:	f042 0202 	orr.w	r2, r2, #2
 8102610:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	2220      	movs	r2, #32
 8102616:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102618:	687b      	ldr	r3, [r7, #4]
 810261a:	2200      	movs	r2, #0
 810261c:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102626:	425b      	negs	r3, r3
 8102628:	441a      	add	r2, r3
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102632:	4619      	mov	r1, r3
 8102634:	6878      	ldr	r0, [r7, #4]
 8102636:	f000 f88c 	bl	8102752 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	2200      	movs	r2, #0
 810263e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8102640:	68fb      	ldr	r3, [r7, #12]
 8102642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102646:	2b00      	cmp	r3, #0
 8102648:	d024      	beq.n	8102694 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 810264e:	3b01      	subs	r3, #1
 8102650:	b29a      	uxth	r2, r3
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 810265a:	2b00      	cmp	r3, #0
 810265c:	d107      	bne.n	810266e <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	681a      	ldr	r2, [r3, #0]
 8102664:	687b      	ldr	r3, [r7, #4]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	f042 0204 	orr.w	r2, r2, #4
 810266c:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 810266e:	687b      	ldr	r3, [r7, #4]
 8102670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102672:	781a      	ldrb	r2, [r3, #0]
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810267e:	1c5a      	adds	r2, r3, #1
 8102680:	687b      	ldr	r3, [r7, #4]
 8102682:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8102684:	687b      	ldr	r3, [r7, #4]
 8102686:	681b      	ldr	r3, [r3, #0]
 8102688:	691a      	ldr	r2, [r3, #16]
 810268a:	687b      	ldr	r3, [r7, #4]
 810268c:	681b      	ldr	r3, [r3, #0]
 810268e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102692:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8102694:	68fb      	ldr	r3, [r7, #12]
 8102696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810269a:	2b00      	cmp	r3, #0
 810269c:	d014      	beq.n	81026c8 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 810269e:	687b      	ldr	r3, [r7, #4]
 81026a0:	681b      	ldr	r3, [r3, #0]
 81026a2:	691a      	ldr	r2, [r3, #16]
 81026a4:	687b      	ldr	r3, [r7, #4]
 81026a6:	681b      	ldr	r3, [r3, #0]
 81026a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81026ac:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 81026ae:	687b      	ldr	r3, [r7, #4]
 81026b0:	2220      	movs	r2, #32
 81026b2:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 81026b4:	687b      	ldr	r3, [r7, #4]
 81026b6:	2200      	movs	r2, #0
 81026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81026bc:	687b      	ldr	r3, [r7, #4]
 81026be:	2200      	movs	r2, #0
 81026c0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 81026c2:	6878      	ldr	r0, [r7, #4]
 81026c4:	f000 f83b 	bl	810273e <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 81026c8:	68fa      	ldr	r2, [r7, #12]
 81026ca:	f641 437c 	movw	r3, #7292	; 0x1c7c
 81026ce:	4013      	ands	r3, r2
 81026d0:	2b00      	cmp	r3, #0
 81026d2:	d030      	beq.n	8102736 <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 81026d4:	687b      	ldr	r3, [r7, #4]
 81026d6:	68fa      	ldr	r2, [r7, #12]
 81026d8:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 81026da:	687b      	ldr	r3, [r7, #4]
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	691b      	ldr	r3, [r3, #16]
 81026e0:	687a      	ldr	r2, [r7, #4]
 81026e2:	6812      	ldr	r2, [r2, #0]
 81026e4:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 81026e8:	f043 031c 	orr.w	r3, r3, #28
 81026ec:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 81026ee:	68fb      	ldr	r3, [r7, #12]
 81026f0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 81026f4:	2b00      	cmp	r3, #0
 81026f6:	d00e      	beq.n	8102716 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102700:	425b      	negs	r3, r3
 8102702:	441a      	add	r2, r3
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	2200      	movs	r2, #0
 810270c:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 810270e:	687b      	ldr	r3, [r7, #4]
 8102710:	2220      	movs	r2, #32
 8102712:	63da      	str	r2, [r3, #60]	; 0x3c
 8102714:	e00c      	b.n	8102730 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8102716:	68fb      	ldr	r3, [r7, #12]
 8102718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810271c:	2b00      	cmp	r3, #0
 810271e:	d107      	bne.n	8102730 <HAL_CEC_IRQHandler+0x1ac>
 8102720:	68fb      	ldr	r3, [r7, #12]
 8102722:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8102726:	2b00      	cmp	r3, #0
 8102728:	d002      	beq.n	8102730 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 810272a:	687b      	ldr	r3, [r7, #4]
 810272c:	2220      	movs	r2, #32
 810272e:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8102730:	6878      	ldr	r0, [r7, #4]
 8102732:	f000 f819 	bl	8102768 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8102736:	bf00      	nop
 8102738:	3710      	adds	r7, #16
 810273a:	46bd      	mov	sp, r7
 810273c:	bd80      	pop	{r7, pc}

0810273e <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 810273e:	b480      	push	{r7}
 8102740:	b083      	sub	sp, #12
 8102742:	af00      	add	r7, sp, #0
 8102744:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8102746:	bf00      	nop
 8102748:	370c      	adds	r7, #12
 810274a:	46bd      	mov	sp, r7
 810274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102750:	4770      	bx	lr

08102752 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8102752:	b480      	push	{r7}
 8102754:	b083      	sub	sp, #12
 8102756:	af00      	add	r7, sp, #0
 8102758:	6078      	str	r0, [r7, #4]
 810275a:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 810275c:	bf00      	nop
 810275e:	370c      	adds	r7, #12
 8102760:	46bd      	mov	sp, r7
 8102762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102766:	4770      	bx	lr

08102768 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102768:	b480      	push	{r7}
 810276a:	b083      	sub	sp, #12
 810276c:	af00      	add	r7, sp, #0
 810276e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8102770:	bf00      	nop
 8102772:	370c      	adds	r7, #12
 8102774:	46bd      	mov	sp, r7
 8102776:	f85d 7b04 	ldr.w	r7, [sp], #4
 810277a:	4770      	bx	lr

0810277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810277c:	b480      	push	{r7}
 810277e:	b085      	sub	sp, #20
 8102780:	af00      	add	r7, sp, #0
 8102782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102784:	687b      	ldr	r3, [r7, #4]
 8102786:	f003 0307 	and.w	r3, r3, #7
 810278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810278c:	4b0c      	ldr	r3, [pc, #48]	; (81027c0 <__NVIC_SetPriorityGrouping+0x44>)
 810278e:	68db      	ldr	r3, [r3, #12]
 8102790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102792:	68ba      	ldr	r2, [r7, #8]
 8102794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102798:	4013      	ands	r3, r2
 810279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810279c:	68fb      	ldr	r3, [r7, #12]
 810279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81027a0:	68bb      	ldr	r3, [r7, #8]
 81027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81027ae:	4a04      	ldr	r2, [pc, #16]	; (81027c0 <__NVIC_SetPriorityGrouping+0x44>)
 81027b0:	68bb      	ldr	r3, [r7, #8]
 81027b2:	60d3      	str	r3, [r2, #12]
}
 81027b4:	bf00      	nop
 81027b6:	3714      	adds	r7, #20
 81027b8:	46bd      	mov	sp, r7
 81027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027be:	4770      	bx	lr
 81027c0:	e000ed00 	.word	0xe000ed00

081027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81027c4:	b480      	push	{r7}
 81027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81027c8:	4b04      	ldr	r3, [pc, #16]	; (81027dc <__NVIC_GetPriorityGrouping+0x18>)
 81027ca:	68db      	ldr	r3, [r3, #12]
 81027cc:	0a1b      	lsrs	r3, r3, #8
 81027ce:	f003 0307 	and.w	r3, r3, #7
}
 81027d2:	4618      	mov	r0, r3
 81027d4:	46bd      	mov	sp, r7
 81027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027da:	4770      	bx	lr
 81027dc:	e000ed00 	.word	0xe000ed00

081027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81027e0:	b480      	push	{r7}
 81027e2:	b083      	sub	sp, #12
 81027e4:	af00      	add	r7, sp, #0
 81027e6:	4603      	mov	r3, r0
 81027e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81027ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027ee:	2b00      	cmp	r3, #0
 81027f0:	db0b      	blt.n	810280a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81027f2:	88fb      	ldrh	r3, [r7, #6]
 81027f4:	f003 021f 	and.w	r2, r3, #31
 81027f8:	4907      	ldr	r1, [pc, #28]	; (8102818 <__NVIC_EnableIRQ+0x38>)
 81027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027fe:	095b      	lsrs	r3, r3, #5
 8102800:	2001      	movs	r0, #1
 8102802:	fa00 f202 	lsl.w	r2, r0, r2
 8102806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810280a:	bf00      	nop
 810280c:	370c      	adds	r7, #12
 810280e:	46bd      	mov	sp, r7
 8102810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102814:	4770      	bx	lr
 8102816:	bf00      	nop
 8102818:	e000e100 	.word	0xe000e100

0810281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810281c:	b480      	push	{r7}
 810281e:	b083      	sub	sp, #12
 8102820:	af00      	add	r7, sp, #0
 8102822:	4603      	mov	r3, r0
 8102824:	6039      	str	r1, [r7, #0]
 8102826:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102828:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810282c:	2b00      	cmp	r3, #0
 810282e:	db0a      	blt.n	8102846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102830:	683b      	ldr	r3, [r7, #0]
 8102832:	b2da      	uxtb	r2, r3
 8102834:	490c      	ldr	r1, [pc, #48]	; (8102868 <__NVIC_SetPriority+0x4c>)
 8102836:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810283a:	0112      	lsls	r2, r2, #4
 810283c:	b2d2      	uxtb	r2, r2
 810283e:	440b      	add	r3, r1
 8102840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102844:	e00a      	b.n	810285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102846:	683b      	ldr	r3, [r7, #0]
 8102848:	b2da      	uxtb	r2, r3
 810284a:	4908      	ldr	r1, [pc, #32]	; (810286c <__NVIC_SetPriority+0x50>)
 810284c:	88fb      	ldrh	r3, [r7, #6]
 810284e:	f003 030f 	and.w	r3, r3, #15
 8102852:	3b04      	subs	r3, #4
 8102854:	0112      	lsls	r2, r2, #4
 8102856:	b2d2      	uxtb	r2, r2
 8102858:	440b      	add	r3, r1
 810285a:	761a      	strb	r2, [r3, #24]
}
 810285c:	bf00      	nop
 810285e:	370c      	adds	r7, #12
 8102860:	46bd      	mov	sp, r7
 8102862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102866:	4770      	bx	lr
 8102868:	e000e100 	.word	0xe000e100
 810286c:	e000ed00 	.word	0xe000ed00

08102870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102870:	b480      	push	{r7}
 8102872:	b089      	sub	sp, #36	; 0x24
 8102874:	af00      	add	r7, sp, #0
 8102876:	60f8      	str	r0, [r7, #12]
 8102878:	60b9      	str	r1, [r7, #8]
 810287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810287c:	68fb      	ldr	r3, [r7, #12]
 810287e:	f003 0307 	and.w	r3, r3, #7
 8102882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102884:	69fb      	ldr	r3, [r7, #28]
 8102886:	f1c3 0307 	rsb	r3, r3, #7
 810288a:	2b04      	cmp	r3, #4
 810288c:	bf28      	it	cs
 810288e:	2304      	movcs	r3, #4
 8102890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102892:	69fb      	ldr	r3, [r7, #28]
 8102894:	3304      	adds	r3, #4
 8102896:	2b06      	cmp	r3, #6
 8102898:	d902      	bls.n	81028a0 <NVIC_EncodePriority+0x30>
 810289a:	69fb      	ldr	r3, [r7, #28]
 810289c:	3b03      	subs	r3, #3
 810289e:	e000      	b.n	81028a2 <NVIC_EncodePriority+0x32>
 81028a0:	2300      	movs	r3, #0
 81028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81028a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81028a8:	69bb      	ldr	r3, [r7, #24]
 81028aa:	fa02 f303 	lsl.w	r3, r2, r3
 81028ae:	43da      	mvns	r2, r3
 81028b0:	68bb      	ldr	r3, [r7, #8]
 81028b2:	401a      	ands	r2, r3
 81028b4:	697b      	ldr	r3, [r7, #20]
 81028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81028b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81028bc:	697b      	ldr	r3, [r7, #20]
 81028be:	fa01 f303 	lsl.w	r3, r1, r3
 81028c2:	43d9      	mvns	r1, r3
 81028c4:	687b      	ldr	r3, [r7, #4]
 81028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81028c8:	4313      	orrs	r3, r2
         );
}
 81028ca:	4618      	mov	r0, r3
 81028cc:	3724      	adds	r7, #36	; 0x24
 81028ce:	46bd      	mov	sp, r7
 81028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028d4:	4770      	bx	lr
	...

081028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b082      	sub	sp, #8
 81028dc:	af00      	add	r7, sp, #0
 81028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81028e0:	687b      	ldr	r3, [r7, #4]
 81028e2:	3b01      	subs	r3, #1
 81028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81028e8:	d301      	bcc.n	81028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81028ea:	2301      	movs	r3, #1
 81028ec:	e00f      	b.n	810290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81028ee:	4a0a      	ldr	r2, [pc, #40]	; (8102918 <SysTick_Config+0x40>)
 81028f0:	687b      	ldr	r3, [r7, #4]
 81028f2:	3b01      	subs	r3, #1
 81028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81028f6:	210f      	movs	r1, #15
 81028f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81028fc:	f7ff ff8e 	bl	810281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102900:	4b05      	ldr	r3, [pc, #20]	; (8102918 <SysTick_Config+0x40>)
 8102902:	2200      	movs	r2, #0
 8102904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102906:	4b04      	ldr	r3, [pc, #16]	; (8102918 <SysTick_Config+0x40>)
 8102908:	2207      	movs	r2, #7
 810290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810290c:	2300      	movs	r3, #0
}
 810290e:	4618      	mov	r0, r3
 8102910:	3708      	adds	r7, #8
 8102912:	46bd      	mov	sp, r7
 8102914:	bd80      	pop	{r7, pc}
 8102916:	bf00      	nop
 8102918:	e000e010 	.word	0xe000e010

0810291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810291c:	b580      	push	{r7, lr}
 810291e:	b082      	sub	sp, #8
 8102920:	af00      	add	r7, sp, #0
 8102922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102924:	6878      	ldr	r0, [r7, #4]
 8102926:	f7ff ff29 	bl	810277c <__NVIC_SetPriorityGrouping>
}
 810292a:	bf00      	nop
 810292c:	3708      	adds	r7, #8
 810292e:	46bd      	mov	sp, r7
 8102930:	bd80      	pop	{r7, pc}

08102932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102932:	b580      	push	{r7, lr}
 8102934:	b086      	sub	sp, #24
 8102936:	af00      	add	r7, sp, #0
 8102938:	4603      	mov	r3, r0
 810293a:	60b9      	str	r1, [r7, #8]
 810293c:	607a      	str	r2, [r7, #4]
 810293e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102940:	f7ff ff40 	bl	81027c4 <__NVIC_GetPriorityGrouping>
 8102944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102946:	687a      	ldr	r2, [r7, #4]
 8102948:	68b9      	ldr	r1, [r7, #8]
 810294a:	6978      	ldr	r0, [r7, #20]
 810294c:	f7ff ff90 	bl	8102870 <NVIC_EncodePriority>
 8102950:	4602      	mov	r2, r0
 8102952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102956:	4611      	mov	r1, r2
 8102958:	4618      	mov	r0, r3
 810295a:	f7ff ff5f 	bl	810281c <__NVIC_SetPriority>
}
 810295e:	bf00      	nop
 8102960:	3718      	adds	r7, #24
 8102962:	46bd      	mov	sp, r7
 8102964:	bd80      	pop	{r7, pc}

08102966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102966:	b580      	push	{r7, lr}
 8102968:	b082      	sub	sp, #8
 810296a:	af00      	add	r7, sp, #0
 810296c:	4603      	mov	r3, r0
 810296e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102974:	4618      	mov	r0, r3
 8102976:	f7ff ff33 	bl	81027e0 <__NVIC_EnableIRQ>
}
 810297a:	bf00      	nop
 810297c:	3708      	adds	r7, #8
 810297e:	46bd      	mov	sp, r7
 8102980:	bd80      	pop	{r7, pc}

08102982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102982:	b580      	push	{r7, lr}
 8102984:	b082      	sub	sp, #8
 8102986:	af00      	add	r7, sp, #0
 8102988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810298a:	6878      	ldr	r0, [r7, #4]
 810298c:	f7ff ffa4 	bl	81028d8 <SysTick_Config>
 8102990:	4603      	mov	r3, r0
}
 8102992:	4618      	mov	r0, r3
 8102994:	3708      	adds	r7, #8
 8102996:	46bd      	mov	sp, r7
 8102998:	bd80      	pop	{r7, pc}
	...

0810299c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810299c:	b480      	push	{r7}
 810299e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81029a0:	4b07      	ldr	r3, [pc, #28]	; (81029c0 <HAL_GetCurrentCPUID+0x24>)
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	091b      	lsrs	r3, r3, #4
 81029a6:	f003 030f 	and.w	r3, r3, #15
 81029aa:	2b07      	cmp	r3, #7
 81029ac:	d101      	bne.n	81029b2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81029ae:	2303      	movs	r3, #3
 81029b0:	e000      	b.n	81029b4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81029b2:	2301      	movs	r3, #1
  }
}
 81029b4:	4618      	mov	r0, r3
 81029b6:	46bd      	mov	sp, r7
 81029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029bc:	4770      	bx	lr
 81029be:	bf00      	nop
 81029c0:	e000ed00 	.word	0xe000ed00

081029c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81029c4:	b480      	push	{r7}
 81029c6:	b089      	sub	sp, #36	; 0x24
 81029c8:	af00      	add	r7, sp, #0
 81029ca:	6078      	str	r0, [r7, #4]
 81029cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81029ce:	2300      	movs	r3, #0
 81029d0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81029d2:	4b89      	ldr	r3, [pc, #548]	; (8102bf8 <HAL_GPIO_Init+0x234>)
 81029d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81029d6:	e194      	b.n	8102d02 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81029d8:	683b      	ldr	r3, [r7, #0]
 81029da:	681a      	ldr	r2, [r3, #0]
 81029dc:	2101      	movs	r1, #1
 81029de:	69fb      	ldr	r3, [r7, #28]
 81029e0:	fa01 f303 	lsl.w	r3, r1, r3
 81029e4:	4013      	ands	r3, r2
 81029e6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81029e8:	693b      	ldr	r3, [r7, #16]
 81029ea:	2b00      	cmp	r3, #0
 81029ec:	f000 8186 	beq.w	8102cfc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81029f0:	683b      	ldr	r3, [r7, #0]
 81029f2:	685b      	ldr	r3, [r3, #4]
 81029f4:	f003 0303 	and.w	r3, r3, #3
 81029f8:	2b01      	cmp	r3, #1
 81029fa:	d005      	beq.n	8102a08 <HAL_GPIO_Init+0x44>
 81029fc:	683b      	ldr	r3, [r7, #0]
 81029fe:	685b      	ldr	r3, [r3, #4]
 8102a00:	f003 0303 	and.w	r3, r3, #3
 8102a04:	2b02      	cmp	r3, #2
 8102a06:	d130      	bne.n	8102a6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102a08:	687b      	ldr	r3, [r7, #4]
 8102a0a:	689b      	ldr	r3, [r3, #8]
 8102a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102a0e:	69fb      	ldr	r3, [r7, #28]
 8102a10:	005b      	lsls	r3, r3, #1
 8102a12:	2203      	movs	r2, #3
 8102a14:	fa02 f303 	lsl.w	r3, r2, r3
 8102a18:	43db      	mvns	r3, r3
 8102a1a:	69ba      	ldr	r2, [r7, #24]
 8102a1c:	4013      	ands	r3, r2
 8102a1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102a20:	683b      	ldr	r3, [r7, #0]
 8102a22:	68da      	ldr	r2, [r3, #12]
 8102a24:	69fb      	ldr	r3, [r7, #28]
 8102a26:	005b      	lsls	r3, r3, #1
 8102a28:	fa02 f303 	lsl.w	r3, r2, r3
 8102a2c:	69ba      	ldr	r2, [r7, #24]
 8102a2e:	4313      	orrs	r3, r2
 8102a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	69ba      	ldr	r2, [r7, #24]
 8102a36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102a38:	687b      	ldr	r3, [r7, #4]
 8102a3a:	685b      	ldr	r3, [r3, #4]
 8102a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102a3e:	2201      	movs	r2, #1
 8102a40:	69fb      	ldr	r3, [r7, #28]
 8102a42:	fa02 f303 	lsl.w	r3, r2, r3
 8102a46:	43db      	mvns	r3, r3
 8102a48:	69ba      	ldr	r2, [r7, #24]
 8102a4a:	4013      	ands	r3, r2
 8102a4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102a4e:	683b      	ldr	r3, [r7, #0]
 8102a50:	685b      	ldr	r3, [r3, #4]
 8102a52:	091b      	lsrs	r3, r3, #4
 8102a54:	f003 0201 	and.w	r2, r3, #1
 8102a58:	69fb      	ldr	r3, [r7, #28]
 8102a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8102a5e:	69ba      	ldr	r2, [r7, #24]
 8102a60:	4313      	orrs	r3, r2
 8102a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102a64:	687b      	ldr	r3, [r7, #4]
 8102a66:	69ba      	ldr	r2, [r7, #24]
 8102a68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102a6a:	683b      	ldr	r3, [r7, #0]
 8102a6c:	685b      	ldr	r3, [r3, #4]
 8102a6e:	f003 0303 	and.w	r3, r3, #3
 8102a72:	2b03      	cmp	r3, #3
 8102a74:	d017      	beq.n	8102aa6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102a76:	687b      	ldr	r3, [r7, #4]
 8102a78:	68db      	ldr	r3, [r3, #12]
 8102a7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102a7c:	69fb      	ldr	r3, [r7, #28]
 8102a7e:	005b      	lsls	r3, r3, #1
 8102a80:	2203      	movs	r2, #3
 8102a82:	fa02 f303 	lsl.w	r3, r2, r3
 8102a86:	43db      	mvns	r3, r3
 8102a88:	69ba      	ldr	r2, [r7, #24]
 8102a8a:	4013      	ands	r3, r2
 8102a8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102a8e:	683b      	ldr	r3, [r7, #0]
 8102a90:	689a      	ldr	r2, [r3, #8]
 8102a92:	69fb      	ldr	r3, [r7, #28]
 8102a94:	005b      	lsls	r3, r3, #1
 8102a96:	fa02 f303 	lsl.w	r3, r2, r3
 8102a9a:	69ba      	ldr	r2, [r7, #24]
 8102a9c:	4313      	orrs	r3, r2
 8102a9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102aa0:	687b      	ldr	r3, [r7, #4]
 8102aa2:	69ba      	ldr	r2, [r7, #24]
 8102aa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102aa6:	683b      	ldr	r3, [r7, #0]
 8102aa8:	685b      	ldr	r3, [r3, #4]
 8102aaa:	f003 0303 	and.w	r3, r3, #3
 8102aae:	2b02      	cmp	r3, #2
 8102ab0:	d123      	bne.n	8102afa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102ab2:	69fb      	ldr	r3, [r7, #28]
 8102ab4:	08da      	lsrs	r2, r3, #3
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	3208      	adds	r2, #8
 8102aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102ac0:	69fb      	ldr	r3, [r7, #28]
 8102ac2:	f003 0307 	and.w	r3, r3, #7
 8102ac6:	009b      	lsls	r3, r3, #2
 8102ac8:	220f      	movs	r2, #15
 8102aca:	fa02 f303 	lsl.w	r3, r2, r3
 8102ace:	43db      	mvns	r3, r3
 8102ad0:	69ba      	ldr	r2, [r7, #24]
 8102ad2:	4013      	ands	r3, r2
 8102ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102ad6:	683b      	ldr	r3, [r7, #0]
 8102ad8:	691a      	ldr	r2, [r3, #16]
 8102ada:	69fb      	ldr	r3, [r7, #28]
 8102adc:	f003 0307 	and.w	r3, r3, #7
 8102ae0:	009b      	lsls	r3, r3, #2
 8102ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8102ae6:	69ba      	ldr	r2, [r7, #24]
 8102ae8:	4313      	orrs	r3, r2
 8102aea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102aec:	69fb      	ldr	r3, [r7, #28]
 8102aee:	08da      	lsrs	r2, r3, #3
 8102af0:	687b      	ldr	r3, [r7, #4]
 8102af2:	3208      	adds	r2, #8
 8102af4:	69b9      	ldr	r1, [r7, #24]
 8102af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	681b      	ldr	r3, [r3, #0]
 8102afe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102b00:	69fb      	ldr	r3, [r7, #28]
 8102b02:	005b      	lsls	r3, r3, #1
 8102b04:	2203      	movs	r2, #3
 8102b06:	fa02 f303 	lsl.w	r3, r2, r3
 8102b0a:	43db      	mvns	r3, r3
 8102b0c:	69ba      	ldr	r2, [r7, #24]
 8102b0e:	4013      	ands	r3, r2
 8102b10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102b12:	683b      	ldr	r3, [r7, #0]
 8102b14:	685b      	ldr	r3, [r3, #4]
 8102b16:	f003 0203 	and.w	r2, r3, #3
 8102b1a:	69fb      	ldr	r3, [r7, #28]
 8102b1c:	005b      	lsls	r3, r3, #1
 8102b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8102b22:	69ba      	ldr	r2, [r7, #24]
 8102b24:	4313      	orrs	r3, r2
 8102b26:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	69ba      	ldr	r2, [r7, #24]
 8102b2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102b2e:	683b      	ldr	r3, [r7, #0]
 8102b30:	685b      	ldr	r3, [r3, #4]
 8102b32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102b36:	2b00      	cmp	r3, #0
 8102b38:	f000 80e0 	beq.w	8102cfc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102b3c:	4b2f      	ldr	r3, [pc, #188]	; (8102bfc <HAL_GPIO_Init+0x238>)
 8102b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102b42:	4a2e      	ldr	r2, [pc, #184]	; (8102bfc <HAL_GPIO_Init+0x238>)
 8102b44:	f043 0302 	orr.w	r3, r3, #2
 8102b48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102b4c:	4b2b      	ldr	r3, [pc, #172]	; (8102bfc <HAL_GPIO_Init+0x238>)
 8102b4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102b52:	f003 0302 	and.w	r3, r3, #2
 8102b56:	60fb      	str	r3, [r7, #12]
 8102b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102b5a:	4a29      	ldr	r2, [pc, #164]	; (8102c00 <HAL_GPIO_Init+0x23c>)
 8102b5c:	69fb      	ldr	r3, [r7, #28]
 8102b5e:	089b      	lsrs	r3, r3, #2
 8102b60:	3302      	adds	r3, #2
 8102b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102b68:	69fb      	ldr	r3, [r7, #28]
 8102b6a:	f003 0303 	and.w	r3, r3, #3
 8102b6e:	009b      	lsls	r3, r3, #2
 8102b70:	220f      	movs	r2, #15
 8102b72:	fa02 f303 	lsl.w	r3, r2, r3
 8102b76:	43db      	mvns	r3, r3
 8102b78:	69ba      	ldr	r2, [r7, #24]
 8102b7a:	4013      	ands	r3, r2
 8102b7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	4a20      	ldr	r2, [pc, #128]	; (8102c04 <HAL_GPIO_Init+0x240>)
 8102b82:	4293      	cmp	r3, r2
 8102b84:	d052      	beq.n	8102c2c <HAL_GPIO_Init+0x268>
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	4a1f      	ldr	r2, [pc, #124]	; (8102c08 <HAL_GPIO_Init+0x244>)
 8102b8a:	4293      	cmp	r3, r2
 8102b8c:	d031      	beq.n	8102bf2 <HAL_GPIO_Init+0x22e>
 8102b8e:	687b      	ldr	r3, [r7, #4]
 8102b90:	4a1e      	ldr	r2, [pc, #120]	; (8102c0c <HAL_GPIO_Init+0x248>)
 8102b92:	4293      	cmp	r3, r2
 8102b94:	d02b      	beq.n	8102bee <HAL_GPIO_Init+0x22a>
 8102b96:	687b      	ldr	r3, [r7, #4]
 8102b98:	4a1d      	ldr	r2, [pc, #116]	; (8102c10 <HAL_GPIO_Init+0x24c>)
 8102b9a:	4293      	cmp	r3, r2
 8102b9c:	d025      	beq.n	8102bea <HAL_GPIO_Init+0x226>
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	4a1c      	ldr	r2, [pc, #112]	; (8102c14 <HAL_GPIO_Init+0x250>)
 8102ba2:	4293      	cmp	r3, r2
 8102ba4:	d01f      	beq.n	8102be6 <HAL_GPIO_Init+0x222>
 8102ba6:	687b      	ldr	r3, [r7, #4]
 8102ba8:	4a1b      	ldr	r2, [pc, #108]	; (8102c18 <HAL_GPIO_Init+0x254>)
 8102baa:	4293      	cmp	r3, r2
 8102bac:	d019      	beq.n	8102be2 <HAL_GPIO_Init+0x21e>
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	4a1a      	ldr	r2, [pc, #104]	; (8102c1c <HAL_GPIO_Init+0x258>)
 8102bb2:	4293      	cmp	r3, r2
 8102bb4:	d013      	beq.n	8102bde <HAL_GPIO_Init+0x21a>
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	4a19      	ldr	r2, [pc, #100]	; (8102c20 <HAL_GPIO_Init+0x25c>)
 8102bba:	4293      	cmp	r3, r2
 8102bbc:	d00d      	beq.n	8102bda <HAL_GPIO_Init+0x216>
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	4a18      	ldr	r2, [pc, #96]	; (8102c24 <HAL_GPIO_Init+0x260>)
 8102bc2:	4293      	cmp	r3, r2
 8102bc4:	d007      	beq.n	8102bd6 <HAL_GPIO_Init+0x212>
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	4a17      	ldr	r2, [pc, #92]	; (8102c28 <HAL_GPIO_Init+0x264>)
 8102bca:	4293      	cmp	r3, r2
 8102bcc:	d101      	bne.n	8102bd2 <HAL_GPIO_Init+0x20e>
 8102bce:	2309      	movs	r3, #9
 8102bd0:	e02d      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bd2:	230a      	movs	r3, #10
 8102bd4:	e02b      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bd6:	2308      	movs	r3, #8
 8102bd8:	e029      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bda:	2307      	movs	r3, #7
 8102bdc:	e027      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bde:	2306      	movs	r3, #6
 8102be0:	e025      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102be2:	2305      	movs	r3, #5
 8102be4:	e023      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102be6:	2304      	movs	r3, #4
 8102be8:	e021      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bea:	2303      	movs	r3, #3
 8102bec:	e01f      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bee:	2302      	movs	r3, #2
 8102bf0:	e01d      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bf2:	2301      	movs	r3, #1
 8102bf4:	e01b      	b.n	8102c2e <HAL_GPIO_Init+0x26a>
 8102bf6:	bf00      	nop
 8102bf8:	580000c0 	.word	0x580000c0
 8102bfc:	58024400 	.word	0x58024400
 8102c00:	58000400 	.word	0x58000400
 8102c04:	58020000 	.word	0x58020000
 8102c08:	58020400 	.word	0x58020400
 8102c0c:	58020800 	.word	0x58020800
 8102c10:	58020c00 	.word	0x58020c00
 8102c14:	58021000 	.word	0x58021000
 8102c18:	58021400 	.word	0x58021400
 8102c1c:	58021800 	.word	0x58021800
 8102c20:	58021c00 	.word	0x58021c00
 8102c24:	58022000 	.word	0x58022000
 8102c28:	58022400 	.word	0x58022400
 8102c2c:	2300      	movs	r3, #0
 8102c2e:	69fa      	ldr	r2, [r7, #28]
 8102c30:	f002 0203 	and.w	r2, r2, #3
 8102c34:	0092      	lsls	r2, r2, #2
 8102c36:	4093      	lsls	r3, r2
 8102c38:	69ba      	ldr	r2, [r7, #24]
 8102c3a:	4313      	orrs	r3, r2
 8102c3c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102c3e:	4938      	ldr	r1, [pc, #224]	; (8102d20 <HAL_GPIO_Init+0x35c>)
 8102c40:	69fb      	ldr	r3, [r7, #28]
 8102c42:	089b      	lsrs	r3, r3, #2
 8102c44:	3302      	adds	r3, #2
 8102c46:	69ba      	ldr	r2, [r7, #24]
 8102c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102c50:	681b      	ldr	r3, [r3, #0]
 8102c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102c54:	693b      	ldr	r3, [r7, #16]
 8102c56:	43db      	mvns	r3, r3
 8102c58:	69ba      	ldr	r2, [r7, #24]
 8102c5a:	4013      	ands	r3, r2
 8102c5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102c5e:	683b      	ldr	r3, [r7, #0]
 8102c60:	685b      	ldr	r3, [r3, #4]
 8102c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102c66:	2b00      	cmp	r3, #0
 8102c68:	d003      	beq.n	8102c72 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102c6a:	69ba      	ldr	r2, [r7, #24]
 8102c6c:	693b      	ldr	r3, [r7, #16]
 8102c6e:	4313      	orrs	r3, r2
 8102c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102c72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102c76:	69bb      	ldr	r3, [r7, #24]
 8102c78:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102c7e:	685b      	ldr	r3, [r3, #4]
 8102c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102c82:	693b      	ldr	r3, [r7, #16]
 8102c84:	43db      	mvns	r3, r3
 8102c86:	69ba      	ldr	r2, [r7, #24]
 8102c88:	4013      	ands	r3, r2
 8102c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102c8c:	683b      	ldr	r3, [r7, #0]
 8102c8e:	685b      	ldr	r3, [r3, #4]
 8102c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102c94:	2b00      	cmp	r3, #0
 8102c96:	d003      	beq.n	8102ca0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102c98:	69ba      	ldr	r2, [r7, #24]
 8102c9a:	693b      	ldr	r3, [r7, #16]
 8102c9c:	4313      	orrs	r3, r2
 8102c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102ca4:	69bb      	ldr	r3, [r7, #24]
 8102ca6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102ca8:	697b      	ldr	r3, [r7, #20]
 8102caa:	685b      	ldr	r3, [r3, #4]
 8102cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102cae:	693b      	ldr	r3, [r7, #16]
 8102cb0:	43db      	mvns	r3, r3
 8102cb2:	69ba      	ldr	r2, [r7, #24]
 8102cb4:	4013      	ands	r3, r2
 8102cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102cb8:	683b      	ldr	r3, [r7, #0]
 8102cba:	685b      	ldr	r3, [r3, #4]
 8102cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102cc0:	2b00      	cmp	r3, #0
 8102cc2:	d003      	beq.n	8102ccc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102cc4:	69ba      	ldr	r2, [r7, #24]
 8102cc6:	693b      	ldr	r3, [r7, #16]
 8102cc8:	4313      	orrs	r3, r2
 8102cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102ccc:	697b      	ldr	r3, [r7, #20]
 8102cce:	69ba      	ldr	r2, [r7, #24]
 8102cd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102cd2:	697b      	ldr	r3, [r7, #20]
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102cd8:	693b      	ldr	r3, [r7, #16]
 8102cda:	43db      	mvns	r3, r3
 8102cdc:	69ba      	ldr	r2, [r7, #24]
 8102cde:	4013      	ands	r3, r2
 8102ce0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102ce2:	683b      	ldr	r3, [r7, #0]
 8102ce4:	685b      	ldr	r3, [r3, #4]
 8102ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102cea:	2b00      	cmp	r3, #0
 8102cec:	d003      	beq.n	8102cf6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102cee:	69ba      	ldr	r2, [r7, #24]
 8102cf0:	693b      	ldr	r3, [r7, #16]
 8102cf2:	4313      	orrs	r3, r2
 8102cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102cf6:	697b      	ldr	r3, [r7, #20]
 8102cf8:	69ba      	ldr	r2, [r7, #24]
 8102cfa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102cfc:	69fb      	ldr	r3, [r7, #28]
 8102cfe:	3301      	adds	r3, #1
 8102d00:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102d02:	683b      	ldr	r3, [r7, #0]
 8102d04:	681a      	ldr	r2, [r3, #0]
 8102d06:	69fb      	ldr	r3, [r7, #28]
 8102d08:	fa22 f303 	lsr.w	r3, r2, r3
 8102d0c:	2b00      	cmp	r3, #0
 8102d0e:	f47f ae63 	bne.w	81029d8 <HAL_GPIO_Init+0x14>
  }
}
 8102d12:	bf00      	nop
 8102d14:	bf00      	nop
 8102d16:	3724      	adds	r7, #36	; 0x24
 8102d18:	46bd      	mov	sp, r7
 8102d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d1e:	4770      	bx	lr
 8102d20:	58000400 	.word	0x58000400

08102d24 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102d24:	b480      	push	{r7}
 8102d26:	b083      	sub	sp, #12
 8102d28:	af00      	add	r7, sp, #0
 8102d2a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102d2c:	4b05      	ldr	r3, [pc, #20]	; (8102d44 <HAL_HSEM_ActivateNotification+0x20>)
 8102d2e:	681a      	ldr	r2, [r3, #0]
 8102d30:	4904      	ldr	r1, [pc, #16]	; (8102d44 <HAL_HSEM_ActivateNotification+0x20>)
 8102d32:	687b      	ldr	r3, [r7, #4]
 8102d34:	4313      	orrs	r3, r2
 8102d36:	600b      	str	r3, [r1, #0]
#endif
}
 8102d38:	bf00      	nop
 8102d3a:	370c      	adds	r7, #12
 8102d3c:	46bd      	mov	sp, r7
 8102d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d42:	4770      	bx	lr
 8102d44:	58026510 	.word	0x58026510

08102d48 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102d48:	b580      	push	{r7, lr}
 8102d4a:	b084      	sub	sp, #16
 8102d4c:	af00      	add	r7, sp, #0
 8102d4e:	60f8      	str	r0, [r7, #12]
 8102d50:	460b      	mov	r3, r1
 8102d52:	607a      	str	r2, [r7, #4]
 8102d54:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102d56:	4b37      	ldr	r3, [pc, #220]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	f023 0201 	bic.w	r2, r3, #1
 8102d5e:	4935      	ldr	r1, [pc, #212]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102d60:	68fb      	ldr	r3, [r7, #12]
 8102d62:	4313      	orrs	r3, r2
 8102d64:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	2b00      	cmp	r3, #0
 8102d6a:	d123      	bne.n	8102db4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102d6c:	f7ff fe16 	bl	810299c <HAL_GetCurrentCPUID>
 8102d70:	4603      	mov	r3, r0
 8102d72:	2b03      	cmp	r3, #3
 8102d74:	d158      	bne.n	8102e28 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102d76:	4b2f      	ldr	r3, [pc, #188]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102d78:	691b      	ldr	r3, [r3, #16]
 8102d7a:	4a2e      	ldr	r2, [pc, #184]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102d7c:	f023 0301 	bic.w	r3, r3, #1
 8102d80:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102d82:	4b2d      	ldr	r3, [pc, #180]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102d84:	691b      	ldr	r3, [r3, #16]
 8102d86:	4a2c      	ldr	r2, [pc, #176]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102d88:	f043 0304 	orr.w	r3, r3, #4
 8102d8c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102d8e:	f3bf 8f4f 	dsb	sy
}
 8102d92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102d94:	f3bf 8f6f 	isb	sy
}
 8102d98:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102d9a:	7afb      	ldrb	r3, [r7, #11]
 8102d9c:	2b01      	cmp	r3, #1
 8102d9e:	d101      	bne.n	8102da4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102da0:	bf30      	wfi
 8102da2:	e000      	b.n	8102da6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102da4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102da6:	4b24      	ldr	r3, [pc, #144]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102da8:	691b      	ldr	r3, [r3, #16]
 8102daa:	4a23      	ldr	r2, [pc, #140]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dac:	f023 0304 	bic.w	r3, r3, #4
 8102db0:	6113      	str	r3, [r2, #16]
 8102db2:	e03c      	b.n	8102e2e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	2b01      	cmp	r3, #1
 8102db8:	d123      	bne.n	8102e02 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102dba:	f7ff fdef 	bl	810299c <HAL_GetCurrentCPUID>
 8102dbe:	4603      	mov	r3, r0
 8102dc0:	2b01      	cmp	r3, #1
 8102dc2:	d133      	bne.n	8102e2c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102dc4:	4b1b      	ldr	r3, [pc, #108]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102dc6:	695b      	ldr	r3, [r3, #20]
 8102dc8:	4a1a      	ldr	r2, [pc, #104]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102dca:	f023 0302 	bic.w	r3, r3, #2
 8102dce:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102dd0:	4b19      	ldr	r3, [pc, #100]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dd2:	691b      	ldr	r3, [r3, #16]
 8102dd4:	4a18      	ldr	r2, [pc, #96]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dd6:	f043 0304 	orr.w	r3, r3, #4
 8102dda:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102ddc:	f3bf 8f4f 	dsb	sy
}
 8102de0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102de2:	f3bf 8f6f 	isb	sy
}
 8102de6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102de8:	7afb      	ldrb	r3, [r7, #11]
 8102dea:	2b01      	cmp	r3, #1
 8102dec:	d101      	bne.n	8102df2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102dee:	bf30      	wfi
 8102df0:	e000      	b.n	8102df4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102df2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102df4:	4b10      	ldr	r3, [pc, #64]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102df6:	691b      	ldr	r3, [r3, #16]
 8102df8:	4a0f      	ldr	r2, [pc, #60]	; (8102e38 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dfa:	f023 0304 	bic.w	r3, r3, #4
 8102dfe:	6113      	str	r3, [r2, #16]
 8102e00:	e015      	b.n	8102e2e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102e02:	f7ff fdcb 	bl	810299c <HAL_GetCurrentCPUID>
 8102e06:	4603      	mov	r3, r0
 8102e08:	2b03      	cmp	r3, #3
 8102e0a:	d106      	bne.n	8102e1a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102e0c:	4b09      	ldr	r3, [pc, #36]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e0e:	691b      	ldr	r3, [r3, #16]
 8102e10:	4a08      	ldr	r2, [pc, #32]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e12:	f023 0304 	bic.w	r3, r3, #4
 8102e16:	6113      	str	r3, [r2, #16]
 8102e18:	e009      	b.n	8102e2e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102e1a:	4b06      	ldr	r3, [pc, #24]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e1c:	695b      	ldr	r3, [r3, #20]
 8102e1e:	4a05      	ldr	r2, [pc, #20]	; (8102e34 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e20:	f023 0304 	bic.w	r3, r3, #4
 8102e24:	6153      	str	r3, [r2, #20]
 8102e26:	e002      	b.n	8102e2e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102e28:	bf00      	nop
 8102e2a:	e000      	b.n	8102e2e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102e2c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102e2e:	3710      	adds	r7, #16
 8102e30:	46bd      	mov	sp, r7
 8102e32:	bd80      	pop	{r7, pc}
 8102e34:	58024800 	.word	0x58024800
 8102e38:	e000ed00 	.word	0xe000ed00

08102e3c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102e3c:	b580      	push	{r7, lr}
 8102e3e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102e40:	f7ff fdac 	bl	810299c <HAL_GetCurrentCPUID>
 8102e44:	4603      	mov	r3, r0
 8102e46:	2b03      	cmp	r3, #3
 8102e48:	d101      	bne.n	8102e4e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102e4a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102e4c:	e001      	b.n	8102e52 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102e4e:	bf40      	sev
    __WFE ();
 8102e50:	bf20      	wfe
}
 8102e52:	bf00      	nop
 8102e54:	bd80      	pop	{r7, pc}
	...

08102e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102e58:	b480      	push	{r7}
 8102e5a:	b089      	sub	sp, #36	; 0x24
 8102e5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102e5e:	4bb3      	ldr	r3, [pc, #716]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e60:	691b      	ldr	r3, [r3, #16]
 8102e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102e66:	2b18      	cmp	r3, #24
 8102e68:	f200 8155 	bhi.w	8103116 <HAL_RCC_GetSysClockFreq+0x2be>
 8102e6c:	a201      	add	r2, pc, #4	; (adr r2, 8102e74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e72:	bf00      	nop
 8102e74:	08102ed9 	.word	0x08102ed9
 8102e78:	08103117 	.word	0x08103117
 8102e7c:	08103117 	.word	0x08103117
 8102e80:	08103117 	.word	0x08103117
 8102e84:	08103117 	.word	0x08103117
 8102e88:	08103117 	.word	0x08103117
 8102e8c:	08103117 	.word	0x08103117
 8102e90:	08103117 	.word	0x08103117
 8102e94:	08102eff 	.word	0x08102eff
 8102e98:	08103117 	.word	0x08103117
 8102e9c:	08103117 	.word	0x08103117
 8102ea0:	08103117 	.word	0x08103117
 8102ea4:	08103117 	.word	0x08103117
 8102ea8:	08103117 	.word	0x08103117
 8102eac:	08103117 	.word	0x08103117
 8102eb0:	08103117 	.word	0x08103117
 8102eb4:	08102f05 	.word	0x08102f05
 8102eb8:	08103117 	.word	0x08103117
 8102ebc:	08103117 	.word	0x08103117
 8102ec0:	08103117 	.word	0x08103117
 8102ec4:	08103117 	.word	0x08103117
 8102ec8:	08103117 	.word	0x08103117
 8102ecc:	08103117 	.word	0x08103117
 8102ed0:	08103117 	.word	0x08103117
 8102ed4:	08102f0b 	.word	0x08102f0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102ed8:	4b94      	ldr	r3, [pc, #592]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	f003 0320 	and.w	r3, r3, #32
 8102ee0:	2b00      	cmp	r3, #0
 8102ee2:	d009      	beq.n	8102ef8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102ee4:	4b91      	ldr	r3, [pc, #580]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	08db      	lsrs	r3, r3, #3
 8102eea:	f003 0303 	and.w	r3, r3, #3
 8102eee:	4a90      	ldr	r2, [pc, #576]	; (8103130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8102ef4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102ef6:	e111      	b.n	810311c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102ef8:	4b8d      	ldr	r3, [pc, #564]	; (8103130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102efa:	61bb      	str	r3, [r7, #24]
      break;
 8102efc:	e10e      	b.n	810311c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102efe:	4b8d      	ldr	r3, [pc, #564]	; (8103134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102f00:	61bb      	str	r3, [r7, #24]
      break;
 8102f02:	e10b      	b.n	810311c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102f04:	4b8c      	ldr	r3, [pc, #560]	; (8103138 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102f06:	61bb      	str	r3, [r7, #24]
      break;
 8102f08:	e108      	b.n	810311c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102f0a:	4b88      	ldr	r3, [pc, #544]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f0e:	f003 0303 	and.w	r3, r3, #3
 8102f12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102f14:	4b85      	ldr	r3, [pc, #532]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f18:	091b      	lsrs	r3, r3, #4
 8102f1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102f1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102f20:	4b82      	ldr	r3, [pc, #520]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f24:	f003 0301 	and.w	r3, r3, #1
 8102f28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102f2a:	4b80      	ldr	r3, [pc, #512]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102f2e:	08db      	lsrs	r3, r3, #3
 8102f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102f34:	68fa      	ldr	r2, [r7, #12]
 8102f36:	fb02 f303 	mul.w	r3, r2, r3
 8102f3a:	ee07 3a90 	vmov	s15, r3
 8102f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102f46:	693b      	ldr	r3, [r7, #16]
 8102f48:	2b00      	cmp	r3, #0
 8102f4a:	f000 80e1 	beq.w	8103110 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102f4e:	697b      	ldr	r3, [r7, #20]
 8102f50:	2b02      	cmp	r3, #2
 8102f52:	f000 8083 	beq.w	810305c <HAL_RCC_GetSysClockFreq+0x204>
 8102f56:	697b      	ldr	r3, [r7, #20]
 8102f58:	2b02      	cmp	r3, #2
 8102f5a:	f200 80a1 	bhi.w	81030a0 <HAL_RCC_GetSysClockFreq+0x248>
 8102f5e:	697b      	ldr	r3, [r7, #20]
 8102f60:	2b00      	cmp	r3, #0
 8102f62:	d003      	beq.n	8102f6c <HAL_RCC_GetSysClockFreq+0x114>
 8102f64:	697b      	ldr	r3, [r7, #20]
 8102f66:	2b01      	cmp	r3, #1
 8102f68:	d056      	beq.n	8103018 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102f6a:	e099      	b.n	81030a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102f6c:	4b6f      	ldr	r3, [pc, #444]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f6e:	681b      	ldr	r3, [r3, #0]
 8102f70:	f003 0320 	and.w	r3, r3, #32
 8102f74:	2b00      	cmp	r3, #0
 8102f76:	d02d      	beq.n	8102fd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102f78:	4b6c      	ldr	r3, [pc, #432]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f7a:	681b      	ldr	r3, [r3, #0]
 8102f7c:	08db      	lsrs	r3, r3, #3
 8102f7e:	f003 0303 	and.w	r3, r3, #3
 8102f82:	4a6b      	ldr	r2, [pc, #428]	; (8103130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102f84:	fa22 f303 	lsr.w	r3, r2, r3
 8102f88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102f8a:	687b      	ldr	r3, [r7, #4]
 8102f8c:	ee07 3a90 	vmov	s15, r3
 8102f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f94:	693b      	ldr	r3, [r7, #16]
 8102f96:	ee07 3a90 	vmov	s15, r3
 8102f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102fa2:	4b62      	ldr	r3, [pc, #392]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102faa:	ee07 3a90 	vmov	s15, r3
 8102fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8102fb6:	eddf 5a61 	vldr	s11, [pc, #388]	; 810313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102fce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102fd2:	e087      	b.n	81030e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102fd4:	693b      	ldr	r3, [r7, #16]
 8102fd6:	ee07 3a90 	vmov	s15, r3
 8102fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fde:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103140 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102fe6:	4b51      	ldr	r3, [pc, #324]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102fee:	ee07 3a90 	vmov	s15, r3
 8102ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102ffa:	eddf 5a50 	vldr	s11, [pc, #320]	; 810313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103016:	e065      	b.n	81030e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103018:	693b      	ldr	r3, [r7, #16]
 810301a:	ee07 3a90 	vmov	s15, r3
 810301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103022:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103144 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810302a:	4b40      	ldr	r3, [pc, #256]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103032:	ee07 3a90 	vmov	s15, r3
 8103036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810303a:	ed97 6a02 	vldr	s12, [r7, #8]
 810303e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810304a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810305a:	e043      	b.n	81030e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810305c:	693b      	ldr	r3, [r7, #16]
 810305e:	ee07 3a90 	vmov	s15, r3
 8103062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103066:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103148 <HAL_RCC_GetSysClockFreq+0x2f0>
 810306a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810306e:	4b2f      	ldr	r3, [pc, #188]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103076:	ee07 3a90 	vmov	s15, r3
 810307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810307e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103082:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8103086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810308e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103096:	ee67 7a27 	vmul.f32	s15, s14, s15
 810309a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810309e:	e021      	b.n	81030e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81030a0:	693b      	ldr	r3, [r7, #16]
 81030a2:	ee07 3a90 	vmov	s15, r3
 81030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103144 <HAL_RCC_GetSysClockFreq+0x2ec>
 81030ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030b2:	4b1e      	ldr	r3, [pc, #120]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030ba:	ee07 3a90 	vmov	s15, r3
 81030be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81030c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810313c <HAL_RCC_GetSysClockFreq+0x2e4>
 81030ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81030e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81030e4:	4b11      	ldr	r3, [pc, #68]	; (810312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030e8:	0a5b      	lsrs	r3, r3, #9
 81030ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81030ee:	3301      	adds	r3, #1
 81030f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81030f2:	683b      	ldr	r3, [r7, #0]
 81030f4:	ee07 3a90 	vmov	s15, r3
 81030f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81030fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8103100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103108:	ee17 3a90 	vmov	r3, s15
 810310c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810310e:	e005      	b.n	810311c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103110:	2300      	movs	r3, #0
 8103112:	61bb      	str	r3, [r7, #24]
      break;
 8103114:	e002      	b.n	810311c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103116:	4b07      	ldr	r3, [pc, #28]	; (8103134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103118:	61bb      	str	r3, [r7, #24]
      break;
 810311a:	bf00      	nop
  }

  return sysclockfreq;
 810311c:	69bb      	ldr	r3, [r7, #24]
}
 810311e:	4618      	mov	r0, r3
 8103120:	3724      	adds	r7, #36	; 0x24
 8103122:	46bd      	mov	sp, r7
 8103124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103128:	4770      	bx	lr
 810312a:	bf00      	nop
 810312c:	58024400 	.word	0x58024400
 8103130:	03d09000 	.word	0x03d09000
 8103134:	003d0900 	.word	0x003d0900
 8103138:	017d7840 	.word	0x017d7840
 810313c:	46000000 	.word	0x46000000
 8103140:	4c742400 	.word	0x4c742400
 8103144:	4a742400 	.word	0x4a742400
 8103148:	4bbebc20 	.word	0x4bbebc20

0810314c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810314c:	b580      	push	{r7, lr}
 810314e:	b082      	sub	sp, #8
 8103150:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103152:	f7ff fe81 	bl	8102e58 <HAL_RCC_GetSysClockFreq>
 8103156:	4602      	mov	r2, r0
 8103158:	4b11      	ldr	r3, [pc, #68]	; (81031a0 <HAL_RCC_GetHCLKFreq+0x54>)
 810315a:	699b      	ldr	r3, [r3, #24]
 810315c:	0a1b      	lsrs	r3, r3, #8
 810315e:	f003 030f 	and.w	r3, r3, #15
 8103162:	4910      	ldr	r1, [pc, #64]	; (81031a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8103164:	5ccb      	ldrb	r3, [r1, r3]
 8103166:	f003 031f 	and.w	r3, r3, #31
 810316a:	fa22 f303 	lsr.w	r3, r2, r3
 810316e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103170:	4b0b      	ldr	r3, [pc, #44]	; (81031a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8103172:	699b      	ldr	r3, [r3, #24]
 8103174:	f003 030f 	and.w	r3, r3, #15
 8103178:	4a0a      	ldr	r2, [pc, #40]	; (81031a4 <HAL_RCC_GetHCLKFreq+0x58>)
 810317a:	5cd3      	ldrb	r3, [r2, r3]
 810317c:	f003 031f 	and.w	r3, r3, #31
 8103180:	687a      	ldr	r2, [r7, #4]
 8103182:	fa22 f303 	lsr.w	r3, r2, r3
 8103186:	4a08      	ldr	r2, [pc, #32]	; (81031a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103188:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810318a:	4b07      	ldr	r3, [pc, #28]	; (81031a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	4a07      	ldr	r2, [pc, #28]	; (81031ac <HAL_RCC_GetHCLKFreq+0x60>)
 8103190:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103192:	4b05      	ldr	r3, [pc, #20]	; (81031a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103194:	681b      	ldr	r3, [r3, #0]
}
 8103196:	4618      	mov	r0, r3
 8103198:	3708      	adds	r7, #8
 810319a:	46bd      	mov	sp, r7
 810319c:	bd80      	pop	{r7, pc}
 810319e:	bf00      	nop
 81031a0:	58024400 	.word	0x58024400
 81031a4:	081076f4 	.word	0x081076f4
 81031a8:	10000004 	.word	0x10000004
 81031ac:	10000000 	.word	0x10000000

081031b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81031b0:	b580      	push	{r7, lr}
 81031b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81031b4:	f7ff ffca 	bl	810314c <HAL_RCC_GetHCLKFreq>
 81031b8:	4602      	mov	r2, r0
 81031ba:	4b06      	ldr	r3, [pc, #24]	; (81031d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 81031bc:	69db      	ldr	r3, [r3, #28]
 81031be:	091b      	lsrs	r3, r3, #4
 81031c0:	f003 0307 	and.w	r3, r3, #7
 81031c4:	4904      	ldr	r1, [pc, #16]	; (81031d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 81031c6:	5ccb      	ldrb	r3, [r1, r3]
 81031c8:	f003 031f 	and.w	r3, r3, #31
 81031cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81031d0:	4618      	mov	r0, r3
 81031d2:	bd80      	pop	{r7, pc}
 81031d4:	58024400 	.word	0x58024400
 81031d8:	081076f4 	.word	0x081076f4

081031dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81031dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81031e0:	b0cc      	sub	sp, #304	; 0x130
 81031e2:	af00      	add	r7, sp, #0
 81031e4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81031e8:	2300      	movs	r3, #0
 81031ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81031ee:	2300      	movs	r3, #0
 81031f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81031f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8103200:	2500      	movs	r5, #0
 8103202:	ea54 0305 	orrs.w	r3, r4, r5
 8103206:	d049      	beq.n	810329c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103208:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810320c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810320e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103212:	d02f      	beq.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103214:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103218:	d828      	bhi.n	810326c <HAL_RCCEx_PeriphCLKConfig+0x90>
 810321a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810321e:	d01a      	beq.n	8103256 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103224:	d822      	bhi.n	810326c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103226:	2b00      	cmp	r3, #0
 8103228:	d003      	beq.n	8103232 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810322a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810322e:	d007      	beq.n	8103240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103230:	e01c      	b.n	810326c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103232:	4bb8      	ldr	r3, [pc, #736]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103236:	4ab7      	ldr	r2, [pc, #732]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810323c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810323e:	e01a      	b.n	8103276 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103244:	3308      	adds	r3, #8
 8103246:	2102      	movs	r1, #2
 8103248:	4618      	mov	r0, r3
 810324a:	f002 fba1 	bl	8105990 <RCCEx_PLL2_Config>
 810324e:	4603      	mov	r3, r0
 8103250:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103254:	e00f      	b.n	8103276 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103256:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810325a:	3328      	adds	r3, #40	; 0x28
 810325c:	2102      	movs	r1, #2
 810325e:	4618      	mov	r0, r3
 8103260:	f002 fc48 	bl	8105af4 <RCCEx_PLL3_Config>
 8103264:	4603      	mov	r3, r0
 8103266:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810326a:	e004      	b.n	8103276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810326c:	2301      	movs	r3, #1
 810326e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103272:	e000      	b.n	8103276 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8103274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103276:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810327a:	2b00      	cmp	r3, #0
 810327c:	d10a      	bne.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810327e:	4ba5      	ldr	r3, [pc, #660]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103282:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8103286:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810328a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810328c:	4aa1      	ldr	r2, [pc, #644]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810328e:	430b      	orrs	r3, r1
 8103290:	6513      	str	r3, [r2, #80]	; 0x50
 8103292:	e003      	b.n	810329c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103294:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103298:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810329c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81032a8:	f04f 0900 	mov.w	r9, #0
 81032ac:	ea58 0309 	orrs.w	r3, r8, r9
 81032b0:	d047      	beq.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81032b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032b8:	2b04      	cmp	r3, #4
 81032ba:	d82a      	bhi.n	8103312 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81032bc:	a201      	add	r2, pc, #4	; (adr r2, 81032c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032c2:	bf00      	nop
 81032c4:	081032d9 	.word	0x081032d9
 81032c8:	081032e7 	.word	0x081032e7
 81032cc:	081032fd 	.word	0x081032fd
 81032d0:	0810331b 	.word	0x0810331b
 81032d4:	0810331b 	.word	0x0810331b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032d8:	4b8e      	ldr	r3, [pc, #568]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81032da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032dc:	4a8d      	ldr	r2, [pc, #564]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032e4:	e01a      	b.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81032e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032ea:	3308      	adds	r3, #8
 81032ec:	2100      	movs	r1, #0
 81032ee:	4618      	mov	r0, r3
 81032f0:	f002 fb4e 	bl	8105990 <RCCEx_PLL2_Config>
 81032f4:	4603      	mov	r3, r0
 81032f6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81032fa:	e00f      	b.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81032fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103300:	3328      	adds	r3, #40	; 0x28
 8103302:	2100      	movs	r1, #0
 8103304:	4618      	mov	r0, r3
 8103306:	f002 fbf5 	bl	8105af4 <RCCEx_PLL3_Config>
 810330a:	4603      	mov	r3, r0
 810330c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103310:	e004      	b.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103312:	2301      	movs	r3, #1
 8103314:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103318:	e000      	b.n	810331c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810331a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810331c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103320:	2b00      	cmp	r3, #0
 8103322:	d10a      	bne.n	810333a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103324:	4b7b      	ldr	r3, [pc, #492]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103328:	f023 0107 	bic.w	r1, r3, #7
 810332c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103332:	4a78      	ldr	r2, [pc, #480]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103334:	430b      	orrs	r3, r1
 8103336:	6513      	str	r3, [r2, #80]	; 0x50
 8103338:	e003      	b.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810333a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810333e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103342:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103346:	e9d3 2300 	ldrd	r2, r3, [r3]
 810334a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 810334e:	f04f 0b00 	mov.w	fp, #0
 8103352:	ea5a 030b 	orrs.w	r3, sl, fp
 8103356:	d04c      	beq.n	81033f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103358:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810335e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103362:	d030      	beq.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103368:	d829      	bhi.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810336a:	2bc0      	cmp	r3, #192	; 0xc0
 810336c:	d02d      	beq.n	81033ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810336e:	2bc0      	cmp	r3, #192	; 0xc0
 8103370:	d825      	bhi.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103372:	2b80      	cmp	r3, #128	; 0x80
 8103374:	d018      	beq.n	81033a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8103376:	2b80      	cmp	r3, #128	; 0x80
 8103378:	d821      	bhi.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810337a:	2b00      	cmp	r3, #0
 810337c:	d002      	beq.n	8103384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 810337e:	2b40      	cmp	r3, #64	; 0x40
 8103380:	d007      	beq.n	8103392 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8103382:	e01c      	b.n	81033be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103384:	4b63      	ldr	r3, [pc, #396]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103388:	4a62      	ldr	r2, [pc, #392]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810338e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103390:	e01c      	b.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103392:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103396:	3308      	adds	r3, #8
 8103398:	2100      	movs	r1, #0
 810339a:	4618      	mov	r0, r3
 810339c:	f002 faf8 	bl	8105990 <RCCEx_PLL2_Config>
 81033a0:	4603      	mov	r3, r0
 81033a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81033a6:	e011      	b.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81033a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81033ac:	3328      	adds	r3, #40	; 0x28
 81033ae:	2100      	movs	r1, #0
 81033b0:	4618      	mov	r0, r3
 81033b2:	f002 fb9f 	bl	8105af4 <RCCEx_PLL3_Config>
 81033b6:	4603      	mov	r3, r0
 81033b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81033bc:	e006      	b.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81033be:	2301      	movs	r3, #1
 81033c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81033c4:	e002      	b.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81033c6:	bf00      	nop
 81033c8:	e000      	b.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81033ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81033d0:	2b00      	cmp	r3, #0
 81033d2:	d10a      	bne.n	81033ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81033d4:	4b4f      	ldr	r3, [pc, #316]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81033d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 81033dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81033e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81033e2:	4a4c      	ldr	r2, [pc, #304]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81033e4:	430b      	orrs	r3, r1
 81033e6:	6513      	str	r3, [r2, #80]	; 0x50
 81033e8:	e003      	b.n	81033f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81033ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81033f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 81033fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8103402:	2300      	movs	r3, #0
 8103404:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8103408:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 810340c:	460b      	mov	r3, r1
 810340e:	4313      	orrs	r3, r2
 8103410:	d053      	beq.n	81034ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103412:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103416:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810341a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810341e:	d035      	beq.n	810348c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103420:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103424:	d82e      	bhi.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103426:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810342a:	d031      	beq.n	8103490 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810342c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103430:	d828      	bhi.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103436:	d01a      	beq.n	810346e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103438:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810343c:	d822      	bhi.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810343e:	2b00      	cmp	r3, #0
 8103440:	d003      	beq.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103446:	d007      	beq.n	8103458 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103448:	e01c      	b.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810344a:	4b32      	ldr	r3, [pc, #200]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810344e:	4a31      	ldr	r2, [pc, #196]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103454:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103456:	e01c      	b.n	8103492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103458:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810345c:	3308      	adds	r3, #8
 810345e:	2100      	movs	r1, #0
 8103460:	4618      	mov	r0, r3
 8103462:	f002 fa95 	bl	8105990 <RCCEx_PLL2_Config>
 8103466:	4603      	mov	r3, r0
 8103468:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810346c:	e011      	b.n	8103492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810346e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103472:	3328      	adds	r3, #40	; 0x28
 8103474:	2100      	movs	r1, #0
 8103476:	4618      	mov	r0, r3
 8103478:	f002 fb3c 	bl	8105af4 <RCCEx_PLL3_Config>
 810347c:	4603      	mov	r3, r0
 810347e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103482:	e006      	b.n	8103492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103484:	2301      	movs	r3, #1
 8103486:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810348a:	e002      	b.n	8103492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810348c:	bf00      	nop
 810348e:	e000      	b.n	8103492 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103490:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103492:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103496:	2b00      	cmp	r3, #0
 8103498:	d10b      	bne.n	81034b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810349a:	4b1e      	ldr	r3, [pc, #120]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810349e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81034a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81034aa:	4a1a      	ldr	r2, [pc, #104]	; (8103514 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81034ac:	430b      	orrs	r3, r1
 81034ae:	6593      	str	r3, [r2, #88]	; 0x58
 81034b0:	e003      	b.n	81034ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81034b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81034ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034c2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 81034c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 81034ca:	2300      	movs	r3, #0
 81034cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 81034d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 81034d4:	460b      	mov	r3, r1
 81034d6:	4313      	orrs	r3, r2
 81034d8:	d056      	beq.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 81034da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81034e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81034e6:	d038      	beq.n	810355a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81034e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81034ec:	d831      	bhi.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81034ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81034f2:	d034      	beq.n	810355e <HAL_RCCEx_PeriphCLKConfig+0x382>
 81034f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81034f8:	d82b      	bhi.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81034fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81034fe:	d01d      	beq.n	810353c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103504:	d825      	bhi.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103506:	2b00      	cmp	r3, #0
 8103508:	d006      	beq.n	8103518 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810350a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810350e:	d00a      	beq.n	8103526 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103510:	e01f      	b.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103512:	bf00      	nop
 8103514:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103518:	4ba2      	ldr	r3, [pc, #648]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810351c:	4aa1      	ldr	r2, [pc, #644]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810351e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103524:	e01c      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103526:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810352a:	3308      	adds	r3, #8
 810352c:	2100      	movs	r1, #0
 810352e:	4618      	mov	r0, r3
 8103530:	f002 fa2e 	bl	8105990 <RCCEx_PLL2_Config>
 8103534:	4603      	mov	r3, r0
 8103536:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 810353a:	e011      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810353c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103540:	3328      	adds	r3, #40	; 0x28
 8103542:	2100      	movs	r1, #0
 8103544:	4618      	mov	r0, r3
 8103546:	f002 fad5 	bl	8105af4 <RCCEx_PLL3_Config>
 810354a:	4603      	mov	r3, r0
 810354c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103550:	e006      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103552:	2301      	movs	r3, #1
 8103554:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103558:	e002      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810355a:	bf00      	nop
 810355c:	e000      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810355e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103560:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103564:	2b00      	cmp	r3, #0
 8103566:	d10b      	bne.n	8103580 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103568:	4b8e      	ldr	r3, [pc, #568]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810356a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810356c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8103570:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103574:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103578:	4a8a      	ldr	r2, [pc, #552]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810357a:	430b      	orrs	r3, r1
 810357c:	6593      	str	r3, [r2, #88]	; 0x58
 810357e:	e003      	b.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103580:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103584:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103588:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103590:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8103594:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8103598:	2300      	movs	r3, #0
 810359a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 810359e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81035a2:	460b      	mov	r3, r1
 81035a4:	4313      	orrs	r3, r2
 81035a6:	d03a      	beq.n	810361e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81035a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81035ae:	2b30      	cmp	r3, #48	; 0x30
 81035b0:	d01f      	beq.n	81035f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 81035b2:	2b30      	cmp	r3, #48	; 0x30
 81035b4:	d819      	bhi.n	81035ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81035b6:	2b20      	cmp	r3, #32
 81035b8:	d00c      	beq.n	81035d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81035ba:	2b20      	cmp	r3, #32
 81035bc:	d815      	bhi.n	81035ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81035be:	2b00      	cmp	r3, #0
 81035c0:	d019      	beq.n	81035f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81035c2:	2b10      	cmp	r3, #16
 81035c4:	d111      	bne.n	81035ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035c6:	4b77      	ldr	r3, [pc, #476]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035ca:	4a76      	ldr	r2, [pc, #472]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81035cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81035d2:	e011      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81035d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81035d8:	3308      	adds	r3, #8
 81035da:	2102      	movs	r1, #2
 81035dc:	4618      	mov	r0, r3
 81035de:	f002 f9d7 	bl	8105990 <RCCEx_PLL2_Config>
 81035e2:	4603      	mov	r3, r0
 81035e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81035e8:	e006      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81035ea:	2301      	movs	r3, #1
 81035ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81035f0:	e002      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81035f2:	bf00      	nop
 81035f4:	e000      	b.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81035f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81035f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81035fc:	2b00      	cmp	r3, #0
 81035fe:	d10a      	bne.n	8103616 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103600:	4b68      	ldr	r3, [pc, #416]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103604:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8103608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810360c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810360e:	4a65      	ldr	r2, [pc, #404]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103610:	430b      	orrs	r3, r1
 8103612:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103614:	e003      	b.n	810361e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103616:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810361a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810361e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103626:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 810362a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 810362e:	2300      	movs	r3, #0
 8103630:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8103634:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8103638:	460b      	mov	r3, r1
 810363a:	4313      	orrs	r3, r2
 810363c:	d051      	beq.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 810363e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103648:	d035      	beq.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810364a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810364e:	d82e      	bhi.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103654:	d031      	beq.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810365a:	d828      	bhi.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810365c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103660:	d01a      	beq.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103666:	d822      	bhi.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103668:	2b00      	cmp	r3, #0
 810366a:	d003      	beq.n	8103674 <HAL_RCCEx_PeriphCLKConfig+0x498>
 810366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103670:	d007      	beq.n	8103682 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103672:	e01c      	b.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103674:	4b4b      	ldr	r3, [pc, #300]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103678:	4a4a      	ldr	r2, [pc, #296]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810367e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103680:	e01c      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103682:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103686:	3308      	adds	r3, #8
 8103688:	2100      	movs	r1, #0
 810368a:	4618      	mov	r0, r3
 810368c:	f002 f980 	bl	8105990 <RCCEx_PLL2_Config>
 8103690:	4603      	mov	r3, r0
 8103692:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103696:	e011      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103698:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810369c:	3328      	adds	r3, #40	; 0x28
 810369e:	2100      	movs	r1, #0
 81036a0:	4618      	mov	r0, r3
 81036a2:	f002 fa27 	bl	8105af4 <RCCEx_PLL3_Config>
 81036a6:	4603      	mov	r3, r0
 81036a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81036ac:	e006      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036ae:	2301      	movs	r3, #1
 81036b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81036b4:	e002      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81036b6:	bf00      	nop
 81036b8:	e000      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81036ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81036c0:	2b00      	cmp	r3, #0
 81036c2:	d10a      	bne.n	81036da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81036c4:	4b37      	ldr	r3, [pc, #220]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036c8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81036cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81036d2:	4a34      	ldr	r2, [pc, #208]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81036d4:	430b      	orrs	r3, r1
 81036d6:	6513      	str	r3, [r2, #80]	; 0x50
 81036d8:	e003      	b.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81036de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81036e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036ea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 81036ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 81036f2:	2300      	movs	r3, #0
 81036f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 81036f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 81036fc:	460b      	mov	r3, r1
 81036fe:	4313      	orrs	r3, r2
 8103700:	d056      	beq.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810370c:	d033      	beq.n	8103776 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810370e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103712:	d82c      	bhi.n	810376e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103714:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103718:	d02f      	beq.n	810377a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810371a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810371e:	d826      	bhi.n	810376e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103720:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103724:	d02b      	beq.n	810377e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103726:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810372a:	d820      	bhi.n	810376e <HAL_RCCEx_PeriphCLKConfig+0x592>
 810372c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103730:	d012      	beq.n	8103758 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103736:	d81a      	bhi.n	810376e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103738:	2b00      	cmp	r3, #0
 810373a:	d022      	beq.n	8103782 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 810373c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103740:	d115      	bne.n	810376e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103742:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103746:	3308      	adds	r3, #8
 8103748:	2101      	movs	r1, #1
 810374a:	4618      	mov	r0, r3
 810374c:	f002 f920 	bl	8105990 <RCCEx_PLL2_Config>
 8103750:	4603      	mov	r3, r0
 8103752:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103756:	e015      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103758:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810375c:	3328      	adds	r3, #40	; 0x28
 810375e:	2101      	movs	r1, #1
 8103760:	4618      	mov	r0, r3
 8103762:	f002 f9c7 	bl	8105af4 <RCCEx_PLL3_Config>
 8103766:	4603      	mov	r3, r0
 8103768:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810376c:	e00a      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810376e:	2301      	movs	r3, #1
 8103770:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103774:	e006      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103776:	bf00      	nop
 8103778:	e004      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810377a:	bf00      	nop
 810377c:	e002      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810377e:	bf00      	nop
 8103780:	e000      	b.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103784:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103788:	2b00      	cmp	r3, #0
 810378a:	d10d      	bne.n	81037a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810378c:	4b05      	ldr	r3, [pc, #20]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810378e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103790:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8103794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810379a:	4a02      	ldr	r2, [pc, #8]	; (81037a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810379c:	430b      	orrs	r3, r1
 810379e:	6513      	str	r3, [r2, #80]	; 0x50
 81037a0:	e006      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81037a2:	bf00      	nop
 81037a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81037ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81037b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037b8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81037bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81037c0:	2300      	movs	r3, #0
 81037c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 81037c6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 81037ca:	460b      	mov	r3, r1
 81037cc:	4313      	orrs	r3, r2
 81037ce:	d055      	beq.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81037d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81037d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81037dc:	d033      	beq.n	8103846 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81037de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81037e2:	d82c      	bhi.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81037e8:	d02f      	beq.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81037ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81037ee:	d826      	bhi.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81037f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81037f4:	d02b      	beq.n	810384e <HAL_RCCEx_PeriphCLKConfig+0x672>
 81037f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81037fa:	d820      	bhi.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x662>
 81037fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103800:	d012      	beq.n	8103828 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103806:	d81a      	bhi.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103808:	2b00      	cmp	r3, #0
 810380a:	d022      	beq.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810380c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103810:	d115      	bne.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103816:	3308      	adds	r3, #8
 8103818:	2101      	movs	r1, #1
 810381a:	4618      	mov	r0, r3
 810381c:	f002 f8b8 	bl	8105990 <RCCEx_PLL2_Config>
 8103820:	4603      	mov	r3, r0
 8103822:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103826:	e015      	b.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810382c:	3328      	adds	r3, #40	; 0x28
 810382e:	2101      	movs	r1, #1
 8103830:	4618      	mov	r0, r3
 8103832:	f002 f95f 	bl	8105af4 <RCCEx_PLL3_Config>
 8103836:	4603      	mov	r3, r0
 8103838:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810383c:	e00a      	b.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 810383e:	2301      	movs	r3, #1
 8103840:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103844:	e006      	b.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103846:	bf00      	nop
 8103848:	e004      	b.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810384a:	bf00      	nop
 810384c:	e002      	b.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810384e:	bf00      	nop
 8103850:	e000      	b.n	8103854 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103854:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103858:	2b00      	cmp	r3, #0
 810385a:	d10b      	bne.n	8103874 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 810385c:	4bb7      	ldr	r3, [pc, #732]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103860:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103864:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103868:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810386c:	4ab3      	ldr	r2, [pc, #716]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810386e:	430b      	orrs	r3, r1
 8103870:	6593      	str	r3, [r2, #88]	; 0x58
 8103872:	e003      	b.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103874:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103878:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 810387c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103884:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8103888:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 810388c:	2300      	movs	r3, #0
 810388e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8103892:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8103896:	460b      	mov	r3, r1
 8103898:	4313      	orrs	r3, r2
 810389a:	d02a      	beq.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 810389c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038a2:	2b00      	cmp	r3, #0
 81038a4:	d011      	beq.n	81038ca <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81038a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81038aa:	d10a      	bne.n	81038c2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81038ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038b0:	3308      	adds	r3, #8
 81038b2:	2101      	movs	r1, #1
 81038b4:	4618      	mov	r0, r3
 81038b6:	f002 f86b 	bl	8105990 <RCCEx_PLL2_Config>
 81038ba:	4603      	mov	r3, r0
 81038bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81038c0:	e004      	b.n	81038cc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81038c2:	2301      	movs	r3, #1
 81038c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81038c8:	e000      	b.n	81038cc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81038ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81038cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81038d0:	2b00      	cmp	r3, #0
 81038d2:	d10a      	bne.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81038d4:	4b99      	ldr	r3, [pc, #612]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81038d8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 81038dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038e2:	4a96      	ldr	r2, [pc, #600]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038e4:	430b      	orrs	r3, r1
 81038e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81038e8:	e003      	b.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81038ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81038f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038fa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 81038fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8103902:	2300      	movs	r3, #0
 8103904:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8103908:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810390c:	460b      	mov	r3, r1
 810390e:	4313      	orrs	r3, r2
 8103910:	d037      	beq.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103912:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810391c:	d00e      	beq.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x760>
 810391e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103922:	d816      	bhi.n	8103952 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8103924:	2b00      	cmp	r3, #0
 8103926:	d018      	beq.n	810395a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8103928:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810392c:	d111      	bne.n	8103952 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810392e:	4b83      	ldr	r3, [pc, #524]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103932:	4a82      	ldr	r2, [pc, #520]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810393a:	e00f      	b.n	810395c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810393c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103940:	3308      	adds	r3, #8
 8103942:	2101      	movs	r1, #1
 8103944:	4618      	mov	r0, r3
 8103946:	f002 f823 	bl	8105990 <RCCEx_PLL2_Config>
 810394a:	4603      	mov	r3, r0
 810394c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103950:	e004      	b.n	810395c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103952:	2301      	movs	r3, #1
 8103954:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103958:	e000      	b.n	810395c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810395c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103960:	2b00      	cmp	r3, #0
 8103962:	d10a      	bne.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103964:	4b75      	ldr	r3, [pc, #468]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103968:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810396c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103972:	4a72      	ldr	r2, [pc, #456]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103974:	430b      	orrs	r3, r1
 8103976:	6513      	str	r3, [r2, #80]	; 0x50
 8103978:	e003      	b.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810397a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810397e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103982:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103986:	e9d3 2300 	ldrd	r2, r3, [r3]
 810398a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 810398e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8103992:	2300      	movs	r3, #0
 8103994:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8103998:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 810399c:	460b      	mov	r3, r1
 810399e:	4313      	orrs	r3, r2
 81039a0:	d03a      	beq.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81039a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81039a8:	2b03      	cmp	r3, #3
 81039aa:	d81d      	bhi.n	81039e8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81039ac:	a201      	add	r2, pc, #4	; (adr r2, 81039b4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039b2:	bf00      	nop
 81039b4:	081039f1 	.word	0x081039f1
 81039b8:	081039c5 	.word	0x081039c5
 81039bc:	081039d3 	.word	0x081039d3
 81039c0:	081039f1 	.word	0x081039f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039c4:	4b5d      	ldr	r3, [pc, #372]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039c8:	4a5c      	ldr	r2, [pc, #368]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81039ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81039d0:	e00f      	b.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81039d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039d6:	3308      	adds	r3, #8
 81039d8:	2102      	movs	r1, #2
 81039da:	4618      	mov	r0, r3
 81039dc:	f001 ffd8 	bl	8105990 <RCCEx_PLL2_Config>
 81039e0:	4603      	mov	r3, r0
 81039e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81039e6:	e004      	b.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81039e8:	2301      	movs	r3, #1
 81039ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81039ee:	e000      	b.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81039f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81039f6:	2b00      	cmp	r3, #0
 81039f8:	d10a      	bne.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81039fa:	4b50      	ldr	r3, [pc, #320]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039fe:	f023 0103 	bic.w	r1, r3, #3
 8103a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a08:	4a4c      	ldr	r2, [pc, #304]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103a0a:	430b      	orrs	r3, r1
 8103a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103a0e:	e003      	b.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a10:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103a14:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a20:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8103a24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8103a28:	2300      	movs	r3, #0
 8103a2a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8103a2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8103a32:	460b      	mov	r3, r1
 8103a34:	4313      	orrs	r3, r2
 8103a36:	f000 80a0 	beq.w	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103a3a:	4b41      	ldr	r3, [pc, #260]	; (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	4a40      	ldr	r2, [pc, #256]	; (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103a44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103a46:	f7fd fc7b 	bl	8101340 <HAL_GetTick>
 8103a4a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103a4e:	e00b      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103a50:	f7fd fc76 	bl	8101340 <HAL_GetTick>
 8103a54:	4602      	mov	r2, r0
 8103a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8103a5a:	1ad3      	subs	r3, r2, r3
 8103a5c:	2b64      	cmp	r3, #100	; 0x64
 8103a5e:	d903      	bls.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103a60:	2303      	movs	r3, #3
 8103a62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103a66:	e005      	b.n	8103a74 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103a68:	4b35      	ldr	r3, [pc, #212]	; (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a70:	2b00      	cmp	r3, #0
 8103a72:	d0ed      	beq.n	8103a50 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8103a74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103a78:	2b00      	cmp	r3, #0
 8103a7a:	d17a      	bne.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103a7c:	4b2f      	ldr	r3, [pc, #188]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103a7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103a88:	4053      	eors	r3, r2
 8103a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103a8e:	2b00      	cmp	r3, #0
 8103a90:	d015      	beq.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103a92:	4b2a      	ldr	r3, [pc, #168]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103a9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103a9e:	4b27      	ldr	r3, [pc, #156]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103aa2:	4a26      	ldr	r2, [pc, #152]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103aa8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103aaa:	4b24      	ldr	r3, [pc, #144]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103aae:	4a23      	ldr	r2, [pc, #140]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103ab4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103ab6:	4a21      	ldr	r2, [pc, #132]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ab8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8103abc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ac2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103aca:	d118      	bne.n	8103afe <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103acc:	f7fd fc38 	bl	8101340 <HAL_GetTick>
 8103ad0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103ad4:	e00d      	b.n	8103af2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103ad6:	f7fd fc33 	bl	8101340 <HAL_GetTick>
 8103ada:	4602      	mov	r2, r0
 8103adc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8103ae0:	1ad2      	subs	r2, r2, r3
 8103ae2:	f241 3388 	movw	r3, #5000	; 0x1388
 8103ae6:	429a      	cmp	r2, r3
 8103ae8:	d903      	bls.n	8103af2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8103aea:	2303      	movs	r3, #3
 8103aec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8103af0:	e005      	b.n	8103afe <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103af2:	4b12      	ldr	r3, [pc, #72]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103af6:	f003 0302 	and.w	r3, r3, #2
 8103afa:	2b00      	cmp	r3, #0
 8103afc:	d0eb      	beq.n	8103ad6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8103afe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d130      	bne.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103b12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103b16:	d115      	bne.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8103b18:	4b08      	ldr	r3, [pc, #32]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103b1a:	691b      	ldr	r3, [r3, #16]
 8103b1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8103b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b28:	091b      	lsrs	r3, r3, #4
 8103b2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103b2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103b32:	4a02      	ldr	r2, [pc, #8]	; (8103b3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103b34:	430b      	orrs	r3, r1
 8103b36:	6113      	str	r3, [r2, #16]
 8103b38:	e00a      	b.n	8103b50 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8103b3a:	bf00      	nop
 8103b3c:	58024400 	.word	0x58024400
 8103b40:	58024800 	.word	0x58024800
 8103b44:	4bd4      	ldr	r3, [pc, #848]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b46:	691b      	ldr	r3, [r3, #16]
 8103b48:	4ad3      	ldr	r2, [pc, #844]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103b4e:	6113      	str	r3, [r2, #16]
 8103b50:	4bd1      	ldr	r3, [pc, #836]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b52:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8103b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103b60:	4acd      	ldr	r2, [pc, #820]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b62:	430b      	orrs	r3, r1
 8103b64:	6713      	str	r3, [r2, #112]	; 0x70
 8103b66:	e008      	b.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103b68:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b6c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8103b70:	e003      	b.n	8103b7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b76:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b82:	f002 0301 	and.w	r3, r2, #1
 8103b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8103b8a:	2300      	movs	r3, #0
 8103b8c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8103b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8103b94:	460b      	mov	r3, r1
 8103b96:	4313      	orrs	r3, r2
 8103b98:	f000 808b 	beq.w	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ba4:	2b28      	cmp	r3, #40	; 0x28
 8103ba6:	d86b      	bhi.n	8103c80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103ba8:	a201      	add	r2, pc, #4	; (adr r2, 8103bb0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bae:	bf00      	nop
 8103bb0:	08103c89 	.word	0x08103c89
 8103bb4:	08103c81 	.word	0x08103c81
 8103bb8:	08103c81 	.word	0x08103c81
 8103bbc:	08103c81 	.word	0x08103c81
 8103bc0:	08103c81 	.word	0x08103c81
 8103bc4:	08103c81 	.word	0x08103c81
 8103bc8:	08103c81 	.word	0x08103c81
 8103bcc:	08103c81 	.word	0x08103c81
 8103bd0:	08103c55 	.word	0x08103c55
 8103bd4:	08103c81 	.word	0x08103c81
 8103bd8:	08103c81 	.word	0x08103c81
 8103bdc:	08103c81 	.word	0x08103c81
 8103be0:	08103c81 	.word	0x08103c81
 8103be4:	08103c81 	.word	0x08103c81
 8103be8:	08103c81 	.word	0x08103c81
 8103bec:	08103c81 	.word	0x08103c81
 8103bf0:	08103c6b 	.word	0x08103c6b
 8103bf4:	08103c81 	.word	0x08103c81
 8103bf8:	08103c81 	.word	0x08103c81
 8103bfc:	08103c81 	.word	0x08103c81
 8103c00:	08103c81 	.word	0x08103c81
 8103c04:	08103c81 	.word	0x08103c81
 8103c08:	08103c81 	.word	0x08103c81
 8103c0c:	08103c81 	.word	0x08103c81
 8103c10:	08103c89 	.word	0x08103c89
 8103c14:	08103c81 	.word	0x08103c81
 8103c18:	08103c81 	.word	0x08103c81
 8103c1c:	08103c81 	.word	0x08103c81
 8103c20:	08103c81 	.word	0x08103c81
 8103c24:	08103c81 	.word	0x08103c81
 8103c28:	08103c81 	.word	0x08103c81
 8103c2c:	08103c81 	.word	0x08103c81
 8103c30:	08103c89 	.word	0x08103c89
 8103c34:	08103c81 	.word	0x08103c81
 8103c38:	08103c81 	.word	0x08103c81
 8103c3c:	08103c81 	.word	0x08103c81
 8103c40:	08103c81 	.word	0x08103c81
 8103c44:	08103c81 	.word	0x08103c81
 8103c48:	08103c81 	.word	0x08103c81
 8103c4c:	08103c81 	.word	0x08103c81
 8103c50:	08103c89 	.word	0x08103c89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c58:	3308      	adds	r3, #8
 8103c5a:	2101      	movs	r1, #1
 8103c5c:	4618      	mov	r0, r3
 8103c5e:	f001 fe97 	bl	8105990 <RCCEx_PLL2_Config>
 8103c62:	4603      	mov	r3, r0
 8103c64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103c68:	e00f      	b.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103c6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c6e:	3328      	adds	r3, #40	; 0x28
 8103c70:	2101      	movs	r1, #1
 8103c72:	4618      	mov	r0, r3
 8103c74:	f001 ff3e 	bl	8105af4 <RCCEx_PLL3_Config>
 8103c78:	4603      	mov	r3, r0
 8103c7a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103c7e:	e004      	b.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103c80:	2301      	movs	r3, #1
 8103c82:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103c86:	e000      	b.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103c8e:	2b00      	cmp	r3, #0
 8103c90:	d10b      	bne.n	8103caa <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103c92:	4b81      	ldr	r3, [pc, #516]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c96:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8103c9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ca2:	4a7d      	ldr	r2, [pc, #500]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103ca4:	430b      	orrs	r3, r1
 8103ca6:	6553      	str	r3, [r2, #84]	; 0x54
 8103ca8:	e003      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103caa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103cae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cba:	f002 0302 	and.w	r3, r2, #2
 8103cbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8103cc2:	2300      	movs	r3, #0
 8103cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8103cc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8103ccc:	460b      	mov	r3, r1
 8103cce:	4313      	orrs	r3, r2
 8103cd0:	d042      	beq.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103cd8:	2b05      	cmp	r3, #5
 8103cda:	d825      	bhi.n	8103d28 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8103cdc:	a201      	add	r2, pc, #4	; (adr r2, 8103ce4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8103cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ce2:	bf00      	nop
 8103ce4:	08103d31 	.word	0x08103d31
 8103ce8:	08103cfd 	.word	0x08103cfd
 8103cec:	08103d13 	.word	0x08103d13
 8103cf0:	08103d31 	.word	0x08103d31
 8103cf4:	08103d31 	.word	0x08103d31
 8103cf8:	08103d31 	.word	0x08103d31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d00:	3308      	adds	r3, #8
 8103d02:	2101      	movs	r1, #1
 8103d04:	4618      	mov	r0, r3
 8103d06:	f001 fe43 	bl	8105990 <RCCEx_PLL2_Config>
 8103d0a:	4603      	mov	r3, r0
 8103d0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103d10:	e00f      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d16:	3328      	adds	r3, #40	; 0x28
 8103d18:	2101      	movs	r1, #1
 8103d1a:	4618      	mov	r0, r3
 8103d1c:	f001 feea 	bl	8105af4 <RCCEx_PLL3_Config>
 8103d20:	4603      	mov	r3, r0
 8103d22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103d26:	e004      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d28:	2301      	movs	r3, #1
 8103d2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103d2e:	e000      	b.n	8103d32 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d36:	2b00      	cmp	r3, #0
 8103d38:	d10a      	bne.n	8103d50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103d3a:	4b57      	ldr	r3, [pc, #348]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d3e:	f023 0107 	bic.w	r1, r3, #7
 8103d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103d48:	4a53      	ldr	r2, [pc, #332]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103d4a:	430b      	orrs	r3, r1
 8103d4c:	6553      	str	r3, [r2, #84]	; 0x54
 8103d4e:	e003      	b.n	8103d58 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d50:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d54:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d60:	f002 0304 	and.w	r3, r2, #4
 8103d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8103d68:	2300      	movs	r3, #0
 8103d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8103d6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8103d72:	460b      	mov	r3, r1
 8103d74:	4313      	orrs	r3, r2
 8103d76:	d044      	beq.n	8103e02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103d78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103d80:	2b05      	cmp	r3, #5
 8103d82:	d825      	bhi.n	8103dd0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103d84:	a201      	add	r2, pc, #4	; (adr r2, 8103d8c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8103d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d8a:	bf00      	nop
 8103d8c:	08103dd9 	.word	0x08103dd9
 8103d90:	08103da5 	.word	0x08103da5
 8103d94:	08103dbb 	.word	0x08103dbb
 8103d98:	08103dd9 	.word	0x08103dd9
 8103d9c:	08103dd9 	.word	0x08103dd9
 8103da0:	08103dd9 	.word	0x08103dd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103da8:	3308      	adds	r3, #8
 8103daa:	2101      	movs	r1, #1
 8103dac:	4618      	mov	r0, r3
 8103dae:	f001 fdef 	bl	8105990 <RCCEx_PLL2_Config>
 8103db2:	4603      	mov	r3, r0
 8103db4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103db8:	e00f      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dbe:	3328      	adds	r3, #40	; 0x28
 8103dc0:	2101      	movs	r1, #1
 8103dc2:	4618      	mov	r0, r3
 8103dc4:	f001 fe96 	bl	8105af4 <RCCEx_PLL3_Config>
 8103dc8:	4603      	mov	r3, r0
 8103dca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103dce:	e004      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103dd0:	2301      	movs	r3, #1
 8103dd2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103dd6:	e000      	b.n	8103dda <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8103dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103dda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103dde:	2b00      	cmp	r3, #0
 8103de0:	d10b      	bne.n	8103dfa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103de2:	4b2d      	ldr	r3, [pc, #180]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103de6:	f023 0107 	bic.w	r1, r3, #7
 8103dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103df2:	4a29      	ldr	r2, [pc, #164]	; (8103e98 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103df4:	430b      	orrs	r3, r1
 8103df6:	6593      	str	r3, [r2, #88]	; 0x58
 8103df8:	e003      	b.n	8103e02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103dfe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e0a:	f002 0320 	and.w	r3, r2, #32
 8103e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8103e12:	2300      	movs	r3, #0
 8103e14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8103e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8103e1c:	460b      	mov	r3, r1
 8103e1e:	4313      	orrs	r3, r2
 8103e20:	d057      	beq.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8103e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e2e:	d035      	beq.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8103e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e34:	d82c      	bhi.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e3a:	d031      	beq.n	8103ea0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e40:	d826      	bhi.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e46:	d02d      	beq.n	8103ea4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103e48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e4c:	d820      	bhi.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e52:	d012      	beq.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8103e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e58:	d81a      	bhi.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e5a:	2b00      	cmp	r3, #0
 8103e5c:	d024      	beq.n	8103ea8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8103e5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e62:	d115      	bne.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e68:	3308      	adds	r3, #8
 8103e6a:	2100      	movs	r1, #0
 8103e6c:	4618      	mov	r0, r3
 8103e6e:	f001 fd8f 	bl	8105990 <RCCEx_PLL2_Config>
 8103e72:	4603      	mov	r3, r0
 8103e74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103e78:	e017      	b.n	8103eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e7e:	3328      	adds	r3, #40	; 0x28
 8103e80:	2102      	movs	r1, #2
 8103e82:	4618      	mov	r0, r3
 8103e84:	f001 fe36 	bl	8105af4 <RCCEx_PLL3_Config>
 8103e88:	4603      	mov	r3, r0
 8103e8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103e8e:	e00c      	b.n	8103eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103e90:	2301      	movs	r3, #1
 8103e92:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103e96:	e008      	b.n	8103eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103e98:	58024400 	.word	0x58024400
        break;
 8103e9c:	bf00      	nop
 8103e9e:	e004      	b.n	8103eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103ea0:	bf00      	nop
 8103ea2:	e002      	b.n	8103eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103ea4:	bf00      	nop
 8103ea6:	e000      	b.n	8103eaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103eaa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103eae:	2b00      	cmp	r3, #0
 8103eb0:	d10b      	bne.n	8103eca <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103eb2:	4bc2      	ldr	r3, [pc, #776]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103eb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103ec2:	4abe      	ldr	r2, [pc, #760]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103ec4:	430b      	orrs	r3, r1
 8103ec6:	6553      	str	r3, [r2, #84]	; 0x54
 8103ec8:	e003      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103eca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103ece:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8103ede:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8103ee2:	2300      	movs	r3, #0
 8103ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8103ee8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8103eec:	460b      	mov	r3, r1
 8103eee:	4313      	orrs	r3, r2
 8103ef0:	d055      	beq.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103ef2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103efa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103efe:	d033      	beq.n	8103f68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8103f00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103f04:	d82c      	bhi.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f0a:	d02f      	beq.n	8103f6c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8103f0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f10:	d826      	bhi.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103f16:	d02b      	beq.n	8103f70 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103f1c:	d820      	bhi.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103f22:	d012      	beq.n	8103f4a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8103f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103f28:	d81a      	bhi.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f2a:	2b00      	cmp	r3, #0
 8103f2c:	d022      	beq.n	8103f74 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103f32:	d115      	bne.n	8103f60 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f38:	3308      	adds	r3, #8
 8103f3a:	2100      	movs	r1, #0
 8103f3c:	4618      	mov	r0, r3
 8103f3e:	f001 fd27 	bl	8105990 <RCCEx_PLL2_Config>
 8103f42:	4603      	mov	r3, r0
 8103f44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103f48:	e015      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f4e:	3328      	adds	r3, #40	; 0x28
 8103f50:	2102      	movs	r1, #2
 8103f52:	4618      	mov	r0, r3
 8103f54:	f001 fdce 	bl	8105af4 <RCCEx_PLL3_Config>
 8103f58:	4603      	mov	r3, r0
 8103f5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103f5e:	e00a      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f60:	2301      	movs	r3, #1
 8103f62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103f66:	e006      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f68:	bf00      	nop
 8103f6a:	e004      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f6c:	bf00      	nop
 8103f6e:	e002      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f70:	bf00      	nop
 8103f72:	e000      	b.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f76:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103f7a:	2b00      	cmp	r3, #0
 8103f7c:	d10b      	bne.n	8103f96 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103f7e:	4b8f      	ldr	r3, [pc, #572]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8103f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103f8e:	4a8b      	ldr	r2, [pc, #556]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103f90:	430b      	orrs	r3, r1
 8103f92:	6593      	str	r3, [r2, #88]	; 0x58
 8103f94:	e003      	b.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103f9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fa6:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8103faa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8103fae:	2300      	movs	r3, #0
 8103fb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8103fb4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8103fb8:	460b      	mov	r3, r1
 8103fba:	4313      	orrs	r3, r2
 8103fbc:	d055      	beq.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103fbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103fca:	d033      	beq.n	8104034 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103fd0:	d82c      	bhi.n	810402c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103fd6:	d02f      	beq.n	8104038 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8103fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103fdc:	d826      	bhi.n	810402c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103fe2:	d02b      	beq.n	810403c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8103fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103fe8:	d820      	bhi.n	810402c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103fee:	d012      	beq.n	8104016 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8103ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103ff4:	d81a      	bhi.n	810402c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103ff6:	2b00      	cmp	r3, #0
 8103ff8:	d022      	beq.n	8104040 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8103ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ffe:	d115      	bne.n	810402c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104000:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104004:	3308      	adds	r3, #8
 8104006:	2100      	movs	r1, #0
 8104008:	4618      	mov	r0, r3
 810400a:	f001 fcc1 	bl	8105990 <RCCEx_PLL2_Config>
 810400e:	4603      	mov	r3, r0
 8104010:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104014:	e015      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104016:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810401a:	3328      	adds	r3, #40	; 0x28
 810401c:	2102      	movs	r1, #2
 810401e:	4618      	mov	r0, r3
 8104020:	f001 fd68 	bl	8105af4 <RCCEx_PLL3_Config>
 8104024:	4603      	mov	r3, r0
 8104026:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810402a:	e00a      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810402c:	2301      	movs	r3, #1
 810402e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104032:	e006      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104034:	bf00      	nop
 8104036:	e004      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104038:	bf00      	nop
 810403a:	e002      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810403c:	bf00      	nop
 810403e:	e000      	b.n	8104042 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104040:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104042:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104046:	2b00      	cmp	r3, #0
 8104048:	d10b      	bne.n	8104062 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810404a:	4b5c      	ldr	r3, [pc, #368]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810404e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8104052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104056:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810405a:	4a58      	ldr	r2, [pc, #352]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810405c:	430b      	orrs	r3, r1
 810405e:	6593      	str	r3, [r2, #88]	; 0x58
 8104060:	e003      	b.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104062:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104066:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810406a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104072:	f002 0308 	and.w	r3, r2, #8
 8104076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 810407a:	2300      	movs	r3, #0
 810407c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104080:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8104084:	460b      	mov	r3, r1
 8104086:	4313      	orrs	r3, r2
 8104088:	d01e      	beq.n	81040c8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810408a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104096:	d10c      	bne.n	81040b2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104098:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810409c:	3328      	adds	r3, #40	; 0x28
 810409e:	2102      	movs	r1, #2
 81040a0:	4618      	mov	r0, r3
 81040a2:	f001 fd27 	bl	8105af4 <RCCEx_PLL3_Config>
 81040a6:	4603      	mov	r3, r0
 81040a8:	2b00      	cmp	r3, #0
 81040aa:	d002      	beq.n	81040b2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81040ac:	2301      	movs	r3, #1
 81040ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81040b2:	4b42      	ldr	r3, [pc, #264]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81040ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81040c2:	4a3e      	ldr	r2, [pc, #248]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81040c4:	430b      	orrs	r3, r1
 81040c6:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81040c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040d0:	f002 0310 	and.w	r3, r2, #16
 81040d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 81040d8:	2300      	movs	r3, #0
 81040da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81040de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81040e2:	460b      	mov	r3, r1
 81040e4:	4313      	orrs	r3, r2
 81040e6:	d01e      	beq.n	8104126 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81040e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81040f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81040f4:	d10c      	bne.n	8104110 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81040f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040fa:	3328      	adds	r3, #40	; 0x28
 81040fc:	2102      	movs	r1, #2
 81040fe:	4618      	mov	r0, r3
 8104100:	f001 fcf8 	bl	8105af4 <RCCEx_PLL3_Config>
 8104104:	4603      	mov	r3, r0
 8104106:	2b00      	cmp	r3, #0
 8104108:	d002      	beq.n	8104110 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 810410a:	2301      	movs	r3, #1
 810410c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104110:	4b2a      	ldr	r3, [pc, #168]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104114:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104118:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810411c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104120:	4a26      	ldr	r2, [pc, #152]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104122:	430b      	orrs	r3, r1
 8104124:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104126:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810412e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8104132:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8104136:	2300      	movs	r3, #0
 8104138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 810413c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8104140:	460b      	mov	r3, r1
 8104142:	4313      	orrs	r3, r2
 8104144:	d040      	beq.n	81041c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8104146:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810414a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810414e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104152:	d022      	beq.n	810419a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8104154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104158:	d81b      	bhi.n	8104192 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810415a:	2b00      	cmp	r3, #0
 810415c:	d003      	beq.n	8104166 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 810415e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104162:	d00b      	beq.n	810417c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8104164:	e015      	b.n	8104192 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104166:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810416a:	3308      	adds	r3, #8
 810416c:	2100      	movs	r1, #0
 810416e:	4618      	mov	r0, r3
 8104170:	f001 fc0e 	bl	8105990 <RCCEx_PLL2_Config>
 8104174:	4603      	mov	r3, r0
 8104176:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810417a:	e00f      	b.n	810419c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810417c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104180:	3328      	adds	r3, #40	; 0x28
 8104182:	2102      	movs	r1, #2
 8104184:	4618      	mov	r0, r3
 8104186:	f001 fcb5 	bl	8105af4 <RCCEx_PLL3_Config>
 810418a:	4603      	mov	r3, r0
 810418c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104190:	e004      	b.n	810419c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104192:	2301      	movs	r3, #1
 8104194:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104198:	e000      	b.n	810419c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810419a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810419c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041a0:	2b00      	cmp	r3, #0
 81041a2:	d10d      	bne.n	81041c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81041a4:	4b05      	ldr	r3, [pc, #20]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81041a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041a8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81041ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81041b4:	4a01      	ldr	r2, [pc, #4]	; (81041bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81041b6:	430b      	orrs	r3, r1
 81041b8:	6593      	str	r3, [r2, #88]	; 0x58
 81041ba:	e005      	b.n	81041c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81041bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041c4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81041c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041d0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81041d4:	67bb      	str	r3, [r7, #120]	; 0x78
 81041d6:	2300      	movs	r3, #0
 81041d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 81041da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81041de:	460b      	mov	r3, r1
 81041e0:	4313      	orrs	r3, r2
 81041e2:	d03b      	beq.n	810425c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81041e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81041ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81041f0:	d01f      	beq.n	8104232 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 81041f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81041f6:	d818      	bhi.n	810422a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 81041f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81041fc:	d003      	beq.n	8104206 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 81041fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104202:	d007      	beq.n	8104214 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8104204:	e011      	b.n	810422a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104206:	4b64      	ldr	r3, [pc, #400]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810420a:	4a63      	ldr	r2, [pc, #396]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810420c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104210:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8104212:	e00f      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104214:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104218:	3328      	adds	r3, #40	; 0x28
 810421a:	2101      	movs	r1, #1
 810421c:	4618      	mov	r0, r3
 810421e:	f001 fc69 	bl	8105af4 <RCCEx_PLL3_Config>
 8104222:	4603      	mov	r3, r0
 8104224:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8104228:	e004      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810422a:	2301      	movs	r3, #1
 810422c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104230:	e000      	b.n	8104234 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8104232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104234:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104238:	2b00      	cmp	r3, #0
 810423a:	d10b      	bne.n	8104254 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810423c:	4b56      	ldr	r3, [pc, #344]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104240:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104244:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104248:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810424c:	4a52      	ldr	r2, [pc, #328]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810424e:	430b      	orrs	r3, r1
 8104250:	6553      	str	r3, [r2, #84]	; 0x54
 8104252:	e003      	b.n	810425c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104254:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104258:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810425c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104264:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8104268:	673b      	str	r3, [r7, #112]	; 0x70
 810426a:	2300      	movs	r3, #0
 810426c:	677b      	str	r3, [r7, #116]	; 0x74
 810426e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8104272:	460b      	mov	r3, r1
 8104274:	4313      	orrs	r3, r2
 8104276:	d031      	beq.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104278:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810427e:	2b00      	cmp	r3, #0
 8104280:	d003      	beq.n	810428a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8104282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104286:	d007      	beq.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8104288:	e011      	b.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810428a:	4b43      	ldr	r3, [pc, #268]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810428e:	4a42      	ldr	r2, [pc, #264]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104294:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104296:	e00e      	b.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104298:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810429c:	3308      	adds	r3, #8
 810429e:	2102      	movs	r1, #2
 81042a0:	4618      	mov	r0, r3
 81042a2:	f001 fb75 	bl	8105990 <RCCEx_PLL2_Config>
 81042a6:	4603      	mov	r3, r0
 81042a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81042ac:	e003      	b.n	81042b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81042ae:	2301      	movs	r3, #1
 81042b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81042b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81042ba:	2b00      	cmp	r3, #0
 81042bc:	d10a      	bne.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81042be:	4b36      	ldr	r3, [pc, #216]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81042c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81042c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042cc:	4a32      	ldr	r2, [pc, #200]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81042ce:	430b      	orrs	r3, r1
 81042d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 81042d2:	e003      	b.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81042d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81042dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042e4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 81042e8:	66bb      	str	r3, [r7, #104]	; 0x68
 81042ea:	2300      	movs	r3, #0
 81042ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 81042ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 81042f2:	460b      	mov	r3, r1
 81042f4:	4313      	orrs	r3, r2
 81042f6:	d00c      	beq.n	8104312 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81042f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042fc:	3328      	adds	r3, #40	; 0x28
 81042fe:	2102      	movs	r1, #2
 8104300:	4618      	mov	r0, r3
 8104302:	f001 fbf7 	bl	8105af4 <RCCEx_PLL3_Config>
 8104306:	4603      	mov	r3, r0
 8104308:	2b00      	cmp	r3, #0
 810430a:	d002      	beq.n	8104312 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 810430c:	2301      	movs	r3, #1
 810430e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104312:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104316:	e9d3 2300 	ldrd	r2, r3, [r3]
 810431a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 810431e:	663b      	str	r3, [r7, #96]	; 0x60
 8104320:	2300      	movs	r3, #0
 8104322:	667b      	str	r3, [r7, #100]	; 0x64
 8104324:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8104328:	460b      	mov	r3, r1
 810432a:	4313      	orrs	r3, r2
 810432c:	d03a      	beq.n	81043a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810432e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810433a:	d018      	beq.n	810436e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 810433c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104340:	d811      	bhi.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8104342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104346:	d014      	beq.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8104348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810434c:	d80b      	bhi.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810434e:	2b00      	cmp	r3, #0
 8104350:	d011      	beq.n	8104376 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8104352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104356:	d106      	bne.n	8104366 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104358:	4b0f      	ldr	r3, [pc, #60]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810435c:	4a0e      	ldr	r2, [pc, #56]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810435e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104362:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104364:	e008      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104366:	2301      	movs	r3, #1
 8104368:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810436c:	e004      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810436e:	bf00      	nop
 8104370:	e002      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104372:	bf00      	nop
 8104374:	e000      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104376:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104378:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810437c:	2b00      	cmp	r3, #0
 810437e:	d10d      	bne.n	810439c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104380:	4b05      	ldr	r3, [pc, #20]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104384:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104388:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104390:	4a01      	ldr	r2, [pc, #4]	; (8104398 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104392:	430b      	orrs	r3, r1
 8104394:	6553      	str	r3, [r2, #84]	; 0x54
 8104396:	e005      	b.n	81043a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8104398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810439c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81043a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81043a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 81043b0:	65bb      	str	r3, [r7, #88]	; 0x58
 81043b2:	2300      	movs	r3, #0
 81043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 81043b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 81043ba:	460b      	mov	r3, r1
 81043bc:	4313      	orrs	r3, r2
 81043be:	d009      	beq.n	81043d4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81043c0:	4baa      	ldr	r3, [pc, #680]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81043c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81043c4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81043c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81043ce:	4aa7      	ldr	r2, [pc, #668]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81043d0:	430b      	orrs	r3, r1
 81043d2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81043d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043dc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 81043e0:	653b      	str	r3, [r7, #80]	; 0x50
 81043e2:	2300      	movs	r3, #0
 81043e4:	657b      	str	r3, [r7, #84]	; 0x54
 81043e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 81043ea:	460b      	mov	r3, r1
 81043ec:	4313      	orrs	r3, r2
 81043ee:	d00a      	beq.n	8104406 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81043f0:	4b9e      	ldr	r3, [pc, #632]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81043f2:	691b      	ldr	r3, [r3, #16]
 81043f4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 81043f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104400:	4a9a      	ldr	r2, [pc, #616]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104402:	430b      	orrs	r3, r1
 8104404:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810440a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810440e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8104412:	64bb      	str	r3, [r7, #72]	; 0x48
 8104414:	2300      	movs	r3, #0
 8104416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8104418:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 810441c:	460b      	mov	r3, r1
 810441e:	4313      	orrs	r3, r2
 8104420:	d009      	beq.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104422:	4b92      	ldr	r3, [pc, #584]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104426:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 810442a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104430:	4a8e      	ldr	r2, [pc, #568]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104432:	430b      	orrs	r3, r1
 8104434:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104436:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810443e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8104442:	643b      	str	r3, [r7, #64]	; 0x40
 8104444:	2300      	movs	r3, #0
 8104446:	647b      	str	r3, [r7, #68]	; 0x44
 8104448:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 810444c:	460b      	mov	r3, r1
 810444e:	4313      	orrs	r3, r2
 8104450:	d00e      	beq.n	8104470 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104452:	4b86      	ldr	r3, [pc, #536]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104454:	691b      	ldr	r3, [r3, #16]
 8104456:	4a85      	ldr	r2, [pc, #532]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104458:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 810445c:	6113      	str	r3, [r2, #16]
 810445e:	4b83      	ldr	r3, [pc, #524]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104460:	6919      	ldr	r1, [r3, #16]
 8104462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104466:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 810446a:	4a80      	ldr	r2, [pc, #512]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810446c:	430b      	orrs	r3, r1
 810446e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104470:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104478:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 810447c:	63bb      	str	r3, [r7, #56]	; 0x38
 810447e:	2300      	movs	r3, #0
 8104480:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104482:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8104486:	460b      	mov	r3, r1
 8104488:	4313      	orrs	r3, r2
 810448a:	d009      	beq.n	81044a0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810448c:	4b77      	ldr	r3, [pc, #476]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810448e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104490:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104494:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810449a:	4a74      	ldr	r2, [pc, #464]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810449c:	430b      	orrs	r3, r1
 810449e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81044a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044a8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 81044ac:	633b      	str	r3, [r7, #48]	; 0x30
 81044ae:	2300      	movs	r3, #0
 81044b0:	637b      	str	r3, [r7, #52]	; 0x34
 81044b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 81044b6:	460b      	mov	r3, r1
 81044b8:	4313      	orrs	r3, r2
 81044ba:	d00a      	beq.n	81044d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81044bc:	4b6b      	ldr	r3, [pc, #428]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81044c0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 81044c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81044cc:	4a67      	ldr	r2, [pc, #412]	; (810466c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81044ce:	430b      	orrs	r3, r1
 81044d0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81044d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044da:	2100      	movs	r1, #0
 81044dc:	62b9      	str	r1, [r7, #40]	; 0x28
 81044de:	f003 0301 	and.w	r3, r3, #1
 81044e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 81044e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 81044e8:	460b      	mov	r3, r1
 81044ea:	4313      	orrs	r3, r2
 81044ec:	d011      	beq.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81044ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044f2:	3308      	adds	r3, #8
 81044f4:	2100      	movs	r1, #0
 81044f6:	4618      	mov	r0, r3
 81044f8:	f001 fa4a 	bl	8105990 <RCCEx_PLL2_Config>
 81044fc:	4603      	mov	r3, r0
 81044fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104502:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104506:	2b00      	cmp	r3, #0
 8104508:	d003      	beq.n	8104512 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810450a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810450e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104516:	e9d3 2300 	ldrd	r2, r3, [r3]
 810451a:	2100      	movs	r1, #0
 810451c:	6239      	str	r1, [r7, #32]
 810451e:	f003 0302 	and.w	r3, r3, #2
 8104522:	627b      	str	r3, [r7, #36]	; 0x24
 8104524:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104528:	460b      	mov	r3, r1
 810452a:	4313      	orrs	r3, r2
 810452c:	d011      	beq.n	8104552 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810452e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104532:	3308      	adds	r3, #8
 8104534:	2101      	movs	r1, #1
 8104536:	4618      	mov	r0, r3
 8104538:	f001 fa2a 	bl	8105990 <RCCEx_PLL2_Config>
 810453c:	4603      	mov	r3, r0
 810453e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104542:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104546:	2b00      	cmp	r3, #0
 8104548:	d003      	beq.n	8104552 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810454a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810454e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104552:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104556:	e9d3 2300 	ldrd	r2, r3, [r3]
 810455a:	2100      	movs	r1, #0
 810455c:	61b9      	str	r1, [r7, #24]
 810455e:	f003 0304 	and.w	r3, r3, #4
 8104562:	61fb      	str	r3, [r7, #28]
 8104564:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104568:	460b      	mov	r3, r1
 810456a:	4313      	orrs	r3, r2
 810456c:	d011      	beq.n	8104592 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810456e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104572:	3308      	adds	r3, #8
 8104574:	2102      	movs	r1, #2
 8104576:	4618      	mov	r0, r3
 8104578:	f001 fa0a 	bl	8105990 <RCCEx_PLL2_Config>
 810457c:	4603      	mov	r3, r0
 810457e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104582:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104586:	2b00      	cmp	r3, #0
 8104588:	d003      	beq.n	8104592 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810458a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810458e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104592:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104596:	e9d3 2300 	ldrd	r2, r3, [r3]
 810459a:	2100      	movs	r1, #0
 810459c:	6139      	str	r1, [r7, #16]
 810459e:	f003 0308 	and.w	r3, r3, #8
 81045a2:	617b      	str	r3, [r7, #20]
 81045a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81045a8:	460b      	mov	r3, r1
 81045aa:	4313      	orrs	r3, r2
 81045ac:	d011      	beq.n	81045d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81045ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045b2:	3328      	adds	r3, #40	; 0x28
 81045b4:	2100      	movs	r1, #0
 81045b6:	4618      	mov	r0, r3
 81045b8:	f001 fa9c 	bl	8105af4 <RCCEx_PLL3_Config>
 81045bc:	4603      	mov	r3, r0
 81045be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 81045c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045c6:	2b00      	cmp	r3, #0
 81045c8:	d003      	beq.n	81045d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045ce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81045d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045da:	2100      	movs	r1, #0
 81045dc:	60b9      	str	r1, [r7, #8]
 81045de:	f003 0310 	and.w	r3, r3, #16
 81045e2:	60fb      	str	r3, [r7, #12]
 81045e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81045e8:	460b      	mov	r3, r1
 81045ea:	4313      	orrs	r3, r2
 81045ec:	d011      	beq.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81045ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045f2:	3328      	adds	r3, #40	; 0x28
 81045f4:	2101      	movs	r1, #1
 81045f6:	4618      	mov	r0, r3
 81045f8:	f001 fa7c 	bl	8105af4 <RCCEx_PLL3_Config>
 81045fc:	4603      	mov	r3, r0
 81045fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104602:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104606:	2b00      	cmp	r3, #0
 8104608:	d003      	beq.n	8104612 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810460a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810460e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104612:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810461a:	2100      	movs	r1, #0
 810461c:	6039      	str	r1, [r7, #0]
 810461e:	f003 0320 	and.w	r3, r3, #32
 8104622:	607b      	str	r3, [r7, #4]
 8104624:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104628:	460b      	mov	r3, r1
 810462a:	4313      	orrs	r3, r2
 810462c:	d011      	beq.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810462e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104632:	3328      	adds	r3, #40	; 0x28
 8104634:	2102      	movs	r1, #2
 8104636:	4618      	mov	r0, r3
 8104638:	f001 fa5c 	bl	8105af4 <RCCEx_PLL3_Config>
 810463c:	4603      	mov	r3, r0
 810463e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104642:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104646:	2b00      	cmp	r3, #0
 8104648:	d003      	beq.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810464a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810464e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8104652:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8104656:	2b00      	cmp	r3, #0
 8104658:	d101      	bne.n	810465e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810465a:	2300      	movs	r3, #0
 810465c:	e000      	b.n	8104660 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 810465e:	2301      	movs	r3, #1
}
 8104660:	4618      	mov	r0, r3
 8104662:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8104666:	46bd      	mov	sp, r7
 8104668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810466c:	58024400 	.word	0x58024400

08104670 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104670:	b580      	push	{r7, lr}
 8104672:	b090      	sub	sp, #64	; 0x40
 8104674:	af00      	add	r7, sp, #0
 8104676:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 810467a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810467e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8104682:	430b      	orrs	r3, r1
 8104684:	f040 8094 	bne.w	81047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104688:	4b9e      	ldr	r3, [pc, #632]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810468a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810468c:	f003 0307 	and.w	r3, r3, #7
 8104690:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104694:	2b04      	cmp	r3, #4
 8104696:	f200 8087 	bhi.w	81047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 810469a:	a201      	add	r2, pc, #4	; (adr r2, 81046a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 810469c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81046a0:	081046b5 	.word	0x081046b5
 81046a4:	081046dd 	.word	0x081046dd
 81046a8:	08104705 	.word	0x08104705
 81046ac:	081047a1 	.word	0x081047a1
 81046b0:	0810472d 	.word	0x0810472d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81046b4:	4b93      	ldr	r3, [pc, #588]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81046bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81046c0:	d108      	bne.n	81046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81046c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81046c6:	4618      	mov	r0, r3
 81046c8:	f001 f810 	bl	81056ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81046ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046d0:	f000 bd45 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046d4:	2300      	movs	r3, #0
 81046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81046d8:	f000 bd41 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81046dc:	4b89      	ldr	r3, [pc, #548]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81046e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81046e8:	d108      	bne.n	81046fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81046ea:	f107 0318 	add.w	r3, r7, #24
 81046ee:	4618      	mov	r0, r3
 81046f0:	f000 fd54 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81046f4:	69bb      	ldr	r3, [r7, #24]
 81046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046f8:	f000 bd31 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046fc:	2300      	movs	r3, #0
 81046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104700:	f000 bd2d 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104704:	4b7f      	ldr	r3, [pc, #508]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810470c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104710:	d108      	bne.n	8104724 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104712:	f107 030c 	add.w	r3, r7, #12
 8104716:	4618      	mov	r0, r3
 8104718:	f000 fe94 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810471c:	68fb      	ldr	r3, [r7, #12]
 810471e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104720:	f000 bd1d 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104724:	2300      	movs	r3, #0
 8104726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104728:	f000 bd19 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810472c:	4b75      	ldr	r3, [pc, #468]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810472e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104734:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104736:	4b73      	ldr	r3, [pc, #460]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104738:	681b      	ldr	r3, [r3, #0]
 810473a:	f003 0304 	and.w	r3, r3, #4
 810473e:	2b04      	cmp	r3, #4
 8104740:	d10c      	bne.n	810475c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8104742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104744:	2b00      	cmp	r3, #0
 8104746:	d109      	bne.n	810475c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104748:	4b6e      	ldr	r3, [pc, #440]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	08db      	lsrs	r3, r3, #3
 810474e:	f003 0303 	and.w	r3, r3, #3
 8104752:	4a6d      	ldr	r2, [pc, #436]	; (8104908 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104754:	fa22 f303 	lsr.w	r3, r2, r3
 8104758:	63fb      	str	r3, [r7, #60]	; 0x3c
 810475a:	e01f      	b.n	810479c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810475c:	4b69      	ldr	r3, [pc, #420]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104768:	d106      	bne.n	8104778 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 810476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810476c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104770:	d102      	bne.n	8104778 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104772:	4b66      	ldr	r3, [pc, #408]	; (810490c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104776:	e011      	b.n	810479c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104778:	4b62      	ldr	r3, [pc, #392]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810477a:	681b      	ldr	r3, [r3, #0]
 810477c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104784:	d106      	bne.n	8104794 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810478c:	d102      	bne.n	8104794 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810478e:	4b60      	ldr	r3, [pc, #384]	; (8104910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104792:	e003      	b.n	810479c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104794:	2300      	movs	r3, #0
 8104796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104798:	f000 bce1 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810479c:	f000 bcdf 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81047a0:	4b5c      	ldr	r3, [pc, #368]	; (8104914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81047a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81047a4:	f000 bcdb 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81047a8:	2300      	movs	r3, #0
 81047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81047ac:	f000 bcd7 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81047b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81047b4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 81047b8:	430b      	orrs	r3, r1
 81047ba:	f040 80ad 	bne.w	8104918 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81047be:	4b51      	ldr	r3, [pc, #324]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047c2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 81047c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047ce:	d056      	beq.n	810487e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047d6:	f200 8090 	bhi.w	81048fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047dc:	2bc0      	cmp	r3, #192	; 0xc0
 81047de:	f000 8088 	beq.w	81048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81047e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047e4:	2bc0      	cmp	r3, #192	; 0xc0
 81047e6:	f200 8088 	bhi.w	81048fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047ec:	2b80      	cmp	r3, #128	; 0x80
 81047ee:	d032      	beq.n	8104856 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047f2:	2b80      	cmp	r3, #128	; 0x80
 81047f4:	f200 8081 	bhi.w	81048fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047fa:	2b00      	cmp	r3, #0
 81047fc:	d003      	beq.n	8104806 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 81047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104800:	2b40      	cmp	r3, #64	; 0x40
 8104802:	d014      	beq.n	810482e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8104804:	e079      	b.n	81048fa <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104806:	4b3f      	ldr	r3, [pc, #252]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104808:	681b      	ldr	r3, [r3, #0]
 810480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810480e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104812:	d108      	bne.n	8104826 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104818:	4618      	mov	r0, r3
 810481a:	f000 ff67 	bl	81056ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104822:	f000 bc9c 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104826:	2300      	movs	r3, #0
 8104828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810482a:	f000 bc98 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810482e:	4b35      	ldr	r3, [pc, #212]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810483a:	d108      	bne.n	810484e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810483c:	f107 0318 	add.w	r3, r7, #24
 8104840:	4618      	mov	r0, r3
 8104842:	f000 fcab 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104846:	69bb      	ldr	r3, [r7, #24]
 8104848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810484a:	f000 bc88 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810484e:	2300      	movs	r3, #0
 8104850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104852:	f000 bc84 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104856:	4b2b      	ldr	r3, [pc, #172]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810485e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104862:	d108      	bne.n	8104876 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104864:	f107 030c 	add.w	r3, r7, #12
 8104868:	4618      	mov	r0, r3
 810486a:	f000 fdeb 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104872:	f000 bc74 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104876:	2300      	movs	r3, #0
 8104878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810487a:	f000 bc70 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810487e:	4b21      	ldr	r3, [pc, #132]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104882:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104886:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104888:	4b1e      	ldr	r3, [pc, #120]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	f003 0304 	and.w	r3, r3, #4
 8104890:	2b04      	cmp	r3, #4
 8104892:	d10c      	bne.n	81048ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104896:	2b00      	cmp	r3, #0
 8104898:	d109      	bne.n	81048ae <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810489a:	4b1a      	ldr	r3, [pc, #104]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810489c:	681b      	ldr	r3, [r3, #0]
 810489e:	08db      	lsrs	r3, r3, #3
 81048a0:	f003 0303 	and.w	r3, r3, #3
 81048a4:	4a18      	ldr	r2, [pc, #96]	; (8104908 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81048a6:	fa22 f303 	lsr.w	r3, r2, r3
 81048aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048ac:	e01f      	b.n	81048ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81048ae:	4b15      	ldr	r3, [pc, #84]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81048b0:	681b      	ldr	r3, [r3, #0]
 81048b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81048ba:	d106      	bne.n	81048ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81048be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81048c2:	d102      	bne.n	81048ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81048c4:	4b11      	ldr	r3, [pc, #68]	; (810490c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81048c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048c8:	e011      	b.n	81048ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81048ca:	4b0e      	ldr	r3, [pc, #56]	; (8104904 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81048cc:	681b      	ldr	r3, [r3, #0]
 81048ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81048d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81048d6:	d106      	bne.n	81048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81048da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81048de:	d102      	bne.n	81048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81048e0:	4b0b      	ldr	r3, [pc, #44]	; (8104910 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81048e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048e4:	e003      	b.n	81048ee <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81048e6:	2300      	movs	r3, #0
 81048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81048ea:	f000 bc38 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81048ee:	f000 bc36 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81048f2:	4b08      	ldr	r3, [pc, #32]	; (8104914 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81048f6:	f000 bc32 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81048fa:	2300      	movs	r3, #0
 81048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81048fe:	f000 bc2e 	b.w	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104902:	bf00      	nop
 8104904:	58024400 	.word	0x58024400
 8104908:	03d09000 	.word	0x03d09000
 810490c:	003d0900 	.word	0x003d0900
 8104910:	017d7840 	.word	0x017d7840
 8104914:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104918:	e9d7 2300 	ldrd	r2, r3, [r7]
 810491c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8104920:	430b      	orrs	r3, r1
 8104922:	f040 809c 	bne.w	8104a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8104926:	4b9e      	ldr	r3, [pc, #632]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810492a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 810492e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104932:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104936:	d054      	beq.n	81049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810493a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810493e:	f200 808b 	bhi.w	8104a58 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104944:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104948:	f000 8083 	beq.w	8104a52 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 810494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810494e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104952:	f200 8081 	bhi.w	8104a58 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810495c:	d02f      	beq.n	81049be <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 810495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104964:	d878      	bhi.n	8104a58 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104968:	2b00      	cmp	r3, #0
 810496a:	d004      	beq.n	8104976 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 810496c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810496e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104972:	d012      	beq.n	810499a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104974:	e070      	b.n	8104a58 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104976:	4b8a      	ldr	r3, [pc, #552]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810497e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104982:	d107      	bne.n	8104994 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104988:	4618      	mov	r0, r3
 810498a:	f000 feaf 	bl	81056ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810498e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104990:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104992:	e3e4      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104994:	2300      	movs	r3, #0
 8104996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104998:	e3e1      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810499a:	4b81      	ldr	r3, [pc, #516]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810499c:	681b      	ldr	r3, [r3, #0]
 810499e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81049a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81049a6:	d107      	bne.n	81049b8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81049a8:	f107 0318 	add.w	r3, r7, #24
 81049ac:	4618      	mov	r0, r3
 81049ae:	f000 fbf5 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81049b2:	69bb      	ldr	r3, [r7, #24]
 81049b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049b6:	e3d2      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049b8:	2300      	movs	r3, #0
 81049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049bc:	e3cf      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81049be:	4b78      	ldr	r3, [pc, #480]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049c0:	681b      	ldr	r3, [r3, #0]
 81049c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81049c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81049ca:	d107      	bne.n	81049dc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81049cc:	f107 030c 	add.w	r3, r7, #12
 81049d0:	4618      	mov	r0, r3
 81049d2:	f000 fd37 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81049d6:	68fb      	ldr	r3, [r7, #12]
 81049d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049da:	e3c0      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049dc:	2300      	movs	r3, #0
 81049de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049e0:	e3bd      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81049e2:	4b6f      	ldr	r3, [pc, #444]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81049e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81049ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81049ec:	4b6c      	ldr	r3, [pc, #432]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	f003 0304 	and.w	r3, r3, #4
 81049f4:	2b04      	cmp	r3, #4
 81049f6:	d10c      	bne.n	8104a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81049fa:	2b00      	cmp	r3, #0
 81049fc:	d109      	bne.n	8104a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81049fe:	4b68      	ldr	r3, [pc, #416]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a00:	681b      	ldr	r3, [r3, #0]
 8104a02:	08db      	lsrs	r3, r3, #3
 8104a04:	f003 0303 	and.w	r3, r3, #3
 8104a08:	4a66      	ldr	r2, [pc, #408]	; (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8104a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104a10:	e01e      	b.n	8104a50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104a12:	4b63      	ldr	r3, [pc, #396]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a14:	681b      	ldr	r3, [r3, #0]
 8104a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a1e:	d106      	bne.n	8104a2e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8104a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104a26:	d102      	bne.n	8104a2e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104a28:	4b5f      	ldr	r3, [pc, #380]	; (8104ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104a2c:	e010      	b.n	8104a50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104a2e:	4b5c      	ldr	r3, [pc, #368]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a30:	681b      	ldr	r3, [r3, #0]
 8104a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a3a:	d106      	bne.n	8104a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a42:	d102      	bne.n	8104a4a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104a44:	4b59      	ldr	r3, [pc, #356]	; (8104bac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104a48:	e002      	b.n	8104a50 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104a4a:	2300      	movs	r3, #0
 8104a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104a4e:	e386      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104a50:	e385      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104a52:	4b57      	ldr	r3, [pc, #348]	; (8104bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104a54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a56:	e382      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104a58:	2300      	movs	r3, #0
 8104a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a5c:	e37f      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104a62:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8104a66:	430b      	orrs	r3, r1
 8104a68:	f040 80a7 	bne.w	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104a6c:	4b4c      	ldr	r3, [pc, #304]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a70:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104a74:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104a7c:	d055      	beq.n	8104b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104a84:	f200 8096 	bhi.w	8104bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104a8e:	f000 8084 	beq.w	8104b9a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8104a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104a98:	f200 808c 	bhi.w	8104bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104a9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104aa2:	d030      	beq.n	8104b06 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104aa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104aaa:	f200 8083 	bhi.w	8104bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ab0:	2b00      	cmp	r3, #0
 8104ab2:	d004      	beq.n	8104abe <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104aba:	d012      	beq.n	8104ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104abc:	e07a      	b.n	8104bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104abe:	4b38      	ldr	r3, [pc, #224]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104aca:	d107      	bne.n	8104adc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104ad0:	4618      	mov	r0, r3
 8104ad2:	f000 fe0b 	bl	81056ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ada:	e340      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104adc:	2300      	movs	r3, #0
 8104ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104ae0:	e33d      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104ae2:	4b2f      	ldr	r3, [pc, #188]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104aee:	d107      	bne.n	8104b00 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104af0:	f107 0318 	add.w	r3, r7, #24
 8104af4:	4618      	mov	r0, r3
 8104af6:	f000 fb51 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104afa:	69bb      	ldr	r3, [r7, #24]
 8104afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104afe:	e32e      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b00:	2300      	movs	r3, #0
 8104b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b04:	e32b      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104b06:	4b26      	ldr	r3, [pc, #152]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b08:	681b      	ldr	r3, [r3, #0]
 8104b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104b12:	d107      	bne.n	8104b24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104b14:	f107 030c 	add.w	r3, r7, #12
 8104b18:	4618      	mov	r0, r3
 8104b1a:	f000 fc93 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104b1e:	68fb      	ldr	r3, [r7, #12]
 8104b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b22:	e31c      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b24:	2300      	movs	r3, #0
 8104b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b28:	e319      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104b2a:	4b1d      	ldr	r3, [pc, #116]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104b32:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104b34:	4b1a      	ldr	r3, [pc, #104]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b36:	681b      	ldr	r3, [r3, #0]
 8104b38:	f003 0304 	and.w	r3, r3, #4
 8104b3c:	2b04      	cmp	r3, #4
 8104b3e:	d10c      	bne.n	8104b5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8104b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	d109      	bne.n	8104b5a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104b46:	4b16      	ldr	r3, [pc, #88]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	08db      	lsrs	r3, r3, #3
 8104b4c:	f003 0303 	and.w	r3, r3, #3
 8104b50:	4a14      	ldr	r2, [pc, #80]	; (8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104b52:	fa22 f303 	lsr.w	r3, r2, r3
 8104b56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b58:	e01e      	b.n	8104b98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104b5a:	4b11      	ldr	r3, [pc, #68]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b5c:	681b      	ldr	r3, [r3, #0]
 8104b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b66:	d106      	bne.n	8104b76 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104b6e:	d102      	bne.n	8104b76 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104b70:	4b0d      	ldr	r3, [pc, #52]	; (8104ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b74:	e010      	b.n	8104b98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104b76:	4b0a      	ldr	r3, [pc, #40]	; (8104ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104b82:	d106      	bne.n	8104b92 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104b8a:	d102      	bne.n	8104b92 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104b8c:	4b07      	ldr	r3, [pc, #28]	; (8104bac <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b90:	e002      	b.n	8104b98 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104b92:	2300      	movs	r3, #0
 8104b94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104b96:	e2e2      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104b98:	e2e1      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104b9a:	4b05      	ldr	r3, [pc, #20]	; (8104bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b9e:	e2de      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104ba0:	58024400 	.word	0x58024400
 8104ba4:	03d09000 	.word	0x03d09000
 8104ba8:	003d0900 	.word	0x003d0900
 8104bac:	017d7840 	.word	0x017d7840
 8104bb0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104bb4:	2300      	movs	r3, #0
 8104bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104bb8:	e2d1      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104bba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104bbe:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8104bc2:	430b      	orrs	r3, r1
 8104bc4:	f040 809c 	bne.w	8104d00 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104bc8:	4b93      	ldr	r3, [pc, #588]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104bcc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8104bd0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104bd8:	d054      	beq.n	8104c84 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104be0:	f200 808b 	bhi.w	8104cfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104bea:	f000 8083 	beq.w	8104cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8104bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104bf4:	f200 8081 	bhi.w	8104cfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104bfe:	d02f      	beq.n	8104c60 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8104c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c06:	d878      	bhi.n	8104cfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c0a:	2b00      	cmp	r3, #0
 8104c0c:	d004      	beq.n	8104c18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8104c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104c14:	d012      	beq.n	8104c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8104c16:	e070      	b.n	8104cfa <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104c18:	4b7f      	ldr	r3, [pc, #508]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104c24:	d107      	bne.n	8104c36 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104c2a:	4618      	mov	r0, r3
 8104c2c:	f000 fd5e 	bl	81056ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c34:	e293      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c36:	2300      	movs	r3, #0
 8104c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c3a:	e290      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104c3c:	4b76      	ldr	r3, [pc, #472]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c3e:	681b      	ldr	r3, [r3, #0]
 8104c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104c48:	d107      	bne.n	8104c5a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104c4a:	f107 0318 	add.w	r3, r7, #24
 8104c4e:	4618      	mov	r0, r3
 8104c50:	f000 faa4 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104c54:	69bb      	ldr	r3, [r7, #24]
 8104c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c58:	e281      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c5a:	2300      	movs	r3, #0
 8104c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c5e:	e27e      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104c60:	4b6d      	ldr	r3, [pc, #436]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104c68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104c6c:	d107      	bne.n	8104c7e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104c6e:	f107 030c 	add.w	r3, r7, #12
 8104c72:	4618      	mov	r0, r3
 8104c74:	f000 fbe6 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c7c:	e26f      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c7e:	2300      	movs	r3, #0
 8104c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c82:	e26c      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104c84:	4b64      	ldr	r3, [pc, #400]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104c88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104c8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104c8e:	4b62      	ldr	r3, [pc, #392]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c90:	681b      	ldr	r3, [r3, #0]
 8104c92:	f003 0304 	and.w	r3, r3, #4
 8104c96:	2b04      	cmp	r3, #4
 8104c98:	d10c      	bne.n	8104cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c9c:	2b00      	cmp	r3, #0
 8104c9e:	d109      	bne.n	8104cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104ca0:	4b5d      	ldr	r3, [pc, #372]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104ca2:	681b      	ldr	r3, [r3, #0]
 8104ca4:	08db      	lsrs	r3, r3, #3
 8104ca6:	f003 0303 	and.w	r3, r3, #3
 8104caa:	4a5c      	ldr	r2, [pc, #368]	; (8104e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104cac:	fa22 f303 	lsr.w	r3, r2, r3
 8104cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104cb2:	e01e      	b.n	8104cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104cb4:	4b58      	ldr	r3, [pc, #352]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104cbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104cc0:	d106      	bne.n	8104cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104cc8:	d102      	bne.n	8104cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104cca:	4b55      	ldr	r3, [pc, #340]	; (8104e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104cce:	e010      	b.n	8104cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104cd0:	4b51      	ldr	r3, [pc, #324]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104cd2:	681b      	ldr	r3, [r3, #0]
 8104cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104cdc:	d106      	bne.n	8104cec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8104cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ce4:	d102      	bne.n	8104cec <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104ce6:	4b4f      	ldr	r3, [pc, #316]	; (8104e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104cea:	e002      	b.n	8104cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104cec:	2300      	movs	r3, #0
 8104cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104cf0:	e235      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104cf2:	e234      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104cf4:	4b4c      	ldr	r3, [pc, #304]	; (8104e28 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8104cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104cf8:	e231      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104cfa:	2300      	movs	r3, #0
 8104cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104cfe:	e22e      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8104d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104d04:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8104d08:	430b      	orrs	r3, r1
 8104d0a:	f040 808f 	bne.w	8104e2c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8104d0e:	4b42      	ldr	r3, [pc, #264]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d12:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8104d16:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8104d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d1e:	d06b      	beq.n	8104df8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8104d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d22:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d26:	d874      	bhi.n	8104e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d2e:	d056      	beq.n	8104dde <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d36:	d86c      	bhi.n	8104e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d3e:	d03b      	beq.n	8104db8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d46:	d864      	bhi.n	8104e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d4e:	d021      	beq.n	8104d94 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d56:	d85c      	bhi.n	8104e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d5a:	2b00      	cmp	r3, #0
 8104d5c:	d004      	beq.n	8104d68 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104d64:	d004      	beq.n	8104d70 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104d66:	e054      	b.n	8104e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104d68:	f7fe fa22 	bl	81031b0 <HAL_RCC_GetPCLK1Freq>
 8104d6c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104d6e:	e1f6      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d70:	4b29      	ldr	r3, [pc, #164]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104d72:	681b      	ldr	r3, [r3, #0]
 8104d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104d7c:	d107      	bne.n	8104d8e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104d7e:	f107 0318 	add.w	r3, r7, #24
 8104d82:	4618      	mov	r0, r3
 8104d84:	f000 fa0a 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104d88:	69fb      	ldr	r3, [r7, #28]
 8104d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104d8c:	e1e7      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104d8e:	2300      	movs	r3, #0
 8104d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d92:	e1e4      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104d94:	4b20      	ldr	r3, [pc, #128]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104da0:	d107      	bne.n	8104db2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104da2:	f107 030c 	add.w	r3, r7, #12
 8104da6:	4618      	mov	r0, r3
 8104da8:	f000 fb4c 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104dac:	693b      	ldr	r3, [r7, #16]
 8104dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104db0:	e1d5      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104db2:	2300      	movs	r3, #0
 8104db4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104db6:	e1d2      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104db8:	4b17      	ldr	r3, [pc, #92]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104dba:	681b      	ldr	r3, [r3, #0]
 8104dbc:	f003 0304 	and.w	r3, r3, #4
 8104dc0:	2b04      	cmp	r3, #4
 8104dc2:	d109      	bne.n	8104dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104dc4:	4b14      	ldr	r3, [pc, #80]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	08db      	lsrs	r3, r3, #3
 8104dca:	f003 0303 	and.w	r3, r3, #3
 8104dce:	4a13      	ldr	r2, [pc, #76]	; (8104e1c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8104dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dd6:	e1c2      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dd8:	2300      	movs	r3, #0
 8104dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104ddc:	e1bf      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104dde:	4b0e      	ldr	r3, [pc, #56]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104de0:	681b      	ldr	r3, [r3, #0]
 8104de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104dea:	d102      	bne.n	8104df2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8104dec:	4b0c      	ldr	r3, [pc, #48]	; (8104e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104df0:	e1b5      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104df2:	2300      	movs	r3, #0
 8104df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104df6:	e1b2      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104df8:	4b07      	ldr	r3, [pc, #28]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104dfa:	681b      	ldr	r3, [r3, #0]
 8104dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104e04:	d102      	bne.n	8104e0c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8104e06:	4b07      	ldr	r3, [pc, #28]	; (8104e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e0a:	e1a8      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e0c:	2300      	movs	r3, #0
 8104e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e10:	e1a5      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104e12:	2300      	movs	r3, #0
 8104e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e16:	e1a2      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e18:	58024400 	.word	0x58024400
 8104e1c:	03d09000 	.word	0x03d09000
 8104e20:	003d0900 	.word	0x003d0900
 8104e24:	017d7840 	.word	0x017d7840
 8104e28:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104e2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104e30:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8104e34:	430b      	orrs	r3, r1
 8104e36:	d173      	bne.n	8104f20 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104e38:	4b9c      	ldr	r3, [pc, #624]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104e40:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104e48:	d02f      	beq.n	8104eaa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104e50:	d863      	bhi.n	8104f1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8104e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e54:	2b00      	cmp	r3, #0
 8104e56:	d004      	beq.n	8104e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104e5e:	d012      	beq.n	8104e86 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104e60:	e05b      	b.n	8104f1a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104e62:	4b92      	ldr	r3, [pc, #584]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e64:	681b      	ldr	r3, [r3, #0]
 8104e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104e6e:	d107      	bne.n	8104e80 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e70:	f107 0318 	add.w	r3, r7, #24
 8104e74:	4618      	mov	r0, r3
 8104e76:	f000 f991 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104e7a:	69bb      	ldr	r3, [r7, #24]
 8104e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e7e:	e16e      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e80:	2300      	movs	r3, #0
 8104e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e84:	e16b      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104e86:	4b89      	ldr	r3, [pc, #548]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e92:	d107      	bne.n	8104ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e94:	f107 030c 	add.w	r3, r7, #12
 8104e98:	4618      	mov	r0, r3
 8104e9a:	f000 fad3 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104e9e:	697b      	ldr	r3, [r7, #20]
 8104ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ea2:	e15c      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ea4:	2300      	movs	r3, #0
 8104ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104ea8:	e159      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104eaa:	4b80      	ldr	r3, [pc, #512]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104eae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104eb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104eb4:	4b7d      	ldr	r3, [pc, #500]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	f003 0304 	and.w	r3, r3, #4
 8104ebc:	2b04      	cmp	r3, #4
 8104ebe:	d10c      	bne.n	8104eda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8104ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ec2:	2b00      	cmp	r3, #0
 8104ec4:	d109      	bne.n	8104eda <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104ec6:	4b79      	ldr	r3, [pc, #484]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ec8:	681b      	ldr	r3, [r3, #0]
 8104eca:	08db      	lsrs	r3, r3, #3
 8104ecc:	f003 0303 	and.w	r3, r3, #3
 8104ed0:	4a77      	ldr	r2, [pc, #476]	; (81050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8104ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ed8:	e01e      	b.n	8104f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104eda:	4b74      	ldr	r3, [pc, #464]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104edc:	681b      	ldr	r3, [r3, #0]
 8104ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104ee6:	d106      	bne.n	8104ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8104ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104eee:	d102      	bne.n	8104ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104ef0:	4b70      	ldr	r3, [pc, #448]	; (81050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ef4:	e010      	b.n	8104f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104ef6:	4b6d      	ldr	r3, [pc, #436]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104efe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104f02:	d106      	bne.n	8104f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8104f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f0a:	d102      	bne.n	8104f12 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104f0c:	4b6a      	ldr	r3, [pc, #424]	; (81050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f10:	e002      	b.n	8104f18 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104f12:	2300      	movs	r3, #0
 8104f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104f16:	e122      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104f18:	e121      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104f1a:	2300      	movs	r3, #0
 8104f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f1e:	e11e      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f24:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8104f28:	430b      	orrs	r3, r1
 8104f2a:	d133      	bne.n	8104f94 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104f2c:	4b5f      	ldr	r3, [pc, #380]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104f34:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f38:	2b00      	cmp	r3, #0
 8104f3a:	d004      	beq.n	8104f46 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104f42:	d012      	beq.n	8104f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104f44:	e023      	b.n	8104f8e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104f46:	4b59      	ldr	r3, [pc, #356]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f48:	681b      	ldr	r3, [r3, #0]
 8104f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f52:	d107      	bne.n	8104f64 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104f58:	4618      	mov	r0, r3
 8104f5a:	f000 fbc7 	bl	81056ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f62:	e0fc      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f64:	2300      	movs	r3, #0
 8104f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f68:	e0f9      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104f6a:	4b50      	ldr	r3, [pc, #320]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104f76:	d107      	bne.n	8104f88 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f78:	f107 0318 	add.w	r3, r7, #24
 8104f7c:	4618      	mov	r0, r3
 8104f7e:	f000 f90d 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104f82:	6a3b      	ldr	r3, [r7, #32]
 8104f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f86:	e0ea      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f88:	2300      	movs	r3, #0
 8104f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f8c:	e0e7      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104f8e:	2300      	movs	r3, #0
 8104f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f92:	e0e4      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f98:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8104f9c:	430b      	orrs	r3, r1
 8104f9e:	f040 808d 	bne.w	81050bc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8104fa2:	4b42      	ldr	r3, [pc, #264]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fa6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8104faa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104fb2:	d06b      	beq.n	810508c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104fba:	d874      	bhi.n	81050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104fc2:	d056      	beq.n	8105072 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104fca:	d86c      	bhi.n	81050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104fd2:	d03b      	beq.n	810504c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104fda:	d864      	bhi.n	81050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fe2:	d021      	beq.n	8105028 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8104fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fea:	d85c      	bhi.n	81050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fee:	2b00      	cmp	r3, #0
 8104ff0:	d004      	beq.n	8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8104ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104ff8:	d004      	beq.n	8105004 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8104ffa:	e054      	b.n	81050a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8104ffc:	f000 f8b8 	bl	8105170 <HAL_RCCEx_GetD3PCLK1Freq>
 8105000:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105002:	e0ac      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105004:	4b29      	ldr	r3, [pc, #164]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105006:	681b      	ldr	r3, [r3, #0]
 8105008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810500c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105010:	d107      	bne.n	8105022 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105012:	f107 0318 	add.w	r3, r7, #24
 8105016:	4618      	mov	r0, r3
 8105018:	f000 f8c0 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810501c:	69fb      	ldr	r3, [r7, #28]
 810501e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105020:	e09d      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105022:	2300      	movs	r3, #0
 8105024:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105026:	e09a      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105028:	4b20      	ldr	r3, [pc, #128]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810502a:	681b      	ldr	r3, [r3, #0]
 810502c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105030:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105034:	d107      	bne.n	8105046 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105036:	f107 030c 	add.w	r3, r7, #12
 810503a:	4618      	mov	r0, r3
 810503c:	f000 fa02 	bl	8105444 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105040:	693b      	ldr	r3, [r7, #16]
 8105042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105044:	e08b      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105046:	2300      	movs	r3, #0
 8105048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810504a:	e088      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810504c:	4b17      	ldr	r3, [pc, #92]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810504e:	681b      	ldr	r3, [r3, #0]
 8105050:	f003 0304 	and.w	r3, r3, #4
 8105054:	2b04      	cmp	r3, #4
 8105056:	d109      	bne.n	810506c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105058:	4b14      	ldr	r3, [pc, #80]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810505a:	681b      	ldr	r3, [r3, #0]
 810505c:	08db      	lsrs	r3, r3, #3
 810505e:	f003 0303 	and.w	r3, r3, #3
 8105062:	4a13      	ldr	r2, [pc, #76]	; (81050b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8105064:	fa22 f303 	lsr.w	r3, r2, r3
 8105068:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810506a:	e078      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810506c:	2300      	movs	r3, #0
 810506e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105070:	e075      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8105072:	4b0e      	ldr	r3, [pc, #56]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105074:	681b      	ldr	r3, [r3, #0]
 8105076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810507a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810507e:	d102      	bne.n	8105086 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8105080:	4b0c      	ldr	r3, [pc, #48]	; (81050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8105082:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105084:	e06b      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105086:	2300      	movs	r3, #0
 8105088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810508a:	e068      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810508c:	4b07      	ldr	r3, [pc, #28]	; (81050ac <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105098:	d102      	bne.n	81050a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810509a:	4b07      	ldr	r3, [pc, #28]	; (81050b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810509c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810509e:	e05e      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81050a0:	2300      	movs	r3, #0
 81050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050a4:	e05b      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81050a6:	2300      	movs	r3, #0
 81050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050aa:	e058      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81050ac:	58024400 	.word	0x58024400
 81050b0:	03d09000 	.word	0x03d09000
 81050b4:	003d0900 	.word	0x003d0900
 81050b8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81050bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 81050c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 81050c4:	430b      	orrs	r3, r1
 81050c6:	d148      	bne.n	810515a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81050c8:	4b27      	ldr	r3, [pc, #156]	; (8105168 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81050ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81050cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81050d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050d8:	d02a      	beq.n	8105130 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050e0:	d838      	bhi.n	8105154 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050e4:	2b00      	cmp	r3, #0
 81050e6:	d004      	beq.n	81050f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81050ee:	d00d      	beq.n	810510c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81050f0:	e030      	b.n	8105154 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81050f2:	4b1d      	ldr	r3, [pc, #116]	; (8105168 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81050f4:	681b      	ldr	r3, [r3, #0]
 81050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81050fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81050fe:	d102      	bne.n	8105106 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8105100:	4b1a      	ldr	r3, [pc, #104]	; (810516c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8105102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105104:	e02b      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105106:	2300      	movs	r3, #0
 8105108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810510a:	e028      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810510c:	4b16      	ldr	r3, [pc, #88]	; (8105168 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810510e:	681b      	ldr	r3, [r3, #0]
 8105110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105118:	d107      	bne.n	810512a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810511a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810511e:	4618      	mov	r0, r3
 8105120:	f000 fae4 	bl	81056ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105128:	e019      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810512a:	2300      	movs	r3, #0
 810512c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810512e:	e016      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105130:	4b0d      	ldr	r3, [pc, #52]	; (8105168 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105132:	681b      	ldr	r3, [r3, #0]
 8105134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810513c:	d107      	bne.n	810514e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810513e:	f107 0318 	add.w	r3, r7, #24
 8105142:	4618      	mov	r0, r3
 8105144:	f000 f82a 	bl	810519c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105148:	69fb      	ldr	r3, [r7, #28]
 810514a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810514c:	e007      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810514e:	2300      	movs	r3, #0
 8105150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105152:	e004      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105154:	2300      	movs	r3, #0
 8105156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105158:	e001      	b.n	810515e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810515a:	2300      	movs	r3, #0
 810515c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 810515e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8105160:	4618      	mov	r0, r3
 8105162:	3740      	adds	r7, #64	; 0x40
 8105164:	46bd      	mov	sp, r7
 8105166:	bd80      	pop	{r7, pc}
 8105168:	58024400 	.word	0x58024400
 810516c:	017d7840 	.word	0x017d7840

08105170 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105170:	b580      	push	{r7, lr}
 8105172:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8105174:	f7fd ffea 	bl	810314c <HAL_RCC_GetHCLKFreq>
 8105178:	4602      	mov	r2, r0
 810517a:	4b06      	ldr	r3, [pc, #24]	; (8105194 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810517c:	6a1b      	ldr	r3, [r3, #32]
 810517e:	091b      	lsrs	r3, r3, #4
 8105180:	f003 0307 	and.w	r3, r3, #7
 8105184:	4904      	ldr	r1, [pc, #16]	; (8105198 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8105186:	5ccb      	ldrb	r3, [r1, r3]
 8105188:	f003 031f 	and.w	r3, r3, #31
 810518c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105190:	4618      	mov	r0, r3
 8105192:	bd80      	pop	{r7, pc}
 8105194:	58024400 	.word	0x58024400
 8105198:	081076f4 	.word	0x081076f4

0810519c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810519c:	b480      	push	{r7}
 810519e:	b089      	sub	sp, #36	; 0x24
 81051a0:	af00      	add	r7, sp, #0
 81051a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051a4:	4ba1      	ldr	r3, [pc, #644]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051a8:	f003 0303 	and.w	r3, r3, #3
 81051ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81051ae:	4b9f      	ldr	r3, [pc, #636]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051b2:	0b1b      	lsrs	r3, r3, #12
 81051b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81051b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81051ba:	4b9c      	ldr	r3, [pc, #624]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051be:	091b      	lsrs	r3, r3, #4
 81051c0:	f003 0301 	and.w	r3, r3, #1
 81051c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81051c6:	4b99      	ldr	r3, [pc, #612]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81051ca:	08db      	lsrs	r3, r3, #3
 81051cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81051d0:	693a      	ldr	r2, [r7, #16]
 81051d2:	fb02 f303 	mul.w	r3, r2, r3
 81051d6:	ee07 3a90 	vmov	s15, r3
 81051da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81051de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81051e2:	697b      	ldr	r3, [r7, #20]
 81051e4:	2b00      	cmp	r3, #0
 81051e6:	f000 8111 	beq.w	810540c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81051ea:	69bb      	ldr	r3, [r7, #24]
 81051ec:	2b02      	cmp	r3, #2
 81051ee:	f000 8083 	beq.w	81052f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81051f2:	69bb      	ldr	r3, [r7, #24]
 81051f4:	2b02      	cmp	r3, #2
 81051f6:	f200 80a1 	bhi.w	810533c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81051fa:	69bb      	ldr	r3, [r7, #24]
 81051fc:	2b00      	cmp	r3, #0
 81051fe:	d003      	beq.n	8105208 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105200:	69bb      	ldr	r3, [r7, #24]
 8105202:	2b01      	cmp	r3, #1
 8105204:	d056      	beq.n	81052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105206:	e099      	b.n	810533c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105208:	4b88      	ldr	r3, [pc, #544]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810520a:	681b      	ldr	r3, [r3, #0]
 810520c:	f003 0320 	and.w	r3, r3, #32
 8105210:	2b00      	cmp	r3, #0
 8105212:	d02d      	beq.n	8105270 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105214:	4b85      	ldr	r3, [pc, #532]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	08db      	lsrs	r3, r3, #3
 810521a:	f003 0303 	and.w	r3, r3, #3
 810521e:	4a84      	ldr	r2, [pc, #528]	; (8105430 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105220:	fa22 f303 	lsr.w	r3, r2, r3
 8105224:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105226:	68bb      	ldr	r3, [r7, #8]
 8105228:	ee07 3a90 	vmov	s15, r3
 810522c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105230:	697b      	ldr	r3, [r7, #20]
 8105232:	ee07 3a90 	vmov	s15, r3
 8105236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810523a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810523e:	4b7b      	ldr	r3, [pc, #492]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105246:	ee07 3a90 	vmov	s15, r3
 810524a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810524e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105252:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810525a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810525e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105266:	ee67 7a27 	vmul.f32	s15, s14, s15
 810526a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810526e:	e087      	b.n	8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105270:	697b      	ldr	r3, [r7, #20]
 8105272:	ee07 3a90 	vmov	s15, r3
 8105276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810527a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105438 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810527e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105282:	4b6a      	ldr	r3, [pc, #424]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810528a:	ee07 3a90 	vmov	s15, r3
 810528e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105292:	ed97 6a03 	vldr	s12, [r7, #12]
 8105296:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810529a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810529e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052b2:	e065      	b.n	8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81052b4:	697b      	ldr	r3, [r7, #20]
 81052b6:	ee07 3a90 	vmov	s15, r3
 81052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810543c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81052c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052c6:	4b59      	ldr	r3, [pc, #356]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052ce:	ee07 3a90 	vmov	s15, r3
 81052d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81052da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81052de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052f6:	e043      	b.n	8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81052f8:	697b      	ldr	r3, [r7, #20]
 81052fa:	ee07 3a90 	vmov	s15, r3
 81052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105302:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810530a:	4b48      	ldr	r3, [pc, #288]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810530e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105312:	ee07 3a90 	vmov	s15, r3
 8105316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810531a:	ed97 6a03 	vldr	s12, [r7, #12]
 810531e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810532a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810532e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810533a:	e021      	b.n	8105380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810533c:	697b      	ldr	r3, [r7, #20]
 810533e:	ee07 3a90 	vmov	s15, r3
 8105342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105346:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810543c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810534a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810534e:	4b37      	ldr	r3, [pc, #220]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105356:	ee07 3a90 	vmov	s15, r3
 810535a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810535e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105362:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810536a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810536e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105376:	ee67 7a27 	vmul.f32	s15, s14, s15
 810537a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810537e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8105380:	4b2a      	ldr	r3, [pc, #168]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105384:	0a5b      	lsrs	r3, r3, #9
 8105386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810538a:	ee07 3a90 	vmov	s15, r3
 810538e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105396:	ee37 7a87 	vadd.f32	s14, s15, s14
 810539a:	edd7 6a07 	vldr	s13, [r7, #28]
 810539e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053a6:	ee17 2a90 	vmov	r2, s15
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81053ae:	4b1f      	ldr	r3, [pc, #124]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053b2:	0c1b      	lsrs	r3, r3, #16
 81053b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053b8:	ee07 3a90 	vmov	s15, r3
 81053bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053c8:	edd7 6a07 	vldr	s13, [r7, #28]
 81053cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053d4:	ee17 2a90 	vmov	r2, s15
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81053dc:	4b13      	ldr	r3, [pc, #76]	; (810542c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053e0:	0e1b      	lsrs	r3, r3, #24
 81053e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053e6:	ee07 3a90 	vmov	s15, r3
 81053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053f6:	edd7 6a07 	vldr	s13, [r7, #28]
 81053fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105402:	ee17 2a90 	vmov	r2, s15
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810540a:	e008      	b.n	810541e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810540c:	687b      	ldr	r3, [r7, #4]
 810540e:	2200      	movs	r2, #0
 8105410:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105412:	687b      	ldr	r3, [r7, #4]
 8105414:	2200      	movs	r2, #0
 8105416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105418:	687b      	ldr	r3, [r7, #4]
 810541a:	2200      	movs	r2, #0
 810541c:	609a      	str	r2, [r3, #8]
}
 810541e:	bf00      	nop
 8105420:	3724      	adds	r7, #36	; 0x24
 8105422:	46bd      	mov	sp, r7
 8105424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105428:	4770      	bx	lr
 810542a:	bf00      	nop
 810542c:	58024400 	.word	0x58024400
 8105430:	03d09000 	.word	0x03d09000
 8105434:	46000000 	.word	0x46000000
 8105438:	4c742400 	.word	0x4c742400
 810543c:	4a742400 	.word	0x4a742400
 8105440:	4bbebc20 	.word	0x4bbebc20

08105444 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105444:	b480      	push	{r7}
 8105446:	b089      	sub	sp, #36	; 0x24
 8105448:	af00      	add	r7, sp, #0
 810544a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810544c:	4ba1      	ldr	r3, [pc, #644]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810544e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105450:	f003 0303 	and.w	r3, r3, #3
 8105454:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8105456:	4b9f      	ldr	r3, [pc, #636]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810545a:	0d1b      	lsrs	r3, r3, #20
 810545c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105460:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8105462:	4b9c      	ldr	r3, [pc, #624]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105466:	0a1b      	lsrs	r3, r3, #8
 8105468:	f003 0301 	and.w	r3, r3, #1
 810546c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 810546e:	4b99      	ldr	r3, [pc, #612]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105472:	08db      	lsrs	r3, r3, #3
 8105474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105478:	693a      	ldr	r2, [r7, #16]
 810547a:	fb02 f303 	mul.w	r3, r2, r3
 810547e:	ee07 3a90 	vmov	s15, r3
 8105482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105486:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810548a:	697b      	ldr	r3, [r7, #20]
 810548c:	2b00      	cmp	r3, #0
 810548e:	f000 8111 	beq.w	81056b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8105492:	69bb      	ldr	r3, [r7, #24]
 8105494:	2b02      	cmp	r3, #2
 8105496:	f000 8083 	beq.w	81055a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810549a:	69bb      	ldr	r3, [r7, #24]
 810549c:	2b02      	cmp	r3, #2
 810549e:	f200 80a1 	bhi.w	81055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81054a2:	69bb      	ldr	r3, [r7, #24]
 81054a4:	2b00      	cmp	r3, #0
 81054a6:	d003      	beq.n	81054b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81054a8:	69bb      	ldr	r3, [r7, #24]
 81054aa:	2b01      	cmp	r3, #1
 81054ac:	d056      	beq.n	810555c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81054ae:	e099      	b.n	81055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81054b0:	4b88      	ldr	r3, [pc, #544]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054b2:	681b      	ldr	r3, [r3, #0]
 81054b4:	f003 0320 	and.w	r3, r3, #32
 81054b8:	2b00      	cmp	r3, #0
 81054ba:	d02d      	beq.n	8105518 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054bc:	4b85      	ldr	r3, [pc, #532]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	08db      	lsrs	r3, r3, #3
 81054c2:	f003 0303 	and.w	r3, r3, #3
 81054c6:	4a84      	ldr	r2, [pc, #528]	; (81056d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81054c8:	fa22 f303 	lsr.w	r3, r2, r3
 81054cc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81054ce:	68bb      	ldr	r3, [r7, #8]
 81054d0:	ee07 3a90 	vmov	s15, r3
 81054d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054d8:	697b      	ldr	r3, [r7, #20]
 81054da:	ee07 3a90 	vmov	s15, r3
 81054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81054e6:	4b7b      	ldr	r3, [pc, #492]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81054ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81054ee:	ee07 3a90 	vmov	s15, r3
 81054f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81054f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81054fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 81056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81054fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810550a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810550e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105516:	e087      	b.n	8105628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105518:	697b      	ldr	r3, [r7, #20]
 810551a:	ee07 3a90 	vmov	s15, r3
 810551e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105522:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81056e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810552a:	4b6a      	ldr	r3, [pc, #424]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810552e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105532:	ee07 3a90 	vmov	s15, r3
 8105536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810553a:	ed97 6a03 	vldr	s12, [r7, #12]
 810553e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810554a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810554e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810555a:	e065      	b.n	8105628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810555c:	697b      	ldr	r3, [r7, #20]
 810555e:	ee07 3a90 	vmov	s15, r3
 8105562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105566:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810556a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810556e:	4b59      	ldr	r3, [pc, #356]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105576:	ee07 3a90 	vmov	s15, r3
 810557a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810557e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105582:	eddf 5a56 	vldr	s11, [pc, #344]	; 81056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810558a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810558e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105596:	ee67 7a27 	vmul.f32	s15, s14, s15
 810559a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810559e:	e043      	b.n	8105628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81055a0:	697b      	ldr	r3, [r7, #20]
 81055a2:	ee07 3a90 	vmov	s15, r3
 81055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81056e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81055ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055b2:	4b48      	ldr	r3, [pc, #288]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055ba:	ee07 3a90 	vmov	s15, r3
 81055be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81055c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055e2:	e021      	b.n	8105628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81055e4:	697b      	ldr	r3, [r7, #20]
 81055e6:	ee07 3a90 	vmov	s15, r3
 81055ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81056e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81055f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055f6:	4b37      	ldr	r3, [pc, #220]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055fe:	ee07 3a90 	vmov	s15, r3
 8105602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105606:	ed97 6a03 	vldr	s12, [r7, #12]
 810560a:	eddf 5a34 	vldr	s11, [pc, #208]	; 81056dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810560e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810561a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810561e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105626:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105628:	4b2a      	ldr	r3, [pc, #168]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810562a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810562c:	0a5b      	lsrs	r3, r3, #9
 810562e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105632:	ee07 3a90 	vmov	s15, r3
 8105636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810563a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810563e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105642:	edd7 6a07 	vldr	s13, [r7, #28]
 8105646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810564a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810564e:	ee17 2a90 	vmov	r2, s15
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105656:	4b1f      	ldr	r3, [pc, #124]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810565a:	0c1b      	lsrs	r3, r3, #16
 810565c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105660:	ee07 3a90 	vmov	s15, r3
 8105664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810566c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105670:	edd7 6a07 	vldr	s13, [r7, #28]
 8105674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810567c:	ee17 2a90 	vmov	r2, s15
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105684:	4b13      	ldr	r3, [pc, #76]	; (81056d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105688:	0e1b      	lsrs	r3, r3, #24
 810568a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810568e:	ee07 3a90 	vmov	s15, r3
 8105692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810569a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810569e:	edd7 6a07 	vldr	s13, [r7, #28]
 81056a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056aa:	ee17 2a90 	vmov	r2, s15
 81056ae:	687b      	ldr	r3, [r7, #4]
 81056b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81056b2:	e008      	b.n	81056c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	2200      	movs	r2, #0
 81056b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	2200      	movs	r2, #0
 81056be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81056c0:	687b      	ldr	r3, [r7, #4]
 81056c2:	2200      	movs	r2, #0
 81056c4:	609a      	str	r2, [r3, #8]
}
 81056c6:	bf00      	nop
 81056c8:	3724      	adds	r7, #36	; 0x24
 81056ca:	46bd      	mov	sp, r7
 81056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056d0:	4770      	bx	lr
 81056d2:	bf00      	nop
 81056d4:	58024400 	.word	0x58024400
 81056d8:	03d09000 	.word	0x03d09000
 81056dc:	46000000 	.word	0x46000000
 81056e0:	4c742400 	.word	0x4c742400
 81056e4:	4a742400 	.word	0x4a742400
 81056e8:	4bbebc20 	.word	0x4bbebc20

081056ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81056ec:	b480      	push	{r7}
 81056ee:	b089      	sub	sp, #36	; 0x24
 81056f0:	af00      	add	r7, sp, #0
 81056f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81056f4:	4ba0      	ldr	r3, [pc, #640]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056f8:	f003 0303 	and.w	r3, r3, #3
 81056fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 81056fe:	4b9e      	ldr	r3, [pc, #632]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105702:	091b      	lsrs	r3, r3, #4
 8105704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105708:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 810570a:	4b9b      	ldr	r3, [pc, #620]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810570e:	f003 0301 	and.w	r3, r3, #1
 8105712:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105714:	4b98      	ldr	r3, [pc, #608]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105718:	08db      	lsrs	r3, r3, #3
 810571a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810571e:	693a      	ldr	r2, [r7, #16]
 8105720:	fb02 f303 	mul.w	r3, r2, r3
 8105724:	ee07 3a90 	vmov	s15, r3
 8105728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810572c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105730:	697b      	ldr	r3, [r7, #20]
 8105732:	2b00      	cmp	r3, #0
 8105734:	f000 8111 	beq.w	810595a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105738:	69bb      	ldr	r3, [r7, #24]
 810573a:	2b02      	cmp	r3, #2
 810573c:	f000 8083 	beq.w	8105846 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105740:	69bb      	ldr	r3, [r7, #24]
 8105742:	2b02      	cmp	r3, #2
 8105744:	f200 80a1 	bhi.w	810588a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105748:	69bb      	ldr	r3, [r7, #24]
 810574a:	2b00      	cmp	r3, #0
 810574c:	d003      	beq.n	8105756 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 810574e:	69bb      	ldr	r3, [r7, #24]
 8105750:	2b01      	cmp	r3, #1
 8105752:	d056      	beq.n	8105802 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105754:	e099      	b.n	810588a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105756:	4b88      	ldr	r3, [pc, #544]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	f003 0320 	and.w	r3, r3, #32
 810575e:	2b00      	cmp	r3, #0
 8105760:	d02d      	beq.n	81057be <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105762:	4b85      	ldr	r3, [pc, #532]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105764:	681b      	ldr	r3, [r3, #0]
 8105766:	08db      	lsrs	r3, r3, #3
 8105768:	f003 0303 	and.w	r3, r3, #3
 810576c:	4a83      	ldr	r2, [pc, #524]	; (810597c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 810576e:	fa22 f303 	lsr.w	r3, r2, r3
 8105772:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105774:	68bb      	ldr	r3, [r7, #8]
 8105776:	ee07 3a90 	vmov	s15, r3
 810577a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810577e:	697b      	ldr	r3, [r7, #20]
 8105780:	ee07 3a90 	vmov	s15, r3
 8105784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810578c:	4b7a      	ldr	r3, [pc, #488]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105794:	ee07 3a90 	vmov	s15, r3
 8105798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810579c:	ed97 6a03 	vldr	s12, [r7, #12]
 81057a0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105980 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81057a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057b8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81057bc:	e087      	b.n	81058ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81057be:	697b      	ldr	r3, [r7, #20]
 81057c0:	ee07 3a90 	vmov	s15, r3
 81057c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057c8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105984 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81057cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057d0:	4b69      	ldr	r3, [pc, #420]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81057d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057d8:	ee07 3a90 	vmov	s15, r3
 81057dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057e0:	ed97 6a03 	vldr	s12, [r7, #12]
 81057e4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105980 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81057e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105800:	e065      	b.n	81058ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105802:	697b      	ldr	r3, [r7, #20]
 8105804:	ee07 3a90 	vmov	s15, r3
 8105808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810580c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105988 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105814:	4b58      	ldr	r3, [pc, #352]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810581c:	ee07 3a90 	vmov	s15, r3
 8105820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105824:	ed97 6a03 	vldr	s12, [r7, #12]
 8105828:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105980 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 810582c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105834:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810583c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105840:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105844:	e043      	b.n	81058ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105846:	697b      	ldr	r3, [r7, #20]
 8105848:	ee07 3a90 	vmov	s15, r3
 810584c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105850:	eddf 6a4e 	vldr	s13, [pc, #312]	; 810598c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105858:	4b47      	ldr	r3, [pc, #284]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810585c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105860:	ee07 3a90 	vmov	s15, r3
 8105864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105868:	ed97 6a03 	vldr	s12, [r7, #12]
 810586c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105980 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105878:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810587c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105884:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105888:	e021      	b.n	81058ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810588a:	697b      	ldr	r3, [r7, #20]
 810588c:	ee07 3a90 	vmov	s15, r3
 8105890:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105894:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8105984 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105898:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810589c:	4b36      	ldr	r3, [pc, #216]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058a4:	ee07 3a90 	vmov	s15, r3
 81058a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058ac:	ed97 6a03 	vldr	s12, [r7, #12]
 81058b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105980 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81058b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81058cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81058ce:	4b2a      	ldr	r3, [pc, #168]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058d2:	0a5b      	lsrs	r3, r3, #9
 81058d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81058d8:	ee07 3a90 	vmov	s15, r3
 81058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81058e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81058e8:	edd7 6a07 	vldr	s13, [r7, #28]
 81058ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058f4:	ee17 2a90 	vmov	r2, s15
 81058f8:	687b      	ldr	r3, [r7, #4]
 81058fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81058fc:	4b1e      	ldr	r3, [pc, #120]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105900:	0c1b      	lsrs	r3, r3, #16
 8105902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105906:	ee07 3a90 	vmov	s15, r3
 810590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810590e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105912:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105916:	edd7 6a07 	vldr	s13, [r7, #28]
 810591a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810591e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105922:	ee17 2a90 	vmov	r2, s15
 8105926:	687b      	ldr	r3, [r7, #4]
 8105928:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810592a:	4b13      	ldr	r3, [pc, #76]	; (8105978 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810592e:	0e1b      	lsrs	r3, r3, #24
 8105930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105934:	ee07 3a90 	vmov	s15, r3
 8105938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810593c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105940:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105944:	edd7 6a07 	vldr	s13, [r7, #28]
 8105948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810594c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105950:	ee17 2a90 	vmov	r2, s15
 8105954:	687b      	ldr	r3, [r7, #4]
 8105956:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105958:	e008      	b.n	810596c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	2200      	movs	r2, #0
 810595e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	2200      	movs	r2, #0
 8105964:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105966:	687b      	ldr	r3, [r7, #4]
 8105968:	2200      	movs	r2, #0
 810596a:	609a      	str	r2, [r3, #8]
}
 810596c:	bf00      	nop
 810596e:	3724      	adds	r7, #36	; 0x24
 8105970:	46bd      	mov	sp, r7
 8105972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105976:	4770      	bx	lr
 8105978:	58024400 	.word	0x58024400
 810597c:	03d09000 	.word	0x03d09000
 8105980:	46000000 	.word	0x46000000
 8105984:	4c742400 	.word	0x4c742400
 8105988:	4a742400 	.word	0x4a742400
 810598c:	4bbebc20 	.word	0x4bbebc20

08105990 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105990:	b580      	push	{r7, lr}
 8105992:	b084      	sub	sp, #16
 8105994:	af00      	add	r7, sp, #0
 8105996:	6078      	str	r0, [r7, #4]
 8105998:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810599a:	2300      	movs	r3, #0
 810599c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810599e:	4b54      	ldr	r3, [pc, #336]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 81059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059a2:	f003 0303 	and.w	r3, r3, #3
 81059a6:	2b03      	cmp	r3, #3
 81059a8:	d101      	bne.n	81059ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81059aa:	2301      	movs	r3, #1
 81059ac:	e09b      	b.n	8105ae6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81059ae:	4b50      	ldr	r3, [pc, #320]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 81059b0:	681b      	ldr	r3, [r3, #0]
 81059b2:	4a4f      	ldr	r2, [pc, #316]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 81059b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81059b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81059ba:	f7fb fcc1 	bl	8101340 <HAL_GetTick>
 81059be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81059c0:	e008      	b.n	81059d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81059c2:	f7fb fcbd 	bl	8101340 <HAL_GetTick>
 81059c6:	4602      	mov	r2, r0
 81059c8:	68bb      	ldr	r3, [r7, #8]
 81059ca:	1ad3      	subs	r3, r2, r3
 81059cc:	2b02      	cmp	r3, #2
 81059ce:	d901      	bls.n	81059d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81059d0:	2303      	movs	r3, #3
 81059d2:	e088      	b.n	8105ae6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81059d4:	4b46      	ldr	r3, [pc, #280]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 81059d6:	681b      	ldr	r3, [r3, #0]
 81059d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81059dc:	2b00      	cmp	r3, #0
 81059de:	d1f0      	bne.n	81059c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81059e0:	4b43      	ldr	r3, [pc, #268]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 81059e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81059e8:	687b      	ldr	r3, [r7, #4]
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	031b      	lsls	r3, r3, #12
 81059ee:	4940      	ldr	r1, [pc, #256]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 81059f0:	4313      	orrs	r3, r2
 81059f2:	628b      	str	r3, [r1, #40]	; 0x28
 81059f4:	687b      	ldr	r3, [r7, #4]
 81059f6:	685b      	ldr	r3, [r3, #4]
 81059f8:	3b01      	subs	r3, #1
 81059fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81059fe:	687b      	ldr	r3, [r7, #4]
 8105a00:	689b      	ldr	r3, [r3, #8]
 8105a02:	3b01      	subs	r3, #1
 8105a04:	025b      	lsls	r3, r3, #9
 8105a06:	b29b      	uxth	r3, r3
 8105a08:	431a      	orrs	r2, r3
 8105a0a:	687b      	ldr	r3, [r7, #4]
 8105a0c:	68db      	ldr	r3, [r3, #12]
 8105a0e:	3b01      	subs	r3, #1
 8105a10:	041b      	lsls	r3, r3, #16
 8105a12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105a16:	431a      	orrs	r2, r3
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	691b      	ldr	r3, [r3, #16]
 8105a1c:	3b01      	subs	r3, #1
 8105a1e:	061b      	lsls	r3, r3, #24
 8105a20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105a24:	4932      	ldr	r1, [pc, #200]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a26:	4313      	orrs	r3, r2
 8105a28:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105a2a:	4b31      	ldr	r3, [pc, #196]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	695b      	ldr	r3, [r3, #20]
 8105a36:	492e      	ldr	r1, [pc, #184]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a38:	4313      	orrs	r3, r2
 8105a3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105a3c:	4b2c      	ldr	r3, [pc, #176]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a40:	f023 0220 	bic.w	r2, r3, #32
 8105a44:	687b      	ldr	r3, [r7, #4]
 8105a46:	699b      	ldr	r3, [r3, #24]
 8105a48:	4929      	ldr	r1, [pc, #164]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a4a:	4313      	orrs	r3, r2
 8105a4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105a4e:	4b28      	ldr	r3, [pc, #160]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a52:	4a27      	ldr	r2, [pc, #156]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a54:	f023 0310 	bic.w	r3, r3, #16
 8105a58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105a5a:	4b25      	ldr	r3, [pc, #148]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105a62:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105a66:	687a      	ldr	r2, [r7, #4]
 8105a68:	69d2      	ldr	r2, [r2, #28]
 8105a6a:	00d2      	lsls	r2, r2, #3
 8105a6c:	4920      	ldr	r1, [pc, #128]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a6e:	4313      	orrs	r3, r2
 8105a70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105a72:	4b1f      	ldr	r3, [pc, #124]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a76:	4a1e      	ldr	r2, [pc, #120]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a78:	f043 0310 	orr.w	r3, r3, #16
 8105a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105a7e:	683b      	ldr	r3, [r7, #0]
 8105a80:	2b00      	cmp	r3, #0
 8105a82:	d106      	bne.n	8105a92 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105a84:	4b1a      	ldr	r3, [pc, #104]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a88:	4a19      	ldr	r2, [pc, #100]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105a8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105a90:	e00f      	b.n	8105ab2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105a92:	683b      	ldr	r3, [r7, #0]
 8105a94:	2b01      	cmp	r3, #1
 8105a96:	d106      	bne.n	8105aa6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105a98:	4b15      	ldr	r3, [pc, #84]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a9c:	4a14      	ldr	r2, [pc, #80]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105aa4:	e005      	b.n	8105ab2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105aa6:	4b12      	ldr	r3, [pc, #72]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105aaa:	4a11      	ldr	r2, [pc, #68]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105aac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105ab0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105ab2:	4b0f      	ldr	r3, [pc, #60]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	4a0e      	ldr	r2, [pc, #56]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105ab8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105abe:	f7fb fc3f 	bl	8101340 <HAL_GetTick>
 8105ac2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105ac4:	e008      	b.n	8105ad8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105ac6:	f7fb fc3b 	bl	8101340 <HAL_GetTick>
 8105aca:	4602      	mov	r2, r0
 8105acc:	68bb      	ldr	r3, [r7, #8]
 8105ace:	1ad3      	subs	r3, r2, r3
 8105ad0:	2b02      	cmp	r3, #2
 8105ad2:	d901      	bls.n	8105ad8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105ad4:	2303      	movs	r3, #3
 8105ad6:	e006      	b.n	8105ae6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105ad8:	4b05      	ldr	r3, [pc, #20]	; (8105af0 <RCCEx_PLL2_Config+0x160>)
 8105ada:	681b      	ldr	r3, [r3, #0]
 8105adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105ae0:	2b00      	cmp	r3, #0
 8105ae2:	d0f0      	beq.n	8105ac6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8105ae6:	4618      	mov	r0, r3
 8105ae8:	3710      	adds	r7, #16
 8105aea:	46bd      	mov	sp, r7
 8105aec:	bd80      	pop	{r7, pc}
 8105aee:	bf00      	nop
 8105af0:	58024400 	.word	0x58024400

08105af4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105af4:	b580      	push	{r7, lr}
 8105af6:	b084      	sub	sp, #16
 8105af8:	af00      	add	r7, sp, #0
 8105afa:	6078      	str	r0, [r7, #4]
 8105afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105afe:	2300      	movs	r3, #0
 8105b00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105b02:	4b54      	ldr	r3, [pc, #336]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b06:	f003 0303 	and.w	r3, r3, #3
 8105b0a:	2b03      	cmp	r3, #3
 8105b0c:	d101      	bne.n	8105b12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105b0e:	2301      	movs	r3, #1
 8105b10:	e09b      	b.n	8105c4a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105b12:	4b50      	ldr	r3, [pc, #320]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	4a4f      	ldr	r2, [pc, #316]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105b1e:	f7fb fc0f 	bl	8101340 <HAL_GetTick>
 8105b22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105b24:	e008      	b.n	8105b38 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105b26:	f7fb fc0b 	bl	8101340 <HAL_GetTick>
 8105b2a:	4602      	mov	r2, r0
 8105b2c:	68bb      	ldr	r3, [r7, #8]
 8105b2e:	1ad3      	subs	r3, r2, r3
 8105b30:	2b02      	cmp	r3, #2
 8105b32:	d901      	bls.n	8105b38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105b34:	2303      	movs	r3, #3
 8105b36:	e088      	b.n	8105c4a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105b38:	4b46      	ldr	r3, [pc, #280]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b3a:	681b      	ldr	r3, [r3, #0]
 8105b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105b40:	2b00      	cmp	r3, #0
 8105b42:	d1f0      	bne.n	8105b26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105b44:	4b43      	ldr	r3, [pc, #268]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105b4c:	687b      	ldr	r3, [r7, #4]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	051b      	lsls	r3, r3, #20
 8105b52:	4940      	ldr	r1, [pc, #256]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b54:	4313      	orrs	r3, r2
 8105b56:	628b      	str	r3, [r1, #40]	; 0x28
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	685b      	ldr	r3, [r3, #4]
 8105b5c:	3b01      	subs	r3, #1
 8105b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105b62:	687b      	ldr	r3, [r7, #4]
 8105b64:	689b      	ldr	r3, [r3, #8]
 8105b66:	3b01      	subs	r3, #1
 8105b68:	025b      	lsls	r3, r3, #9
 8105b6a:	b29b      	uxth	r3, r3
 8105b6c:	431a      	orrs	r2, r3
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	68db      	ldr	r3, [r3, #12]
 8105b72:	3b01      	subs	r3, #1
 8105b74:	041b      	lsls	r3, r3, #16
 8105b76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105b7a:	431a      	orrs	r2, r3
 8105b7c:	687b      	ldr	r3, [r7, #4]
 8105b7e:	691b      	ldr	r3, [r3, #16]
 8105b80:	3b01      	subs	r3, #1
 8105b82:	061b      	lsls	r3, r3, #24
 8105b84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105b88:	4932      	ldr	r1, [pc, #200]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b8a:	4313      	orrs	r3, r2
 8105b8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105b8e:	4b31      	ldr	r3, [pc, #196]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	695b      	ldr	r3, [r3, #20]
 8105b9a:	492e      	ldr	r1, [pc, #184]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105b9c:	4313      	orrs	r3, r2
 8105b9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105ba0:	4b2c      	ldr	r3, [pc, #176]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ba4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	699b      	ldr	r3, [r3, #24]
 8105bac:	4929      	ldr	r1, [pc, #164]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bae:	4313      	orrs	r3, r2
 8105bb0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105bb2:	4b28      	ldr	r3, [pc, #160]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bb6:	4a27      	ldr	r2, [pc, #156]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105bbe:	4b25      	ldr	r3, [pc, #148]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105bc6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105bca:	687a      	ldr	r2, [r7, #4]
 8105bcc:	69d2      	ldr	r2, [r2, #28]
 8105bce:	00d2      	lsls	r2, r2, #3
 8105bd0:	4920      	ldr	r1, [pc, #128]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bd2:	4313      	orrs	r3, r2
 8105bd4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105bd6:	4b1f      	ldr	r3, [pc, #124]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bda:	4a1e      	ldr	r2, [pc, #120]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105be0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105be2:	683b      	ldr	r3, [r7, #0]
 8105be4:	2b00      	cmp	r3, #0
 8105be6:	d106      	bne.n	8105bf6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105be8:	4b1a      	ldr	r3, [pc, #104]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bec:	4a19      	ldr	r2, [pc, #100]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105bf2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105bf4:	e00f      	b.n	8105c16 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105bf6:	683b      	ldr	r3, [r7, #0]
 8105bf8:	2b01      	cmp	r3, #1
 8105bfa:	d106      	bne.n	8105c0a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105bfc:	4b15      	ldr	r3, [pc, #84]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c00:	4a14      	ldr	r2, [pc, #80]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105c02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105c06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105c08:	e005      	b.n	8105c16 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105c0a:	4b12      	ldr	r3, [pc, #72]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c0e:	4a11      	ldr	r2, [pc, #68]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105c10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105c14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105c16:	4b0f      	ldr	r3, [pc, #60]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105c18:	681b      	ldr	r3, [r3, #0]
 8105c1a:	4a0e      	ldr	r2, [pc, #56]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105c22:	f7fb fb8d 	bl	8101340 <HAL_GetTick>
 8105c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105c28:	e008      	b.n	8105c3c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105c2a:	f7fb fb89 	bl	8101340 <HAL_GetTick>
 8105c2e:	4602      	mov	r2, r0
 8105c30:	68bb      	ldr	r3, [r7, #8]
 8105c32:	1ad3      	subs	r3, r2, r3
 8105c34:	2b02      	cmp	r3, #2
 8105c36:	d901      	bls.n	8105c3c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105c38:	2303      	movs	r3, #3
 8105c3a:	e006      	b.n	8105c4a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105c3c:	4b05      	ldr	r3, [pc, #20]	; (8105c54 <RCCEx_PLL3_Config+0x160>)
 8105c3e:	681b      	ldr	r3, [r3, #0]
 8105c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105c44:	2b00      	cmp	r3, #0
 8105c46:	d0f0      	beq.n	8105c2a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c4a:	4618      	mov	r0, r3
 8105c4c:	3710      	adds	r7, #16
 8105c4e:	46bd      	mov	sp, r7
 8105c50:	bd80      	pop	{r7, pc}
 8105c52:	bf00      	nop
 8105c54:	58024400 	.word	0x58024400

08105c58 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105c58:	b580      	push	{r7, lr}
 8105c5a:	b084      	sub	sp, #16
 8105c5c:	af00      	add	r7, sp, #0
 8105c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105c60:	2301      	movs	r3, #1
 8105c62:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	2b00      	cmp	r3, #0
 8105c68:	d073      	beq.n	8105d52 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8105c70:	b2db      	uxtb	r3, r3
 8105c72:	2b00      	cmp	r3, #0
 8105c74:	d106      	bne.n	8105c84 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105c76:	687b      	ldr	r3, [r7, #4]
 8105c78:	2200      	movs	r2, #0
 8105c7a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105c7e:	6878      	ldr	r0, [r7, #4]
 8105c80:	f7fb f8ba 	bl	8100df8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105c84:	687b      	ldr	r3, [r7, #4]
 8105c86:	2202      	movs	r2, #2
 8105c88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	681b      	ldr	r3, [r3, #0]
 8105c90:	68db      	ldr	r3, [r3, #12]
 8105c92:	f003 0310 	and.w	r3, r3, #16
 8105c96:	2b10      	cmp	r3, #16
 8105c98:	d052      	beq.n	8105d40 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105c9a:	687b      	ldr	r3, [r7, #4]
 8105c9c:	681b      	ldr	r3, [r3, #0]
 8105c9e:	22ca      	movs	r2, #202	; 0xca
 8105ca0:	625a      	str	r2, [r3, #36]	; 0x24
 8105ca2:	687b      	ldr	r3, [r7, #4]
 8105ca4:	681b      	ldr	r3, [r3, #0]
 8105ca6:	2253      	movs	r2, #83	; 0x53
 8105ca8:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105caa:	6878      	ldr	r0, [r7, #4]
 8105cac:	f000 f87a 	bl	8105da4 <RTC_EnterInitMode>
 8105cb0:	4603      	mov	r3, r0
 8105cb2:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105cb4:	7bfb      	ldrb	r3, [r7, #15]
 8105cb6:	2b00      	cmp	r3, #0
 8105cb8:	d126      	bne.n	8105d08 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105cba:	687b      	ldr	r3, [r7, #4]
 8105cbc:	681b      	ldr	r3, [r3, #0]
 8105cbe:	689b      	ldr	r3, [r3, #8]
 8105cc0:	687a      	ldr	r2, [r7, #4]
 8105cc2:	6812      	ldr	r2, [r2, #0]
 8105cc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8105cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105ccc:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105cce:	687b      	ldr	r3, [r7, #4]
 8105cd0:	681b      	ldr	r3, [r3, #0]
 8105cd2:	6899      	ldr	r1, [r3, #8]
 8105cd4:	687b      	ldr	r3, [r7, #4]
 8105cd6:	685a      	ldr	r2, [r3, #4]
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	691b      	ldr	r3, [r3, #16]
 8105cdc:	431a      	orrs	r2, r3
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	699b      	ldr	r3, [r3, #24]
 8105ce2:	431a      	orrs	r2, r3
 8105ce4:	687b      	ldr	r3, [r7, #4]
 8105ce6:	681b      	ldr	r3, [r3, #0]
 8105ce8:	430a      	orrs	r2, r1
 8105cea:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	689b      	ldr	r3, [r3, #8]
 8105cf0:	0419      	lsls	r1, r3, #16
 8105cf2:	687b      	ldr	r3, [r7, #4]
 8105cf4:	68da      	ldr	r2, [r3, #12]
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	430a      	orrs	r2, r1
 8105cfc:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8105cfe:	6878      	ldr	r0, [r7, #4]
 8105d00:	f000 f884 	bl	8105e0c <RTC_ExitInitMode>
 8105d04:	4603      	mov	r3, r0
 8105d06:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8105d08:	7bfb      	ldrb	r3, [r7, #15]
 8105d0a:	2b00      	cmp	r3, #0
 8105d0c:	d113      	bne.n	8105d36 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	681b      	ldr	r3, [r3, #0]
 8105d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	681b      	ldr	r3, [r3, #0]
 8105d18:	f022 0203 	bic.w	r2, r2, #3
 8105d1c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	681b      	ldr	r3, [r3, #0]
 8105d22:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	69da      	ldr	r2, [r3, #28]
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	695b      	ldr	r3, [r3, #20]
 8105d2c:	431a      	orrs	r2, r3
 8105d2e:	687b      	ldr	r3, [r7, #4]
 8105d30:	681b      	ldr	r3, [r3, #0]
 8105d32:	430a      	orrs	r2, r1
 8105d34:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	681b      	ldr	r3, [r3, #0]
 8105d3a:	22ff      	movs	r2, #255	; 0xff
 8105d3c:	625a      	str	r2, [r3, #36]	; 0x24
 8105d3e:	e001      	b.n	8105d44 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105d40:	2300      	movs	r3, #0
 8105d42:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105d44:	7bfb      	ldrb	r3, [r7, #15]
 8105d46:	2b00      	cmp	r3, #0
 8105d48:	d103      	bne.n	8105d52 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105d4a:	687b      	ldr	r3, [r7, #4]
 8105d4c:	2201      	movs	r2, #1
 8105d4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8105d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8105d54:	4618      	mov	r0, r3
 8105d56:	3710      	adds	r7, #16
 8105d58:	46bd      	mov	sp, r7
 8105d5a:	bd80      	pop	{r7, pc}

08105d5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105d5c:	b580      	push	{r7, lr}
 8105d5e:	b084      	sub	sp, #16
 8105d60:	af00      	add	r7, sp, #0
 8105d62:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105d64:	687b      	ldr	r3, [r7, #4]
 8105d66:	681b      	ldr	r3, [r3, #0]
 8105d68:	4a0d      	ldr	r2, [pc, #52]	; (8105da0 <HAL_RTC_WaitForSynchro+0x44>)
 8105d6a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105d6c:	f7fb fae8 	bl	8101340 <HAL_GetTick>
 8105d70:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105d72:	e009      	b.n	8105d88 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105d74:	f7fb fae4 	bl	8101340 <HAL_GetTick>
 8105d78:	4602      	mov	r2, r0
 8105d7a:	68fb      	ldr	r3, [r7, #12]
 8105d7c:	1ad3      	subs	r3, r2, r3
 8105d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105d82:	d901      	bls.n	8105d88 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105d84:	2303      	movs	r3, #3
 8105d86:	e007      	b.n	8105d98 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105d88:	687b      	ldr	r3, [r7, #4]
 8105d8a:	681b      	ldr	r3, [r3, #0]
 8105d8c:	68db      	ldr	r3, [r3, #12]
 8105d8e:	f003 0320 	and.w	r3, r3, #32
 8105d92:	2b00      	cmp	r3, #0
 8105d94:	d0ee      	beq.n	8105d74 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8105d96:	2300      	movs	r3, #0
}
 8105d98:	4618      	mov	r0, r3
 8105d9a:	3710      	adds	r7, #16
 8105d9c:	46bd      	mov	sp, r7
 8105d9e:	bd80      	pop	{r7, pc}
 8105da0:	0003ff5f 	.word	0x0003ff5f

08105da4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105da4:	b580      	push	{r7, lr}
 8105da6:	b084      	sub	sp, #16
 8105da8:	af00      	add	r7, sp, #0
 8105daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105dac:	2300      	movs	r3, #0
 8105dae:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	68db      	ldr	r3, [r3, #12]
 8105db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	d120      	bne.n	8105e00 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105dbe:	687b      	ldr	r3, [r7, #4]
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8105dc6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105dc8:	f7fb faba 	bl	8101340 <HAL_GetTick>
 8105dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105dce:	e00d      	b.n	8105dec <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8105dd0:	f7fb fab6 	bl	8101340 <HAL_GetTick>
 8105dd4:	4602      	mov	r2, r0
 8105dd6:	68bb      	ldr	r3, [r7, #8]
 8105dd8:	1ad3      	subs	r3, r2, r3
 8105dda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105dde:	d905      	bls.n	8105dec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8105de0:	2303      	movs	r3, #3
 8105de2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105de4:	687b      	ldr	r3, [r7, #4]
 8105de6:	2203      	movs	r2, #3
 8105de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105dec:	687b      	ldr	r3, [r7, #4]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	68db      	ldr	r3, [r3, #12]
 8105df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105df6:	2b00      	cmp	r3, #0
 8105df8:	d102      	bne.n	8105e00 <RTC_EnterInitMode+0x5c>
 8105dfa:	7bfb      	ldrb	r3, [r7, #15]
 8105dfc:	2b03      	cmp	r3, #3
 8105dfe:	d1e7      	bne.n	8105dd0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8105e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8105e02:	4618      	mov	r0, r3
 8105e04:	3710      	adds	r7, #16
 8105e06:	46bd      	mov	sp, r7
 8105e08:	bd80      	pop	{r7, pc}
	...

08105e0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8105e0c:	b580      	push	{r7, lr}
 8105e0e:	b084      	sub	sp, #16
 8105e10:	af00      	add	r7, sp, #0
 8105e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105e14:	2300      	movs	r3, #0
 8105e16:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8105e18:	4b1a      	ldr	r3, [pc, #104]	; (8105e84 <RTC_ExitInitMode+0x78>)
 8105e1a:	68db      	ldr	r3, [r3, #12]
 8105e1c:	4a19      	ldr	r2, [pc, #100]	; (8105e84 <RTC_ExitInitMode+0x78>)
 8105e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105e22:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8105e24:	4b17      	ldr	r3, [pc, #92]	; (8105e84 <RTC_ExitInitMode+0x78>)
 8105e26:	689b      	ldr	r3, [r3, #8]
 8105e28:	f003 0320 	and.w	r3, r3, #32
 8105e2c:	2b00      	cmp	r3, #0
 8105e2e:	d10c      	bne.n	8105e4a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105e30:	6878      	ldr	r0, [r7, #4]
 8105e32:	f7ff ff93 	bl	8105d5c <HAL_RTC_WaitForSynchro>
 8105e36:	4603      	mov	r3, r0
 8105e38:	2b00      	cmp	r3, #0
 8105e3a:	d01e      	beq.n	8105e7a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105e3c:	687b      	ldr	r3, [r7, #4]
 8105e3e:	2203      	movs	r2, #3
 8105e40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8105e44:	2303      	movs	r3, #3
 8105e46:	73fb      	strb	r3, [r7, #15]
 8105e48:	e017      	b.n	8105e7a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105e4a:	4b0e      	ldr	r3, [pc, #56]	; (8105e84 <RTC_ExitInitMode+0x78>)
 8105e4c:	689b      	ldr	r3, [r3, #8]
 8105e4e:	4a0d      	ldr	r2, [pc, #52]	; (8105e84 <RTC_ExitInitMode+0x78>)
 8105e50:	f023 0320 	bic.w	r3, r3, #32
 8105e54:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105e56:	6878      	ldr	r0, [r7, #4]
 8105e58:	f7ff ff80 	bl	8105d5c <HAL_RTC_WaitForSynchro>
 8105e5c:	4603      	mov	r3, r0
 8105e5e:	2b00      	cmp	r3, #0
 8105e60:	d005      	beq.n	8105e6e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105e62:	687b      	ldr	r3, [r7, #4]
 8105e64:	2203      	movs	r2, #3
 8105e66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8105e6a:	2303      	movs	r3, #3
 8105e6c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105e6e:	4b05      	ldr	r3, [pc, #20]	; (8105e84 <RTC_ExitInitMode+0x78>)
 8105e70:	689b      	ldr	r3, [r3, #8]
 8105e72:	4a04      	ldr	r2, [pc, #16]	; (8105e84 <RTC_ExitInitMode+0x78>)
 8105e74:	f043 0320 	orr.w	r3, r3, #32
 8105e78:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8105e7c:	4618      	mov	r0, r3
 8105e7e:	3710      	adds	r7, #16
 8105e80:	46bd      	mov	sp, r7
 8105e82:	bd80      	pop	{r7, pc}
 8105e84:	58004000 	.word	0x58004000

08105e88 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8105e88:	b480      	push	{r7}
 8105e8a:	b085      	sub	sp, #20
 8105e8c:	af00      	add	r7, sp, #0
 8105e8e:	6078      	str	r0, [r7, #4]
 8105e90:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105e92:	687b      	ldr	r3, [r7, #4]
 8105e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105e98:	2b01      	cmp	r3, #1
 8105e9a:	d101      	bne.n	8105ea0 <HAL_RTCEx_SetTamper+0x18>
 8105e9c:	2302      	movs	r3, #2
 8105e9e:	e0cc      	b.n	810603a <HAL_RTCEx_SetTamper+0x1b2>
 8105ea0:	687b      	ldr	r3, [r7, #4]
 8105ea2:	2201      	movs	r2, #1
 8105ea4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105ea8:	687b      	ldr	r3, [r7, #4]
 8105eaa:	2202      	movs	r2, #2
 8105eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105eb0:	687b      	ldr	r3, [r7, #4]
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105eb6:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105eb8:	683b      	ldr	r3, [r7, #0]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	68fa      	ldr	r2, [r7, #12]
 8105ebe:	4313      	orrs	r3, r2
 8105ec0:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105ec2:	683b      	ldr	r3, [r7, #0]
 8105ec4:	689b      	ldr	r3, [r3, #8]
 8105ec6:	2b08      	cmp	r3, #8
 8105ec8:	d003      	beq.n	8105ed2 <HAL_RTCEx_SetTamper+0x4a>
 8105eca:	683b      	ldr	r3, [r7, #0]
 8105ecc:	689b      	ldr	r3, [r3, #8]
 8105ece:	2b02      	cmp	r3, #2
 8105ed0:	d106      	bne.n	8105ee0 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105ed2:	683b      	ldr	r3, [r7, #0]
 8105ed4:	681b      	ldr	r3, [r3, #0]
 8105ed6:	005b      	lsls	r3, r3, #1
 8105ed8:	68fa      	ldr	r2, [r7, #12]
 8105eda:	4313      	orrs	r3, r2
 8105edc:	60fb      	str	r3, [r7, #12]
 8105ede:	e006      	b.n	8105eee <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105ee0:	683b      	ldr	r3, [r7, #0]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	005b      	lsls	r3, r3, #1
 8105ee6:	43db      	mvns	r3, r3
 8105ee8:	68fa      	ldr	r2, [r7, #12]
 8105eea:	4013      	ands	r3, r2
 8105eec:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105eee:	683b      	ldr	r3, [r7, #0]
 8105ef0:	68db      	ldr	r3, [r3, #12]
 8105ef2:	2b00      	cmp	r3, #0
 8105ef4:	d01e      	beq.n	8105f34 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105ef6:	683b      	ldr	r3, [r7, #0]
 8105ef8:	681b      	ldr	r3, [r3, #0]
 8105efa:	f003 0301 	and.w	r3, r3, #1
 8105efe:	2b00      	cmp	r3, #0
 8105f00:	d003      	beq.n	8105f0a <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105f02:	68fb      	ldr	r3, [r7, #12]
 8105f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f08:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105f0a:	683b      	ldr	r3, [r7, #0]
 8105f0c:	681b      	ldr	r3, [r3, #0]
 8105f0e:	f003 0308 	and.w	r3, r3, #8
 8105f12:	2b00      	cmp	r3, #0
 8105f14:	d003      	beq.n	8105f1e <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105f16:	68fb      	ldr	r3, [r7, #12]
 8105f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105f1c:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105f1e:	683b      	ldr	r3, [r7, #0]
 8105f20:	681b      	ldr	r3, [r3, #0]
 8105f22:	f003 0320 	and.w	r3, r3, #32
 8105f26:	2b00      	cmp	r3, #0
 8105f28:	d022      	beq.n	8105f70 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105f2a:	68fb      	ldr	r3, [r7, #12]
 8105f2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105f30:	60fb      	str	r3, [r7, #12]
 8105f32:	e01d      	b.n	8105f70 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105f34:	683b      	ldr	r3, [r7, #0]
 8105f36:	681b      	ldr	r3, [r3, #0]
 8105f38:	f003 0301 	and.w	r3, r3, #1
 8105f3c:	2b00      	cmp	r3, #0
 8105f3e:	d003      	beq.n	8105f48 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105f40:	68fb      	ldr	r3, [r7, #12]
 8105f42:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8105f46:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105f48:	683b      	ldr	r3, [r7, #0]
 8105f4a:	681b      	ldr	r3, [r3, #0]
 8105f4c:	f003 0308 	and.w	r3, r3, #8
 8105f50:	2b00      	cmp	r3, #0
 8105f52:	d003      	beq.n	8105f5c <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105f54:	68fb      	ldr	r3, [r7, #12]
 8105f56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8105f5a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105f5c:	683b      	ldr	r3, [r7, #0]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	f003 0320 	and.w	r3, r3, #32
 8105f64:	2b00      	cmp	r3, #0
 8105f66:	d003      	beq.n	8105f70 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105f68:	68fb      	ldr	r3, [r7, #12]
 8105f6a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8105f6e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105f70:	683b      	ldr	r3, [r7, #0]
 8105f72:	691b      	ldr	r3, [r3, #16]
 8105f74:	2b00      	cmp	r3, #0
 8105f76:	d01e      	beq.n	8105fb6 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105f78:	683b      	ldr	r3, [r7, #0]
 8105f7a:	681b      	ldr	r3, [r3, #0]
 8105f7c:	f003 0301 	and.w	r3, r3, #1
 8105f80:	2b00      	cmp	r3, #0
 8105f82:	d003      	beq.n	8105f8c <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105f84:	68fb      	ldr	r3, [r7, #12]
 8105f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8105f8a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105f8c:	683b      	ldr	r3, [r7, #0]
 8105f8e:	681b      	ldr	r3, [r3, #0]
 8105f90:	f003 0308 	and.w	r3, r3, #8
 8105f94:	2b00      	cmp	r3, #0
 8105f96:	d003      	beq.n	8105fa0 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105f98:	68fb      	ldr	r3, [r7, #12]
 8105f9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105f9e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105fa0:	683b      	ldr	r3, [r7, #0]
 8105fa2:	681b      	ldr	r3, [r3, #0]
 8105fa4:	f003 0320 	and.w	r3, r3, #32
 8105fa8:	2b00      	cmp	r3, #0
 8105faa:	d022      	beq.n	8105ff2 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105fac:	68fb      	ldr	r3, [r7, #12]
 8105fae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105fb2:	60fb      	str	r3, [r7, #12]
 8105fb4:	e01d      	b.n	8105ff2 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105fb6:	683b      	ldr	r3, [r7, #0]
 8105fb8:	681b      	ldr	r3, [r3, #0]
 8105fba:	f003 0301 	and.w	r3, r3, #1
 8105fbe:	2b00      	cmp	r3, #0
 8105fc0:	d003      	beq.n	8105fca <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105fc2:	68fb      	ldr	r3, [r7, #12]
 8105fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8105fc8:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105fca:	683b      	ldr	r3, [r7, #0]
 8105fcc:	681b      	ldr	r3, [r3, #0]
 8105fce:	f003 0308 	and.w	r3, r3, #8
 8105fd2:	2b00      	cmp	r3, #0
 8105fd4:	d003      	beq.n	8105fde <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105fd6:	68fb      	ldr	r3, [r7, #12]
 8105fd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8105fdc:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105fde:	683b      	ldr	r3, [r7, #0]
 8105fe0:	681b      	ldr	r3, [r3, #0]
 8105fe2:	f003 0320 	and.w	r3, r3, #32
 8105fe6:	2b00      	cmp	r3, #0
 8105fe8:	d003      	beq.n	8105ff2 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8105fea:	68fb      	ldr	r3, [r7, #12]
 8105fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8105ff0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 8105ff2:	68fb      	ldr	r3, [r7, #12]
 8105ff4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105ffc:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8105ffe:	683b      	ldr	r3, [r7, #0]
 8106000:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 8106002:	683b      	ldr	r3, [r7, #0]
 8106004:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8106006:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8106008:	683b      	ldr	r3, [r7, #0]
 810600a:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 810600c:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 810600e:	683b      	ldr	r3, [r7, #0]
 8106010:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 8106012:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8106014:	683b      	ldr	r3, [r7, #0]
 8106016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8106018:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810601a:	68fa      	ldr	r2, [r7, #12]
 810601c:	4313      	orrs	r3, r2
 810601e:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8106020:	687b      	ldr	r3, [r7, #4]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	68fa      	ldr	r2, [r7, #12]
 8106026:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	2201      	movs	r2, #1
 810602c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8106030:	687b      	ldr	r3, [r7, #4]
 8106032:	2200      	movs	r2, #0
 8106034:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8106038:	2300      	movs	r3, #0
}
 810603a:	4618      	mov	r0, r3
 810603c:	3714      	adds	r7, #20
 810603e:	46bd      	mov	sp, r7
 8106040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106044:	4770      	bx	lr
	...

08106048 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8106048:	b580      	push	{r7, lr}
 810604a:	b08a      	sub	sp, #40	; 0x28
 810604c:	af00      	add	r7, sp, #0
 810604e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	2b00      	cmp	r3, #0
 8106054:	d101      	bne.n	810605a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8106056:	2301      	movs	r3, #1
 8106058:	e290      	b.n	810657c <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810605a:	f7fb f97d 	bl	8101358 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8106064:	2b01      	cmp	r3, #1
 8106066:	d113      	bne.n	8106090 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8106068:	687b      	ldr	r3, [r7, #4]
 810606a:	681b      	ldr	r3, [r3, #0]
 810606c:	4a96      	ldr	r2, [pc, #600]	; (81062c8 <HAL_SAI_Init+0x280>)
 810606e:	4293      	cmp	r3, r2
 8106070:	d004      	beq.n	810607c <HAL_SAI_Init+0x34>
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	4a95      	ldr	r2, [pc, #596]	; (81062cc <HAL_SAI_Init+0x284>)
 8106078:	4293      	cmp	r3, r2
 810607a:	d107      	bne.n	810608c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810607c:	687b      	ldr	r3, [r7, #4]
 810607e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8106080:	2b01      	cmp	r3, #1
 8106082:	d103      	bne.n	810608c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8106088:	2b00      	cmp	r3, #0
 810608a:	d001      	beq.n	8106090 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 810608c:	2301      	movs	r3, #1
 810608e:	e275      	b.n	810657c <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	4a8c      	ldr	r2, [pc, #560]	; (81062c8 <HAL_SAI_Init+0x280>)
 8106096:	4293      	cmp	r3, r2
 8106098:	d004      	beq.n	81060a4 <HAL_SAI_Init+0x5c>
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	681b      	ldr	r3, [r3, #0]
 810609e:	4a8c      	ldr	r2, [pc, #560]	; (81062d0 <HAL_SAI_Init+0x288>)
 81060a0:	4293      	cmp	r3, r2
 81060a2:	d102      	bne.n	81060aa <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 81060a4:	4b8b      	ldr	r3, [pc, #556]	; (81062d4 <HAL_SAI_Init+0x28c>)
 81060a6:	61bb      	str	r3, [r7, #24]
 81060a8:	e028      	b.n	81060fc <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	681b      	ldr	r3, [r3, #0]
 81060ae:	4a8a      	ldr	r2, [pc, #552]	; (81062d8 <HAL_SAI_Init+0x290>)
 81060b0:	4293      	cmp	r3, r2
 81060b2:	d004      	beq.n	81060be <HAL_SAI_Init+0x76>
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	681b      	ldr	r3, [r3, #0]
 81060b8:	4a88      	ldr	r2, [pc, #544]	; (81062dc <HAL_SAI_Init+0x294>)
 81060ba:	4293      	cmp	r3, r2
 81060bc:	d102      	bne.n	81060c4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 81060be:	4b88      	ldr	r3, [pc, #544]	; (81062e0 <HAL_SAI_Init+0x298>)
 81060c0:	61bb      	str	r3, [r7, #24]
 81060c2:	e01b      	b.n	81060fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81060c4:	687b      	ldr	r3, [r7, #4]
 81060c6:	681b      	ldr	r3, [r3, #0]
 81060c8:	4a86      	ldr	r2, [pc, #536]	; (81062e4 <HAL_SAI_Init+0x29c>)
 81060ca:	4293      	cmp	r3, r2
 81060cc:	d004      	beq.n	81060d8 <HAL_SAI_Init+0x90>
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	681b      	ldr	r3, [r3, #0]
 81060d2:	4a85      	ldr	r2, [pc, #532]	; (81062e8 <HAL_SAI_Init+0x2a0>)
 81060d4:	4293      	cmp	r3, r2
 81060d6:	d102      	bne.n	81060de <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 81060d8:	4b84      	ldr	r3, [pc, #528]	; (81062ec <HAL_SAI_Init+0x2a4>)
 81060da:	61bb      	str	r3, [r7, #24]
 81060dc:	e00e      	b.n	81060fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	681b      	ldr	r3, [r3, #0]
 81060e2:	4a7a      	ldr	r2, [pc, #488]	; (81062cc <HAL_SAI_Init+0x284>)
 81060e4:	4293      	cmp	r3, r2
 81060e6:	d004      	beq.n	81060f2 <HAL_SAI_Init+0xaa>
 81060e8:	687b      	ldr	r3, [r7, #4]
 81060ea:	681b      	ldr	r3, [r3, #0]
 81060ec:	4a80      	ldr	r2, [pc, #512]	; (81062f0 <HAL_SAI_Init+0x2a8>)
 81060ee:	4293      	cmp	r3, r2
 81060f0:	d102      	bne.n	81060f8 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 81060f2:	4b80      	ldr	r3, [pc, #512]	; (81062f4 <HAL_SAI_Init+0x2ac>)
 81060f4:	61bb      	str	r3, [r7, #24]
 81060f6:	e001      	b.n	81060fc <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 81060f8:	2301      	movs	r3, #1
 81060fa:	e23f      	b.n	810657c <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 81060fc:	687b      	ldr	r3, [r7, #4]
 81060fe:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8106102:	b2db      	uxtb	r3, r3
 8106104:	2b00      	cmp	r3, #0
 8106106:	d106      	bne.n	8106116 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	2200      	movs	r2, #0
 810610c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8106110:	6878      	ldr	r0, [r7, #4]
 8106112:	f7fa ff91 	bl	8101038 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8106116:	6878      	ldr	r0, [r7, #4]
 8106118:	f000 fa40 	bl	810659c <SAI_Disable>
 810611c:	4603      	mov	r3, r0
 810611e:	2b00      	cmp	r3, #0
 8106120:	d001      	beq.n	8106126 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8106122:	2301      	movs	r3, #1
 8106124:	e22a      	b.n	810657c <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	2202      	movs	r2, #2
 810612a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	68db      	ldr	r3, [r3, #12]
 8106132:	2b02      	cmp	r3, #2
 8106134:	d00c      	beq.n	8106150 <HAL_SAI_Init+0x108>
 8106136:	2b02      	cmp	r3, #2
 8106138:	d80d      	bhi.n	8106156 <HAL_SAI_Init+0x10e>
 810613a:	2b00      	cmp	r3, #0
 810613c:	d002      	beq.n	8106144 <HAL_SAI_Init+0xfc>
 810613e:	2b01      	cmp	r3, #1
 8106140:	d003      	beq.n	810614a <HAL_SAI_Init+0x102>
 8106142:	e008      	b.n	8106156 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8106144:	2300      	movs	r3, #0
 8106146:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106148:	e008      	b.n	810615c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 810614a:	2310      	movs	r3, #16
 810614c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810614e:	e005      	b.n	810615c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8106150:	2320      	movs	r3, #32
 8106152:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106154:	e002      	b.n	810615c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 8106156:	2300      	movs	r3, #0
 8106158:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810615a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	689b      	ldr	r3, [r3, #8]
 8106160:	2b05      	cmp	r3, #5
 8106162:	d832      	bhi.n	81061ca <HAL_SAI_Init+0x182>
 8106164:	a201      	add	r2, pc, #4	; (adr r2, 810616c <HAL_SAI_Init+0x124>)
 8106166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810616a:	bf00      	nop
 810616c:	08106185 	.word	0x08106185
 8106170:	0810618b 	.word	0x0810618b
 8106174:	08106193 	.word	0x08106193
 8106178:	0810619b 	.word	0x0810619b
 810617c:	081061ab 	.word	0x081061ab
 8106180:	081061bb 	.word	0x081061bb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8106184:	2300      	movs	r3, #0
 8106186:	61fb      	str	r3, [r7, #28]
      break;
 8106188:	e022      	b.n	81061d0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 810618a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810618e:	61fb      	str	r3, [r7, #28]
      break;
 8106190:	e01e      	b.n	81061d0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106192:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8106196:	61fb      	str	r3, [r7, #28]
      break;
 8106198:	e01a      	b.n	81061d0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810619a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810619e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 81061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061a2:	f043 0301 	orr.w	r3, r3, #1
 81061a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81061a8:	e012      	b.n	81061d0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81061aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81061ae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 81061b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061b2:	f043 0302 	orr.w	r3, r3, #2
 81061b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81061b8:	e00a      	b.n	81061d0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81061ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81061be:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 81061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061c2:	f043 0303 	orr.w	r3, r3, #3
 81061c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81061c8:	e002      	b.n	81061d0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 81061ca:	2300      	movs	r3, #0
 81061cc:	61fb      	str	r3, [r7, #28]
      break;
 81061ce:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 81061d0:	69bb      	ldr	r3, [r7, #24]
 81061d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81061d4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	6a1b      	ldr	r3, [r3, #32]
 81061da:	2b00      	cmp	r3, #0
 81061dc:	f000 80c5 	beq.w	810636a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 81061e0:	2300      	movs	r3, #0
 81061e2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81061e4:	687b      	ldr	r3, [r7, #4]
 81061e6:	681b      	ldr	r3, [r3, #0]
 81061e8:	4a37      	ldr	r2, [pc, #220]	; (81062c8 <HAL_SAI_Init+0x280>)
 81061ea:	4293      	cmp	r3, r2
 81061ec:	d004      	beq.n	81061f8 <HAL_SAI_Init+0x1b0>
 81061ee:	687b      	ldr	r3, [r7, #4]
 81061f0:	681b      	ldr	r3, [r3, #0]
 81061f2:	4a37      	ldr	r2, [pc, #220]	; (81062d0 <HAL_SAI_Init+0x288>)
 81061f4:	4293      	cmp	r3, r2
 81061f6:	d106      	bne.n	8106206 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 81061f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 81061fc:	f04f 0100 	mov.w	r1, #0
 8106200:	f7fe fa36 	bl	8104670 <HAL_RCCEx_GetPeriphCLKFreq>
 8106204:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8106206:	687b      	ldr	r3, [r7, #4]
 8106208:	681b      	ldr	r3, [r3, #0]
 810620a:	4a33      	ldr	r2, [pc, #204]	; (81062d8 <HAL_SAI_Init+0x290>)
 810620c:	4293      	cmp	r3, r2
 810620e:	d004      	beq.n	810621a <HAL_SAI_Init+0x1d2>
 8106210:	687b      	ldr	r3, [r7, #4]
 8106212:	681b      	ldr	r3, [r3, #0]
 8106214:	4a31      	ldr	r2, [pc, #196]	; (81062dc <HAL_SAI_Init+0x294>)
 8106216:	4293      	cmp	r3, r2
 8106218:	d106      	bne.n	8106228 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 810621a:	f44f 7000 	mov.w	r0, #512	; 0x200
 810621e:	f04f 0100 	mov.w	r1, #0
 8106222:	f7fe fa25 	bl	8104670 <HAL_RCCEx_GetPeriphCLKFreq>
 8106226:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	4a2d      	ldr	r2, [pc, #180]	; (81062e4 <HAL_SAI_Init+0x29c>)
 810622e:	4293      	cmp	r3, r2
 8106230:	d004      	beq.n	810623c <HAL_SAI_Init+0x1f4>
 8106232:	687b      	ldr	r3, [r7, #4]
 8106234:	681b      	ldr	r3, [r3, #0]
 8106236:	4a2c      	ldr	r2, [pc, #176]	; (81062e8 <HAL_SAI_Init+0x2a0>)
 8106238:	4293      	cmp	r3, r2
 810623a:	d106      	bne.n	810624a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 810623c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8106240:	f04f 0100 	mov.w	r1, #0
 8106244:	f7fe fa14 	bl	8104670 <HAL_RCCEx_GetPeriphCLKFreq>
 8106248:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 810624a:	687b      	ldr	r3, [r7, #4]
 810624c:	681b      	ldr	r3, [r3, #0]
 810624e:	4a1f      	ldr	r2, [pc, #124]	; (81062cc <HAL_SAI_Init+0x284>)
 8106250:	4293      	cmp	r3, r2
 8106252:	d106      	bne.n	8106262 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8106254:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8106258:	f04f 0100 	mov.w	r1, #0
 810625c:	f7fe fa08 	bl	8104670 <HAL_RCCEx_GetPeriphCLKFreq>
 8106260:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	681b      	ldr	r3, [r3, #0]
 8106266:	4a22      	ldr	r2, [pc, #136]	; (81062f0 <HAL_SAI_Init+0x2a8>)
 8106268:	4293      	cmp	r3, r2
 810626a:	d106      	bne.n	810627a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 810626c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8106270:	f04f 0100 	mov.w	r1, #0
 8106274:	f7fe f9fc 	bl	8104670 <HAL_RCCEx_GetPeriphCLKFreq>
 8106278:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 810627a:	687b      	ldr	r3, [r7, #4]
 810627c:	699b      	ldr	r3, [r3, #24]
 810627e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8106282:	d139      	bne.n	81062f8 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106288:	2b04      	cmp	r3, #4
 810628a:	d102      	bne.n	8106292 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 810628c:	2340      	movs	r3, #64	; 0x40
 810628e:	60fb      	str	r3, [r7, #12]
 8106290:	e00a      	b.n	81062a8 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8106292:	687b      	ldr	r3, [r7, #4]
 8106294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106296:	2b08      	cmp	r3, #8
 8106298:	d103      	bne.n	81062a2 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 810629a:	f44f 7380 	mov.w	r3, #256	; 0x100
 810629e:	60fb      	str	r3, [r7, #12]
 81062a0:	e002      	b.n	81062a8 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81062a6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 81062a8:	697a      	ldr	r2, [r7, #20]
 81062aa:	4613      	mov	r3, r2
 81062ac:	009b      	lsls	r3, r3, #2
 81062ae:	4413      	add	r3, r2
 81062b0:	005b      	lsls	r3, r3, #1
 81062b2:	4619      	mov	r1, r3
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	6a1b      	ldr	r3, [r3, #32]
 81062b8:	68fa      	ldr	r2, [r7, #12]
 81062ba:	fb02 f303 	mul.w	r3, r2, r3
 81062be:	fbb1 f3f3 	udiv	r3, r1, r3
 81062c2:	613b      	str	r3, [r7, #16]
 81062c4:	e030      	b.n	8106328 <HAL_SAI_Init+0x2e0>
 81062c6:	bf00      	nop
 81062c8:	40015804 	.word	0x40015804
 81062cc:	58005404 	.word	0x58005404
 81062d0:	40015824 	.word	0x40015824
 81062d4:	40015800 	.word	0x40015800
 81062d8:	40015c04 	.word	0x40015c04
 81062dc:	40015c24 	.word	0x40015c24
 81062e0:	40015c00 	.word	0x40015c00
 81062e4:	40016004 	.word	0x40016004
 81062e8:	40016024 	.word	0x40016024
 81062ec:	40016000 	.word	0x40016000
 81062f0:	58005424 	.word	0x58005424
 81062f4:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106300:	d101      	bne.n	8106306 <HAL_SAI_Init+0x2be>
 8106302:	2302      	movs	r3, #2
 8106304:	e000      	b.n	8106308 <HAL_SAI_Init+0x2c0>
 8106306:	2301      	movs	r3, #1
 8106308:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 810630a:	697a      	ldr	r2, [r7, #20]
 810630c:	4613      	mov	r3, r2
 810630e:	009b      	lsls	r3, r3, #2
 8106310:	4413      	add	r3, r2
 8106312:	005b      	lsls	r3, r3, #1
 8106314:	4619      	mov	r1, r3
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	6a1b      	ldr	r3, [r3, #32]
 810631a:	68ba      	ldr	r2, [r7, #8]
 810631c:	fb02 f303 	mul.w	r3, r2, r3
 8106320:	021b      	lsls	r3, r3, #8
 8106322:	fbb1 f3f3 	udiv	r3, r1, r3
 8106326:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8106328:	693b      	ldr	r3, [r7, #16]
 810632a:	4a96      	ldr	r2, [pc, #600]	; (8106584 <HAL_SAI_Init+0x53c>)
 810632c:	fba2 2303 	umull	r2, r3, r2, r3
 8106330:	08da      	lsrs	r2, r3, #3
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8106336:	6939      	ldr	r1, [r7, #16]
 8106338:	4b92      	ldr	r3, [pc, #584]	; (8106584 <HAL_SAI_Init+0x53c>)
 810633a:	fba3 2301 	umull	r2, r3, r3, r1
 810633e:	08da      	lsrs	r2, r3, #3
 8106340:	4613      	mov	r3, r2
 8106342:	009b      	lsls	r3, r3, #2
 8106344:	4413      	add	r3, r2
 8106346:	005b      	lsls	r3, r3, #1
 8106348:	1aca      	subs	r2, r1, r3
 810634a:	2a08      	cmp	r2, #8
 810634c:	d904      	bls.n	8106358 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106352:	1c5a      	adds	r2, r3, #1
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810635c:	2b04      	cmp	r3, #4
 810635e:	d104      	bne.n	810636a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106364:	085a      	lsrs	r2, r3, #1
 8106366:	687b      	ldr	r3, [r7, #4]
 8106368:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	685b      	ldr	r3, [r3, #4]
 810636e:	2b00      	cmp	r3, #0
 8106370:	d003      	beq.n	810637a <HAL_SAI_Init+0x332>
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	685b      	ldr	r3, [r3, #4]
 8106376:	2b02      	cmp	r3, #2
 8106378:	d109      	bne.n	810638e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810637e:	2b01      	cmp	r3, #1
 8106380:	d101      	bne.n	8106386 <HAL_SAI_Init+0x33e>
 8106382:	2300      	movs	r3, #0
 8106384:	e001      	b.n	810638a <HAL_SAI_Init+0x342>
 8106386:	f44f 7300 	mov.w	r3, #512	; 0x200
 810638a:	623b      	str	r3, [r7, #32]
 810638c:	e008      	b.n	81063a0 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8106392:	2b01      	cmp	r3, #1
 8106394:	d102      	bne.n	810639c <HAL_SAI_Init+0x354>
 8106396:	f44f 7300 	mov.w	r3, #512	; 0x200
 810639a:	e000      	b.n	810639e <HAL_SAI_Init+0x356>
 810639c:	2300      	movs	r3, #0
 810639e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81063a0:	f7fa ffda 	bl	8101358 <HAL_GetREVID>
 81063a4:	4603      	mov	r3, r0
 81063a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81063aa:	d331      	bcc.n	8106410 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	681b      	ldr	r3, [r3, #0]
 81063b0:	6819      	ldr	r1, [r3, #0]
 81063b2:	687b      	ldr	r3, [r7, #4]
 81063b4:	681a      	ldr	r2, [r3, #0]
 81063b6:	4b74      	ldr	r3, [pc, #464]	; (8106588 <HAL_SAI_Init+0x540>)
 81063b8:	400b      	ands	r3, r1
 81063ba:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	681b      	ldr	r3, [r3, #0]
 81063c0:	6819      	ldr	r1, [r3, #0]
 81063c2:	687b      	ldr	r3, [r7, #4]
 81063c4:	685a      	ldr	r2, [r3, #4]
 81063c6:	687b      	ldr	r3, [r7, #4]
 81063c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81063ca:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81063cc:	687b      	ldr	r3, [r7, #4]
 81063ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81063d0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81063d6:	431a      	orrs	r2, r3
 81063d8:	6a3b      	ldr	r3, [r7, #32]
 81063da:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 81063dc:	69fb      	ldr	r3, [r7, #28]
 81063de:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 81063e4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	695b      	ldr	r3, [r3, #20]
 81063ea:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81063ec:	687b      	ldr	r3, [r7, #4]
 81063ee:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81063f0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81063f6:	051b      	lsls	r3, r3, #20
 81063f8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81063fe:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	691b      	ldr	r3, [r3, #16]
 8106404:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	681b      	ldr	r3, [r3, #0]
 810640a:	430a      	orrs	r2, r1
 810640c:	601a      	str	r2, [r3, #0]
 810640e:	e02d      	b.n	810646c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	681b      	ldr	r3, [r3, #0]
 8106414:	6819      	ldr	r1, [r3, #0]
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	681a      	ldr	r2, [r3, #0]
 810641a:	4b5c      	ldr	r3, [pc, #368]	; (810658c <HAL_SAI_Init+0x544>)
 810641c:	400b      	ands	r3, r1
 810641e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	6819      	ldr	r1, [r3, #0]
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	685a      	ldr	r2, [r3, #4]
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810642e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106434:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810643a:	431a      	orrs	r2, r3
 810643c:	6a3b      	ldr	r3, [r7, #32]
 810643e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106440:	69fb      	ldr	r3, [r7, #28]
 8106442:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106444:	687b      	ldr	r3, [r7, #4]
 8106446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106448:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	695b      	ldr	r3, [r3, #20]
 810644e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106454:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810645a:	051b      	lsls	r3, r3, #20
 810645c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106462:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	430a      	orrs	r2, r1
 810646a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	685b      	ldr	r3, [r3, #4]
 8106472:	687a      	ldr	r2, [r7, #4]
 8106474:	6812      	ldr	r2, [r2, #0]
 8106476:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 810647a:	f023 030f 	bic.w	r3, r3, #15
 810647e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	681b      	ldr	r3, [r3, #0]
 8106484:	6859      	ldr	r1, [r3, #4]
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	69da      	ldr	r2, [r3, #28]
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810648e:	431a      	orrs	r2, r3
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8106494:	431a      	orrs	r2, r3
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	681b      	ldr	r3, [r3, #0]
 810649a:	430a      	orrs	r2, r1
 810649c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 810649e:	687b      	ldr	r3, [r7, #4]
 81064a0:	681b      	ldr	r3, [r3, #0]
 81064a2:	6899      	ldr	r1, [r3, #8]
 81064a4:	687b      	ldr	r3, [r7, #4]
 81064a6:	681a      	ldr	r2, [r3, #0]
 81064a8:	4b39      	ldr	r3, [pc, #228]	; (8106590 <HAL_SAI_Init+0x548>)
 81064aa:	400b      	ands	r3, r1
 81064ac:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	681b      	ldr	r3, [r3, #0]
 81064b2:	6899      	ldr	r1, [r3, #8]
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064b8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 81064ba:	687b      	ldr	r3, [r7, #4]
 81064bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81064be:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 81064c4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 81064ca:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064d0:	3b01      	subs	r3, #1
 81064d2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 81064d4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	681b      	ldr	r3, [r3, #0]
 81064da:	430a      	orrs	r2, r1
 81064dc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	68d9      	ldr	r1, [r3, #12]
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	681a      	ldr	r2, [r3, #0]
 81064e8:	f24f 0320 	movw	r3, #61472	; 0xf020
 81064ec:	400b      	ands	r3, r1
 81064ee:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 81064f0:	687b      	ldr	r3, [r7, #4]
 81064f2:	681b      	ldr	r3, [r3, #0]
 81064f4:	68d9      	ldr	r1, [r3, #12]
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81064fe:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106504:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106506:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810650c:	3b01      	subs	r3, #1
 810650e:	021b      	lsls	r3, r3, #8
 8106510:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	681b      	ldr	r3, [r3, #0]
 8106516:	430a      	orrs	r2, r1
 8106518:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	4a1d      	ldr	r2, [pc, #116]	; (8106594 <HAL_SAI_Init+0x54c>)
 8106520:	4293      	cmp	r3, r2
 8106522:	d004      	beq.n	810652e <HAL_SAI_Init+0x4e6>
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	4a1b      	ldr	r2, [pc, #108]	; (8106598 <HAL_SAI_Init+0x550>)
 810652a:	4293      	cmp	r3, r2
 810652c:	d119      	bne.n	8106562 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810652e:	69bb      	ldr	r3, [r7, #24]
 8106530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106532:	f023 0201 	bic.w	r2, r3, #1
 8106536:	69bb      	ldr	r3, [r7, #24]
 8106538:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8106540:	2b01      	cmp	r3, #1
 8106542:	d10e      	bne.n	8106562 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810654c:	3b01      	subs	r3, #1
 810654e:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106550:	431a      	orrs	r2, r3
 8106552:	69bb      	ldr	r3, [r7, #24]
 8106554:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8106556:	69bb      	ldr	r3, [r7, #24]
 8106558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810655a:	f043 0201 	orr.w	r2, r3, #1
 810655e:	69bb      	ldr	r3, [r7, #24]
 8106560:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	2200      	movs	r2, #0
 8106566:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 810656a:	687b      	ldr	r3, [r7, #4]
 810656c:	2201      	movs	r2, #1
 810656e:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	2200      	movs	r2, #0
 8106576:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 810657a:	2300      	movs	r3, #0
}
 810657c:	4618      	mov	r0, r3
 810657e:	3728      	adds	r7, #40	; 0x28
 8106580:	46bd      	mov	sp, r7
 8106582:	bd80      	pop	{r7, pc}
 8106584:	cccccccd 	.word	0xcccccccd
 8106588:	f005c010 	.word	0xf005c010
 810658c:	f805c010 	.word	0xf805c010
 8106590:	fff88000 	.word	0xfff88000
 8106594:	40015804 	.word	0x40015804
 8106598:	58005404 	.word	0x58005404

0810659c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 810659c:	b480      	push	{r7}
 810659e:	b085      	sub	sp, #20
 81065a0:	af00      	add	r7, sp, #0
 81065a2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 81065a4:	4b18      	ldr	r3, [pc, #96]	; (8106608 <SAI_Disable+0x6c>)
 81065a6:	681b      	ldr	r3, [r3, #0]
 81065a8:	4a18      	ldr	r2, [pc, #96]	; (810660c <SAI_Disable+0x70>)
 81065aa:	fba2 2303 	umull	r2, r3, r2, r3
 81065ae:	0b1b      	lsrs	r3, r3, #12
 81065b0:	009b      	lsls	r3, r3, #2
 81065b2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 81065b4:	2300      	movs	r3, #0
 81065b6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 81065b8:	687b      	ldr	r3, [r7, #4]
 81065ba:	681b      	ldr	r3, [r3, #0]
 81065bc:	681a      	ldr	r2, [r3, #0]
 81065be:	687b      	ldr	r3, [r7, #4]
 81065c0:	681b      	ldr	r3, [r3, #0]
 81065c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81065c6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 81065c8:	68fb      	ldr	r3, [r7, #12]
 81065ca:	2b00      	cmp	r3, #0
 81065cc:	d10a      	bne.n	81065e4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81065d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 81065de:	2303      	movs	r3, #3
 81065e0:	72fb      	strb	r3, [r7, #11]
      break;
 81065e2:	e009      	b.n	81065f8 <SAI_Disable+0x5c>
    }
    count--;
 81065e4:	68fb      	ldr	r3, [r7, #12]
 81065e6:	3b01      	subs	r3, #1
 81065e8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 81065ea:	687b      	ldr	r3, [r7, #4]
 81065ec:	681b      	ldr	r3, [r3, #0]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81065f4:	2b00      	cmp	r3, #0
 81065f6:	d1e7      	bne.n	81065c8 <SAI_Disable+0x2c>

  return status;
 81065f8:	7afb      	ldrb	r3, [r7, #11]
}
 81065fa:	4618      	mov	r0, r3
 81065fc:	3714      	adds	r7, #20
 81065fe:	46bd      	mov	sp, r7
 8106600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106604:	4770      	bx	lr
 8106606:	bf00      	nop
 8106608:	10000000 	.word	0x10000000
 810660c:	95cbec1b 	.word	0x95cbec1b

08106610 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8106610:	b580      	push	{r7, lr}
 8106612:	b084      	sub	sp, #16
 8106614:	af00      	add	r7, sp, #0
 8106616:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8106618:	687b      	ldr	r3, [r7, #4]
 810661a:	2b00      	cmp	r3, #0
 810661c:	d101      	bne.n	8106622 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 810661e:	2301      	movs	r3, #1
 8106620:	e05e      	b.n	81066e0 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8106628:	b2db      	uxtb	r3, r3
 810662a:	2b00      	cmp	r3, #0
 810662c:	d106      	bne.n	810663c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	2200      	movs	r2, #0
 8106632:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8106636:	6878      	ldr	r0, [r7, #4]
 8106638:	f7fa fc10 	bl	8100e5c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	2202      	movs	r2, #2
 8106640:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	681b      	ldr	r3, [r3, #0]
 8106648:	681a      	ldr	r2, [r3, #0]
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	681b      	ldr	r3, [r3, #0]
 810664e:	f022 0203 	bic.w	r2, r2, #3
 8106652:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8106654:	687b      	ldr	r3, [r7, #4]
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	681b      	ldr	r3, [r3, #0]
 810665a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 810665c:	68fa      	ldr	r2, [r7, #12]
 810665e:	4b22      	ldr	r3, [pc, #136]	; (81066e8 <HAL_SPDIFRX_Init+0xd8>)
 8106660:	4013      	ands	r3, r2
 8106662:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 810666c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 810666e:	687b      	ldr	r3, [r7, #4]
 8106670:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8106672:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8106674:	687b      	ldr	r3, [r7, #4]
 8106676:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106678:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 810667e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8106684:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 810668a:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8106690:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8106692:	687b      	ldr	r3, [r7, #4]
 8106694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8106696:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 810669c:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 810669e:	68fa      	ldr	r2, [r7, #12]
 81066a0:	4313      	orrs	r3, r2
 81066a2:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 81066aa:	2b01      	cmp	r3, #1
 81066ac:	d103      	bne.n	81066b6 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 81066ae:	68fb      	ldr	r3, [r7, #12]
 81066b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81066b4:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81066bc:	2b01      	cmp	r3, #1
 81066be:	d103      	bne.n	81066c8 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 81066c0:	68fb      	ldr	r3, [r7, #12]
 81066c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81066c6:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	68fa      	ldr	r2, [r7, #12]
 81066ce:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	2200      	movs	r2, #0
 81066d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 81066d6:	687b      	ldr	r3, [r7, #4]
 81066d8:	2201      	movs	r2, #1
 81066da:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 81066de:	2300      	movs	r3, #0
}
 81066e0:	4618      	mov	r0, r3
 81066e2:	3710      	adds	r7, #16
 81066e4:	46bd      	mov	sp, r7
 81066e6:	bd80      	pop	{r7, pc}
 81066e8:	ffc88407 	.word	0xffc88407

081066ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81066ec:	b580      	push	{r7, lr}
 81066ee:	b082      	sub	sp, #8
 81066f0:	af00      	add	r7, sp, #0
 81066f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	2b00      	cmp	r3, #0
 81066f8:	d101      	bne.n	81066fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81066fa:	2301      	movs	r3, #1
 81066fc:	e049      	b.n	8106792 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106704:	b2db      	uxtb	r3, r3
 8106706:	2b00      	cmp	r3, #0
 8106708:	d106      	bne.n	8106718 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810670a:	687b      	ldr	r3, [r7, #4]
 810670c:	2200      	movs	r2, #0
 810670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106712:	6878      	ldr	r0, [r7, #4]
 8106714:	f7fa fc0c 	bl	8100f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106718:	687b      	ldr	r3, [r7, #4]
 810671a:	2202      	movs	r2, #2
 810671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106720:	687b      	ldr	r3, [r7, #4]
 8106722:	681a      	ldr	r2, [r3, #0]
 8106724:	687b      	ldr	r3, [r7, #4]
 8106726:	3304      	adds	r3, #4
 8106728:	4619      	mov	r1, r3
 810672a:	4610      	mov	r0, r2
 810672c:	f000 fa04 	bl	8106b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106730:	687b      	ldr	r3, [r7, #4]
 8106732:	2201      	movs	r2, #1
 8106734:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106738:	687b      	ldr	r3, [r7, #4]
 810673a:	2201      	movs	r2, #1
 810673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	2201      	movs	r2, #1
 8106744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	2201      	movs	r2, #1
 810674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106750:	687b      	ldr	r3, [r7, #4]
 8106752:	2201      	movs	r2, #1
 8106754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	2201      	movs	r2, #1
 810675c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	2201      	movs	r2, #1
 8106764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	2201      	movs	r2, #1
 810676c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	2201      	movs	r2, #1
 8106774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	2201      	movs	r2, #1
 810677c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	2201      	movs	r2, #1
 8106784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	2201      	movs	r2, #1
 810678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106790:	2300      	movs	r3, #0
}
 8106792:	4618      	mov	r0, r3
 8106794:	3708      	adds	r7, #8
 8106796:	46bd      	mov	sp, r7
 8106798:	bd80      	pop	{r7, pc}

0810679a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 810679a:	b580      	push	{r7, lr}
 810679c:	b082      	sub	sp, #8
 810679e:	af00      	add	r7, sp, #0
 81067a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	2b00      	cmp	r3, #0
 81067a6:	d101      	bne.n	81067ac <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 81067a8:	2301      	movs	r3, #1
 81067aa:	e049      	b.n	8106840 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81067b2:	b2db      	uxtb	r3, r3
 81067b4:	2b00      	cmp	r3, #0
 81067b6:	d106      	bne.n	81067c6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	2200      	movs	r2, #0
 81067bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 81067c0:	6878      	ldr	r0, [r7, #4]
 81067c2:	f7fa fb93 	bl	8100eec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	2202      	movs	r2, #2
 81067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	681a      	ldr	r2, [r3, #0]
 81067d2:	687b      	ldr	r3, [r7, #4]
 81067d4:	3304      	adds	r3, #4
 81067d6:	4619      	mov	r1, r3
 81067d8:	4610      	mov	r0, r2
 81067da:	f000 f9ad 	bl	8106b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81067de:	687b      	ldr	r3, [r7, #4]
 81067e0:	2201      	movs	r2, #1
 81067e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	2201      	movs	r2, #1
 81067ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	2201      	movs	r2, #1
 81067f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	2201      	movs	r2, #1
 81067fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	2201      	movs	r2, #1
 8106802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	2201      	movs	r2, #1
 810680a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	2201      	movs	r2, #1
 8106812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	2201      	movs	r2, #1
 810681a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	2201      	movs	r2, #1
 8106822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	2201      	movs	r2, #1
 810682a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	2201      	movs	r2, #1
 8106832:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	2201      	movs	r2, #1
 810683a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810683e:	2300      	movs	r3, #0
}
 8106840:	4618      	mov	r0, r3
 8106842:	3708      	adds	r7, #8
 8106844:	46bd      	mov	sp, r7
 8106846:	bd80      	pop	{r7, pc}

08106848 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8106848:	b580      	push	{r7, lr}
 810684a:	b082      	sub	sp, #8
 810684c:	af00      	add	r7, sp, #0
 810684e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106850:	687b      	ldr	r3, [r7, #4]
 8106852:	2b00      	cmp	r3, #0
 8106854:	d101      	bne.n	810685a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8106856:	2301      	movs	r3, #1
 8106858:	e049      	b.n	81068ee <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810685a:	687b      	ldr	r3, [r7, #4]
 810685c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106860:	b2db      	uxtb	r3, r3
 8106862:	2b00      	cmp	r3, #0
 8106864:	d106      	bne.n	8106874 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106866:	687b      	ldr	r3, [r7, #4]
 8106868:	2200      	movs	r2, #0
 810686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 810686e:	6878      	ldr	r0, [r7, #4]
 8106870:	f000 f841 	bl	81068f6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106874:	687b      	ldr	r3, [r7, #4]
 8106876:	2202      	movs	r2, #2
 8106878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	681a      	ldr	r2, [r3, #0]
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	3304      	adds	r3, #4
 8106884:	4619      	mov	r1, r3
 8106886:	4610      	mov	r0, r2
 8106888:	f000 f956 	bl	8106b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	2201      	movs	r2, #1
 8106890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	2201      	movs	r2, #1
 8106898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	2201      	movs	r2, #1
 81068a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	2201      	movs	r2, #1
 81068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81068ac:	687b      	ldr	r3, [r7, #4]
 81068ae:	2201      	movs	r2, #1
 81068b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	2201      	movs	r2, #1
 81068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	2201      	movs	r2, #1
 81068c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	2201      	movs	r2, #1
 81068c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	2201      	movs	r2, #1
 81068d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	2201      	movs	r2, #1
 81068d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	2201      	movs	r2, #1
 81068e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	2201      	movs	r2, #1
 81068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81068ec:	2300      	movs	r3, #0
}
 81068ee:	4618      	mov	r0, r3
 81068f0:	3708      	adds	r7, #8
 81068f2:	46bd      	mov	sp, r7
 81068f4:	bd80      	pop	{r7, pc}

081068f6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 81068f6:	b480      	push	{r7}
 81068f8:	b083      	sub	sp, #12
 81068fa:	af00      	add	r7, sp, #0
 81068fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 81068fe:	bf00      	nop
 8106900:	370c      	adds	r7, #12
 8106902:	46bd      	mov	sp, r7
 8106904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106908:	4770      	bx	lr
	...

0810690c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 810690c:	b580      	push	{r7, lr}
 810690e:	b086      	sub	sp, #24
 8106910:	af00      	add	r7, sp, #0
 8106912:	60f8      	str	r0, [r7, #12]
 8106914:	60b9      	str	r1, [r7, #8]
 8106916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106918:	2300      	movs	r3, #0
 810691a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 810691c:	68fb      	ldr	r3, [r7, #12]
 810691e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106922:	2b01      	cmp	r3, #1
 8106924:	d101      	bne.n	810692a <HAL_TIM_OC_ConfigChannel+0x1e>
 8106926:	2302      	movs	r3, #2
 8106928:	e066      	b.n	81069f8 <HAL_TIM_OC_ConfigChannel+0xec>
 810692a:	68fb      	ldr	r3, [r7, #12]
 810692c:	2201      	movs	r2, #1
 810692e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8106932:	687b      	ldr	r3, [r7, #4]
 8106934:	2b14      	cmp	r3, #20
 8106936:	d857      	bhi.n	81069e8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8106938:	a201      	add	r2, pc, #4	; (adr r2, 8106940 <HAL_TIM_OC_ConfigChannel+0x34>)
 810693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810693e:	bf00      	nop
 8106940:	08106995 	.word	0x08106995
 8106944:	081069e9 	.word	0x081069e9
 8106948:	081069e9 	.word	0x081069e9
 810694c:	081069e9 	.word	0x081069e9
 8106950:	081069a3 	.word	0x081069a3
 8106954:	081069e9 	.word	0x081069e9
 8106958:	081069e9 	.word	0x081069e9
 810695c:	081069e9 	.word	0x081069e9
 8106960:	081069b1 	.word	0x081069b1
 8106964:	081069e9 	.word	0x081069e9
 8106968:	081069e9 	.word	0x081069e9
 810696c:	081069e9 	.word	0x081069e9
 8106970:	081069bf 	.word	0x081069bf
 8106974:	081069e9 	.word	0x081069e9
 8106978:	081069e9 	.word	0x081069e9
 810697c:	081069e9 	.word	0x081069e9
 8106980:	081069cd 	.word	0x081069cd
 8106984:	081069e9 	.word	0x081069e9
 8106988:	081069e9 	.word	0x081069e9
 810698c:	081069e9 	.word	0x081069e9
 8106990:	081069db 	.word	0x081069db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8106994:	68fb      	ldr	r3, [r7, #12]
 8106996:	681b      	ldr	r3, [r3, #0]
 8106998:	68b9      	ldr	r1, [r7, #8]
 810699a:	4618      	mov	r0, r3
 810699c:	f000 f966 	bl	8106c6c <TIM_OC1_SetConfig>
      break;
 81069a0:	e025      	b.n	81069ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81069a2:	68fb      	ldr	r3, [r7, #12]
 81069a4:	681b      	ldr	r3, [r3, #0]
 81069a6:	68b9      	ldr	r1, [r7, #8]
 81069a8:	4618      	mov	r0, r3
 81069aa:	f000 f9ef 	bl	8106d8c <TIM_OC2_SetConfig>
      break;
 81069ae:	e01e      	b.n	81069ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81069b0:	68fb      	ldr	r3, [r7, #12]
 81069b2:	681b      	ldr	r3, [r3, #0]
 81069b4:	68b9      	ldr	r1, [r7, #8]
 81069b6:	4618      	mov	r0, r3
 81069b8:	f000 fa72 	bl	8106ea0 <TIM_OC3_SetConfig>
      break;
 81069bc:	e017      	b.n	81069ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81069be:	68fb      	ldr	r3, [r7, #12]
 81069c0:	681b      	ldr	r3, [r3, #0]
 81069c2:	68b9      	ldr	r1, [r7, #8]
 81069c4:	4618      	mov	r0, r3
 81069c6:	f000 faf3 	bl	8106fb0 <TIM_OC4_SetConfig>
      break;
 81069ca:	e010      	b.n	81069ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81069cc:	68fb      	ldr	r3, [r7, #12]
 81069ce:	681b      	ldr	r3, [r3, #0]
 81069d0:	68b9      	ldr	r1, [r7, #8]
 81069d2:	4618      	mov	r0, r3
 81069d4:	f000 fb56 	bl	8107084 <TIM_OC5_SetConfig>
      break;
 81069d8:	e009      	b.n	81069ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81069da:	68fb      	ldr	r3, [r7, #12]
 81069dc:	681b      	ldr	r3, [r3, #0]
 81069de:	68b9      	ldr	r1, [r7, #8]
 81069e0:	4618      	mov	r0, r3
 81069e2:	f000 fbb3 	bl	810714c <TIM_OC6_SetConfig>
      break;
 81069e6:	e002      	b.n	81069ee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 81069e8:	2301      	movs	r3, #1
 81069ea:	75fb      	strb	r3, [r7, #23]
      break;
 81069ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81069ee:	68fb      	ldr	r3, [r7, #12]
 81069f0:	2200      	movs	r2, #0
 81069f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 81069f6:	7dfb      	ldrb	r3, [r7, #23]
}
 81069f8:	4618      	mov	r0, r3
 81069fa:	3718      	adds	r7, #24
 81069fc:	46bd      	mov	sp, r7
 81069fe:	bd80      	pop	{r7, pc}

08106a00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8106a00:	b580      	push	{r7, lr}
 8106a02:	b086      	sub	sp, #24
 8106a04:	af00      	add	r7, sp, #0
 8106a06:	60f8      	str	r0, [r7, #12]
 8106a08:	60b9      	str	r1, [r7, #8]
 8106a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106a0c:	2300      	movs	r3, #0
 8106a0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106a10:	68fb      	ldr	r3, [r7, #12]
 8106a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106a16:	2b01      	cmp	r3, #1
 8106a18:	d101      	bne.n	8106a1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8106a1a:	2302      	movs	r3, #2
 8106a1c:	e088      	b.n	8106b30 <HAL_TIM_IC_ConfigChannel+0x130>
 8106a1e:	68fb      	ldr	r3, [r7, #12]
 8106a20:	2201      	movs	r2, #1
 8106a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	2b00      	cmp	r3, #0
 8106a2a:	d11b      	bne.n	8106a64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8106a2c:	68fb      	ldr	r3, [r7, #12]
 8106a2e:	6818      	ldr	r0, [r3, #0]
 8106a30:	68bb      	ldr	r3, [r7, #8]
 8106a32:	6819      	ldr	r1, [r3, #0]
 8106a34:	68bb      	ldr	r3, [r7, #8]
 8106a36:	685a      	ldr	r2, [r3, #4]
 8106a38:	68bb      	ldr	r3, [r7, #8]
 8106a3a:	68db      	ldr	r3, [r3, #12]
 8106a3c:	f000 fbec 	bl	8107218 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8106a40:	68fb      	ldr	r3, [r7, #12]
 8106a42:	681b      	ldr	r3, [r3, #0]
 8106a44:	699a      	ldr	r2, [r3, #24]
 8106a46:	68fb      	ldr	r3, [r7, #12]
 8106a48:	681b      	ldr	r3, [r3, #0]
 8106a4a:	f022 020c 	bic.w	r2, r2, #12
 8106a4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8106a50:	68fb      	ldr	r3, [r7, #12]
 8106a52:	681b      	ldr	r3, [r3, #0]
 8106a54:	6999      	ldr	r1, [r3, #24]
 8106a56:	68bb      	ldr	r3, [r7, #8]
 8106a58:	689a      	ldr	r2, [r3, #8]
 8106a5a:	68fb      	ldr	r3, [r7, #12]
 8106a5c:	681b      	ldr	r3, [r3, #0]
 8106a5e:	430a      	orrs	r2, r1
 8106a60:	619a      	str	r2, [r3, #24]
 8106a62:	e060      	b.n	8106b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	2b04      	cmp	r3, #4
 8106a68:	d11c      	bne.n	8106aa4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8106a6a:	68fb      	ldr	r3, [r7, #12]
 8106a6c:	6818      	ldr	r0, [r3, #0]
 8106a6e:	68bb      	ldr	r3, [r7, #8]
 8106a70:	6819      	ldr	r1, [r3, #0]
 8106a72:	68bb      	ldr	r3, [r7, #8]
 8106a74:	685a      	ldr	r2, [r3, #4]
 8106a76:	68bb      	ldr	r3, [r7, #8]
 8106a78:	68db      	ldr	r3, [r3, #12]
 8106a7a:	f000 fc41 	bl	8107300 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8106a7e:	68fb      	ldr	r3, [r7, #12]
 8106a80:	681b      	ldr	r3, [r3, #0]
 8106a82:	699a      	ldr	r2, [r3, #24]
 8106a84:	68fb      	ldr	r3, [r7, #12]
 8106a86:	681b      	ldr	r3, [r3, #0]
 8106a88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106a8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8106a8e:	68fb      	ldr	r3, [r7, #12]
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	6999      	ldr	r1, [r3, #24]
 8106a94:	68bb      	ldr	r3, [r7, #8]
 8106a96:	689b      	ldr	r3, [r3, #8]
 8106a98:	021a      	lsls	r2, r3, #8
 8106a9a:	68fb      	ldr	r3, [r7, #12]
 8106a9c:	681b      	ldr	r3, [r3, #0]
 8106a9e:	430a      	orrs	r2, r1
 8106aa0:	619a      	str	r2, [r3, #24]
 8106aa2:	e040      	b.n	8106b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8106aa4:	687b      	ldr	r3, [r7, #4]
 8106aa6:	2b08      	cmp	r3, #8
 8106aa8:	d11b      	bne.n	8106ae2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8106aaa:	68fb      	ldr	r3, [r7, #12]
 8106aac:	6818      	ldr	r0, [r3, #0]
 8106aae:	68bb      	ldr	r3, [r7, #8]
 8106ab0:	6819      	ldr	r1, [r3, #0]
 8106ab2:	68bb      	ldr	r3, [r7, #8]
 8106ab4:	685a      	ldr	r2, [r3, #4]
 8106ab6:	68bb      	ldr	r3, [r7, #8]
 8106ab8:	68db      	ldr	r3, [r3, #12]
 8106aba:	f000 fc5e 	bl	810737a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8106abe:	68fb      	ldr	r3, [r7, #12]
 8106ac0:	681b      	ldr	r3, [r3, #0]
 8106ac2:	69da      	ldr	r2, [r3, #28]
 8106ac4:	68fb      	ldr	r3, [r7, #12]
 8106ac6:	681b      	ldr	r3, [r3, #0]
 8106ac8:	f022 020c 	bic.w	r2, r2, #12
 8106acc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8106ace:	68fb      	ldr	r3, [r7, #12]
 8106ad0:	681b      	ldr	r3, [r3, #0]
 8106ad2:	69d9      	ldr	r1, [r3, #28]
 8106ad4:	68bb      	ldr	r3, [r7, #8]
 8106ad6:	689a      	ldr	r2, [r3, #8]
 8106ad8:	68fb      	ldr	r3, [r7, #12]
 8106ada:	681b      	ldr	r3, [r3, #0]
 8106adc:	430a      	orrs	r2, r1
 8106ade:	61da      	str	r2, [r3, #28]
 8106ae0:	e021      	b.n	8106b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8106ae2:	687b      	ldr	r3, [r7, #4]
 8106ae4:	2b0c      	cmp	r3, #12
 8106ae6:	d11c      	bne.n	8106b22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8106ae8:	68fb      	ldr	r3, [r7, #12]
 8106aea:	6818      	ldr	r0, [r3, #0]
 8106aec:	68bb      	ldr	r3, [r7, #8]
 8106aee:	6819      	ldr	r1, [r3, #0]
 8106af0:	68bb      	ldr	r3, [r7, #8]
 8106af2:	685a      	ldr	r2, [r3, #4]
 8106af4:	68bb      	ldr	r3, [r7, #8]
 8106af6:	68db      	ldr	r3, [r3, #12]
 8106af8:	f000 fc7b 	bl	81073f2 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8106afc:	68fb      	ldr	r3, [r7, #12]
 8106afe:	681b      	ldr	r3, [r3, #0]
 8106b00:	69da      	ldr	r2, [r3, #28]
 8106b02:	68fb      	ldr	r3, [r7, #12]
 8106b04:	681b      	ldr	r3, [r3, #0]
 8106b06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106b0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8106b0c:	68fb      	ldr	r3, [r7, #12]
 8106b0e:	681b      	ldr	r3, [r3, #0]
 8106b10:	69d9      	ldr	r1, [r3, #28]
 8106b12:	68bb      	ldr	r3, [r7, #8]
 8106b14:	689b      	ldr	r3, [r3, #8]
 8106b16:	021a      	lsls	r2, r3, #8
 8106b18:	68fb      	ldr	r3, [r7, #12]
 8106b1a:	681b      	ldr	r3, [r3, #0]
 8106b1c:	430a      	orrs	r2, r1
 8106b1e:	61da      	str	r2, [r3, #28]
 8106b20:	e001      	b.n	8106b26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8106b22:	2301      	movs	r3, #1
 8106b24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8106b26:	68fb      	ldr	r3, [r7, #12]
 8106b28:	2200      	movs	r2, #0
 8106b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8106b30:	4618      	mov	r0, r3
 8106b32:	3718      	adds	r7, #24
 8106b34:	46bd      	mov	sp, r7
 8106b36:	bd80      	pop	{r7, pc}

08106b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106b38:	b480      	push	{r7}
 8106b3a:	b085      	sub	sp, #20
 8106b3c:	af00      	add	r7, sp, #0
 8106b3e:	6078      	str	r0, [r7, #4]
 8106b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106b42:	687b      	ldr	r3, [r7, #4]
 8106b44:	681b      	ldr	r3, [r3, #0]
 8106b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	4a40      	ldr	r2, [pc, #256]	; (8106c4c <TIM_Base_SetConfig+0x114>)
 8106b4c:	4293      	cmp	r3, r2
 8106b4e:	d013      	beq.n	8106b78 <TIM_Base_SetConfig+0x40>
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106b56:	d00f      	beq.n	8106b78 <TIM_Base_SetConfig+0x40>
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	4a3d      	ldr	r2, [pc, #244]	; (8106c50 <TIM_Base_SetConfig+0x118>)
 8106b5c:	4293      	cmp	r3, r2
 8106b5e:	d00b      	beq.n	8106b78 <TIM_Base_SetConfig+0x40>
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	4a3c      	ldr	r2, [pc, #240]	; (8106c54 <TIM_Base_SetConfig+0x11c>)
 8106b64:	4293      	cmp	r3, r2
 8106b66:	d007      	beq.n	8106b78 <TIM_Base_SetConfig+0x40>
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	4a3b      	ldr	r2, [pc, #236]	; (8106c58 <TIM_Base_SetConfig+0x120>)
 8106b6c:	4293      	cmp	r3, r2
 8106b6e:	d003      	beq.n	8106b78 <TIM_Base_SetConfig+0x40>
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	4a3a      	ldr	r2, [pc, #232]	; (8106c5c <TIM_Base_SetConfig+0x124>)
 8106b74:	4293      	cmp	r3, r2
 8106b76:	d108      	bne.n	8106b8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106b78:	68fb      	ldr	r3, [r7, #12]
 8106b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106b80:	683b      	ldr	r3, [r7, #0]
 8106b82:	685b      	ldr	r3, [r3, #4]
 8106b84:	68fa      	ldr	r2, [r7, #12]
 8106b86:	4313      	orrs	r3, r2
 8106b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106b8a:	687b      	ldr	r3, [r7, #4]
 8106b8c:	4a2f      	ldr	r2, [pc, #188]	; (8106c4c <TIM_Base_SetConfig+0x114>)
 8106b8e:	4293      	cmp	r3, r2
 8106b90:	d01f      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106b92:	687b      	ldr	r3, [r7, #4]
 8106b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106b98:	d01b      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106b9a:	687b      	ldr	r3, [r7, #4]
 8106b9c:	4a2c      	ldr	r2, [pc, #176]	; (8106c50 <TIM_Base_SetConfig+0x118>)
 8106b9e:	4293      	cmp	r3, r2
 8106ba0:	d017      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106ba2:	687b      	ldr	r3, [r7, #4]
 8106ba4:	4a2b      	ldr	r2, [pc, #172]	; (8106c54 <TIM_Base_SetConfig+0x11c>)
 8106ba6:	4293      	cmp	r3, r2
 8106ba8:	d013      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106baa:	687b      	ldr	r3, [r7, #4]
 8106bac:	4a2a      	ldr	r2, [pc, #168]	; (8106c58 <TIM_Base_SetConfig+0x120>)
 8106bae:	4293      	cmp	r3, r2
 8106bb0:	d00f      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	4a29      	ldr	r2, [pc, #164]	; (8106c5c <TIM_Base_SetConfig+0x124>)
 8106bb6:	4293      	cmp	r3, r2
 8106bb8:	d00b      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	4a28      	ldr	r2, [pc, #160]	; (8106c60 <TIM_Base_SetConfig+0x128>)
 8106bbe:	4293      	cmp	r3, r2
 8106bc0:	d007      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	4a27      	ldr	r2, [pc, #156]	; (8106c64 <TIM_Base_SetConfig+0x12c>)
 8106bc6:	4293      	cmp	r3, r2
 8106bc8:	d003      	beq.n	8106bd2 <TIM_Base_SetConfig+0x9a>
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	4a26      	ldr	r2, [pc, #152]	; (8106c68 <TIM_Base_SetConfig+0x130>)
 8106bce:	4293      	cmp	r3, r2
 8106bd0:	d108      	bne.n	8106be4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106bd2:	68fb      	ldr	r3, [r7, #12]
 8106bd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106bd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106bda:	683b      	ldr	r3, [r7, #0]
 8106bdc:	68db      	ldr	r3, [r3, #12]
 8106bde:	68fa      	ldr	r2, [r7, #12]
 8106be0:	4313      	orrs	r3, r2
 8106be2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106be4:	68fb      	ldr	r3, [r7, #12]
 8106be6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8106bea:	683b      	ldr	r3, [r7, #0]
 8106bec:	695b      	ldr	r3, [r3, #20]
 8106bee:	4313      	orrs	r3, r2
 8106bf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	68fa      	ldr	r2, [r7, #12]
 8106bf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106bf8:	683b      	ldr	r3, [r7, #0]
 8106bfa:	689a      	ldr	r2, [r3, #8]
 8106bfc:	687b      	ldr	r3, [r7, #4]
 8106bfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106c00:	683b      	ldr	r3, [r7, #0]
 8106c02:	681a      	ldr	r2, [r3, #0]
 8106c04:	687b      	ldr	r3, [r7, #4]
 8106c06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106c08:	687b      	ldr	r3, [r7, #4]
 8106c0a:	4a10      	ldr	r2, [pc, #64]	; (8106c4c <TIM_Base_SetConfig+0x114>)
 8106c0c:	4293      	cmp	r3, r2
 8106c0e:	d00f      	beq.n	8106c30 <TIM_Base_SetConfig+0xf8>
 8106c10:	687b      	ldr	r3, [r7, #4]
 8106c12:	4a12      	ldr	r2, [pc, #72]	; (8106c5c <TIM_Base_SetConfig+0x124>)
 8106c14:	4293      	cmp	r3, r2
 8106c16:	d00b      	beq.n	8106c30 <TIM_Base_SetConfig+0xf8>
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	4a11      	ldr	r2, [pc, #68]	; (8106c60 <TIM_Base_SetConfig+0x128>)
 8106c1c:	4293      	cmp	r3, r2
 8106c1e:	d007      	beq.n	8106c30 <TIM_Base_SetConfig+0xf8>
 8106c20:	687b      	ldr	r3, [r7, #4]
 8106c22:	4a10      	ldr	r2, [pc, #64]	; (8106c64 <TIM_Base_SetConfig+0x12c>)
 8106c24:	4293      	cmp	r3, r2
 8106c26:	d003      	beq.n	8106c30 <TIM_Base_SetConfig+0xf8>
 8106c28:	687b      	ldr	r3, [r7, #4]
 8106c2a:	4a0f      	ldr	r2, [pc, #60]	; (8106c68 <TIM_Base_SetConfig+0x130>)
 8106c2c:	4293      	cmp	r3, r2
 8106c2e:	d103      	bne.n	8106c38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106c30:	683b      	ldr	r3, [r7, #0]
 8106c32:	691a      	ldr	r2, [r3, #16]
 8106c34:	687b      	ldr	r3, [r7, #4]
 8106c36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	2201      	movs	r2, #1
 8106c3c:	615a      	str	r2, [r3, #20]
}
 8106c3e:	bf00      	nop
 8106c40:	3714      	adds	r7, #20
 8106c42:	46bd      	mov	sp, r7
 8106c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c48:	4770      	bx	lr
 8106c4a:	bf00      	nop
 8106c4c:	40010000 	.word	0x40010000
 8106c50:	40000400 	.word	0x40000400
 8106c54:	40000800 	.word	0x40000800
 8106c58:	40000c00 	.word	0x40000c00
 8106c5c:	40010400 	.word	0x40010400
 8106c60:	40014000 	.word	0x40014000
 8106c64:	40014400 	.word	0x40014400
 8106c68:	40014800 	.word	0x40014800

08106c6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106c6c:	b480      	push	{r7}
 8106c6e:	b087      	sub	sp, #28
 8106c70:	af00      	add	r7, sp, #0
 8106c72:	6078      	str	r0, [r7, #4]
 8106c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	6a1b      	ldr	r3, [r3, #32]
 8106c7a:	f023 0201 	bic.w	r2, r3, #1
 8106c7e:	687b      	ldr	r3, [r7, #4]
 8106c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	6a1b      	ldr	r3, [r3, #32]
 8106c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106c88:	687b      	ldr	r3, [r7, #4]
 8106c8a:	685b      	ldr	r3, [r3, #4]
 8106c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106c8e:	687b      	ldr	r3, [r7, #4]
 8106c90:	699b      	ldr	r3, [r3, #24]
 8106c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8106c94:	68fb      	ldr	r3, [r7, #12]
 8106c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8106ca0:	68fb      	ldr	r3, [r7, #12]
 8106ca2:	f023 0303 	bic.w	r3, r3, #3
 8106ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106ca8:	683b      	ldr	r3, [r7, #0]
 8106caa:	681b      	ldr	r3, [r3, #0]
 8106cac:	68fa      	ldr	r2, [r7, #12]
 8106cae:	4313      	orrs	r3, r2
 8106cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8106cb2:	697b      	ldr	r3, [r7, #20]
 8106cb4:	f023 0302 	bic.w	r3, r3, #2
 8106cb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8106cba:	683b      	ldr	r3, [r7, #0]
 8106cbc:	689b      	ldr	r3, [r3, #8]
 8106cbe:	697a      	ldr	r2, [r7, #20]
 8106cc0:	4313      	orrs	r3, r2
 8106cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8106cc4:	687b      	ldr	r3, [r7, #4]
 8106cc6:	4a2c      	ldr	r2, [pc, #176]	; (8106d78 <TIM_OC1_SetConfig+0x10c>)
 8106cc8:	4293      	cmp	r3, r2
 8106cca:	d00f      	beq.n	8106cec <TIM_OC1_SetConfig+0x80>
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	4a2b      	ldr	r2, [pc, #172]	; (8106d7c <TIM_OC1_SetConfig+0x110>)
 8106cd0:	4293      	cmp	r3, r2
 8106cd2:	d00b      	beq.n	8106cec <TIM_OC1_SetConfig+0x80>
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	4a2a      	ldr	r2, [pc, #168]	; (8106d80 <TIM_OC1_SetConfig+0x114>)
 8106cd8:	4293      	cmp	r3, r2
 8106cda:	d007      	beq.n	8106cec <TIM_OC1_SetConfig+0x80>
 8106cdc:	687b      	ldr	r3, [r7, #4]
 8106cde:	4a29      	ldr	r2, [pc, #164]	; (8106d84 <TIM_OC1_SetConfig+0x118>)
 8106ce0:	4293      	cmp	r3, r2
 8106ce2:	d003      	beq.n	8106cec <TIM_OC1_SetConfig+0x80>
 8106ce4:	687b      	ldr	r3, [r7, #4]
 8106ce6:	4a28      	ldr	r2, [pc, #160]	; (8106d88 <TIM_OC1_SetConfig+0x11c>)
 8106ce8:	4293      	cmp	r3, r2
 8106cea:	d10c      	bne.n	8106d06 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106cec:	697b      	ldr	r3, [r7, #20]
 8106cee:	f023 0308 	bic.w	r3, r3, #8
 8106cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106cf4:	683b      	ldr	r3, [r7, #0]
 8106cf6:	68db      	ldr	r3, [r3, #12]
 8106cf8:	697a      	ldr	r2, [r7, #20]
 8106cfa:	4313      	orrs	r3, r2
 8106cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106cfe:	697b      	ldr	r3, [r7, #20]
 8106d00:	f023 0304 	bic.w	r3, r3, #4
 8106d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106d06:	687b      	ldr	r3, [r7, #4]
 8106d08:	4a1b      	ldr	r2, [pc, #108]	; (8106d78 <TIM_OC1_SetConfig+0x10c>)
 8106d0a:	4293      	cmp	r3, r2
 8106d0c:	d00f      	beq.n	8106d2e <TIM_OC1_SetConfig+0xc2>
 8106d0e:	687b      	ldr	r3, [r7, #4]
 8106d10:	4a1a      	ldr	r2, [pc, #104]	; (8106d7c <TIM_OC1_SetConfig+0x110>)
 8106d12:	4293      	cmp	r3, r2
 8106d14:	d00b      	beq.n	8106d2e <TIM_OC1_SetConfig+0xc2>
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	4a19      	ldr	r2, [pc, #100]	; (8106d80 <TIM_OC1_SetConfig+0x114>)
 8106d1a:	4293      	cmp	r3, r2
 8106d1c:	d007      	beq.n	8106d2e <TIM_OC1_SetConfig+0xc2>
 8106d1e:	687b      	ldr	r3, [r7, #4]
 8106d20:	4a18      	ldr	r2, [pc, #96]	; (8106d84 <TIM_OC1_SetConfig+0x118>)
 8106d22:	4293      	cmp	r3, r2
 8106d24:	d003      	beq.n	8106d2e <TIM_OC1_SetConfig+0xc2>
 8106d26:	687b      	ldr	r3, [r7, #4]
 8106d28:	4a17      	ldr	r2, [pc, #92]	; (8106d88 <TIM_OC1_SetConfig+0x11c>)
 8106d2a:	4293      	cmp	r3, r2
 8106d2c:	d111      	bne.n	8106d52 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106d2e:	693b      	ldr	r3, [r7, #16]
 8106d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106d36:	693b      	ldr	r3, [r7, #16]
 8106d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106d3e:	683b      	ldr	r3, [r7, #0]
 8106d40:	695b      	ldr	r3, [r3, #20]
 8106d42:	693a      	ldr	r2, [r7, #16]
 8106d44:	4313      	orrs	r3, r2
 8106d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106d48:	683b      	ldr	r3, [r7, #0]
 8106d4a:	699b      	ldr	r3, [r3, #24]
 8106d4c:	693a      	ldr	r2, [r7, #16]
 8106d4e:	4313      	orrs	r3, r2
 8106d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106d52:	687b      	ldr	r3, [r7, #4]
 8106d54:	693a      	ldr	r2, [r7, #16]
 8106d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106d58:	687b      	ldr	r3, [r7, #4]
 8106d5a:	68fa      	ldr	r2, [r7, #12]
 8106d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106d5e:	683b      	ldr	r3, [r7, #0]
 8106d60:	685a      	ldr	r2, [r3, #4]
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	697a      	ldr	r2, [r7, #20]
 8106d6a:	621a      	str	r2, [r3, #32]
}
 8106d6c:	bf00      	nop
 8106d6e:	371c      	adds	r7, #28
 8106d70:	46bd      	mov	sp, r7
 8106d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d76:	4770      	bx	lr
 8106d78:	40010000 	.word	0x40010000
 8106d7c:	40010400 	.word	0x40010400
 8106d80:	40014000 	.word	0x40014000
 8106d84:	40014400 	.word	0x40014400
 8106d88:	40014800 	.word	0x40014800

08106d8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106d8c:	b480      	push	{r7}
 8106d8e:	b087      	sub	sp, #28
 8106d90:	af00      	add	r7, sp, #0
 8106d92:	6078      	str	r0, [r7, #4]
 8106d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106d96:	687b      	ldr	r3, [r7, #4]
 8106d98:	6a1b      	ldr	r3, [r3, #32]
 8106d9a:	f023 0210 	bic.w	r2, r3, #16
 8106d9e:	687b      	ldr	r3, [r7, #4]
 8106da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106da2:	687b      	ldr	r3, [r7, #4]
 8106da4:	6a1b      	ldr	r3, [r3, #32]
 8106da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	685b      	ldr	r3, [r3, #4]
 8106dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106dae:	687b      	ldr	r3, [r7, #4]
 8106db0:	699b      	ldr	r3, [r3, #24]
 8106db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8106db4:	68fb      	ldr	r3, [r7, #12]
 8106db6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106dc0:	68fb      	ldr	r3, [r7, #12]
 8106dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106dc8:	683b      	ldr	r3, [r7, #0]
 8106dca:	681b      	ldr	r3, [r3, #0]
 8106dcc:	021b      	lsls	r3, r3, #8
 8106dce:	68fa      	ldr	r2, [r7, #12]
 8106dd0:	4313      	orrs	r3, r2
 8106dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106dd4:	697b      	ldr	r3, [r7, #20]
 8106dd6:	f023 0320 	bic.w	r3, r3, #32
 8106dda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106ddc:	683b      	ldr	r3, [r7, #0]
 8106dde:	689b      	ldr	r3, [r3, #8]
 8106de0:	011b      	lsls	r3, r3, #4
 8106de2:	697a      	ldr	r2, [r7, #20]
 8106de4:	4313      	orrs	r3, r2
 8106de6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	4a28      	ldr	r2, [pc, #160]	; (8106e8c <TIM_OC2_SetConfig+0x100>)
 8106dec:	4293      	cmp	r3, r2
 8106dee:	d003      	beq.n	8106df8 <TIM_OC2_SetConfig+0x6c>
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	4a27      	ldr	r2, [pc, #156]	; (8106e90 <TIM_OC2_SetConfig+0x104>)
 8106df4:	4293      	cmp	r3, r2
 8106df6:	d10d      	bne.n	8106e14 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106df8:	697b      	ldr	r3, [r7, #20]
 8106dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106e00:	683b      	ldr	r3, [r7, #0]
 8106e02:	68db      	ldr	r3, [r3, #12]
 8106e04:	011b      	lsls	r3, r3, #4
 8106e06:	697a      	ldr	r2, [r7, #20]
 8106e08:	4313      	orrs	r3, r2
 8106e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106e0c:	697b      	ldr	r3, [r7, #20]
 8106e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106e12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106e14:	687b      	ldr	r3, [r7, #4]
 8106e16:	4a1d      	ldr	r2, [pc, #116]	; (8106e8c <TIM_OC2_SetConfig+0x100>)
 8106e18:	4293      	cmp	r3, r2
 8106e1a:	d00f      	beq.n	8106e3c <TIM_OC2_SetConfig+0xb0>
 8106e1c:	687b      	ldr	r3, [r7, #4]
 8106e1e:	4a1c      	ldr	r2, [pc, #112]	; (8106e90 <TIM_OC2_SetConfig+0x104>)
 8106e20:	4293      	cmp	r3, r2
 8106e22:	d00b      	beq.n	8106e3c <TIM_OC2_SetConfig+0xb0>
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	4a1b      	ldr	r2, [pc, #108]	; (8106e94 <TIM_OC2_SetConfig+0x108>)
 8106e28:	4293      	cmp	r3, r2
 8106e2a:	d007      	beq.n	8106e3c <TIM_OC2_SetConfig+0xb0>
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	4a1a      	ldr	r2, [pc, #104]	; (8106e98 <TIM_OC2_SetConfig+0x10c>)
 8106e30:	4293      	cmp	r3, r2
 8106e32:	d003      	beq.n	8106e3c <TIM_OC2_SetConfig+0xb0>
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	4a19      	ldr	r2, [pc, #100]	; (8106e9c <TIM_OC2_SetConfig+0x110>)
 8106e38:	4293      	cmp	r3, r2
 8106e3a:	d113      	bne.n	8106e64 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106e3c:	693b      	ldr	r3, [r7, #16]
 8106e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106e44:	693b      	ldr	r3, [r7, #16]
 8106e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106e4c:	683b      	ldr	r3, [r7, #0]
 8106e4e:	695b      	ldr	r3, [r3, #20]
 8106e50:	009b      	lsls	r3, r3, #2
 8106e52:	693a      	ldr	r2, [r7, #16]
 8106e54:	4313      	orrs	r3, r2
 8106e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106e58:	683b      	ldr	r3, [r7, #0]
 8106e5a:	699b      	ldr	r3, [r3, #24]
 8106e5c:	009b      	lsls	r3, r3, #2
 8106e5e:	693a      	ldr	r2, [r7, #16]
 8106e60:	4313      	orrs	r3, r2
 8106e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106e64:	687b      	ldr	r3, [r7, #4]
 8106e66:	693a      	ldr	r2, [r7, #16]
 8106e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106e6a:	687b      	ldr	r3, [r7, #4]
 8106e6c:	68fa      	ldr	r2, [r7, #12]
 8106e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106e70:	683b      	ldr	r3, [r7, #0]
 8106e72:	685a      	ldr	r2, [r3, #4]
 8106e74:	687b      	ldr	r3, [r7, #4]
 8106e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	697a      	ldr	r2, [r7, #20]
 8106e7c:	621a      	str	r2, [r3, #32]
}
 8106e7e:	bf00      	nop
 8106e80:	371c      	adds	r7, #28
 8106e82:	46bd      	mov	sp, r7
 8106e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e88:	4770      	bx	lr
 8106e8a:	bf00      	nop
 8106e8c:	40010000 	.word	0x40010000
 8106e90:	40010400 	.word	0x40010400
 8106e94:	40014000 	.word	0x40014000
 8106e98:	40014400 	.word	0x40014400
 8106e9c:	40014800 	.word	0x40014800

08106ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106ea0:	b480      	push	{r7}
 8106ea2:	b087      	sub	sp, #28
 8106ea4:	af00      	add	r7, sp, #0
 8106ea6:	6078      	str	r0, [r7, #4]
 8106ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106eaa:	687b      	ldr	r3, [r7, #4]
 8106eac:	6a1b      	ldr	r3, [r3, #32]
 8106eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8106eb2:	687b      	ldr	r3, [r7, #4]
 8106eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	6a1b      	ldr	r3, [r3, #32]
 8106eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106ebc:	687b      	ldr	r3, [r7, #4]
 8106ebe:	685b      	ldr	r3, [r3, #4]
 8106ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106ec2:	687b      	ldr	r3, [r7, #4]
 8106ec4:	69db      	ldr	r3, [r3, #28]
 8106ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8106ec8:	68fb      	ldr	r3, [r7, #12]
 8106eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106ed4:	68fb      	ldr	r3, [r7, #12]
 8106ed6:	f023 0303 	bic.w	r3, r3, #3
 8106eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106edc:	683b      	ldr	r3, [r7, #0]
 8106ede:	681b      	ldr	r3, [r3, #0]
 8106ee0:	68fa      	ldr	r2, [r7, #12]
 8106ee2:	4313      	orrs	r3, r2
 8106ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106ee6:	697b      	ldr	r3, [r7, #20]
 8106ee8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106eec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106eee:	683b      	ldr	r3, [r7, #0]
 8106ef0:	689b      	ldr	r3, [r3, #8]
 8106ef2:	021b      	lsls	r3, r3, #8
 8106ef4:	697a      	ldr	r2, [r7, #20]
 8106ef6:	4313      	orrs	r3, r2
 8106ef8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106efa:	687b      	ldr	r3, [r7, #4]
 8106efc:	4a27      	ldr	r2, [pc, #156]	; (8106f9c <TIM_OC3_SetConfig+0xfc>)
 8106efe:	4293      	cmp	r3, r2
 8106f00:	d003      	beq.n	8106f0a <TIM_OC3_SetConfig+0x6a>
 8106f02:	687b      	ldr	r3, [r7, #4]
 8106f04:	4a26      	ldr	r2, [pc, #152]	; (8106fa0 <TIM_OC3_SetConfig+0x100>)
 8106f06:	4293      	cmp	r3, r2
 8106f08:	d10d      	bne.n	8106f26 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106f0a:	697b      	ldr	r3, [r7, #20]
 8106f0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106f12:	683b      	ldr	r3, [r7, #0]
 8106f14:	68db      	ldr	r3, [r3, #12]
 8106f16:	021b      	lsls	r3, r3, #8
 8106f18:	697a      	ldr	r2, [r7, #20]
 8106f1a:	4313      	orrs	r3, r2
 8106f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106f1e:	697b      	ldr	r3, [r7, #20]
 8106f20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	4a1c      	ldr	r2, [pc, #112]	; (8106f9c <TIM_OC3_SetConfig+0xfc>)
 8106f2a:	4293      	cmp	r3, r2
 8106f2c:	d00f      	beq.n	8106f4e <TIM_OC3_SetConfig+0xae>
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	4a1b      	ldr	r2, [pc, #108]	; (8106fa0 <TIM_OC3_SetConfig+0x100>)
 8106f32:	4293      	cmp	r3, r2
 8106f34:	d00b      	beq.n	8106f4e <TIM_OC3_SetConfig+0xae>
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	4a1a      	ldr	r2, [pc, #104]	; (8106fa4 <TIM_OC3_SetConfig+0x104>)
 8106f3a:	4293      	cmp	r3, r2
 8106f3c:	d007      	beq.n	8106f4e <TIM_OC3_SetConfig+0xae>
 8106f3e:	687b      	ldr	r3, [r7, #4]
 8106f40:	4a19      	ldr	r2, [pc, #100]	; (8106fa8 <TIM_OC3_SetConfig+0x108>)
 8106f42:	4293      	cmp	r3, r2
 8106f44:	d003      	beq.n	8106f4e <TIM_OC3_SetConfig+0xae>
 8106f46:	687b      	ldr	r3, [r7, #4]
 8106f48:	4a18      	ldr	r2, [pc, #96]	; (8106fac <TIM_OC3_SetConfig+0x10c>)
 8106f4a:	4293      	cmp	r3, r2
 8106f4c:	d113      	bne.n	8106f76 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106f4e:	693b      	ldr	r3, [r7, #16]
 8106f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106f56:	693b      	ldr	r3, [r7, #16]
 8106f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8106f5e:	683b      	ldr	r3, [r7, #0]
 8106f60:	695b      	ldr	r3, [r3, #20]
 8106f62:	011b      	lsls	r3, r3, #4
 8106f64:	693a      	ldr	r2, [r7, #16]
 8106f66:	4313      	orrs	r3, r2
 8106f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106f6a:	683b      	ldr	r3, [r7, #0]
 8106f6c:	699b      	ldr	r3, [r3, #24]
 8106f6e:	011b      	lsls	r3, r3, #4
 8106f70:	693a      	ldr	r2, [r7, #16]
 8106f72:	4313      	orrs	r3, r2
 8106f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	693a      	ldr	r2, [r7, #16]
 8106f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	68fa      	ldr	r2, [r7, #12]
 8106f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8106f82:	683b      	ldr	r3, [r7, #0]
 8106f84:	685a      	ldr	r2, [r3, #4]
 8106f86:	687b      	ldr	r3, [r7, #4]
 8106f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106f8a:	687b      	ldr	r3, [r7, #4]
 8106f8c:	697a      	ldr	r2, [r7, #20]
 8106f8e:	621a      	str	r2, [r3, #32]
}
 8106f90:	bf00      	nop
 8106f92:	371c      	adds	r7, #28
 8106f94:	46bd      	mov	sp, r7
 8106f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f9a:	4770      	bx	lr
 8106f9c:	40010000 	.word	0x40010000
 8106fa0:	40010400 	.word	0x40010400
 8106fa4:	40014000 	.word	0x40014000
 8106fa8:	40014400 	.word	0x40014400
 8106fac:	40014800 	.word	0x40014800

08106fb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106fb0:	b480      	push	{r7}
 8106fb2:	b087      	sub	sp, #28
 8106fb4:	af00      	add	r7, sp, #0
 8106fb6:	6078      	str	r0, [r7, #4]
 8106fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	6a1b      	ldr	r3, [r3, #32]
 8106fbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106fc2:	687b      	ldr	r3, [r7, #4]
 8106fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	6a1b      	ldr	r3, [r3, #32]
 8106fca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	685b      	ldr	r3, [r3, #4]
 8106fd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	69db      	ldr	r3, [r3, #28]
 8106fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8106fd8:	68fb      	ldr	r3, [r7, #12]
 8106fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106fe2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8106fe4:	68fb      	ldr	r3, [r7, #12]
 8106fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106fea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106fec:	683b      	ldr	r3, [r7, #0]
 8106fee:	681b      	ldr	r3, [r3, #0]
 8106ff0:	021b      	lsls	r3, r3, #8
 8106ff2:	68fa      	ldr	r2, [r7, #12]
 8106ff4:	4313      	orrs	r3, r2
 8106ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8106ff8:	693b      	ldr	r3, [r7, #16]
 8106ffa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107000:	683b      	ldr	r3, [r7, #0]
 8107002:	689b      	ldr	r3, [r3, #8]
 8107004:	031b      	lsls	r3, r3, #12
 8107006:	693a      	ldr	r2, [r7, #16]
 8107008:	4313      	orrs	r3, r2
 810700a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810700c:	687b      	ldr	r3, [r7, #4]
 810700e:	4a18      	ldr	r2, [pc, #96]	; (8107070 <TIM_OC4_SetConfig+0xc0>)
 8107010:	4293      	cmp	r3, r2
 8107012:	d00f      	beq.n	8107034 <TIM_OC4_SetConfig+0x84>
 8107014:	687b      	ldr	r3, [r7, #4]
 8107016:	4a17      	ldr	r2, [pc, #92]	; (8107074 <TIM_OC4_SetConfig+0xc4>)
 8107018:	4293      	cmp	r3, r2
 810701a:	d00b      	beq.n	8107034 <TIM_OC4_SetConfig+0x84>
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	4a16      	ldr	r2, [pc, #88]	; (8107078 <TIM_OC4_SetConfig+0xc8>)
 8107020:	4293      	cmp	r3, r2
 8107022:	d007      	beq.n	8107034 <TIM_OC4_SetConfig+0x84>
 8107024:	687b      	ldr	r3, [r7, #4]
 8107026:	4a15      	ldr	r2, [pc, #84]	; (810707c <TIM_OC4_SetConfig+0xcc>)
 8107028:	4293      	cmp	r3, r2
 810702a:	d003      	beq.n	8107034 <TIM_OC4_SetConfig+0x84>
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	4a14      	ldr	r2, [pc, #80]	; (8107080 <TIM_OC4_SetConfig+0xd0>)
 8107030:	4293      	cmp	r3, r2
 8107032:	d109      	bne.n	8107048 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107034:	697b      	ldr	r3, [r7, #20]
 8107036:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810703a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810703c:	683b      	ldr	r3, [r7, #0]
 810703e:	695b      	ldr	r3, [r3, #20]
 8107040:	019b      	lsls	r3, r3, #6
 8107042:	697a      	ldr	r2, [r7, #20]
 8107044:	4313      	orrs	r3, r2
 8107046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	697a      	ldr	r2, [r7, #20]
 810704c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	68fa      	ldr	r2, [r7, #12]
 8107052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8107054:	683b      	ldr	r3, [r7, #0]
 8107056:	685a      	ldr	r2, [r3, #4]
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	693a      	ldr	r2, [r7, #16]
 8107060:	621a      	str	r2, [r3, #32]
}
 8107062:	bf00      	nop
 8107064:	371c      	adds	r7, #28
 8107066:	46bd      	mov	sp, r7
 8107068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810706c:	4770      	bx	lr
 810706e:	bf00      	nop
 8107070:	40010000 	.word	0x40010000
 8107074:	40010400 	.word	0x40010400
 8107078:	40014000 	.word	0x40014000
 810707c:	40014400 	.word	0x40014400
 8107080:	40014800 	.word	0x40014800

08107084 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107084:	b480      	push	{r7}
 8107086:	b087      	sub	sp, #28
 8107088:	af00      	add	r7, sp, #0
 810708a:	6078      	str	r0, [r7, #4]
 810708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810708e:	687b      	ldr	r3, [r7, #4]
 8107090:	6a1b      	ldr	r3, [r3, #32]
 8107092:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8107096:	687b      	ldr	r3, [r7, #4]
 8107098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810709a:	687b      	ldr	r3, [r7, #4]
 810709c:	6a1b      	ldr	r3, [r3, #32]
 810709e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81070a0:	687b      	ldr	r3, [r7, #4]
 81070a2:	685b      	ldr	r3, [r3, #4]
 81070a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81070a6:	687b      	ldr	r3, [r7, #4]
 81070a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81070aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81070ac:	68fb      	ldr	r3, [r7, #12]
 81070ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81070b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81070b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81070b8:	683b      	ldr	r3, [r7, #0]
 81070ba:	681b      	ldr	r3, [r3, #0]
 81070bc:	68fa      	ldr	r2, [r7, #12]
 81070be:	4313      	orrs	r3, r2
 81070c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81070c2:	693b      	ldr	r3, [r7, #16]
 81070c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81070c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81070ca:	683b      	ldr	r3, [r7, #0]
 81070cc:	689b      	ldr	r3, [r3, #8]
 81070ce:	041b      	lsls	r3, r3, #16
 81070d0:	693a      	ldr	r2, [r7, #16]
 81070d2:	4313      	orrs	r3, r2
 81070d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81070d6:	687b      	ldr	r3, [r7, #4]
 81070d8:	4a17      	ldr	r2, [pc, #92]	; (8107138 <TIM_OC5_SetConfig+0xb4>)
 81070da:	4293      	cmp	r3, r2
 81070dc:	d00f      	beq.n	81070fe <TIM_OC5_SetConfig+0x7a>
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	4a16      	ldr	r2, [pc, #88]	; (810713c <TIM_OC5_SetConfig+0xb8>)
 81070e2:	4293      	cmp	r3, r2
 81070e4:	d00b      	beq.n	81070fe <TIM_OC5_SetConfig+0x7a>
 81070e6:	687b      	ldr	r3, [r7, #4]
 81070e8:	4a15      	ldr	r2, [pc, #84]	; (8107140 <TIM_OC5_SetConfig+0xbc>)
 81070ea:	4293      	cmp	r3, r2
 81070ec:	d007      	beq.n	81070fe <TIM_OC5_SetConfig+0x7a>
 81070ee:	687b      	ldr	r3, [r7, #4]
 81070f0:	4a14      	ldr	r2, [pc, #80]	; (8107144 <TIM_OC5_SetConfig+0xc0>)
 81070f2:	4293      	cmp	r3, r2
 81070f4:	d003      	beq.n	81070fe <TIM_OC5_SetConfig+0x7a>
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	4a13      	ldr	r2, [pc, #76]	; (8107148 <TIM_OC5_SetConfig+0xc4>)
 81070fa:	4293      	cmp	r3, r2
 81070fc:	d109      	bne.n	8107112 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81070fe:	697b      	ldr	r3, [r7, #20]
 8107100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107104:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107106:	683b      	ldr	r3, [r7, #0]
 8107108:	695b      	ldr	r3, [r3, #20]
 810710a:	021b      	lsls	r3, r3, #8
 810710c:	697a      	ldr	r2, [r7, #20]
 810710e:	4313      	orrs	r3, r2
 8107110:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	697a      	ldr	r2, [r7, #20]
 8107116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	68fa      	ldr	r2, [r7, #12]
 810711c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810711e:	683b      	ldr	r3, [r7, #0]
 8107120:	685a      	ldr	r2, [r3, #4]
 8107122:	687b      	ldr	r3, [r7, #4]
 8107124:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107126:	687b      	ldr	r3, [r7, #4]
 8107128:	693a      	ldr	r2, [r7, #16]
 810712a:	621a      	str	r2, [r3, #32]
}
 810712c:	bf00      	nop
 810712e:	371c      	adds	r7, #28
 8107130:	46bd      	mov	sp, r7
 8107132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107136:	4770      	bx	lr
 8107138:	40010000 	.word	0x40010000
 810713c:	40010400 	.word	0x40010400
 8107140:	40014000 	.word	0x40014000
 8107144:	40014400 	.word	0x40014400
 8107148:	40014800 	.word	0x40014800

0810714c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810714c:	b480      	push	{r7}
 810714e:	b087      	sub	sp, #28
 8107150:	af00      	add	r7, sp, #0
 8107152:	6078      	str	r0, [r7, #4]
 8107154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8107156:	687b      	ldr	r3, [r7, #4]
 8107158:	6a1b      	ldr	r3, [r3, #32]
 810715a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 810715e:	687b      	ldr	r3, [r7, #4]
 8107160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	6a1b      	ldr	r3, [r3, #32]
 8107166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107168:	687b      	ldr	r3, [r7, #4]
 810716a:	685b      	ldr	r3, [r3, #4]
 810716c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810716e:	687b      	ldr	r3, [r7, #4]
 8107170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8107174:	68fb      	ldr	r3, [r7, #12]
 8107176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810717e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107180:	683b      	ldr	r3, [r7, #0]
 8107182:	681b      	ldr	r3, [r3, #0]
 8107184:	021b      	lsls	r3, r3, #8
 8107186:	68fa      	ldr	r2, [r7, #12]
 8107188:	4313      	orrs	r3, r2
 810718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810718c:	693b      	ldr	r3, [r7, #16]
 810718e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8107192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8107194:	683b      	ldr	r3, [r7, #0]
 8107196:	689b      	ldr	r3, [r3, #8]
 8107198:	051b      	lsls	r3, r3, #20
 810719a:	693a      	ldr	r2, [r7, #16]
 810719c:	4313      	orrs	r3, r2
 810719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81071a0:	687b      	ldr	r3, [r7, #4]
 81071a2:	4a18      	ldr	r2, [pc, #96]	; (8107204 <TIM_OC6_SetConfig+0xb8>)
 81071a4:	4293      	cmp	r3, r2
 81071a6:	d00f      	beq.n	81071c8 <TIM_OC6_SetConfig+0x7c>
 81071a8:	687b      	ldr	r3, [r7, #4]
 81071aa:	4a17      	ldr	r2, [pc, #92]	; (8107208 <TIM_OC6_SetConfig+0xbc>)
 81071ac:	4293      	cmp	r3, r2
 81071ae:	d00b      	beq.n	81071c8 <TIM_OC6_SetConfig+0x7c>
 81071b0:	687b      	ldr	r3, [r7, #4]
 81071b2:	4a16      	ldr	r2, [pc, #88]	; (810720c <TIM_OC6_SetConfig+0xc0>)
 81071b4:	4293      	cmp	r3, r2
 81071b6:	d007      	beq.n	81071c8 <TIM_OC6_SetConfig+0x7c>
 81071b8:	687b      	ldr	r3, [r7, #4]
 81071ba:	4a15      	ldr	r2, [pc, #84]	; (8107210 <TIM_OC6_SetConfig+0xc4>)
 81071bc:	4293      	cmp	r3, r2
 81071be:	d003      	beq.n	81071c8 <TIM_OC6_SetConfig+0x7c>
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	4a14      	ldr	r2, [pc, #80]	; (8107214 <TIM_OC6_SetConfig+0xc8>)
 81071c4:	4293      	cmp	r3, r2
 81071c6:	d109      	bne.n	81071dc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81071c8:	697b      	ldr	r3, [r7, #20]
 81071ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81071ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81071d0:	683b      	ldr	r3, [r7, #0]
 81071d2:	695b      	ldr	r3, [r3, #20]
 81071d4:	029b      	lsls	r3, r3, #10
 81071d6:	697a      	ldr	r2, [r7, #20]
 81071d8:	4313      	orrs	r3, r2
 81071da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81071dc:	687b      	ldr	r3, [r7, #4]
 81071de:	697a      	ldr	r2, [r7, #20]
 81071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81071e2:	687b      	ldr	r3, [r7, #4]
 81071e4:	68fa      	ldr	r2, [r7, #12]
 81071e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 81071e8:	683b      	ldr	r3, [r7, #0]
 81071ea:	685a      	ldr	r2, [r3, #4]
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81071f0:	687b      	ldr	r3, [r7, #4]
 81071f2:	693a      	ldr	r2, [r7, #16]
 81071f4:	621a      	str	r2, [r3, #32]
}
 81071f6:	bf00      	nop
 81071f8:	371c      	adds	r7, #28
 81071fa:	46bd      	mov	sp, r7
 81071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107200:	4770      	bx	lr
 8107202:	bf00      	nop
 8107204:	40010000 	.word	0x40010000
 8107208:	40010400 	.word	0x40010400
 810720c:	40014000 	.word	0x40014000
 8107210:	40014400 	.word	0x40014400
 8107214:	40014800 	.word	0x40014800

08107218 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8107218:	b480      	push	{r7}
 810721a:	b087      	sub	sp, #28
 810721c:	af00      	add	r7, sp, #0
 810721e:	60f8      	str	r0, [r7, #12]
 8107220:	60b9      	str	r1, [r7, #8]
 8107222:	607a      	str	r2, [r7, #4]
 8107224:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107226:	68fb      	ldr	r3, [r7, #12]
 8107228:	6a1b      	ldr	r3, [r3, #32]
 810722a:	f023 0201 	bic.w	r2, r3, #1
 810722e:	68fb      	ldr	r3, [r7, #12]
 8107230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107232:	68fb      	ldr	r3, [r7, #12]
 8107234:	699b      	ldr	r3, [r3, #24]
 8107236:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107238:	68fb      	ldr	r3, [r7, #12]
 810723a:	6a1b      	ldr	r3, [r3, #32]
 810723c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810723e:	68fb      	ldr	r3, [r7, #12]
 8107240:	4a28      	ldr	r2, [pc, #160]	; (81072e4 <TIM_TI1_SetConfig+0xcc>)
 8107242:	4293      	cmp	r3, r2
 8107244:	d01b      	beq.n	810727e <TIM_TI1_SetConfig+0x66>
 8107246:	68fb      	ldr	r3, [r7, #12]
 8107248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810724c:	d017      	beq.n	810727e <TIM_TI1_SetConfig+0x66>
 810724e:	68fb      	ldr	r3, [r7, #12]
 8107250:	4a25      	ldr	r2, [pc, #148]	; (81072e8 <TIM_TI1_SetConfig+0xd0>)
 8107252:	4293      	cmp	r3, r2
 8107254:	d013      	beq.n	810727e <TIM_TI1_SetConfig+0x66>
 8107256:	68fb      	ldr	r3, [r7, #12]
 8107258:	4a24      	ldr	r2, [pc, #144]	; (81072ec <TIM_TI1_SetConfig+0xd4>)
 810725a:	4293      	cmp	r3, r2
 810725c:	d00f      	beq.n	810727e <TIM_TI1_SetConfig+0x66>
 810725e:	68fb      	ldr	r3, [r7, #12]
 8107260:	4a23      	ldr	r2, [pc, #140]	; (81072f0 <TIM_TI1_SetConfig+0xd8>)
 8107262:	4293      	cmp	r3, r2
 8107264:	d00b      	beq.n	810727e <TIM_TI1_SetConfig+0x66>
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	4a22      	ldr	r2, [pc, #136]	; (81072f4 <TIM_TI1_SetConfig+0xdc>)
 810726a:	4293      	cmp	r3, r2
 810726c:	d007      	beq.n	810727e <TIM_TI1_SetConfig+0x66>
 810726e:	68fb      	ldr	r3, [r7, #12]
 8107270:	4a21      	ldr	r2, [pc, #132]	; (81072f8 <TIM_TI1_SetConfig+0xe0>)
 8107272:	4293      	cmp	r3, r2
 8107274:	d003      	beq.n	810727e <TIM_TI1_SetConfig+0x66>
 8107276:	68fb      	ldr	r3, [r7, #12]
 8107278:	4a20      	ldr	r2, [pc, #128]	; (81072fc <TIM_TI1_SetConfig+0xe4>)
 810727a:	4293      	cmp	r3, r2
 810727c:	d101      	bne.n	8107282 <TIM_TI1_SetConfig+0x6a>
 810727e:	2301      	movs	r3, #1
 8107280:	e000      	b.n	8107284 <TIM_TI1_SetConfig+0x6c>
 8107282:	2300      	movs	r3, #0
 8107284:	2b00      	cmp	r3, #0
 8107286:	d008      	beq.n	810729a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8107288:	697b      	ldr	r3, [r7, #20]
 810728a:	f023 0303 	bic.w	r3, r3, #3
 810728e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8107290:	697a      	ldr	r2, [r7, #20]
 8107292:	687b      	ldr	r3, [r7, #4]
 8107294:	4313      	orrs	r3, r2
 8107296:	617b      	str	r3, [r7, #20]
 8107298:	e003      	b.n	81072a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810729a:	697b      	ldr	r3, [r7, #20]
 810729c:	f043 0301 	orr.w	r3, r3, #1
 81072a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81072a2:	697b      	ldr	r3, [r7, #20]
 81072a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81072a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 81072aa:	683b      	ldr	r3, [r7, #0]
 81072ac:	011b      	lsls	r3, r3, #4
 81072ae:	b2db      	uxtb	r3, r3
 81072b0:	697a      	ldr	r2, [r7, #20]
 81072b2:	4313      	orrs	r3, r2
 81072b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81072b6:	693b      	ldr	r3, [r7, #16]
 81072b8:	f023 030a 	bic.w	r3, r3, #10
 81072bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 81072be:	68bb      	ldr	r3, [r7, #8]
 81072c0:	f003 030a 	and.w	r3, r3, #10
 81072c4:	693a      	ldr	r2, [r7, #16]
 81072c6:	4313      	orrs	r3, r2
 81072c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81072ca:	68fb      	ldr	r3, [r7, #12]
 81072cc:	697a      	ldr	r2, [r7, #20]
 81072ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81072d0:	68fb      	ldr	r3, [r7, #12]
 81072d2:	693a      	ldr	r2, [r7, #16]
 81072d4:	621a      	str	r2, [r3, #32]
}
 81072d6:	bf00      	nop
 81072d8:	371c      	adds	r7, #28
 81072da:	46bd      	mov	sp, r7
 81072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072e0:	4770      	bx	lr
 81072e2:	bf00      	nop
 81072e4:	40010000 	.word	0x40010000
 81072e8:	40000400 	.word	0x40000400
 81072ec:	40000800 	.word	0x40000800
 81072f0:	40000c00 	.word	0x40000c00
 81072f4:	40010400 	.word	0x40010400
 81072f8:	40001800 	.word	0x40001800
 81072fc:	40014000 	.word	0x40014000

08107300 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8107300:	b480      	push	{r7}
 8107302:	b087      	sub	sp, #28
 8107304:	af00      	add	r7, sp, #0
 8107306:	60f8      	str	r0, [r7, #12]
 8107308:	60b9      	str	r1, [r7, #8]
 810730a:	607a      	str	r2, [r7, #4]
 810730c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810730e:	68fb      	ldr	r3, [r7, #12]
 8107310:	6a1b      	ldr	r3, [r3, #32]
 8107312:	f023 0210 	bic.w	r2, r3, #16
 8107316:	68fb      	ldr	r3, [r7, #12]
 8107318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810731a:	68fb      	ldr	r3, [r7, #12]
 810731c:	699b      	ldr	r3, [r3, #24]
 810731e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107320:	68fb      	ldr	r3, [r7, #12]
 8107322:	6a1b      	ldr	r3, [r3, #32]
 8107324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8107326:	697b      	ldr	r3, [r7, #20]
 8107328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810732c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810732e:	687b      	ldr	r3, [r7, #4]
 8107330:	021b      	lsls	r3, r3, #8
 8107332:	697a      	ldr	r2, [r7, #20]
 8107334:	4313      	orrs	r3, r2
 8107336:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8107338:	697b      	ldr	r3, [r7, #20]
 810733a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810733e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8107340:	683b      	ldr	r3, [r7, #0]
 8107342:	031b      	lsls	r3, r3, #12
 8107344:	b29b      	uxth	r3, r3
 8107346:	697a      	ldr	r2, [r7, #20]
 8107348:	4313      	orrs	r3, r2
 810734a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810734c:	693b      	ldr	r3, [r7, #16]
 810734e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8107352:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8107354:	68bb      	ldr	r3, [r7, #8]
 8107356:	011b      	lsls	r3, r3, #4
 8107358:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 810735c:	693a      	ldr	r2, [r7, #16]
 810735e:	4313      	orrs	r3, r2
 8107360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8107362:	68fb      	ldr	r3, [r7, #12]
 8107364:	697a      	ldr	r2, [r7, #20]
 8107366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107368:	68fb      	ldr	r3, [r7, #12]
 810736a:	693a      	ldr	r2, [r7, #16]
 810736c:	621a      	str	r2, [r3, #32]
}
 810736e:	bf00      	nop
 8107370:	371c      	adds	r7, #28
 8107372:	46bd      	mov	sp, r7
 8107374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107378:	4770      	bx	lr

0810737a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810737a:	b480      	push	{r7}
 810737c:	b087      	sub	sp, #28
 810737e:	af00      	add	r7, sp, #0
 8107380:	60f8      	str	r0, [r7, #12]
 8107382:	60b9      	str	r1, [r7, #8]
 8107384:	607a      	str	r2, [r7, #4]
 8107386:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107388:	68fb      	ldr	r3, [r7, #12]
 810738a:	6a1b      	ldr	r3, [r3, #32]
 810738c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107390:	68fb      	ldr	r3, [r7, #12]
 8107392:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8107394:	68fb      	ldr	r3, [r7, #12]
 8107396:	69db      	ldr	r3, [r3, #28]
 8107398:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810739a:	68fb      	ldr	r3, [r7, #12]
 810739c:	6a1b      	ldr	r3, [r3, #32]
 810739e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 81073a0:	697b      	ldr	r3, [r7, #20]
 81073a2:	f023 0303 	bic.w	r3, r3, #3
 81073a6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 81073a8:	697a      	ldr	r2, [r7, #20]
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	4313      	orrs	r3, r2
 81073ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 81073b0:	697b      	ldr	r3, [r7, #20]
 81073b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81073b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 81073b8:	683b      	ldr	r3, [r7, #0]
 81073ba:	011b      	lsls	r3, r3, #4
 81073bc:	b2db      	uxtb	r3, r3
 81073be:	697a      	ldr	r2, [r7, #20]
 81073c0:	4313      	orrs	r3, r2
 81073c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 81073c4:	693b      	ldr	r3, [r7, #16]
 81073c6:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 81073ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 81073cc:	68bb      	ldr	r3, [r7, #8]
 81073ce:	021b      	lsls	r3, r3, #8
 81073d0:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 81073d4:	693a      	ldr	r2, [r7, #16]
 81073d6:	4313      	orrs	r3, r2
 81073d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 81073da:	68fb      	ldr	r3, [r7, #12]
 81073dc:	697a      	ldr	r2, [r7, #20]
 81073de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 81073e0:	68fb      	ldr	r3, [r7, #12]
 81073e2:	693a      	ldr	r2, [r7, #16]
 81073e4:	621a      	str	r2, [r3, #32]
}
 81073e6:	bf00      	nop
 81073e8:	371c      	adds	r7, #28
 81073ea:	46bd      	mov	sp, r7
 81073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073f0:	4770      	bx	lr

081073f2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81073f2:	b480      	push	{r7}
 81073f4:	b087      	sub	sp, #28
 81073f6:	af00      	add	r7, sp, #0
 81073f8:	60f8      	str	r0, [r7, #12]
 81073fa:	60b9      	str	r1, [r7, #8]
 81073fc:	607a      	str	r2, [r7, #4]
 81073fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107400:	68fb      	ldr	r3, [r7, #12]
 8107402:	6a1b      	ldr	r3, [r3, #32]
 8107404:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810740c:	68fb      	ldr	r3, [r7, #12]
 810740e:	69db      	ldr	r3, [r3, #28]
 8107410:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107412:	68fb      	ldr	r3, [r7, #12]
 8107414:	6a1b      	ldr	r3, [r3, #32]
 8107416:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8107418:	697b      	ldr	r3, [r7, #20]
 810741a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810741e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	021b      	lsls	r3, r3, #8
 8107424:	697a      	ldr	r2, [r7, #20]
 8107426:	4313      	orrs	r3, r2
 8107428:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810742a:	697b      	ldr	r3, [r7, #20]
 810742c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107430:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8107432:	683b      	ldr	r3, [r7, #0]
 8107434:	031b      	lsls	r3, r3, #12
 8107436:	b29b      	uxth	r3, r3
 8107438:	697a      	ldr	r2, [r7, #20]
 810743a:	4313      	orrs	r3, r2
 810743c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810743e:	693b      	ldr	r3, [r7, #16]
 8107440:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8107444:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8107446:	68bb      	ldr	r3, [r7, #8]
 8107448:	031b      	lsls	r3, r3, #12
 810744a:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 810744e:	693a      	ldr	r2, [r7, #16]
 8107450:	4313      	orrs	r3, r2
 8107452:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8107454:	68fb      	ldr	r3, [r7, #12]
 8107456:	697a      	ldr	r2, [r7, #20]
 8107458:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810745a:	68fb      	ldr	r3, [r7, #12]
 810745c:	693a      	ldr	r2, [r7, #16]
 810745e:	621a      	str	r2, [r3, #32]
}
 8107460:	bf00      	nop
 8107462:	371c      	adds	r7, #28
 8107464:	46bd      	mov	sp, r7
 8107466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810746a:	4770      	bx	lr

0810746c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810746c:	b480      	push	{r7}
 810746e:	b085      	sub	sp, #20
 8107470:	af00      	add	r7, sp, #0
 8107472:	6078      	str	r0, [r7, #4]
 8107474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8107476:	687b      	ldr	r3, [r7, #4]
 8107478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810747c:	2b01      	cmp	r3, #1
 810747e:	d101      	bne.n	8107484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107480:	2302      	movs	r3, #2
 8107482:	e06d      	b.n	8107560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	2201      	movs	r2, #1
 8107488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810748c:	687b      	ldr	r3, [r7, #4]
 810748e:	2202      	movs	r2, #2
 8107490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	681b      	ldr	r3, [r3, #0]
 8107498:	685b      	ldr	r3, [r3, #4]
 810749a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810749c:	687b      	ldr	r3, [r7, #4]
 810749e:	681b      	ldr	r3, [r3, #0]
 81074a0:	689b      	ldr	r3, [r3, #8]
 81074a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	4a30      	ldr	r2, [pc, #192]	; (810756c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81074aa:	4293      	cmp	r3, r2
 81074ac:	d004      	beq.n	81074b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81074ae:	687b      	ldr	r3, [r7, #4]
 81074b0:	681b      	ldr	r3, [r3, #0]
 81074b2:	4a2f      	ldr	r2, [pc, #188]	; (8107570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81074b4:	4293      	cmp	r3, r2
 81074b6:	d108      	bne.n	81074ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81074b8:	68fb      	ldr	r3, [r7, #12]
 81074ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81074be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81074c0:	683b      	ldr	r3, [r7, #0]
 81074c2:	685b      	ldr	r3, [r3, #4]
 81074c4:	68fa      	ldr	r2, [r7, #12]
 81074c6:	4313      	orrs	r3, r2
 81074c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81074ca:	68fb      	ldr	r3, [r7, #12]
 81074cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81074d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81074d2:	683b      	ldr	r3, [r7, #0]
 81074d4:	681b      	ldr	r3, [r3, #0]
 81074d6:	68fa      	ldr	r2, [r7, #12]
 81074d8:	4313      	orrs	r3, r2
 81074da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81074dc:	687b      	ldr	r3, [r7, #4]
 81074de:	681b      	ldr	r3, [r3, #0]
 81074e0:	68fa      	ldr	r2, [r7, #12]
 81074e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81074e4:	687b      	ldr	r3, [r7, #4]
 81074e6:	681b      	ldr	r3, [r3, #0]
 81074e8:	4a20      	ldr	r2, [pc, #128]	; (810756c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81074ea:	4293      	cmp	r3, r2
 81074ec:	d022      	beq.n	8107534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81074ee:	687b      	ldr	r3, [r7, #4]
 81074f0:	681b      	ldr	r3, [r3, #0]
 81074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81074f6:	d01d      	beq.n	8107534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81074f8:	687b      	ldr	r3, [r7, #4]
 81074fa:	681b      	ldr	r3, [r3, #0]
 81074fc:	4a1d      	ldr	r2, [pc, #116]	; (8107574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 81074fe:	4293      	cmp	r3, r2
 8107500:	d018      	beq.n	8107534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107502:	687b      	ldr	r3, [r7, #4]
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	4a1c      	ldr	r2, [pc, #112]	; (8107578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107508:	4293      	cmp	r3, r2
 810750a:	d013      	beq.n	8107534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	4a1a      	ldr	r2, [pc, #104]	; (810757c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8107512:	4293      	cmp	r3, r2
 8107514:	d00e      	beq.n	8107534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	681b      	ldr	r3, [r3, #0]
 810751a:	4a15      	ldr	r2, [pc, #84]	; (8107570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810751c:	4293      	cmp	r3, r2
 810751e:	d009      	beq.n	8107534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	681b      	ldr	r3, [r3, #0]
 8107524:	4a16      	ldr	r2, [pc, #88]	; (8107580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107526:	4293      	cmp	r3, r2
 8107528:	d004      	beq.n	8107534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	681b      	ldr	r3, [r3, #0]
 810752e:	4a15      	ldr	r2, [pc, #84]	; (8107584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107530:	4293      	cmp	r3, r2
 8107532:	d10c      	bne.n	810754e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107534:	68bb      	ldr	r3, [r7, #8]
 8107536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810753a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810753c:	683b      	ldr	r3, [r7, #0]
 810753e:	689b      	ldr	r3, [r3, #8]
 8107540:	68ba      	ldr	r2, [r7, #8]
 8107542:	4313      	orrs	r3, r2
 8107544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107546:	687b      	ldr	r3, [r7, #4]
 8107548:	681b      	ldr	r3, [r3, #0]
 810754a:	68ba      	ldr	r2, [r7, #8]
 810754c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810754e:	687b      	ldr	r3, [r7, #4]
 8107550:	2201      	movs	r2, #1
 8107552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107556:	687b      	ldr	r3, [r7, #4]
 8107558:	2200      	movs	r2, #0
 810755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810755e:	2300      	movs	r3, #0
}
 8107560:	4618      	mov	r0, r3
 8107562:	3714      	adds	r7, #20
 8107564:	46bd      	mov	sp, r7
 8107566:	f85d 7b04 	ldr.w	r7, [sp], #4
 810756a:	4770      	bx	lr
 810756c:	40010000 	.word	0x40010000
 8107570:	40010400 	.word	0x40010400
 8107574:	40000400 	.word	0x40000400
 8107578:	40000800 	.word	0x40000800
 810757c:	40000c00 	.word	0x40000c00
 8107580:	40001800 	.word	0x40001800
 8107584:	40014000 	.word	0x40014000

08107588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107588:	b480      	push	{r7}
 810758a:	b085      	sub	sp, #20
 810758c:	af00      	add	r7, sp, #0
 810758e:	6078      	str	r0, [r7, #4]
 8107590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8107592:	2300      	movs	r3, #0
 8107594:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810759c:	2b01      	cmp	r3, #1
 810759e:	d101      	bne.n	81075a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81075a0:	2302      	movs	r3, #2
 81075a2:	e065      	b.n	8107670 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81075a4:	687b      	ldr	r3, [r7, #4]
 81075a6:	2201      	movs	r2, #1
 81075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81075ac:	68fb      	ldr	r3, [r7, #12]
 81075ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81075b2:	683b      	ldr	r3, [r7, #0]
 81075b4:	68db      	ldr	r3, [r3, #12]
 81075b6:	4313      	orrs	r3, r2
 81075b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 81075ba:	68fb      	ldr	r3, [r7, #12]
 81075bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81075c0:	683b      	ldr	r3, [r7, #0]
 81075c2:	689b      	ldr	r3, [r3, #8]
 81075c4:	4313      	orrs	r3, r2
 81075c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81075c8:	68fb      	ldr	r3, [r7, #12]
 81075ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 81075ce:	683b      	ldr	r3, [r7, #0]
 81075d0:	685b      	ldr	r3, [r3, #4]
 81075d2:	4313      	orrs	r3, r2
 81075d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81075d6:	68fb      	ldr	r3, [r7, #12]
 81075d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 81075dc:	683b      	ldr	r3, [r7, #0]
 81075de:	681b      	ldr	r3, [r3, #0]
 81075e0:	4313      	orrs	r3, r2
 81075e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 81075e4:	68fb      	ldr	r3, [r7, #12]
 81075e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 81075ea:	683b      	ldr	r3, [r7, #0]
 81075ec:	691b      	ldr	r3, [r3, #16]
 81075ee:	4313      	orrs	r3, r2
 81075f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 81075f2:	68fb      	ldr	r3, [r7, #12]
 81075f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 81075f8:	683b      	ldr	r3, [r7, #0]
 81075fa:	695b      	ldr	r3, [r3, #20]
 81075fc:	4313      	orrs	r3, r2
 81075fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107600:	68fb      	ldr	r3, [r7, #12]
 8107602:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107606:	683b      	ldr	r3, [r7, #0]
 8107608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810760a:	4313      	orrs	r3, r2
 810760c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810760e:	68fb      	ldr	r3, [r7, #12]
 8107610:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107614:	683b      	ldr	r3, [r7, #0]
 8107616:	699b      	ldr	r3, [r3, #24]
 8107618:	041b      	lsls	r3, r3, #16
 810761a:	4313      	orrs	r3, r2
 810761c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810761e:	687b      	ldr	r3, [r7, #4]
 8107620:	681b      	ldr	r3, [r3, #0]
 8107622:	4a16      	ldr	r2, [pc, #88]	; (810767c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107624:	4293      	cmp	r3, r2
 8107626:	d004      	beq.n	8107632 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	681b      	ldr	r3, [r3, #0]
 810762c:	4a14      	ldr	r2, [pc, #80]	; (8107680 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810762e:	4293      	cmp	r3, r2
 8107630:	d115      	bne.n	810765e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107632:	68fb      	ldr	r3, [r7, #12]
 8107634:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107638:	683b      	ldr	r3, [r7, #0]
 810763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810763c:	051b      	lsls	r3, r3, #20
 810763e:	4313      	orrs	r3, r2
 8107640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107642:	68fb      	ldr	r3, [r7, #12]
 8107644:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107648:	683b      	ldr	r3, [r7, #0]
 810764a:	69db      	ldr	r3, [r3, #28]
 810764c:	4313      	orrs	r3, r2
 810764e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107650:	68fb      	ldr	r3, [r7, #12]
 8107652:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8107656:	683b      	ldr	r3, [r7, #0]
 8107658:	6a1b      	ldr	r3, [r3, #32]
 810765a:	4313      	orrs	r3, r2
 810765c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810765e:	687b      	ldr	r3, [r7, #4]
 8107660:	681b      	ldr	r3, [r3, #0]
 8107662:	68fa      	ldr	r2, [r7, #12]
 8107664:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8107666:	687b      	ldr	r3, [r7, #4]
 8107668:	2200      	movs	r2, #0
 810766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 810766e:	2300      	movs	r3, #0
}
 8107670:	4618      	mov	r0, r3
 8107672:	3714      	adds	r7, #20
 8107674:	46bd      	mov	sp, r7
 8107676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810767a:	4770      	bx	lr
 810767c:	40010000 	.word	0x40010000
 8107680:	40010400 	.word	0x40010400

08107684 <__libc_init_array>:
 8107684:	b570      	push	{r4, r5, r6, lr}
 8107686:	4d0d      	ldr	r5, [pc, #52]	; (81076bc <__libc_init_array+0x38>)
 8107688:	4c0d      	ldr	r4, [pc, #52]	; (81076c0 <__libc_init_array+0x3c>)
 810768a:	1b64      	subs	r4, r4, r5
 810768c:	10a4      	asrs	r4, r4, #2
 810768e:	2600      	movs	r6, #0
 8107690:	42a6      	cmp	r6, r4
 8107692:	d109      	bne.n	81076a8 <__libc_init_array+0x24>
 8107694:	4d0b      	ldr	r5, [pc, #44]	; (81076c4 <__libc_init_array+0x40>)
 8107696:	4c0c      	ldr	r4, [pc, #48]	; (81076c8 <__libc_init_array+0x44>)
 8107698:	f000 f820 	bl	81076dc <_init>
 810769c:	1b64      	subs	r4, r4, r5
 810769e:	10a4      	asrs	r4, r4, #2
 81076a0:	2600      	movs	r6, #0
 81076a2:	42a6      	cmp	r6, r4
 81076a4:	d105      	bne.n	81076b2 <__libc_init_array+0x2e>
 81076a6:	bd70      	pop	{r4, r5, r6, pc}
 81076a8:	f855 3b04 	ldr.w	r3, [r5], #4
 81076ac:	4798      	blx	r3
 81076ae:	3601      	adds	r6, #1
 81076b0:	e7ee      	b.n	8107690 <__libc_init_array+0xc>
 81076b2:	f855 3b04 	ldr.w	r3, [r5], #4
 81076b6:	4798      	blx	r3
 81076b8:	3601      	adds	r6, #1
 81076ba:	e7f2      	b.n	81076a2 <__libc_init_array+0x1e>
 81076bc:	08107704 	.word	0x08107704
 81076c0:	08107704 	.word	0x08107704
 81076c4:	08107704 	.word	0x08107704
 81076c8:	08107708 	.word	0x08107708

081076cc <memset>:
 81076cc:	4402      	add	r2, r0
 81076ce:	4603      	mov	r3, r0
 81076d0:	4293      	cmp	r3, r2
 81076d2:	d100      	bne.n	81076d6 <memset+0xa>
 81076d4:	4770      	bx	lr
 81076d6:	f803 1b01 	strb.w	r1, [r3], #1
 81076da:	e7f9      	b.n	81076d0 <memset+0x4>

081076dc <_init>:
 81076dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81076de:	bf00      	nop
 81076e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81076e2:	bc08      	pop	{r3}
 81076e4:	469e      	mov	lr, r3
 81076e6:	4770      	bx	lr

081076e8 <_fini>:
 81076e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81076ea:	bf00      	nop
 81076ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81076ee:	bc08      	pop	{r3}
 81076f0:	469e      	mov	lr, r3
 81076f2:	4770      	bx	lr
