
sdmmc_h7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f730  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800f9d0  0800f9d0  0001f9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fcfc  0800fcfc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800fcfc  0800fcfc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fcfc  0800fcfc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fcfc  0800fcfc  0001fcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd00  0800fd00  0001fd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800fd04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008aa4  24000078  0800fd7c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  24008b1c  0800fd7c  00028b1c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002caa4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000531e  00000000  00000000  0004cb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e80  00000000  00000000  00051e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  00053ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004c5b6  00000000  00000000  00055938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000276da  00000000  00000000  000a1eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001c3c3f  00000000  00000000  000c95c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0028d207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008868  00000000  00000000  0028d258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f9b8 	.word	0x0800f9b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800f9b8 	.word	0x0800f9b8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000394:	4b3d      	ldr	r3, [pc, #244]	; (800048c <SystemInit+0xfc>)
 8000396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039a:	4a3c      	ldr	r2, [pc, #240]	; (800048c <SystemInit+0xfc>)
 800039c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003a4:	4b39      	ldr	r3, [pc, #228]	; (800048c <SystemInit+0xfc>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a38      	ldr	r2, [pc, #224]	; (800048c <SystemInit+0xfc>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003b0:	4b37      	ldr	r3, [pc, #220]	; (8000490 <SystemInit+0x100>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	2b06      	cmp	r3, #6
 80003ba:	d807      	bhi.n	80003cc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003bc:	4b34      	ldr	r3, [pc, #208]	; (8000490 <SystemInit+0x100>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f023 030f 	bic.w	r3, r3, #15
 80003c4:	4a32      	ldr	r2, [pc, #200]	; (8000490 <SystemInit+0x100>)
 80003c6:	f043 0307 	orr.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003cc:	4b31      	ldr	r3, [pc, #196]	; (8000494 <SystemInit+0x104>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a30      	ldr	r2, [pc, #192]	; (8000494 <SystemInit+0x104>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003d8:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <SystemInit+0x104>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <SystemInit+0x104>)
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	492c      	ldr	r1, [pc, #176]	; (8000494 <SystemInit+0x104>)
 80003e4:	4b2c      	ldr	r3, [pc, #176]	; (8000498 <SystemInit+0x108>)
 80003e6:	4013      	ands	r3, r2
 80003e8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ea:	4b29      	ldr	r3, [pc, #164]	; (8000490 <SystemInit+0x100>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 0308 	and.w	r3, r3, #8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d007      	beq.n	8000406 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003f6:	4b26      	ldr	r3, [pc, #152]	; (8000490 <SystemInit+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f023 030f 	bic.w	r3, r3, #15
 80003fe:	4a24      	ldr	r2, [pc, #144]	; (8000490 <SystemInit+0x100>)
 8000400:	f043 0307 	orr.w	r3, r3, #7
 8000404:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <SystemInit+0x104>)
 8000408:	2200      	movs	r2, #0
 800040a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800040c:	4b21      	ldr	r3, [pc, #132]	; (8000494 <SystemInit+0x104>)
 800040e:	2200      	movs	r2, #0
 8000410:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <SystemInit+0x104>)
 8000414:	2200      	movs	r2, #0
 8000416:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000418:	4b1e      	ldr	r3, [pc, #120]	; (8000494 <SystemInit+0x104>)
 800041a:	4a20      	ldr	r2, [pc, #128]	; (800049c <SystemInit+0x10c>)
 800041c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <SystemInit+0x104>)
 8000420:	4a1f      	ldr	r2, [pc, #124]	; (80004a0 <SystemInit+0x110>)
 8000422:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <SystemInit+0x104>)
 8000426:	4a1f      	ldr	r2, [pc, #124]	; (80004a4 <SystemInit+0x114>)
 8000428:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <SystemInit+0x104>)
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <SystemInit+0x104>)
 8000432:	4a1c      	ldr	r2, [pc, #112]	; (80004a4 <SystemInit+0x114>)
 8000434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <SystemInit+0x104>)
 8000438:	2200      	movs	r2, #0
 800043a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <SystemInit+0x104>)
 800043e:	4a19      	ldr	r2, [pc, #100]	; (80004a4 <SystemInit+0x114>)
 8000440:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <SystemInit+0x104>)
 8000444:	2200      	movs	r2, #0
 8000446:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <SystemInit+0x104>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a11      	ldr	r2, [pc, #68]	; (8000494 <SystemInit+0x104>)
 800044e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000452:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <SystemInit+0x104>)
 8000456:	2200      	movs	r2, #0
 8000458:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800045a:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <SystemInit+0x118>)
 800045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045e:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <SystemInit+0x118>)
 8000460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000464:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000466:	4b11      	ldr	r3, [pc, #68]	; (80004ac <SystemInit+0x11c>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <SystemInit+0x120>)
 800046c:	4013      	ands	r3, r2
 800046e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000472:	d202      	bcs.n	800047a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <SystemInit+0x124>)
 8000476:	2201      	movs	r2, #1
 8000478:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <SystemInit+0x128>)
 800047c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000480:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	e000ed00 	.word	0xe000ed00
 8000490:	52002000 	.word	0x52002000
 8000494:	58024400 	.word	0x58024400
 8000498:	eaf6ed7f 	.word	0xeaf6ed7f
 800049c:	02020200 	.word	0x02020200
 80004a0:	01ff0000 	.word	0x01ff0000
 80004a4:	01010280 	.word	0x01010280
 80004a8:	580000c0 	.word	0x580000c0
 80004ac:	5c001000 	.word	0x5c001000
 80004b0:	ffff0000 	.word	0xffff0000
 80004b4:	51008108 	.word	0x51008108
 80004b8:	52004000 	.word	0x52004000

080004bc <BSPInit>:

static bool is_init_ = false;
char workBuffer[FF_MAX_SS];

static void BSPInit()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	if(!(is_init_)) BSP_SD_Init();
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <BSPInit+0x2c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	f083 0301 	eor.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <BSPInit+0x16>
 80004ce:	f008 fa3d 	bl	800894c <BSP_SD_Init>

	if(BSP_SD_IsDetected()) is_init_ = true;
 80004d2:	f008 fac7 	bl	8008a64 <BSP_SD_IsDetected>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d003      	beq.n	80004e4 <BSPInit+0x28>
 80004dc:	4b02      	ldr	r3, [pc, #8]	; (80004e8 <BSPInit+0x2c>)
 80004de:	2201      	movs	r2, #1
 80004e0:	701a      	strb	r2, [r3, #0]

	return;
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
}
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	240004f0 	.word	0x240004f0

080004ec <FatFsInit>:



void FatFsInit()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80004f2:	4911      	ldr	r1, [pc, #68]	; (8000538 <FatFsInit+0x4c>)
 80004f4:	4811      	ldr	r0, [pc, #68]	; (800053c <FatFsInit+0x50>)
 80004f6:	f00b fc15 	bl	800bd24 <FATFS_LinkDriver>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d115      	bne.n	800052c <FatFsInit+0x40>
	{
		BSPInit();
 8000500:	f7ff ffdc 	bl	80004bc <BSPInit>

		if(BSP_SD_IsDetected())
 8000504:	f008 faae 	bl	8008a64 <BSP_SD_IsDetected>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d00e      	beq.n	800052c <FatFsInit+0x40>
		{
			FRESULT res;

			res = f_mkfs(SDPath, 0, workBuffer, sizeof(workBuffer));
 800050e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <FatFsInit+0x54>)
 8000514:	2100      	movs	r1, #0
 8000516:	4808      	ldr	r0, [pc, #32]	; (8000538 <FatFsInit+0x4c>)
 8000518:	f00a ff7c 	bl	800b414 <f_mkfs>
 800051c:	4603      	mov	r3, r0
 800051e:	71fb      	strb	r3, [r7, #7]

			if(res != FR_OK) return; // Error_Handler();
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d104      	bne.n	8000530 <FatFsInit+0x44>

			printf("Successfully formatted\n");
 8000526:	4807      	ldr	r0, [pc, #28]	; (8000544 <FatFsInit+0x58>)
 8000528:	f00e fa2a 	bl	800e980 <puts>
		}

	}

	return;
 800052c:	bf00      	nop
 800052e:	e000      	b.n	8000532 <FatFsInit+0x46>
			if(res != FR_OK) return; // Error_Handler();
 8000530:	bf00      	nop
}
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	240004ec 	.word	0x240004ec
 800053c:	0800fc20 	.word	0x0800fc20
 8000540:	240004f4 	.word	0x240004f4
 8000544:	0800f9d0 	.word	0x0800f9d0

08000548 <FatFsTest>:



void FatFsTest(const char *filename)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0c6      	sub	sp, #280	; 0x118
 800054c:	af00      	add	r7, sp, #0
 800054e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000552:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000556:	6018      	str	r0, [r3, #0]
  FRESULT res;
  uint32_t written_bytes=0 ,read_bytes= 0;
 8000558:	2300      	movs	r3, #0
 800055a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  char buf[50];
  char readbuf[200] =  {0.};
 8000564:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000568:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	3304      	adds	r3, #4
 8000572:	22c4      	movs	r2, #196	; 0xc4
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f00e f8df 	bl	800e73a <memset>

  int total_byte_ = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  const char *p = "FatFs example for STM32F747i-Dicovery!\r\n";
 8000582:	4b8a      	ldr	r3, [pc, #552]	; (80007ac <FatFsTest+0x264>)
 8000584:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 8000588:	2201      	movs	r2, #1
 800058a:	4989      	ldr	r1, [pc, #548]	; (80007b0 <FatFsTest+0x268>)
 800058c:	4889      	ldr	r0, [pc, #548]	; (80007b4 <FatFsTest+0x26c>)
 800058e:	f00a f911 	bl	800a7b4 <f_mount>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	f040 8104 	bne.w	80007a2 <FatFsTest+0x25a>

  res = f_open(&SDFile, (const char*)filename, FA_CREATE_ALWAYS | FA_WRITE);
 800059a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800059e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80005a2:	220a      	movs	r2, #10
 80005a4:	6819      	ldr	r1, [r3, #0]
 80005a6:	4884      	ldr	r0, [pc, #528]	; (80007b8 <FatFsTest+0x270>)
 80005a8:	f00a f94e 	bl	800a848 <f_open>
 80005ac:	4603      	mov	r3, r0
 80005ae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
  //res = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);

  if(res == FR_OK){
 80005b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f040 80ec 	bne.w	8000794 <FatFsTest+0x24c>
    sprintf(buf, "%s\r\n", p);
 80005bc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80005c0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80005c4:	497d      	ldr	r1, [pc, #500]	; (80007bc <FatFsTest+0x274>)
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00e fa5c 	bl	800ea84 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 80005cc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80005d0:	4618      	mov	r0, r3
 80005d2:	f7ff fe85 	bl	80002e0 <strlen>
 80005d6:	4602      	mov	r2, r0
 80005d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005dc:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80005e0:	4875      	ldr	r0, [pc, #468]	; (80007b8 <FatFsTest+0x270>)
 80005e2:	f00a fbec 	bl	800adbe <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80005e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80005ea:	4619      	mov	r1, r3
 80005ec:	4874      	ldr	r0, [pc, #464]	; (80007c0 <FatFsTest+0x278>)
 80005ee:	f00e f941 	bl	800e874 <iprintf>

    total_byte_ += written_bytes;
 80005f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80005f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80005fa:	4413      	add	r3, r2
 80005fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Filename : %s\r\n", filename);
 8000600:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000604:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000608:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	496d      	ldr	r1, [pc, #436]	; (80007c4 <FatFsTest+0x27c>)
 8000610:	f00e fa38 	bl	800ea84 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 8000614:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fe61 	bl	80002e0 <strlen>
 800061e:	4602      	mov	r2, r0
 8000620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000624:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000628:	4863      	ldr	r0, [pc, #396]	; (80007b8 <FatFsTest+0x270>)
 800062a:	f00a fbc8 	bl	800adbe <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 800062e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000632:	4619      	mov	r1, r3
 8000634:	4862      	ldr	r0, [pc, #392]	; (80007c0 <FatFsTest+0x278>)
 8000636:	f00e f91d 	bl	800e874 <iprintf>

    total_byte_ += written_bytes;
 800063a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800063e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000642:	4413      	add	r3, r2
 8000644:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "Tick : %ld\r\n", HAL_GetTick());
 8000648:	f000 fed8 	bl	80013fc <HAL_GetTick>
 800064c:	4602      	mov	r2, r0
 800064e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000652:	495d      	ldr	r1, [pc, #372]	; (80007c8 <FatFsTest+0x280>)
 8000654:	4618      	mov	r0, r3
 8000656:	f00e fa15 	bl	800ea84 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 800065a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fe3e 	bl	80002e0 <strlen>
 8000664:	4602      	mov	r2, r0
 8000666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800066a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 800066e:	4852      	ldr	r0, [pc, #328]	; (80007b8 <FatFsTest+0x270>)
 8000670:	f00a fba5 	bl	800adbe <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 8000674:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000678:	4619      	mov	r1, r3
 800067a:	4851      	ldr	r0, [pc, #324]	; (80007c0 <FatFsTest+0x278>)
 800067c:	f00e f8fa 	bl	800e874 <iprintf>

    total_byte_ += written_bytes;
 8000680:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000684:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000688:	4413      	add	r3, r2
 800068a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter1 : 3\r\n");
 800068e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000692:	494e      	ldr	r1, [pc, #312]	; (80007cc <FatFsTest+0x284>)
 8000694:	4618      	mov	r0, r3
 8000696:	f00e f9f5 	bl	800ea84 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 800069a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff fe1e 	bl	80002e0 <strlen>
 80006a4:	4602      	mov	r2, r0
 80006a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006aa:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006ae:	4842      	ldr	r0, [pc, #264]	; (80007b8 <FatFsTest+0x270>)
 80006b0:	f00a fb85 	bl	800adbe <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80006b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80006b8:	4619      	mov	r1, r3
 80006ba:	4841      	ldr	r0, [pc, #260]	; (80007c0 <FatFsTest+0x278>)
 80006bc:	f00e f8da 	bl	800e874 <iprintf>

    total_byte_ += written_bytes;
 80006c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80006c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80006c8:	4413      	add	r3, r2
 80006ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    sprintf(buf, "parameter2 : 5\r\n");
 80006ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80006d2:	493f      	ldr	r1, [pc, #252]	; (80007d0 <FatFsTest+0x288>)
 80006d4:	4618      	mov	r0, r3
 80006d6:	f00e f9d5 	bl	800ea84 <siprintf>
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
 80006da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fdfe 	bl	80002e0 <strlen>
 80006e4:	4602      	mov	r2, r0
 80006e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80006ea:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80006ee:	4832      	ldr	r0, [pc, #200]	; (80007b8 <FatFsTest+0x270>)
 80006f0:	f00a fb65 	bl	800adbe <f_write>
    printf("%ld bytes written.\r\n", written_bytes);
 80006f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80006f8:	4619      	mov	r1, r3
 80006fa:	4831      	ldr	r0, [pc, #196]	; (80007c0 <FatFsTest+0x278>)
 80006fc:	f00e f8ba 	bl	800e874 <iprintf>

    total_byte_ += written_bytes;
 8000700:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000704:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000708:	4413      	add	r3, r2
 800070a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    printf("total %d bytes written.\r\n", total_byte_);
 800070e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000712:	4830      	ldr	r0, [pc, #192]	; (80007d4 <FatFsTest+0x28c>)
 8000714:	f00e f8ae 	bl	800e874 <iprintf>

    f_close(&SDFile);
 8000718:	4827      	ldr	r0, [pc, #156]	; (80007b8 <FatFsTest+0x270>)
 800071a:	f00a fd37 	bl	800b18c <f_close>

    res = f_open(&SDFile, (const char*)filename, FA_READ);
 800071e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000722:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000726:	2201      	movs	r2, #1
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	4823      	ldr	r0, [pc, #140]	; (80007b8 <FatFsTest+0x270>)
 800072c:	f00a f88c 	bl	800a848 <f_open>
 8000730:	4603      	mov	r3, r0
 8000732:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    if(res == FR_OK)
 8000736:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800073a:	2b00      	cmp	r3, #0
 800073c:	d123      	bne.n	8000786 <FatFsTest+0x23e>
    {
        printf("\r\n---------------Reading Start-----------------\r\n");
 800073e:	4826      	ldr	r0, [pc, #152]	; (80007d8 <FatFsTest+0x290>)
 8000740:	f00e f91e 	bl	800e980 <puts>
        res = f_read(&SDFile, readbuf, sizeof(readbuf), (unsigned int*)&read_bytes);
 8000744:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000748:	f107 0108 	add.w	r1, r7, #8
 800074c:	22c8      	movs	r2, #200	; 0xc8
 800074e:	481a      	ldr	r0, [pc, #104]	; (80007b8 <FatFsTest+0x270>)
 8000750:	f00a fa02 	bl	800ab58 <f_read>
 8000754:	4603      	mov	r3, r0
 8000756:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

        if(res == FR_OK && read_bytes > 0) printf("%s",readbuf);
 800075a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800075e:	2b00      	cmp	r3, #0
 8000760:	d109      	bne.n	8000776 <FatFsTest+0x22e>
 8000762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000766:	2b00      	cmp	r3, #0
 8000768:	d005      	beq.n	8000776 <FatFsTest+0x22e>
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4619      	mov	r1, r3
 8000770:	481a      	ldr	r0, [pc, #104]	; (80007dc <FatFsTest+0x294>)
 8000772:	f00e f87f 	bl	800e874 <iprintf>

        printf("\r\n---------------Reading End-----------------\r\n");
 8000776:	481a      	ldr	r0, [pc, #104]	; (80007e0 <FatFsTest+0x298>)
 8000778:	f00e f902 	bl	800e980 <puts>

        printf("total read bytes : %d\r\n", total_byte_);
 800077c:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000780:	4818      	ldr	r0, [pc, #96]	; (80007e4 <FatFsTest+0x29c>)
 8000782:	f00e f877 	bl	800e874 <iprintf>
    }



    f_close(&SDFile);
 8000786:	480c      	ldr	r0, [pc, #48]	; (80007b8 <FatFsTest+0x270>)
 8000788:	f00a fd00 	bl	800b18c <f_close>

    printf("SD card Writing is successfully complete!\n");
 800078c:	4816      	ldr	r0, [pc, #88]	; (80007e8 <FatFsTest+0x2a0>)
 800078e:	f00e f8f7 	bl	800e980 <puts>
 8000792:	e007      	b.n	80007a4 <FatFsTest+0x25c>
  }else{
  	printf("[ERROR] f_open failed (%d)\r\n", (int)res);
 8000794:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000798:	4619      	mov	r1, r3
 800079a:	4814      	ldr	r0, [pc, #80]	; (80007ec <FatFsTest+0x2a4>)
 800079c:	f00e f86a 	bl	800e874 <iprintf>
 80007a0:	e000      	b.n	80007a4 <FatFsTest+0x25c>
  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;
 80007a2:	bf00      	nop
  }
}
 80007a4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	0800f9e8 	.word	0x0800f9e8
 80007b0:	240004ec 	.word	0x240004ec
 80007b4:	24000094 	.word	0x24000094
 80007b8:	240002c4 	.word	0x240002c4
 80007bc:	0800fa14 	.word	0x0800fa14
 80007c0:	0800fa1c 	.word	0x0800fa1c
 80007c4:	0800fa34 	.word	0x0800fa34
 80007c8:	0800fa44 	.word	0x0800fa44
 80007cc:	0800fa54 	.word	0x0800fa54
 80007d0:	0800fa68 	.word	0x0800fa68
 80007d4:	0800fa7c 	.word	0x0800fa7c
 80007d8:	0800fa98 	.word	0x0800fa98
 80007dc:	0800facc 	.word	0x0800facc
 80007e0:	0800fad0 	.word	0x0800fad0
 80007e4:	0800fb00 	.word	0x0800fb00
 80007e8:	0800fb18 	.word	0x0800fb18
 80007ec:	0800fb44 	.word	0x0800fb44

080007f0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4a07      	ldr	r2, [pc, #28]	; (8000834 <vApplicationGetIdleTaskMemory+0x2c>)
 8000818:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <vApplicationGetIdleTaskMemory+0x30>)
 800081e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000826:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000828:	bf00      	nop
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	240006f4 	.word	0x240006f4
 8000838:	240007a8 	.word	0x240007a8

0800083c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000844:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000848:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d009      	beq.n	8000868 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000854:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000858:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800085c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <ITM_SendChar+0x2c>
 8000864:	2301      	movs	r3, #1
 8000866:	e000      	b.n	800086a <ITM_SendChar+0x2e>
 8000868:	2300      	movs	r3, #0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d010      	beq.n	8000890 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800086e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <ITM_SendChar+0x4a>
    {
      __NOP();
 8000882:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000884:	e7f3      	b.n	800086e <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000886:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800088a:	687a      	ldr	r2, [r7, #4]
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000890:	687b      	ldr	r3, [r7, #4]
}
 8000892:	4618      	mov	r0, r3
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <_write>:
#ifdef __cplusplus
extern "C" {
#endif

int _write(int file, char* ptr, int len)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b086      	sub	sp, #24
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	60f8      	str	r0, [r7, #12]
 80008a6:	60b9      	str	r1, [r7, #8]
 80008a8:	607a      	str	r2, [r7, #4]
	  (void)file;
	  int DataIdx;

	  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
 80008ae:	697a      	ldr	r2, [r7, #20]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	da0a      	bge.n	80008cc <_write+0x2e>
	  {
		  ITM_SendChar(*ptr++);
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	60ba      	str	r2, [r7, #8]
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffbc 	bl	800083c <ITM_SendChar>
	  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	3301      	adds	r3, #1
 80008c8:	617b      	str	r3, [r7, #20]
 80008ca:	e7f0      	b.n	80008ae <_write+0x10>
	  }
	  return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
	...

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b5b0      	push	{r4, r5, r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80008de:	f000 fae3 	bl	8000ea8 <_ZL10MPU_Configv>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80008e2:	4b59      	ldr	r3, [pc, #356]	; (8000a48 <main+0x170>)
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	bf14      	ite	ne
 80008ee:	2301      	movne	r3, #1
 80008f0:	2300      	moveq	r3, #0
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d11b      	bne.n	8000930 <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008f8:	f3bf 8f4f 	dsb	sy
}
 80008fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008fe:	f3bf 8f6f 	isb	sy
}
 8000902:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000904:	4b50      	ldr	r3, [pc, #320]	; (8000a48 <main+0x170>)
 8000906:	2200      	movs	r2, #0
 8000908:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800090c:	f3bf 8f4f 	dsb	sy
}
 8000910:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000912:	f3bf 8f6f 	isb	sy
}
 8000916:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000918:	4b4b      	ldr	r3, [pc, #300]	; (8000a48 <main+0x170>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	4a4a      	ldr	r2, [pc, #296]	; (8000a48 <main+0x170>)
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000924:	f3bf 8f4f 	dsb	sy
}
 8000928:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800092a:	f3bf 8f6f 	isb	sy
}
 800092e:	e000      	b.n	8000932 <main+0x5a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000930:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000932:	4b45      	ldr	r3, [pc, #276]	; (8000a48 <main+0x170>)
 8000934:	695b      	ldr	r3, [r3, #20]
 8000936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800093a:	2b00      	cmp	r3, #0
 800093c:	bf14      	ite	ne
 800093e:	2301      	movne	r3, #1
 8000940:	2300      	moveq	r3, #0
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d144      	bne.n	80009d2 <main+0xfa>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000948:	4b3f      	ldr	r3, [pc, #252]	; (8000a48 <main+0x170>)
 800094a:	2200      	movs	r2, #0
 800094c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000950:	f3bf 8f4f 	dsb	sy
}
 8000954:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000956:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <main+0x170>)
 8000958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000960:	0b5b      	lsrs	r3, r3, #13
 8000962:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096a:	08db      	lsrs	r3, r3, #3
 800096c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800097a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800097c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800097e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000980:	4931      	ldr	r1, [pc, #196]	; (8000a48 <main+0x170>)
 8000982:	4313      	orrs	r3, r2
 8000984:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098a:	1e5a      	subs	r2, r3, #1
 800098c:	627a      	str	r2, [r7, #36]	; 0x24
 800098e:	2b00      	cmp	r3, #0
 8000990:	bf14      	ite	ne
 8000992:	2301      	movne	r3, #1
 8000994:	2300      	moveq	r3, #0
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d000      	beq.n	800099e <main+0xc6>
      do {
 800099c:	e7e9      	b.n	8000972 <main+0x9a>
    } while(sets-- != 0U);
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	62ba      	str	r2, [r7, #40]	; 0x28
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	bf14      	ite	ne
 80009a8:	2301      	movne	r3, #1
 80009aa:	2300      	moveq	r3, #0
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d000      	beq.n	80009b4 <main+0xdc>
    do {
 80009b2:	e7d9      	b.n	8000968 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 80009b4:	f3bf 8f4f 	dsb	sy
}
 80009b8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <main+0x170>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <main+0x170>)
 80009c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009c6:	f3bf 8f4f 	dsb	sy
}
 80009ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009cc:	f3bf 8f6f 	isb	sy
}
 80009d0:	e000      	b.n	80009d4 <main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009d2:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fcc2 	bl	800135c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f83e 	bl	8000a58 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009dc:	f000 f8d8 	bl	8000b90 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <main+0x174>)
 80009e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e6:	4a19      	ldr	r2, [pc, #100]	; (8000a4c <main+0x174>)
 80009e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <main+0x174>)
 80009f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f001 f9c0 	bl	8001d84 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000a04:	2100      	movs	r1, #0
 8000a06:	2000      	movs	r0, #0
 8000a08:	f001 f9d6 	bl	8001db8 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0c:	f000 f9aa 	bl	8000d64 <_ZL12MX_GPIO_Initv>
  MX_MDMA_Init();
 8000a10:	f000 f93a 	bl	8000c88 <_ZL12MX_MDMA_Initv>
  MX_SDMMC1_SD_Init();
 8000a14:	f000 f910 	bl	8000c38 <_ZL17MX_SDMMC1_SD_Initv>
  MX_FATFS_Init();
 8000a18:	f007 ff88 	bl	800892c <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <main+0x178>)
 8000a1e:	f107 0408 	add.w	r4, r7, #8
 8000a22:	461d      	mov	r5, r3
 8000a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a30:	f107 0308 	add.w	r3, r7, #8
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f00b f9d0 	bl	800bddc <osThreadCreate>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <main+0x17c>)
 8000a40:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a42:	f00b f9a8 	bl	800bd96 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <main+0x16e>
 8000a48:	e000ed00 	.word	0xe000ed00
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	0800fb70 	.word	0x0800fb70
 8000a54:	24001090 	.word	0x24001090

08000a58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	224c      	movs	r2, #76	; 0x4c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00d fe67 	bl	800e73a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00d fe61 	bl	800e73a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a78:	2004      	movs	r0, #4
 8000a7a:	f001 fc3b 	bl	80022f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b3f      	ldr	r3, [pc, #252]	; (8000b80 <_Z18SystemClock_Configv+0x128>)
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	4a3e      	ldr	r2, [pc, #248]	; (8000b80 <_Z18SystemClock_Configv+0x128>)
 8000a88:	f023 0301 	bic.w	r3, r3, #1
 8000a8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a8e:	4b3c      	ldr	r3, [pc, #240]	; (8000b80 <_Z18SystemClock_Configv+0x128>)
 8000a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <_Z18SystemClock_Configv+0x12c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a39      	ldr	r2, [pc, #228]	; (8000b84 <_Z18SystemClock_Configv+0x12c>)
 8000a9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <_Z18SystemClock_Configv+0x12c>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <_Z18SystemClock_Configv+0x12c>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000abc:	bf14      	ite	ne
 8000abe:	2301      	movne	r3, #1
 8000ac0:	2300      	moveq	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d000      	beq.n	8000aca <_Z18SystemClock_Configv+0x72>
 8000ac8:	e7f2      	b.n	8000ab0 <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <_Z18SystemClock_Configv+0x130>)
 8000acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ace:	4a2e      	ldr	r2, [pc, #184]	; (8000b88 <_Z18SystemClock_Configv+0x130>)
 8000ad0:	f023 0303 	bic.w	r3, r3, #3
 8000ad4:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ad6:	230a      	movs	r3, #10
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	2340      	movs	r3, #64	; 0x40
 8000ae0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000af2:	2332      	movs	r3, #50	; 0x32
 8000af4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 fc48 	bl	80023a8 <HAL_RCC_OscConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	bf14      	ite	ne
 8000b1e:	2301      	movne	r3, #1
 8000b20:	2300      	moveq	r3, #0
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000b28:	f000 fa22 	bl	8000f70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	233f      	movs	r3, #63	; 0x3f
 8000b2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2303      	movs	r3, #3
 8000b32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b3c:	2340      	movs	r3, #64	; 0x40
 8000b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b4a:	2340      	movs	r3, #64	; 0x40
 8000b4c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2102      	movs	r1, #2
 8000b52:	4618      	mov	r0, r3
 8000b54:	f002 f882 	bl	8002c5c <HAL_RCC_ClockConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8000b68:	f000 fa02 	bl	8000f70 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b6c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b70:	2100      	movs	r1, #0
 8000b72:	2000      	movs	r0, #0
 8000b74:	f002 fa28 	bl	8002fc8 <HAL_RCC_MCOConfig>
}
 8000b78:	bf00      	nop
 8000b7a:	3770      	adds	r7, #112	; 0x70
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58000400 	.word	0x58000400
 8000b84:	58024800 	.word	0x58024800
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	00000000 	.word	0x00000000

08000b90 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b0b2      	sub	sp, #200	; 0xc8
 8000b94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	22c8      	movs	r2, #200	; 0xc8
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00d fdcc 	bl	800e73a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8000ba2:	a323      	add	r3, pc, #140	; (adr r3, 8000c30 <_Z24PeriphCommonClock_Configv+0xa0>)
 8000ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba8:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SPDIFRX;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000bac:	2304      	movs	r3, #4
 8000bae:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000bb0:	2309      	movs	r3, #9
 8000bb2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bc0:	23c0      	movs	r3, #192	; 0xc0
 8000bc2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bc4:	2320      	movs	r3, #32
 8000bc6:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8000bc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8000bd2:	2309      	movs	r3, #9
 8000bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 1;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000be2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 8000bee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL2;
 8000bfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c02:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000c04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fc46 	bl	80034a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	bf14      	ite	ne
 8000c1a:	2301      	movne	r3, #1
 8000c1c:	2300      	moveq	r3, #0
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <_Z24PeriphCommonClock_Configv+0x98>
  {
    Error_Handler();
 8000c24:	f000 f9a4 	bl	8000f70 <Error_Handler>
  }
}
 8000c28:	bf00      	nop
 8000c2a:	37c8      	adds	r7, #200	; 0xc8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08090100 	.word	0x08090100
 8000c34:	00000000 	.word	0x00000000

08000c38 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c3c:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000c3e:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <_ZL17MX_SDMMC1_SD_Initv+0x4c>)
 8000c40:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000c50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c54:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c62:	4807      	ldr	r0, [pc, #28]	; (8000c80 <_ZL17MX_SDMMC1_SD_Initv+0x48>)
 8000c64:	f005 f95a 	bl	8005f1c <HAL_SD_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	bf14      	ite	ne
 8000c6e:	2301      	movne	r3, #1
 8000c70:	2300      	moveq	r3, #0
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <_ZL17MX_SDMMC1_SD_Initv+0x44>
  {
    Error_Handler();
 8000c78:	f000 f97a 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	24000fa8 	.word	0x24000fa8
 8000c84:	52007000 	.word	0x52007000

08000c88 <_ZL12MX_MDMA_Initv>:
  * Enable MDMA controller clock
  * Configure MDMA for global transfers
  *   hmdma_mdma_channel40_sdmmc1_end_data_0
  */
static void MX_MDMA_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000c8e:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <_ZL12MX_MDMA_Initv+0xd0>)
 8000c90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000c94:	4a30      	ldr	r2, [pc, #192]	; (8000d58 <_ZL12MX_MDMA_Initv+0xd0>)
 8000c96:	f043 0301 	orr.w	r3, r3, #1
 8000c9a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000c9e:	4b2e      	ldr	r3, [pc, #184]	; (8000d58 <_ZL12MX_MDMA_Initv+0xd0>)
 8000ca0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

  /* Configure MDMA channel MDMA_Channel0 */
  /* Configure MDMA request hmdma_mdma_channel40_sdmmc1_end_data_0 on MDMA_Channel0 */
  hmdma_mdma_channel40_sdmmc1_end_data_0.Instance = MDMA_Channel0;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cae:	4a2c      	ldr	r2, [pc, #176]	; (8000d60 <_ZL12MX_MDMA_Initv+0xd8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Request = MDMA_REQUEST_SDMMC1_END_DATA;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cb4:	221d      	movs	r2, #29
 8000cb6:	605a      	str	r2, [r3, #4]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Priority = MDMA_PRIORITY_LOW;
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8000cc4:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	611a      	str	r2, [r3, #16]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	615a      	str	r2, [r3, #20]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestinationInc = MDMA_DEST_INC_BYTE;
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	619a      	str	r2, [r3, #24]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.BufferTransferLength = 1;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.SourceBlockAddressOffset = 0;
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
  hmdma_mdma_channel40_sdmmc1_end_data_0.Init.DestBlockAddressOffset = 0;
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_MDMA_Init(&hmdma_mdma_channel40_sdmmc1_end_data_0) != HAL_OK)
 8000d08:	4814      	ldr	r0, [pc, #80]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000d0a:	f001 f869 	bl	8001de0 <HAL_MDMA_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	bf14      	ite	ne
 8000d14:	2301      	movne	r3, #1
 8000d16:	2300      	moveq	r3, #0
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <_ZL12MX_MDMA_Initv+0x9a>
  {
    Error_Handler();
 8000d1e:	f000 f927 	bl	8000f70 <Error_Handler>
  }

  /* Configure post request address and data masks */
  if (HAL_MDMA_ConfigPostRequestMask(&hmdma_mdma_channel40_sdmmc1_end_data_0, 0, 0) != HAL_OK)
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <_ZL12MX_MDMA_Initv+0xd4>)
 8000d28:	f001 f8a6 	bl	8001e78 <HAL_MDMA_ConfigPostRequestMask>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	bf14      	ite	ne
 8000d32:	2301      	movne	r3, #1
 8000d34:	2300      	moveq	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <_ZL12MX_MDMA_Initv+0xb8>
  {
    Error_Handler();
 8000d3c:	f000 f918 	bl	8000f70 <Error_Handler>
  }

  /* MDMA interrupt initialization */
  /* MDMA_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MDMA_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	207a      	movs	r0, #122	; 0x7a
 8000d46:	f000 fc4d 	bl	80015e4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000d4a:	207a      	movs	r0, #122	; 0x7a
 8000d4c:	f000 fc64 	bl	8001618 <HAL_NVIC_EnableIRQ>

}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	58024400 	.word	0x58024400
 8000d5c:	24001024 	.word	0x24001024
 8000d60:	52000040 	.word	0x52000040

08000d64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d80:	4a3c      	ldr	r2, [pc, #240]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d98:	4b36      	ldr	r3, [pc, #216]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9e:	4a35      	ldr	r2, [pc, #212]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000da8:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db2:	617b      	str	r3, [r7, #20]
 8000db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	4a2d      	ldr	r2, [pc, #180]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000dbe:	f043 0308 	orr.w	r3, r3, #8
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dcc:	f003 0308 	and.w	r3, r3, #8
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <_ZL12MX_GPIO_Initv+0x110>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	480d      	ldr	r0, [pc, #52]	; (8000e78 <_ZL12MX_GPIO_Initv+0x114>)
 8000e44:	f000 fdd6 	bl	80019f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <_ZL12MX_GPIO_Initv+0x118>)
 8000e66:	f000 fdc5 	bl	80019f4 <HAL_GPIO_Init>

}
 8000e6a:	bf00      	nop
 8000e6c:	3730      	adds	r7, #48	; 0x30
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58022000 	.word	0x58022000
 8000e7c:	58020000 	.word	0x58020000

08000e80 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  //MX_LWIP_Init();

   printf("Hello World!\n");
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <_Z16StartDefaultTaskPKv+0x20>)
 8000e8a:	f00d fd79 	bl	800e980 <puts>

   FatFsInit();
 8000e8e:	f7ff fb2d 	bl	80004ec <FatFsInit>

   FatFsTest("test.txt");
 8000e92:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <_Z16StartDefaultTaskPKv+0x24>)
 8000e94:	f7ff fb58 	bl	8000548 <FatFsTest>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f00a ffeb 	bl	800be74 <osDelay>
 8000e9e:	e7fb      	b.n	8000e98 <_Z16StartDefaultTaskPKv+0x18>
 8000ea0:	0800fb8c 	.word	0x0800fb8c
 8000ea4:	0800fb9c 	.word	0x0800fb9c

08000ea8 <_ZL10MPU_Configv>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f000 fbbb 	bl	8001634 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eca:	231f      	movs	r3, #31
 8000ecc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ece:	2387      	movs	r3, #135	; 0x87
 8000ed0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eda:	2301      	movs	r3, #1
 8000edc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fbd9 	bl	80016a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <_ZL10MPU_Configv+0x9c>)
 8000ef8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000efa:	2310      	movs	r3, #16
 8000efc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f02:	2301      	movs	r3, #1
 8000f04:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f06:	2303      	movs	r3, #3
 8000f08:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f0e:	463b      	mov	r3, r7
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fbc7 	bl	80016a4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f16:	2302      	movs	r3, #2
 8000f18:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <_ZL10MPU_Configv+0xa0>)
 8000f1c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000f1e:	2308      	movs	r3, #8
 8000f20:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f26:	2301      	movs	r3, #1
 8000f28:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fbb7 	bl	80016a4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f36:	2004      	movs	r0, #4
 8000f38:	f000 fb94 	bl	8001664 <HAL_MPU_Enable>

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	30020000 	.word	0x30020000
 8000f48:	30040000 	.word	0x30040000

08000f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5e:	f000 fa39 	bl	80013d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40001000 	.word	0x40001000

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <HAL_MspInit+0x38>)
 8000f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f88:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_MspInit+0x38>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_MspInit+0x38>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f06f 0001 	mvn.w	r0, #1
 8000fa8:	f000 fb1c 	bl	80015e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <HAL_SD_MspInit+0xd8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d155      	bne.n	8001086 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <HAL_SD_MspInit+0xdc>)
 8000fdc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fe0:	4a2c      	ldr	r2, [pc, #176]	; (8001094 <HAL_SD_MspInit+0xdc>)
 8000fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_SD_MspInit+0xdc>)
 8000fec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <HAL_SD_MspInit+0xdc>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	4a25      	ldr	r2, [pc, #148]	; (8001094 <HAL_SD_MspInit+0xdc>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_SD_MspInit+0xdc>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <HAL_SD_MspInit+0xdc>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	4a1d      	ldr	r2, [pc, #116]	; (8001094 <HAL_SD_MspInit+0xdc>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <HAL_SD_MspInit+0xdc>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|GPIO_PIN_11|SDIO1_CK_Pin|SDIO1_D0_Pin
 8001034:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001038:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001046:	230c      	movs	r3, #12
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <HAL_SD_MspInit+0xe0>)
 8001052:	f000 fccf 	bl	80019f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001056:	2304      	movs	r3, #4
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001066:	230c      	movs	r3, #12
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <HAL_SD_MspInit+0xe4>)
 8001072:	f000 fcbf 	bl	80019f4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	2031      	movs	r0, #49	; 0x31
 800107c:	f000 fab2 	bl	80015e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001080:	2031      	movs	r0, #49	; 0x31
 8001082:	f000 fac9 	bl	8001618 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	52007000 	.word	0x52007000
 8001094:	58024400 	.word	0x58024400
 8001098:	58020800 	.word	0x58020800
 800109c:	58020c00 	.word	0x58020c00

080010a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b090      	sub	sp, #64	; 0x40
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b0f      	cmp	r3, #15
 80010ac:	d827      	bhi.n	80010fe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80010ae:	2200      	movs	r2, #0
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	2036      	movs	r0, #54	; 0x36
 80010b4:	f000 fa96 	bl	80015e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010b8:	2036      	movs	r0, #54	; 0x36
 80010ba:	f000 faad 	bl	8001618 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80010be:	4a29      	ldr	r2, [pc, #164]	; (8001164 <HAL_InitTick+0xc4>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <HAL_InitTick+0xc8>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ca:	4a27      	ldr	r2, [pc, #156]	; (8001168 <HAL_InitTick+0xc8>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <HAL_InitTick+0xc8>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010da:	f003 0310 	and.w	r3, r3, #16
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010e2:	f107 0210 	add.w	r2, r7, #16
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 f995 	bl	800341c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <HAL_InitTick+0x6a>
 80010fc:	e001      	b.n	8001102 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e02b      	b.n	800115a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001102:	f002 f975 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8001106:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001108:	e004      	b.n	8001114 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800110a:	f002 f971 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 800110e:	4603      	mov	r3, r0
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001116:	4a15      	ldr	r2, [pc, #84]	; (800116c <HAL_InitTick+0xcc>)
 8001118:	fba2 2303 	umull	r2, r3, r2, r3
 800111c:	0c9b      	lsrs	r3, r3, #18
 800111e:	3b01      	subs	r3, #1
 8001120:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_InitTick+0xd0>)
 8001124:	4a13      	ldr	r2, [pc, #76]	; (8001174 <HAL_InitTick+0xd4>)
 8001126:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_InitTick+0xd0>)
 800112a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800112e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001130:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_InitTick+0xd0>)
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_InitTick+0xd0>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_InitTick+0xd0>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001142:	480b      	ldr	r0, [pc, #44]	; (8001170 <HAL_InitTick+0xd0>)
 8001144:	f006 fb4e 	bl	80077e4 <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d104      	bne.n	8001158 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <HAL_InitTick+0xd0>)
 8001150:	f006 fbaa 	bl	80078a8 <HAL_TIM_Base_Start_IT>
 8001154:	4603      	mov	r3, r0
 8001156:	e000      	b.n	800115a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
}
 800115a:	4618      	mov	r0, r3
 800115c:	3740      	adds	r7, #64	; 0x40
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	24000008 	.word	0x24000008
 8001168:	58024400 	.word	0x58024400
 800116c:	431bde83 	.word	0x431bde83
 8001170:	24001094 	.word	0x24001094
 8001174:	40001000 	.word	0x40001000

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <SDMMC1_IRQHandler+0x10>)
 80011aa:	f005 f927 	bl	80063fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000fa8 	.word	0x24000fa8

080011b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <TIM6_DAC_IRQHandler+0x10>)
 80011be:	f006 fbeb 	bl	8007998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	24001094 	.word	0x24001094

080011cc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <ETH_IRQHandler+0x10>)
 80011d2:	f000 fabf 	bl	8001754 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	240010f4 	.word	0x240010f4

080011e0 <MDMA_IRQHandler>:

/**
  * @brief This function handles MDMA global interrupt.
  */
void MDMA_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_mdma_channel40_sdmmc1_end_data_0);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <MDMA_IRQHandler+0x10>)
 80011e6:	f000 fe99 	bl	8001f1c <HAL_MDMA_IRQHandler>
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	24001024 	.word	0x24001024

080011f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e00a      	b.n	800121c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001206:	f3af 8000 	nop.w
 800120a:	4601      	mov	r1, r0
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	1c5a      	adds	r2, r3, #1
 8001210:	60ba      	str	r2, [r7, #8]
 8001212:	b2ca      	uxtb	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbf0      	blt.n	8001206 <_read+0x12>
  }

  return len;
 8001224:	687b      	ldr	r3, [r7, #4]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <_close>:
  }
  return len;
}

int _close(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001256:	605a      	str	r2, [r3, #4]
  return 0;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_isatty>:

int _isatty(int file)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a0:	4a14      	ldr	r2, [pc, #80]	; (80012f4 <_sbrk+0x5c>)
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <_sbrk+0x60>)
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d102      	bne.n	80012ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <_sbrk+0x64>)
 80012b6:	4a12      	ldr	r2, [pc, #72]	; (8001300 <_sbrk+0x68>)
 80012b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <_sbrk+0x64>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4413      	add	r3, r2
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d205      	bcs.n	80012d4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <_sbrk+0x6c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	4a06      	ldr	r2, [pc, #24]	; (80012fc <_sbrk+0x64>)
 80012e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	24080000 	.word	0x24080000
 80012f8:	00000800 	.word	0x00000800
 80012fc:	240010e0 	.word	0x240010e0
 8001300:	24008b20 	.word	0x24008b20
 8001304:	24008b18 	.word	0x24008b18

08001308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001340 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800130c:	f7ff f840 	bl	8000390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001312:	490d      	ldr	r1, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001314:	4a0d      	ldr	r2, [pc, #52]	; (800134c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <LoopFillZerobss+0x22>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001336:	f00d f9a1 	bl	800e67c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133a:	f7ff facd 	bl	80008d8 <main>
  bx  lr
 800133e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001340:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001344:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001348:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800134c:	0800fd04 	.word	0x0800fd04
  ldr r2, =_sbss
 8001350:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001354:	24008b1c 	.word	0x24008b1c

08001358 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001358:	e7fe      	b.n	8001358 <ADC3_IRQHandler>
	...

0800135c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001362:	2003      	movs	r0, #3
 8001364:	f000 f933 	bl	80015ce <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001368:	f001 fe98 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	f003 030f 	and.w	r3, r3, #15
 8001378:	4913      	ldr	r1, [pc, #76]	; (80013c8 <HAL_Init+0x6c>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	f003 031f 	and.w	r3, r3, #31
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_Init+0x68>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_Init+0x6c>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_Init+0x70>)
 800139e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_Init+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a6:	200f      	movs	r0, #15
 80013a8:	f7ff fe7a 	bl	80010a0 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e002      	b.n	80013bc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b6:	f7ff fde1 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	58024400 	.word	0x58024400
 80013c8:	0800fc10 	.word	0x0800fc10
 80013cc:	24000004 	.word	0x24000004
 80013d0:	24000000 	.word	0x24000000

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2400000c 	.word	0x2400000c
 80013f8:	240010e4 	.word	0x240010e4

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	240010e4 	.word	0x240010e4

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400000c 	.word	0x2400000c

0800145c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetREVID+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0c1b      	lsrs	r3, r3, #16
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	5c001000 	.word	0x5c001000

08001474 <__NVIC_SetPriorityGrouping>:
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001490:	4013      	ands	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x40>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00
 80014b8:	05fa0000 	.word	0x05fa0000

080014bc <__NVIC_GetPriorityGrouping>:
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <__NVIC_GetPriorityGrouping+0x18>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	f003 0307 	and.w	r3, r3, #7
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <__NVIC_EnableIRQ>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db0b      	blt.n	8001502 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	f003 021f 	and.w	r2, r3, #31
 80014f0:	4907      	ldr	r1, [pc, #28]	; (8001510 <__NVIC_EnableIRQ+0x38>)
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	2001      	movs	r0, #1
 80014fa:	fa00 f202 	lsl.w	r2, r0, r2
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000e100 	.word	0xe000e100

08001514 <__NVIC_SetPriority>:
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff4c 	bl	8001474 <__NVIC_SetPriorityGrouping>
}
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f2:	f7ff ff63 	bl	80014bc <__NVIC_GetPriorityGrouping>
 80015f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	68b9      	ldr	r1, [r7, #8]
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7ff ffb3 	bl	8001568 <NVIC_EncodePriority>
 8001602:	4602      	mov	r2, r0
 8001604:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ff82 	bl	8001514 <__NVIC_SetPriority>
}
 8001610:	bf00      	nop
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff56 	bl	80014d8 <__NVIC_EnableIRQ>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001638:	f3bf 8f5f 	dmb	sy
}
 800163c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <HAL_MPU_Disable+0x28>)
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_MPU_Disable+0x28>)
 8001644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001648:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800164a:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_MPU_Disable+0x2c>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	e000ed90 	.word	0xe000ed90

08001664 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_MPU_Enable+0x38>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_MPU_Enable+0x3c>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	4a09      	ldr	r2, [pc, #36]	; (80016a0 <HAL_MPU_Enable+0x3c>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001682:	f3bf 8f4f 	dsb	sy
}
 8001686:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001688:	f3bf 8f6f 	isb	sy
}
 800168c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000ed90 	.word	0xe000ed90
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	785a      	ldrb	r2, [r3, #1]
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_MPU_ConfigRegion+0x84>)
 80016b2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d029      	beq.n	8001710 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80016bc:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <HAL_MPU_ConfigRegion+0x84>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	7b1b      	ldrb	r3, [r3, #12]
 80016c8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7adb      	ldrb	r3, [r3, #11]
 80016ce:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7a9b      	ldrb	r3, [r3, #10]
 80016d6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016d8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7b5b      	ldrb	r3, [r3, #13]
 80016de:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016e0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7b9b      	ldrb	r3, [r3, #14]
 80016e6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016e8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7bdb      	ldrb	r3, [r3, #15]
 80016ee:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7a5b      	ldrb	r3, [r3, #9]
 80016f6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7a1b      	ldrb	r3, [r3, #8]
 80016fe:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001700:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	7812      	ldrb	r2, [r2, #0]
 8001706:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800170a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800170c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800170e:	e005      	b.n	800171c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_MPU_ConfigRegion+0x84>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_MPU_ConfigRegion+0x84>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed90 	.word	0xe000ed90

0800172c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <HAL_GetCurrentCPUID+0x24>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	2b07      	cmp	r3, #7
 800173c:	d101      	bne.n	8001742 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800173e:	2303      	movs	r3, #3
 8001740:	e000      	b.n	8001744 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001742:	2301      	movs	r3, #1
  }
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001764:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800176c:	2b40      	cmp	r3, #64	; 0x40
 800176e:	d115      	bne.n	800179c <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001778:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800177c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001780:	2b40      	cmp	r3, #64	; 0x40
 8001782:	d10b      	bne.n	800179c <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178c:	461a      	mov	r2, r3
 800178e:	f248 0340 	movw	r3, #32832	; 0x8040
 8001792:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f007 fb92 	bl	8008ec0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d115      	bne.n	80017dc <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d10b      	bne.n	80017dc <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	461a      	mov	r2, r3
 80017ce:	f248 0301 	movw	r3, #32769	; 0x8001
 80017d2:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f007 fb82 	bl	8008ee0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80017e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017f0:	d153      	bne.n	800189a <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80017fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001806:	d148      	bne.n	800189a <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800180e:	f043 0208 	orr.w	r2, r3, #8
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001820:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800182c:	d11e      	bne.n	800186c <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001836:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800183a:	f241 1302 	movw	r3, #4354	; 0x1102
 800183e:	4013      	ands	r3, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800184e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800185a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800185e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	22e0      	movs	r2, #224	; 0xe0
 8001866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800186a:	e013      	b.n	8001894 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001874:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001878:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188a:	461a      	mov	r2, r3
 800188c:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001890:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f007 fb33 	bl	8008f00 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80018a2:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d104      	bne.n	80018b8 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d019      	beq.n	80018ec <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018be:	f043 0210 	orr.w	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	22e0      	movs	r2, #224	; 0xe0
 80018da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f007 fb0e 	bl	8008f00 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b10      	cmp	r3, #16
 80018fa:	d10f      	bne.n	800191c <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001904:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f844 	bl	800199c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b20      	cmp	r3, #32
 800192a:	d10f      	bne.n	800194c <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001934:	f003 020f 	and.w	r2, r3, #15
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f836 	bl	80019b0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800194c:	f7ff feee 	bl	800172c <HAL_GetCurrentCPUID>
 8001950:	4603      	mov	r3, r0
 8001952:	2b03      	cmp	r3, #3
 8001954:	d10d      	bne.n	8001972 <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_ETH_IRQHandler+0x240>)
 8001958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d014      	beq.n	800198c <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001962:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_ETH_IRQHandler+0x240>)
 8001964:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f82a 	bl	80019c4 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001970:	e00c      	b.n	800198c <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001972:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_ETH_IRQHandler+0x244>)
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d006      	beq.n	800198c <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_ETH_IRQHandler+0x244>)
 8001980:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 f81c 	bl	80019c4 <HAL_ETH_WakeUpCallback>
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	58000080 	.word	0x58000080
 8001998:	580000c0 	.word	0x580000c0

0800199c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001a02:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <HAL_GPIO_Init+0x234>)
 8001a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a06:	e194      	b.n	8001d32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8186 	beq.w	8001d2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d005      	beq.n	8001a38 <HAL_GPIO_Init+0x44>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d130      	bne.n	8001a9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6e:	2201      	movs	r2, #1
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 0201 	and.w	r2, r3, #1
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d017      	beq.n	8001ad6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d123      	bne.n	8001b2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	220f      	movs	r2, #15
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43db      	mvns	r3, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	691a      	ldr	r2, [r3, #16]
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	69b9      	ldr	r1, [r7, #24]
 8001b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	2203      	movs	r2, #3
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0203 	and.w	r2, r3, #3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 80e0 	beq.w	8001d2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6c:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_GPIO_Init+0x238>)
 8001b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b72:	4a2e      	ldr	r2, [pc, #184]	; (8001c2c <HAL_GPIO_Init+0x238>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_GPIO_Init+0x238>)
 8001b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_GPIO_Init+0x23c>)
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	3302      	adds	r3, #2
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <HAL_GPIO_Init+0x240>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d052      	beq.n	8001c5c <HAL_GPIO_Init+0x268>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a1f      	ldr	r2, [pc, #124]	; (8001c38 <HAL_GPIO_Init+0x244>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d031      	beq.n	8001c22 <HAL_GPIO_Init+0x22e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_GPIO_Init+0x248>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d02b      	beq.n	8001c1e <HAL_GPIO_Init+0x22a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <HAL_GPIO_Init+0x24c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d025      	beq.n	8001c1a <HAL_GPIO_Init+0x226>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_GPIO_Init+0x250>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01f      	beq.n	8001c16 <HAL_GPIO_Init+0x222>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	; (8001c48 <HAL_GPIO_Init+0x254>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d019      	beq.n	8001c12 <HAL_GPIO_Init+0x21e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_GPIO_Init+0x258>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_GPIO_Init+0x21a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x25c>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00d      	beq.n	8001c0a <HAL_GPIO_Init+0x216>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x260>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d007      	beq.n	8001c06 <HAL_GPIO_Init+0x212>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <HAL_GPIO_Init+0x264>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_GPIO_Init+0x20e>
 8001bfe:	2309      	movs	r3, #9
 8001c00:	e02d      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c02:	230a      	movs	r3, #10
 8001c04:	e02b      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c06:	2308      	movs	r3, #8
 8001c08:	e029      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c0a:	2307      	movs	r3, #7
 8001c0c:	e027      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c0e:	2306      	movs	r3, #6
 8001c10:	e025      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c12:	2305      	movs	r3, #5
 8001c14:	e023      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c16:	2304      	movs	r3, #4
 8001c18:	e021      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e01f      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e01d      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e01b      	b.n	8001c5e <HAL_GPIO_Init+0x26a>
 8001c26:	bf00      	nop
 8001c28:	58000080 	.word	0x58000080
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	58000400 	.word	0x58000400
 8001c34:	58020000 	.word	0x58020000
 8001c38:	58020400 	.word	0x58020400
 8001c3c:	58020800 	.word	0x58020800
 8001c40:	58020c00 	.word	0x58020c00
 8001c44:	58021000 	.word	0x58021000
 8001c48:	58021400 	.word	0x58021400
 8001c4c:	58021800 	.word	0x58021800
 8001c50:	58021c00 	.word	0x58021c00
 8001c54:	58022000 	.word	0x58022000
 8001c58:	58022400 	.word	0x58022400
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	f002 0203 	and.w	r2, r2, #3
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	4093      	lsls	r3, r2
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c6e:	4938      	ldr	r1, [pc, #224]	; (8001d50 <HAL_GPIO_Init+0x35c>)
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f ae63 	bne.w	8001a08 <HAL_GPIO_Init+0x14>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	3724      	adds	r7, #36	; 0x24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	58000400 	.word	0x58000400

08001d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
 8001d70:	e001      	b.n	8001d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001d8c:	4a08      	ldr	r2, [pc, #32]	; (8001db0 <HAL_HSEM_FastTake+0x2c>)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3320      	adds	r3, #32
 8001d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_HSEM_FastTake+0x30>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d101      	bne.n	8001da0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e000      	b.n	8001da2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	58026400 	.word	0x58026400
 8001db4:	80000300 	.word	0x80000300

08001db8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001dc2:	4906      	ldr	r1, [pc, #24]	; (8001ddc <HAL_HSEM_Release+0x24>)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	58026400 	.word	0x58026400

08001de0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff fb08 	bl	80013fc <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e03b      	b.n	8001e70 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001e18:	e00f      	b.n	8001e3a <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8001e1a:	f7ff faef 	bl	80013fc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b05      	cmp	r3, #5
 8001e26:	d908      	bls.n	8001e3a <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2240      	movs	r2, #64	; 0x40
 8001e2c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2203      	movs	r2, #3
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e01a      	b.n	8001e70 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e8      	bne.n	8001e1a <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f9bb 	bl	80021c4 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e03e      	b.n	8001f10 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_MDMA_ConfigPostRequestMask+0x28>
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	e037      	b.n	8001f10 <HAL_MDMA_ConfigPostRequestMask+0x98>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d126      	bne.n	8001f02 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d11c      	bne.n	8001efc <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691a      	ldr	r2, [r3, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	e00d      	b.n	8001f06 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ef8:	611a      	str	r2, [r3, #16]
 8001efa:	e004      	b.n	8001f06 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
 8001f00:	e001      	b.n	8001f06 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f28:	4b91      	ldr	r3, [pc, #580]	; (8002170 <HAL_MDMA_IRQHandler+0x254>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a91      	ldr	r2, [pc, #580]	; (8002174 <HAL_MDMA_IRQHandler+0x258>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0a9b      	lsrs	r3, r3, #10
 8001f34:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b8e      	ldr	r3, [pc, #568]	; (8002178 <HAL_MDMA_IRQHandler+0x25c>)
 8001f3e:	4413      	add	r3, r2
 8001f40:	099b      	lsrs	r3, r3, #6
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2201      	movs	r2, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8001f4e:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 812d 	beq.w	80021b8 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d054      	beq.n	8002016 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d04d      	beq.n	8002016 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0202 	bic.w	r2, r2, #2
 8001f88:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa0:	f043 0201 	orr.w	r2, r3, #1
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	669a      	str	r2, [r3, #104]	; 0x68
 8001fa8:	e005      	b.n	8001fb6 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fae:	f043 0202 	orr.w	r2, r3, #2
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fc4:	f043 0204 	orr.w	r2, r3, #4
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d005      	beq.n	8001fe2 <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fda:	f043 0208 	orr.w	r2, r3, #8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ff0:	f043 0210 	orr.w	r2, r3, #16
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d005      	beq.n	800200e <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2201      	movs	r2, #1
 8002014:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d012      	beq.n	800204a <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2210      	movs	r2, #16
 8002038:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	2b00      	cmp	r3, #0
 8002040:	d003      	beq.n	800204a <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f003 0310 	and.w	r3, r3, #16
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2208      	movs	r2, #8
 800206c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	d012      	beq.n	80020b2 <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00b      	beq.n	80020b2 <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2204      	movs	r2, #4
 80020a0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d039      	beq.n	8002134 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d032      	beq.n	8002134 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 80020dc:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d110      	bne.n	800210c <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d05c      	beq.n	80021bc <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	4798      	blx	r3
        }
        return;
 800210a:	e057      	b.n	80021bc <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2202      	movs	r2, #2
 8002112:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002138:	2b00      	cmp	r3, #0
 800213a:	d040      	beq.n	80021be <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2204      	movs	r2, #4
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68da      	ldr	r2, [r3, #12]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	3301      	adds	r3, #1
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	429a      	cmp	r2, r3
 800215e:	d30d      	bcc.n	800217c <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f2      	bne.n	8002154 <HAL_MDMA_IRQHandler+0x238>
 800216e:	e006      	b.n	800217e <HAL_MDMA_IRQHandler+0x262>
 8002170:	24000000 	.word	0x24000000
 8002174:	1b4e81b5 	.word	0x1b4e81b5
 8002178:	adffffc0 	.word	0xadffffc0
        break;
 800217c:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2203      	movs	r2, #3
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800219c:	e003      	b.n	80021a6 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d007      	beq.n	80021be <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	4798      	blx	r3
 80021b6:	e002      	b.n	80021be <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80021b8:	bf00      	nop
 80021ba:	e000      	b.n	80021be <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80021bc:	bf00      	nop
    }
  }
}
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68d9      	ldr	r1, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691a      	ldr	r2, [r3, #16]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80021ea:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80021f6:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8002202:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	3b01      	subs	r3, #1
 800220a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800220c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8002218:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800221a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002224:	d107      	bne.n	8002236 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8002234:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	2b00      	cmp	r3, #0
 8002244:	da11      	bge.n	800226a <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695a      	ldr	r2, [r3, #20]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002254:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	425b      	negs	r3, r3
 800225c:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	b292      	uxth	r2, r2
 8002266:	621a      	str	r2, [r3, #32]
 8002268:	e006      	b.n	8002278 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	b292      	uxth	r2, r2
 8002276:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	2b00      	cmp	r3, #0
 800227e:	da15      	bge.n	80022ac <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695a      	ldr	r2, [r3, #20]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800228e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	425b      	negs	r3, r3
 8002296:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a19      	ldr	r1, [r3, #32]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	621a      	str	r2, [r3, #32]
 80022aa:	e009      	b.n	80022c0 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a19      	ldr	r1, [r3, #32]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	041a      	lsls	r2, r3, #16
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d006      	beq.n	80022d8 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28
 80022d6:	e003      	b.n	80022e0 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2200      	movs	r2, #0
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2200      	movs	r2, #0
 80022e6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0307 	and.w	r3, r3, #7
 8002304:	2b06      	cmp	r3, #6
 8002306:	d00a      	beq.n	800231e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e040      	b.n	800239c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e03e      	b.n	800239c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800231e:	4b21      	ldr	r3, [pc, #132]	; (80023a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002326:	491f      	ldr	r1, [pc, #124]	; (80023a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800232e:	f7ff f865 	bl	80013fc <HAL_GetTick>
 8002332:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002334:	e009      	b.n	800234a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002336:	f7ff f861 	bl	80013fc <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002344:	d901      	bls.n	800234a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e028      	b.n	800239c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002356:	d1ee      	bne.n	8002336 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b1e      	cmp	r3, #30
 800235c:	d008      	beq.n	8002370 <HAL_PWREx_ConfigSupply+0x7c>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b2e      	cmp	r3, #46	; 0x2e
 8002362:	d005      	beq.n	8002370 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b1d      	cmp	r3, #29
 8002368:	d002      	beq.n	8002370 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b2d      	cmp	r3, #45	; 0x2d
 800236e:	d114      	bne.n	800239a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002370:	f7ff f844 	bl	80013fc <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002376:	e009      	b.n	800238c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002378:	f7ff f840 	bl	80013fc <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002386:	d901      	bls.n	800238c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e007      	b.n	800239c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002398:	d1ee      	bne.n	8002378 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	58024800 	.word	0x58024800

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f000 bc48 	b.w	8002c4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 8088 	beq.w	80024da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ca:	4b99      	ldr	r3, [pc, #612]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023d4:	4b96      	ldr	r3, [pc, #600]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d007      	beq.n	80023f0 <HAL_RCC_OscConfig+0x48>
 80023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e2:	2b18      	cmp	r3, #24
 80023e4:	d111      	bne.n	800240a <HAL_RCC_OscConfig+0x62>
 80023e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d10c      	bne.n	800240a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d06d      	beq.n	80024d8 <HAL_RCC_OscConfig+0x130>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d169      	bne.n	80024d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f000 bc21 	b.w	8002c4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002412:	d106      	bne.n	8002422 <HAL_RCC_OscConfig+0x7a>
 8002414:	4b86      	ldr	r3, [pc, #536]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a85      	ldr	r2, [pc, #532]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	e02e      	b.n	8002480 <HAL_RCC_OscConfig+0xd8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <HAL_RCC_OscConfig+0x9c>
 800242a:	4b81      	ldr	r3, [pc, #516]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a80      	ldr	r2, [pc, #512]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7d      	ldr	r2, [pc, #500]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800243c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xd8>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0xc0>
 800244e:	4b78      	ldr	r3, [pc, #480]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a77      	ldr	r2, [pc, #476]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b75      	ldr	r3, [pc, #468]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a74      	ldr	r2, [pc, #464]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xd8>
 8002468:	4b71      	ldr	r3, [pc, #452]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a70      	ldr	r2, [pc, #448]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b6e      	ldr	r3, [pc, #440]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a6d      	ldr	r2, [pc, #436]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe ffb8 	bl	80013fc <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7fe ffb4 	bl	80013fc <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e3d4      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xe8>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7fe ffa4 	bl	80013fc <HAL_GetTick>
 80024b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe ffa0 	bl	80013fc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e3c0      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024ca:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x110>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 80ca 	beq.w	800267c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e8:	4b51      	ldr	r3, [pc, #324]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024f2:	4b4f      	ldr	r3, [pc, #316]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80024f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_RCC_OscConfig+0x166>
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	2b18      	cmp	r3, #24
 8002502:	d156      	bne.n	80025b2 <HAL_RCC_OscConfig+0x20a>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d151      	bne.n	80025b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x17e>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e392      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002526:	4b42      	ldr	r3, [pc, #264]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 0219 	bic.w	r2, r3, #25
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	493f      	ldr	r1, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe ff60 	bl	80013fc <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe ff5c 	bl	80013fc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e37c      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002552:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255e:	f7fe ff7d 	bl	800145c <HAL_GetREVID>
 8002562:	4603      	mov	r3, r0
 8002564:	f241 0203 	movw	r2, #4099	; 0x1003
 8002568:	4293      	cmp	r3, r2
 800256a:	d817      	bhi.n	800259c <HAL_RCC_OscConfig+0x1f4>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b40      	cmp	r3, #64	; 0x40
 8002572:	d108      	bne.n	8002586 <HAL_RCC_OscConfig+0x1de>
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800257c:	4a2c      	ldr	r2, [pc, #176]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800257e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002582:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	e07a      	b.n	800267c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b2a      	ldr	r3, [pc, #168]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	031b      	lsls	r3, r3, #12
 8002594:	4926      	ldr	r1, [pc, #152]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800259a:	e06f      	b.n	800267c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	061b      	lsls	r3, r3, #24
 80025aa:	4921      	ldr	r1, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e064      	b.n	800267c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d047      	beq.n	800264a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ba:	4b1d      	ldr	r3, [pc, #116]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0219 	bic.w	r2, r3, #25
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	491a      	ldr	r1, [pc, #104]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe ff16 	bl	80013fc <HAL_GetTick>
 80025d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe ff12 	bl	80013fc <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e332      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	f7fe ff33 	bl	800145c <HAL_GetREVID>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d819      	bhi.n	8002634 <HAL_RCC_OscConfig+0x28c>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d108      	bne.n	800261a <HAL_RCC_OscConfig+0x272>
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 8002612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002616:	6053      	str	r3, [r2, #4]
 8002618:	e030      	b.n	800267c <HAL_RCC_OscConfig+0x2d4>
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	031b      	lsls	r3, r3, #12
 8002628:	4901      	ldr	r1, [pc, #4]	; (8002630 <HAL_RCC_OscConfig+0x288>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
 800262e:	e025      	b.n	800267c <HAL_RCC_OscConfig+0x2d4>
 8002630:	58024400 	.word	0x58024400
 8002634:	4b9a      	ldr	r3, [pc, #616]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	061b      	lsls	r3, r3, #24
 8002642:	4997      	ldr	r1, [pc, #604]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
 8002648:	e018      	b.n	800267c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b95      	ldr	r3, [pc, #596]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a94      	ldr	r2, [pc, #592]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fed1 	bl	80013fc <HAL_GetTick>
 800265a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe fecd 	bl	80013fc <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e2ed      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002670:	4b8b      	ldr	r3, [pc, #556]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a9 	beq.w	80027dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268a:	4b85      	ldr	r3, [pc, #532]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002692:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002694:	4b82      	ldr	r3, [pc, #520]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b08      	cmp	r3, #8
 800269e:	d007      	beq.n	80026b0 <HAL_RCC_OscConfig+0x308>
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b18      	cmp	r3, #24
 80026a4:	d13a      	bne.n	800271c <HAL_RCC_OscConfig+0x374>
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d135      	bne.n	800271c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026b0:	4b7b      	ldr	r3, [pc, #492]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_OscConfig+0x320>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	2b80      	cmp	r3, #128	; 0x80
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e2c1      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026c8:	f7fe fec8 	bl	800145c <HAL_GetREVID>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d817      	bhi.n	8002706 <HAL_RCC_OscConfig+0x35e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d108      	bne.n	80026f0 <HAL_RCC_OscConfig+0x348>
 80026de:	4b70      	ldr	r3, [pc, #448]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026e6:	4a6e      	ldr	r2, [pc, #440]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80026e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ee:	e075      	b.n	80027dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f0:	4b6b      	ldr	r3, [pc, #428]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	069b      	lsls	r3, r3, #26
 80026fe:	4968      	ldr	r1, [pc, #416]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002704:	e06a      	b.n	80027dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002706:	4b66      	ldr	r3, [pc, #408]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	061b      	lsls	r3, r3, #24
 8002714:	4962      	ldr	r1, [pc, #392]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800271a:	e05f      	b.n	80027dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d042      	beq.n	80027aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002724:	4b5e      	ldr	r3, [pc, #376]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a5d      	ldr	r2, [pc, #372]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800272e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fe64 	bl	80013fc <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002738:	f7fe fe60 	bl	80013fc <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e280      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800274a:	4b55      	ldr	r3, [pc, #340]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0f0      	beq.n	8002738 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002756:	f7fe fe81 	bl	800145c <HAL_GetREVID>
 800275a:	4603      	mov	r3, r0
 800275c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002760:	4293      	cmp	r3, r2
 8002762:	d817      	bhi.n	8002794 <HAL_RCC_OscConfig+0x3ec>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	2b20      	cmp	r3, #32
 800276a:	d108      	bne.n	800277e <HAL_RCC_OscConfig+0x3d6>
 800276c:	4b4c      	ldr	r3, [pc, #304]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002774:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800277a:	6053      	str	r3, [r2, #4]
 800277c:	e02e      	b.n	80027dc <HAL_RCC_OscConfig+0x434>
 800277e:	4b48      	ldr	r3, [pc, #288]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	069b      	lsls	r3, r3, #26
 800278c:	4944      	ldr	r1, [pc, #272]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
 8002792:	e023      	b.n	80027dc <HAL_RCC_OscConfig+0x434>
 8002794:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	493f      	ldr	r1, [pc, #252]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60cb      	str	r3, [r1, #12]
 80027a8:	e018      	b.n	80027dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027aa:	4b3d      	ldr	r3, [pc, #244]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a3c      	ldr	r2, [pc, #240]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80027b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fe21 	bl	80013fc <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027be:	f7fe fe1d 	bl	80013fc <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e23d      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d036      	beq.n	8002856 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d019      	beq.n	8002824 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f0:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f4:	4a2a      	ldr	r2, [pc, #168]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7fe fdfe 	bl	80013fc <HAL_GetTick>
 8002800:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe fdfa 	bl	80013fc <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e21a      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0f0      	beq.n	8002804 <HAL_RCC_OscConfig+0x45c>
 8002822:	e018      	b.n	8002856 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002824:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe fde4 	bl	80013fc <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002838:	f7fe fde0 	bl	80013fc <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e200      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800284c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b00      	cmp	r3, #0
 8002860:	d039      	beq.n	80028d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d01c      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800286a:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002874:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002876:	f7fe fdc1 	bl	80013fc <HAL_GetTick>
 800287a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800287e:	f7fe fdbd 	bl	80013fc <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e1dd      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_RCC_OscConfig+0x4f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x4d6>
 800289c:	e01b      	b.n	80028d6 <HAL_RCC_OscConfig+0x52e>
 800289e:	bf00      	nop
 80028a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028a4:	4b9b      	ldr	r3, [pc, #620]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a9a      	ldr	r2, [pc, #616]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 80028aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028b0:	f7fe fda4 	bl	80013fc <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b8:	f7fe fda0 	bl	80013fc <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1c0      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028ca:	4b92      	ldr	r3, [pc, #584]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 8081 	beq.w	80029e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028e4:	4b8c      	ldr	r3, [pc, #560]	; (8002b18 <HAL_RCC_OscConfig+0x770>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a8b      	ldr	r2, [pc, #556]	; (8002b18 <HAL_RCC_OscConfig+0x770>)
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f0:	f7fe fd84 	bl	80013fc <HAL_GetTick>
 80028f4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f8:	f7fe fd80 	bl	80013fc <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e1a0      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800290a:	4b83      	ldr	r3, [pc, #524]	; (8002b18 <HAL_RCC_OscConfig+0x770>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d106      	bne.n	800292c <HAL_RCC_OscConfig+0x584>
 800291e:	4b7d      	ldr	r3, [pc, #500]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002922:	4a7c      	ldr	r2, [pc, #496]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	; 0x70
 800292a:	e02d      	b.n	8002988 <HAL_RCC_OscConfig+0x5e0>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10c      	bne.n	800294e <HAL_RCC_OscConfig+0x5a6>
 8002934:	4b77      	ldr	r3, [pc, #476]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4a76      	ldr	r2, [pc, #472]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6713      	str	r3, [r2, #112]	; 0x70
 8002940:	4b74      	ldr	r3, [pc, #464]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002944:	4a73      	ldr	r2, [pc, #460]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002946:	f023 0304 	bic.w	r3, r3, #4
 800294a:	6713      	str	r3, [r2, #112]	; 0x70
 800294c:	e01c      	b.n	8002988 <HAL_RCC_OscConfig+0x5e0>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b05      	cmp	r3, #5
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0x5c8>
 8002956:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a6e      	ldr	r2, [pc, #440]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 800295c:	f043 0304 	orr.w	r3, r3, #4
 8002960:	6713      	str	r3, [r2, #112]	; 0x70
 8002962:	4b6c      	ldr	r3, [pc, #432]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a6b      	ldr	r2, [pc, #428]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002968:	f043 0301 	orr.w	r3, r3, #1
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0x5e0>
 8002970:	4b68      	ldr	r3, [pc, #416]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a67      	ldr	r2, [pc, #412]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002976:	f023 0301 	bic.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
 800297c:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a64      	ldr	r2, [pc, #400]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d015      	beq.n	80029bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002990:	f7fe fd34 	bl	80013fc <HAL_GetTick>
 8002994:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002996:	e00a      	b.n	80029ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7fe fd30 	bl	80013fc <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e14e      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029ae:	4b59      	ldr	r3, [pc, #356]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ee      	beq.n	8002998 <HAL_RCC_OscConfig+0x5f0>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7fe fd1e 	bl	80013fc <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7fe fd1a 	bl	80013fc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e138      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029da:	4b4e      	ldr	r3, [pc, #312]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ee      	bne.n	80029c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 812d 	beq.w	8002c4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029f0:	4b48      	ldr	r3, [pc, #288]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029f8:	2b18      	cmp	r3, #24
 80029fa:	f000 80bd 	beq.w	8002b78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	f040 809e 	bne.w	8002b44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a08:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fcf2 	bl	80013fc <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a1c:	f7fe fcee 	bl	80013fc <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e10e      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a2e:	4b39      	ldr	r3, [pc, #228]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_RCC_OscConfig+0x774>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a4a:	0112      	lsls	r2, r2, #4
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	4931      	ldr	r1, [pc, #196]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	628b      	str	r3, [r1, #40]	; 0x28
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	3b01      	subs	r3, #1
 8002a64:	025b      	lsls	r3, r3, #9
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	061b      	lsls	r3, r3, #24
 8002a80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002a84:	4923      	ldr	r1, [pc, #140]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	4a21      	ldr	r2, [pc, #132]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a96:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <HAL_RCC_OscConfig+0x778>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aa2:	00d2      	lsls	r2, r2, #3
 8002aa4:	491b      	ldr	r1, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	f023 020c 	bic.w	r2, r3, #12
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	4917      	ldr	r1, [pc, #92]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f023 0202 	bic.w	r2, r3, #2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	4912      	ldr	r1, [pc, #72]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ace:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	4a0d      	ldr	r2, [pc, #52]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002af0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4a07      	ldr	r2, [pc, #28]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a04      	ldr	r2, [pc, #16]	; (8002b14 <HAL_RCC_OscConfig+0x76c>)
 8002b04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fc77 	bl	80013fc <HAL_GetTick>
 8002b0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b10:	e011      	b.n	8002b36 <HAL_RCC_OscConfig+0x78e>
 8002b12:	bf00      	nop
 8002b14:	58024400 	.word	0x58024400
 8002b18:	58024800 	.word	0x58024800
 8002b1c:	fffffc0c 	.word	0xfffffc0c
 8002b20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fc6a 	bl	80013fc <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e08a      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b36:	4b47      	ldr	r3, [pc, #284]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x77c>
 8002b42:	e082      	b.n	8002c4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a42      	ldr	r2, [pc, #264]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fc54 	bl	80013fc <HAL_GetTick>
 8002b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fc50 	bl	80013fc <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e070      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6a:	4b3a      	ldr	r3, [pc, #232]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x7b0>
 8002b76:	e068      	b.n	8002c4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b7e:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d031      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 0203 	and.w	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d12a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d122      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d11a      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0a5b      	lsrs	r3, r3, #9
 8002bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d111      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0c1b      	lsrs	r3, r3, #16
 8002bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d108      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0e1b      	lsrs	r3, r3, #24
 8002be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e02b      	b.n	8002c4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bf4:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d01f      	beq.n	8002c4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c0a:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	4a11      	ldr	r2, [pc, #68]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c16:	f7fe fbf1 	bl	80013fc <HAL_GetTick>
 8002c1a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c1c:	bf00      	nop
 8002c1e:	f7fe fbed 	bl	80013fc <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d0f9      	beq.n	8002c1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	; (8002c58 <HAL_RCC_OscConfig+0x8b0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c36:	00d2      	lsls	r2, r2, #3
 8002c38:	4906      	ldr	r1, [pc, #24]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	4a04      	ldr	r2, [pc, #16]	; (8002c54 <HAL_RCC_OscConfig+0x8ac>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3730      	adds	r7, #48	; 0x30
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	58024400 	.word	0x58024400
 8002c58:	ffff0007 	.word	0xffff0007

08002c5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e19c      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c70:	4b8a      	ldr	r3, [pc, #552]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d910      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7e:	4b87      	ldr	r3, [pc, #540]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 020f 	bic.w	r2, r3, #15
 8002c86:	4985      	ldr	r1, [pc, #532]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b83      	ldr	r3, [pc, #524]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e184      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	4b7b      	ldr	r3, [pc, #492]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d908      	bls.n	8002cce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cbc:	4b78      	ldr	r3, [pc, #480]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	4975      	ldr	r1, [pc, #468]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	4b70      	ldr	r3, [pc, #448]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d908      	bls.n	8002cfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cea:	4b6d      	ldr	r3, [pc, #436]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	496a      	ldr	r1, [pc, #424]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0310 	and.w	r3, r3, #16
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d010      	beq.n	8002d2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	4b64      	ldr	r3, [pc, #400]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d0e:	69db      	ldr	r3, [r3, #28]
 8002d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d908      	bls.n	8002d2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d18:	4b61      	ldr	r3, [pc, #388]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	495e      	ldr	r1, [pc, #376]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0320 	and.w	r3, r3, #32
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d010      	beq.n	8002d58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	4b59      	ldr	r3, [pc, #356]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d908      	bls.n	8002d58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d46:	4b56      	ldr	r3, [pc, #344]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	4953      	ldr	r1, [pc, #332]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d010      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	4b4d      	ldr	r3, [pc, #308]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d908      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d74:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d76:	699b      	ldr	r3, [r3, #24]
 8002d78:	f023 020f 	bic.w	r2, r3, #15
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4947      	ldr	r1, [pc, #284]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d055      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d92:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4940      	ldr	r1, [pc, #256]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dac:	4b3c      	ldr	r3, [pc, #240]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d121      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0f6      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d115      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e0ea      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0de      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0d6      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dfc:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	f023 0207 	bic.w	r2, r3, #7
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4925      	ldr	r1, [pc, #148]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e0e:	f7fe faf5 	bl	80013fc <HAL_GetTick>
 8002e12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e16:	f7fe faf1 	bl	80013fc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0be      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d1eb      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d010      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d208      	bcs.n	8002e6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	f023 020f 	bic.w	r2, r3, #15
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	490e      	ldr	r1, [pc, #56]	; (8002ea0 <HAL_RCC_ClockConfig+0x244>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d214      	bcs.n	8002ea4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	4906      	ldr	r1, [pc, #24]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_RCC_ClockConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e086      	b.n	8002faa <HAL_RCC_ClockConfig+0x34e>
 8002e9c:	52002000 	.word	0x52002000
 8002ea0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d010      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	4b3f      	ldr	r3, [pc, #252]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d208      	bcs.n	8002ed2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ec0:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4939      	ldr	r1, [pc, #228]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d010      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	4b34      	ldr	r3, [pc, #208]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d208      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	492e      	ldr	r1, [pc, #184]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	4b28      	ldr	r3, [pc, #160]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d208      	bcs.n	8002f2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f1e:	69db      	ldr	r3, [r3, #28]
 8002f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4922      	ldr	r1, [pc, #136]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d208      	bcs.n	8002f5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4917      	ldr	r1, [pc, #92]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f5c:	f000 f89e 	bl	800309c <HAL_RCC_GetSysClockFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	4912      	ldr	r1, [pc, #72]	; (8002fb8 <HAL_RCC_ClockConfig+0x35c>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	4a0d      	ldr	r2, [pc, #52]	; (8002fb8 <HAL_RCC_ClockConfig+0x35c>)
 8002f84:	5cd3      	ldrb	r3, [r2, r3]
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f90:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x360>)
 8002f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f94:	4a0a      	ldr	r2, [pc, #40]	; (8002fc0 <HAL_RCC_ClockConfig+0x364>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f9a:	4b0a      	ldr	r3, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x368>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f87e 	bl	80010a0 <HAL_InitTick>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	0800fc10 	.word	0x0800fc10
 8002fbc:	24000004 	.word	0x24000004
 8002fc0:	24000000 	.word	0x24000000
 8002fc4:	24000008 	.word	0x24000008

08002fc8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08c      	sub	sp, #48	; 0x30
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d12a      	bne.n	8003030 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8002fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe0:	4a2b      	ldr	r2, [pc, #172]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fea:	4b29      	ldr	r3, [pc, #164]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8002fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800300a:	2300      	movs	r3, #0
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4619      	mov	r1, r3
 8003014:	481f      	ldr	r0, [pc, #124]	; (8003094 <HAL_RCC_MCOConfig+0xcc>)
 8003016:	f7fe fced 	bl	80019f4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8003022:	68b9      	ldr	r1, [r7, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	430b      	orrs	r3, r1
 8003028:	4919      	ldr	r1, [pc, #100]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 800302a:	4313      	orrs	r3, r2
 800302c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800302e:	e02a      	b.n	8003086 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8003032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003036:	4a16      	ldr	r2, [pc, #88]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8003038:	f043 0304 	orr.w	r3, r3, #4
 800303c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003040:	4b13      	ldr	r3, [pc, #76]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8003042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800304e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003060:	2300      	movs	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003064:	f107 031c 	add.w	r3, r7, #28
 8003068:	4619      	mov	r1, r3
 800306a:	480b      	ldr	r0, [pc, #44]	; (8003098 <HAL_RCC_MCOConfig+0xd0>)
 800306c:	f7fe fcc2 	bl	80019f4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003070:	4b07      	ldr	r3, [pc, #28]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	01d9      	lsls	r1, r3, #7
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	430b      	orrs	r3, r1
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_MCOConfig+0xc8>)
 8003082:	4313      	orrs	r3, r2
 8003084:	610b      	str	r3, [r1, #16]
}
 8003086:	bf00      	nop
 8003088:	3730      	adds	r7, #48	; 0x30
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	58024400 	.word	0x58024400
 8003094:	58020000 	.word	0x58020000
 8003098:	58020800 	.word	0x58020800

0800309c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a2:	4bb3      	ldr	r3, [pc, #716]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030aa:	2b18      	cmp	r3, #24
 80030ac:	f200 8155 	bhi.w	800335a <HAL_RCC_GetSysClockFreq+0x2be>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	0800311d 	.word	0x0800311d
 80030bc:	0800335b 	.word	0x0800335b
 80030c0:	0800335b 	.word	0x0800335b
 80030c4:	0800335b 	.word	0x0800335b
 80030c8:	0800335b 	.word	0x0800335b
 80030cc:	0800335b 	.word	0x0800335b
 80030d0:	0800335b 	.word	0x0800335b
 80030d4:	0800335b 	.word	0x0800335b
 80030d8:	08003143 	.word	0x08003143
 80030dc:	0800335b 	.word	0x0800335b
 80030e0:	0800335b 	.word	0x0800335b
 80030e4:	0800335b 	.word	0x0800335b
 80030e8:	0800335b 	.word	0x0800335b
 80030ec:	0800335b 	.word	0x0800335b
 80030f0:	0800335b 	.word	0x0800335b
 80030f4:	0800335b 	.word	0x0800335b
 80030f8:	08003149 	.word	0x08003149
 80030fc:	0800335b 	.word	0x0800335b
 8003100:	0800335b 	.word	0x0800335b
 8003104:	0800335b 	.word	0x0800335b
 8003108:	0800335b 	.word	0x0800335b
 800310c:	0800335b 	.word	0x0800335b
 8003110:	0800335b 	.word	0x0800335b
 8003114:	0800335b 	.word	0x0800335b
 8003118:	0800314f 	.word	0x0800314f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800311c:	4b94      	ldr	r3, [pc, #592]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d009      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003128:	4b91      	ldr	r3, [pc, #580]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	4a90      	ldr	r2, [pc, #576]	; (8003374 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800313a:	e111      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800313c:	4b8d      	ldr	r3, [pc, #564]	; (8003374 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800313e:	61bb      	str	r3, [r7, #24]
      break;
 8003140:	e10e      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003142:	4b8d      	ldr	r3, [pc, #564]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003144:	61bb      	str	r3, [r7, #24]
      break;
 8003146:	e10b      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003148:	4b8c      	ldr	r3, [pc, #560]	; (800337c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800314a:	61bb      	str	r3, [r7, #24]
      break;
 800314c:	e108      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800314e:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003158:	4b85      	ldr	r3, [pc, #532]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003162:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003164:	4b82      	ldr	r3, [pc, #520]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800316e:	4b80      	ldr	r3, [pc, #512]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	08db      	lsrs	r3, r3, #3
 8003174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003186:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80e1 	beq.w	8003354 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2b02      	cmp	r3, #2
 8003196:	f000 8083 	beq.w	80032a0 <HAL_RCC_GetSysClockFreq+0x204>
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b02      	cmp	r3, #2
 800319e:	f200 80a1 	bhi.w	80032e4 <HAL_RCC_GetSysClockFreq+0x248>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_RCC_GetSysClockFreq+0x114>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d056      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x1c0>
 80031ae:	e099      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b0:	4b6f      	ldr	r3, [pc, #444]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d02d      	beq.n	8003218 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031bc:	4b6c      	ldr	r3, [pc, #432]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	4a6b      	ldr	r2, [pc, #428]	; (8003374 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	ee07 3a90 	vmov	s15, r3
 80031d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e6:	4b62      	ldr	r3, [pc, #392]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003380 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003212:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003216:	e087      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003222:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003384 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322a:	4b51      	ldr	r3, [pc, #324]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323a:	ed97 6a02 	vldr	s12, [r7, #8]
 800323e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003380 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800325a:	e065      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003266:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003388 <HAL_RCC_GetSysClockFreq+0x2ec>
 800326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800326e:	4b40      	ldr	r3, [pc, #256]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003276:	ee07 3a90 	vmov	s15, r3
 800327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800327e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003282:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003380 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800329e:	e043      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800338c <HAL_RCC_GetSysClockFreq+0x2f0>
 80032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b2:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003380 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032e2:	e021      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003388 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003380 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003326:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332c:	0a5b      	lsrs	r3, r3, #9
 800332e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003332:	3301      	adds	r3, #1
 8003334:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	ee07 3a90 	vmov	s15, r3
 800333c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003340:	edd7 6a07 	vldr	s13, [r7, #28]
 8003344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800334c:	ee17 3a90 	vmov	r3, s15
 8003350:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003352:	e005      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]
      break;
 8003358:	e002      	b.n	8003360 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800335c:	61bb      	str	r3, [r7, #24]
      break;
 800335e:	bf00      	nop
  }

  return sysclockfreq;
 8003360:	69bb      	ldr	r3, [r7, #24]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	58024400 	.word	0x58024400
 8003374:	03d09000 	.word	0x03d09000
 8003378:	003d0900 	.word	0x003d0900
 800337c:	017d7840 	.word	0x017d7840
 8003380:	46000000 	.word	0x46000000
 8003384:	4c742400 	.word	0x4c742400
 8003388:	4a742400 	.word	0x4a742400
 800338c:	4bbebc20 	.word	0x4bbebc20

08003390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003396:	f7ff fe81 	bl	800309c <HAL_RCC_GetSysClockFreq>
 800339a:	4602      	mov	r2, r0
 800339c:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	490f      	ldr	r1, [pc, #60]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80033a8:	5ccb      	ldrb	r3, [r1, r3]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	fa22 f303 	lsr.w	r3, r2, r3
 80033b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033b4:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	4a09      	ldr	r2, [pc, #36]	; (80033e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80033be:	5cd3      	ldrb	r3, [r2, r3]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033ce:	4a07      	ldr	r2, [pc, #28]	; (80033ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	58024400 	.word	0x58024400
 80033e4:	0800fc10 	.word	0x0800fc10
 80033e8:	24000004 	.word	0x24000004
 80033ec:	24000000 	.word	0x24000000

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033f4:	f7ff ffcc 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4904      	ldr	r1, [pc, #16]	; (8003418 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	f003 031f 	and.w	r3, r3, #31
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	58024400 	.word	0x58024400
 8003418:	0800fc10 	.word	0x0800fc10

0800341c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223f      	movs	r2, #63	; 0x3f
 800342a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800342c:	4b1a      	ldr	r3, [pc, #104]	; (8003498 <HAL_RCC_GetClockConfig+0x7c>)
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f003 0207 	and.w	r2, r3, #7
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003438:	4b17      	ldr	r3, [pc, #92]	; (8003498 <HAL_RCC_GetClockConfig+0x7c>)
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <HAL_RCC_GetClockConfig+0x7c>)
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCC_GetClockConfig+0x7c>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800345c:	4b0e      	ldr	r3, [pc, #56]	; (8003498 <HAL_RCC_GetClockConfig+0x7c>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_GetClockConfig+0x7c>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <HAL_RCC_GetClockConfig+0x7c>)
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003480:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetClockConfig+0x80>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 020f 	and.w	r2, r3, #15
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	58024400 	.word	0x58024400
 800349c:	52002000 	.word	0x52002000

080034a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034a4:	b0cc      	sub	sp, #304	; 0x130
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80034c4:	2500      	movs	r5, #0
 80034c6:	ea54 0305 	orrs.w	r3, r4, r5
 80034ca:	d049      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d6:	d02f      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034dc:	d828      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e2:	d01a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e8:	d822      	bhi.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034f2:	d007      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034f4:	e01c      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f6:	4bb8      	ldr	r3, [pc, #736]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fa:	4ab7      	ldr	r2, [pc, #732]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003500:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003502:	e01a      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003508:	3308      	adds	r3, #8
 800350a:	2102      	movs	r1, #2
 800350c:	4618      	mov	r0, r3
 800350e:	f002 fba1 	bl	8005c54 <RCCEx_PLL2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003518:	e00f      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800351a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800351e:	3328      	adds	r3, #40	; 0x28
 8003520:	2102      	movs	r1, #2
 8003522:	4618      	mov	r0, r3
 8003524:	f002 fc48 	bl	8005db8 <RCCEx_PLL3_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800352e:	e004      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003536:	e000      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003542:	4ba5      	ldr	r3, [pc, #660]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003546:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800354a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800354e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003550:	4aa1      	ldr	r2, [pc, #644]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003552:	430b      	orrs	r3, r1
 8003554:	6513      	str	r3, [r2, #80]	; 0x50
 8003556:	e003      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800355c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800356c:	f04f 0900 	mov.w	r9, #0
 8003570:	ea58 0309 	orrs.w	r3, r8, r9
 8003574:	d047      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800357a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800357c:	2b04      	cmp	r3, #4
 800357e:	d82a      	bhi.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003580:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003586:	bf00      	nop
 8003588:	0800359d 	.word	0x0800359d
 800358c:	080035ab 	.word	0x080035ab
 8003590:	080035c1 	.word	0x080035c1
 8003594:	080035df 	.word	0x080035df
 8003598:	080035df 	.word	0x080035df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800359c:	4b8e      	ldr	r3, [pc, #568]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a8d      	ldr	r2, [pc, #564]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a8:	e01a      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035ae:	3308      	adds	r3, #8
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f002 fb4e 	bl	8005c54 <RCCEx_PLL2_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035be:	e00f      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035c4:	3328      	adds	r3, #40	; 0x28
 80035c6:	2100      	movs	r1, #0
 80035c8:	4618      	mov	r0, r3
 80035ca:	f002 fbf5 	bl	8005db8 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035d4:	e004      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80035dc:	e000      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10a      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035e8:	4b7b      	ldr	r3, [pc, #492]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ec:	f023 0107 	bic.w	r1, r3, #7
 80035f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f6:	4a78      	ldr	r2, [pc, #480]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f8:	430b      	orrs	r3, r1
 80035fa:	6513      	str	r3, [r2, #80]	; 0x50
 80035fc:	e003      	b.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003602:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003612:	f04f 0b00 	mov.w	fp, #0
 8003616:	ea5a 030b 	orrs.w	r3, sl, fp
 800361a:	d04c      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800361c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003626:	d030      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800362c:	d829      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800362e:	2bc0      	cmp	r3, #192	; 0xc0
 8003630:	d02d      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003632:	2bc0      	cmp	r3, #192	; 0xc0
 8003634:	d825      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d018      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800363a:	2b80      	cmp	r3, #128	; 0x80
 800363c:	d821      	bhi.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800363e:	2b00      	cmp	r3, #0
 8003640:	d002      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d007      	beq.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003646:	e01c      	b.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003648:	4b63      	ldr	r3, [pc, #396]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	4a62      	ldr	r2, [pc, #392]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003652:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003654:	e01c      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003656:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800365a:	3308      	adds	r3, #8
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f002 faf8 	bl	8005c54 <RCCEx_PLL2_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800366a:	e011      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800366c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003670:	3328      	adds	r3, #40	; 0x28
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f002 fb9f 	bl	8005db8 <RCCEx_PLL3_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003680:	e006      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003688:	e002      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800368e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003690:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80036a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	4a4c      	ldr	r2, [pc, #304]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6513      	str	r3, [r2, #80]	; 0x50
 80036ac:	e003      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80036c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80036cc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80036d0:	460b      	mov	r3, r1
 80036d2:	4313      	orrs	r3, r2
 80036d4:	d053      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e2:	d035      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036e8:	d82e      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036ee:	d031      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036f4:	d828      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036fa:	d01a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003700:	d822      	bhi.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003706:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370a:	d007      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800370c:	e01c      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800370e:	4b32      	ldr	r3, [pc, #200]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003712:	4a31      	ldr	r2, [pc, #196]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003718:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800371a:	e01c      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800371c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003720:	3308      	adds	r3, #8
 8003722:	2100      	movs	r1, #0
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fa95 	bl	8005c54 <RCCEx_PLL2_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003730:	e011      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003736:	3328      	adds	r3, #40	; 0x28
 8003738:	2100      	movs	r1, #0
 800373a:	4618      	mov	r0, r3
 800373c:	f002 fb3c 	bl	8005db8 <RCCEx_PLL3_Config>
 8003740:	4603      	mov	r3, r0
 8003742:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003746:	e006      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800374e:	e002      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003750:	bf00      	nop
 8003752:	e000      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003756:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800375e:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003766:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800376a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800376e:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003770:	430b      	orrs	r3, r1
 8003772:	6593      	str	r3, [r2, #88]	; 0x58
 8003774:	e003      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003776:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800377a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800377e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800378a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003794:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003798:	460b      	mov	r3, r1
 800379a:	4313      	orrs	r3, r2
 800379c:	d056      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800379e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037aa:	d038      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b0:	d831      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037b6:	d034      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037bc:	d82b      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037c2:	d01d      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80037c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037c8:	d825      	bhi.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d006      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d2:	d00a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037d4:	e01f      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037d6:	bf00      	nop
 80037d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037dc:	4ba2      	ldr	r3, [pc, #648]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	4aa1      	ldr	r2, [pc, #644]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037e8:	e01c      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ee:	3308      	adds	r3, #8
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f002 fa2e 	bl	8005c54 <RCCEx_PLL2_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037fe:	e011      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003804:	3328      	adds	r3, #40	; 0x28
 8003806:	2100      	movs	r1, #0
 8003808:	4618      	mov	r0, r3
 800380a:	f002 fad5 	bl	8005db8 <RCCEx_PLL3_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003814:	e006      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800381c:	e002      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003824:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10b      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800382c:	4b8e      	ldr	r3, [pc, #568]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003830:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003834:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800383c:	4a8a      	ldr	r2, [pc, #552]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383e:	430b      	orrs	r3, r1
 8003840:	6593      	str	r3, [r2, #88]	; 0x58
 8003842:	e003      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003844:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003848:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800384c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003854:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800385c:	2300      	movs	r3, #0
 800385e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003862:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003866:	460b      	mov	r3, r1
 8003868:	4313      	orrs	r3, r2
 800386a:	d03a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800386c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003872:	2b30      	cmp	r3, #48	; 0x30
 8003874:	d01f      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003876:	2b30      	cmp	r3, #48	; 0x30
 8003878:	d819      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800387a:	2b20      	cmp	r3, #32
 800387c:	d00c      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800387e:	2b20      	cmp	r3, #32
 8003880:	d815      	bhi.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d019      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003886:	2b10      	cmp	r3, #16
 8003888:	d111      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800388a:	4b77      	ldr	r3, [pc, #476]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	4a76      	ldr	r2, [pc, #472]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003894:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003896:	e011      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003898:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800389c:	3308      	adds	r3, #8
 800389e:	2102      	movs	r1, #2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f002 f9d7 	bl	8005c54 <RCCEx_PLL2_Config>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038ac:	e006      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80038b4:	e002      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038b6:	bf00      	nop
 80038b8:	e000      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038c4:	4b68      	ldr	r3, [pc, #416]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d2:	4a65      	ldr	r2, [pc, #404]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d4:	430b      	orrs	r3, r1
 80038d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038d8:	e003      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80038ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038f8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80038fc:	460b      	mov	r3, r1
 80038fe:	4313      	orrs	r3, r2
 8003900:	d051      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003902:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800390c:	d035      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800390e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003912:	d82e      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003914:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003918:	d031      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800391a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800391e:	d828      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003924:	d01a      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800392a:	d822      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003934:	d007      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003936:	e01c      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003938:	4b4b      	ldr	r3, [pc, #300]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	4a4a      	ldr	r2, [pc, #296]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003942:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003944:	e01c      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394a:	3308      	adds	r3, #8
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f002 f980 	bl	8005c54 <RCCEx_PLL2_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800395a:	e011      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800395c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003960:	3328      	adds	r3, #40	; 0x28
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f002 fa27 	bl	8005db8 <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003970:	e006      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003978:	e002      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800397e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003980:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003988:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003990:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003996:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003998:	430b      	orrs	r3, r1
 800399a:	6513      	str	r3, [r2, #80]	; 0x50
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039a2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80039b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80039b6:	2300      	movs	r3, #0
 80039b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80039bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4313      	orrs	r3, r2
 80039c4:	d056      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80039c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d0:	d033      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d6:	d82c      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039dc:	d02f      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039e2:	d826      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e8:	d02b      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80039ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039ee:	d820      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f4:	d012      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039fa:	d81a      	bhi.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d022      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d115      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f002 f920 	bl	8005c54 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a1a:	e015      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a20:	3328      	adds	r3, #40	; 0x28
 8003a22:	2101      	movs	r1, #1
 8003a24:	4618      	mov	r0, r3
 8003a26:	f002 f9c7 	bl	8005db8 <RCCEx_PLL3_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a30:	e00a      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a48:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10d      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a5e:	4a02      	ldr	r2, [pc, #8]	; (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a60:	430b      	orrs	r3, r1
 8003a62:	6513      	str	r3, [r2, #80]	; 0x50
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a66:	bf00      	nop
 8003a68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a6c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a70:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a84:	2300      	movs	r3, #0
 8003a86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a8a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4313      	orrs	r3, r2
 8003a92:	d055      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa0:	d033      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa6:	d82c      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d02f      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d826      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ab8:	d02b      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003abe:	d820      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac4:	d012      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aca:	d81a      	bhi.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d022      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ad4:	d115      	bne.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ada:	3308      	adds	r3, #8
 8003adc:	2101      	movs	r1, #1
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 f8b8 	bl	8005c54 <RCCEx_PLL2_Config>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003aea:	e015      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003af0:	3328      	adds	r3, #40	; 0x28
 8003af2:	2101      	movs	r1, #1
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 f95f 	bl	8005db8 <RCCEx_PLL3_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b00:	e00a      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b08:	e006      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b0a:	bf00      	nop
 8003b0c:	e004      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b18:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b20:	4bb6      	ldr	r3, [pc, #728]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b24:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003b30:	4ab2      	ldr	r2, [pc, #712]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6593      	str	r3, [r2, #88]	; 0x58
 8003b36:	e003      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b3c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d02a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d011      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d10a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b74:	3308      	adds	r3, #8
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 f86b 	bl	8005c54 <RCCEx_PLL2_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003b84:	e004      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b8c:	e000      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10a      	bne.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003b98:	4b98      	ldr	r3, [pc, #608]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ba6:	4a95      	ldr	r2, [pc, #596]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bac:	e003      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bb2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003bc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003bcc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	d037      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be0:	d00e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003be6:	d816      	bhi.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d018      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003bec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bf0:	d111      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf2:	4b82      	ldr	r3, [pc, #520]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf6:	4a81      	ldr	r2, [pc, #516]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bfe:	e00f      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c04:	3308      	adds	r3, #8
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f002 f823 	bl	8005c54 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c14:	e004      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003c1c:	e000      	b.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c28:	4b74      	ldr	r3, [pc, #464]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003c30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	4a71      	ldr	r2, [pc, #452]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6513      	str	r3, [r2, #80]	; 0x50
 8003c3c:	e003      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c42:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003c52:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c5c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4313      	orrs	r3, r2
 8003c64:	d03a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d81d      	bhi.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003cb5 	.word	0x08003cb5
 8003c7c:	08003c89 	.word	0x08003c89
 8003c80:	08003c97 	.word	0x08003c97
 8003c84:	08003cb5 	.word	0x08003cb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c88:	4b5c      	ldr	r3, [pc, #368]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	4a5b      	ldr	r2, [pc, #364]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c94:	e00f      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 ffd8 	bl	8005c54 <RCCEx_PLL2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003caa:	e004      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cbe:	4b4f      	ldr	r3, [pc, #316]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	f023 0103 	bic.w	r1, r3, #3
 8003cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ccc:	4a4b      	ldr	r2, [pc, #300]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd2:	e003      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cd8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cec:	2300      	movs	r3, #0
 8003cee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f000 80a0 	beq.w	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cfe:	4b40      	ldr	r3, [pc, #256]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a3f      	ldr	r2, [pc, #252]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d0a:	f7fd fb77 	bl	80013fc <HAL_GetTick>
 8003d0e:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d12:	e00b      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d14:	f7fd fb72 	bl	80013fc <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b64      	cmp	r3, #100	; 0x64
 8003d22:	d903      	bls.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003d2a:	e005      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d2c:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d0ed      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003d38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d17a      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d4c:	4053      	eors	r3, r2
 8003d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d015      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d56:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d62:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d6e:	4b23      	ldr	r3, [pc, #140]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d78:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d7a:	4a20      	ldr	r2, [pc, #128]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d7c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d118      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fd fb34 	bl	80013fc <HAL_GetTick>
 8003d94:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d98:	e00d      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fd fb2f 	bl	80013fc <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003da4:	1ad2      	subs	r2, r2, r3
 8003da6:	f241 3388 	movw	r3, #5000	; 0x1388
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d903      	bls.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8003db4:	e005      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0eb      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d130      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dda:	d115      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003de8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dec:	091a      	lsrs	r2, r3, #4
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003df0:	4013      	ands	r3, r2
 8003df2:	4a02      	ldr	r2, [pc, #8]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6113      	str	r3, [r2, #16]
 8003df8:	e00c      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	58024800 	.word	0x58024800
 8003e04:	00ffffcf 	.word	0x00ffffcf
 8003e08:	4bd4      	ldr	r3, [pc, #848]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	4ad3      	ldr	r2, [pc, #844]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e12:	6113      	str	r3, [r2, #16]
 8003e14:	4bd1      	ldr	r3, [pc, #836]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e16:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e1c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e24:	4acd      	ldr	r2, [pc, #820]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e008      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e30:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8003e34:	e003      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e3a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f002 0301 	and.w	r3, r2, #1
 8003e4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f000 808b 	beq.w	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e68:	2b28      	cmp	r3, #40	; 0x28
 8003e6a:	d86b      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003f4d 	.word	0x08003f4d
 8003e78:	08003f45 	.word	0x08003f45
 8003e7c:	08003f45 	.word	0x08003f45
 8003e80:	08003f45 	.word	0x08003f45
 8003e84:	08003f45 	.word	0x08003f45
 8003e88:	08003f45 	.word	0x08003f45
 8003e8c:	08003f45 	.word	0x08003f45
 8003e90:	08003f45 	.word	0x08003f45
 8003e94:	08003f19 	.word	0x08003f19
 8003e98:	08003f45 	.word	0x08003f45
 8003e9c:	08003f45 	.word	0x08003f45
 8003ea0:	08003f45 	.word	0x08003f45
 8003ea4:	08003f45 	.word	0x08003f45
 8003ea8:	08003f45 	.word	0x08003f45
 8003eac:	08003f45 	.word	0x08003f45
 8003eb0:	08003f45 	.word	0x08003f45
 8003eb4:	08003f2f 	.word	0x08003f2f
 8003eb8:	08003f45 	.word	0x08003f45
 8003ebc:	08003f45 	.word	0x08003f45
 8003ec0:	08003f45 	.word	0x08003f45
 8003ec4:	08003f45 	.word	0x08003f45
 8003ec8:	08003f45 	.word	0x08003f45
 8003ecc:	08003f45 	.word	0x08003f45
 8003ed0:	08003f45 	.word	0x08003f45
 8003ed4:	08003f4d 	.word	0x08003f4d
 8003ed8:	08003f45 	.word	0x08003f45
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08003f45 	.word	0x08003f45
 8003ee8:	08003f45 	.word	0x08003f45
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003f4d 	.word	0x08003f4d
 8003ef8:	08003f45 	.word	0x08003f45
 8003efc:	08003f45 	.word	0x08003f45
 8003f00:	08003f45 	.word	0x08003f45
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f45 	.word	0x08003f45
 8003f10:	08003f45 	.word	0x08003f45
 8003f14:	08003f4d 	.word	0x08003f4d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f001 fe97 	bl	8005c54 <RCCEx_PLL2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f32:	3328      	adds	r3, #40	; 0x28
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 ff3e 	bl	8005db8 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f56:	4b81      	ldr	r3, [pc, #516]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003f5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f66:	4a7d      	ldr	r2, [pc, #500]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6553      	str	r3, [r2, #84]	; 0x54
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f72:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f002 0302 	and.w	r3, r2, #2
 8003f82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003f8c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003f90:	460b      	mov	r3, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	d042      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d825      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003fc1 	.word	0x08003fc1
 8003fb0:	08003fd7 	.word	0x08003fd7
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f001 fe43 	bl	8005c54 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00f      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fda:	3328      	adds	r3, #40	; 0x28
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 feea 	bl	8005db8 <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fea:	e004      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ffe:	4b57      	ldr	r3, [pc, #348]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f023 0107 	bic.w	r1, r3, #7
 8004006:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800400a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400c:	4a53      	ldr	r2, [pc, #332]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800400e:	430b      	orrs	r3, r1
 8004010:	6553      	str	r3, [r2, #84]	; 0x54
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004018:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800401c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 0304 	and.w	r3, r2, #4
 8004028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004032:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d044      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800403c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004044:	2b05      	cmp	r3, #5
 8004046:	d825      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004048:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	0800409d 	.word	0x0800409d
 8004054:	08004069 	.word	0x08004069
 8004058:	0800407f 	.word	0x0800407f
 800405c:	0800409d 	.word	0x0800409d
 8004060:	0800409d 	.word	0x0800409d
 8004064:	0800409d 	.word	0x0800409d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004068:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800406c:	3308      	adds	r3, #8
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f001 fdef 	bl	8005c54 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004082:	3328      	adds	r3, #40	; 0x28
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fe96 	bl	8005db8 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040aa:	f023 0107 	bic.w	r1, r3, #7
 80040ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6593      	str	r3, [r2, #88]	; 0x58
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f002 0320 	and.w	r3, r2, #32
 80040d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040e0:	460b      	mov	r3, r1
 80040e2:	4313      	orrs	r3, r2
 80040e4:	d057      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f2:	d035      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80040f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f8:	d82c      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fe:	d031      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004104:	d826      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800410a:	d02d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800410c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004110:	d820      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004116:	d012      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800411c:	d81a      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d024      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004126:	d115      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004128:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800412c:	3308      	adds	r3, #8
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f001 fd8f 	bl	8005c54 <RCCEx_PLL2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800413c:	e017      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800413e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004142:	3328      	adds	r3, #40	; 0x28
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fe36 	bl	8005db8 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004152:	e00c      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800415a:	e008      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800415c:	58024400 	.word	0x58024400
        break;
 8004160:	bf00      	nop
 8004162:	e004      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004164:	bf00      	nop
 8004166:	e002      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004168:	bf00      	nop
 800416a:	e000      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800416c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004176:	4bc2      	ldr	r3, [pc, #776]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800417e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004186:	4abe      	ldr	r2, [pc, #760]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004188:	430b      	orrs	r3, r1
 800418a:	6553      	str	r3, [r2, #84]	; 0x54
 800418c:	e003      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004192:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004196:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80041ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	d055      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041c2:	d033      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80041c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041c8:	d82c      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	d02f      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80041d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d4:	d826      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80041d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041da:	d02b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80041dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041e0:	d820      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80041e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e6:	d012      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80041e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ec:	d81a      	bhi.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d022      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f6:	d115      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041fc:	3308      	adds	r3, #8
 80041fe:	2100      	movs	r1, #0
 8004200:	4618      	mov	r0, r3
 8004202:	f001 fd27 	bl	8005c54 <RCCEx_PLL2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800420c:	e015      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004212:	3328      	adds	r3, #40	; 0x28
 8004214:	2102      	movs	r1, #2
 8004216:	4618      	mov	r0, r3
 8004218:	f001 fdce 	bl	8005db8 <RCCEx_PLL3_Config>
 800421c:	4603      	mov	r3, r0
 800421e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004222:	e00a      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800422a:	e006      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800422c:	bf00      	nop
 800422e:	e004      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004230:	bf00      	nop
 8004232:	e002      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10b      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004242:	4b8f      	ldr	r3, [pc, #572]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800424a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800424e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004252:	4a8b      	ldr	r2, [pc, #556]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004254:	430b      	orrs	r3, r1
 8004256:	6593      	str	r3, [r2, #88]	; 0x58
 8004258:	e003      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800425e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004262:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800426e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004272:	2300      	movs	r3, #0
 8004274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004278:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d055      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004282:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004286:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800428a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800428e:	d033      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004290:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004294:	d82c      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800429c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a0:	d826      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80042a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042a6:	d02b      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80042a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ac:	d820      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80042ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b2:	d012      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80042b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b8:	d81a      	bhi.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d022      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c2:	d115      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042c8:	3308      	adds	r3, #8
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 fcc1 	bl	8005c54 <RCCEx_PLL2_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042d8:	e015      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042de:	3328      	adds	r3, #40	; 0x28
 80042e0:	2102      	movs	r1, #2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 fd68 	bl	8005db8 <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ee:	e00a      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80042f6:	e006      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80042f8:	bf00      	nop
 80042fa:	e004      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80042fc:	bf00      	nop
 80042fe:	e002      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004300:	bf00      	nop
 8004302:	e000      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004304:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004306:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800430e:	4b5c      	ldr	r3, [pc, #368]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004312:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800431a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800431e:	4a58      	ldr	r2, [pc, #352]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004320:	430b      	orrs	r3, r1
 8004322:	6593      	str	r3, [r2, #88]	; 0x58
 8004324:	e003      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004326:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800432a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800432e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004336:	f002 0308 	and.w	r3, r2, #8
 800433a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800433e:	2300      	movs	r3, #0
 8004340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004344:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d01e      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800434e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d10c      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800435c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004360:	3328      	adds	r3, #40	; 0x28
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f001 fd27 	bl	8005db8 <RCCEx_PLL3_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004376:	4b42      	ldr	r3, [pc, #264]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800437e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004386:	4a3e      	ldr	r2, [pc, #248]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800438c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f002 0310 	and.w	r3, r2, #16
 8004398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80043a6:	460b      	mov	r3, r1
 80043a8:	4313      	orrs	r3, r2
 80043aa:	d01e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043be:	3328      	adds	r3, #40	; 0x28
 80043c0:	2102      	movs	r1, #2
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 fcf8 	bl	8005db8 <RCCEx_PLL3_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d4:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043e4:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80043e6:	430b      	orrs	r3, r1
 80043e8:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80043f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004400:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d040      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800440a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800440e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004416:	d022      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800441c:	d81b      	bhi.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004426:	d00b      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004428:	e015      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800442a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800442e:	3308      	adds	r3, #8
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f001 fc0e 	bl	8005c54 <RCCEx_PLL2_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800443e:	e00f      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004444:	3328      	adds	r3, #40	; 0x28
 8004446:	2102      	movs	r1, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f001 fcb5 	bl	8005db8 <RCCEx_PLL3_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004454:	e004      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800445e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004460:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800446a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004470:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004474:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004478:	4a01      	ldr	r2, [pc, #4]	; (8004480 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800447a:	430b      	orrs	r3, r1
 800447c:	6593      	str	r3, [r2, #88]	; 0x58
 800447e:	e005      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004484:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004488:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800448c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004494:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004498:	67bb      	str	r3, [r7, #120]	; 0x78
 800449a:	2300      	movs	r3, #0
 800449c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800449e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80044a2:	460b      	mov	r3, r1
 80044a4:	4313      	orrs	r3, r2
 80044a6:	d03b      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044b4:	d01f      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80044b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044ba:	d818      	bhi.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80044bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c0:	d003      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80044c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c6:	d007      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80044c8:	e011      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ca:	4b64      	ldr	r3, [pc, #400]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044d6:	e00f      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044dc:	3328      	adds	r3, #40	; 0x28
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f001 fc69 	bl	8005db8 <RCCEx_PLL3_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80044ec:	e004      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80044f4:	e000      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80044f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004500:	4b56      	ldr	r3, [pc, #344]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004504:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	4a52      	ldr	r2, [pc, #328]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004512:	430b      	orrs	r3, r1
 8004514:	6553      	str	r3, [r2, #84]	; 0x54
 8004516:	e003      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800451c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004520:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800452c:	673b      	str	r3, [r7, #112]	; 0x70
 800452e:	2300      	movs	r3, #0
 8004530:	677b      	str	r3, [r7, #116]	; 0x74
 8004532:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004536:	460b      	mov	r3, r1
 8004538:	4313      	orrs	r3, r2
 800453a:	d031      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800453c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454a:	d007      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800454c:	e011      	b.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454e:	4b43      	ldr	r3, [pc, #268]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004552:	4a42      	ldr	r2, [pc, #264]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004558:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800455a:	e00e      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800455c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004560:	3308      	adds	r3, #8
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f001 fb75 	bl	8005c54 <RCCEx_PLL2_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004570:	e003      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800458a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	4a32      	ldr	r2, [pc, #200]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004592:	430b      	orrs	r3, r1
 8004594:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004596:	e003      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004598:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800459c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80045ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80045ae:	2300      	movs	r3, #0
 80045b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d00c      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045c0:	3328      	adds	r3, #40	; 0x28
 80045c2:	2102      	movs	r1, #2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 fbf7 	bl	8005db8 <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80045e2:	663b      	str	r3, [r7, #96]	; 0x60
 80045e4:	2300      	movs	r3, #0
 80045e6:	667b      	str	r3, [r7, #100]	; 0x64
 80045e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d03a      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045fe:	d018      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004604:	d811      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800460a:	d014      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004610:	d80b      	bhi.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d011      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461a:	d106      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	4a0e      	ldr	r2, [pc, #56]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004628:	e008      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004630:	e004      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004632:	bf00      	nop
 8004634:	e002      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004636:	bf00      	nop
 8004638:	e000      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800463a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800463c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800464c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004654:	4a01      	ldr	r2, [pc, #4]	; (800465c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004656:	430b      	orrs	r3, r1
 8004658:	6553      	str	r3, [r2, #84]	; 0x54
 800465a:	e005      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800465c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004664:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004674:	65bb      	str	r3, [r7, #88]	; 0x58
 8004676:	2300      	movs	r3, #0
 8004678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800467a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004684:	4baa      	ldr	r3, [pc, #680]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004688:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800468c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004692:	4aa7      	ldr	r2, [pc, #668]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004694:	430b      	orrs	r3, r1
 8004696:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004698:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80046a4:	653b      	str	r3, [r7, #80]	; 0x50
 80046a6:	2300      	movs	r3, #0
 80046a8:	657b      	str	r3, [r7, #84]	; 0x54
 80046aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046b4:	4b9e      	ldr	r3, [pc, #632]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80046bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80046c4:	4a9a      	ldr	r2, [pc, #616]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80046d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80046d8:	2300      	movs	r3, #0
 80046da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046e6:	4b92      	ldr	r3, [pc, #584]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80046e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80046ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f4:	4a8e      	ldr	r2, [pc, #568]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004706:	643b      	str	r3, [r7, #64]	; 0x40
 8004708:	2300      	movs	r3, #0
 800470a:	647b      	str	r3, [r7, #68]	; 0x44
 800470c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004716:	4b86      	ldr	r3, [pc, #536]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	4a85      	ldr	r2, [pc, #532]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800471c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004720:	6113      	str	r3, [r2, #16]
 8004722:	4b83      	ldr	r3, [pc, #524]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004724:	6919      	ldr	r1, [r3, #16]
 8004726:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800472a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800472e:	4a80      	ldr	r2, [pc, #512]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004730:	430b      	orrs	r3, r1
 8004732:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004734:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004740:	63bb      	str	r3, [r7, #56]	; 0x38
 8004742:	2300      	movs	r3, #0
 8004744:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004746:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800474a:	460b      	mov	r3, r1
 800474c:	4313      	orrs	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004750:	4b77      	ldr	r3, [pc, #476]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004754:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004758:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800475c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800475e:	4a74      	ldr	r2, [pc, #464]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004760:	430b      	orrs	r3, r1
 8004762:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004764:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004770:	633b      	str	r3, [r7, #48]	; 0x30
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	; 0x34
 8004776:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004780:	4b6b      	ldr	r3, [pc, #428]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004788:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	4a67      	ldr	r2, [pc, #412]	; (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004792:	430b      	orrs	r3, r1
 8004794:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004796:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	2100      	movs	r1, #0
 80047a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d011      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047b6:	3308      	adds	r3, #8
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 fa4a 	bl	8005c54 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80047c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	2100      	movs	r1, #0
 80047e0:	6239      	str	r1, [r7, #32]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
 80047e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047f6:	3308      	adds	r3, #8
 80047f8:	2101      	movs	r1, #1
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 fa2a 	bl	8005c54 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004806:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004812:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	2100      	movs	r1, #0
 8004820:	61b9      	str	r1, [r7, #24]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d011      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004832:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004836:	3308      	adds	r3, #8
 8004838:	2102      	movs	r1, #2
 800483a:	4618      	mov	r0, r3
 800483c:	f001 fa0a 	bl	8005c54 <RCCEx_PLL2_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004846:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004852:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004856:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	2100      	movs	r1, #0
 8004860:	6139      	str	r1, [r7, #16]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800486c:	460b      	mov	r3, r1
 800486e:	4313      	orrs	r3, r2
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004876:	3328      	adds	r3, #40	; 0x28
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fa9c 	bl	8005db8 <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8004886:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004892:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004896:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	2100      	movs	r1, #0
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d011      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048b6:	3328      	adds	r3, #40	; 0x28
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fa7c 	bl	8005db8 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80048c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	2100      	movs	r1, #0
 80048e0:	6039      	str	r1, [r7, #0]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d011      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048f6:	3328      	adds	r3, #40	; 0x28
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f001 fa5c 	bl	8005db8 <RCCEx_PLL3_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004906:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004912:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8004916:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
}
 8004924:	4618      	mov	r0, r3
 8004926:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800492a:	46bd      	mov	sp, r7
 800492c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004930:	58024400 	.word	0x58024400

08004934 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b090      	sub	sp, #64	; 0x40
 8004938:	af00      	add	r7, sp, #0
 800493a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800493e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004942:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004946:	430b      	orrs	r3, r1
 8004948:	f040 8094 	bne.w	8004a74 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800494c:	4b9e      	ldr	r3, [pc, #632]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	2b04      	cmp	r3, #4
 800495a:	f200 8087 	bhi.w	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004979 	.word	0x08004979
 8004968:	080049a1 	.word	0x080049a1
 800496c:	080049c9 	.word	0x080049c9
 8004970:	08004a65 	.word	0x08004a65
 8004974:	080049f1 	.word	0x080049f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004978:	4b93      	ldr	r3, [pc, #588]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004980:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004984:	d108      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f810 	bl	80059b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004994:	f000 bd45 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800499c:	f000 bd41 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80049a0:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ac:	d108      	bne.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049ae:	f107 0318 	add.w	r3, r7, #24
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fd54 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049bc:	f000 bd31 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049c4:	f000 bd2d 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80049c8:	4b7f      	ldr	r3, [pc, #508]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049d4:	d108      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049d6:	f107 030c 	add.w	r3, r7, #12
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fe94 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049e4:	f000 bd1d 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ec:	f000 bd19 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80049f0:	4b75      	ldr	r3, [pc, #468]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049fa:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d109      	bne.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a0c:	4b6e      	ldr	r3, [pc, #440]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	08db      	lsrs	r3, r3, #3
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	4a6d      	ldr	r2, [pc, #436]	; (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004a18:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a1e:	e01f      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a20:	4b69      	ldr	r3, [pc, #420]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a34:	d102      	bne.n	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a36:	4b66      	ldr	r3, [pc, #408]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3a:	e011      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004a3c:	4b62      	ldr	r3, [pc, #392]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a50:	d102      	bne.n	8004a58 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004a52:	4b60      	ldr	r3, [pc, #384]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a56:	e003      	b.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004a5c:	f000 bce1 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004a60:	f000 bcdf 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004a64:	4b5c      	ldr	r3, [pc, #368]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a68:	f000 bcdb 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a70:	f000 bcd7 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a78:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	f040 80ad 	bne.w	8004bdc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004a82:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004a8a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d056      	beq.n	8004b42 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	f200 8090 	bhi.w	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa2:	f000 8088 	beq.w	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa8:	2bc0      	cmp	r3, #192	; 0xc0
 8004aaa:	f200 8088 	bhi.w	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d032      	beq.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2b80      	cmp	r3, #128	; 0x80
 8004ab8:	f200 8081 	bhi.w	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d014      	beq.n	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004ac8:	e079      	b.n	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aca:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ad6:	d108      	bne.n	8004aea <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 ff67 	bl	80059b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ae6:	f000 bc9c 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004aea:	2300      	movs	r3, #0
 8004aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004aee:	f000 bc98 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004af2:	4b35      	ldr	r3, [pc, #212]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004afe:	d108      	bne.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b00:	f107 0318 	add.w	r3, r7, #24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fcab 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b0e:	f000 bc88 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b16:	f000 bc84 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b26:	d108      	bne.n	8004b3a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b28:	f107 030c 	add.w	r3, r7, #12
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fdeb 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b36:	f000 bc74 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b3e:	f000 bc70 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b42:	4b21      	ldr	r3, [pc, #132]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b4a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b4c:	4b1e      	ldr	r3, [pc, #120]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0304 	and.w	r3, r3, #4
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d10c      	bne.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	08db      	lsrs	r3, r3, #3
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	4a18      	ldr	r2, [pc, #96]	; (8004bcc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b70:	e01f      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7e:	d106      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b86:	d102      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b88:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8c:	e011      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b9a:	d106      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba2:	d102      	bne.n	8004baa <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ba8:	e003      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004bae:	f000 bc38 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004bb2:	f000 bc36 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004bb6:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bba:	f000 bc32 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bc2:	f000 bc2e 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	03d09000 	.word	0x03d09000
 8004bd0:	003d0900 	.word	0x003d0900
 8004bd4:	017d7840 	.word	0x017d7840
 8004bd8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004be0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004be4:	430b      	orrs	r3, r1
 8004be6:	f040 809c 	bne.w	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004bea:	4b9e      	ldr	r3, [pc, #632]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004bf2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bfa:	d054      	beq.n	8004ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c02:	f200 808b 	bhi.w	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c0c:	f000 8083 	beq.w	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004c16:	f200 8081 	bhi.w	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c20:	d02f      	beq.n	8004c82 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c28:	d878      	bhi.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c36:	d012      	beq.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004c38:	e070      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c3a:	4b8a      	ldr	r3, [pc, #552]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c46:	d107      	bne.n	8004c58 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 feaf 	bl	80059b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c56:	e3e4      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c5c:	e3e1      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c5e:	4b81      	ldr	r3, [pc, #516]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c6a:	d107      	bne.n	8004c7c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c6c:	f107 0318 	add.w	r3, r7, #24
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fbf5 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c7a:	e3d2      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c80:	e3cf      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c82:	4b78      	ldr	r3, [pc, #480]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 fd37 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c9e:	e3c0      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ca4:	e3bd      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ca6:	4b6f      	ldr	r3, [pc, #444]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cb0:	4b6c      	ldr	r3, [pc, #432]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cc2:	4b68      	ldr	r3, [pc, #416]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	08db      	lsrs	r3, r3, #3
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	4a66      	ldr	r2, [pc, #408]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd4:	e01e      	b.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cd6:	4b63      	ldr	r3, [pc, #396]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ce2:	d106      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cea:	d102      	bne.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004cec:	4b5f      	ldr	r3, [pc, #380]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf0:	e010      	b.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cf2:	4b5c      	ldr	r3, [pc, #368]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d06:	d102      	bne.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004d08:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d0c:	e002      	b.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004d12:	e386      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004d14:	e385      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d16:	4b57      	ldr	r3, [pc, #348]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d1a:	e382      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d20:	e37f      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d26:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	f040 80a7 	bne.w	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004d30:	4b4c      	ldr	r3, [pc, #304]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d34:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004d38:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d40:	d055      	beq.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d48:	f200 8096 	bhi.w	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d52:	f000 8084 	beq.w	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004d5c:	f200 808c 	bhi.w	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d66:	d030      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d6e:	f200 8083 	bhi.w	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d004      	beq.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d7e:	d012      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004d80:	e07a      	b.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d82:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d8e:	d107      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 fe0b 	bl	80059b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d9e:	e340      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004da4:	e33d      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004db4:	f107 0318 	add.w	r3, r7, #24
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 fb51 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dc2:	e32e      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dc8:	e32b      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dca:	4b26      	ldr	r3, [pc, #152]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dd8:	f107 030c 	add.w	r3, r7, #12
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fc93 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004de6:	e31c      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dec:	e319      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004df8:	4b1a      	ldr	r3, [pc, #104]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d10c      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d109      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e0a:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	4a14      	ldr	r2, [pc, #80]	; (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004e16:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e1c:	e01e      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e1e:	4b11      	ldr	r3, [pc, #68]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e32:	d102      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	e010      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	; (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e46:	d106      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e4e:	d102      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e54:	e002      	b.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004e5a:	e2e2      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004e5c:	e2e1      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e62:	e2de      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004e64:	58024400 	.word	0x58024400
 8004e68:	03d09000 	.word	0x03d09000
 8004e6c:	003d0900 	.word	0x003d0900
 8004e70:	017d7840 	.word	0x017d7840
 8004e74:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e7c:	e2d1      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e82:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004e86:	430b      	orrs	r3, r1
 8004e88:	f040 809c 	bne.w	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004e8c:	4b93      	ldr	r3, [pc, #588]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e90:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004e94:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e9c:	d054      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea4:	f200 808b 	bhi.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eae:	f000 8083 	beq.w	8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004eb8:	f200 8081 	bhi.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ec2:	d02f      	beq.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eca:	d878      	bhi.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d004      	beq.n	8004edc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed8:	d012      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004eda:	e070      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004edc:	4b7f      	ldr	r3, [pc, #508]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee8:	d107      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fd5e 	bl	80059b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ef8:	e293      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004efe:	e290      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f00:	4b76      	ldr	r3, [pc, #472]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f0e:	f107 0318 	add.w	r3, r7, #24
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 faa4 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f1c:	e281      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f22:	e27e      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f24:	4b6d      	ldr	r3, [pc, #436]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f30:	d107      	bne.n	8004f42 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f32:	f107 030c 	add.w	r3, r7, #12
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fbe6 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f40:	e26f      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f46:	e26c      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f48:	4b64      	ldr	r3, [pc, #400]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f50:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f52:	4b62      	ldr	r3, [pc, #392]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d10c      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d109      	bne.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f64:	4b5d      	ldr	r3, [pc, #372]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	08db      	lsrs	r3, r3, #3
 8004f6a:	f003 0303 	and.w	r3, r3, #3
 8004f6e:	4a5c      	ldr	r2, [pc, #368]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004f70:	fa22 f303 	lsr.w	r3, r2, r3
 8004f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f76:	e01e      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f78:	4b58      	ldr	r3, [pc, #352]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f84:	d106      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f8c:	d102      	bne.n	8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f8e:	4b55      	ldr	r3, [pc, #340]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f92:	e010      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f94:	4b51      	ldr	r3, [pc, #324]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fa0:	d106      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa8:	d102      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004faa:	4b4f      	ldr	r3, [pc, #316]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fae:	e002      	b.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004fb4:	e235      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004fb6:	e234      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004fb8:	4b4c      	ldr	r3, [pc, #304]	; (80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fbc:	e231      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fc2:	e22e      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc8:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	f040 808f 	bne.w	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004fd2:	4b42      	ldr	r3, [pc, #264]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004fda:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fe2:	d06b      	beq.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fea:	d874      	bhi.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ff2:	d056      	beq.n	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ffa:	d86c      	bhi.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005002:	d03b      	beq.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800500a:	d864      	bhi.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005012:	d021      	beq.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800501a:	d85c      	bhi.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	2b00      	cmp	r3, #0
 8005020:	d004      	beq.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005028:	d004      	beq.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800502a:	e054      	b.n	80050d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800502c:	f7fe f9e0 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8005030:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005032:	e1f6      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005034:	4b29      	ldr	r3, [pc, #164]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800503c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005040:	d107      	bne.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005042:	f107 0318 	add.w	r3, r7, #24
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fa0a 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005050:	e1e7      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005056:	e1e4      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005064:	d107      	bne.n	8005076 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005066:	f107 030c 	add.w	r3, r7, #12
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fb4c 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005074:	e1d5      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800507a:	e1d2      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800507c:	4b17      	ldr	r3, [pc, #92]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b04      	cmp	r3, #4
 8005086:	d109      	bne.n	800509c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005088:	4b14      	ldr	r3, [pc, #80]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	08db      	lsrs	r3, r3, #3
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	4a13      	ldr	r2, [pc, #76]	; (80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005094:	fa22 f303 	lsr.w	r3, r2, r3
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800509a:	e1c2      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800509c:	2300      	movs	r3, #0
 800509e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a0:	e1bf      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ae:	d102      	bne.n	80050b6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80050b0:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050b4:	e1b5      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ba:	e1b2      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80050bc:	4b07      	ldr	r3, [pc, #28]	; (80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050c8:	d102      	bne.n	80050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050ce:	e1a8      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050d0:	2300      	movs	r3, #0
 80050d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050d4:	e1a5      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050da:	e1a2      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80050dc:	58024400 	.word	0x58024400
 80050e0:	03d09000 	.word	0x03d09000
 80050e4:	003d0900 	.word	0x003d0900
 80050e8:	017d7840 	.word	0x017d7840
 80050ec:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80050f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80050f8:	430b      	orrs	r3, r1
 80050fa:	d173      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80050fc:	4b9c      	ldr	r3, [pc, #624]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005104:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800510c:	d02f      	beq.n	800516e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005114:	d863      	bhi.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800511c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005122:	d012      	beq.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005124:	e05b      	b.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005126:	4b92      	ldr	r3, [pc, #584]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005132:	d107      	bne.n	8005144 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005134:	f107 0318 	add.w	r3, r7, #24
 8005138:	4618      	mov	r0, r3
 800513a:	f000 f991 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005142:	e16e      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005148:	e16b      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800514a:	4b89      	ldr	r3, [pc, #548]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005156:	d107      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005158:	f107 030c 	add.w	r3, r7, #12
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fad3 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005166:	e15c      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800516c:	e159      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800516e:	4b80      	ldr	r3, [pc, #512]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005176:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005178:	4b7d      	ldr	r3, [pc, #500]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b04      	cmp	r3, #4
 8005182:	d10c      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800518a:	4b79      	ldr	r3, [pc, #484]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	08db      	lsrs	r3, r3, #3
 8005190:	f003 0303 	and.w	r3, r3, #3
 8005194:	4a77      	ldr	r2, [pc, #476]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005196:	fa22 f303 	lsr.w	r3, r2, r3
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519c:	e01e      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800519e:	4b74      	ldr	r3, [pc, #464]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051aa:	d106      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80051ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051b2:	d102      	bne.n	80051ba <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051b4:	4b70      	ldr	r3, [pc, #448]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051b8:	e010      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051ba:	4b6d      	ldr	r3, [pc, #436]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051c6:	d106      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80051c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ce:	d102      	bne.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051d0:	4b6a      	ldr	r3, [pc, #424]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d4:	e002      	b.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051d6:	2300      	movs	r3, #0
 80051d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80051da:	e122      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80051dc:	e121      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e2:	e11e      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80051e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051e8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80051ec:	430b      	orrs	r3, r1
 80051ee:	d133      	bne.n	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80051f0:	4b5f      	ldr	r3, [pc, #380]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d004      	beq.n	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005206:	d012      	beq.n	800522e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005208:	e023      	b.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800520a:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005216:	d107      	bne.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fbc7 	bl	80059b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005224:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005226:	e0fc      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800522c:	e0f9      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800522e:	4b50      	ldr	r3, [pc, #320]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800523a:	d107      	bne.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800523c:	f107 0318 	add.w	r3, r7, #24
 8005240:	4618      	mov	r0, r3
 8005242:	f000 f90d 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800524a:	e0ea      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005250:	e0e7      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005256:	e0e4      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800525c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005260:	430b      	orrs	r3, r1
 8005262:	f040 808d 	bne.w	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005266:	4b42      	ldr	r3, [pc, #264]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800526e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005276:	d06b      	beq.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800527e:	d874      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d056      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d86c      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005292:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005296:	d03b      	beq.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800529e:	d864      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a6:	d021      	beq.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ae:	d85c      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d004      	beq.n	80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052bc:	d004      	beq.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80052be:	e054      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80052c0:	f000 f8b8 	bl	8005434 <HAL_RCCEx_GetD3PCLK1Freq>
 80052c4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80052c6:	e0ac      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052c8:	4b29      	ldr	r3, [pc, #164]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d4:	d107      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052d6:	f107 0318 	add.w	r3, r7, #24
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 f8c0 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052e4:	e09d      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052e6:	2300      	movs	r3, #0
 80052e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ea:	e09a      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f8:	d107      	bne.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fa02 	bl	8005708 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005308:	e08b      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800530e:	e088      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b04      	cmp	r3, #4
 800531a:	d109      	bne.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800531c:	4b14      	ldr	r3, [pc, #80]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	08db      	lsrs	r3, r3, #3
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	4a13      	ldr	r2, [pc, #76]	; (8005374 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800532e:	e078      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005334:	e075      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005336:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	d102      	bne.n	800534a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005348:	e06b      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800534e:	e068      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005350:	4b07      	ldr	r3, [pc, #28]	; (8005370 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800535c:	d102      	bne.n	8005364 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005362:	e05e      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005368:	e05b      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800536a:	2300      	movs	r3, #0
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800536e:	e058      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005370:	58024400 	.word	0x58024400
 8005374:	03d09000 	.word	0x03d09000
 8005378:	003d0900 	.word	0x003d0900
 800537c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005384:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005388:	430b      	orrs	r3, r1
 800538a:	d148      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800538c:	4b27      	ldr	r3, [pc, #156]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800539c:	d02a      	beq.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800539e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a4:	d838      	bhi.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053b2:	d00d      	beq.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80053b4:	e030      	b.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80053b6:	4b1d      	ldr	r3, [pc, #116]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c2:	d102      	bne.n	80053ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80053c4:	4b1a      	ldr	r3, [pc, #104]	; (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053c8:	e02b      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053ca:	2300      	movs	r3, #0
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053ce:	e028      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053d0:	4b16      	ldr	r3, [pc, #88]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053dc:	d107      	bne.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fae4 	bl	80059b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053ec:	e019      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053f2:	e016      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005400:	d107      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005402:	f107 0318 	add.w	r3, r7, #24
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f82a 	bl	8005460 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005410:	e007      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005416:	e004      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800541c:	e001      	b.n	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005424:	4618      	mov	r0, r3
 8005426:	3740      	adds	r7, #64	; 0x40
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	58024400 	.word	0x58024400
 8005430:	017d7840 	.word	0x017d7840

08005434 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005438:	f7fd ffaa 	bl	8003390 <HAL_RCC_GetHCLKFreq>
 800543c:	4602      	mov	r2, r0
 800543e:	4b06      	ldr	r3, [pc, #24]	; (8005458 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	4904      	ldr	r1, [pc, #16]	; (800545c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800544a:	5ccb      	ldrb	r3, [r1, r3]
 800544c:	f003 031f 	and.w	r3, r3, #31
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	58024400 	.word	0x58024400
 800545c:	0800fc10 	.word	0x0800fc10

08005460 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005460:	b480      	push	{r7}
 8005462:	b089      	sub	sp, #36	; 0x24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005468:	4ba1      	ldr	r3, [pc, #644]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546c:	f003 0303 	and.w	r3, r3, #3
 8005470:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005472:	4b9f      	ldr	r3, [pc, #636]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	0b1b      	lsrs	r3, r3, #12
 8005478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800547c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800547e:	4b9c      	ldr	r3, [pc, #624]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800548a:	4b99      	ldr	r3, [pc, #612]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	fb02 f303 	mul.w	r3, r2, r3
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8111 	beq.w	80056d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	f000 8083 	beq.w	80055bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	f200 80a1 	bhi.w	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d056      	beq.n	8005578 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80054ca:	e099      	b.n	8005600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054cc:	4b88      	ldr	r3, [pc, #544]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0320 	and.w	r3, r3, #32
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d02d      	beq.n	8005534 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054d8:	4b85      	ldr	r3, [pc, #532]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	08db      	lsrs	r3, r3, #3
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	4a84      	ldr	r2, [pc, #528]	; (80056f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80054e4:	fa22 f303 	lsr.w	r3, r2, r3
 80054e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	ee07 3a90 	vmov	s15, r3
 80054f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	ee07 3a90 	vmov	s15, r3
 80054fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005502:	4b7b      	ldr	r3, [pc, #492]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005512:	ed97 6a03 	vldr	s12, [r7, #12]
 8005516:	eddf 5a78 	vldr	s11, [pc, #480]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800551a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800552a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005532:	e087      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80056fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005546:	4b6a      	ldr	r3, [pc, #424]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554e:	ee07 3a90 	vmov	s15, r3
 8005552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005556:	ed97 6a03 	vldr	s12, [r7, #12]
 800555a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800555e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005576:	e065      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005582:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800558a:	4b59      	ldr	r3, [pc, #356]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800559a:	ed97 6a03 	vldr	s12, [r7, #12]
 800559e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055ba:	e043      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80055ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ce:	4b48      	ldr	r3, [pc, #288]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055de:	ed97 6a03 	vldr	s12, [r7, #12]
 80055e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80055e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055fe:	e021      	b.n	8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800560e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005612:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005622:	ed97 6a03 	vldr	s12, [r7, #12]
 8005626:	eddf 5a34 	vldr	s11, [pc, #208]	; 80056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800562a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800563a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005642:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005644:	4b2a      	ldr	r3, [pc, #168]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	0a5b      	lsrs	r3, r3, #9
 800564a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564e:	ee07 3a90 	vmov	s15, r3
 8005652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800565a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800565e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566a:	ee17 2a90 	vmov	r2, s15
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005672:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	0c1b      	lsrs	r3, r3, #16
 8005678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800568c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005698:	ee17 2a90 	vmov	r2, s15
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80056be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056c6:	ee17 2a90 	vmov	r2, s15
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80056ce:	e008      	b.n	80056e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	609a      	str	r2, [r3, #8]
}
 80056e2:	bf00      	nop
 80056e4:	3724      	adds	r7, #36	; 0x24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	58024400 	.word	0x58024400
 80056f4:	03d09000 	.word	0x03d09000
 80056f8:	46000000 	.word	0x46000000
 80056fc:	4c742400 	.word	0x4c742400
 8005700:	4a742400 	.word	0x4a742400
 8005704:	4bbebc20 	.word	0x4bbebc20

08005708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005708:	b480      	push	{r7}
 800570a:	b089      	sub	sp, #36	; 0x24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005710:	4ba1      	ldr	r3, [pc, #644]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800571a:	4b9f      	ldr	r3, [pc, #636]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	0d1b      	lsrs	r3, r3, #20
 8005720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005724:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005726:	4b9c      	ldr	r3, [pc, #624]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005732:	4b99      	ldr	r3, [pc, #612]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800574a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8111 	beq.w	8005978 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2b02      	cmp	r3, #2
 800575a:	f000 8083 	beq.w	8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b02      	cmp	r3, #2
 8005762:	f200 80a1 	bhi.w	80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d056      	beq.n	8005820 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005772:	e099      	b.n	80058a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005774:	4b88      	ldr	r3, [pc, #544]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0320 	and.w	r3, r3, #32
 800577c:	2b00      	cmp	r3, #0
 800577e:	d02d      	beq.n	80057dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005780:	4b85      	ldr	r3, [pc, #532]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	08db      	lsrs	r3, r3, #3
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	4a84      	ldr	r2, [pc, #528]	; (800599c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800578c:	fa22 f303 	lsr.w	r3, r2, r3
 8005790:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	ee07 3a90 	vmov	s15, r3
 8005798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	ee07 3a90 	vmov	s15, r3
 80057a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057aa:	4b7b      	ldr	r3, [pc, #492]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80057be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80057da:	e087      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	ee07 3a90 	vmov	s15, r3
 80057e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b6a      	ldr	r3, [pc, #424]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005802:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800581e:	e065      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b59      	ldr	r3, [pc, #356]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a03 	vldr	s12, [r7, #12]
 8005846:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005862:	e043      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b48      	ldr	r3, [pc, #288]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058a6:	e021      	b.n	80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b37      	ldr	r3, [pc, #220]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80058ec:	4b2a      	ldr	r3, [pc, #168]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f0:	0a5b      	lsrs	r3, r3, #9
 80058f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f6:	ee07 3a90 	vmov	s15, r3
 80058fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005906:	edd7 6a07 	vldr	s13, [r7, #28]
 800590a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800590e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005912:	ee17 2a90 	vmov	r2, s15
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800591a:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800592c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005934:	edd7 6a07 	vldr	s13, [r7, #28]
 8005938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800593c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005940:	ee17 2a90 	vmov	r2, s15
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005948:	4b13      	ldr	r3, [pc, #76]	; (8005998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	0e1b      	lsrs	r3, r3, #24
 800594e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005952:	ee07 3a90 	vmov	s15, r3
 8005956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800595e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005962:	edd7 6a07 	vldr	s13, [r7, #28]
 8005966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800596a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800596e:	ee17 2a90 	vmov	r2, s15
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005976:	e008      	b.n	800598a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
}
 800598a:	bf00      	nop
 800598c:	3724      	adds	r7, #36	; 0x24
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	58024400 	.word	0x58024400
 800599c:	03d09000 	.word	0x03d09000
 80059a0:	46000000 	.word	0x46000000
 80059a4:	4c742400 	.word	0x4c742400
 80059a8:	4a742400 	.word	0x4a742400
 80059ac:	4bbebc20 	.word	0x4bbebc20

080059b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b089      	sub	sp, #36	; 0x24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059b8:	4ba0      	ldr	r3, [pc, #640]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	f003 0303 	and.w	r3, r3, #3
 80059c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80059c2:	4b9e      	ldr	r3, [pc, #632]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	091b      	lsrs	r3, r3, #4
 80059c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80059ce:	4b9b      	ldr	r3, [pc, #620]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80059d8:	4b98      	ldr	r3, [pc, #608]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	fb02 f303 	mul.w	r3, r2, r3
 80059e8:	ee07 3a90 	vmov	s15, r3
 80059ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 8111 	beq.w	8005c1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	f000 8083 	beq.w	8005b0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	f200 80a1 	bhi.w	8005b4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d056      	beq.n	8005ac6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005a18:	e099      	b.n	8005b4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a1a:	4b88      	ldr	r3, [pc, #544]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d02d      	beq.n	8005a82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a26:	4b85      	ldr	r3, [pc, #532]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	08db      	lsrs	r3, r3, #3
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	4a83      	ldr	r2, [pc, #524]	; (8005c40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	ee07 3a90 	vmov	s15, r3
 8005a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	ee07 3a90 	vmov	s15, r3
 8005a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a50:	4b7a      	ldr	r3, [pc, #488]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a58:	ee07 3a90 	vmov	s15, r3
 8005a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a60:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a64:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005c44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a80:	e087      	b.n	8005b92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	ee07 3a90 	vmov	s15, r3
 8005a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a94:	4b69      	ldr	r3, [pc, #420]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aa8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005c44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005aac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ac4:	e065      	b.n	8005b92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	ee07 3a90 	vmov	s15, r3
 8005acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005c4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005ad4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ad8:	4b58      	ldr	r3, [pc, #352]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae0:	ee07 3a90 	vmov	s15, r3
 8005ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ae8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005c44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005af0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005af8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005afc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b08:	e043      	b.n	8005b92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005b18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1c:	4b47      	ldr	r3, [pc, #284]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b24:	ee07 3a90 	vmov	s15, r3
 8005b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b30:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005c44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4c:	e021      	b.n	8005b92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005c48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005b5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b60:	4b36      	ldr	r3, [pc, #216]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b68:	ee07 3a90 	vmov	s15, r3
 8005b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b70:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b74:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005c44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005b92:	4b2a      	ldr	r3, [pc, #168]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	0a5b      	lsrs	r3, r3, #9
 8005b98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b9c:	ee07 3a90 	vmov	s15, r3
 8005ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bb8:	ee17 2a90 	vmov	r2, s15
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005bc0:	4b1e      	ldr	r3, [pc, #120]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005be6:	ee17 2a90 	vmov	r2, s15
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf2:	0e1b      	lsrs	r3, r3, #24
 8005bf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf8:	ee07 3a90 	vmov	s15, r3
 8005bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c14:	ee17 2a90 	vmov	r2, s15
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005c1c:	e008      	b.n	8005c30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	609a      	str	r2, [r3, #8]
}
 8005c30:	bf00      	nop
 8005c32:	3724      	adds	r7, #36	; 0x24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	03d09000 	.word	0x03d09000
 8005c44:	46000000 	.word	0x46000000
 8005c48:	4c742400 	.word	0x4c742400
 8005c4c:	4a742400 	.word	0x4a742400
 8005c50:	4bbebc20 	.word	0x4bbebc20

08005c54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c62:	4b53      	ldr	r3, [pc, #332]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d101      	bne.n	8005c72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e099      	b.n	8005da6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c72:	4b4f      	ldr	r3, [pc, #316]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4e      	ldr	r2, [pc, #312]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7e:	f7fb fbbd 	bl	80013fc <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c84:	e008      	b.n	8005c98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c86:	f7fb fbb9 	bl	80013fc <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e086      	b.n	8005da6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c98:	4b45      	ldr	r3, [pc, #276]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ca4:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	493f      	ldr	r1, [pc, #252]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	628b      	str	r3, [r1, #40]	; 0x28
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	025b      	lsls	r3, r3, #9
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	041b      	lsls	r3, r3, #16
 8005cd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	061b      	lsls	r3, r3, #24
 8005ce4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ce8:	4931      	ldr	r1, [pc, #196]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005cee:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	492d      	ldr	r1, [pc, #180]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d00:	4b2b      	ldr	r3, [pc, #172]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	f023 0220 	bic.w	r2, r3, #32
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	4928      	ldr	r1, [pc, #160]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d12:	4b27      	ldr	r3, [pc, #156]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	4a26      	ldr	r2, [pc, #152]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d18:	f023 0310 	bic.w	r3, r3, #16
 8005d1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d1e:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d22:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <RCCEx_PLL2_Config+0x160>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	69d2      	ldr	r2, [r2, #28]
 8005d2a:	00d2      	lsls	r2, r2, #3
 8005d2c:	4920      	ldr	r1, [pc, #128]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d32:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d36:	4a1e      	ldr	r2, [pc, #120]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d38:	f043 0310 	orr.w	r3, r3, #16
 8005d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d44:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d50:	e00f      	b.n	8005d72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d106      	bne.n	8005d66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d58:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	4a14      	ldr	r2, [pc, #80]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d64:	e005      	b.n	8005d72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d66:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a0e      	ldr	r2, [pc, #56]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7e:	f7fb fb3d 	bl	80013fc <HAL_GetTick>
 8005d82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d84:	e008      	b.n	8005d98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d86:	f7fb fb39 	bl	80013fc <HAL_GetTick>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	d901      	bls.n	8005d98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e006      	b.n	8005da6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <RCCEx_PLL2_Config+0x15c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d0f0      	beq.n	8005d86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	58024400 	.word	0x58024400
 8005db4:	ffff0007 	.word	0xffff0007

08005db8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dc6:	4b53      	ldr	r3, [pc, #332]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d101      	bne.n	8005dd6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e099      	b.n	8005f0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005dd6:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4e      	ldr	r2, [pc, #312]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de2:	f7fb fb0b 	bl	80013fc <HAL_GetTick>
 8005de6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005de8:	e008      	b.n	8005dfc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005dea:	f7fb fb07 	bl	80013fc <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e086      	b.n	8005f0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005dfc:	4b45      	ldr	r3, [pc, #276]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e08:	4b42      	ldr	r3, [pc, #264]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	051b      	lsls	r3, r3, #20
 8005e16:	493f      	ldr	r1, [pc, #252]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	628b      	str	r3, [r1, #40]	; 0x28
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	025b      	lsls	r3, r3, #9
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	061b      	lsls	r3, r3, #24
 8005e48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e4c:	4931      	ldr	r1, [pc, #196]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e52:	4b30      	ldr	r3, [pc, #192]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	492d      	ldr	r1, [pc, #180]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e64:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	4928      	ldr	r1, [pc, #160]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e72:	4313      	orrs	r3, r2
 8005e74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7a:	4a26      	ldr	r2, [pc, #152]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005e82:	4b24      	ldr	r3, [pc, #144]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e86:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <RCCEx_PLL3_Config+0x160>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	69d2      	ldr	r2, [r2, #28]
 8005e8e:	00d2      	lsls	r2, r2, #3
 8005e90:	4920      	ldr	r1, [pc, #128]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005e96:	4b1f      	ldr	r3, [pc, #124]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9a:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a19      	ldr	r2, [pc, #100]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005eae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005eb4:	e00f      	b.n	8005ed6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d106      	bne.n	8005eca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ec2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ec8:	e005      	b.n	8005ed6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005eca:	4b12      	ldr	r3, [pc, #72]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	4a11      	ldr	r2, [pc, #68]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005ed6:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a0e      	ldr	r2, [pc, #56]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee2:	f7fb fa8b 	bl	80013fc <HAL_GetTick>
 8005ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ee8:	e008      	b.n	8005efc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005eea:	f7fb fa87 	bl	80013fc <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d901      	bls.n	8005efc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e006      	b.n	8005f0a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005efc:	4b05      	ldr	r3, [pc, #20]	; (8005f14 <RCCEx_PLL3_Config+0x15c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0f0      	beq.n	8005eea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	58024400 	.word	0x58024400
 8005f18:	ffff0007 	.word	0xffff0007

08005f1c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e075      	b.n	800601a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d105      	bne.n	8005f46 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7fb f839 	bl	8000fb8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f868 	bl	8006024 <HAL_SD_InitCard>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e05d      	b.n	800601a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005f5e:	f107 0308 	add.w	r3, r7, #8
 8005f62:	4619      	mov	r1, r3
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fdaf 	bl	8006ac8 <HAL_SD_GetCardStatus>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e052      	b.n	800601a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005f74:	7e3b      	ldrb	r3, [r7, #24]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005f7a:	7e7b      	ldrb	r3, [r7, #25]
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d10a      	bne.n	8005f9e <HAL_SD_Init+0x82>
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <HAL_SD_Init+0x78>
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f9a:	659a      	str	r2, [r3, #88]	; 0x58
 8005f9c:	e00b      	b.n	8005fb6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d104      	bne.n	8005fb0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fac:	659a      	str	r2, [r3, #88]	; 0x58
 8005fae:	e002      	b.n	8005fb6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fe6d 	bl	8006c9c <HAL_SD_ConfigWideBusOperation>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d001      	beq.n	8005fcc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	e026      	b.n	800601a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005fcc:	f7fb fa16 	bl	80013fc <HAL_GetTick>
 8005fd0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005fd2:	e011      	b.n	8005ff8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005fd4:	f7fb fa12 	bl	80013fc <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe2:	d109      	bne.n	8005ff8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e010      	b.n	800601a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 ff61 	bl	8006ec0 <HAL_SD_GetCardState>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b04      	cmp	r3, #4
 8006002:	d1e7      	bne.n	8005fd4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3728      	adds	r7, #40	; 0x28
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006024:	b590      	push	{r4, r7, lr}
 8006026:	b08d      	sub	sp, #52	; 0x34
 8006028:	af02      	add	r7, sp, #8
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006038:	2300      	movs	r3, #0
 800603a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800603c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006040:	f04f 0100 	mov.w	r1, #0
 8006044:	f7fe fc76 	bl	8004934 <HAL_RCCEx_GetPeriphCLKFreq>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	2b00      	cmp	r3, #0
 800604e:	d109      	bne.n	8006064 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800605e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e070      	b.n	8006146 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	0a1b      	lsrs	r3, r3, #8
 8006068:	4a39      	ldr	r2, [pc, #228]	; (8006150 <HAL_SD_InitCard+0x12c>)
 800606a:	fba2 2303 	umull	r2, r3, r2, r3
 800606e:	091b      	lsrs	r3, r3, #4
 8006070:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681c      	ldr	r4, [r3, #0]
 8006076:	466a      	mov	r2, sp
 8006078:	f107 0318 	add.w	r3, r7, #24
 800607c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006080:	e882 0003 	stmia.w	r2, {r0, r1}
 8006084:	f107 030c 	add.w	r3, r7, #12
 8006088:	cb0e      	ldmia	r3, {r1, r2, r3}
 800608a:	4620      	mov	r0, r4
 800608c:	f001 fe84 	bl	8007d98 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f001 fec7 	bl	8007e28 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d005      	beq.n	80060ac <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80060b2:	4a28      	ldr	r2, [pc, #160]	; (8006154 <HAL_SD_InitCard+0x130>)
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	3301      	adds	r3, #1
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fb f9a9 	bl	8001414 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 ffea 	bl	800709c <SD_PowerON>
 80060c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00b      	beq.n	80060e8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e02e      	b.n	8006146 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 ff09 	bl	8006f00 <SD_InitCard>
 80060ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006102:	6a3b      	ldr	r3, [r7, #32]
 8006104:	431a      	orrs	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e01b      	b.n	8006146 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006116:	4618      	mov	r0, r3
 8006118:	f001 ff1c 	bl	8007f54 <SDMMC_CmdBlockLength>
 800611c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00f      	beq.n	8006144 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a0b      	ldr	r2, [pc, #44]	; (8006158 <HAL_SD_InitCard+0x134>)
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	6a3b      	ldr	r3, [r7, #32]
 8006132:	431a      	orrs	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	372c      	adds	r7, #44	; 0x2c
 800614a:	46bd      	mov	sp, r7
 800614c:	bd90      	pop	{r4, r7, pc}
 800614e:	bf00      	nop
 8006150:	014f8b59 	.word	0x014f8b59
 8006154:	00012110 	.word	0x00012110
 8006158:	1fe00fff 	.word	0x1fe00fff

0800615c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b08c      	sub	sp, #48	; 0x30
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d107      	bne.n	8006184 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	e08d      	b.n	80062a0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	f040 8086 	bne.w	800629e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	441a      	add	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d907      	bls.n	80061b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e074      	b.n	80062a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2203      	movs	r2, #3
 80061ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2200      	movs	r2, #0
 80061c4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	025a      	lsls	r2, r3, #9
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d002      	beq.n	80061e2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	025b      	lsls	r3, r3, #9
 80061e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80061e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061e6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	025b      	lsls	r3, r3, #9
 80061ec:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80061ee:	2390      	movs	r3, #144	; 0x90
 80061f0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80061f2:	2302      	movs	r3, #2
 80061f4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80061f6:	2300      	movs	r3, #0
 80061f8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f107 0210 	add.w	r2, r7, #16
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f001 fe77 	bl	8007efc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800621c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2201      	movs	r2, #1
 800622c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d90a      	bls.n	800624a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2282      	movs	r2, #130	; 0x82
 8006238:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006240:	4618      	mov	r0, r3
 8006242:	f001 fecd 	bl	8007fe0 <SDMMC_CmdReadMultiBlock>
 8006246:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006248:	e009      	b.n	800625e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2281      	movs	r2, #129	; 0x81
 800624e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fe9f 	bl	8007f9a <SDMMC_CmdReadSingleBlock>
 800625c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800625e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006260:	2b00      	cmp	r3, #0
 8006262:	d012      	beq.n	800628a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a0f      	ldr	r2, [pc, #60]	; (80062a8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006272:	431a      	orrs	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e00a      	b.n	80062a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006298:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e000      	b.n	80062a0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800629e:	2302      	movs	r3, #2
  }
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3730      	adds	r7, #48	; 0x30
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	1fe00fff 	.word	0x1fe00fff

080062ac <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08c      	sub	sp, #48	; 0x30
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
 80062b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d107      	bne.n	80062d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e08d      	b.n	80063f0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	2b01      	cmp	r3, #1
 80062de:	f040 8086 	bne.w	80063ee <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80062e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	441a      	add	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d907      	bls.n	8006306 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e074      	b.n	80063f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2203      	movs	r2, #3
 800630a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2200      	movs	r2, #0
 8006314:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	68ba      	ldr	r2, [r7, #8]
 800631a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	025a      	lsls	r2, r3, #9
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	2b01      	cmp	r3, #1
 800632a:	d002      	beq.n	8006332 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800632c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632e:	025b      	lsls	r3, r3, #9
 8006330:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006336:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	025b      	lsls	r3, r3, #9
 800633c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800633e:	2390      	movs	r3, #144	; 0x90
 8006340:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006342:	2300      	movs	r3, #0
 8006344:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006346:	2300      	movs	r3, #0
 8006348:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f107 0210 	add.w	r2, r7, #16
 8006356:	4611      	mov	r1, r2
 8006358:	4618      	mov	r0, r3
 800635a:	f001 fdcf 	bl	8007efc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800636c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2201      	movs	r2, #1
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d90a      	bls.n	800639a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	22a0      	movs	r2, #160	; 0xa0
 8006388:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006390:	4618      	mov	r0, r3
 8006392:	f001 fe6b 	bl	800806c <SDMMC_CmdWriteMultiBlock>
 8006396:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006398:	e009      	b.n	80063ae <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2290      	movs	r2, #144	; 0x90
 800639e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 fe3d 	bl	8008026 <SDMMC_CmdWriteSingleBlock>
 80063ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d012      	beq.n	80063da <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a0f      	ldr	r2, [pc, #60]	; (80063f8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c2:	431a      	orrs	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e00a      	b.n	80063f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80063e8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e000      	b.n	80063f0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80063ee:	2302      	movs	r3, #2
  }
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3730      	adds	r7, #48	; 0x30
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	1fe00fff 	.word	0x1fe00fff

080063fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <HAL_SD_IRQHandler+0x2e>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 f926 	bl	8007674 <SD_Read_IT>
 8006428:	e19a      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 80ac 	beq.w	8006592 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006442:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	4b59      	ldr	r3, [pc, #356]	; (80065b4 <HAL_SD_IRQHandler+0x1b8>)
 8006450:	400b      	ands	r3, r1
 8006452:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006462:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006472:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d038      	beq.n	80064f0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <HAL_SD_IRQHandler+0x96>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d011      	beq.n	80064b6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fe0c 	bl	80080b4 <SDMMC_CmdStopTransfer>
 800649c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d008      	beq.n	80064b6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f95b 	bl	800676c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <HAL_SD_IRQHandler+0x1bc>)
 80064bc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d104      	bne.n	80064e0 <HAL_SD_IRQHandler+0xe4>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f002 fab5 	bl	8008a50 <HAL_SD_RxCpltCallback>
 80064e6:	e13b      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f002 faa7 	bl	8008a3c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80064ee:	e137      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 8132 	beq.w	8006760 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2200      	movs	r2, #0
 8006502:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2200      	movs	r2, #0
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2200      	movs	r2, #0
 8006512:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <HAL_SD_IRQHandler+0x12c>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f003 0320 	and.w	r3, r3, #32
 8006524:	2b00      	cmp	r3, #0
 8006526:	d011      	beq.n	800654c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f001 fdc1 	bl	80080b4 <SDMMC_CmdStopTransfer>
 8006532:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d008      	beq.n	800654c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f910 	bl	800676c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <HAL_SD_IRQHandler+0x172>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 0320 	and.w	r3, r3, #32
 800656a:	2b00      	cmp	r3, #0
 800656c:	d002      	beq.n	8006574 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f002 fa64 	bl	8008a3c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d105      	bne.n	800658a <HAL_SD_IRQHandler+0x18e>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80eb 	beq.w	8006760 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 fa60 	bl	8008a50 <HAL_SD_RxCpltCallback>
}
 8006590:	e0e6      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00d      	beq.n	80065bc <HAL_SD_IRQHandler+0x1c0>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 0308 	and.w	r3, r3, #8
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f001 f8a8 	bl	8007700 <SD_Write_IT>
 80065b0:	e0d6      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
 80065b2:	bf00      	nop
 80065b4:	ffff3ec5 	.word	0xffff3ec5
 80065b8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f000 809d 	beq.w	8006706 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d005      	beq.n	80065e6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065de:	f043 0202 	orr.w	r2, r3, #2
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d005      	beq.n	8006600 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065f8:	f043 0208 	orr.w	r2, r3, #8
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006606:	f003 0320 	and.w	r3, r3, #32
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006612:	f043 0220 	orr.w	r2, r3, #32
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006620:	f003 0310 	and.w	r3, r3, #16
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	f043 0210 	orr.w	r2, r3, #16
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a4b      	ldr	r2, [pc, #300]	; (8006768 <HAL_SD_IRQHandler+0x36c>)
 800663a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800664a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800667a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4618      	mov	r0, r3
 8006682:	f001 fd17 	bl	80080b4 <SDMMC_CmdStopTransfer>
 8006686:	4602      	mov	r2, r0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066a0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f851 	bl	800676c <HAL_SD_ErrorCallback>
}
 80066ca:	e049      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d044      	beq.n	8006760 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d040      	beq.n	8006760 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2200      	movs	r2, #0
 80066f4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f834 	bl	800676c <HAL_SD_ErrorCallback>
}
 8006704:	e02c      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d025      	beq.n	8006760 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10c      	bne.n	8006746 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f003 0320 	and.w	r3, r3, #32
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f001 f84a 	bl	80077d0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800673c:	e010      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f001 f832 	bl	80077a8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006744:	e00c      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f001 f833 	bl	80077bc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006756:	e003      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 f81b 	bl	8007794 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800675e:	e7ff      	b.n	8006760 <HAL_SD_IRQHandler+0x364>
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	18000f3a 	.word	0x18000f3a

0800676c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	0f9b      	lsrs	r3, r3, #30
 8006790:	b2da      	uxtb	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679a:	0e9b      	lsrs	r3, r3, #26
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	0e1b      	lsrs	r3, r3, #24
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067be:	0c1b      	lsrs	r3, r3, #16
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ca:	0a1b      	lsrs	r3, r3, #8
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e0:	0d1b      	lsrs	r3, r3, #20
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fe:	0bdb      	lsrs	r3, r3, #15
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	b2da      	uxtb	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006810:	0b9b      	lsrs	r3, r3, #14
 8006812:	b2db      	uxtb	r3, r3
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	b2da      	uxtb	r2, r3
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006822:	0b5b      	lsrs	r3, r3, #13
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	b2da      	uxtb	r2, r3
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006834:	0b1b      	lsrs	r3, r3, #12
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	b2da      	uxtb	r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2200      	movs	r2, #0
 8006846:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d163      	bne.n	8006918 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006854:	009a      	lsls	r2, r3, #2
 8006856:	f640 73fc 	movw	r3, #4092	; 0xffc
 800685a:	4013      	ands	r3, r2
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006860:	0f92      	lsrs	r2, r2, #30
 8006862:	431a      	orrs	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800686c:	0edb      	lsrs	r3, r3, #27
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	b2da      	uxtb	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687e:	0e1b      	lsrs	r3, r3, #24
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0307 	and.w	r3, r3, #7
 8006886:	b2da      	uxtb	r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006890:	0d5b      	lsrs	r3, r3, #21
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	b2da      	uxtb	r2, r3
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a2:	0c9b      	lsrs	r3, r3, #18
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068b4:	0bdb      	lsrs	r3, r3, #15
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f003 0307 	and.w	r3, r3, #7
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	7e1b      	ldrb	r3, [r3, #24]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	3302      	adds	r3, #2
 80068d8:	2201      	movs	r2, #1
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80068e2:	fb03 f202 	mul.w	r2, r3, r2
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	7a1b      	ldrb	r3, [r3, #8]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	2201      	movs	r2, #1
 80068f6:	409a      	lsls	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006904:	0a52      	lsrs	r2, r2, #9
 8006906:	fb03 f202 	mul.w	r2, r3, r2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006914:	655a      	str	r2, [r3, #84]	; 0x54
 8006916:	e031      	b.n	800697c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	2b01      	cmp	r3, #1
 800691e:	d11d      	bne.n	800695c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006924:	041b      	lsls	r3, r3, #16
 8006926:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800692e:	0c1b      	lsrs	r3, r3, #16
 8006930:	431a      	orrs	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	3301      	adds	r3, #1
 800693c:	029a      	lsls	r2, r3, #10
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006950:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	655a      	str	r2, [r3, #84]	; 0x54
 800695a:	e00f      	b.n	800697c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a58      	ldr	r2, [pc, #352]	; (8006ac4 <HAL_SD_GetCardCSD+0x344>)
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006968:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e09d      	b.n	8006ab8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006980:	0b9b      	lsrs	r3, r3, #14
 8006982:	b2db      	uxtb	r3, r3
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	b2da      	uxtb	r2, r3
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006992:	09db      	lsrs	r3, r3, #7
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699a:	b2da      	uxtb	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b4:	0fdb      	lsrs	r3, r3, #31
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069c0:	0f5b      	lsrs	r3, r3, #29
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f003 0303 	and.w	r3, r3, #3
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069d2:	0e9b      	lsrs	r3, r3, #26
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e4:	0d9b      	lsrs	r3, r3, #22
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	f003 030f 	and.w	r3, r3, #15
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f6:	0d5b      	lsrs	r3, r3, #21
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a12:	0c1b      	lsrs	r3, r3, #16
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	b2da      	uxtb	r2, r3
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a26:	0bdb      	lsrs	r3, r3, #15
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a3a:	0b9b      	lsrs	r3, r3, #14
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f003 0301 	and.w	r3, r3, #1
 8006a42:	b2da      	uxtb	r2, r3
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a4e:	0b5b      	lsrs	r3, r3, #13
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a62:	0b1b      	lsrs	r3, r3, #12
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a76:	0a9b      	lsrs	r3, r3, #10
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a8a:	0a1b      	lsrs	r3, r3, #8
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 0303 	and.w	r3, r3, #3
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	1fe00fff 	.word	0x1fe00fff

08006ac8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b094      	sub	sp, #80	; 0x50
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d101      	bne.n	8006ae8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0a7      	b.n	8006c38 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006ae8:	f107 0308 	add.w	r3, r7, #8
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fb62 	bl	80071b8 <SD_SendSDStatus>
 8006af4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d011      	beq.n	8006b20 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a4f      	ldr	r2, [pc, #316]	; (8006c40 <HAL_SD_GetCardStatus+0x178>)
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006b1e:	e070      	b.n	8006c02 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	0a1b      	lsrs	r3, r3, #8
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	0e1b      	lsrs	r3, r3, #24
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4313      	orrs	r3, r2
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	061a      	lsls	r2, r3, #24
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006b66:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	0a1b      	lsrs	r3, r3, #8
 8006b6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b70:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	0e1b      	lsrs	r3, r3, #24
 8006b76:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	0d1b      	lsrs	r3, r3, #20
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f003 030f 	and.w	r3, r3, #15
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	0a9b      	lsrs	r3, r3, #10
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bc4:	b2da      	uxtb	r2, r3
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	0a1b      	lsrs	r3, r3, #8
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 0303 	and.w	r3, r3, #3
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	f003 030f 	and.w	r3, r3, #15
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	0e1b      	lsrs	r3, r3, #24
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 f9a2 	bl	8007f54 <SDMMC_CmdBlockLength>
 8006c10:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00d      	beq.n	8006c34 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <HAL_SD_GetCardStatus+0x178>)
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c24:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006c34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3750      	adds	r7, #80	; 0x50
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	1fe00fff 	.word	0x1fe00fff

08006c44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b08d      	sub	sp, #52	; 0x34
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2203      	movs	r2, #3
 8006cb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	2b03      	cmp	r3, #3
 8006cba:	d02e      	beq.n	8006d1a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc2:	d106      	bne.n	8006cd2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	635a      	str	r2, [r3, #52]	; 0x34
 8006cd0:	e029      	b.n	8006d26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cd8:	d10a      	bne.n	8006cf0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fb64 	bl	80073a8 <SD_WideBus_Enable>
 8006ce0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	635a      	str	r2, [r3, #52]	; 0x34
 8006cee:	e01a      	b.n	8006d26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fba1 	bl	800743e <SD_WideBus_Disable>
 8006cfc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	635a      	str	r2, [r3, #52]	; 0x34
 8006d0a:	e00c      	b.n	8006d26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	635a      	str	r2, [r3, #52]	; 0x34
 8006d18:	e005      	b.n	8006d26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d007      	beq.n	8006d3e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a5f      	ldr	r2, [pc, #380]	; (8006eb0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d34:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006d3c:	e096      	b.n	8006e6c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006d3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006d42:	f04f 0100 	mov.w	r1, #0
 8006d46:	f7fd fdf5 	bl	8004934 <HAL_RCCEx_GetPeriphCLKFreq>
 8006d4a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8083 	beq.w	8006e5a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	695a      	ldr	r2, [r3, #20]
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	4950      	ldr	r1, [pc, #320]	; (8006eb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d72:	fba1 1303 	umull	r1, r3, r1, r3
 8006d76:	0e1b      	lsrs	r3, r3, #24
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d303      	bcc.n	8006d84 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	61bb      	str	r3, [r7, #24]
 8006d82:	e05a      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d8c:	d103      	bne.n	8006d96 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	61bb      	str	r3, [r7, #24]
 8006d94:	e051      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9e:	d126      	bne.n	8006dee <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10e      	bne.n	8006dc6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4a43      	ldr	r2, [pc, #268]	; (8006eb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d906      	bls.n	8006dbe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	4a40      	ldr	r2, [pc, #256]	; (8006eb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006db4:	fba2 2303 	umull	r2, r3, r2, r3
 8006db8:	0e5b      	lsrs	r3, r3, #25
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e03d      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	61bb      	str	r3, [r7, #24]
 8006dc4:	e039      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	4a39      	ldr	r2, [pc, #228]	; (8006eb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d906      	bls.n	8006de6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4a36      	ldr	r2, [pc, #216]	; (8006eb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	0e5b      	lsrs	r3, r3, #25
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	e029      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	e025      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10e      	bne.n	8006e14 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	4a30      	ldr	r2, [pc, #192]	; (8006ebc <HAL_SD_ConfigWideBusOperation+0x220>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d906      	bls.n	8006e0c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	4a2c      	ldr	r2, [pc, #176]	; (8006eb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006e02:	fba2 2303 	umull	r2, r3, r2, r3
 8006e06:	0e1b      	lsrs	r3, r3, #24
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	e016      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	695b      	ldr	r3, [r3, #20]
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	e012      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	4a26      	ldr	r2, [pc, #152]	; (8006ebc <HAL_SD_ConfigWideBusOperation+0x220>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d906      	bls.n	8006e34 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4a22      	ldr	r2, [pc, #136]	; (8006eb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	0e1b      	lsrs	r3, r3, #24
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	e002      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681c      	ldr	r4, [r3, #0]
 8006e3e:	466a      	mov	r2, sp
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006e48:	e882 0003 	stmia.w	r2, {r0, r1}
 8006e4c:	f107 0308 	add.w	r3, r7, #8
 8006e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e52:	4620      	mov	r0, r4
 8006e54:	f000 ffa0 	bl	8007d98 <SDMMC_Init>
 8006e58:	e008      	b.n	8006e6c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f86d 	bl	8007f54 <SDMMC_CmdBlockLength>
 8006e7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e7c:	6a3b      	ldr	r3, [r7, #32]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a0a      	ldr	r2, [pc, #40]	; (8006eb0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006e88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	372c      	adds	r7, #44	; 0x2c
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd90      	pop	{r4, r7, pc}
 8006eb0:	1fe00fff 	.word	0x1fe00fff
 8006eb4:	55e63b89 	.word	0x55e63b89
 8006eb8:	02faf080 	.word	0x02faf080
 8006ebc:	017d7840 	.word	0x017d7840

08006ec0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa40 	bl	8007358 <SD_SendStatus>
 8006ed8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d005      	beq.n	8006eec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	0a5b      	lsrs	r3, r3, #9
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006ef6:	693b      	ldr	r3, [r7, #16]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b090      	sub	sp, #64	; 0x40
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006f0c:	f7fa fa76 	bl	80013fc <HAL_GetTick>
 8006f10:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 ff97 	bl	8007e4a <SDMMC_GetPowerState>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d102      	bne.n	8006f28 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f26:	e0b5      	b.n	8007094 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d02e      	beq.n	8006f8e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f9e2 	bl	80082fe <SDMMC_CmdSendCID>
 8006f3a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <SD_InitCard+0x46>
    {
      return errorstate;
 8006f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f44:	e0a6      	b.n	8007094 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 ffc2 	bl	8007ed6 <SDMMC_GetResponse>
 8006f52:	4602      	mov	r2, r0
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2104      	movs	r1, #4
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 ffb9 	bl	8007ed6 <SDMMC_GetResponse>
 8006f64:	4602      	mov	r2, r0
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2108      	movs	r1, #8
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 ffb0 	bl	8007ed6 <SDMMC_GetResponse>
 8006f76:	4602      	mov	r2, r0
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	210c      	movs	r1, #12
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 ffa7 	bl	8007ed6 <SDMMC_GetResponse>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d01d      	beq.n	8006fd2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006f96:	e019      	b.n	8006fcc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f107 020a 	add.w	r2, r7, #10
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 f9ea 	bl	800837c <SDMMC_CmdSetRelAdd>
 8006fa8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb2:	e06f      	b.n	8007094 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006fb4:	f7fa fa22 	bl	80013fc <HAL_GetTick>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	f241 3287 	movw	r2, #4999	; 0x1387
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d902      	bls.n	8006fcc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006fc6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fca:	e063      	b.n	8007094 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006fcc:	897b      	ldrh	r3, [r7, #10]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d0e2      	beq.n	8006f98 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	2b03      	cmp	r3, #3
 8006fd8:	d036      	beq.n	8007048 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006fda:	897b      	ldrh	r3, [r7, #10]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	f001 f9a4 	bl	800833c <SDMMC_CmdSendCSD>
 8006ff4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <SD_InitCard+0x100>
    {
      return errorstate;
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	e049      	b.n	8007094 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f000 ff65 	bl	8007ed6 <SDMMC_GetResponse>
 800700c:	4602      	mov	r2, r0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2104      	movs	r1, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f000 ff5c 	bl	8007ed6 <SDMMC_GetResponse>
 800701e:	4602      	mov	r2, r0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2108      	movs	r1, #8
 800702a:	4618      	mov	r0, r3
 800702c:	f000 ff53 	bl	8007ed6 <SDMMC_GetResponse>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	210c      	movs	r1, #12
 800703c:	4618      	mov	r0, r3
 800703e:	f000 ff4a 	bl	8007ed6 <SDMMC_GetResponse>
 8007042:	4602      	mov	r2, r0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2104      	movs	r1, #4
 800704e:	4618      	mov	r0, r3
 8007050:	f000 ff41 	bl	8007ed6 <SDMMC_GetResponse>
 8007054:	4603      	mov	r3, r0
 8007056:	0d1a      	lsrs	r2, r3, #20
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800705c:	f107 030c 	add.w	r3, r7, #12
 8007060:	4619      	mov	r1, r3
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7ff fb8c 	bl	8006780 <HAL_SD_GetCardCSD>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800706e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007072:	e00f      	b.n	8007094 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707c:	041b      	lsls	r3, r3, #16
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f001 f853 	bl	800812c <SDMMC_CmdSelDesel>
 8007086:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <SD_InitCard+0x192>
  {
    return errorstate;
 800708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007090:	e000      	b.n	8007094 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3740      	adds	r7, #64	; 0x40
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 f85c 	bl	8008172 <SDMMC_CmdGoIdleState>
 80070ba:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	e072      	b.n	80071ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f86f 	bl	80081ae <SDMMC_CmdOperCond>
 80070d0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d8:	d10d      	bne.n	80070f6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 f844 	bl	8008172 <SDMMC_CmdGoIdleState>
 80070ea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <SD_PowerON+0x60>
    {
      return errorstate;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	e05a      	b.n	80071ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007100:	2b01      	cmp	r3, #1
 8007102:	d137      	bne.n	8007174 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f001 f86f 	bl	80081ee <SDMMC_CmdAppCommand>
 8007110:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d02d      	beq.n	8007174 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007118:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800711c:	e046      	b.n	80071ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f001 f862 	bl	80081ee <SDMMC_CmdAppCommand>
 800712a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	e03a      	b.n	80071ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	491e      	ldr	r1, [pc, #120]	; (80071b4 <SD_PowerON+0x118>)
 800713c:	4618      	mov	r0, r3
 800713e:	f001 f879 	bl	8008234 <SDMMC_CmdAppOperCommand>
 8007142:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800714a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800714e:	e02d      	b.n	80071ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f000 febd 	bl	8007ed6 <SDMMC_GetResponse>
 800715c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	0fdb      	lsrs	r3, r3, #31
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <SD_PowerON+0xce>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <SD_PowerON+0xd0>
 800716a:	2300      	movs	r3, #0
 800716c:	613b      	str	r3, [r7, #16]

    count++;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	3301      	adds	r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800717a:	4293      	cmp	r3, r2
 800717c:	d802      	bhi.n	8007184 <SD_PowerON+0xe8>
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0cc      	beq.n	800711e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800718a:	4293      	cmp	r3, r2
 800718c:	d902      	bls.n	8007194 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800718e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007192:	e00b      	b.n	80071ac <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	c1100000 	.word	0xc1100000

080071b8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08c      	sub	sp, #48	; 0x30
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80071c2:	f7fa f91b 	bl	80013fc <HAL_GetTick>
 80071c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 fe7f 	bl	8007ed6 <SDMMC_GetResponse>
 80071d8:	4603      	mov	r3, r0
 80071da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071e2:	d102      	bne.n	80071ea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80071e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80071e8:	e0b0      	b.n	800734c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2140      	movs	r1, #64	; 0x40
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 feaf 	bl	8007f54 <SDMMC_CmdBlockLength>
 80071f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d005      	beq.n	800720a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	e0a0      	b.n	800734c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f000 ffe9 	bl	80081ee <SDMMC_CmdAppCommand>
 800721c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d005      	beq.n	8007230 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	e08d      	b.n	800734c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007230:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007234:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800723a:	2360      	movs	r3, #96	; 0x60
 800723c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800723e:	2302      	movs	r3, #2
 8007240:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007242:	2300      	movs	r3, #0
 8007244:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007246:	2301      	movs	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f107 0208 	add.w	r2, r7, #8
 8007252:	4611      	mov	r1, r2
 8007254:	4618      	mov	r0, r3
 8007256:	f000 fe51 	bl	8007efc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4618      	mov	r0, r3
 8007260:	f001 f8d1 	bl	8008406 <SDMMC_CmdStatusRegister>
 8007264:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d02b      	beq.n	80072c4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	e069      	b.n	800734c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d013      	beq.n	80072ae <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007286:	2300      	movs	r3, #0
 8007288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800728a:	e00d      	b.n	80072a8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f000 fdab 	bl	8007dec <SDMMC_ReadFIFO>
 8007296:	4602      	mov	r2, r0
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	601a      	str	r2, [r3, #0]
        pData++;
 800729c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729e:	3304      	adds	r3, #4
 80072a0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	3301      	adds	r3, #1
 80072a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072aa:	2b07      	cmp	r3, #7
 80072ac:	d9ee      	bls.n	800728c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80072ae:	f7fa f8a5 	bl	80013fc <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072bc:	d102      	bne.n	80072c4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80072be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072c2:	e043      	b.n	800734c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0d2      	beq.n	8007278 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80072e0:	2308      	movs	r3, #8
 80072e2:	e033      	b.n	800734c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80072f2:	2302      	movs	r3, #2
 80072f4:	e02a      	b.n	800734c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007304:	2320      	movs	r3, #32
 8007306:	e021      	b.n	800734c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 fd6d 	bl	8007dec <SDMMC_ReadFIFO>
 8007312:	4602      	mov	r2, r0
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	601a      	str	r2, [r3, #0]
    pData++;
 8007318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731a:	3304      	adds	r3, #4
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800731e:	f7fa f86d 	bl	80013fc <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800732c:	d102      	bne.n	8007334 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800732e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007332:	e00b      	b.n	800734c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e2      	bne.n	8007308 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a03      	ldr	r2, [pc, #12]	; (8007354 <SD_SendSDStatus+0x19c>)
 8007348:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	3730      	adds	r7, #48	; 0x30
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}
 8007354:	18000f3a 	.word	0x18000f3a

08007358 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007368:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800736c:	e018      	b.n	80073a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	4619      	mov	r1, r3
 800737a:	4610      	mov	r0, r2
 800737c:	f001 f820 	bl	80083c0 <SDMMC_CmdSendStatus>
 8007380:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	e009      	b.n	80073a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2100      	movs	r1, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fd9f 	bl	8007ed6 <SDMMC_GetResponse>
 8007398:	4602      	mov	r2, r0
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2100      	movs	r1, #0
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fd89 	bl	8007ed6 <SDMMC_GetResponse>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073ce:	d102      	bne.n	80073d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073d4:	e02f      	b.n	8007436 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073d6:	f107 030c 	add.w	r3, r7, #12
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f879 	bl	80074d4 <SD_FindSCR>
 80073e2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	e023      	b.n	8007436 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01c      	beq.n	8007432 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007400:	041b      	lsls	r3, r3, #16
 8007402:	4619      	mov	r1, r3
 8007404:	4610      	mov	r0, r2
 8007406:	f000 fef2 	bl	80081ee <SDMMC_CmdAppCommand>
 800740a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d001      	beq.n	8007416 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	e00f      	b.n	8007436 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2102      	movs	r1, #2
 800741c:	4618      	mov	r0, r3
 800741e:	f000 ff29 	bl	8008274 <SDMMC_CmdBusWidth>
 8007422:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d001      	beq.n	800742e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	e003      	b.n	8007436 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800742e:	2300      	movs	r3, #0
 8007430:	e001      	b.n	8007436 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007432:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b086      	sub	sp, #24
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007446:	2300      	movs	r3, #0
 8007448:	60fb      	str	r3, [r7, #12]
 800744a:	2300      	movs	r3, #0
 800744c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	2100      	movs	r1, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f000 fd3e 	bl	8007ed6 <SDMMC_GetResponse>
 800745a:	4603      	mov	r3, r0
 800745c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007464:	d102      	bne.n	800746c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800746a:	e02f      	b.n	80074cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800746c:	f107 030c 	add.w	r3, r7, #12
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f82e 	bl	80074d4 <SD_FindSCR>
 8007478:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	e023      	b.n	80074cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d01c      	beq.n	80074c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007496:	041b      	lsls	r3, r3, #16
 8007498:	4619      	mov	r1, r3
 800749a:	4610      	mov	r0, r2
 800749c:	f000 fea7 	bl	80081ee <SDMMC_CmdAppCommand>
 80074a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	e00f      	b.n	80074cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2100      	movs	r1, #0
 80074b2:	4618      	mov	r0, r3
 80074b4:	f000 fede 	bl	8008274 <SDMMC_CmdBusWidth>
 80074b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d001      	beq.n	80074c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	e003      	b.n	80074cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e001      	b.n	80074cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80074c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3718      	adds	r7, #24
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08e      	sub	sp, #56	; 0x38
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80074de:	f7f9 ff8d 	bl	80013fc <HAL_GetTick>
 80074e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80074e8:	2300      	movs	r3, #0
 80074ea:	60bb      	str	r3, [r7, #8]
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2108      	movs	r1, #8
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fd2a 	bl	8007f54 <SDMMC_CmdBlockLength>
 8007500:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	e0ad      	b.n	8007668 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	4619      	mov	r1, r3
 8007518:	4610      	mov	r0, r2
 800751a:	f000 fe68 	bl	80081ee <SDMMC_CmdAppCommand>
 800751e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d001      	beq.n	800752a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007528:	e09e      	b.n	8007668 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800752a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800752e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007530:	2308      	movs	r3, #8
 8007532:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007534:	2330      	movs	r3, #48	; 0x30
 8007536:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007538:	2302      	movs	r3, #2
 800753a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800753c:	2300      	movs	r3, #0
 800753e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007540:	2301      	movs	r3, #1
 8007542:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f107 0210 	add.w	r2, r7, #16
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fcd4 	bl	8007efc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 feae 	bl	80082ba <SDMMC_CmdSendSCR>
 800755e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007562:	2b00      	cmp	r3, #0
 8007564:	d027      	beq.n	80075b6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	e07e      	b.n	8007668 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007570:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d113      	bne.n	80075a0 <SD_FindSCR+0xcc>
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	2b00      	cmp	r3, #0
 800757c:	d110      	bne.n	80075a0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fc32 	bl	8007dec <SDMMC_ReadFIFO>
 8007588:	4603      	mov	r3, r0
 800758a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fc2b 	bl	8007dec <SDMMC_ReadFIFO>
 8007596:	4603      	mov	r3, r0
 8007598:	60fb      	str	r3, [r7, #12]
      index++;
 800759a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800759c:	3301      	adds	r3, #1
 800759e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80075a0:	f7f9 ff2c 	bl	80013fc <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ae:	d102      	bne.n	80075b6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80075b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075b4:	e058      	b.n	8007668 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075bc:	f240 532a 	movw	r3, #1322	; 0x52a
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0d1      	beq.n	800756a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2208      	movs	r2, #8
 80075da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80075dc:	2308      	movs	r3, #8
 80075de:	e043      	b.n	8007668 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e6:	f003 0302 	and.w	r3, r3, #2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d005      	beq.n	80075fa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2202      	movs	r2, #2
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80075f6:	2302      	movs	r3, #2
 80075f8:	e036      	b.n	8007668 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2220      	movs	r2, #32
 800760e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007610:	2320      	movs	r3, #32
 8007612:	e029      	b.n	8007668 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a15      	ldr	r2, [pc, #84]	; (8007670 <SD_FindSCR+0x19c>)
 800761a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	061a      	lsls	r2, r3, #24
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007628:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007632:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	0e1b      	lsrs	r3, r3, #24
 8007638:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	601a      	str	r2, [r3, #0]
    scr++;
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	3304      	adds	r3, #4
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	061a      	lsls	r2, r3, #24
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	021b      	lsls	r3, r3, #8
 800764c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007650:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800765a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	0e1b      	lsrs	r3, r3, #24
 8007660:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3738      	adds	r7, #56	; 0x38
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	18000f3a 	.word	0x18000f3a

08007674 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	2b1f      	cmp	r3, #31
 8007688:	d936      	bls.n	80076f8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e027      	b.n	80076e0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 fba9 	bl	8007dec <SDMMC_ReadFIFO>
 800769a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	3301      	adds	r3, #1
 80076a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	0a1b      	lsrs	r3, r3, #8
 80076ae:	b2da      	uxtb	r2, r3
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3301      	adds	r3, #1
 80076b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	3301      	adds	r3, #1
 80076c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	0e1b      	lsrs	r3, r3, #24
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3301      	adds	r3, #1
 80076d8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	3301      	adds	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b07      	cmp	r3, #7
 80076e4:	d9d4      	bls.n	8007690 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f0:	f1a3 0220 	sub.w	r2, r3, #32
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80076f8:	bf00      	nop
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	2b1f      	cmp	r3, #31
 8007714:	d93a      	bls.n	800778c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	e02b      	b.n	8007774 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	3301      	adds	r3, #1
 8007726:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	021a      	lsls	r2, r3, #8
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	3301      	adds	r3, #1
 8007738:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	041a      	lsls	r2, r3, #16
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	3301      	adds	r3, #1
 800774a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	061a      	lsls	r2, r3, #24
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	4313      	orrs	r3, r2
 8007756:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	3301      	adds	r3, #1
 800775c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f107 020c 	add.w	r2, r7, #12
 8007766:	4611      	mov	r1, r2
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fb4c 	bl	8007e06 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	3301      	adds	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b07      	cmp	r3, #7
 8007778:	d9d0      	bls.n	800771c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6a1b      	ldr	r3, [r3, #32]
 8007784:	f1a3 0220 	sub.w	r2, r3, #32
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	621a      	str	r2, [r3, #32]
  }
}
 800778c:	bf00      	nop
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e049      	b.n	800788a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d106      	bne.n	8007810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f841 	bl	8007892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2202      	movs	r2, #2
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3304      	adds	r3, #4
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f000 fa00 	bl	8007c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
	...

080078a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d001      	beq.n	80078c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e054      	b.n	800796a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0201 	orr.w	r2, r2, #1
 80078d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a26      	ldr	r2, [pc, #152]	; (8007978 <HAL_TIM_Base_Start_IT+0xd0>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ea:	d01d      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a22      	ldr	r2, [pc, #136]	; (800797c <HAL_TIM_Base_Start_IT+0xd4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a21      	ldr	r2, [pc, #132]	; (8007980 <HAL_TIM_Base_Start_IT+0xd8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1f      	ldr	r2, [pc, #124]	; (8007984 <HAL_TIM_Base_Start_IT+0xdc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1e      	ldr	r2, [pc, #120]	; (8007988 <HAL_TIM_Base_Start_IT+0xe0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1c      	ldr	r2, [pc, #112]	; (800798c <HAL_TIM_Base_Start_IT+0xe4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <HAL_TIM_Base_Start_IT+0x80>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <HAL_TIM_Base_Start_IT+0xe8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d115      	bne.n	8007954 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	4b19      	ldr	r3, [pc, #100]	; (8007994 <HAL_TIM_Base_Start_IT+0xec>)
 8007930:	4013      	ands	r3, r2
 8007932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b06      	cmp	r3, #6
 8007938:	d015      	beq.n	8007966 <HAL_TIM_Base_Start_IT+0xbe>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007940:	d011      	beq.n	8007966 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f042 0201 	orr.w	r2, r2, #1
 8007950:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007952:	e008      	b.n	8007966 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0201 	orr.w	r2, r2, #1
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	e000      	b.n	8007968 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007966:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40010000 	.word	0x40010000
 800797c:	40000400 	.word	0x40000400
 8007980:	40000800 	.word	0x40000800
 8007984:	40000c00 	.word	0x40000c00
 8007988:	40010400 	.word	0x40010400
 800798c:	40001800 	.word	0x40001800
 8007990:	40014000 	.word	0x40014000
 8007994:	00010007 	.word	0x00010007

08007998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b02      	cmp	r3, #2
 80079ac:	d122      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d11b      	bne.n	80079f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f06f 0202 	mvn.w	r2, #2
 80079c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f905 	bl	8007bea <HAL_TIM_IC_CaptureCallback>
 80079e0:	e005      	b.n	80079ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f8f7 	bl	8007bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f908 	bl	8007bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d122      	bne.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f003 0304 	and.w	r3, r3, #4
 8007a0c:	2b04      	cmp	r3, #4
 8007a0e:	d11b      	bne.n	8007a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f06f 0204 	mvn.w	r2, #4
 8007a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8db 	bl	8007bea <HAL_TIM_IC_CaptureCallback>
 8007a34:	e005      	b.n	8007a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f8cd 	bl	8007bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8de 	bl	8007bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b08      	cmp	r3, #8
 8007a54:	d122      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d11b      	bne.n	8007a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f06f 0208 	mvn.w	r2, #8
 8007a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2204      	movs	r2, #4
 8007a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8b1 	bl	8007bea <HAL_TIM_IC_CaptureCallback>
 8007a88:	e005      	b.n	8007a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f8a3 	bl	8007bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 f8b4 	bl	8007bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b10      	cmp	r3, #16
 8007aa8:	d122      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b10      	cmp	r3, #16
 8007ab6:	d11b      	bne.n	8007af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f06f 0210 	mvn.w	r2, #16
 8007ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f887 	bl	8007bea <HAL_TIM_IC_CaptureCallback>
 8007adc:	e005      	b.n	8007aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f879 	bl	8007bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f88a 	bl	8007bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d10e      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d107      	bne.n	8007b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f06f 0201 	mvn.w	r2, #1
 8007b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7f9 fa18 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d10e      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68db      	ldr	r3, [r3, #12]
 8007b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b34:	2b80      	cmp	r3, #128	; 0x80
 8007b36:	d107      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f914 	bl	8007d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b56:	d10e      	bne.n	8007b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b62:	2b80      	cmp	r3, #128	; 0x80
 8007b64:	d107      	bne.n	8007b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f907 	bl	8007d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b80:	2b40      	cmp	r3, #64	; 0x40
 8007b82:	d10e      	bne.n	8007ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d107      	bne.n	8007ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f838 	bl	8007c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f003 0320 	and.w	r3, r3, #32
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d10e      	bne.n	8007bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b20      	cmp	r3, #32
 8007bbc:	d107      	bne.n	8007bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f06f 0220 	mvn.w	r2, #32
 8007bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8c7 	bl	8007d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bce:	bf00      	nop
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr

08007c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
	...

08007c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a40      	ldr	r2, [pc, #256]	; (8007d3c <TIM_Base_SetConfig+0x114>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d013      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c46:	d00f      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a3d      	ldr	r2, [pc, #244]	; (8007d40 <TIM_Base_SetConfig+0x118>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00b      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a3c      	ldr	r2, [pc, #240]	; (8007d44 <TIM_Base_SetConfig+0x11c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d007      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a3b      	ldr	r2, [pc, #236]	; (8007d48 <TIM_Base_SetConfig+0x120>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d003      	beq.n	8007c68 <TIM_Base_SetConfig+0x40>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a3a      	ldr	r2, [pc, #232]	; (8007d4c <TIM_Base_SetConfig+0x124>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d108      	bne.n	8007c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a2f      	ldr	r2, [pc, #188]	; (8007d3c <TIM_Base_SetConfig+0x114>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d01f      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c88:	d01b      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a2c      	ldr	r2, [pc, #176]	; (8007d40 <TIM_Base_SetConfig+0x118>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d017      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a2b      	ldr	r2, [pc, #172]	; (8007d44 <TIM_Base_SetConfig+0x11c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d013      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a2a      	ldr	r2, [pc, #168]	; (8007d48 <TIM_Base_SetConfig+0x120>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00f      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a29      	ldr	r2, [pc, #164]	; (8007d4c <TIM_Base_SetConfig+0x124>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00b      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a28      	ldr	r2, [pc, #160]	; (8007d50 <TIM_Base_SetConfig+0x128>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d007      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a27      	ldr	r2, [pc, #156]	; (8007d54 <TIM_Base_SetConfig+0x12c>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d003      	beq.n	8007cc2 <TIM_Base_SetConfig+0x9a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a26      	ldr	r2, [pc, #152]	; (8007d58 <TIM_Base_SetConfig+0x130>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d108      	bne.n	8007cd4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a10      	ldr	r2, [pc, #64]	; (8007d3c <TIM_Base_SetConfig+0x114>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00f      	beq.n	8007d20 <TIM_Base_SetConfig+0xf8>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <TIM_Base_SetConfig+0x124>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00b      	beq.n	8007d20 <TIM_Base_SetConfig+0xf8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a11      	ldr	r2, [pc, #68]	; (8007d50 <TIM_Base_SetConfig+0x128>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d007      	beq.n	8007d20 <TIM_Base_SetConfig+0xf8>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <TIM_Base_SetConfig+0x12c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_Base_SetConfig+0xf8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a0f      	ldr	r2, [pc, #60]	; (8007d58 <TIM_Base_SetConfig+0x130>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d103      	bne.n	8007d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	691a      	ldr	r2, [r3, #16]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	615a      	str	r2, [r3, #20]
}
 8007d2e:	bf00      	nop
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	40010000 	.word	0x40010000
 8007d40:	40000400 	.word	0x40000400
 8007d44:	40000800 	.word	0x40000800
 8007d48:	40000c00 	.word	0x40000c00
 8007d4c:	40010400 	.word	0x40010400
 8007d50:	40014000 	.word	0x40014000
 8007d54:	40014400 	.word	0x40014400
 8007d58:	40014800 	.word	0x40014800

08007d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007d98:	b084      	sub	sp, #16
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	f107 001c 	add.w	r0, r7, #28
 8007da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007daa:	2300      	movs	r3, #0
 8007dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8007dae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8007db0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8007db2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8007db6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8007db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8007dba:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8007dbe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685a      	ldr	r2, [r3, #4]
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <SDMMC_Init+0x50>)
 8007dcc:	4013      	ands	r3, r2
 8007dce:	68fa      	ldr	r2, [r7, #12]
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	b004      	add	sp, #16
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	ffc02c00 	.word	0xffc02c00

08007dec <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f043 0203 	orr.w	r2, r3, #3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0303 	and.w	r3, r3, #3
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
	...

08007e68 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e72:	2300      	movs	r3, #0
 8007e74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007e86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8007e8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8007e92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	4b06      	ldr	r3, [pc, #24]	; (8007eb8 <SDMMC_SendCommand+0x50>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	fffee0c0 	.word	0xfffee0c0

08007ebc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	b2db      	uxtb	r3, r3
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3314      	adds	r3, #20
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	4413      	add	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007f06:	2300      	movs	r3, #0
 8007f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007f22:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8007f28:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8007f2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0

}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007f62:	2310      	movs	r3, #16
 8007f64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007f66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007f76:	f107 0308 	add.w	r3, r7, #8
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff ff73 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f86:	2110      	movs	r1, #16
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fa5f 	bl	800844c <SDMMC_GetCmdResp1>
 8007f8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f90:	69fb      	ldr	r3, [r7, #28]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b088      	sub	sp, #32
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007fa8:	2311      	movs	r3, #17
 8007faa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007fac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007fbc:	f107 0308 	add.w	r3, r7, #8
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f7ff ff50 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fcc:	2111      	movs	r1, #17
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fa3c 	bl	800844c <SDMMC_GetCmdResp1>
 8007fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fd6:	69fb      	ldr	r3, [r7, #28]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3720      	adds	r7, #32
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007fee:	2312      	movs	r3, #18
 8007ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ff2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008000:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f7ff ff2d 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800800e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008012:	2112      	movs	r1, #18
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa19 	bl	800844c <SDMMC_GetCmdResp1>
 800801a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800801c:	69fb      	ldr	r3, [r7, #28]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b088      	sub	sp, #32
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008034:	2318      	movs	r3, #24
 8008036:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008038:	f44f 7380 	mov.w	r3, #256	; 0x100
 800803c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008042:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008046:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008048:	f107 0308 	add.w	r3, r7, #8
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff ff0a 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008054:	f241 3288 	movw	r2, #5000	; 0x1388
 8008058:	2118      	movs	r1, #24
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f9f6 	bl	800844c <SDMMC_GetCmdResp1>
 8008060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008062:	69fb      	ldr	r3, [r7, #28]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3720      	adds	r7, #32
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800807a:	2319      	movs	r3, #25
 800807c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800807e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008084:	2300      	movs	r3, #0
 8008086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800808c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800808e:	f107 0308 	add.w	r3, r7, #8
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff fee7 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800809a:	f241 3288 	movw	r2, #5000	; 0x1388
 800809e:	2119      	movs	r1, #25
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f9d3 	bl	800844c <SDMMC_GetCmdResp1>
 80080a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080a8:	69fb      	ldr	r3, [r7, #28]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3720      	adds	r7, #32
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b088      	sub	sp, #32
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80080c0:	230c      	movs	r3, #12
 80080c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ca:	2300      	movs	r3, #0
 80080cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080ec:	f107 0308 	add.w	r3, r7, #8
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff feb8 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80080f8:	4a0b      	ldr	r2, [pc, #44]	; (8008128 <SDMMC_CmdStopTransfer+0x74>)
 80080fa:	210c      	movs	r1, #12
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f9a5 	bl	800844c <SDMMC_GetCmdResp1>
 8008102:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008116:	d101      	bne.n	800811c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008118:	2300      	movs	r3, #0
 800811a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800811c:	69fb      	ldr	r3, [r7, #28]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3720      	adds	r7, #32
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	05f5e100 	.word	0x05f5e100

0800812c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800813a:	2307      	movs	r3, #7
 800813c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800813e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008144:	2300      	movs	r3, #0
 8008146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800814e:	f107 0308 	add.w	r3, r7, #8
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7ff fe87 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800815a:	f241 3288 	movw	r2, #5000	; 0x1388
 800815e:	2107      	movs	r1, #7
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f973 	bl	800844c <SDMMC_GetCmdResp1>
 8008166:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008168:	69fb      	ldr	r3, [r7, #28]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3720      	adds	r7, #32
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b088      	sub	sp, #32
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800817a:	2300      	movs	r3, #0
 800817c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800817e:	2300      	movs	r3, #0
 8008180:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800818a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800818e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008190:	f107 0308 	add.w	r3, r7, #8
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7ff fe66 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fb97 	bl	80088d0 <SDMMC_GetCmdError>
 80081a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081a4:	69fb      	ldr	r3, [r7, #28]
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b088      	sub	sp, #32
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80081b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80081ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80081bc:	2308      	movs	r3, #8
 80081be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7ff fe46 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fb29 	bl	8008834 <SDMMC_GetCmdResp7>
 80081e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081e4:	69fb      	ldr	r3, [r7, #28]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3720      	adds	r7, #32
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b088      	sub	sp, #32
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80081fc:	2337      	movs	r3, #55	; 0x37
 80081fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008200:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008206:	2300      	movs	r3, #0
 8008208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800820a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800820e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008210:	f107 0308 	add.w	r3, r7, #8
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fe26 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800821c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008220:	2137      	movs	r1, #55	; 0x37
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f912 	bl	800844c <SDMMC_GetCmdResp1>
 8008228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800822a:	69fb      	ldr	r3, [r7, #28]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3720      	adds	r7, #32
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008242:	2329      	movs	r3, #41	; 0x29
 8008244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800824a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800824c:	2300      	movs	r3, #0
 800824e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008254:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff fe03 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa2e 	bl	80086c4 <SDMMC_GetCmdResp3>
 8008268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800826a:	69fb      	ldr	r3, [r7, #28]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3720      	adds	r7, #32
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008282:	2306      	movs	r3, #6
 8008284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008286:	f44f 7380 	mov.w	r3, #256	; 0x100
 800828a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008294:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008296:	f107 0308 	add.w	r3, r7, #8
 800829a:	4619      	mov	r1, r3
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7ff fde3 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80082a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a6:	2106      	movs	r1, #6
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f8cf 	bl	800844c <SDMMC_GetCmdResp1>
 80082ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082b0:	69fb      	ldr	r3, [r7, #28]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3720      	adds	r7, #32
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b088      	sub	sp, #32
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80082c6:	2333      	movs	r3, #51	; 0x33
 80082c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082d0:	2300      	movs	r3, #0
 80082d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082da:	f107 0308 	add.w	r3, r7, #8
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff fdc1 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80082e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80082ea:	2133      	movs	r1, #51	; 0x33
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f8ad 	bl	800844c <SDMMC_GetCmdResp1>
 80082f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082f4:	69fb      	ldr	r3, [r7, #28]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3720      	adds	r7, #32
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b088      	sub	sp, #32
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800830a:	2302      	movs	r3, #2
 800830c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800830e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008314:	2300      	movs	r3, #0
 8008316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800831c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800831e:	f107 0308 	add.w	r3, r7, #8
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff fd9f 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 f980 	bl	8008630 <SDMMC_GetCmdResp2>
 8008330:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008332:	69fb      	ldr	r3, [r7, #28]
}
 8008334:	4618      	mov	r0, r3
 8008336:	3720      	adds	r7, #32
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800834a:	2309      	movs	r3, #9
 800834c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800834e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008354:	2300      	movs	r3, #0
 8008356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800835c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800835e:	f107 0308 	add.w	r3, r7, #8
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7ff fd7f 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f960 	bl	8008630 <SDMMC_GetCmdResp2>
 8008370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008372:	69fb      	ldr	r3, [r7, #28]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800838a:	2303      	movs	r3, #3
 800838c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800838e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008394:	2300      	movs	r3, #0
 8008396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800839c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800839e:	f107 0308 	add.w	r3, r7, #8
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff fd5f 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	2103      	movs	r1, #3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f9c8 	bl	8008744 <SDMMC_GetCmdResp6>
 80083b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80083ce:	230d      	movs	r3, #13
 80083d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083e2:	f107 0308 	add.w	r3, r7, #8
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff fd3d 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80083ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f2:	210d      	movs	r1, #13
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f829 	bl	800844c <SDMMC_GetCmdResp1>
 80083fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083fc:	69fb      	ldr	r3, [r7, #28]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b088      	sub	sp, #32
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008412:	230d      	movs	r3, #13
 8008414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800841a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008424:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008426:	f107 0308 	add.w	r3, r7, #8
 800842a:	4619      	mov	r1, r3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fd1b 	bl	8007e68 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008432:	f241 3288 	movw	r2, #5000	; 0x1388
 8008436:	210d      	movs	r1, #13
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f807 	bl	800844c <SDMMC_GetCmdResp1>
 800843e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008440:	69fb      	ldr	r3, [r7, #28]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
	...

0800844c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b088      	sub	sp, #32
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	460b      	mov	r3, r1
 8008456:	607a      	str	r2, [r7, #4]
 8008458:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800845a:	4b70      	ldr	r3, [pc, #448]	; (800861c <SDMMC_GetCmdResp1+0x1d0>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a70      	ldr	r2, [pc, #448]	; (8008620 <SDMMC_GetCmdResp1+0x1d4>)
 8008460:	fba2 2303 	umull	r2, r3, r2, r3
 8008464:	0a5a      	lsrs	r2, r3, #9
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	fb02 f303 	mul.w	r3, r2, r3
 800846c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	1e5a      	subs	r2, r3, #1
 8008472:	61fa      	str	r2, [r7, #28]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d102      	bne.n	800847e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008478:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800847c:	e0c9      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008484:	69ba      	ldr	r2, [r7, #24]
 8008486:	4b67      	ldr	r3, [pc, #412]	; (8008624 <SDMMC_GetCmdResp1+0x1d8>)
 8008488:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0ef      	beq.n	800846e <SDMMC_GetCmdResp1+0x22>
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1ea      	bne.n	800846e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	f003 0304 	and.w	r3, r3, #4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d004      	beq.n	80084ae <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2204      	movs	r2, #4
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80084aa:	2304      	movs	r3, #4
 80084ac:	e0b1      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2201      	movs	r2, #1
 80084be:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084c0:	2301      	movs	r3, #1
 80084c2:	e0a6      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	4a58      	ldr	r2, [pc, #352]	; (8008628 <SDMMC_GetCmdResp1+0x1dc>)
 80084c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	f7ff fcf6 	bl	8007ebc <SDMMC_GetCommandResponse>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	7afb      	ldrb	r3, [r7, #11]
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d001      	beq.n	80084de <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80084da:	2301      	movs	r3, #1
 80084dc:	e099      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80084de:	2100      	movs	r1, #0
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f7ff fcf8 	bl	8007ed6 <SDMMC_GetResponse>
 80084e6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80084e8:	697a      	ldr	r2, [r7, #20]
 80084ea:	4b50      	ldr	r3, [pc, #320]	; (800862c <SDMMC_GetCmdResp1+0x1e0>)
 80084ec:	4013      	ands	r3, r2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	e08d      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	da02      	bge.n	8008502 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80084fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008500:	e087      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d001      	beq.n	8008510 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800850c:	2340      	movs	r3, #64	; 0x40
 800850e:	e080      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800851a:	2380      	movs	r3, #128	; 0x80
 800851c:	e079      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d002      	beq.n	800852e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800852c:	e071      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008538:	f44f 7300 	mov.w	r3, #512	; 0x200
 800853c:	e069      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800854c:	e061      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008558:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800855c:	e059      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800856c:	e051      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800857c:	e049      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008588:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800858c:	e041      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800859c:	e039      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80085a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80085ac:	e031      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d002      	beq.n	80085be <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80085b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80085bc:	e029      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80085c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80085cc:	e021      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80085d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80085dc:	e019      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d002      	beq.n	80085ee <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80085e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80085ec:	e011      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80085f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085fc:	e009      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	f003 0308 	and.w	r3, r3, #8
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008608:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800860c:	e001      	b.n	8008612 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800860e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3720      	adds	r7, #32
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	24000000 	.word	0x24000000
 8008620:	10624dd3 	.word	0x10624dd3
 8008624:	00200045 	.word	0x00200045
 8008628:	002000c5 	.word	0x002000c5
 800862c:	fdffe008 	.word	0xfdffe008

08008630 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008638:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <SDMMC_GetCmdResp2+0x88>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1f      	ldr	r2, [pc, #124]	; (80086bc <SDMMC_GetCmdResp2+0x8c>)
 800863e:	fba2 2303 	umull	r2, r3, r2, r3
 8008642:	0a5b      	lsrs	r3, r3, #9
 8008644:	f241 3288 	movw	r2, #5000	; 0x1388
 8008648:	fb02 f303 	mul.w	r3, r2, r3
 800864c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	1e5a      	subs	r2, r3, #1
 8008652:	60fa      	str	r2, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800865c:	e026      	b.n	80086ac <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008662:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800866a:	2b00      	cmp	r3, #0
 800866c:	d0ef      	beq.n	800864e <SDMMC_GetCmdResp2+0x1e>
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1ea      	bne.n	800864e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2204      	movs	r2, #4
 8008688:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800868a:	2304      	movs	r3, #4
 800868c:	e00e      	b.n	80086ac <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086a0:	2301      	movs	r3, #1
 80086a2:	e003      	b.n	80086ac <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a06      	ldr	r2, [pc, #24]	; (80086c0 <SDMMC_GetCmdResp2+0x90>)
 80086a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	24000000 	.word	0x24000000
 80086bc:	10624dd3 	.word	0x10624dd3
 80086c0:	002000c5 	.word	0x002000c5

080086c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80086cc:	4b1a      	ldr	r3, [pc, #104]	; (8008738 <SDMMC_GetCmdResp3+0x74>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1a      	ldr	r2, [pc, #104]	; (800873c <SDMMC_GetCmdResp3+0x78>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	0a5b      	lsrs	r3, r3, #9
 80086d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086dc:	fb02 f303 	mul.w	r3, r2, r3
 80086e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	1e5a      	subs	r2, r3, #1
 80086e6:	60fa      	str	r2, [r7, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d102      	bne.n	80086f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80086ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80086f0:	e01b      	b.n	800872a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0ef      	beq.n	80086e2 <SDMMC_GetCmdResp3+0x1e>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1ea      	bne.n	80086e2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	f003 0304 	and.w	r3, r3, #4
 8008714:	2b00      	cmp	r3, #0
 8008716:	d004      	beq.n	8008722 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2204      	movs	r2, #4
 800871c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800871e:	2304      	movs	r3, #4
 8008720:	e003      	b.n	800872a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a06      	ldr	r2, [pc, #24]	; (8008740 <SDMMC_GetCmdResp3+0x7c>)
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3714      	adds	r7, #20
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
 8008736:	bf00      	nop
 8008738:	24000000 	.word	0x24000000
 800873c:	10624dd3 	.word	0x10624dd3
 8008740:	002000c5 	.word	0x002000c5

08008744 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	460b      	mov	r3, r1
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8008752:	4b35      	ldr	r3, [pc, #212]	; (8008828 <SDMMC_GetCmdResp6+0xe4>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a35      	ldr	r2, [pc, #212]	; (800882c <SDMMC_GetCmdResp6+0xe8>)
 8008758:	fba2 2303 	umull	r2, r3, r2, r3
 800875c:	0a5b      	lsrs	r3, r3, #9
 800875e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	1e5a      	subs	r2, r3, #1
 800876c:	61fa      	str	r2, [r7, #28]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d102      	bne.n	8008778 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008772:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008776:	e052      	b.n	800881e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008784:	2b00      	cmp	r3, #0
 8008786:	d0ef      	beq.n	8008768 <SDMMC_GetCmdResp6+0x24>
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1ea      	bne.n	8008768 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	f003 0304 	and.w	r3, r3, #4
 800879a:	2b00      	cmp	r3, #0
 800879c:	d004      	beq.n	80087a8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2204      	movs	r2, #4
 80087a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087a4:	2304      	movs	r3, #4
 80087a6:	e03a      	b.n	800881e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e02f      	b.n	800881e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fb7c 	bl	8007ebc <SDMMC_GetCommandResponse>
 80087c4:	4603      	mov	r3, r0
 80087c6:	461a      	mov	r2, r3
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d001      	beq.n	80087d2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e025      	b.n	800881e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4a16      	ldr	r2, [pc, #88]	; (8008830 <SDMMC_GetCmdResp6+0xec>)
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80087d8:	2100      	movs	r1, #0
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff fb7b 	bl	8007ed6 <SDMMC_GetResponse>
 80087e0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d106      	bne.n	80087fa <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	0c1b      	lsrs	r3, r3, #16
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80087f6:	2300      	movs	r3, #0
 80087f8:	e011      	b.n	800881e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008808:	e009      	b.n	800881e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008818:	e001      	b.n	800881e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800881a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800881e:	4618      	mov	r0, r3
 8008820:	3720      	adds	r7, #32
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	24000000 	.word	0x24000000
 800882c:	10624dd3 	.word	0x10624dd3
 8008830:	002000c5 	.word	0x002000c5

08008834 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800883c:	4b22      	ldr	r3, [pc, #136]	; (80088c8 <SDMMC_GetCmdResp7+0x94>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a22      	ldr	r2, [pc, #136]	; (80088cc <SDMMC_GetCmdResp7+0x98>)
 8008842:	fba2 2303 	umull	r2, r3, r2, r3
 8008846:	0a5b      	lsrs	r3, r3, #9
 8008848:	f241 3288 	movw	r2, #5000	; 0x1388
 800884c:	fb02 f303 	mul.w	r3, r2, r3
 8008850:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1e5a      	subs	r2, r3, #1
 8008856:	60fa      	str	r2, [r7, #12]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800885c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008860:	e02c      	b.n	80088bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008866:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800886e:	2b00      	cmp	r3, #0
 8008870:	d0ef      	beq.n	8008852 <SDMMC_GetCmdResp7+0x1e>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1ea      	bne.n	8008852 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	d004      	beq.n	8008892 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2204      	movs	r2, #4
 800888c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800888e:	2304      	movs	r3, #4
 8008890:	e014      	b.n	80088bc <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d004      	beq.n	80088a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e009      	b.n	80088bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2240      	movs	r2, #64	; 0x40
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80088ba:	2300      	movs	r3, #0

}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	24000000 	.word	0x24000000
 80088cc:	10624dd3 	.word	0x10624dd3

080088d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b085      	sub	sp, #20
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80088d8:	4b11      	ldr	r3, [pc, #68]	; (8008920 <SDMMC_GetCmdError+0x50>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a11      	ldr	r2, [pc, #68]	; (8008924 <SDMMC_GetCmdError+0x54>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	0a5b      	lsrs	r3, r3, #9
 80088e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	1e5a      	subs	r2, r3, #1
 80088f2:	60fa      	str	r2, [r7, #12]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d102      	bne.n	80088fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088fc:	e009      	b.n	8008912 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0f1      	beq.n	80088ee <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a06      	ldr	r2, [pc, #24]	; (8008928 <SDMMC_GetCmdError+0x58>)
 800890e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	24000000 	.word	0x24000000
 8008924:	10624dd3 	.word	0x10624dd3
 8008928:	002000c5 	.word	0x002000c5

0800892c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  //retSD = FATFS_LinkDriver(&SD_Driver, SDPath);

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008930:	bf00      	nop
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800893a:	b480      	push	{r7}
 800893c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800893e:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008940:	4618      	mov	r0, r3
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
	...

0800894c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008952:	2300      	movs	r3, #0
 8008954:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008956:	f000 f885 	bl	8008a64 <BSP_SD_IsDetected>
 800895a:	4603      	mov	r3, r0
 800895c:	2b01      	cmp	r3, #1
 800895e:	d001      	beq.n	8008964 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008960:	2302      	movs	r3, #2
 8008962:	e012      	b.n	800898a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008964:	480b      	ldr	r0, [pc, #44]	; (8008994 <BSP_SD_Init+0x48>)
 8008966:	f7fd fad9 	bl	8005f1c <HAL_SD_Init>
 800896a:	4603      	mov	r3, r0
 800896c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800896e:	79fb      	ldrb	r3, [r7, #7]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d109      	bne.n	8008988 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008974:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008978:	4806      	ldr	r0, [pc, #24]	; (8008994 <BSP_SD_Init+0x48>)
 800897a:	f7fe f98f 	bl	8006c9c <HAL_SD_ConfigWideBusOperation>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008988:	79fb      	ldrb	r3, [r7, #7]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	24000fa8 	.word	0x24000fa8

08008998 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	68f9      	ldr	r1, [r7, #12]
 80089ae:	4806      	ldr	r0, [pc, #24]	; (80089c8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80089b0:	f7fd fbd4 	bl	800615c <HAL_SD_ReadBlocks_DMA>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80089be:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	24000fa8 	.word	0x24000fa8

080089cc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	68f9      	ldr	r1, [r7, #12]
 80089e2:	4806      	ldr	r0, [pc, #24]	; (80089fc <BSP_SD_WriteBlocks_DMA+0x30>)
 80089e4:	f7fd fc62 	bl	80062ac <HAL_SD_WriteBlocks_DMA>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80089f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3718      	adds	r7, #24
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	24000fa8 	.word	0x24000fa8

08008a00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008a04:	4805      	ldr	r0, [pc, #20]	; (8008a1c <BSP_SD_GetCardState+0x1c>)
 8008a06:	f7fe fa5b 	bl	8006ec0 <HAL_SD_GetCardState>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	bf14      	ite	ne
 8008a10:	2301      	movne	r3, #1
 8008a12:	2300      	moveq	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	24000fa8 	.word	0x24000fa8

08008a20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	4803      	ldr	r0, [pc, #12]	; (8008a38 <BSP_SD_GetCardInfo+0x18>)
 8008a2c:	f7fe f90a 	bl	8006c44 <HAL_SD_GetCardInfo>
}
 8008a30:	bf00      	nop
 8008a32:	3708      	adds	r7, #8
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	24000fa8 	.word	0x24000fa8

08008a3c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008a44:	f000 fa20 	bl	8008e88 <BSP_SD_WriteCpltCallback>
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008a58:	f000 fa24 	bl	8008ea4 <BSP_SD_ReadCpltCallback>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008a6e:	f000 f80b 	bl	8008a88 <BSP_PlatformIsDetected>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	b2db      	uxtb	r3, r3
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a96:	4806      	ldr	r0, [pc, #24]	; (8008ab0 <BSP_PlatformIsDetected+0x28>)
 8008a98:	f7f9 f95c 	bl	8001d54 <HAL_GPIO_ReadPin>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008aa6:	79fb      	ldrb	r3, [r7, #7]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	58022000 	.word	0x58022000

08008ab4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8008abc:	f003 f97e 	bl	800bdbc <osKernelSysTick>
 8008ac0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8008ac2:	e006      	b.n	8008ad2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ac4:	f7ff ff9c 	bl	8008a00 <BSP_SD_GetCardState>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	e009      	b.n	8008ae6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8008ad2:	f003 f973 	bl	800bdbc <osKernelSysTick>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d8f0      	bhi.n	8008ac4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
	...

08008af0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	4603      	mov	r3, r0
 8008af8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <SD_CheckStatus+0x38>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008b00:	f7ff ff7e 	bl	8008a00 <BSP_SD_GetCardState>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d107      	bne.n	8008b1a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008b0a:	4b07      	ldr	r3, [pc, #28]	; (8008b28 <SD_CheckStatus+0x38>)
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f023 0301 	bic.w	r3, r3, #1
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <SD_CheckStatus+0x38>)
 8008b18:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008b1a:	4b03      	ldr	r3, [pc, #12]	; (8008b28 <SD_CheckStatus+0x38>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	b2db      	uxtb	r3, r3
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}
 8008b28:	2400000d 	.word	0x2400000d

08008b2c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008b2c:	b590      	push	{r4, r7, lr}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008b36:	4b20      	ldr	r3, [pc, #128]	; (8008bb8 <SD_initialize+0x8c>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8008b3c:	f003 f932 	bl	800bda4 <osKernelRunning>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d030      	beq.n	8008ba8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008b46:	f7ff ff01 	bl	800894c <BSP_SD_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d107      	bne.n	8008b60 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff ffcc 	bl	8008af0 <SD_CheckStatus>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4b16      	ldr	r3, [pc, #88]	; (8008bb8 <SD_initialize+0x8c>)
 8008b5e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008b60:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <SD_initialize+0x8c>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d01e      	beq.n	8008ba8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8008b6a:	4b14      	ldr	r3, [pc, #80]	; (8008bbc <SD_initialize+0x90>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10e      	bne.n	8008b90 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8008b72:	4b13      	ldr	r3, [pc, #76]	; (8008bc0 <SD_initialize+0x94>)
 8008b74:	f107 0408 	add.w	r4, r7, #8
 8008b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008b7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8008b7e:	f107 0308 	add.w	r3, r7, #8
 8008b82:	2100      	movs	r1, #0
 8008b84:	4618      	mov	r0, r3
 8008b86:	f003 f9bf 	bl	800bf08 <osMessageCreate>
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	4a0b      	ldr	r2, [pc, #44]	; (8008bbc <SD_initialize+0x90>)
 8008b8e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8008b90:	4b0a      	ldr	r3, [pc, #40]	; (8008bbc <SD_initialize+0x90>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d107      	bne.n	8008ba8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8008b98:	4b07      	ldr	r3, [pc, #28]	; (8008bb8 <SD_initialize+0x8c>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	f043 0301 	orr.w	r3, r3, #1
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	4b04      	ldr	r3, [pc, #16]	; (8008bb8 <SD_initialize+0x8c>)
 8008ba6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008ba8:	4b03      	ldr	r3, [pc, #12]	; (8008bb8 <SD_initialize+0x8c>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	b2db      	uxtb	r3, r3
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd90      	pop	{r4, r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	2400000d 	.word	0x2400000d
 8008bbc:	240010e8 	.word	0x240010e8
 8008bc0:	0800fba8 	.word	0x0800fba8

08008bc4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7ff ff8d 	bl	8008af0 <SD_CheckStatus>
 8008bd6:	4603      	mov	r3, r0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08e      	sub	sp, #56	; 0x38
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	607a      	str	r2, [r7, #4]
 8008bea:	603b      	str	r3, [r7, #0]
 8008bec:	4603      	mov	r3, r0
 8008bee:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008bf6:	f247 5030 	movw	r0, #30000	; 0x7530
 8008bfa:	f7ff ff5b 	bl	8008ab4 <SD_CheckStatusWithTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	da02      	bge.n	8008c0a <SD_read+0x2a>
  {
    return res;
 8008c04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c08:	e061      	b.n	8008cce <SD_read+0xee>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	68b8      	ldr	r0, [r7, #8]
 8008c10:	f7ff fec2 	bl	8008998 <BSP_SD_ReadBlocks_DMA>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    if (ret == MSD_OK) {
 8008c1a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d153      	bne.n	8008cca <SD_read+0xea>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008c22:	4b2d      	ldr	r3, [pc, #180]	; (8008cd8 <SD_read+0xf8>)
 8008c24:	6819      	ldr	r1, [r3, #0]
 8008c26:	f107 0310 	add.w	r3, r7, #16
 8008c2a:	f247 5230 	movw	r2, #30000	; 0x7530
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f003 f9d2 	bl	800bfd8 <osMessageGet>

    if (event.status == osEventMessage)
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2b10      	cmp	r3, #16
 8008c38:	d147      	bne.n	8008cca <SD_read+0xea>
    {
      if (event.value.v == READ_CPLT_MSG)
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d144      	bne.n	8008cca <SD_read+0xea>
      {
        timer = osKernelSysTick();
 8008c40:	f003 f8bc 	bl	800bdbc <osKernelSysTick>
 8008c44:	6338      	str	r0, [r7, #48]	; 0x30
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8008c46:	e037      	b.n	8008cb8 <SD_read+0xd8>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008c48:	f7ff feda 	bl	8008a00 <BSP_SD_GetCardState>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d132      	bne.n	8008cb8 <SD_read+0xd8>
              {
                res = RES_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
                /*
                the SCB_InvalidateDCache_by_Addr() requires a 32-Byte aligned address,
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	f023 031f 	bic.w	r3, r3, #31
 8008c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8008c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	0251      	lsls	r1, r2, #9
 8008c66:	68b8      	ldr	r0, [r7, #8]
 8008c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c6a:	1a82      	subs	r2, r0, r2
 8008c6c:	440a      	add	r2, r1
 8008c6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c70:	627a      	str	r2, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd1d      	ble.n	8008cb4 <SD_read+0xd4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	f003 021f 	and.w	r2, r3, #31
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	4413      	add	r3, r2
 8008c82:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8008c88:	f3bf 8f4f 	dsb	sy
}
 8008c8c:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008c8e:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <SD_read+0xfc>)
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	3320      	adds	r3, #32
 8008c9a:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008c9c:	6a3b      	ldr	r3, [r7, #32]
 8008c9e:	3b20      	subs	r3, #32
 8008ca0:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	dcf2      	bgt.n	8008c8e <SD_read+0xae>
  __ASM volatile ("dsb 0xF":::"memory");
 8008ca8:	f3bf 8f4f 	dsb	sy
}
 8008cac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008cae:	f3bf 8f6f 	isb	sy
}
 8008cb2:	bf00      	nop
}
 8008cb4:	bf00      	nop
#endif
                break;
 8008cb6:	e008      	b.n	8008cca <SD_read+0xea>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8008cb8:	f003 f880 	bl	800bdbc <osKernelSysTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	f247 522f 	movw	r2, #29999	; 0x752f
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d9be      	bls.n	8008c48 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008cca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3738      	adds	r7, #56	; 0x38
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	240010e8 	.word	0x240010e8
 8008cdc:	e000ed00 	.word	0xe000ed00

08008ce0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08e      	sub	sp, #56	; 0x38
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60b9      	str	r1, [r7, #8]
 8008ce8:	607a      	str	r2, [r7, #4]
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008cf6:	f247 5030 	movw	r0, #30000	; 0x7530
 8008cfa:	f7ff fedb 	bl	8008ab4 <SD_CheckStatusWithTimeout>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	da02      	bge.n	8008d0a <SD_write+0x2a>
  {
    return res;
 8008d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008d08:	e05d      	b.n	8008dc6 <SD_write+0xe6>
  uint32_t alignedAddr;
  /*
    the SCB_CleanDCache_by_Addr() requires a 32-Byte aligned address
    adjust the address and the D-Cache size to clean accordingly.
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f023 031f 	bic.w	r3, r3, #31
 8008d10:	633b      	str	r3, [r7, #48]	; 0x30
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	0251      	lsls	r1, r2, #9
 8008d18:	68b8      	ldr	r0, [r7, #8]
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1c:	1a82      	subs	r2, r0, r2
 8008d1e:	440a      	add	r2, r1
 8008d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d22:	627a      	str	r2, [r7, #36]	; 0x24
    if ( dsize > 0 ) { 
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd1d      	ble.n	8008d66 <SD_write+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2c:	f003 021f 	and.w	r2, r3, #31
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	4413      	add	r3, r2
 8008d34:	623b      	str	r3, [r7, #32]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 8008d3a:	f3bf 8f4f 	dsb	sy
}
 8008d3e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008d40:	4a23      	ldr	r2, [pc, #140]	; (8008dd0 <SD_write+0xf0>)
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	3320      	adds	r3, #32
 8008d4c:	61fb      	str	r3, [r7, #28]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008d4e:	6a3b      	ldr	r3, [r7, #32]
 8008d50:	3b20      	subs	r3, #32
 8008d52:	623b      	str	r3, [r7, #32]
      } while ( op_size > 0 );
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	dcf2      	bgt.n	8008d40 <SD_write+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8008d5a:	f3bf 8f4f 	dsb	sy
}
 8008d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008d60:	f3bf 8f6f 	isb	sy
}
 8008d64:	bf00      	nop
}
 8008d66:	bf00      	nop
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008d68:	683a      	ldr	r2, [r7, #0]
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	68b8      	ldr	r0, [r7, #8]
 8008d6e:	f7ff fe2d 	bl	80089cc <BSP_SD_WriteBlocks_DMA>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d124      	bne.n	8008dc2 <SD_write+0xe2>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8008d78:	4b16      	ldr	r3, [pc, #88]	; (8008dd4 <SD_write+0xf4>)
 8008d7a:	6819      	ldr	r1, [r3, #0]
 8008d7c:	f107 0310 	add.w	r3, r7, #16
 8008d80:	f247 5230 	movw	r2, #30000	; 0x7530
 8008d84:	4618      	mov	r0, r3
 8008d86:	f003 f927 	bl	800bfd8 <osMessageGet>

    if (event.status == osEventMessage)
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	2b10      	cmp	r3, #16
 8008d8e:	d118      	bne.n	8008dc2 <SD_write+0xe2>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d115      	bne.n	8008dc2 <SD_write+0xe2>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8008d96:	f003 f811 	bl	800bdbc <osKernelSysTick>
 8008d9a:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8008d9c:	e008      	b.n	8008db0 <SD_write+0xd0>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008d9e:	f7ff fe2f 	bl	8008a00 <BSP_SD_GetCardState>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d103      	bne.n	8008db0 <SD_write+0xd0>
          {
            res = RES_OK;
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 8008dae:	e008      	b.n	8008dc2 <SD_write+0xe2>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8008db0:	f003 f804 	bl	800bdbc <osKernelSysTick>
 8008db4:	4602      	mov	r2, r0
 8008db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db8:	1ad3      	subs	r3, r2, r3
 8008dba:	f247 522f 	movw	r2, #29999	; 0x752f
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d9ed      	bls.n	8008d9e <SD_write+0xbe>
    }

  }
#endif

  return res;
 8008dc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3738      	adds	r7, #56	; 0x38
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	e000ed00 	.word	0xe000ed00
 8008dd4:	240010e8 	.word	0x240010e8

08008dd8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08c      	sub	sp, #48	; 0x30
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	603a      	str	r2, [r7, #0]
 8008de2:	71fb      	strb	r3, [r7, #7]
 8008de4:	460b      	mov	r3, r1
 8008de6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008dee:	4b25      	ldr	r3, [pc, #148]	; (8008e84 <SD_ioctl+0xac>)
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	f003 0301 	and.w	r3, r3, #1
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <SD_ioctl+0x28>
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e03c      	b.n	8008e7a <SD_ioctl+0xa2>

  switch (cmd)
 8008e00:	79bb      	ldrb	r3, [r7, #6]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d834      	bhi.n	8008e70 <SD_ioctl+0x98>
 8008e06:	a201      	add	r2, pc, #4	; (adr r2, 8008e0c <SD_ioctl+0x34>)
 8008e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0c:	08008e1d 	.word	0x08008e1d
 8008e10:	08008e25 	.word	0x08008e25
 8008e14:	08008e3d 	.word	0x08008e3d
 8008e18:	08008e57 	.word	0x08008e57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e22:	e028      	b.n	8008e76 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7ff fdf9 	bl	8008a20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008e2e:	6a3a      	ldr	r2, [r7, #32]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e3a:	e01c      	b.n	8008e76 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008e3c:	f107 0308 	add.w	r3, r7, #8
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff fded 	bl	8008a20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e54:	e00f      	b.n	8008e76 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008e56:	f107 0308 	add.w	r3, r7, #8
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7ff fde0 	bl	8008a20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	0a5a      	lsrs	r2, r3, #9
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e6e:	e002      	b.n	8008e76 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008e76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3730      	adds	r7, #48	; 0x30
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	2400000d 	.word	0x2400000d

08008e88 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <BSP_SD_WriteCpltCallback+0x18>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2200      	movs	r2, #0
 8008e92:	2102      	movs	r1, #2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f003 f85f 	bl	800bf58 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8008e9a:	bf00      	nop
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	240010e8 	.word	0x240010e8

08008ea4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8008ea8:	4b04      	ldr	r3, [pc, #16]	; (8008ebc <BSP_SD_ReadCpltCallback+0x18>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2200      	movs	r2, #0
 8008eae:	2101      	movs	r1, #1
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f003 f851 	bl	800bf58 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8008eb6:	bf00      	nop
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	240010e8 	.word	0x240010e8

08008ec0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8008ec8:	4b04      	ldr	r3, [pc, #16]	; (8008edc <HAL_ETH_RxCpltCallback+0x1c>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f002 ffe5 	bl	800be9c <osSemaphoreRelease>
}
 8008ed2:	bf00      	nop
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
 8008eda:	bf00      	nop
 8008edc:	240010ec 	.word	0x240010ec

08008ee0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8008ee8:	4b04      	ldr	r3, [pc, #16]	; (8008efc <HAL_ETH_TxCpltCallback+0x1c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f002 ffd5 	bl	800be9c <osSemaphoreRelease>
}
 8008ef2:	bf00      	nop
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	240010f0 	.word	0x240010f0

08008f00 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7f8 fd65 	bl	80019d8 <HAL_ETH_GetDMAError>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f14:	2b80      	cmp	r3, #128	; 0x80
 8008f16:	d104      	bne.n	8008f22 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8008f18:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <HAL_ETH_ErrorCallback+0x2c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f002 ffbd 	bl	800be9c <osSemaphoreRelease>
  }
}
 8008f22:	bf00      	nop
 8008f24:	3708      	adds	r7, #8
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	240010ec 	.word	0x240010ec

08008f30 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	71fb      	strb	r3, [r7, #7]
	DSTATUS stat;

	stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	4a08      	ldr	r2, [pc, #32]	; (8008f60 <disk_status+0x30>)
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	79fa      	ldrb	r2, [r7, #7]
 8008f48:	4905      	ldr	r1, [pc, #20]	; (8008f60 <disk_status+0x30>)
 8008f4a:	440a      	add	r2, r1
 8008f4c:	7a12      	ldrb	r2, [r2, #8]
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4798      	blx	r3
 8008f52:	4603      	mov	r3, r0
 8008f54:	73fb      	strb	r3, [r7, #15]
	return stat;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	240011ac 	.word	0x240011ac

08008f64 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	71fb      	strb	r3, [r7, #7]
	 DSTATUS stat = RES_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]

	  if(disk.is_initialized[pdrv] == 0)
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	4a0d      	ldr	r2, [pc, #52]	; (8008fac <disk_initialize+0x48>)
 8008f76:	5cd3      	ldrb	r3, [r2, r3]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d111      	bne.n	8008fa0 <disk_initialize+0x3c>
	  {
	    disk.is_initialized[pdrv] = 1;
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	4a0b      	ldr	r2, [pc, #44]	; (8008fac <disk_initialize+0x48>)
 8008f80:	2101      	movs	r1, #1
 8008f82:	54d1      	strb	r1, [r2, r3]
	    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	4a09      	ldr	r2, [pc, #36]	; (8008fac <disk_initialize+0x48>)
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	79fa      	ldrb	r2, [r7, #7]
 8008f92:	4906      	ldr	r1, [pc, #24]	; (8008fac <disk_initialize+0x48>)
 8008f94:	440a      	add	r2, r1
 8008f96:	7a12      	ldrb	r2, [r2, #8]
 8008f98:	4610      	mov	r0, r2
 8008f9a:	4798      	blx	r3
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
	  }
	  return stat;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	240011ac 	.word	0x240011ac

08008fb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008fb0:	b590      	push	{r4, r7, lr}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60b9      	str	r1, [r7, #8]
 8008fb8:	607a      	str	r2, [r7, #4]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
 8008fc2:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <disk_read+0x3c>)
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	689c      	ldr	r4, [r3, #8]
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	4a07      	ldr	r2, [pc, #28]	; (8008fec <disk_read+0x3c>)
 8008fd0:	4413      	add	r3, r2
 8008fd2:	7a18      	ldrb	r0, [r3, #8]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	68b9      	ldr	r1, [r7, #8]
 8008fda:	47a0      	blx	r4
 8008fdc:	4603      	mov	r3, r0
 8008fde:	75fb      	strb	r3, [r7, #23]
	  return res;
 8008fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd90      	pop	{r4, r7, pc}
 8008fea:	bf00      	nop
 8008fec:	240011ac 	.word	0x240011ac

08008ff0 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60b9      	str	r1, [r7, #8]
 8008ff8:	607a      	str	r2, [r7, #4]
 8008ffa:	603b      	str	r3, [r7, #0]
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	73fb      	strb	r3, [r7, #15]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009000:	7bfb      	ldrb	r3, [r7, #15]
 8009002:	4a0a      	ldr	r2, [pc, #40]	; (800902c <disk_write+0x3c>)
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	68dc      	ldr	r4, [r3, #12]
 800900c:	7bfb      	ldrb	r3, [r7, #15]
 800900e:	4a07      	ldr	r2, [pc, #28]	; (800902c <disk_write+0x3c>)
 8009010:	4413      	add	r3, r2
 8009012:	7a18      	ldrb	r0, [r3, #8]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	68b9      	ldr	r1, [r7, #8]
 800901a:	47a0      	blx	r4
 800901c:	4603      	mov	r3, r0
 800901e:	75fb      	strb	r3, [r7, #23]
	  return res;
 8009020:	7dfb      	ldrb	r3, [r7, #23]

}
 8009022:	4618      	mov	r0, r3
 8009024:	371c      	adds	r7, #28
 8009026:	46bd      	mov	sp, r7
 8009028:	bd90      	pop	{r4, r7, pc}
 800902a:	bf00      	nop
 800902c:	240011ac 	.word	0x240011ac

08009030 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	603a      	str	r2, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
 800903c:	460b      	mov	r3, r1
 800903e:	71bb      	strb	r3, [r7, #6]
	  DRESULT res;

	  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009040:	79fb      	ldrb	r3, [r7, #7]
 8009042:	4a09      	ldr	r2, [pc, #36]	; (8009068 <disk_ioctl+0x38>)
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	79fa      	ldrb	r2, [r7, #7]
 800904e:	4906      	ldr	r1, [pc, #24]	; (8009068 <disk_ioctl+0x38>)
 8009050:	440a      	add	r2, r1
 8009052:	7a10      	ldrb	r0, [r2, #8]
 8009054:	79b9      	ldrb	r1, [r7, #6]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	4798      	blx	r3
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]
	  return res;
 800905e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3710      	adds	r7, #16
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	240011ac 	.word	0x240011ac

0800906c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3301      	adds	r3, #1
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800907c:	89fb      	ldrh	r3, [r7, #14]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	b21a      	sxth	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	b21b      	sxth	r3, r3
 8009088:	4313      	orrs	r3, r2
 800908a:	b21b      	sxth	r3, r3
 800908c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800908e:	89fb      	ldrh	r3, [r7, #14]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3303      	adds	r3, #3
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	3202      	adds	r2, #2
 80090b4:	7812      	ldrb	r2, [r2, #0]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	021b      	lsls	r3, r3, #8
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	3201      	adds	r2, #1
 80090c2:	7812      	ldrb	r2, [r2, #0]
 80090c4:	4313      	orrs	r3, r2
 80090c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7812      	ldrb	r2, [r2, #0]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	460b      	mov	r3, r1
 80090ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	607a      	str	r2, [r7, #4]
 80090f4:	887a      	ldrh	r2, [r7, #2]
 80090f6:	b2d2      	uxtb	r2, r2
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	887b      	ldrh	r3, [r7, #2]
 80090fc:	0a1b      	lsrs	r3, r3, #8
 80090fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	607a      	str	r2, [r7, #4]
 8009106:	887a      	ldrh	r2, [r7, #2]
 8009108:	b2d2      	uxtb	r2, r2
 800910a:	701a      	strb	r2, [r3, #0]
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	607a      	str	r2, [r7, #4]
 8009128:	683a      	ldr	r2, [r7, #0]
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	701a      	strb	r2, [r3, #0]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	0a1b      	lsrs	r3, r3, #8
 8009132:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	1c5a      	adds	r2, r3, #1
 8009138:	607a      	str	r2, [r7, #4]
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	b2d2      	uxtb	r2, r2
 800913e:	701a      	strb	r2, [r3, #0]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	0a1b      	lsrs	r3, r3, #8
 8009144:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	683a      	ldr	r2, [r7, #0]
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	0a1b      	lsrs	r3, r3, #8
 8009156:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	b2d2      	uxtb	r2, r2
 8009162:	701a      	strb	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 800917a:	2281      	movs	r2, #129	; 0x81
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	4293      	cmp	r3, r2
 8009180:	d30f      	bcc.n	80091a2 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8009182:	229f      	movs	r2, #159	; 0x9f
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	4293      	cmp	r3, r2
 8009188:	d801      	bhi.n	800918e <dbc_1st+0x1e>
 800918a:	2301      	movs	r3, #1
 800918c:	e00a      	b.n	80091a4 <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 800918e:	22e0      	movs	r2, #224	; 0xe0
 8009190:	79fb      	ldrb	r3, [r7, #7]
 8009192:	4293      	cmp	r3, r2
 8009194:	d305      	bcc.n	80091a2 <dbc_1st+0x32>
 8009196:	22fc      	movs	r2, #252	; 0xfc
 8009198:	79fb      	ldrb	r3, [r7, #7]
 800919a:	4293      	cmp	r3, r2
 800919c:	d801      	bhi.n	80091a2 <dbc_1st+0x32>
 800919e:	2301      	movs	r3, #1
 80091a0:	e000      	b.n	80091a4 <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 80091ba:	2240      	movs	r2, #64	; 0x40
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	4293      	cmp	r3, r2
 80091c0:	d319      	bcc.n	80091f6 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 80091c2:	227e      	movs	r2, #126	; 0x7e
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d801      	bhi.n	80091ce <dbc_2nd+0x1e>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e014      	b.n	80091f8 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 80091ce:	2280      	movs	r2, #128	; 0x80
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d305      	bcc.n	80091e2 <dbc_2nd+0x32>
 80091d6:	22fc      	movs	r2, #252	; 0xfc
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	4293      	cmp	r3, r2
 80091dc:	d801      	bhi.n	80091e2 <dbc_2nd+0x32>
 80091de:	2301      	movs	r3, #1
 80091e0:	e00a      	b.n	80091f8 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 80091e2:	2200      	movs	r2, #0
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d305      	bcc.n	80091f6 <dbc_2nd+0x46>
 80091ea:	2200      	movs	r2, #0
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d801      	bhi.n	80091f6 <dbc_2nd+0x46>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	791b      	ldrb	r3, [r3, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d02c      	beq.n	8009272 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	7858      	ldrb	r0, [r3, #1]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	2301      	movs	r3, #1
 8009228:	f7ff fee2 	bl	8008ff0 <disk_write>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d11d      	bne.n	800926e <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	1ad2      	subs	r2, r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	429a      	cmp	r2, r3
 8009248:	d213      	bcs.n	8009272 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	78db      	ldrb	r3, [r3, #3]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d10f      	bne.n	8009272 <sync_window+0x6e>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7858      	ldrb	r0, [r3, #1]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	441a      	add	r2, r3
 8009266:	2301      	movs	r3, #1
 8009268:	f7ff fec2 	bl	8008ff0 <disk_write>
 800926c:	e001      	b.n	8009272 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800926e:	2301      	movs	r3, #1
 8009270:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 8009272:	7bfb      	ldrb	r3, [r7, #15]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	683a      	ldr	r2, [r7, #0]
 8009290:	429a      	cmp	r2, r3
 8009292:	d01b      	beq.n	80092cc <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff ffb5 	bl	8009204 <sync_window>
 800929a:	4603      	mov	r3, r0
 800929c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d113      	bne.n	80092cc <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7858      	ldrb	r0, [r3, #1]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80092ae:	2301      	movs	r3, #1
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	f7ff fe7d 	bl	8008fb0 <disk_read>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d004      	beq.n	80092c6 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 80092bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092c0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7ff ff8f 	bl	8009204 <sync_window>
 80092e6:	4603      	mov	r3, r0
 80092e8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80092ea:	7bfb      	ldrb	r3, [r7, #15]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d158      	bne.n	80093a2 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	2b03      	cmp	r3, #3
 80092f6:	d148      	bne.n	800938a <sync_fs+0xb2>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	795b      	ldrb	r3, [r3, #5]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d144      	bne.n	800938a <sync_fs+0xb2>
			/* Create FSInfo structure */
			memset(fs->win, 0, sizeof fs->win);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3330      	adds	r3, #48	; 0x30
 8009304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009308:	2100      	movs	r1, #0
 800930a:	4618      	mov	r0, r3
 800930c:	f005 fa15 	bl	800e73a <memset>
			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	3330      	adds	r3, #48	; 0x30
 8009314:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009318:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff fee0 	bl	80090e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	3330      	adds	r3, #48	; 0x30
 8009326:	4921      	ldr	r1, [pc, #132]	; (80093ac <sync_fs+0xd4>)
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fef5 	bl	8009118 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3330      	adds	r3, #48	; 0x30
 8009332:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009336:	491e      	ldr	r1, [pc, #120]	; (80093b0 <sync_fs+0xd8>)
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff feed 	bl	8009118 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	3330      	adds	r3, #48	; 0x30
 8009342:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7ff fee3 	bl	8009118 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3330      	adds	r3, #48	; 0x30
 8009356:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	4619      	mov	r1, r3
 8009360:	4610      	mov	r0, r2
 8009362:	f7ff fed9 	bl	8009118 <st_dword>
			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	69db      	ldr	r3, [r3, #28]
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	7858      	ldrb	r0, [r3, #1]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937e:	2301      	movs	r3, #1
 8009380:	f7ff fe36 	bl	8008ff0 <disk_write>
			fs->fsi_flag = 0;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	785b      	ldrb	r3, [r3, #1]
 800938e:	2200      	movs	r2, #0
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff fe4c 	bl	8009030 <disk_ioctl>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <sync_fs+0xca>
 800939e:	2301      	movs	r3, #1
 80093a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3710      	adds	r7, #16
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	41615252 	.word	0x41615252
 80093b0:	61417272 	.word	0x61417272

080093b4 <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	3b02      	subs	r3, #2
 80093c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	3b02      	subs	r3, #2
 80093ca:	683a      	ldr	r2, [r7, #0]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d301      	bcc.n	80093d4 <clst2sect+0x20>
 80093d0:	2300      	movs	r3, #0
 80093d2:	e008      	b.n	80093e6 <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	895b      	ldrh	r3, [r3, #10]
 80093dc:	4619      	mov	r1, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	fb01 f303 	mul.w	r3, r1, r3
 80093e4:	4413      	add	r3, r2
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b086      	sub	sp, #24
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d904      	bls.n	8009412 <get_fat+0x20>
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d302      	bcc.n	8009418 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009412:	2301      	movs	r3, #1
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e08f      	b.n	8009538 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800941c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b03      	cmp	r3, #3
 8009424:	d062      	beq.n	80094ec <get_fat+0xfa>
 8009426:	2b03      	cmp	r3, #3
 8009428:	dc7c      	bgt.n	8009524 <get_fat+0x132>
 800942a:	2b01      	cmp	r3, #1
 800942c:	d002      	beq.n	8009434 <get_fat+0x42>
 800942e:	2b02      	cmp	r3, #2
 8009430:	d042      	beq.n	80094b8 <get_fat+0xc6>
 8009432:	e077      	b.n	8009524 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	085b      	lsrs	r3, r3, #1
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	4413      	add	r3, r2
 8009440:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	6a1a      	ldr	r2, [r3, #32]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	0a5b      	lsrs	r3, r3, #9
 800944a:	4413      	add	r3, r2
 800944c:	4619      	mov	r1, r3
 800944e:	6938      	ldr	r0, [r7, #16]
 8009450:	f7ff ff14 	bl	800927c <move_window>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d167      	bne.n	800952a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	60fa      	str	r2, [r7, #12]
 8009460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009464:	693a      	ldr	r2, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800946c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	6a1a      	ldr	r2, [r3, #32]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	0a5b      	lsrs	r3, r3, #9
 8009476:	4413      	add	r3, r2
 8009478:	4619      	mov	r1, r3
 800947a:	6938      	ldr	r0, [r7, #16]
 800947c:	f7ff fefe 	bl	800927c <move_window>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d153      	bne.n	800952e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	4413      	add	r3, r2
 8009490:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009494:	021b      	lsls	r3, r3, #8
 8009496:	461a      	mov	r2, r3
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	4313      	orrs	r3, r2
 800949c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d002      	beq.n	80094ae <get_fat+0xbc>
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	091b      	lsrs	r3, r3, #4
 80094ac:	e002      	b.n	80094b4 <get_fat+0xc2>
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094b4:	617b      	str	r3, [r7, #20]
			break;
 80094b6:	e03f      	b.n	8009538 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	6a1a      	ldr	r2, [r3, #32]
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	0a1b      	lsrs	r3, r3, #8
 80094c0:	4413      	add	r3, r2
 80094c2:	4619      	mov	r1, r3
 80094c4:	6938      	ldr	r0, [r7, #16]
 80094c6:	f7ff fed9 	bl	800927c <move_window>
 80094ca:	4603      	mov	r3, r0
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d130      	bne.n	8009532 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	005b      	lsls	r3, r3, #1
 80094da:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80094de:	4413      	add	r3, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff fdc3 	bl	800906c <ld_word>
 80094e6:	4603      	mov	r3, r0
 80094e8:	617b      	str	r3, [r7, #20]
			break;
 80094ea:	e025      	b.n	8009538 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	6a1a      	ldr	r2, [r3, #32]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	09db      	lsrs	r3, r3, #7
 80094f4:	4413      	add	r3, r2
 80094f6:	4619      	mov	r1, r3
 80094f8:	6938      	ldr	r0, [r7, #16]
 80094fa:	f7ff febf 	bl	800927c <move_window>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d118      	bne.n	8009536 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009512:	4413      	add	r3, r2
 8009514:	4618      	mov	r0, r3
 8009516:	f7ff fdc1 	bl	800909c <ld_dword>
 800951a:	4603      	mov	r3, r0
 800951c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009520:	617b      	str	r3, [r7, #20]
			break;
 8009522:	e009      	b.n	8009538 <get_fat+0x146>
			}
			val = 1;	/* Internal error */
			break;
#endif
		default:
			val = 1;	/* Internal error */
 8009524:	2301      	movs	r3, #1
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e006      	b.n	8009538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800952a:	bf00      	nop
 800952c:	e004      	b.n	8009538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800952e:	bf00      	nop
 8009530:	e002      	b.n	8009538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009532:	bf00      	nop
 8009534:	e000      	b.n	8009538 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009536:	bf00      	nop
		}
	}

	return val;
 8009538:	697b      	ldr	r3, [r7, #20]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009542:	b590      	push	{r4, r7, lr}
 8009544:	b089      	sub	sp, #36	; 0x24
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	60b9      	str	r1, [r7, #8]
 800954c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800954e:	2302      	movs	r3, #2
 8009550:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b01      	cmp	r3, #1
 8009556:	f240 80d2 	bls.w	80096fe <put_fat+0x1bc>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	429a      	cmp	r2, r3
 8009562:	f080 80cc 	bcs.w	80096fe <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	2b03      	cmp	r3, #3
 800956c:	f000 8096 	beq.w	800969c <put_fat+0x15a>
 8009570:	2b03      	cmp	r3, #3
 8009572:	f300 80cd 	bgt.w	8009710 <put_fat+0x1ce>
 8009576:	2b01      	cmp	r3, #1
 8009578:	d002      	beq.n	8009580 <put_fat+0x3e>
 800957a:	2b02      	cmp	r3, #2
 800957c:	d06e      	beq.n	800965c <put_fat+0x11a>
 800957e:	e0c7      	b.n	8009710 <put_fat+0x1ce>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	61bb      	str	r3, [r7, #24]
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	085b      	lsrs	r3, r3, #1
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	4413      	add	r3, r2
 800958c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6a1a      	ldr	r2, [r3, #32]
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	0a5b      	lsrs	r3, r3, #9
 8009596:	4413      	add	r3, r2
 8009598:	4619      	mov	r1, r3
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff fe6e 	bl	800927c <move_window>
 80095a0:	4603      	mov	r3, r0
 80095a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095a4:	7ffb      	ldrb	r3, [r7, #31]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f040 80ab 	bne.w	8009702 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	1c59      	adds	r1, r3, #1
 80095b6:	61b9      	str	r1, [r7, #24]
 80095b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095bc:	4413      	add	r3, r2
 80095be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00d      	beq.n	80095e6 <put_fat+0xa4>
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	b25b      	sxtb	r3, r3
 80095d0:	f003 030f 	and.w	r3, r3, #15
 80095d4:	b25a      	sxtb	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	b25b      	sxtb	r3, r3
 80095de:	4313      	orrs	r3, r2
 80095e0:	b25b      	sxtb	r3, r3
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	e001      	b.n	80095ea <put_fat+0xa8>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2201      	movs	r2, #1
 80095f2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6a1a      	ldr	r2, [r3, #32]
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	0a5b      	lsrs	r3, r3, #9
 80095fc:	4413      	add	r3, r2
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fe3b 	bl	800927c <move_window>
 8009606:	4603      	mov	r3, r0
 8009608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800960a:	7ffb      	ldrb	r3, [r7, #31]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d17a      	bne.n	8009706 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961c:	4413      	add	r3, r2
 800961e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b00      	cmp	r3, #0
 8009628:	d003      	beq.n	8009632 <put_fat+0xf0>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	091b      	lsrs	r3, r3, #4
 800962e:	b2db      	uxtb	r3, r3
 8009630:	e00e      	b.n	8009650 <put_fat+0x10e>
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	b25b      	sxtb	r3, r3
 8009638:	f023 030f 	bic.w	r3, r3, #15
 800963c:	b25a      	sxtb	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	0a1b      	lsrs	r3, r3, #8
 8009642:	b25b      	sxtb	r3, r3
 8009644:	f003 030f 	and.w	r3, r3, #15
 8009648:	b25b      	sxtb	r3, r3
 800964a:	4313      	orrs	r3, r2
 800964c:	b25b      	sxtb	r3, r3
 800964e:	b2db      	uxtb	r3, r3
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	711a      	strb	r2, [r3, #4]
			break;
 800965a:	e059      	b.n	8009710 <put_fat+0x1ce>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6a1a      	ldr	r2, [r3, #32]
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	4413      	add	r3, r2
 8009666:	4619      	mov	r1, r3
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f7ff fe07 	bl	800927c <move_window>
 800966e:	4603      	mov	r3, r0
 8009670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009672:	7ffb      	ldrb	r3, [r7, #31]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d148      	bne.n	800970a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009686:	4413      	add	r3, r2
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	b292      	uxth	r2, r2
 800968c:	4611      	mov	r1, r2
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff fd27 	bl	80090e2 <st_word>
			fs->wflag = 1;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	711a      	strb	r2, [r3, #4]
			break;
 800969a:	e039      	b.n	8009710 <put_fat+0x1ce>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	6a1a      	ldr	r2, [r3, #32]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	09db      	lsrs	r3, r3, #7
 80096a4:	4413      	add	r3, r2
 80096a6:	4619      	mov	r1, r3
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff fde7 	bl	800927c <move_window>
 80096ae:	4603      	mov	r3, r0
 80096b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096b2:	7ffb      	ldrb	r3, [r7, #31]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d12a      	bne.n	800970e <put_fat+0x1cc>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096cc:	4413      	add	r3, r2
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fce4 	bl	800909c <ld_dword>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096da:	4323      	orrs	r3, r4
 80096dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80096ec:	4413      	add	r3, r2
 80096ee:	6879      	ldr	r1, [r7, #4]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff fd11 	bl	8009118 <st_dword>
			fs->wflag = 1;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2201      	movs	r2, #1
 80096fa:	711a      	strb	r2, [r3, #4]
			break;
 80096fc:	e008      	b.n	8009710 <put_fat+0x1ce>
		}
	}
 80096fe:	bf00      	nop
 8009700:	e006      	b.n	8009710 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009702:	bf00      	nop
 8009704:	e004      	b.n	8009710 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009706:	bf00      	nop
 8009708:	e002      	b.n	8009710 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800970a:	bf00      	nop
 800970c:	e000      	b.n	8009710 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800970e:	bf00      	nop
	return res;
 8009710:	7ffb      	ldrb	r3, [r7, #31]
}
 8009712:	4618      	mov	r0, r3
 8009714:	3724      	adds	r7, #36	; 0x24
 8009716:	46bd      	mov	sp, r7
 8009718:	bd90      	pop	{r4, r7, pc}

0800971a <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b088      	sub	sp, #32
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	2b01      	cmp	r3, #1
 8009734:	d904      	bls.n	8009740 <remove_chain+0x26>
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	429a      	cmp	r2, r3
 800973e:	d301      	bcc.n	8009744 <remove_chain+0x2a>
 8009740:	2302      	movs	r3, #2
 8009742:	e04b      	b.n	80097dc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00c      	beq.n	8009764 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800974a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	69b8      	ldr	r0, [r7, #24]
 8009752:	f7ff fef6 	bl	8009542 <put_fat>
 8009756:	4603      	mov	r3, r0
 8009758:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800975a:	7ffb      	ldrb	r3, [r7, #31]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <remove_chain+0x4a>
 8009760:	7ffb      	ldrb	r3, [r7, #31]
 8009762:	e03b      	b.n	80097dc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009764:	68b9      	ldr	r1, [r7, #8]
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f7ff fe43 	bl	80093f2 <get_fat>
 800976c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d031      	beq.n	80097d8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d101      	bne.n	800977e <remove_chain+0x64>
 800977a:	2302      	movs	r3, #2
 800977c:	e02e      	b.n	80097dc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009784:	d101      	bne.n	800978a <remove_chain+0x70>
 8009786:	2301      	movs	r3, #1
 8009788:	e028      	b.n	80097dc <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800978a:	2200      	movs	r2, #0
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	69b8      	ldr	r0, [r7, #24]
 8009790:	f7ff fed7 	bl	8009542 <put_fat>
 8009794:	4603      	mov	r3, r0
 8009796:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009798:	7ffb      	ldrb	r3, [r7, #31]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <remove_chain+0x88>
 800979e:	7ffb      	ldrb	r3, [r7, #31]
 80097a0:	e01c      	b.n	80097dc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	691a      	ldr	r2, [r3, #16]
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	3b02      	subs	r3, #2
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d20b      	bcs.n	80097c8 <remove_chain+0xae>
			fs->free_clst++;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	1c5a      	adds	r2, r3, #1
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	795b      	ldrb	r3, [r3, #5]
 80097be:	f043 0301 	orr.w	r3, r3, #1
 80097c2:	b2da      	uxtb	r2, r3
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	715a      	strb	r2, [r3, #5]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	695b      	ldr	r3, [r3, #20]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d3c6      	bcc.n	8009764 <remove_chain+0x4a>
 80097d6:	e000      	b.n	80097da <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80097d8:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3720      	adds	r7, #32
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b088      	sub	sp, #32
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d10d      	bne.n	8009816 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <create_chain+0x2c>
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	429a      	cmp	r2, r3
 800980e:	d31b      	bcc.n	8009848 <create_chain+0x64>
 8009810:	2301      	movs	r3, #1
 8009812:	61bb      	str	r3, [r7, #24]
 8009814:	e018      	b.n	8009848 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff fdea 	bl	80093f2 <get_fat>
 800981e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d801      	bhi.n	800982a <create_chain+0x46>
 8009826:	2301      	movs	r3, #1
 8009828:	e0a9      	b.n	800997e <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009830:	d101      	bne.n	8009836 <create_chain+0x52>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	e0a3      	b.n	800997e <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	429a      	cmp	r2, r3
 800983e:	d201      	bcs.n	8009844 <create_chain+0x60>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	e09c      	b.n	800997e <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d101      	bne.n	8009854 <create_chain+0x70>
 8009850:	2300      	movs	r3, #0
 8009852:	e094      	b.n	800997e <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8009858:	69ba      	ldr	r2, [r7, #24]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	d129      	bne.n	80098b4 <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	3301      	adds	r3, #1
 8009864:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	69fa      	ldr	r2, [r7, #28]
 800986c:	429a      	cmp	r2, r3
 800986e:	d301      	bcc.n	8009874 <create_chain+0x90>
 8009870:	2302      	movs	r3, #2
 8009872:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8009874:	69f9      	ldr	r1, [r7, #28]
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f7ff fdbb 	bl	80093f2 <get_fat>
 800987c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d003      	beq.n	800988c <create_chain+0xa8>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800988a:	d101      	bne.n	8009890 <create_chain+0xac>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	e076      	b.n	800997e <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00e      	beq.n	80098b4 <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d906      	bls.n	80098b0 <create_chain+0xcc>
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	695b      	ldr	r3, [r3, #20]
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d201      	bcs.n	80098b0 <create_chain+0xcc>
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d129      	bne.n	800990e <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	3301      	adds	r3, #1
 80098c2:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	69fa      	ldr	r2, [r7, #28]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d307      	bcc.n	80098de <create_chain+0xfa>
					ncl = 2;
 80098ce:	2302      	movs	r3, #2
 80098d0:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80098d2:	69fa      	ldr	r2, [r7, #28]
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d901      	bls.n	80098de <create_chain+0xfa>
 80098da:	2300      	movs	r3, #0
 80098dc:	e04f      	b.n	800997e <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80098de:	69f9      	ldr	r1, [r7, #28]
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7ff fd86 	bl	80093f2 <get_fat>
 80098e6:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d00e      	beq.n	800990c <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d003      	beq.n	80098fc <create_chain+0x118>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098fa:	d101      	bne.n	8009900 <create_chain+0x11c>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	e03e      	b.n	800997e <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8009900:	69fa      	ldr	r2, [r7, #28]
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	429a      	cmp	r2, r3
 8009906:	d1da      	bne.n	80098be <create_chain+0xda>
 8009908:	2300      	movs	r3, #0
 800990a:	e038      	b.n	800997e <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 800990c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800990e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009912:	69f9      	ldr	r1, [r7, #28]
 8009914:	6938      	ldr	r0, [r7, #16]
 8009916:	f7ff fe14 	bl	8009542 <put_fat>
 800991a:	4603      	mov	r3, r0
 800991c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <create_chain+0x154>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d006      	beq.n	8009938 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	6839      	ldr	r1, [r7, #0]
 800992e:	6938      	ldr	r0, [r7, #16]
 8009930:	f7ff fe07 	bl	8009542 <put_fat>
 8009934:	4603      	mov	r3, r0
 8009936:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009938:	7dfb      	ldrb	r3, [r7, #23]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d116      	bne.n	800996c <create_chain+0x188>
		fs->last_clst = ncl;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	69fa      	ldr	r2, [r7, #28]
 8009942:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	691a      	ldr	r2, [r3, #16]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	695b      	ldr	r3, [r3, #20]
 800994c:	3b02      	subs	r3, #2
 800994e:	429a      	cmp	r2, r3
 8009950:	d804      	bhi.n	800995c <create_chain+0x178>
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	1e5a      	subs	r2, r3, #1
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	795b      	ldrb	r3, [r3, #5]
 8009960:	f043 0301 	orr.w	r3, r3, #1
 8009964:	b2da      	uxtb	r2, r3
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	715a      	strb	r2, [r3, #5]
 800996a:	e007      	b.n	800997c <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d102      	bne.n	8009978 <create_chain+0x194>
 8009972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009976:	e000      	b.n	800997a <create_chain+0x196>
 8009978:	2301      	movs	r3, #1
 800997a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800997c:	69fb      	ldr	r3, [r7, #28]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff fc37 	bl	8009204 <sync_window>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <dir_clear+0x1a>
 800999c:	2301      	movs	r3, #1
 800999e:	e036      	b.n	8009a0e <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80099a0:	6839      	ldr	r1, [r7, #0]
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff fd06 	bl	80093b4 <clst2sect>
 80099a8:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	62da      	str	r2, [r3, #44]	; 0x2c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3330      	adds	r3, #48	; 0x30
 80099b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f004 febd 	bl	800e73a <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3330      	adds	r3, #48	; 0x30
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	2301      	movs	r3, #1
 80099c8:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80099ca:	2300      	movs	r3, #0
 80099cc:	617b      	str	r3, [r7, #20]
 80099ce:	e003      	b.n	80099d8 <dir_clear+0x52>
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	4413      	add	r3, r2
 80099d6:	617b      	str	r3, [r7, #20]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	895b      	ldrh	r3, [r3, #10]
 80099dc:	461a      	mov	r2, r3
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d20b      	bcs.n	80099fc <dir_clear+0x76>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7858      	ldrb	r0, [r3, #1]
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	441a      	add	r2, r3
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	68f9      	ldr	r1, [r7, #12]
 80099f2:	f7ff fafd 	bl	8008ff0 <disk_write>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0e9      	beq.n	80099d0 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	895b      	ldrh	r3, [r3, #10]
 8009a00:	461a      	mov	r2, r3
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bf14      	ite	ne
 8009a08:	2301      	movne	r3, #1
 8009a0a:	2300      	moveq	r3, #0
 8009a0c:	b2db      	uxtb	r3, r3
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b086      	sub	sp, #24
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a2c:	d204      	bcs.n	8009a38 <dir_sdi+0x22>
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	f003 031f 	and.w	r3, r3, #31
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009a38:	2302      	movs	r3, #2
 8009a3a:	e063      	b.n	8009b04 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <dir_sdi+0x46>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d902      	bls.n	8009a5c <dir_sdi+0x46>
		clst = (DWORD)fs->dirbase;
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10c      	bne.n	8009a7c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	095b      	lsrs	r3, r3, #5
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	8912      	ldrh	r2, [r2, #8]
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d301      	bcc.n	8009a72 <dir_sdi+0x5c>
 8009a6e:	2302      	movs	r3, #2
 8009a70:	e048      	b.n	8009b04 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	619a      	str	r2, [r3, #24]
 8009a7a:	e029      	b.n	8009ad0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	895b      	ldrh	r3, [r3, #10]
 8009a80:	025b      	lsls	r3, r3, #9
 8009a82:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a84:	e019      	b.n	8009aba <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6979      	ldr	r1, [r7, #20]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff fcb1 	bl	80093f2 <get_fat>
 8009a90:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a98:	d101      	bne.n	8009a9e <dir_sdi+0x88>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e032      	b.n	8009b04 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d904      	bls.n	8009aae <dir_sdi+0x98>
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d301      	bcc.n	8009ab2 <dir_sdi+0x9c>
 8009aae:	2302      	movs	r3, #2
 8009ab0:	e028      	b.n	8009b04 <dir_sdi+0xee>
			ofs -= csz;
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d2e1      	bcs.n	8009a86 <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 8009ac2:	6979      	ldr	r1, [r7, #20]
 8009ac4:	6938      	ldr	r0, [r7, #16]
 8009ac6:	f7ff fc75 	bl	80093b4 <clst2sect>
 8009aca:	4602      	mov	r2, r0
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <dir_sdi+0xcc>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e010      	b.n	8009b04 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699a      	ldr	r2, [r3, #24]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	0a5b      	lsrs	r3, r3, #9
 8009aea:	441a      	add	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009afc:	441a      	add	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b086      	sub	sp, #24
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	691b      	ldr	r3, [r3, #16]
 8009b20:	3320      	adds	r3, #32
 8009b22:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b2a:	d302      	bcc.n	8009b32 <dir_next+0x26>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <dir_next+0x32>
 8009b3a:	2304      	movs	r3, #4
 8009b3c:	e078      	b.n	8009c30 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d166      	bne.n	8009c16 <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	699b      	ldr	r3, [r3, #24]
 8009b4c:	1c5a      	adds	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	695b      	ldr	r3, [r3, #20]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10a      	bne.n	8009b70 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	095b      	lsrs	r3, r3, #5
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	8912      	ldrh	r2, [r2, #8]
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d357      	bcc.n	8009c16 <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	619a      	str	r2, [r3, #24]
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	e05f      	b.n	8009c30 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	0a5b      	lsrs	r3, r3, #9
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	8952      	ldrh	r2, [r2, #10]
 8009b78:	3a01      	subs	r2, #1
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d14a      	bne.n	8009c16 <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	4619      	mov	r1, r3
 8009b88:	4610      	mov	r0, r2
 8009b8a:	f7ff fc32 	bl	80093f2 <get_fat>
 8009b8e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d801      	bhi.n	8009b9a <dir_next+0x8e>
 8009b96:	2302      	movs	r3, #2
 8009b98:	e04a      	b.n	8009c30 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ba0:	d101      	bne.n	8009ba6 <dir_next+0x9a>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e044      	b.n	8009c30 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	695b      	ldr	r3, [r3, #20]
 8009baa:	697a      	ldr	r2, [r7, #20]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d328      	bcc.n	8009c02 <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d104      	bne.n	8009bc0 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	619a      	str	r2, [r3, #24]
 8009bbc:	2304      	movs	r3, #4
 8009bbe:	e037      	b.n	8009c30 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7ff fe0b 	bl	80097e4 <create_chain>
 8009bce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d101      	bne.n	8009bda <dir_next+0xce>
 8009bd6:	2307      	movs	r3, #7
 8009bd8:	e02a      	b.n	8009c30 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d101      	bne.n	8009be4 <dir_next+0xd8>
 8009be0:	2302      	movs	r3, #2
 8009be2:	e025      	b.n	8009c30 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bea:	d101      	bne.n	8009bf0 <dir_next+0xe4>
 8009bec:	2301      	movs	r3, #1
 8009bee:	e01f      	b.n	8009c30 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8009bf0:	6979      	ldr	r1, [r7, #20]
 8009bf2:	6938      	ldr	r0, [r7, #16]
 8009bf4:	f7ff fec7 	bl	8009986 <dir_clear>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d001      	beq.n	8009c02 <dir_next+0xf6>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e016      	b.n	8009c30 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8009c08:	6979      	ldr	r1, [r7, #20]
 8009c0a:	6938      	ldr	r0, [r7, #16]
 8009c0c:	f7ff fbd2 	bl	80093b4 <clst2sect>
 8009c10:	4602      	mov	r2, r0
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c28:	441a      	add	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009c48:	2100      	movs	r1, #0
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f7ff fee3 	bl	8009a16 <dir_sdi>
 8009c50:	4603      	mov	r3, r0
 8009c52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c54:	7dfb      	ldrb	r3, [r7, #23]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d12b      	bne.n	8009cb2 <dir_alloc+0x7a>
		n = 0;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	4619      	mov	r1, r3
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	f7ff fb09 	bl	800927c <move_window>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d11d      	bne.n	8009cb0 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	2be5      	cmp	r3, #229	; 0xe5
 8009c7c:	d004      	beq.n	8009c88 <dir_alloc+0x50>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	69db      	ldr	r3, [r3, #28]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d107      	bne.n	8009c98 <dir_alloc+0x60>
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	613b      	str	r3, [r7, #16]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d102      	bne.n	8009c9c <dir_alloc+0x64>
 8009c96:	e00c      	b.n	8009cb2 <dir_alloc+0x7a>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 8009c98:	2300      	movs	r3, #0
 8009c9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7ff ff34 	bl	8009b0c <dir_next>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d0d7      	beq.n	8009c5e <dir_alloc+0x26>
 8009cae:	e000      	b.n	8009cb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009cb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	2b04      	cmp	r3, #4
 8009cb6:	d101      	bne.n	8009cbc <dir_alloc+0x84>
 8009cb8:	2307      	movs	r3, #7
 8009cba:	75fb      	strb	r3, [r7, #23]
	return res;
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b084      	sub	sp, #16
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	331a      	adds	r3, #26
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7ff f9c9 	bl	800906c <ld_word>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2b03      	cmp	r3, #3
 8009ce4:	d109      	bne.n	8009cfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	3314      	adds	r3, #20
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff f9be 	bl	800906c <ld_word>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	041b      	lsls	r3, r3, #16
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3710      	adds	r7, #16
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	331a      	adds	r3, #26
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	b292      	uxth	r2, r2
 8009d18:	4611      	mov	r1, r2
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff f9e1 	bl	80090e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b03      	cmp	r3, #3
 8009d26:	d109      	bne.n	8009d3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	f103 0214 	add.w	r2, r3, #20
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	0c1b      	lsrs	r3, r3, #16
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	4619      	mov	r1, r3
 8009d36:	4610      	mov	r0, r2
 8009d38:	f7ff f9d3 	bl	80090e2 <st_word>
	}
}
 8009d3c:	bf00      	nop
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b086      	sub	sp, #24
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009d52:	2100      	movs	r1, #0
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff fe5e 	bl	8009a16 <dir_sdi>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <dir_find+0x24>
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	e03e      	b.n	8009de6 <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6938      	ldr	r0, [r7, #16]
 8009d70:	f7ff fa84 	bl	800927c <move_window>
 8009d74:	4603      	mov	r3, r0
 8009d76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d12f      	bne.n	8009dde <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009d86:	7bfb      	ldrb	r3, [r7, #15]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <dir_find+0x4e>
 8009d8c:	2304      	movs	r3, #4
 8009d8e:	75fb      	strb	r3, [r7, #23]
 8009d90:	e028      	b.n	8009de4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	330b      	adds	r3, #11
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	330b      	adds	r3, #11
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	f003 0308 	and.w	r3, r3, #8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d10a      	bne.n	8009dca <dir_find+0x86>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	69d8      	ldr	r0, [r3, #28]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	3320      	adds	r3, #32
 8009dbc:	220b      	movs	r2, #11
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	f004 fc83 	bl	800e6ca <memcmp>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00b      	beq.n	8009de2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009dca:	2100      	movs	r1, #0
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f7ff fe9d 	bl	8009b0c <dir_next>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d0c5      	beq.n	8009d68 <dir_find+0x24>
 8009ddc:	e002      	b.n	8009de4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009dde:	bf00      	nop
 8009de0:	e000      	b.n	8009de4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009de2:	bf00      	nop

	return res;
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3718      	adds	r7, #24
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --n_ent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009dfc:	2101      	movs	r1, #1
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f7ff ff1a 	bl	8009c38 <dir_alloc>
 8009e04:	4603      	mov	r3, r0
 8009e06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d11c      	bne.n	8009e48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	699b      	ldr	r3, [r3, #24]
 8009e12:	4619      	mov	r1, r3
 8009e14:	68b8      	ldr	r0, [r7, #8]
 8009e16:	f7ff fa31 	bl	800927c <move_window>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d111      	bne.n	8009e48 <dir_register+0x5a>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	69db      	ldr	r3, [r3, #28]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f004 fc84 	bl	800e73a <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	69d8      	ldr	r0, [r3, #28]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3320      	adds	r3, #32
 8009e3a:	220b      	movs	r2, #11
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	f004 fc54 	bl	800e6ea <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2201      	movs	r2, #1
 8009e46:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
	...

08009e54 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b08a      	sub	sp, #40	; 0x28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
	BYTE *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3320      	adds	r3, #32
 8009e68:	613b      	str	r3, [r7, #16]
	memset(sfn, ' ', 11);
 8009e6a:	220b      	movs	r2, #11
 8009e6c:	2120      	movs	r1, #32
 8009e6e:	6938      	ldr	r0, [r7, #16]
 8009e70:	f004 fc63 	bl	800e73a <memset>
	si = i = 0; ni = 8;
 8009e74:	2300      	movs	r3, #0
 8009e76:	61bb      	str	r3, [r7, #24]
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	61fb      	str	r3, [r7, #28]
 8009e7c:	2308      	movs	r3, #8
 8009e7e:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	61fa      	str	r2, [r7, #28]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	4413      	add	r3, r2
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e94:	2b20      	cmp	r3, #32
 8009e96:	d97c      	bls.n	8009f92 <create_name+0x13e>
		if (IsSeparator(c)) {			/* Break if a separator is found */
 8009e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e9e:	d007      	beq.n	8009eb0 <create_name+0x5c>
 8009ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ea6:	d110      	bne.n	8009eca <create_name+0x76>
			while (IsSeparator(p[si])) si++;	/* Skip duplicated separator if exist */
 8009ea8:	e002      	b.n	8009eb0 <create_name+0x5c>
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	3301      	adds	r3, #1
 8009eae:	61fb      	str	r3, [r7, #28]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	2b2f      	cmp	r3, #47	; 0x2f
 8009eba:	d0f6      	beq.n	8009eaa <create_name+0x56>
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ec6:	d0f0      	beq.n	8009eaa <create_name+0x56>
			break;
 8009ec8:	e064      	b.n	8009f94 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 8009eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ece:	2b2e      	cmp	r3, #46	; 0x2e
 8009ed0:	d003      	beq.n	8009eda <create_name+0x86>
 8009ed2:	69ba      	ldr	r2, [r7, #24]
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d30d      	bcc.n	8009ef6 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	2b0b      	cmp	r3, #11
 8009ede:	d003      	beq.n	8009ee8 <create_name+0x94>
 8009ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ee6:	d001      	beq.n	8009eec <create_name+0x98>
 8009ee8:	2306      	movs	r3, #6
 8009eea:	e075      	b.n	8009fd8 <create_name+0x184>
			i = 8; ni = 11;				/* Enter file extension field */
 8009eec:	2308      	movs	r3, #8
 8009eee:	61bb      	str	r3, [r7, #24]
 8009ef0:	230b      	movs	r3, #11
 8009ef2:	623b      	str	r3, [r7, #32]
			continue;
 8009ef4:	e04c      	b.n	8009f90 <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 8009ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff f938 	bl	8009170 <dbc_1st>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d024      	beq.n	8009f50 <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	1c5a      	adds	r2, r3, #1
 8009f0a:	61fa      	str	r2, [r7, #28]
 8009f0c:	697a      	ldr	r2, [r7, #20]
 8009f0e:	4413      	add	r3, r2
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff f94a 	bl	80091b0 <dbc_2nd>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d004      	beq.n	8009f2c <create_name+0xd8>
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d301      	bcc.n	8009f30 <create_name+0xdc>
 8009f2c:	2306      	movs	r3, #6
 8009f2e:	e053      	b.n	8009fd8 <create_name+0x184>
			sfn[i++] = c;
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	61ba      	str	r2, [r7, #24]
 8009f36:	693a      	ldr	r2, [r7, #16]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f3e:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	1c5a      	adds	r2, r3, #1
 8009f44:	61ba      	str	r2, [r7, #24]
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4413      	add	r3, r2
 8009f4a:	7bfa      	ldrb	r2, [r7, #15]
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	e797      	b.n	8009e80 <create_name+0x2c>
		} else {						/* SBC */
			if (strchr("*+,:;<=>[]|\"\?\x7F", (int)c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f54:	4619      	mov	r1, r3
 8009f56:	4822      	ldr	r0, [pc, #136]	; (8009fe0 <create_name+0x18c>)
 8009f58:	f004 fdf7 	bl	800eb4a <strchr>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d001      	beq.n	8009f66 <create_name+0x112>
 8009f62:	2306      	movs	r3, #6
 8009f64:	e038      	b.n	8009fd8 <create_name+0x184>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f6a:	2b60      	cmp	r3, #96	; 0x60
 8009f6c:	d908      	bls.n	8009f80 <create_name+0x12c>
 8009f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f72:	2b7a      	cmp	r3, #122	; 0x7a
 8009f74:	d804      	bhi.n	8009f80 <create_name+0x12c>
 8009f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f7a:	3b20      	subs	r3, #32
 8009f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	1c5a      	adds	r2, r3, #1
 8009f84:	61ba      	str	r2, [r7, #24]
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009f8e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 8009f90:	e776      	b.n	8009e80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009f92:	bf00      	nop
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	441a      	add	r2, r3
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d101      	bne.n	8009fa8 <create_name+0x154>
 8009fa4:	2306      	movs	r3, #6
 8009fa6:	e017      	b.n	8009fd8 <create_name+0x184>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2be5      	cmp	r3, #229	; 0xe5
 8009fae:	d102      	bne.n	8009fb6 <create_name+0x162>
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2205      	movs	r2, #5
 8009fb4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */
 8009fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fba:	2b20      	cmp	r3, #32
 8009fbc:	d905      	bls.n	8009fca <create_name+0x176>
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	2b20      	cmp	r3, #32
 8009fc8:	d801      	bhi.n	8009fce <create_name+0x17a>
 8009fca:	2204      	movs	r2, #4
 8009fcc:	e000      	b.n	8009fd0 <create_name+0x17c>
 8009fce:	2200      	movs	r2, #0
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	330b      	adds	r3, #11
 8009fd4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009fd6:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3728      	adds	r7, #40	; 0x28
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	0800fbb8 	.word	0x0800fbb8

08009fe4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	613b      	str	r3, [r7, #16]
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8009ff4:	e002      	b.n	8009ffc <follow_path+0x18>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	603b      	str	r3, [r7, #0]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b2f      	cmp	r3, #47	; 0x2f
 800a002:	d0f8      	beq.n	8009ff6 <follow_path+0x12>
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b5c      	cmp	r3, #92	; 0x5c
 800a00a:	d0f4      	beq.n	8009ff6 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from the root directory */
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	2b1f      	cmp	r3, #31
 800a018:	d80a      	bhi.n	800a030 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2280      	movs	r2, #128	; 0x80
 800a01e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 800a022:	2100      	movs	r1, #0
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f7ff fcf6 	bl	8009a16 <dir_sdi>
 800a02a:	4603      	mov	r3, r0
 800a02c:	75fb      	strb	r3, [r7, #23]
 800a02e:	e043      	b.n	800a0b8 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a030:	463b      	mov	r3, r7
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7ff ff0d 	bl	8009e54 <create_name>
 800a03a:	4603      	mov	r3, r0
 800a03c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d134      	bne.n	800a0ae <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff fe7d 	bl	8009d44 <dir_find>
 800a04a:	4603      	mov	r3, r0
 800a04c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a054:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 800a056:	7dfb      	ldrb	r3, [r7, #23]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a05c:	7dfb      	ldrb	r3, [r7, #23]
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d127      	bne.n	800a0b2 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d122      	bne.n	800a0b2 <follow_path+0xce>
 800a06c:	2305      	movs	r3, #5
 800a06e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a070:	e01f      	b.n	800a0b2 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d11c      	bne.n	800a0b6 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	799b      	ldrb	r3, [r3, #6]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b00      	cmp	r3, #0
 800a086:	d102      	bne.n	800a08e <follow_path+0xaa>
				res = FR_NO_PATH; break;
 800a088:	2305      	movs	r3, #5
 800a08a:	75fb      	strb	r3, [r7, #23]
 800a08c:	e014      	b.n	800a0b8 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a09c:	4413      	add	r3, r2
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6938      	ldr	r0, [r7, #16]
 800a0a2:	f7ff fe10 	bl	8009cc6 <ld_clust>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a0ac:	e7c0      	b.n	800a030 <follow_path+0x4c>
			if (res != FR_OK) break;
 800a0ae:	bf00      	nop
 800a0b0:	e002      	b.n	800a0b8 <follow_path+0xd4>
				break;
 800a0b2:	bf00      	nop
 800a0b4:	e000      	b.n	800a0b8 <follow_path+0xd4>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 800a0b6:	bf00      	nop
			}
		}
	}

	return res;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 800a0c2:	b480      	push	{r7}
 800a0c4:	b089      	sub	sp, #36	; 0x24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp;
	const TCHAR *tt;
	TCHAR tc;
	int i;
	int vol = -1;
 800a0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0ce:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	613b      	str	r3, [r7, #16]
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d101      	bne.n	800a0e4 <get_ldnumber+0x22>
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	e02d      	b.n	800a140 <get_ldnumber+0x7e>
	do {					/* Find a colon in the path */
		tc = *tt++;
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	61fa      	str	r2, [r7, #28]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	73fb      	strb	r3, [r7, #15]
	} while (!IsTerminator(tc) && tc != ':');
 800a0ee:	7bfb      	ldrb	r3, [r7, #15]
 800a0f0:	2b20      	cmp	r3, #32
 800a0f2:	d902      	bls.n	800a0fa <get_ldnumber+0x38>
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b3a      	cmp	r3, #58	; 0x3a
 800a0f8:	d1f4      	bne.n	800a0e4 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 800a0fa:	7bfb      	ldrb	r3, [r7, #15]
 800a0fc:	2b3a      	cmp	r3, #58	; 0x3a
 800a0fe:	d11c      	bne.n	800a13a <get_ldnumber+0x78>
		i = FF_VOLUMES;
 800a100:	2301      	movs	r3, #1
 800a102:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	2b2f      	cmp	r3, #47	; 0x2f
 800a10a:	d90c      	bls.n	800a126 <get_ldnumber+0x64>
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b39      	cmp	r3, #57	; 0x39
 800a112:	d808      	bhi.n	800a126 <get_ldnumber+0x64>
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	3302      	adds	r3, #2
 800a118:	69fa      	ldr	r2, [r7, #28]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d103      	bne.n	800a126 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	3b30      	subs	r3, #48	; 0x30
 800a124:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	dc04      	bgt.n	800a136 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 800a12c:	69bb      	ldr	r3, [r7, #24]
 800a12e:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69fa      	ldr	r2, [r7, #28]
 800a134:	601a      	str	r2, [r3, #0]
		}
		return vol;
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	e002      	b.n	800a140 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800a13a:	2300      	movs	r3, #0
 800a13c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800a13e:	697b      	ldr	r3, [r7, #20]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3724      	adds	r7, #36	; 0x24
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	711a      	strb	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a162:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f7ff f888 	bl	800927c <move_window>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <check_fs+0x2a>
 800a172:	2304      	movs	r3, #4
 800a174:	e088      	b.n	800a288 <check_fs+0x13c>
	sign = ld_word(fs->win + BS_55AA);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3330      	adds	r3, #48	; 0x30
 800a17a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe ff74 	bl	800906c <ld_word>
 800a184:	4603      	mov	r3, r0
 800a186:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
#endif
	b = fs->win[BS_JmpBoot];
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a18e:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800a190:	7b7b      	ldrb	r3, [r7, #13]
 800a192:	2beb      	cmp	r3, #235	; 0xeb
 800a194:	d005      	beq.n	800a1a2 <check_fs+0x56>
 800a196:	7b7b      	ldrb	r3, [r7, #13]
 800a198:	2be9      	cmp	r3, #233	; 0xe9
 800a19a:	d002      	beq.n	800a1a2 <check_fs+0x56>
 800a19c:	7b7b      	ldrb	r3, [r7, #13]
 800a19e:	2be8      	cmp	r3, #232	; 0xe8
 800a1a0:	d16a      	bne.n	800a278 <check_fs+0x12c>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 800a1a2:	89fb      	ldrh	r3, [r7, #14]
 800a1a4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d10c      	bne.n	800a1c6 <check_fs+0x7a>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3330      	adds	r3, #48	; 0x30
 800a1b0:	3352      	adds	r3, #82	; 0x52
 800a1b2:	2208      	movs	r2, #8
 800a1b4:	4936      	ldr	r1, [pc, #216]	; (800a290 <check_fs+0x144>)
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f004 fa87 	bl	800e6ca <memcmp>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d101      	bne.n	800a1c6 <check_fs+0x7a>
			return 0;	/* It is an FAT32 VBR */
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e060      	b.n	800a288 <check_fs+0x13c>
		}
		/* FAT volumes formatted with early MS-DOS lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3330      	adds	r3, #48	; 0x30
 800a1ca:	330b      	adds	r3, #11
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f7fe ff4d 	bl	800906c <ld_word>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1dc:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 800a1de:	897a      	ldrh	r2, [r7, #10]
 800a1e0:	897b      	ldrh	r3, [r7, #10]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d146      	bne.n	800a278 <check_fs+0x12c>
 800a1ea:	897b      	ldrh	r3, [r7, #10]
 800a1ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f0:	d342      	bcc.n	800a278 <check_fs+0x12c>
 800a1f2:	897b      	ldrh	r3, [r7, #10]
 800a1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f8:	d83e      	bhi.n	800a278 <check_fs+0x12c>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 800a1fa:	7b7b      	ldrb	r3, [r7, #13]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d03b      	beq.n	800a278 <check_fs+0x12c>
 800a200:	7b7a      	ldrb	r2, [r7, #13]
 800a202:	7b7b      	ldrb	r3, [r7, #13]
 800a204:	3b01      	subs	r3, #1
 800a206:	4013      	ands	r3, r2
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d135      	bne.n	800a278 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of reserved sectors (MNBZ) */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	3330      	adds	r3, #48	; 0x30
 800a210:	330e      	adds	r3, #14
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe ff2a 	bl	800906c <ld_word>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d02c      	beq.n	800a278 <check_fs+0x12c>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of FATs (1 or 2) */
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a224:	3b01      	subs	r3, #1
 800a226:	2b01      	cmp	r3, #1
 800a228:	d826      	bhi.n	800a278 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir entries (MNBZ) */
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3330      	adds	r3, #48	; 0x30
 800a22e:	3311      	adds	r3, #17
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe ff1b 	bl	800906c <ld_word>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d01d      	beq.n	800a278 <check_fs+0x12c>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume sectors (>=128) */
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	3330      	adds	r3, #48	; 0x30
 800a240:	3313      	adds	r3, #19
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe ff12 	bl	800906c <ld_word>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b7f      	cmp	r3, #127	; 0x7f
 800a24c:	d809      	bhi.n	800a262 <check_fs+0x116>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3330      	adds	r3, #48	; 0x30
 800a252:	3320      	adds	r3, #32
 800a254:	4618      	mov	r0, r3
 800a256:	f7fe ff21 	bl	800909c <ld_dword>
 800a25a:	4603      	mov	r3, r0
 800a25c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a260:	d30a      	bcc.n	800a278 <check_fs+0x12c>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3330      	adds	r3, #48	; 0x30
 800a266:	3316      	adds	r3, #22
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe feff 	bl	800906c <ld_word>
 800a26e:	4603      	mov	r3, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	d001      	beq.n	800a278 <check_fs+0x12c>
				return 0;	/* It can be presumed an FAT VBR */
 800a274:	2300      	movs	r3, #0
 800a276:	e007      	b.n	800a288 <check_fs+0x13c>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 800a278:	89fb      	ldrh	r3, [r7, #14]
 800a27a:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800a27e:	4293      	cmp	r3, r2
 800a280:	d101      	bne.n	800a286 <check_fs+0x13a>
 800a282:	2302      	movs	r3, #2
 800a284:	e000      	b.n	800a288 <check_fs+0x13c>
 800a286:	2303      	movs	r3, #3
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	0800fbc8 	.word	0x0800fbc8

0800a294 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b088      	sub	sp, #32
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 800a29e:	2100      	movs	r1, #0
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7ff ff53 	bl	800a14c <check_fs>
 800a2a6:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d007      	beq.n	800a2be <find_volume+0x2a>
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d802      	bhi.n	800a2ba <find_volume+0x26>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d101      	bne.n	800a2be <find_volume+0x2a>
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	e045      	b.n	800a34a <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a2be:	2300      	movs	r3, #0
 800a2c0:	61fb      	str	r3, [r7, #28]
 800a2c2:	e014      	b.n	800a2ee <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2ca:	69fb      	ldr	r3, [r7, #28]
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800a2d2:	4413      	add	r3, r2
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fe fee1 	bl	800909c <ld_dword>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	3320      	adds	r3, #32
 800a2e2:	443b      	add	r3, r7
 800a2e4:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	61fb      	str	r3, [r7, #28]
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	2b03      	cmp	r3, #3
 800a2f2:	d9e7      	bls.n	800a2c4 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d002      	beq.n	800a300 <find_volume+0x6c>
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	e000      	b.n	800a302 <find_volume+0x6e>
 800a300:	2300      	movs	r3, #0
 800a302:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	3320      	adds	r3, #32
 800a30a:	443b      	add	r3, r7
 800a30c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d00b      	beq.n	800a32c <find_volume+0x98>
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	3320      	adds	r3, #32
 800a31a:	443b      	add	r3, r7
 800a31c:	f853 3c18 	ldr.w	r3, [r3, #-24]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff ff12 	bl	800a14c <check_fs>
 800a328:	4603      	mov	r3, r0
 800a32a:	e000      	b.n	800a32e <find_volume+0x9a>
 800a32c:	2303      	movs	r3, #3
 800a32e:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d108      	bne.n	800a348 <find_volume+0xb4>
 800a336:	69bb      	ldr	r3, [r7, #24]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d905      	bls.n	800a348 <find_volume+0xb4>
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	3301      	adds	r3, #1
 800a340:	61fb      	str	r3, [r7, #28]
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	2b03      	cmp	r3, #3
 800a346:	d9dd      	bls.n	800a304 <find_volume+0x70>
	return fmt;
 800a348:	69bb      	ldr	r3, [r7, #24]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3720      	adds	r7, #32
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b090      	sub	sp, #64	; 0x40
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	71fb      	strb	r3, [r7, #7]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2200      	movs	r2, #0
 800a366:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff feaa 	bl	800a0c2 <get_ldnumber>
 800a36e:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a372:	2b00      	cmp	r3, #0
 800a374:	da01      	bge.n	800a37a <mount_volume+0x26>
 800a376:	230b      	movs	r3, #11
 800a378:	e1dc      	b.n	800a734 <mount_volume+0x3e0>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 800a37a:	4a9d      	ldr	r2, [pc, #628]	; (800a5f0 <mount_volume+0x29c>)
 800a37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a382:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <mount_volume+0x3a>
 800a38a:	230c      	movs	r3, #12
 800a38c:	e1d2      	b.n	800a734 <mount_volume+0x3e0>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a392:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	f023 0301 	bic.w	r3, r3, #1
 800a39a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d01a      	beq.n	800a3da <mount_volume+0x86>
		stat = disk_status(fs->pdrv);
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	785b      	ldrb	r3, [r3, #1]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7fe fdc1 	bl	8008f30 <disk_status>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3b8:	f003 0301 	and.w	r3, r3, #1
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d10c      	bne.n	800a3da <mount_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d007      	beq.n	800a3d6 <mount_volume+0x82>
 800a3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3ca:	f003 0304 	and.w	r3, r3, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d001      	beq.n	800a3d6 <mount_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	e1ae      	b.n	800a734 <mount_volume+0x3e0>
			}
			return FR_OK;				/* The filesystem object is already valid */
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e1ac      	b.n	800a734 <mount_volume+0x3e0>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 800a3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3dc:	2200      	movs	r2, #0
 800a3de:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fdbd 	bl	8008f64 <disk_initialize>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <mount_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	e199      	b.n	800a734 <mount_volume+0x3e0>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d007      	beq.n	800a416 <mount_volume+0xc2>
 800a406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a40a:	f003 0304 	and.w	r3, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <mount_volume+0xc2>
		return FR_WRITE_PROTECTED;
 800a412:	230a      	movs	r3, #10
 800a414:	e18e      	b.n	800a734 <mount_volume+0x3e0>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 800a416:	2100      	movs	r1, #0
 800a418:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a41a:	f7ff ff3b 	bl	800a294 <find_volume>
 800a41e:	6338      	str	r0, [r7, #48]	; 0x30
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800a420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a422:	2b04      	cmp	r3, #4
 800a424:	d101      	bne.n	800a42a <mount_volume+0xd6>
 800a426:	2301      	movs	r3, #1
 800a428:	e184      	b.n	800a734 <mount_volume+0x3e0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d901      	bls.n	800a434 <mount_volume+0xe0>
 800a430:	230d      	movs	r3, #13
 800a432:	e17f      	b.n	800a734 <mount_volume+0x3e0>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800a434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a438:	623b      	str	r3, [r7, #32]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	3330      	adds	r3, #48	; 0x30
 800a43e:	330b      	adds	r3, #11
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe fe13 	bl	800906c <ld_word>
 800a446:	4603      	mov	r3, r0
 800a448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a44c:	d001      	beq.n	800a452 <mount_volume+0xfe>
 800a44e:	230d      	movs	r3, #13
 800a450:	e170      	b.n	800a734 <mount_volume+0x3e0>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a454:	3330      	adds	r3, #48	; 0x30
 800a456:	3316      	adds	r3, #22
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fe fe07 	bl	800906c <ld_word>
 800a45e:	4603      	mov	r3, r0
 800a460:	63bb      	str	r3, [r7, #56]	; 0x38
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	2b00      	cmp	r3, #0
 800a466:	d106      	bne.n	800a476 <mount_volume+0x122>
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	3330      	adds	r3, #48	; 0x30
 800a46c:	3324      	adds	r3, #36	; 0x24
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fe14 	bl	800909c <ld_dword>
 800a474:	63b8      	str	r0, [r7, #56]	; 0x38
		fs->fsize = fasize;
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a47a:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a484:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a488:	78db      	ldrb	r3, [r3, #3]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d005      	beq.n	800a49a <mount_volume+0x146>
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	78db      	ldrb	r3, [r3, #3]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d001      	beq.n	800a49a <mount_volume+0x146>
 800a496:	230d      	movs	r3, #13
 800a498:	e14c      	b.n	800a734 <mount_volume+0x3e0>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49c:	78db      	ldrb	r3, [r3, #3]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	fb02 f303 	mul.w	r3, r2, r3
 800a4a6:	63bb      	str	r3, [r7, #56]	; 0x38

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	895b      	ldrh	r3, [r3, #10]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d008      	beq.n	800a4ce <mount_volume+0x17a>
 800a4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4be:	895b      	ldrh	r3, [r3, #10]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	895b      	ldrh	r3, [r3, #10]
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <mount_volume+0x17e>
 800a4ce:	230d      	movs	r3, #13
 800a4d0:	e130      	b.n	800a734 <mount_volume+0x3e0>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d4:	3330      	adds	r3, #48	; 0x30
 800a4d6:	3311      	adds	r3, #17
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7fe fdc7 	bl	800906c <ld_word>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	891b      	ldrh	r3, [r3, #8]
 800a4ea:	f003 030f 	and.w	r3, r3, #15
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <mount_volume+0x1a4>
 800a4f4:	230d      	movs	r3, #13
 800a4f6:	e11d      	b.n	800a734 <mount_volume+0x3e0>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fa:	3330      	adds	r3, #48	; 0x30
 800a4fc:	3313      	adds	r3, #19
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fdb4 	bl	800906c <ld_word>
 800a504:	4603      	mov	r3, r0
 800a506:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d106      	bne.n	800a51c <mount_volume+0x1c8>
 800a50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a510:	3330      	adds	r3, #48	; 0x30
 800a512:	3320      	adds	r3, #32
 800a514:	4618      	mov	r0, r3
 800a516:	f7fe fdc1 	bl	800909c <ld_dword>
 800a51a:	63f8      	str	r0, [r7, #60]	; 0x3c

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a51e:	3330      	adds	r3, #48	; 0x30
 800a520:	330e      	adds	r3, #14
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fda2 	bl	800906c <ld_word>
 800a528:	4603      	mov	r3, r0
 800a52a:	83fb      	strh	r3, [r7, #30]
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a52c:	8bfb      	ldrh	r3, [r7, #30]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d101      	bne.n	800a536 <mount_volume+0x1e2>
 800a532:	230d      	movs	r3, #13
 800a534:	e0fe      	b.n	800a734 <mount_volume+0x3e0>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a536:	8bfa      	ldrh	r2, [r7, #30]
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	4413      	add	r3, r2
 800a53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53e:	8912      	ldrh	r2, [r2, #8]
 800a540:	0912      	lsrs	r2, r2, #4
 800a542:	b292      	uxth	r2, r2
 800a544:	4413      	add	r3, r2
 800a546:	61bb      	str	r3, [r7, #24]
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d201      	bcs.n	800a554 <mount_volume+0x200>
 800a550:	230d      	movs	r3, #13
 800a552:	e0ef      	b.n	800a734 <mount_volume+0x3e0>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a554:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a55c:	8952      	ldrh	r2, [r2, #10]
 800a55e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a562:	617b      	str	r3, [r7, #20]
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <mount_volume+0x21a>
 800a56a:	230d      	movs	r3, #13
 800a56c:	e0e2      	b.n	800a734 <mount_volume+0x3e0>
		fmt = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	4a1f      	ldr	r2, [pc, #124]	; (800a5f4 <mount_volume+0x2a0>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d801      	bhi.n	800a57e <mount_volume+0x22a>
 800a57a:	2303      	movs	r3, #3
 800a57c:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a584:	4293      	cmp	r3, r2
 800a586:	d801      	bhi.n	800a58c <mount_volume+0x238>
 800a588:	2302      	movs	r3, #2
 800a58a:	633b      	str	r3, [r7, #48]	; 0x30
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a592:	4293      	cmp	r3, r2
 800a594:	d801      	bhi.n	800a59a <mount_volume+0x246>
 800a596:	2301      	movs	r3, #1
 800a598:	633b      	str	r3, [r7, #48]	; 0x30
		if (fmt == 0) return FR_NO_FILESYSTEM;
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d101      	bne.n	800a5a4 <mount_volume+0x250>
 800a5a0:	230d      	movs	r3, #13
 800a5a2:	e0c7      	b.n	800a734 <mount_volume+0x3e0>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	1c9a      	adds	r2, r3, #2
 800a5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5aa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	6a3a      	ldr	r2, [r7, #32]
 800a5b0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a5b2:	8bfa      	ldrh	r2, [r7, #30]
 800a5b4:	6a3b      	ldr	r3, [r7, #32]
 800a5b6:	441a      	add	r2, r3
 800a5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ba:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a5bc:	6a3a      	ldr	r2, [r7, #32]
 800a5be:	69bb      	ldr	r3, [r7, #24]
 800a5c0:	441a      	add	r2, r3
 800a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d123      	bne.n	800a614 <mount_volume+0x2c0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ce:	3330      	adds	r3, #48	; 0x30
 800a5d0:	332a      	adds	r3, #42	; 0x2a
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fd4a 	bl	800906c <ld_word>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <mount_volume+0x28e>
 800a5de:	230d      	movs	r3, #13
 800a5e0:	e0a8      	b.n	800a734 <mount_volume+0x3e0>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e4:	891b      	ldrh	r3, [r3, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d006      	beq.n	800a5f8 <mount_volume+0x2a4>
 800a5ea:	230d      	movs	r3, #13
 800a5ec:	e0a2      	b.n	800a734 <mount_volume+0x3e0>
 800a5ee:	bf00      	nop
 800a5f0:	240011a4 	.word	0x240011a4
 800a5f4:	0ffffff5 	.word	0x0ffffff5
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	3330      	adds	r3, #48	; 0x30
 800a5fc:	332c      	adds	r3, #44	; 0x2c
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fd4c 	bl	800909c <ld_dword>
 800a604:	4602      	mov	r2, r0
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	637b      	str	r3, [r7, #52]	; 0x34
 800a612:	e01e      	b.n	800a652 <mount_volume+0x2fe>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	891b      	ldrh	r3, [r3, #8]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <mount_volume+0x2cc>
 800a61c:	230d      	movs	r3, #13
 800a61e:	e089      	b.n	800a734 <mount_volume+0x3e0>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	6a1a      	ldr	r2, [r3, #32]
 800a624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a626:	441a      	add	r2, r3
 800a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a62a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d103      	bne.n	800a63a <mount_volume+0x2e6>
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	695b      	ldr	r3, [r3, #20]
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	e00a      	b.n	800a650 <mount_volume+0x2fc>
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	695a      	ldr	r2, [r3, #20]
 800a63e:	4613      	mov	r3, r2
 800a640:	005b      	lsls	r3, r3, #1
 800a642:	4413      	add	r3, r2
 800a644:	085a      	lsrs	r2, r3, #1
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	f003 0301 	and.w	r3, r3, #1
 800a64e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a654:	699a      	ldr	r2, [r3, #24]
 800a656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a658:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a65c:	0a5b      	lsrs	r3, r3, #9
 800a65e:	429a      	cmp	r2, r3
 800a660:	d201      	bcs.n	800a666 <mount_volume+0x312>
 800a662:	230d      	movs	r3, #13
 800a664:	e066      	b.n	800a734 <mount_volume+0x3e0>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a66c:	611a      	str	r2, [r3, #16]
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	691a      	ldr	r2, [r3, #16]
 800a672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a674:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	2280      	movs	r2, #128	; 0x80
 800a67a:	715a      	strb	r2, [r3, #5]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	2b03      	cmp	r3, #3
 800a680:	d149      	bne.n	800a716 <mount_volume+0x3c2>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a684:	3330      	adds	r3, #48	; 0x30
 800a686:	3330      	adds	r3, #48	; 0x30
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe fcef 	bl	800906c <ld_word>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b01      	cmp	r3, #1
 800a692:	d140      	bne.n	800a716 <mount_volume+0x3c2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	3301      	adds	r3, #1
 800a698:	4619      	mov	r1, r3
 800a69a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a69c:	f7fe fdee 	bl	800927c <move_window>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d137      	bne.n	800a716 <mount_volume+0x3c2>
		{
			fs->fsi_flag = 0;
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	715a      	strb	r2, [r3, #5]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	3330      	adds	r3, #48	; 0x30
 800a6b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe fcd9 	bl	800906c <ld_word>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	461a      	mov	r2, r3
 800a6be:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d127      	bne.n	800a716 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	3330      	adds	r3, #48	; 0x30
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fce6 	bl	800909c <ld_dword>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	4a1a      	ldr	r2, [pc, #104]	; (800a73c <mount_volume+0x3e8>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d11e      	bne.n	800a716 <mount_volume+0x3c2>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6da:	3330      	adds	r3, #48	; 0x30
 800a6dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fe fcdb 	bl	800909c <ld_dword>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	4a15      	ldr	r2, [pc, #84]	; (800a740 <mount_volume+0x3ec>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d113      	bne.n	800a716 <mount_volume+0x3c2>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	3330      	adds	r3, #48	; 0x30
 800a6f2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7fe fcd0 	bl	800909c <ld_dword>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a704:	3330      	adds	r3, #48	; 0x30
 800a706:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a70a:	4618      	mov	r0, r3
 800a70c:	f7fe fcc6 	bl	800909c <ld_dword>
 800a710:	4602      	mov	r2, r0
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 800a716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a718:	b2da      	uxtb	r2, r3
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 800a71e:	4b09      	ldr	r3, [pc, #36]	; (800a744 <mount_volume+0x3f0>)
 800a720:	881b      	ldrh	r3, [r3, #0]
 800a722:	3301      	adds	r3, #1
 800a724:	b29a      	uxth	r2, r3
 800a726:	4b07      	ldr	r3, [pc, #28]	; (800a744 <mount_volume+0x3f0>)
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	4b06      	ldr	r3, [pc, #24]	; (800a744 <mount_volume+0x3f0>)
 800a72c:	881a      	ldrh	r2, [r3, #0]
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3740      	adds	r7, #64	; 0x40
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	41615252 	.word	0x41615252
 800a740:	61417272 	.word	0x61417272
 800a744:	240011a8 	.word	0x240011a8

0800a748 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a752:	2309      	movs	r3, #9
 800a754:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01c      	beq.n	800a796 <validate+0x4e>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d018      	beq.n	800a796 <validate+0x4e>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	781b      	ldrb	r3, [r3, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d013      	beq.n	800a796 <validate+0x4e>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	889a      	ldrh	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	88db      	ldrh	r3, [r3, #6]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d10c      	bne.n	800a796 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting phsical drive is kept initialized */
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	785b      	ldrb	r3, [r3, #1]
 800a782:	4618      	mov	r0, r3
 800a784:	f7fe fbd4 	bl	8008f30 <disk_status>
 800a788:	4603      	mov	r3, r0
 800a78a:	f003 0301 	and.w	r3, r3, #1
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d101      	bne.n	800a796 <validate+0x4e>
			res = FR_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d102      	bne.n	800a7a2 <validate+0x5a>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	e000      	b.n	800a7a4 <validate+0x5c>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	6013      	str	r3, [r2, #0]
	return res;
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b088      	sub	sp, #32
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 800a7c6:	f107 0310 	add.w	r3, r7, #16
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff fc79 	bl	800a0c2 <get_ldnumber>
 800a7d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	da01      	bge.n	800a7dc <f_mount+0x28>
 800a7d8:	230b      	movs	r3, #11
 800a7da:	e02e      	b.n	800a83a <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 800a7dc:	4a19      	ldr	r2, [pc, #100]	; (800a844 <f_mount+0x90>)
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if regsitered */
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d007      	beq.n	800a7fc <f_mount+0x48>
		FatFs[vol] = 0;
 800a7ec:	4a15      	ldr	r2, [pc, #84]	; (800a844 <f_mount+0x90>)
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d00b      	beq.n	800a81a <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	69fa      	ldr	r2, [r7, #28]
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 800a810:	68fa      	ldr	r2, [r7, #12]
 800a812:	490c      	ldr	r1, [pc, #48]	; (800a844 <f_mount+0x90>)
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 800a81a:	79fb      	ldrb	r3, [r7, #7]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d101      	bne.n	800a824 <f_mount+0x70>
 800a820:	2300      	movs	r3, #0
 800a822:	e00a      	b.n	800a83a <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a824:	f107 010c 	add.w	r1, r7, #12
 800a828:	f107 0308 	add.w	r3, r7, #8
 800a82c:	2200      	movs	r2, #0
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff fd90 	bl	800a354 <mount_volume>
 800a834:	4603      	mov	r3, r0
 800a836:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a838:	7dfb      	ldrb	r3, [r7, #23]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3720      	adds	r7, #32
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	240011a4 	.word	0x240011a4

0800a848 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b098      	sub	sp, #96	; 0x60
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	4613      	mov	r3, r2
 800a854:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <f_open+0x18>
 800a85c:	2309      	movs	r3, #9
 800a85e:	e177      	b.n	800ab50 <f_open+0x308>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a866:	71fb      	strb	r3, [r7, #7]
	res = mount_volume(&path, &fs, mode);
 800a868:	79fa      	ldrb	r2, [r7, #7]
 800a86a:	f107 0114 	add.w	r1, r7, #20
 800a86e:	f107 0308 	add.w	r3, r7, #8
 800a872:	4618      	mov	r0, r3
 800a874:	f7ff fd6e 	bl	800a354 <mount_volume>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a882:	2b00      	cmp	r3, #0
 800a884:	f040 815b 	bne.w	800ab3e <f_open+0x2f6>
		dj.obj.fs = fs;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	f107 0318 	add.w	r3, r7, #24
 800a892:	4611      	mov	r1, r2
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff fba5 	bl	8009fe4 <follow_path>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 800a8a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d107      	bne.n	800a8b8 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a8a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a8ac:	b25b      	sxtb	r3, r3
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	da02      	bge.n	800a8b8 <f_open+0x70>
				res = FR_INVALID_NAME;
 800a8b2:	2306      	movs	r3, #6
 800a8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a8b8:	79fb      	ldrb	r3, [r7, #7]
 800a8ba:	f003 031c 	and.w	r3, r3, #28
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d078      	beq.n	800a9b4 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 800a8c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d010      	beq.n	800a8ec <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a8ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d107      	bne.n	800a8e2 <f_open+0x9a>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800a8d2:	f107 0318 	add.w	r3, r7, #24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7ff fa89 	bl	8009dee <dir_register>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	f043 0308 	orr.w	r3, r3, #8
 800a8e8:	71fb      	strb	r3, [r7, #7]
 800a8ea:	e010      	b.n	800a90e <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a8ec:	7fbb      	ldrb	r3, [r7, #30]
 800a8ee:	f003 0311 	and.w	r3, r3, #17
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d003      	beq.n	800a8fe <f_open+0xb6>
					res = FR_DENIED;
 800a8f6:	2307      	movs	r3, #7
 800a8f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a8fc:	e007      	b.n	800a90e <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <f_open+0xc6>
 800a908:	2308      	movs	r3, #8
 800a90a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800a90e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a912:	2b00      	cmp	r3, #0
 800a914:	d168      	bne.n	800a9e8 <f_open+0x1a0>
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	f003 0308 	and.w	r3, r3, #8
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d063      	beq.n	800a9e8 <f_open+0x1a0>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 800a920:	f7fe f80b 	bl	800893a <get_fattime>
 800a924:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, tm);
 800a926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a928:	330e      	adds	r3, #14
 800a92a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fe fbf3 	bl	8009118 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 800a932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a934:	3316      	adds	r3, #22
 800a936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fbed 	bl	8009118 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff f9be 	bl	8009cc6 <ld_clust>
 800a94a:	64f8      	str	r0, [r7, #76]	; 0x4c
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a94e:	330b      	adds	r3, #11
 800a950:	2220      	movs	r2, #32
 800a952:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a958:	2200      	movs	r2, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff f9d2 	bl	8009d04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a962:	331c      	adds	r3, #28
 800a964:	2100      	movs	r1, #0
 800a966:	4618      	mov	r0, r3
 800a968:	f7fe fbd6 	bl	8009118 <st_dword>
					fs->wflag = 1;
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	2201      	movs	r2, #1
 800a970:	711a      	strb	r2, [r3, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 800a972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a974:	2b00      	cmp	r3, #0
 800a976:	d037      	beq.n	800a9e8 <f_open+0x1a0>
						sc = fs->winsect;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	64bb      	str	r3, [r7, #72]	; 0x48
						res = remove_chain(&dj.obj, cl, 0);
 800a97e:	f107 0318 	add.w	r3, r7, #24
 800a982:	2200      	movs	r2, #0
 800a984:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a986:	4618      	mov	r0, r3
 800a988:	f7fe fec7 	bl	800971a <remove_chain>
 800a98c:	4603      	mov	r3, r0
 800a98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a996:	2b00      	cmp	r3, #0
 800a998:	d126      	bne.n	800a9e8 <f_open+0x1a0>
							res = move_window(fs, sc);
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe fc6c 	bl	800927c <move_window>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9ae:	3a01      	subs	r2, #1
 800a9b0:	60da      	str	r2, [r3, #12]
 800a9b2:	e019      	b.n	800a9e8 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 800a9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d115      	bne.n	800a9e8 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 800a9bc:	7fbb      	ldrb	r3, [r7, #30]
 800a9be:	f003 0310 	and.w	r3, r3, #16
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d003      	beq.n	800a9ce <f_open+0x186>
					res = FR_NO_FILE;
 800a9c6:	2304      	movs	r3, #4
 800a9c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9cc:	e00c      	b.n	800a9e8 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	f003 0302 	and.w	r3, r3, #2
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d007      	beq.n	800a9e8 <f_open+0x1a0>
 800a9d8:	7fbb      	ldrb	r3, [r7, #30]
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d002      	beq.n	800a9e8 <f_open+0x1a0>
						res = FR_DENIED;
 800a9e2:	2307      	movs	r3, #7
 800a9e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10f      	bne.n	800aa10 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	f003 0308 	and.w	r3, r3, #8
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d003      	beq.n	800aa02 <f_open+0x1ba>
 800a9fa:	79fb      	ldrb	r3, [r7, #7]
 800a9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800aa0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 800aa10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f040 8092 	bne.w	800ab3e <f_open+0x2f6>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa1e:	4611      	mov	r1, r2
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff f950 	bl	8009cc6 <ld_clust>
 800aa26:	4602      	mov	r2, r0
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800aa2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2e:	331c      	adds	r3, #28
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fb33 	bl	800909c <ld_dword>
 800aa36:	4602      	mov	r2, r0
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	88da      	ldrh	r2, [r3, #6]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	79fa      	ldrb	r2, [r7, #7]
 800aa4e:	741a      	strb	r2, [r3, #16]
			fp->err = 0;		/* Clear error flag */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2200      	movs	r2, #0
 800aa54:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;		/* Invalidate current data sector */
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;		/* Set file pointer top of the file */
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3328      	adds	r3, #40	; 0x28
 800aa66:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa6a:	2100      	movs	r1, #0
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f003 fe64 	bl	800e73a <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aa72:	79fb      	ldrb	r3, [r7, #7]
 800aa74:	f003 0320 	and.w	r3, r3, #32
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d060      	beq.n	800ab3e <f_open+0x2f6>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d05c      	beq.n	800ab3e <f_open+0x2f6>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	68da      	ldr	r2, [r3, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	895b      	ldrh	r3, [r3, #10]
 800aa90:	025b      	lsls	r3, r3, #9
 800aa92:	647b      	str	r3, [r7, #68]	; 0x44
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	657b      	str	r3, [r7, #84]	; 0x54
 800aaa0:	e016      	b.n	800aad0 <f_open+0x288>
					clst = get_fat(&fp->obj, clst);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fca3 	bl	80093f2 <get_fat>
 800aaac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aaae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d802      	bhi.n	800aaba <f_open+0x272>
 800aab4:	2302      	movs	r3, #2
 800aab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aaba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aabc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aac0:	d102      	bne.n	800aac8 <f_open+0x280>
 800aac2:	2301      	movs	r3, #1
 800aac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aaca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	657b      	str	r3, [r7, #84]	; 0x54
 800aad0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d103      	bne.n	800aae0 <f_open+0x298>
 800aad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aadc:	429a      	cmp	r2, r3
 800aade:	d8e0      	bhi.n	800aaa2 <f_open+0x25a>
				}
				fp->clust = clst;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aae4:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aae6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d127      	bne.n	800ab3e <f_open+0x2f6>
 800aaee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d022      	beq.n	800ab3e <f_open+0x2f6>
					sc = clst2sect(fs, clst);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7fe fc59 	bl	80093b4 <clst2sect>
 800ab02:	64b8      	str	r0, [r7, #72]	; 0x48
					if (sc == 0) {
 800ab04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d103      	bne.n	800ab12 <f_open+0x2ca>
						res = FR_INT_ERR;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab10:	e015      	b.n	800ab3e <f_open+0x2f6>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ab12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab14:	0a5a      	lsrs	r2, r3, #9
 800ab16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab18:	441a      	add	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	7858      	ldrb	r0, [r3, #1]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	69da      	ldr	r2, [r3, #28]
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	f7fe fa3f 	bl	8008fb0 <disk_read>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d002      	beq.n	800ab3e <f_open+0x2f6>
 800ab38:	2301      	movs	r3, #1
 800ab3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ab3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d002      	beq.n	800ab4c <f_open+0x304>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ab4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3760      	adds	r7, #96	; 0x60
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <f_read>:
	FIL* fp, 	/* Open file to be read */
	void* buff,	/* Data buffer to store the read data */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Number of bytes read */
)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08e      	sub	sp, #56	; 0x38
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	603b      	str	r3, [r7, #0]
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f107 0214 	add.w	r2, r7, #20
 800ab76:	4611      	mov	r1, r2
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff fde5 	bl	800a748 <validate>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d107      	bne.n	800ab9c <f_read+0x44>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	7c5b      	ldrb	r3, [r3, #17]
 800ab90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ab94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <f_read+0x4a>
 800ab9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aba0:	e109      	b.n	800adb6 <f_read+0x25e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	7c1b      	ldrb	r3, [r3, #16]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <f_read+0x5a>
 800abae:	2307      	movs	r3, #7
 800abb0:	e101      	b.n	800adb6 <f_read+0x25e>
	remain = fp->obj.objsize - fp->fptr;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	68da      	ldr	r2, [r3, #12]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	6a3b      	ldr	r3, [r7, #32]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f240 80f2 	bls.w	800adac <f_read+0x254>
 800abc8:	6a3b      	ldr	r3, [r7, #32]
 800abca:	607b      	str	r3, [r7, #4]

	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800abcc:	e0ee      	b.n	800adac <f_read+0x254>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f040 80ba 	bne.w	800ad50 <f_read+0x1f8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	695b      	ldr	r3, [r3, #20]
 800abe0:	0a5b      	lsrs	r3, r3, #9
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	8952      	ldrh	r2, [r2, #10]
 800abe6:	3a01      	subs	r2, #1
 800abe8:	4013      	ands	r3, r2
 800abea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d123      	bne.n	800ac3a <f_read+0xe2>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d103      	bne.n	800ac02 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	633b      	str	r3, [r7, #48]	; 0x30
 800ac00:	e007      	b.n	800ac12 <f_read+0xba>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ac02:	68fa      	ldr	r2, [r7, #12]
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	f7fe fbf1 	bl	80093f2 <get_fat>
 800ac10:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ac12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d804      	bhi.n	800ac22 <f_read+0xca>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	745a      	strb	r2, [r3, #17]
 800ac1e:	2302      	movs	r3, #2
 800ac20:	e0c9      	b.n	800adb6 <f_read+0x25e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac28:	d104      	bne.n	800ac34 <f_read+0xdc>
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	745a      	strb	r2, [r3, #17]
 800ac30:	2301      	movs	r3, #1
 800ac32:	e0c0      	b.n	800adb6 <f_read+0x25e>
				fp->clust = clst;				/* Update current cluster */
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac38:	619a      	str	r2, [r3, #24]
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f7fe fbb6 	bl	80093b4 <clst2sect>
 800ac48:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d104      	bne.n	800ac5a <f_read+0x102>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2202      	movs	r2, #2
 800ac54:	745a      	strb	r2, [r3, #17]
 800ac56:	2302      	movs	r3, #2
 800ac58:	e0ad      	b.n	800adb6 <f_read+0x25e>
			sect += csect;
 800ac5a:	69ba      	ldr	r2, [r7, #24]
 800ac5c:	69fb      	ldr	r3, [r7, #28]
 800ac5e:	4413      	add	r3, r2
 800ac60:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	0a5b      	lsrs	r3, r3, #9
 800ac66:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 800ac68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d039      	beq.n	800ace2 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ac6e:	69fa      	ldr	r2, [r7, #28]
 800ac70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac72:	4413      	add	r3, r2
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	8952      	ldrh	r2, [r2, #10]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d905      	bls.n	800ac88 <f_read+0x130>
					cc = fs->csize - csect;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	895b      	ldrh	r3, [r3, #10]
 800ac80:	461a      	mov	r2, r3
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	7858      	ldrb	r0, [r3, #1]
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac92:	f7fe f98d 	bl	8008fb0 <disk_read>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d004      	beq.n	800aca6 <f_read+0x14e>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	745a      	strb	r2, [r3, #17]
 800aca2:	2301      	movs	r3, #1
 800aca4:	e087      	b.n	800adb6 <f_read+0x25e>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	7c1b      	ldrb	r3, [r3, #16]
 800acaa:	b25b      	sxtb	r3, r3
 800acac:	2b00      	cmp	r3, #0
 800acae:	da14      	bge.n	800acda <f_read+0x182>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	69da      	ldr	r2, [r3, #28]
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acba:	429a      	cmp	r2, r3
 800acbc:	d90d      	bls.n	800acda <f_read+0x182>
					memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	69da      	ldr	r2, [r3, #28]
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	025b      	lsls	r3, r3, #9
 800acc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acca:	18d0      	adds	r0, r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	3328      	adds	r3, #40	; 0x28
 800acd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acd4:	4619      	mov	r1, r3
 800acd6:	f003 fd08 	bl	800e6ea <memcpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800acda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acdc:	025b      	lsls	r3, r3, #9
 800acde:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800ace0:	e050      	b.n	800ad84 <f_read+0x22c>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	69db      	ldr	r3, [r3, #28]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d02e      	beq.n	800ad4a <f_read+0x1f2>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	7c1b      	ldrb	r3, [r3, #16]
 800acf0:	b25b      	sxtb	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	da18      	bge.n	800ad28 <f_read+0x1d0>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	7858      	ldrb	r0, [r3, #1]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	69da      	ldr	r2, [r3, #28]
 800ad04:	2301      	movs	r3, #1
 800ad06:	f7fe f973 	bl	8008ff0 <disk_write>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <f_read+0x1c2>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2201      	movs	r2, #1
 800ad14:	745a      	strb	r2, [r3, #17]
 800ad16:	2301      	movs	r3, #1
 800ad18:	e04d      	b.n	800adb6 <f_read+0x25e>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	7c1b      	ldrb	r3, [r3, #16]
 800ad1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	741a      	strb	r2, [r3, #16]
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	7858      	ldrb	r0, [r3, #1]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ad32:	2301      	movs	r3, #1
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	f7fe f93b 	bl	8008fb0 <disk_read>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d004      	beq.n	800ad4a <f_read+0x1f2>
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	2201      	movs	r2, #1
 800ad44:	745a      	strb	r2, [r3, #17]
 800ad46:	2301      	movs	r3, #1
 800ad48:	e035      	b.n	800adb6 <f_read+0x25e>
			}
#endif
			fp->sect = sect;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	61da      	str	r2, [r3, #28]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad58:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ad5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ad5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d901      	bls.n	800ad6a <f_read+0x212>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	62fb      	str	r3, [r7, #44]	; 0x2c
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad78:	4413      	add	r3, r2
 800ad7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad80:	f003 fcb3 	bl	800e6ea <memcpy>
	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {	/* Repeat until btr bytes read */
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	607b      	str	r3, [r7, #4]
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad92:	441a      	add	r2, r3
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9c:	4413      	add	r3, r2
 800ad9e:	627b      	str	r3, [r7, #36]	; 0x24
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	695a      	ldr	r2, [r3, #20]
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	441a      	add	r2, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	615a      	str	r2, [r3, #20]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	f47f af0d 	bne.w	800abce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3738      	adds	r7, #56	; 0x38
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b08c      	sub	sp, #48	; 0x30
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	607a      	str	r2, [r7, #4]
 800adca:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	2200      	movs	r2, #0
 800add4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f107 0210 	add.w	r2, r7, #16
 800addc:	4611      	mov	r1, r2
 800adde:	4618      	mov	r0, r3
 800ade0:	f7ff fcb2 	bl	800a748 <validate>
 800ade4:	4603      	mov	r3, r0
 800ade6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800adea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d107      	bne.n	800ae02 <f_write+0x44>
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	7c5b      	ldrb	r3, [r3, #17]
 800adf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800adfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d002      	beq.n	800ae08 <f_write+0x4a>
 800ae02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae06:	e13f      	b.n	800b088 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	7c1b      	ldrb	r3, [r3, #16]
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d101      	bne.n	800ae18 <f_write+0x5a>
 800ae14:	2307      	movs	r3, #7
 800ae16:	e137      	b.n	800b088 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	695a      	ldr	r2, [r3, #20]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	441a      	add	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	f080 8121 	bcs.w	800b06c <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	695b      	ldr	r3, [r3, #20]
 800ae2e:	43db      	mvns	r3, r3
 800ae30:	607b      	str	r3, [r7, #4]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800ae32:	e11b      	b.n	800b06c <f_write+0x2ae>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	f040 80d7 	bne.w	800aff0 <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	695b      	ldr	r3, [r3, #20]
 800ae46:	0a5b      	lsrs	r3, r3, #9
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	8952      	ldrh	r2, [r2, #10]
 800ae4c:	3a01      	subs	r2, #1
 800ae4e:	4013      	ands	r3, r2
 800ae50:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ae52:	69bb      	ldr	r3, [r7, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d137      	bne.n	800aec8 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	695b      	ldr	r3, [r3, #20]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10c      	bne.n	800ae7a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	689b      	ldr	r3, [r3, #8]
 800ae64:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10e      	bne.n	800ae8a <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2100      	movs	r1, #0
 800ae70:	4618      	mov	r0, r3
 800ae72:	f7fe fcb7 	bl	80097e4 <create_chain>
 800ae76:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae78:	e007      	b.n	800ae8a <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	4619      	mov	r1, r3
 800ae82:	4610      	mov	r0, r2
 800ae84:	f7fe fcae 	bl	80097e4 <create_chain>
 800ae88:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ae8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 80f2 	beq.w	800b076 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d104      	bne.n	800aea2 <f_write+0xe4>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	745a      	strb	r2, [r3, #17]
 800ae9e:	2302      	movs	r3, #2
 800aea0:	e0f2      	b.n	800b088 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800aea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aea8:	d104      	bne.n	800aeb4 <f_write+0xf6>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2201      	movs	r2, #1
 800aeae:	745a      	strb	r2, [r3, #17]
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e0e9      	b.n	800b088 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb8:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d102      	bne.n	800aec8 <f_write+0x10a>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aec6:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	7c1b      	ldrb	r3, [r3, #16]
 800aecc:	b25b      	sxtb	r3, r3
 800aece:	2b00      	cmp	r3, #0
 800aed0:	da18      	bge.n	800af04 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	7858      	ldrb	r0, [r3, #1]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	69da      	ldr	r2, [r3, #28]
 800aee0:	2301      	movs	r3, #1
 800aee2:	f7fe f885 	bl	8008ff0 <disk_write>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <f_write+0x138>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2201      	movs	r2, #1
 800aef0:	745a      	strb	r2, [r3, #17]
 800aef2:	2301      	movs	r3, #1
 800aef4:	e0c8      	b.n	800b088 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	7c1b      	ldrb	r3, [r3, #16]
 800aefa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aefe:	b2da      	uxtb	r2, r3
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	699b      	ldr	r3, [r3, #24]
 800af0a:	4619      	mov	r1, r3
 800af0c:	4610      	mov	r0, r2
 800af0e:	f7fe fa51 	bl	80093b4 <clst2sect>
 800af12:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d104      	bne.n	800af24 <f_write+0x166>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2202      	movs	r2, #2
 800af1e:	745a      	strb	r2, [r3, #17]
 800af20:	2302      	movs	r3, #2
 800af22:	e0b1      	b.n	800b088 <f_write+0x2ca>
			sect += csect;
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	4413      	add	r3, r2
 800af2a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	0a5b      	lsrs	r3, r3, #9
 800af30:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d03c      	beq.n	800afb2 <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	6a3b      	ldr	r3, [r7, #32]
 800af3c:	4413      	add	r3, r2
 800af3e:	693a      	ldr	r2, [r7, #16]
 800af40:	8952      	ldrh	r2, [r2, #10]
 800af42:	4293      	cmp	r3, r2
 800af44:	d905      	bls.n	800af52 <f_write+0x194>
					cc = fs->csize - csect;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	895b      	ldrh	r3, [r3, #10]
 800af4a:	461a      	mov	r2, r3
 800af4c:	69bb      	ldr	r3, [r7, #24]
 800af4e:	1ad3      	subs	r3, r2, r3
 800af50:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	7858      	ldrb	r0, [r3, #1]
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	69f9      	ldr	r1, [r7, #28]
 800af5c:	f7fe f848 	bl	8008ff0 <disk_write>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d004      	beq.n	800af70 <f_write+0x1b2>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	745a      	strb	r2, [r3, #17]
 800af6c:	2301      	movs	r3, #1
 800af6e:	e08b      	b.n	800b088 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	6a3a      	ldr	r2, [r7, #32]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d915      	bls.n	800afaa <f_write+0x1ec>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	69da      	ldr	r2, [r3, #28]
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	025b      	lsls	r3, r3, #9
 800af8e:	69fa      	ldr	r2, [r7, #28]
 800af90:	4413      	add	r3, r2
 800af92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af96:	4619      	mov	r1, r3
 800af98:	f003 fba7 	bl	800e6ea <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	7c1b      	ldrb	r3, [r3, #16]
 800afa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	025b      	lsls	r3, r3, #9
 800afae:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800afb0:	e03f      	b.n	800b032 <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	69db      	ldr	r3, [r3, #28]
 800afb6:	697a      	ldr	r2, [r7, #20]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d016      	beq.n	800afea <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	695a      	ldr	r2, [r3, #20]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d210      	bcs.n	800afea <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	7858      	ldrb	r0, [r3, #1]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800afd2:	2301      	movs	r3, #1
 800afd4:	697a      	ldr	r2, [r7, #20]
 800afd6:	f7fd ffeb 	bl	8008fb0 <disk_read>
 800afda:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d004      	beq.n	800afea <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	745a      	strb	r2, [r3, #17]
 800afe6:	2301      	movs	r3, #1
 800afe8:	e04e      	b.n	800b088 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	695b      	ldr	r3, [r3, #20]
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800affc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800affe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d901      	bls.n	800b00a <f_write+0x24c>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	695b      	ldr	r3, [r3, #20]
 800b014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b018:	4413      	add	r3, r2
 800b01a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01c:	69f9      	ldr	r1, [r7, #28]
 800b01e:	4618      	mov	r0, r3
 800b020:	f003 fb63 	bl	800e6ea <memcpy>
		fp->flag |= FA_DIRTY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	7c1b      	ldrb	r3, [r3, #16]
 800b028:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	741a      	strb	r2, [r3, #16]
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	607b      	str	r3, [r7, #4]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681a      	ldr	r2, [r3, #0]
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	441a      	add	r2, r3
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	69fa      	ldr	r2, [r7, #28]
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	4413      	add	r3, r2
 800b04c:	61fb      	str	r3, [r7, #28]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	695a      	ldr	r2, [r3, #20]
 800b052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b054:	441a      	add	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	615a      	str	r2, [r3, #20]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	68da      	ldr	r2, [r3, #12]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	429a      	cmp	r2, r3
 800b064:	bf38      	it	cc
 800b066:	461a      	movcc	r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	60da      	str	r2, [r3, #12]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f47f aee0 	bne.w	800ae34 <f_write+0x76>
 800b074:	e000      	b.n	800b078 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b076:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	7c1b      	ldrb	r3, [r3, #16]
 800b07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b080:	b2da      	uxtb	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3730      	adds	r7, #48	; 0x30
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	f107 0208 	add.w	r2, r7, #8
 800b09e:	4611      	mov	r1, r2
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff fb51 	bl	800a748 <validate>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d168      	bne.n	800b182 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	7c1b      	ldrb	r3, [r3, #16]
 800b0b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d062      	beq.n	800b182 <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	7c1b      	ldrb	r3, [r3, #16]
 800b0c0:	b25b      	sxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	da15      	bge.n	800b0f2 <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	7858      	ldrb	r0, [r3, #1]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	69da      	ldr	r2, [r3, #28]
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f7fd ff8b 	bl	8008ff0 <disk_write>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <f_sync+0x54>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e04f      	b.n	800b184 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	7c1b      	ldrb	r3, [r3, #16]
 800b0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b0f2:	f7fd fc22 	bl	800893a <get_fattime>
 800b0f6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	4619      	mov	r1, r3
 800b100:	4610      	mov	r0, r2
 800b102:	f7fe f8bb 	bl	800927c <move_window>
 800b106:	4603      	mov	r3, r0
 800b108:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d138      	bne.n	800b182 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	330b      	adds	r3, #11
 800b11a:	781a      	ldrb	r2, [r3, #0]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	330b      	adds	r3, #11
 800b120:	f042 0220 	orr.w	r2, r2, #32
 800b124:	b2d2      	uxtb	r2, r2
 800b126:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6818      	ldr	r0, [r3, #0]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	689b      	ldr	r3, [r3, #8]
 800b130:	461a      	mov	r2, r3
 800b132:	68f9      	ldr	r1, [r7, #12]
 800b134:	f7fe fde6 	bl	8009d04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f103 021c 	add.w	r2, r3, #28
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	4619      	mov	r1, r3
 800b144:	4610      	mov	r0, r2
 800b146:	f7fd ffe7 	bl	8009118 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	3316      	adds	r3, #22
 800b14e:	6939      	ldr	r1, [r7, #16]
 800b150:	4618      	mov	r0, r3
 800b152:	f7fd ffe1 	bl	8009118 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3312      	adds	r3, #18
 800b15a:	2100      	movs	r1, #0
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fd ffc0 	bl	80090e2 <st_word>
					fs->wflag = 1;
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	2201      	movs	r2, #1
 800b166:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe f8b4 	bl	80092d8 <sync_fs>
 800b170:	4603      	mov	r3, r0
 800b172:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	7c1b      	ldrb	r3, [r3, #16]
 800b178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b182:	7dfb      	ldrb	r3, [r7, #23]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3718      	adds	r7, #24
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff ff7b 	bl	800b090 <f_sync>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10e      	bne.n	800b1c2 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f107 0208 	add.w	r2, r7, #8
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff facb 	bl	800a748 <validate>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <create_partition>:
	BYTE drv,			/* Physical drive number */
	const LBA_t plst[],	/* Partition list */
	BYTE sys,			/* System ID for each partition (for only MBR) */
	BYTE *buf			/* Working buffer for a sector */
)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b08e      	sub	sp, #56	; 0x38
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607b      	str	r3, [r7, #4]
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	73fb      	strb	r3, [r7, #15]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	73bb      	strb	r3, [r7, #14]
	DWORD sz_drv32, nxt_alloc32, sz_part32;
	BYTE *pte;
	BYTE hd, n_hd, sc, n_sc;

	/* Get physical drive size */
	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
 800b1de:	f107 0210 	add.w	r2, r7, #16
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd ff22 	bl	8009030 <disk_ioctl>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <create_partition+0x2a>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e108      	b.n	800b408 <create_partition+0x23c>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;

	} else
#endif
	{	/* Create partitions in MBR format */
		sz_drv32 = (DWORD)sz_drv;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	623b      	str	r3, [r7, #32]
		n_sc = N_SEC_TRACK;				/* Determine drive CHS without any consideration of the drive geometry */
 800b1fa:	233f      	movs	r3, #63	; 0x3f
 800b1fc:	77fb      	strb	r3, [r7, #31]
		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
 800b1fe:	2308      	movs	r3, #8
 800b200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b204:	e004      	b.n	800b210 <create_partition+0x44>
 800b206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b20a:	005b      	lsls	r3, r3, #1
 800b20c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00a      	beq.n	800b22e <create_partition+0x62>
 800b218:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b21c:	6a3a      	ldr	r2, [r7, #32]
 800b21e:	fbb2 f2f3 	udiv	r2, r2, r3
 800b222:	7ffb      	ldrb	r3, [r7, #31]
 800b224:	fbb2 f3f3 	udiv	r3, r2, r3
 800b228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b22c:	d8eb      	bhi.n	800b206 <create_partition+0x3a>
		if (n_hd == 0) n_hd = 255;		/* Number of heads needs to be <256 */
 800b22e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b232:	2b00      	cmp	r3, #0
 800b234:	d102      	bne.n	800b23c <create_partition+0x70>
 800b236:	23ff      	movs	r3, #255	; 0xff
 800b238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		memset(buf, 0, FF_MAX_SS);		/* Clear MBR */
 800b23c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b240:	2100      	movs	r1, #0
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f003 fa79 	bl	800e73a <memset>
		pte = buf + MBR_Table;	/* Partition table in the MBR */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b24e:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800b250:	2300      	movs	r3, #0
 800b252:	637b      	str	r3, [r7, #52]	; 0x34
 800b254:	7ffb      	ldrb	r3, [r7, #31]
 800b256:	633b      	str	r3, [r7, #48]	; 0x30
 800b258:	e0b5      	b.n	800b3c6 <create_partition+0x1fa>
			sz_part32 = (DWORD)plst[i];	/* Get partition size */
 800b25a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	68ba      	ldr	r2, [r7, #8]
 800b260:	4413      	add	r3, r2
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 <= 100) sz_part32 = (sz_part32 == 100) ? sz_drv32 : sz_drv32 / 100 * sz_part32;	/* Size in percentage? */
 800b266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b268:	2b64      	cmp	r3, #100	; 0x64
 800b26a:	d80d      	bhi.n	800b288 <create_partition+0xbc>
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	2b64      	cmp	r3, #100	; 0x64
 800b270:	d008      	beq.n	800b284 <create_partition+0xb8>
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	4a66      	ldr	r2, [pc, #408]	; (800b410 <create_partition+0x244>)
 800b276:	fba2 2303 	umull	r2, r3, r2, r3
 800b27a:	095b      	lsrs	r3, r3, #5
 800b27c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b27e:	fb02 f303 	mul.w	r3, r2, r3
 800b282:	e000      	b.n	800b286 <create_partition+0xba>
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (nxt_alloc32 + sz_part32 > sz_drv32 || nxt_alloc32 + sz_part32 < nxt_alloc32) sz_part32 = sz_drv32 - nxt_alloc32;	/* Clip at drive size */
 800b288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28c:	4413      	add	r3, r2
 800b28e:	6a3a      	ldr	r2, [r7, #32]
 800b290:	429a      	cmp	r2, r3
 800b292:	d305      	bcc.n	800b2a0 <create_partition+0xd4>
 800b294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b298:	4413      	add	r3, r2
 800b29a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d903      	bls.n	800b2a8 <create_partition+0xdc>
 800b2a0:	6a3a      	ldr	r2, [r7, #32]
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	1ad3      	subs	r3, r2, r3
 800b2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 8097 	beq.w	800b3de <create_partition+0x212>

			st_dword(pte + PTE_StLba, nxt_alloc32);	/* Start LBA */
 800b2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7fd ff2e 	bl	8009118 <st_dword>
			st_dword(pte + PTE_SizLba, sz_part32);	/* Number of sectors */
 800b2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2be:	330c      	adds	r3, #12
 800b2c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	f7fd ff28 	bl	8009118 <st_dword>
			pte[PTE_System] = sys;					/* System type */
 800b2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	7bba      	ldrb	r2, [r7, #14]
 800b2ce:	701a      	strb	r2, [r3, #0]

			cy = (UINT)(nxt_alloc32 / n_sc / n_hd);	/* Start cylinder */
 800b2d0:	7ffb      	ldrb	r3, [r7, #31]
 800b2d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800b2d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2e0:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)(nxt_alloc32 / n_sc % n_hd);	/* Start head */
 800b2e2:	7ffb      	ldrb	r3, [r7, #31]
 800b2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b2ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2f2:	fb01 f202 	mul.w	r2, r1, r2
 800b2f6:	1a9b      	subs	r3, r3, r2
 800b2f8:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)(nxt_alloc32 % n_sc + 1);	/* Start sector */
 800b2fa:	7ffa      	ldrb	r2, [r7, #31]
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800b302:	fb01 f202 	mul.w	r2, r1, r2
 800b306:	1a9b      	subs	r3, r3, r2
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	3301      	adds	r3, #1
 800b30c:	75bb      	strb	r3, [r7, #22]
			pte[PTE_StHead] = hd;
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	3301      	adds	r3, #1
 800b312:	7dfa      	ldrb	r2, [r7, #23]
 800b314:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	089b      	lsrs	r3, r3, #2
 800b31a:	b2db      	uxtb	r3, r3
 800b31c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b320:	b2d9      	uxtb	r1, r3
 800b322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b324:	3302      	adds	r3, #2
 800b326:	7dba      	ldrb	r2, [r7, #22]
 800b328:	430a      	orrs	r2, r1
 800b32a:	b2d2      	uxtb	r2, r2
 800b32c:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = (BYTE)cy;
 800b32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b330:	3303      	adds	r3, #3
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	b2d2      	uxtb	r2, r2
 800b336:	701a      	strb	r2, [r3, #0]

			cy = (UINT)((nxt_alloc32 + sz_part32 - 1) / n_sc / n_hd);	/* End cylinder */
 800b338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b33c:	4413      	add	r3, r2
 800b33e:	1e5a      	subs	r2, r3, #1
 800b340:	7ffb      	ldrb	r3, [r7, #31]
 800b342:	fbb2 f2f3 	udiv	r2, r2, r3
 800b346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b34a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b34e:	61bb      	str	r3, [r7, #24]
			hd = (BYTE)((nxt_alloc32 + sz_part32 - 1) / n_sc % n_hd);	/* End head */
 800b350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b354:	4413      	add	r3, r2
 800b356:	1e5a      	subs	r2, r3, #1
 800b358:	7ffb      	ldrb	r3, [r7, #31]
 800b35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b35e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b362:	fbb3 f1f2 	udiv	r1, r3, r2
 800b366:	fb01 f202 	mul.w	r2, r1, r2
 800b36a:	1a9b      	subs	r3, r3, r2
 800b36c:	75fb      	strb	r3, [r7, #23]
			sc = (BYTE)((nxt_alloc32 + sz_part32 - 1) % n_sc + 1);		/* End sector */
 800b36e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b372:	4413      	add	r3, r2
 800b374:	3b01      	subs	r3, #1
 800b376:	7ffa      	ldrb	r2, [r7, #31]
 800b378:	fbb3 f1f2 	udiv	r1, r3, r2
 800b37c:	fb01 f202 	mul.w	r2, r1, r2
 800b380:	1a9b      	subs	r3, r3, r2
 800b382:	b2db      	uxtb	r3, r3
 800b384:	3301      	adds	r3, #1
 800b386:	75bb      	strb	r3, [r7, #22]
			pte[PTE_EdHead] = hd;
 800b388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b38a:	3305      	adds	r3, #5
 800b38c:	7dfa      	ldrb	r2, [r7, #23]
 800b38e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	089b      	lsrs	r3, r3, #2
 800b394:	b2db      	uxtb	r3, r3
 800b396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b39a:	b2d9      	uxtb	r1, r3
 800b39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39e:	3306      	adds	r3, #6
 800b3a0:	7dba      	ldrb	r2, [r7, #22]
 800b3a2:	430a      	orrs	r2, r1
 800b3a4:	b2d2      	uxtb	r2, r2
 800b3a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)cy;
 800b3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3aa:	3307      	adds	r3, #7
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	b2d2      	uxtb	r2, r2
 800b3b0:	701a      	strb	r2, [r3, #0]

			pte += SZ_PTE;		/* Next entry */
 800b3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b4:	3310      	adds	r3, #16
 800b3b6:	62bb      	str	r3, [r7, #40]	; 0x28
		for (i = 0, nxt_alloc32 = n_sc; i < 4 && nxt_alloc32 != 0 && nxt_alloc32 < sz_drv32; i++, nxt_alloc32 += sz_part32) {
 800b3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	637b      	str	r3, [r7, #52]	; 0x34
 800b3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c2:	4413      	add	r3, r2
 800b3c4:	633b      	str	r3, [r7, #48]	; 0x30
 800b3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c8:	2b03      	cmp	r3, #3
 800b3ca:	d809      	bhi.n	800b3e0 <create_partition+0x214>
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d006      	beq.n	800b3e0 <create_partition+0x214>
 800b3d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	f4ff af3f 	bcc.w	800b25a <create_partition+0x8e>
 800b3dc:	e000      	b.n	800b3e0 <create_partition+0x214>
			if (sz_part32 == 0) break;	/* End of table or no sector to allocate? */
 800b3de:	bf00      	nop
		}

		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3e6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7fd fe79 	bl	80090e2 <st_word>
		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800b3f0:	7bf8      	ldrb	r0, [r7, #15]
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	f7fd fdfa 	bl	8008ff0 <disk_write>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <create_partition+0x23a>
 800b402:	2301      	movs	r3, #1
 800b404:	e000      	b.n	800b408 <create_partition+0x23c>
	}

	return FR_OK;
 800b406:	2300      	movs	r3, #0
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3738      	adds	r7, #56	; 0x38
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}
 800b410:	51eb851f 	.word	0x51eb851f

0800b414 <f_mkfs>:
	const TCHAR* path,		/* Logical drive number */
	const MKFS_PARM* opt,	/* Format options */
	void* work,				/* Pointer to working buffer (null: use len bytes of heap memory) */
	UINT len				/* Size of working buffer [byte] */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b0a0      	sub	sp, #128	; 0x80
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
	DSTATUS ds;
	FRESULT res;


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b422:	f107 030c 	add.w	r3, r7, #12
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fe4b 	bl	800a0c2 <get_ldnumber>
 800b42c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b42e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b430:	2b00      	cmp	r3, #0
 800b432:	da02      	bge.n	800b43a <f_mkfs+0x26>
 800b434:	230b      	movs	r3, #11
 800b436:	f000 bc1b 	b.w	800bc70 <f_mkfs+0x85c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
 800b43a:	4aa2      	ldr	r2, [pc, #648]	; (800b6c4 <f_mkfs+0x2b0>)
 800b43c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b43e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d005      	beq.n	800b452 <f_mkfs+0x3e>
 800b446:	4a9f      	ldr	r2, [pc, #636]	; (800b6c4 <f_mkfs+0x2b0>)
 800b448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b44a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b44e:	2200      	movs	r2, #0
 800b450:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);		/* Hosting physical drive */
 800b452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b454:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	ipart = LD2PT(vol);		/* Hosting partition (0:create as new, 1..:existing partition) */
 800b458:	2300      	movs	r3, #0
 800b45a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	/* Initialize the hosting physical drive */
	ds = disk_initialize(pdrv);
 800b45e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b462:	4618      	mov	r0, r3
 800b464:	f7fd fd7e 	bl	8008f64 <disk_initialize>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	if (ds & STA_NOINIT) return FR_NOT_READY;
 800b46e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800b472:	f003 0301 	and.w	r3, r3, #1
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <f_mkfs+0x6a>
 800b47a:	2303      	movs	r3, #3
 800b47c:	e3f8      	b.n	800bc70 <f_mkfs+0x85c>
	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b47e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800b482:	f003 0304 	and.w	r3, r3, #4
 800b486:	2b00      	cmp	r3, #0
 800b488:	d001      	beq.n	800b48e <f_mkfs+0x7a>
 800b48a:	230a      	movs	r3, #10
 800b48c:	e3f0      	b.n	800bc70 <f_mkfs+0x85c>

	/* Get physical drive parameters (sz_drv, sz_blk and ss) */
	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <f_mkfs+0x84>
 800b494:	4b8c      	ldr	r3, [pc, #560]	; (800b6c8 <f_mkfs+0x2b4>)
 800b496:	60bb      	str	r3, [r7, #8]
	sz_blk = opt->align;
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	623b      	str	r3, [r7, #32]
	if (sz_blk == 0) disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk);					/* Block size from the paramter or lower layer */
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d107      	bne.n	800b4b4 <f_mkfs+0xa0>
 800b4a4:	f107 0220 	add.w	r2, r7, #32
 800b4a8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b4ac:	2103      	movs	r1, #3
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fd fdbe 	bl	8009030 <disk_ioctl>
 	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Use default if the block size is invalid */
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <f_mkfs+0xba>
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4c0:	d805      	bhi.n	800b4ce <f_mkfs+0xba>
 800b4c2:	6a3b      	ldr	r3, [r7, #32]
 800b4c4:	1e5a      	subs	r2, r3, #1
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <f_mkfs+0xbe>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	623b      	str	r3, [r7, #32]
#if FF_MAX_SS != FF_MIN_SS
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = FF_MAX_SS;
 800b4d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
#endif

	/* Options for FAT sub-type and FAT parameters */
	fsopt = opt->fmt & (FM_ANY | FM_SFD);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	781b      	ldrb	r3, [r3, #0]
 800b4de:	f003 030f 	and.w	r3, r3, #15
 800b4e2:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	785b      	ldrb	r3, [r3, #1]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d006      	beq.n	800b4fc <f_mkfs+0xe8>
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	785b      	ldrb	r3, [r3, #1]
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d802      	bhi.n	800b4fc <f_mkfs+0xe8>
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	785b      	ldrb	r3, [r3, #1]
 800b4fa:	e000      	b.n	800b4fe <f_mkfs+0xea>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	643b      	str	r3, [r7, #64]	; 0x40
	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n_root : 512;
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d014      	beq.n	800b532 <f_mkfs+0x11e>
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b510:	d80f      	bhi.n	800b532 <f_mkfs+0x11e>
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b51a:	0952      	lsrs	r2, r2, #5
 800b51c:	b292      	uxth	r2, r2
 800b51e:	fbb3 f1f2 	udiv	r1, r3, r2
 800b522:	fb01 f202 	mul.w	r2, r1, r2
 800b526:	1a9b      	subs	r3, r3, r2
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d102      	bne.n	800b532 <f_mkfs+0x11e>
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	e001      	b.n	800b536 <f_mkfs+0x122>
 800b532:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b536:	63fb      	str	r3, [r7, #60]	; 0x3c
	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0;
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b540:	d80a      	bhi.n	800b558 <f_mkfs+0x144>
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	68da      	ldr	r2, [r3, #12]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	4013      	ands	r3, r2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d102      	bne.n	800b558 <f_mkfs+0x144>
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	e000      	b.n	800b55a <f_mkfs+0x146>
 800b558:	2300      	movs	r3, #0
 800b55a:	657b      	str	r3, [r7, #84]	; 0x54
	sz_au /= ss;	/* Byte --> Sector */
 800b55c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b562:	fbb2 f3f3 	udiv	r3, r2, r3
 800b566:	657b      	str	r3, [r7, #84]	; 0x54

	/* Get working buffer */
	sz_buf = len / ss;		/* Size of working buffer [sector] */
 800b568:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b572:	63bb      	str	r3, [r7, #56]	; 0x38
	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	2b00      	cmp	r3, #0
 800b578:	d101      	bne.n	800b57e <f_mkfs+0x16a>
 800b57a:	2311      	movs	r3, #17
 800b57c:	e378      	b.n	800bc70 <f_mkfs+0x85c>
	buf = (BYTE*)work;		/* Working buffer */
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_USE_LFN == 3
	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
#endif
	if (!buf) return FR_NOT_ENOUGH_CORE;
 800b582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <f_mkfs+0x178>
 800b588:	2311      	movs	r3, #17
 800b58a:	e371      	b.n	800bc70 <f_mkfs+0x85c>

	/* Determine where the volume to be located (b_vol, sz_vol) */
	b_vol = sz_vol = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	61fb      	str	r3, [r7, #28]
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	677b      	str	r3, [r7, #116]	; 0x74
			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
		}
	} else {	/* The volume is associated with a physical drive */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800b594:	f107 021c 	add.w	r2, r7, #28
 800b598:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800b59c:	2101      	movs	r1, #1
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fd fd46 	bl	8009030 <disk_ioctl>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <f_mkfs+0x19a>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e360      	b.n	800bc70 <f_mkfs+0x85c>
		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
 800b5ae:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800b5b2:	f003 0308 	and.w	r3, r3, #8
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d108      	bne.n	800b5cc <f_mkfs+0x1b8>
				fsopt |= 0x80;		/* Partitioning is in GPT */
				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition offset and size */
			} else
#endif
			{	/* Partitioning is in MBR */
				if (sz_vol > N_SEC_TRACK) {
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	2b3f      	cmp	r3, #63	; 0x3f
 800b5be:	d905      	bls.n	800b5cc <f_mkfs+0x1b8>
					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
 800b5c0:	233f      	movs	r3, #63	; 0x3f
 800b5c2:	677b      	str	r3, [r7, #116]	; 0x74
 800b5c4:	69fa      	ldr	r2, [r7, #28]
 800b5c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	61fb      	str	r3, [r7, #28]
				}
			}
		}
	}
	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	2b7f      	cmp	r3, #127	; 0x7f
 800b5d0:	d801      	bhi.n	800b5d6 <f_mkfs+0x1c2>
 800b5d2:	230e      	movs	r3, #14
 800b5d4:	e34c      	b.n	800bc70 <f_mkfs+0x85c>
			}
		}
#if FF_LBA64
		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
#endif
		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
 800b5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5d8:	2b80      	cmp	r3, #128	; 0x80
 800b5da:	d901      	bls.n	800b5e0 <f_mkfs+0x1cc>
 800b5dc:	2380      	movs	r3, #128	; 0x80
 800b5de:	657b      	str	r3, [r7, #84]	; 0x54
		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
 800b5e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800b5e4:	f003 0302 	and.w	r3, r3, #2
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d009      	beq.n	800b600 <f_mkfs+0x1ec>
			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
 800b5ec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800b5f0:	f003 0301 	and.w	r3, r3, #1
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d103      	bne.n	800b600 <f_mkfs+0x1ec>
				fsty = FS_FAT32; break;
 800b5f8:	2303      	movs	r3, #3
 800b5fa:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b5fe:	e00a      	b.n	800b616 <f_mkfs+0x202>
			}
		}
		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
 800b600:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <f_mkfs+0x1fc>
 800b60c:	2313      	movs	r3, #19
 800b60e:	e32f      	b.n	800bc70 <f_mkfs+0x85c>
		fsty = FS_FAT16;
 800b610:	2302      	movs	r3, #2
 800b612:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	} while (0);

	vsn = (DWORD)sz_vol + GET_FATTIME();	/* VSN generated from current time and partitiion size */
 800b616:	f7fd f990 	bl	800893a <get_fattime>
 800b61a:	4602      	mov	r2, r0
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	4413      	add	r3, r2
 800b620:	633b      	str	r3, [r7, #48]	; 0x30

	} else
#endif	/* FF_FS_EXFAT */
	{	/* Create an FAT/FAT32 volume */
		do {
			pau = sz_au;
 800b622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b624:	66bb      	str	r3, [r7, #104]	; 0x68
			/* Pre-determine number of clusters and FAT sub-type */
			if (fsty == FS_FAT32) {	/* FAT32 volume */
 800b626:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d13e      	bne.n	800b6ac <f_mkfs+0x298>
				if (pau == 0) {	/* AU auto-selection */
 800b62e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b630:	2b00      	cmp	r3, #0
 800b632:	d11b      	bne.n	800b66c <f_mkfs+0x258>
					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	0c5b      	lsrs	r3, r3, #17
 800b638:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b63a:	2300      	movs	r3, #0
 800b63c:	653b      	str	r3, [r7, #80]	; 0x50
 800b63e:	2301      	movs	r3, #1
 800b640:	66bb      	str	r3, [r7, #104]	; 0x68
 800b642:	e005      	b.n	800b650 <f_mkfs+0x23c>
 800b644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b646:	3301      	adds	r3, #1
 800b648:	653b      	str	r3, [r7, #80]	; 0x50
 800b64a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b650:	4a1e      	ldr	r2, [pc, #120]	; (800b6cc <f_mkfs+0x2b8>)
 800b652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d007      	beq.n	800b66c <f_mkfs+0x258>
 800b65c:	4a1b      	ldr	r2, [pc, #108]	; (800b6cc <f_mkfs+0x2b8>)
 800b65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b664:	461a      	mov	r2, r3
 800b666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b668:	4293      	cmp	r3, r2
 800b66a:	d2eb      	bcs.n	800b644 <f_mkfs+0x230>
				}
				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
 800b66c:	69fa      	ldr	r2, [r7, #28]
 800b66e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b670:	fbb2 f3f3 	udiv	r3, r2, r3
 800b674:	62fb      	str	r3, [r7, #44]	; 0x2c
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	3302      	adds	r3, #2
 800b67a:	009a      	lsls	r2, r3, #2
 800b67c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b680:	4413      	add	r3, r2
 800b682:	1e5a      	subs	r2, r3, #1
 800b684:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b688:	fbb2 f3f3 	udiv	r3, r2, r3
 800b68c:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 32;	/* Number of reserved sectors */
 800b68e:	2320      	movs	r3, #32
 800b690:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = 0;		/* No static directory */
 800b692:	2300      	movs	r3, #0
 800b694:	65bb      	str	r3, [r7, #88]	; 0x58
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
 800b696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b698:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d903      	bls.n	800b6a8 <f_mkfs+0x294>
 800b6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a2:	4a0b      	ldr	r2, [pc, #44]	; (800b6d0 <f_mkfs+0x2bc>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d956      	bls.n	800b756 <f_mkfs+0x342>
 800b6a8:	230e      	movs	r3, #14
 800b6aa:	e2e1      	b.n	800bc70 <f_mkfs+0x85c>
			} else {				/* FAT volume */
				if (pau == 0) {	/* au auto-selection */
 800b6ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d124      	bne.n	800b6fc <f_mkfs+0x2e8>
					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	0b1b      	lsrs	r3, r3, #12
 800b6b6:	66fb      	str	r3, [r7, #108]	; 0x6c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	653b      	str	r3, [r7, #80]	; 0x50
 800b6bc:	2301      	movs	r3, #1
 800b6be:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6c0:	e00e      	b.n	800b6e0 <f_mkfs+0x2cc>
 800b6c2:	bf00      	nop
 800b6c4:	240011a4 	.word	0x240011a4
 800b6c8:	0800fc34 	.word	0x0800fc34
 800b6cc:	0800fc44 	.word	0x0800fc44
 800b6d0:	0ffffff5 	.word	0x0ffffff5
 800b6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b6da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6e0:	4a99      	ldr	r2, [pc, #612]	; (800b948 <f_mkfs+0x534>)
 800b6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d007      	beq.n	800b6fc <f_mkfs+0x2e8>
 800b6ec:	4a96      	ldr	r2, [pc, #600]	; (800b948 <f_mkfs+0x534>)
 800b6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d2eb      	bcs.n	800b6d4 <f_mkfs+0x2c0>
				}
				n_clst = (DWORD)sz_vol / pau;
 800b6fc:	69fa      	ldr	r2, [r7, #28]
 800b6fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b700:	fbb2 f3f3 	udiv	r3, r2, r3
 800b704:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (n_clst > MAX_FAT12) {
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d904      	bls.n	800b71a <f_mkfs+0x306>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b712:	3302      	adds	r3, #2
 800b714:	005b      	lsls	r3, r3, #1
 800b716:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b718:	e00a      	b.n	800b730 <f_mkfs+0x31c>
				} else {
					fsty = FS_FAT12;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b722:	4613      	mov	r3, r2
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	4413      	add	r3, r2
 800b728:	3301      	adds	r3, #1
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	3303      	adds	r3, #3
 800b72e:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b730:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b736:	4413      	add	r3, r2
 800b738:	1e5a      	subs	r2, r3, #1
 800b73a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b73e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b742:	65fb      	str	r3, [r7, #92]	; 0x5c
				sz_rsv = 1;						/* Number of reserved sectors */
 800b744:	2301      	movs	r3, #1
 800b746:	67fb      	str	r3, [r7, #124]	; 0x7c
				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
 800b748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b74a:	015a      	lsls	r2, r3, #5
 800b74c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b750:	fbb2 f3f3 	udiv	r3, r2, r3
 800b754:	65bb      	str	r3, [r7, #88]	; 0x58
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b756:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b758:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b75a:	4413      	add	r3, r2
 800b75c:	673b      	str	r3, [r7, #112]	; 0x70
			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
 800b75e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b760:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b762:	fb03 f202 	mul.w	r2, r3, r2
 800b766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b768:	4413      	add	r3, r2
 800b76a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b76c:	4413      	add	r3, r2
 800b76e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Align data area to erase block boundary (for flash memory media) */
			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from current data base */
 800b770:	6a3a      	ldr	r2, [r7, #32]
 800b772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b774:	4413      	add	r3, r2
 800b776:	1e5a      	subs	r2, r3, #1
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	425b      	negs	r3, r3
 800b77c:	401a      	ands	r2, r3
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
 800b784:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d108      	bne.n	800b79e <f_mkfs+0x38a>
				sz_rsv += n; b_fat += n;
 800b78c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b78e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b790:	4413      	add	r3, r2
 800b792:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b794:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b798:	4413      	add	r3, r2
 800b79a:	673b      	str	r3, [r7, #112]	; 0x70
 800b79c:	e019      	b.n	800b7d2 <f_mkfs+0x3be>
			} else {					/* FAT: Expand FAT */
				if (n % n_fat) {	/* Adjust fractional error if needed */
 800b79e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7a2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b7a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7a8:	fb01 f202 	mul.w	r2, r1, r2
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d008      	beq.n	800b7c4 <f_mkfs+0x3b0>
					n--; sz_rsv++; b_fat++;
 800b7b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b7be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7c0:	3301      	adds	r3, #1
 800b7c2:	673b      	str	r3, [r7, #112]	; 0x70
				}
				sz_fat += n / n_fat;
 800b7c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b7ce:	4413      	add	r3, r2
 800b7d0:	65fb      	str	r3, [r7, #92]	; 0x5c
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
 800b7d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7d4:	011a      	lsls	r2, r3, #4
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	441a      	add	r2, r3
 800b7da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7dc:	1ad2      	subs	r2, r2, r3
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d901      	bls.n	800b7e8 <f_mkfs+0x3d4>
 800b7e4:	230e      	movs	r3, #14
 800b7e6:	e243      	b.n	800bc70 <f_mkfs+0x85c>
			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
 800b7e8:	69fa      	ldr	r2, [r7, #28]
 800b7ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7ec:	1ad2      	subs	r2, r2, r3
 800b7ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7f2:	fb01 f303 	mul.w	r3, r1, r3
 800b7f6:	1ad2      	subs	r2, r2, r3
 800b7f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b7fa:	1ad2      	subs	r2, r2, r3
 800b7fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800b802:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (fsty == FS_FAT32) {
 800b804:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b808:	2b03      	cmp	r3, #3
 800b80a:	d10f      	bne.n	800b82c <f_mkfs+0x418>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
 800b80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b812:	4293      	cmp	r3, r2
 800b814:	d80a      	bhi.n	800b82c <f_mkfs+0x418>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d105      	bne.n	800b828 <f_mkfs+0x414>
 800b81c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b81e:	085b      	lsrs	r3, r3, #1
 800b820:	657b      	str	r3, [r7, #84]	; 0x54
 800b822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b824:	2b00      	cmp	r3, #0
 800b826:	d145      	bne.n	800b8b4 <f_mkfs+0x4a0>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800b828:	230e      	movs	r3, #14
 800b82a:	e221      	b.n	800bc70 <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT16) {
 800b82c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b830:	2b02      	cmp	r3, #2
 800b832:	d134      	bne.n	800b89e <f_mkfs+0x48a>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b836:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d91f      	bls.n	800b87e <f_mkfs+0x46a>
					if (sz_au == 0 && (pau * 2) <= 64) {
 800b83e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b840:	2b00      	cmp	r3, #0
 800b842:	d107      	bne.n	800b854 <f_mkfs+0x440>
 800b844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b846:	005b      	lsls	r3, r3, #1
 800b848:	2b40      	cmp	r3, #64	; 0x40
 800b84a:	d803      	bhi.n	800b854 <f_mkfs+0x440>
						sz_au = pau * 2; continue;	/* Adjust cluster size and retry */
 800b84c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	657b      	str	r3, [r7, #84]	; 0x54
 800b852:	e034      	b.n	800b8be <f_mkfs+0x4aa>
					}
					if ((fsopt & FM_FAT32)) {
 800b854:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800b858:	f003 0302 	and.w	r3, r3, #2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d003      	beq.n	800b868 <f_mkfs+0x454>
						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b860:	2303      	movs	r3, #3
 800b862:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b866:	e02a      	b.n	800b8be <f_mkfs+0x4aa>
					}
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d105      	bne.n	800b87a <f_mkfs+0x466>
 800b86e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	657b      	str	r3, [r7, #84]	; 0x54
 800b874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b876:	2b80      	cmp	r3, #128	; 0x80
 800b878:	d91e      	bls.n	800b8b8 <f_mkfs+0x4a4>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800b87a:	230e      	movs	r3, #14
 800b87c:	e1f8      	b.n	800bc70 <f_mkfs+0x85c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b884:	4293      	cmp	r3, r2
 800b886:	d80a      	bhi.n	800b89e <f_mkfs+0x48a>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d105      	bne.n	800b89a <f_mkfs+0x486>
 800b88e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	657b      	str	r3, [r7, #84]	; 0x54
 800b894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b896:	2b80      	cmp	r3, #128	; 0x80
 800b898:	d910      	bls.n	800b8bc <f_mkfs+0x4a8>
					LEAVE_MKFS(FR_MKFS_ABORTED);
 800b89a:	230e      	movs	r3, #14
 800b89c:	e1e8      	b.n	800bc70 <f_mkfs+0x85c>
				}
			}
			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters for FAT12 */
 800b89e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d10c      	bne.n	800b8c0 <f_mkfs+0x4ac>
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d907      	bls.n	800b8c0 <f_mkfs+0x4ac>
 800b8b0:	230e      	movs	r3, #14
 800b8b2:	e1dd      	b.n	800bc70 <f_mkfs+0x85c>
					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b8b4:	bf00      	nop
 800b8b6:	e6b4      	b.n	800b622 <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b8b8:	bf00      	nop
 800b8ba:	e6b2      	b.n	800b622 <f_mkfs+0x20e>
					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b8bc:	bf00      	nop
			pau = sz_au;
 800b8be:	e6b0      	b.n	800b622 <f_mkfs+0x20e>

			/* Ok, it is the valid cluster configuration */
			break;
 800b8c0:	bf00      	nop
#if FF_USE_TRIM
		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be erased */
		disk_ioctl(pdrv, CTRL_TRIM, lba);
#endif
		/* Create FAT VBR */
		memset(buf, 0, ss);
 800b8c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8cc:	f002 ff35 	bl	800e73a <memset>
		memcpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);	/* Boot jump code (x86), OEM name */
 800b8d0:	220b      	movs	r2, #11
 800b8d2:	491e      	ldr	r1, [pc, #120]	; (800b94c <f_mkfs+0x538>)
 800b8d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b8d6:	f002 ff08 	bl	800e6ea <memcpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b8da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8dc:	330b      	adds	r3, #11
 800b8de:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fd fbfc 	bl	80090e2 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ec:	330d      	adds	r3, #13
 800b8ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8f0:	b2d2      	uxtb	r2, r2
 800b8f2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f6:	330e      	adds	r3, #14
 800b8f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b8fa:	b292      	uxth	r2, r2
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fd fbef 	bl	80090e2 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
 800b904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b906:	3310      	adds	r3, #16
 800b908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b90a:	b2d2      	uxtb	r2, r2
 800b90c:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directory entries */
 800b90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b910:	f103 0211 	add.w	r2, r3, #17
 800b914:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b918:	2b03      	cmp	r3, #3
 800b91a:	d002      	beq.n	800b922 <f_mkfs+0x50e>
 800b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91e:	b29b      	uxth	r3, r3
 800b920:	e000      	b.n	800b924 <f_mkfs+0x510>
 800b922:	2300      	movs	r3, #0
 800b924:	4619      	mov	r1, r3
 800b926:	4610      	mov	r0, r2
 800b928:	f7fd fbdb 	bl	80090e2 <st_word>
		if (sz_vol < 0x10000) {
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b932:	d20d      	bcs.n	800b950 <f_mkfs+0x53c>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b936:	3313      	adds	r3, #19
 800b938:	69fa      	ldr	r2, [r7, #28]
 800b93a:	b292      	uxth	r2, r2
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fd fbcf 	bl	80090e2 <st_word>
 800b944:	e00b      	b.n	800b95e <f_mkfs+0x54a>
 800b946:	bf00      	nop
 800b948:	0800fc54 	.word	0x0800fc54
 800b94c:	0800fbd4 	.word	0x0800fbd4
		} else {
			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
 800b950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b952:	3320      	adds	r3, #32
 800b954:	69fa      	ldr	r2, [r7, #28]
 800b956:	4611      	mov	r1, r2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fd fbdd 	bl	8009118 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b960:	3315      	adds	r3, #21
 800b962:	22f8      	movs	r2, #248	; 0xf8
 800b964:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b968:	3318      	adds	r3, #24
 800b96a:	213f      	movs	r1, #63	; 0x3f
 800b96c:	4618      	mov	r0, r3
 800b96e:	f7fd fbb8 	bl	80090e2 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b974:	331a      	adds	r3, #26
 800b976:	21ff      	movs	r1, #255	; 0xff
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fd fbb2 	bl	80090e2 <st_word>
		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
 800b97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b980:	331c      	adds	r3, #28
 800b982:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b984:	4618      	mov	r0, r3
 800b986:	f7fd fbc7 	bl	8009118 <st_dword>
		if (fsty == FS_FAT32) {
 800b98a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b98e:	2b03      	cmp	r3, #3
 800b990:	d12d      	bne.n	800b9ee <f_mkfs+0x5da>
			st_dword(buf + BS_VolID32, vsn);			/* VSN */
 800b992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b994:	3343      	adds	r3, #67	; 0x43
 800b996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fd fbbd 	bl	8009118 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9a0:	3324      	adds	r3, #36	; 0x24
 800b9a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fd fbb7 	bl	8009118 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ac:	332c      	adds	r3, #44	; 0x2c
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fd fbb1 	bl	8009118 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9b8:	3330      	adds	r3, #48	; 0x30
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7fd fb90 	bl	80090e2 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b9c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9c4:	3332      	adds	r3, #50	; 0x32
 800b9c6:	2106      	movs	r1, #6
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fd fb8a 	bl	80090e2 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d0:	3340      	adds	r3, #64	; 0x40
 800b9d2:	2280      	movs	r2, #128	; 0x80
 800b9d4:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d8:	3342      	adds	r3, #66	; 0x42
 800b9da:	2229      	movs	r2, #41	; 0x29
 800b9dc:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e0:	3347      	adds	r3, #71	; 0x47
 800b9e2:	2213      	movs	r2, #19
 800b9e4:	49a4      	ldr	r1, [pc, #656]	; (800bc78 <f_mkfs+0x864>)
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f002 fe7f 	bl	800e6ea <memcpy>
 800b9ec:	e01c      	b.n	800ba28 <f_mkfs+0x614>
		} else {
			st_dword(buf + BS_VolID, vsn);				/* VSN */
 800b9ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f0:	3327      	adds	r3, #39	; 0x27
 800b9f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7fd fb8f 	bl	8009118 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9fc:	3316      	adds	r3, #22
 800b9fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba00:	b292      	uxth	r2, r2
 800ba02:	4611      	mov	r1, r2
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7fd fb6c 	bl	80090e2 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba0c:	3324      	adds	r3, #36	; 0x24
 800ba0e:	2280      	movs	r2, #128	; 0x80
 800ba10:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800ba12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba14:	3326      	adds	r3, #38	; 0x26
 800ba16:	2229      	movs	r2, #41	; 0x29
 800ba18:	701a      	strb	r2, [r3, #0]
			memcpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800ba1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba1c:	332b      	adds	r3, #43	; 0x2b
 800ba1e:	2213      	movs	r2, #19
 800ba20:	4996      	ldr	r1, [pc, #600]	; (800bc7c <f_mkfs+0x868>)
 800ba22:	4618      	mov	r0, r3
 800ba24:	f002 fe61 	bl	800e6ea <memcpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fd fb55 	bl	80090e2 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR sector */
 800ba38:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ba40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba42:	f7fd fad5 	bl	8008ff0 <disk_write>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d001      	beq.n	800ba50 <f_mkfs+0x63c>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	e10f      	b.n	800bc70 <f_mkfs+0x85c>

		/* Create FSINFO record if needed */
		if (fsty == FS_FAT32) {
 800ba50:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800ba54:	2b03      	cmp	r3, #3
 800ba56:	d141      	bne.n	800badc <f_mkfs+0x6c8>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800ba58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ba5a:	1d9a      	adds	r2, r3, #6
 800ba5c:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800ba60:	2301      	movs	r3, #1
 800ba62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba64:	f7fd fac4 	bl	8008ff0 <disk_write>
			memset(buf, 0, ss);
 800ba68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	2100      	movs	r1, #0
 800ba70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba72:	f002 fe62 	bl	800e73a <memset>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800ba76:	4982      	ldr	r1, [pc, #520]	; (800bc80 <f_mkfs+0x86c>)
 800ba78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba7a:	f7fd fb4d 	bl	8009118 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800ba7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba84:	497f      	ldr	r1, [pc, #508]	; (800bc84 <f_mkfs+0x870>)
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fd fb46 	bl	8009118 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800ba8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba94:	3b01      	subs	r3, #1
 800ba96:	4619      	mov	r1, r3
 800ba98:	4610      	mov	r0, r2
 800ba9a:	f7fd fb3d 	bl	8009118 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800ba9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baa0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800baa4:	2102      	movs	r1, #2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fd fb36 	bl	8009118 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800baac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bab2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fd fb13 	bl	80090e2 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800babc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800babe:	1dda      	adds	r2, r3, #7
 800bac0:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800bac4:	2301      	movs	r3, #1
 800bac6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bac8:	f7fd fa92 	bl	8008ff0 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800bacc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bace:	1c5a      	adds	r2, r3, #1
 800bad0:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800bad4:	2301      	movs	r3, #1
 800bad6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bad8:	f7fd fa8a 	bl	8008ff0 <disk_write>
		}

		/* Initialize FAT area */
		memset(buf, 0, sz_buf * ss);
 800badc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bae2:	fb02 f303 	mul.w	r3, r2, r3
 800bae6:	461a      	mov	r2, r3
 800bae8:	2100      	movs	r1, #0
 800baea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800baec:	f002 fe25 	bl	800e73a <memset>
		sect = b_fat;		/* FAT start sector */
 800baf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf2:	67bb      	str	r3, [r7, #120]	; 0x78
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800baf4:	2300      	movs	r3, #0
 800baf6:	653b      	str	r3, [r7, #80]	; 0x50
 800baf8:	e04c      	b.n	800bb94 <f_mkfs+0x780>
			if (fsty == FS_FAT32) {
 800bafa:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d113      	bne.n	800bb2a <f_mkfs+0x716>
				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
 800bb02:	f06f 0107 	mvn.w	r1, #7
 800bb06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb08:	f7fd fb06 	bl	8009118 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
 800bb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb0e:	3304      	adds	r3, #4
 800bb10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bb14:	4618      	mov	r0, r3
 800bb16:	f7fd faff 	bl	8009118 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
 800bb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7fd faf8 	bl	8009118 <st_dword>
 800bb28:	e00b      	b.n	800bb42 <f_mkfs+0x72e>
			} else {
				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
 800bb2a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d101      	bne.n	800bb36 <f_mkfs+0x722>
 800bb32:	4b55      	ldr	r3, [pc, #340]	; (800bc88 <f_mkfs+0x874>)
 800bb34:	e001      	b.n	800bb3a <f_mkfs+0x726>
 800bb36:	f06f 0307 	mvn.w	r3, #7
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb3e:	f7fd faeb 	bl	8009118 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800bb42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb44:	667b      	str	r3, [r7, #100]	; 0x64
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800bb46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	bf28      	it	cs
 800bb4e:	4613      	movcs	r3, r2
 800bb50:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800bb52:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800bb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb5c:	f7fd fa48 	bl	8008ff0 <disk_write>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <f_mkfs+0x756>
 800bb66:	2301      	movs	r3, #1
 800bb68:	e082      	b.n	800bc70 <f_mkfs+0x85c>
				memset(buf, 0, ss);	/* Rest of FAT all are cleared */
 800bb6a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800bb6e:	461a      	mov	r2, r3
 800bb70:	2100      	movs	r1, #0
 800bb72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb74:	f002 fde1 	bl	800e73a <memset>
				sect += n; nsect -= n;
 800bb78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bb7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb7c:	4413      	add	r3, r2
 800bb7e:	67bb      	str	r3, [r7, #120]	; 0x78
 800bb80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb84:	1ad3      	subs	r3, r2, r3
 800bb86:	667b      	str	r3, [r7, #100]	; 0x64
			} while (nsect);
 800bb88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1db      	bne.n	800bb46 <f_mkfs+0x732>
		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
 800bb8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb90:	3301      	adds	r3, #1
 800bb92:	653b      	str	r3, [r7, #80]	; 0x50
 800bb94:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d3ae      	bcc.n	800bafa <f_mkfs+0x6e6>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800bb9c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800bba0:	2b03      	cmp	r3, #3
 800bba2:	d101      	bne.n	800bba8 <f_mkfs+0x794>
 800bba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bba6:	e000      	b.n	800bbaa <f_mkfs+0x796>
 800bba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bbaa:	667b      	str	r3, [r7, #100]	; 0x64
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800bbac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	bf28      	it	cs
 800bbb4:	4613      	movcs	r3, r2
 800bbb6:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800bbb8:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800bbbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbbe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bbc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bbc2:	f7fd fa15 	bl	8008ff0 <disk_write>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <f_mkfs+0x7bc>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e04f      	b.n	800bc70 <f_mkfs+0x85c>
			sect += n; nsect -= n;
 800bbd0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bbd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbd4:	4413      	add	r3, r2
 800bbd6:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbd8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bbda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	667b      	str	r3, [r7, #100]	; 0x64
		} while (nsect);
 800bbe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d1e2      	bne.n	800bbac <f_mkfs+0x798>
	/* A FAT volume has been created here */

	/* Determine system ID in the MBR partition table */
	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
		sys = 0x07;		/* exFAT */
	} else if (fsty == FS_FAT32) {
 800bbe6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	d103      	bne.n	800bbf6 <f_mkfs+0x7e2>
		sys = 0x0C;		/* FAT32X */
 800bbee:	230c      	movs	r3, #12
 800bbf0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800bbf4:	e012      	b.n	800bc1c <f_mkfs+0x808>
	} else if (sz_vol >= 0x10000) {
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbfc:	d303      	bcc.n	800bc06 <f_mkfs+0x7f2>
		sys = 0x06;		/* FAT12/16 (large) */
 800bbfe:	2306      	movs	r3, #6
 800bc00:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800bc04:	e00a      	b.n	800bc1c <f_mkfs+0x808>
	} else if (fsty == FS_FAT16) {
 800bc06:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d103      	bne.n	800bc16 <f_mkfs+0x802>
		sys = 0x04;		/* FAT16 */
 800bc0e:	2304      	movs	r3, #4
 800bc10:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800bc14:	e002      	b.n	800bc1c <f_mkfs+0x808>
	} else {
		sys = 0x01;		/* FAT12 */
 800bc16:	2301      	movs	r3, #1
 800bc18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR */
		}
	} else {								/* Volume as a new single partition */
		if (!(fsopt & FM_SFD)) {			/* Create partition table if not in SFD format */
 800bc1c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800bc20:	f003 0308 	and.w	r3, r3, #8
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d116      	bne.n	800bc56 <f_mkfs+0x842>
			lba[0] = sz_vol; lba[1] = 0;
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	617b      	str	r3, [r7, #20]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	61bb      	str	r3, [r7, #24]
			res = create_partition(pdrv, lba, sys, buf);
 800bc30:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800bc34:	f107 0114 	add.w	r1, r7, #20
 800bc38:	f897 004b 	ldrb.w	r0, [r7, #75]	; 0x4b
 800bc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3e:	f7ff fac5 	bl	800b1cc <create_partition>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (res != FR_OK) LEAVE_MKFS(res);
 800bc48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <f_mkfs+0x842>
 800bc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc54:	e00c      	b.n	800bc70 <f_mkfs+0x85c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
 800bc56:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fd f9e6 	bl	8009030 <disk_ioctl>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <f_mkfs+0x85a>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <f_mkfs+0x85c>

	LEAVE_MKFS(FR_OK);
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3780      	adds	r7, #128	; 0x80
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	0800fbe0 	.word	0x0800fbe0
 800bc7c:	0800fbf4 	.word	0x0800fbf4
 800bc80:	41615252 	.word	0x41615252
 800bc84:	61417272 	.word	0x61417272
 800bc88:	00fffff8 	.word	0x00fffff8

0800bc8c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b087      	sub	sp, #28
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	4613      	mov	r3, r2
 800bc98:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < FF_VOLUMES)
 800bca2:	4b1f      	ldr	r3, [pc, #124]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bca4:	7a5b      	ldrb	r3, [r3, #9]
 800bca6:	b2db      	uxtb	r3, r3
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d131      	bne.n	800bd10 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bcac:	4b1c      	ldr	r3, [pc, #112]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bcae:	7a5b      	ldrb	r3, [r3, #9]
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	4b1a      	ldr	r3, [pc, #104]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bcba:	4b19      	ldr	r3, [pc, #100]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bcbc:	7a5b      	ldrb	r3, [r3, #9]
 800bcbe:	b2db      	uxtb	r3, r3
 800bcc0:	4a17      	ldr	r2, [pc, #92]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bcca:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bccc:	7a5b      	ldrb	r3, [r3, #9]
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	4b13      	ldr	r3, [pc, #76]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bcd4:	4413      	add	r3, r2
 800bcd6:	79fa      	ldrb	r2, [r7, #7]
 800bcd8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bcda:	4b11      	ldr	r3, [pc, #68]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bcdc:	7a5b      	ldrb	r3, [r3, #9]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	1c5a      	adds	r2, r3, #1
 800bce2:	b2d1      	uxtb	r1, r2
 800bce4:	4a0e      	ldr	r2, [pc, #56]	; (800bd20 <FATFS_LinkDriverEx+0x94>)
 800bce6:	7251      	strb	r1, [r2, #9]
 800bce8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bcea:	7dbb      	ldrb	r3, [r7, #22]
 800bcec:	3330      	adds	r3, #48	; 0x30
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	223a      	movs	r2, #58	; 0x3a
 800bcfa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	3302      	adds	r3, #2
 800bd00:	222f      	movs	r2, #47	; 0x2f
 800bd02:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	3303      	adds	r3, #3
 800bd08:	2200      	movs	r2, #0
 800bd0a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	240011ac 	.word	0x240011ac

0800bd24 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bd2e:	2200      	movs	r2, #0
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7ff ffaa 	bl	800bc8c <FATFS_LinkDriverEx>
 800bd38:	4603      	mov	r3, r0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bd42:	b480      	push	{r7}
 800bd44:	b085      	sub	sp, #20
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	4603      	mov	r3, r0
 800bd4a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bd50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd54:	2b84      	cmp	r3, #132	; 0x84
 800bd56:	d005      	beq.n	800bd64 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bd58:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	3303      	adds	r3, #3
 800bd62:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bd64:	68fb      	ldr	r3, [r7, #12]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3714      	adds	r7, #20
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bd72:	b480      	push	{r7}
 800bd74:	b083      	sub	sp, #12
 800bd76:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd78:	f3ef 8305 	mrs	r3, IPSR
 800bd7c:	607b      	str	r3, [r7, #4]
  return(result);
 800bd7e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	bf14      	ite	ne
 800bd84:	2301      	movne	r3, #1
 800bd86:	2300      	moveq	r3, #0
 800bd88:	b2db      	uxtb	r3, r3
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bd9a:	f001 fe2b 	bl	800d9f4 <vTaskStartScheduler>
  
  return osOK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800bda8:	f002 fa68 	bl	800e27c <xTaskGetSchedulerState>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	d101      	bne.n	800bdb6 <osKernelRunning+0x12>
    return 0;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	e000      	b.n	800bdb8 <osKernelRunning+0x14>
  else
    return 1;
 800bdb6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bdc0:	f7ff ffd7 	bl	800bd72 <inHandlerMode>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bdca:	f001 ff37 	bl	800dc3c <xTaskGetTickCountFromISR>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	e002      	b.n	800bdd8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bdd2:	f001 ff23 	bl	800dc1c <xTaskGetTickCount>
 800bdd6:	4603      	mov	r3, r0
  }
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdde:	b089      	sub	sp, #36	; 0x24
 800bde0:	af04      	add	r7, sp, #16
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d020      	beq.n	800be30 <osThreadCreate+0x54>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	699b      	ldr	r3, [r3, #24]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d01c      	beq.n	800be30 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	685c      	ldr	r4, [r3, #4]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681d      	ldr	r5, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	691e      	ldr	r6, [r3, #16]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff ff9a 	bl	800bd42 <makeFreeRtosPriority>
 800be0e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	687a      	ldr	r2, [r7, #4]
 800be16:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be18:	9202      	str	r2, [sp, #8]
 800be1a:	9301      	str	r3, [sp, #4]
 800be1c:	9100      	str	r1, [sp, #0]
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	4632      	mov	r2, r6
 800be22:	4629      	mov	r1, r5
 800be24:	4620      	mov	r0, r4
 800be26:	f001 fc07 	bl	800d638 <xTaskCreateStatic>
 800be2a:	4603      	mov	r3, r0
 800be2c:	60fb      	str	r3, [r7, #12]
 800be2e:	e01c      	b.n	800be6a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	685c      	ldr	r4, [r3, #4]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800be3c:	b29e      	uxth	r6, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800be44:	4618      	mov	r0, r3
 800be46:	f7ff ff7c 	bl	800bd42 <makeFreeRtosPriority>
 800be4a:	4602      	mov	r2, r0
 800be4c:	f107 030c 	add.w	r3, r7, #12
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	9200      	str	r2, [sp, #0]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	4632      	mov	r2, r6
 800be58:	4629      	mov	r1, r5
 800be5a:	4620      	mov	r0, r4
 800be5c:	f001 fc49 	bl	800d6f2 <xTaskCreate>
 800be60:	4603      	mov	r3, r0
 800be62:	2b01      	cmp	r3, #1
 800be64:	d001      	beq.n	800be6a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800be66:	2300      	movs	r3, #0
 800be68:	e000      	b.n	800be6c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800be6a:	68fb      	ldr	r3, [r7, #12]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be74 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d001      	beq.n	800be8a <osDelay+0x16>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	e000      	b.n	800be8c <osDelay+0x18>
 800be8a:	2301      	movs	r3, #1
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 fd7d 	bl	800d98c <vTaskDelay>
  
  return osOK;
 800be92:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800beac:	f7ff ff61 	bl	800bd72 <inHandlerMode>
 800beb0:	4603      	mov	r3, r0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d016      	beq.n	800bee4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800beb6:	f107 0308 	add.w	r3, r7, #8
 800beba:	4619      	mov	r1, r3
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f001 f8be 	bl	800d03e <xQueueGiveFromISR>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d001      	beq.n	800becc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bec8:	23ff      	movs	r3, #255	; 0xff
 800beca:	e017      	b.n	800befc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d013      	beq.n	800befa <osSemaphoreRelease+0x5e>
 800bed2:	4b0c      	ldr	r3, [pc, #48]	; (800bf04 <osSemaphoreRelease+0x68>)
 800bed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed8:	601a      	str	r2, [r3, #0]
 800beda:	f3bf 8f4f 	dsb	sy
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	e00a      	b.n	800befa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bee4:	2300      	movs	r3, #0
 800bee6:	2200      	movs	r2, #0
 800bee8:	2100      	movs	r1, #0
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 ff0e 	bl	800cd0c <xQueueGenericSend>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d001      	beq.n	800befa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bef6:	23ff      	movs	r3, #255	; 0xff
 800bef8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800befa:	68fb      	ldr	r3, [r7, #12]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	e000ed04 	.word	0xe000ed04

0800bf08 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af02      	add	r7, sp, #8
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d011      	beq.n	800bf3e <osMessageCreate+0x36>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00d      	beq.n	800bf3e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6818      	ldr	r0, [r3, #0]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6859      	ldr	r1, [r3, #4]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	2400      	movs	r4, #0
 800bf34:	9400      	str	r4, [sp, #0]
 800bf36:	f000 fe17 	bl	800cb68 <xQueueGenericCreateStatic>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	e008      	b.n	800bf50 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6818      	ldr	r0, [r3, #0]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	4619      	mov	r1, r3
 800bf4a:	f000 fe85 	bl	800cc58 <xQueueGenericCreate>
 800bf4e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd90      	pop	{r4, r7, pc}

0800bf58 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf64:	2300      	movs	r3, #0
 800bf66:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <osMessagePut+0x1e>
    ticks = 1;
 800bf72:	2301      	movs	r3, #1
 800bf74:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bf76:	f7ff fefc 	bl	800bd72 <inHandlerMode>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d018      	beq.n	800bfb2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bf80:	f107 0210 	add.w	r2, r7, #16
 800bf84:	f107 0108 	add.w	r1, r7, #8
 800bf88:	2300      	movs	r3, #0
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f000 ffbc 	bl	800cf08 <xQueueGenericSendFromISR>
 800bf90:	4603      	mov	r3, r0
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d001      	beq.n	800bf9a <osMessagePut+0x42>
      return osErrorOS;
 800bf96:	23ff      	movs	r3, #255	; 0xff
 800bf98:	e018      	b.n	800bfcc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d014      	beq.n	800bfca <osMessagePut+0x72>
 800bfa0:	4b0c      	ldr	r3, [pc, #48]	; (800bfd4 <osMessagePut+0x7c>)
 800bfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	e00b      	b.n	800bfca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bfb2:	f107 0108 	add.w	r1, r7, #8
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f000 fea6 	bl	800cd0c <xQueueGenericSend>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d001      	beq.n	800bfca <osMessagePut+0x72>
      return osErrorOS;
 800bfc6:	23ff      	movs	r3, #255	; 0xff
 800bfc8:	e000      	b.n	800bfcc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	e000ed04 	.word	0xe000ed04

0800bfd8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800bfd8:	b590      	push	{r4, r7, lr}
 800bfda:	b08b      	sub	sp, #44	; 0x2c
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d10a      	bne.n	800c008 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800bff2:	2380      	movs	r3, #128	; 0x80
 800bff4:	617b      	str	r3, [r7, #20]
    return event;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	461c      	mov	r4, r3
 800bffa:	f107 0314 	add.w	r3, r7, #20
 800bffe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c006:	e054      	b.n	800c0b2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c008:	2300      	movs	r3, #0
 800c00a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c016:	d103      	bne.n	800c020 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
 800c01e:	e009      	b.n	800c034 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d006      	beq.n	800c034 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <osMessageGet+0x5c>
      ticks = 1;
 800c030:	2301      	movs	r3, #1
 800c032:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c034:	f7ff fe9d 	bl	800bd72 <inHandlerMode>
 800c038:	4603      	mov	r3, r0
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d01c      	beq.n	800c078 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c03e:	f107 0220 	add.w	r2, r7, #32
 800c042:	f107 0314 	add.w	r3, r7, #20
 800c046:	3304      	adds	r3, #4
 800c048:	4619      	mov	r1, r3
 800c04a:	68b8      	ldr	r0, [r7, #8]
 800c04c:	f001 f964 	bl	800d318 <xQueueReceiveFromISR>
 800c050:	4603      	mov	r3, r0
 800c052:	2b01      	cmp	r3, #1
 800c054:	d102      	bne.n	800c05c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c056:	2310      	movs	r3, #16
 800c058:	617b      	str	r3, [r7, #20]
 800c05a:	e001      	b.n	800c060 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c05c:	2300      	movs	r3, #0
 800c05e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c060:	6a3b      	ldr	r3, [r7, #32]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d01d      	beq.n	800c0a2 <osMessageGet+0xca>
 800c066:	4b15      	ldr	r3, [pc, #84]	; (800c0bc <osMessageGet+0xe4>)
 800c068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	f3bf 8f4f 	dsb	sy
 800c072:	f3bf 8f6f 	isb	sy
 800c076:	e014      	b.n	800c0a2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c078:	f107 0314 	add.w	r3, r7, #20
 800c07c:	3304      	adds	r3, #4
 800c07e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c080:	4619      	mov	r1, r3
 800c082:	68b8      	ldr	r0, [r7, #8]
 800c084:	f001 f868 	bl	800d158 <xQueueReceive>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d102      	bne.n	800c094 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c08e:	2310      	movs	r3, #16
 800c090:	617b      	str	r3, [r7, #20]
 800c092:	e006      	b.n	800c0a2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c096:	2b00      	cmp	r3, #0
 800c098:	d101      	bne.n	800c09e <osMessageGet+0xc6>
 800c09a:	2300      	movs	r3, #0
 800c09c:	e000      	b.n	800c0a0 <osMessageGet+0xc8>
 800c09e:	2340      	movs	r3, #64	; 0x40
 800c0a0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	461c      	mov	r4, r3
 800c0a6:	f107 0314 	add.w	r3, r7, #20
 800c0aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	372c      	adds	r7, #44	; 0x2c
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd90      	pop	{r4, r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	e000ed04 	.word	0xe000ed04

0800c0c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b08a      	sub	sp, #40	; 0x28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0cc:	f001 fcfc 	bl	800dac8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0d0:	4b5b      	ldr	r3, [pc, #364]	; (800c240 <pvPortMalloc+0x180>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d101      	bne.n	800c0dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0d8:	f000 f920 	bl	800c31c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0dc:	4b59      	ldr	r3, [pc, #356]	; (800c244 <pvPortMalloc+0x184>)
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f040 8093 	bne.w	800c210 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d01d      	beq.n	800c12c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f003 0307 	and.w	r3, r3, #7
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d014      	beq.n	800c12c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f023 0307 	bic.w	r3, r3, #7
 800c108:	3308      	adds	r3, #8
 800c10a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f003 0307 	and.w	r3, r3, #7
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00a      	beq.n	800c12c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	f383 8811 	msr	BASEPRI, r3
 800c11e:	f3bf 8f6f 	isb	sy
 800c122:	f3bf 8f4f 	dsb	sy
 800c126:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c128:	bf00      	nop
 800c12a:	e7fe      	b.n	800c12a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d06e      	beq.n	800c210 <pvPortMalloc+0x150>
 800c132:	4b45      	ldr	r3, [pc, #276]	; (800c248 <pvPortMalloc+0x188>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d869      	bhi.n	800c210 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c13c:	4b43      	ldr	r3, [pc, #268]	; (800c24c <pvPortMalloc+0x18c>)
 800c13e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c140:	4b42      	ldr	r3, [pc, #264]	; (800c24c <pvPortMalloc+0x18c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c146:	e004      	b.n	800c152 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d903      	bls.n	800c164 <pvPortMalloc+0xa4>
 800c15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1f1      	bne.n	800c148 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c164:	4b36      	ldr	r3, [pc, #216]	; (800c240 <pvPortMalloc+0x180>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d050      	beq.n	800c210 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c16e:	6a3b      	ldr	r3, [r7, #32]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2208      	movs	r2, #8
 800c174:	4413      	add	r3, r2
 800c176:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	6a3b      	ldr	r3, [r7, #32]
 800c17e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	1ad2      	subs	r2, r2, r3
 800c188:	2308      	movs	r3, #8
 800c18a:	005b      	lsls	r3, r3, #1
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d91f      	bls.n	800c1d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4413      	add	r3, r2
 800c196:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	f003 0307 	and.w	r3, r3, #7
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00a      	beq.n	800c1b8 <pvPortMalloc+0xf8>
	__asm volatile
 800c1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a6:	f383 8811 	msr	BASEPRI, r3
 800c1aa:	f3bf 8f6f 	isb	sy
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	613b      	str	r3, [r7, #16]
}
 800c1b4:	bf00      	nop
 800c1b6:	e7fe      	b.n	800c1b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	1ad2      	subs	r2, r2, r3
 800c1c0:	69bb      	ldr	r3, [r7, #24]
 800c1c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1ca:	69b8      	ldr	r0, [r7, #24]
 800c1cc:	f000 f908 	bl	800c3e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1d0:	4b1d      	ldr	r3, [pc, #116]	; (800c248 <pvPortMalloc+0x188>)
 800c1d2:	681a      	ldr	r2, [r3, #0]
 800c1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	4a1b      	ldr	r2, [pc, #108]	; (800c248 <pvPortMalloc+0x188>)
 800c1dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1de:	4b1a      	ldr	r3, [pc, #104]	; (800c248 <pvPortMalloc+0x188>)
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	4b1b      	ldr	r3, [pc, #108]	; (800c250 <pvPortMalloc+0x190>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d203      	bcs.n	800c1f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1ea:	4b17      	ldr	r3, [pc, #92]	; (800c248 <pvPortMalloc+0x188>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a18      	ldr	r2, [pc, #96]	; (800c250 <pvPortMalloc+0x190>)
 800c1f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	4b13      	ldr	r3, [pc, #76]	; (800c244 <pvPortMalloc+0x184>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c206:	4b13      	ldr	r3, [pc, #76]	; (800c254 <pvPortMalloc+0x194>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3301      	adds	r3, #1
 800c20c:	4a11      	ldr	r2, [pc, #68]	; (800c254 <pvPortMalloc+0x194>)
 800c20e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c210:	f001 fc68 	bl	800dae4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c214:	69fb      	ldr	r3, [r7, #28]
 800c216:	f003 0307 	and.w	r3, r3, #7
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00a      	beq.n	800c234 <pvPortMalloc+0x174>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	60fb      	str	r3, [r7, #12]
}
 800c230:	bf00      	nop
 800c232:	e7fe      	b.n	800c232 <pvPortMalloc+0x172>
	return pvReturn;
 800c234:	69fb      	ldr	r3, [r7, #28]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3728      	adds	r7, #40	; 0x28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	240089c0 	.word	0x240089c0
 800c244:	240089d4 	.word	0x240089d4
 800c248:	240089c4 	.word	0x240089c4
 800c24c:	240089b8 	.word	0x240089b8
 800c250:	240089c8 	.word	0x240089c8
 800c254:	240089cc 	.word	0x240089cc

0800c258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b086      	sub	sp, #24
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d04d      	beq.n	800c306 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c26a:	2308      	movs	r3, #8
 800c26c:	425b      	negs	r3, r3
 800c26e:	697a      	ldr	r2, [r7, #20]
 800c270:	4413      	add	r3, r2
 800c272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	4b24      	ldr	r3, [pc, #144]	; (800c310 <vPortFree+0xb8>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4013      	ands	r3, r2
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10a      	bne.n	800c29c <vPortFree+0x44>
	__asm volatile
 800c286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	60fb      	str	r3, [r7, #12]
}
 800c298:	bf00      	nop
 800c29a:	e7fe      	b.n	800c29a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00a      	beq.n	800c2ba <vPortFree+0x62>
	__asm volatile
 800c2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	60bb      	str	r3, [r7, #8]
}
 800c2b6:	bf00      	nop
 800c2b8:	e7fe      	b.n	800c2b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	4b14      	ldr	r3, [pc, #80]	; (800c310 <vPortFree+0xb8>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4013      	ands	r3, r2
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d01e      	beq.n	800c306 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d11a      	bne.n	800c306 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	4b0e      	ldr	r3, [pc, #56]	; (800c310 <vPortFree+0xb8>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	43db      	mvns	r3, r3
 800c2da:	401a      	ands	r2, r3
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2e0:	f001 fbf2 	bl	800dac8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	685a      	ldr	r2, [r3, #4]
 800c2e8:	4b0a      	ldr	r3, [pc, #40]	; (800c314 <vPortFree+0xbc>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	4a09      	ldr	r2, [pc, #36]	; (800c314 <vPortFree+0xbc>)
 800c2f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2f2:	6938      	ldr	r0, [r7, #16]
 800c2f4:	f000 f874 	bl	800c3e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c2f8:	4b07      	ldr	r3, [pc, #28]	; (800c318 <vPortFree+0xc0>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	4a06      	ldr	r2, [pc, #24]	; (800c318 <vPortFree+0xc0>)
 800c300:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c302:	f001 fbef 	bl	800dae4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c306:	bf00      	nop
 800c308:	3718      	adds	r7, #24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	240089d4 	.word	0x240089d4
 800c314:	240089c4 	.word	0x240089c4
 800c318:	240089d0 	.word	0x240089d0

0800c31c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c31c:	b480      	push	{r7}
 800c31e:	b085      	sub	sp, #20
 800c320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c322:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 800c326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c328:	4b27      	ldr	r3, [pc, #156]	; (800c3c8 <prvHeapInit+0xac>)
 800c32a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f003 0307 	and.w	r3, r3, #7
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00c      	beq.n	800c350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	3307      	adds	r3, #7
 800c33a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	f023 0307 	bic.w	r3, r3, #7
 800c342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	4a1f      	ldr	r2, [pc, #124]	; (800c3c8 <prvHeapInit+0xac>)
 800c34c:	4413      	add	r3, r2
 800c34e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c354:	4a1d      	ldr	r2, [pc, #116]	; (800c3cc <prvHeapInit+0xb0>)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c35a:	4b1c      	ldr	r3, [pc, #112]	; (800c3cc <prvHeapInit+0xb0>)
 800c35c:	2200      	movs	r2, #0
 800c35e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	68ba      	ldr	r2, [r7, #8]
 800c364:	4413      	add	r3, r2
 800c366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c368:	2208      	movs	r2, #8
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	1a9b      	subs	r3, r3, r2
 800c36e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0307 	bic.w	r3, r3, #7
 800c376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	4a15      	ldr	r2, [pc, #84]	; (800c3d0 <prvHeapInit+0xb4>)
 800c37c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c37e:	4b14      	ldr	r3, [pc, #80]	; (800c3d0 <prvHeapInit+0xb4>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2200      	movs	r2, #0
 800c384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c386:	4b12      	ldr	r3, [pc, #72]	; (800c3d0 <prvHeapInit+0xb4>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	68fa      	ldr	r2, [r7, #12]
 800c396:	1ad2      	subs	r2, r2, r3
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c39c:	4b0c      	ldr	r3, [pc, #48]	; (800c3d0 <prvHeapInit+0xb4>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	4a0a      	ldr	r2, [pc, #40]	; (800c3d4 <prvHeapInit+0xb8>)
 800c3aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	4a09      	ldr	r2, [pc, #36]	; (800c3d8 <prvHeapInit+0xbc>)
 800c3b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3b4:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <prvHeapInit+0xc0>)
 800c3b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c3ba:	601a      	str	r2, [r3, #0]
}
 800c3bc:	bf00      	nop
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	240011b8 	.word	0x240011b8
 800c3cc:	240089b8 	.word	0x240089b8
 800c3d0:	240089c0 	.word	0x240089c0
 800c3d4:	240089c8 	.word	0x240089c8
 800c3d8:	240089c4 	.word	0x240089c4
 800c3dc:	240089d4 	.word	0x240089d4

0800c3e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3e8:	4b28      	ldr	r3, [pc, #160]	; (800c48c <prvInsertBlockIntoFreeList+0xac>)
 800c3ea:	60fb      	str	r3, [r7, #12]
 800c3ec:	e002      	b.n	800c3f4 <prvInsertBlockIntoFreeList+0x14>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	60fb      	str	r3, [r7, #12]
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d8f7      	bhi.n	800c3ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	4413      	add	r3, r2
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	429a      	cmp	r2, r3
 800c40e:	d108      	bne.n	800c422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	685a      	ldr	r2, [r3, #4]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	441a      	add	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	685b      	ldr	r3, [r3, #4]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	441a      	add	r2, r3
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d118      	bne.n	800c468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	4b15      	ldr	r3, [pc, #84]	; (800c490 <prvInsertBlockIntoFreeList+0xb0>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	429a      	cmp	r2, r3
 800c440:	d00d      	beq.n	800c45e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	685a      	ldr	r2, [r3, #4]
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	441a      	add	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	e008      	b.n	800c470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c45e:	4b0c      	ldr	r3, [pc, #48]	; (800c490 <prvInsertBlockIntoFreeList+0xb0>)
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	601a      	str	r2, [r3, #0]
 800c466:	e003      	b.n	800c470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	429a      	cmp	r2, r3
 800c476:	d002      	beq.n	800c47e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c47e:	bf00      	nop
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	240089b8 	.word	0x240089b8
 800c490:	240089c0 	.word	0x240089c0

0800c494 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f103 0208 	add.w	r2, r3, #8
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f103 0208 	add.w	r2, r3, #8
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f103 0208 	add.w	r2, r3, #8
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c4e2:	bf00      	nop
 800c4e4:	370c      	adds	r7, #12
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr

0800c4ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c4ee:	b480      	push	{r7}
 800c4f0:	b085      	sub	sp, #20
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	689a      	ldr	r2, [r3, #8]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	683a      	ldr	r2, [r7, #0]
 800c512:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	1c5a      	adds	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	601a      	str	r2, [r3, #0]
}
 800c52a:	bf00      	nop
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr

0800c536 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c536:	b480      	push	{r7}
 800c538:	b085      	sub	sp, #20
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c54c:	d103      	bne.n	800c556 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	691b      	ldr	r3, [r3, #16]
 800c552:	60fb      	str	r3, [r7, #12]
 800c554:	e00c      	b.n	800c570 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3308      	adds	r3, #8
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	e002      	b.n	800c564 <vListInsert+0x2e>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d2f6      	bcs.n	800c55e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	683a      	ldr	r2, [r7, #0]
 800c57e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	683a      	ldr	r2, [r7, #0]
 800c58a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	601a      	str	r2, [r3, #0]
}
 800c59c:	bf00      	nop
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	691b      	ldr	r3, [r3, #16]
 800c5b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	6892      	ldr	r2, [r2, #8]
 800c5be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	6852      	ldr	r2, [r2, #4]
 800c5c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d103      	bne.n	800c5dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	689a      	ldr	r2, [r3, #8]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	1e5a      	subs	r2, r3, #1
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3714      	adds	r7, #20
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3b04      	subs	r3, #4
 800c60c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c614:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	3b04      	subs	r3, #4
 800c61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f023 0201 	bic.w	r2, r3, #1
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3b04      	subs	r3, #4
 800c62a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c62c:	4a0c      	ldr	r2, [pc, #48]	; (800c660 <pxPortInitialiseStack+0x64>)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	3b14      	subs	r3, #20
 800c636:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	3b04      	subs	r3, #4
 800c642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	f06f 0202 	mvn.w	r2, #2
 800c64a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	3b20      	subs	r3, #32
 800c650:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c652:	68fb      	ldr	r3, [r7, #12]
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	0800c665 	.word	0x0800c665

0800c664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c66e:	4b12      	ldr	r3, [pc, #72]	; (800c6b8 <prvTaskExitError+0x54>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c676:	d00a      	beq.n	800c68e <prvTaskExitError+0x2a>
	__asm volatile
 800c678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c67c:	f383 8811 	msr	BASEPRI, r3
 800c680:	f3bf 8f6f 	isb	sy
 800c684:	f3bf 8f4f 	dsb	sy
 800c688:	60fb      	str	r3, [r7, #12]
}
 800c68a:	bf00      	nop
 800c68c:	e7fe      	b.n	800c68c <prvTaskExitError+0x28>
	__asm volatile
 800c68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c692:	f383 8811 	msr	BASEPRI, r3
 800c696:	f3bf 8f6f 	isb	sy
 800c69a:	f3bf 8f4f 	dsb	sy
 800c69e:	60bb      	str	r3, [r7, #8]
}
 800c6a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6a2:	bf00      	nop
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0fc      	beq.n	800c6a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6aa:	bf00      	nop
 800c6ac:	bf00      	nop
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr
 800c6b8:	24000010 	.word	0x24000010
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6c0:	4b07      	ldr	r3, [pc, #28]	; (800c6e0 <pxCurrentTCBConst2>)
 800c6c2:	6819      	ldr	r1, [r3, #0]
 800c6c4:	6808      	ldr	r0, [r1, #0]
 800c6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	f380 8809 	msr	PSP, r0
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f04f 0000 	mov.w	r0, #0
 800c6d6:	f380 8811 	msr	BASEPRI, r0
 800c6da:	4770      	bx	lr
 800c6dc:	f3af 8000 	nop.w

0800c6e0 <pxCurrentTCBConst2>:
 800c6e0:	240089e0 	.word	0x240089e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c6e4:	bf00      	nop
 800c6e6:	bf00      	nop

0800c6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c6e8:	4808      	ldr	r0, [pc, #32]	; (800c70c <prvPortStartFirstTask+0x24>)
 800c6ea:	6800      	ldr	r0, [r0, #0]
 800c6ec:	6800      	ldr	r0, [r0, #0]
 800c6ee:	f380 8808 	msr	MSP, r0
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8814 	msr	CONTROL, r0
 800c6fa:	b662      	cpsie	i
 800c6fc:	b661      	cpsie	f
 800c6fe:	f3bf 8f4f 	dsb	sy
 800c702:	f3bf 8f6f 	isb	sy
 800c706:	df00      	svc	0
 800c708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c70a:	bf00      	nop
 800c70c:	e000ed08 	.word	0xe000ed08

0800c710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c716:	4b46      	ldr	r3, [pc, #280]	; (800c830 <xPortStartScheduler+0x120>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a46      	ldr	r2, [pc, #280]	; (800c834 <xPortStartScheduler+0x124>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d10a      	bne.n	800c736 <xPortStartScheduler+0x26>
	__asm volatile
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	f383 8811 	msr	BASEPRI, r3
 800c728:	f3bf 8f6f 	isb	sy
 800c72c:	f3bf 8f4f 	dsb	sy
 800c730:	613b      	str	r3, [r7, #16]
}
 800c732:	bf00      	nop
 800c734:	e7fe      	b.n	800c734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c736:	4b3e      	ldr	r3, [pc, #248]	; (800c830 <xPortStartScheduler+0x120>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a3f      	ldr	r2, [pc, #252]	; (800c838 <xPortStartScheduler+0x128>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d10a      	bne.n	800c756 <xPortStartScheduler+0x46>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	60fb      	str	r3, [r7, #12]
}
 800c752:	bf00      	nop
 800c754:	e7fe      	b.n	800c754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c756:	4b39      	ldr	r3, [pc, #228]	; (800c83c <xPortStartScheduler+0x12c>)
 800c758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	22ff      	movs	r2, #255	; 0xff
 800c766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	b2db      	uxtb	r3, r3
 800c774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c778:	b2da      	uxtb	r2, r3
 800c77a:	4b31      	ldr	r3, [pc, #196]	; (800c840 <xPortStartScheduler+0x130>)
 800c77c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c77e:	4b31      	ldr	r3, [pc, #196]	; (800c844 <xPortStartScheduler+0x134>)
 800c780:	2207      	movs	r2, #7
 800c782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c784:	e009      	b.n	800c79a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c786:	4b2f      	ldr	r3, [pc, #188]	; (800c844 <xPortStartScheduler+0x134>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	3b01      	subs	r3, #1
 800c78c:	4a2d      	ldr	r2, [pc, #180]	; (800c844 <xPortStartScheduler+0x134>)
 800c78e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c790:	78fb      	ldrb	r3, [r7, #3]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	b2db      	uxtb	r3, r3
 800c798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c79a:	78fb      	ldrb	r3, [r7, #3]
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7a2:	2b80      	cmp	r3, #128	; 0x80
 800c7a4:	d0ef      	beq.n	800c786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7a6:	4b27      	ldr	r3, [pc, #156]	; (800c844 <xPortStartScheduler+0x134>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f1c3 0307 	rsb	r3, r3, #7
 800c7ae:	2b04      	cmp	r3, #4
 800c7b0:	d00a      	beq.n	800c7c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	60bb      	str	r3, [r7, #8]
}
 800c7c4:	bf00      	nop
 800c7c6:	e7fe      	b.n	800c7c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7c8:	4b1e      	ldr	r3, [pc, #120]	; (800c844 <xPortStartScheduler+0x134>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	021b      	lsls	r3, r3, #8
 800c7ce:	4a1d      	ldr	r2, [pc, #116]	; (800c844 <xPortStartScheduler+0x134>)
 800c7d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7d2:	4b1c      	ldr	r3, [pc, #112]	; (800c844 <xPortStartScheduler+0x134>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c7da:	4a1a      	ldr	r2, [pc, #104]	; (800c844 <xPortStartScheduler+0x134>)
 800c7dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	b2da      	uxtb	r2, r3
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c7e6:	4b18      	ldr	r3, [pc, #96]	; (800c848 <xPortStartScheduler+0x138>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	4a17      	ldr	r2, [pc, #92]	; (800c848 <xPortStartScheduler+0x138>)
 800c7ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c7f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c7f2:	4b15      	ldr	r3, [pc, #84]	; (800c848 <xPortStartScheduler+0x138>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a14      	ldr	r2, [pc, #80]	; (800c848 <xPortStartScheduler+0x138>)
 800c7f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c7fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c7fe:	f000 f8dd 	bl	800c9bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c802:	4b12      	ldr	r3, [pc, #72]	; (800c84c <xPortStartScheduler+0x13c>)
 800c804:	2200      	movs	r2, #0
 800c806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c808:	f000 f8fc 	bl	800ca04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c80c:	4b10      	ldr	r3, [pc, #64]	; (800c850 <xPortStartScheduler+0x140>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a0f      	ldr	r2, [pc, #60]	; (800c850 <xPortStartScheduler+0x140>)
 800c812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c818:	f7ff ff66 	bl	800c6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c81c:	f001 fad8 	bl	800ddd0 <vTaskSwitchContext>
	prvTaskExitError();
 800c820:	f7ff ff20 	bl	800c664 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3718      	adds	r7, #24
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	e000ed00 	.word	0xe000ed00
 800c834:	410fc271 	.word	0x410fc271
 800c838:	410fc270 	.word	0x410fc270
 800c83c:	e000e400 	.word	0xe000e400
 800c840:	240089d8 	.word	0x240089d8
 800c844:	240089dc 	.word	0x240089dc
 800c848:	e000ed20 	.word	0xe000ed20
 800c84c:	24000010 	.word	0x24000010
 800c850:	e000ef34 	.word	0xe000ef34

0800c854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c854:	b480      	push	{r7}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	607b      	str	r3, [r7, #4]
}
 800c86c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c86e:	4b0f      	ldr	r3, [pc, #60]	; (800c8ac <vPortEnterCritical+0x58>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3301      	adds	r3, #1
 800c874:	4a0d      	ldr	r2, [pc, #52]	; (800c8ac <vPortEnterCritical+0x58>)
 800c876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c878:	4b0c      	ldr	r3, [pc, #48]	; (800c8ac <vPortEnterCritical+0x58>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d10f      	bne.n	800c8a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c880:	4b0b      	ldr	r3, [pc, #44]	; (800c8b0 <vPortEnterCritical+0x5c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00a      	beq.n	800c8a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	603b      	str	r3, [r7, #0]
}
 800c89c:	bf00      	nop
 800c89e:	e7fe      	b.n	800c89e <vPortEnterCritical+0x4a>
	}
}
 800c8a0:	bf00      	nop
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr
 800c8ac:	24000010 	.word	0x24000010
 800c8b0:	e000ed04 	.word	0xe000ed04

0800c8b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b083      	sub	sp, #12
 800c8b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8ba:	4b12      	ldr	r3, [pc, #72]	; (800c904 <vPortExitCritical+0x50>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d10a      	bne.n	800c8d8 <vPortExitCritical+0x24>
	__asm volatile
 800c8c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c6:	f383 8811 	msr	BASEPRI, r3
 800c8ca:	f3bf 8f6f 	isb	sy
 800c8ce:	f3bf 8f4f 	dsb	sy
 800c8d2:	607b      	str	r3, [r7, #4]
}
 800c8d4:	bf00      	nop
 800c8d6:	e7fe      	b.n	800c8d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <vPortExitCritical+0x50>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	4a09      	ldr	r2, [pc, #36]	; (800c904 <vPortExitCritical+0x50>)
 800c8e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c8e2:	4b08      	ldr	r3, [pc, #32]	; (800c904 <vPortExitCritical+0x50>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d105      	bne.n	800c8f6 <vPortExitCritical+0x42>
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c8f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c8f6:	bf00      	nop
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	24000010 	.word	0x24000010
	...

0800c910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c910:	f3ef 8009 	mrs	r0, PSP
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	4b15      	ldr	r3, [pc, #84]	; (800c970 <pxCurrentTCBConst>)
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	f01e 0f10 	tst.w	lr, #16
 800c920:	bf08      	it	eq
 800c922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92a:	6010      	str	r0, [r2, #0]
 800c92c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c930:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c934:	f380 8811 	msr	BASEPRI, r0
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f001 fa46 	bl	800ddd0 <vTaskSwitchContext>
 800c944:	f04f 0000 	mov.w	r0, #0
 800c948:	f380 8811 	msr	BASEPRI, r0
 800c94c:	bc09      	pop	{r0, r3}
 800c94e:	6819      	ldr	r1, [r3, #0]
 800c950:	6808      	ldr	r0, [r1, #0]
 800c952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c956:	f01e 0f10 	tst.w	lr, #16
 800c95a:	bf08      	it	eq
 800c95c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c960:	f380 8809 	msr	PSP, r0
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	f3af 8000 	nop.w

0800c970 <pxCurrentTCBConst>:
 800c970:	240089e0 	.word	0x240089e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop

0800c978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
	__asm volatile
 800c97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c982:	f383 8811 	msr	BASEPRI, r3
 800c986:	f3bf 8f6f 	isb	sy
 800c98a:	f3bf 8f4f 	dsb	sy
 800c98e:	607b      	str	r3, [r7, #4]
}
 800c990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c992:	f001 f965 	bl	800dc60 <xTaskIncrementTick>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d003      	beq.n	800c9a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c99c:	4b06      	ldr	r3, [pc, #24]	; (800c9b8 <SysTick_Handler+0x40>)
 800c99e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	f383 8811 	msr	BASEPRI, r3
}
 800c9ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	e000ed04 	.word	0xe000ed04

0800c9bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9bc:	b480      	push	{r7}
 800c9be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <vPortSetupTimerInterrupt+0x34>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9c6:	4b0b      	ldr	r3, [pc, #44]	; (800c9f4 <vPortSetupTimerInterrupt+0x38>)
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	; (800c9f8 <vPortSetupTimerInterrupt+0x3c>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a0a      	ldr	r2, [pc, #40]	; (800c9fc <vPortSetupTimerInterrupt+0x40>)
 800c9d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9d6:	099b      	lsrs	r3, r3, #6
 800c9d8:	4a09      	ldr	r2, [pc, #36]	; (800ca00 <vPortSetupTimerInterrupt+0x44>)
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9de:	4b04      	ldr	r3, [pc, #16]	; (800c9f0 <vPortSetupTimerInterrupt+0x34>)
 800c9e0:	2207      	movs	r2, #7
 800c9e2:	601a      	str	r2, [r3, #0]
}
 800c9e4:	bf00      	nop
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	e000e010 	.word	0xe000e010
 800c9f4:	e000e018 	.word	0xe000e018
 800c9f8:	24000000 	.word	0x24000000
 800c9fc:	10624dd3 	.word	0x10624dd3
 800ca00:	e000e014 	.word	0xe000e014

0800ca04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ca14 <vPortEnableVFP+0x10>
 800ca08:	6801      	ldr	r1, [r0, #0]
 800ca0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ca0e:	6001      	str	r1, [r0, #0]
 800ca10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca12:	bf00      	nop
 800ca14:	e000ed88 	.word	0xe000ed88

0800ca18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca1e:	f3ef 8305 	mrs	r3, IPSR
 800ca22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2b0f      	cmp	r3, #15
 800ca28:	d914      	bls.n	800ca54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca2a:	4a17      	ldr	r2, [pc, #92]	; (800ca88 <vPortValidateInterruptPriority+0x70>)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4413      	add	r3, r2
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca34:	4b15      	ldr	r3, [pc, #84]	; (800ca8c <vPortValidateInterruptPriority+0x74>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	7afa      	ldrb	r2, [r7, #11]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d20a      	bcs.n	800ca54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ca3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca42:	f383 8811 	msr	BASEPRI, r3
 800ca46:	f3bf 8f6f 	isb	sy
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	607b      	str	r3, [r7, #4]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca54:	4b0e      	ldr	r3, [pc, #56]	; (800ca90 <vPortValidateInterruptPriority+0x78>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ca5c:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <vPortValidateInterruptPriority+0x7c>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d90a      	bls.n	800ca7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	603b      	str	r3, [r7, #0]
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <vPortValidateInterruptPriority+0x60>
	}
 800ca7a:	bf00      	nop
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	e000e3f0 	.word	0xe000e3f0
 800ca8c:	240089d8 	.word	0x240089d8
 800ca90:	e000ed0c 	.word	0xe000ed0c
 800ca94:	240089dc 	.word	0x240089dc

0800ca98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10a      	bne.n	800cac2 <xQueueGenericReset+0x2a>
	__asm volatile
 800caac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab0:	f383 8811 	msr	BASEPRI, r3
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	f3bf 8f4f 	dsb	sy
 800cabc:	60bb      	str	r3, [r7, #8]
}
 800cabe:	bf00      	nop
 800cac0:	e7fe      	b.n	800cac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cac2:	f7ff fec7 	bl	800c854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cace:	68f9      	ldr	r1, [r7, #12]
 800cad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cad2:	fb01 f303 	mul.w	r3, r1, r3
 800cad6:	441a      	add	r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	681a      	ldr	r2, [r3, #0]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caf2:	3b01      	subs	r3, #1
 800caf4:	68f9      	ldr	r1, [r7, #12]
 800caf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800caf8:	fb01 f303 	mul.w	r3, r1, r3
 800cafc:	441a      	add	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	22ff      	movs	r2, #255	; 0xff
 800cb06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	22ff      	movs	r2, #255	; 0xff
 800cb0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d114      	bne.n	800cb42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d01a      	beq.n	800cb56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	3310      	adds	r3, #16
 800cb24:	4618      	mov	r0, r3
 800cb26:	f001 f9e9 	bl	800defc <xTaskRemoveFromEventList>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d012      	beq.n	800cb56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb30:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <xQueueGenericReset+0xcc>)
 800cb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb36:	601a      	str	r2, [r3, #0]
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	e009      	b.n	800cb56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	3310      	adds	r3, #16
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fca4 	bl	800c494 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3324      	adds	r3, #36	; 0x24
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7ff fc9f 	bl	800c494 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb56:	f7ff fead 	bl	800c8b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb5a:	2301      	movs	r3, #1
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	e000ed04 	.word	0xe000ed04

0800cb68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b08e      	sub	sp, #56	; 0x38
 800cb6c:	af02      	add	r7, sp, #8
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
 800cb74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <xQueueGenericCreateStatic+0x52>
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <xQueueGenericCreateStatic+0x56>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	e000      	b.n	800cbc0 <xQueueGenericCreateStatic+0x58>
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d10a      	bne.n	800cbda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cbc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	623b      	str	r3, [r7, #32]
}
 800cbd6:	bf00      	nop
 800cbd8:	e7fe      	b.n	800cbd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d102      	bne.n	800cbe6 <xQueueGenericCreateStatic+0x7e>
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d101      	bne.n	800cbea <xQueueGenericCreateStatic+0x82>
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e000      	b.n	800cbec <xQueueGenericCreateStatic+0x84>
 800cbea:	2300      	movs	r3, #0
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10a      	bne.n	800cc06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	61fb      	str	r3, [r7, #28]
}
 800cc02:	bf00      	nop
 800cc04:	e7fe      	b.n	800cc04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc06:	2348      	movs	r3, #72	; 0x48
 800cc08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	2b48      	cmp	r3, #72	; 0x48
 800cc0e:	d00a      	beq.n	800cc26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	61bb      	str	r3, [r7, #24]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d00d      	beq.n	800cc4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	2201      	movs	r2, #1
 800cc36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	9300      	str	r3, [sp, #0]
 800cc42:	4613      	mov	r3, r2
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	68b9      	ldr	r1, [r7, #8]
 800cc48:	68f8      	ldr	r0, [r7, #12]
 800cc4a:	f000 f83f 	bl	800cccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3730      	adds	r7, #48	; 0x30
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08a      	sub	sp, #40	; 0x28
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	4613      	mov	r3, r2
 800cc64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10a      	bne.n	800cc82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc70:	f383 8811 	msr	BASEPRI, r3
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	f3bf 8f4f 	dsb	sy
 800cc7c:	613b      	str	r3, [r7, #16]
}
 800cc7e:	bf00      	nop
 800cc80:	e7fe      	b.n	800cc80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	68ba      	ldr	r2, [r7, #8]
 800cc86:	fb02 f303 	mul.w	r3, r2, r3
 800cc8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	3348      	adds	r3, #72	; 0x48
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7ff fa15 	bl	800c0c0 <pvPortMalloc>
 800cc96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d011      	beq.n	800ccc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	3348      	adds	r3, #72	; 0x48
 800cca6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ccb0:	79fa      	ldrb	r2, [r7, #7]
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	9300      	str	r3, [sp, #0]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	68b9      	ldr	r1, [r7, #8]
 800ccbc:	68f8      	ldr	r0, [r7, #12]
 800ccbe:	f000 f805 	bl	800cccc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ccc2:	69bb      	ldr	r3, [r7, #24]
	}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3720      	adds	r7, #32
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
 800ccd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d103      	bne.n	800cce8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cce0:	69bb      	ldr	r3, [r7, #24]
 800cce2:	69ba      	ldr	r2, [r7, #24]
 800cce4:	601a      	str	r2, [r3, #0]
 800cce6:	e002      	b.n	800ccee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	68fa      	ldr	r2, [r7, #12]
 800ccf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ccf4:	69bb      	ldr	r3, [r7, #24]
 800ccf6:	68ba      	ldr	r2, [r7, #8]
 800ccf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ccfa:	2101      	movs	r1, #1
 800ccfc:	69b8      	ldr	r0, [r7, #24]
 800ccfe:	f7ff fecb 	bl	800ca98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd02:	bf00      	nop
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
	...

0800cd0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b08e      	sub	sp, #56	; 0x38
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	60f8      	str	r0, [r7, #12]
 800cd14:	60b9      	str	r1, [r7, #8]
 800cd16:	607a      	str	r2, [r7, #4]
 800cd18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d10a      	bne.n	800cd3e <xQueueGenericSend+0x32>
	__asm volatile
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd3a:	bf00      	nop
 800cd3c:	e7fe      	b.n	800cd3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d103      	bne.n	800cd4c <xQueueGenericSend+0x40>
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <xQueueGenericSend+0x44>
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	e000      	b.n	800cd52 <xQueueGenericSend+0x46>
 800cd50:	2300      	movs	r3, #0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <xQueueGenericSend+0x60>
	__asm volatile
 800cd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5a:	f383 8811 	msr	BASEPRI, r3
 800cd5e:	f3bf 8f6f 	isb	sy
 800cd62:	f3bf 8f4f 	dsb	sy
 800cd66:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd68:	bf00      	nop
 800cd6a:	e7fe      	b.n	800cd6a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2b02      	cmp	r3, #2
 800cd70:	d103      	bne.n	800cd7a <xQueueGenericSend+0x6e>
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d101      	bne.n	800cd7e <xQueueGenericSend+0x72>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	e000      	b.n	800cd80 <xQueueGenericSend+0x74>
 800cd7e:	2300      	movs	r3, #0
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d10a      	bne.n	800cd9a <xQueueGenericSend+0x8e>
	__asm volatile
 800cd84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd88:	f383 8811 	msr	BASEPRI, r3
 800cd8c:	f3bf 8f6f 	isb	sy
 800cd90:	f3bf 8f4f 	dsb	sy
 800cd94:	623b      	str	r3, [r7, #32]
}
 800cd96:	bf00      	nop
 800cd98:	e7fe      	b.n	800cd98 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd9a:	f001 fa6f 	bl	800e27c <xTaskGetSchedulerState>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <xQueueGenericSend+0x9e>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <xQueueGenericSend+0xa2>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e000      	b.n	800cdb0 <xQueueGenericSend+0xa4>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10a      	bne.n	800cdca <xQueueGenericSend+0xbe>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	61fb      	str	r3, [r7, #28]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cdca:	f7ff fd43 	bl	800c854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d302      	bcc.n	800cde0 <xQueueGenericSend+0xd4>
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d129      	bne.n	800ce34 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cde0:	683a      	ldr	r2, [r7, #0]
 800cde2:	68b9      	ldr	r1, [r7, #8]
 800cde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cde6:	f000 fb17 	bl	800d418 <prvCopyDataToQueue>
 800cdea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d010      	beq.n	800ce16 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	3324      	adds	r3, #36	; 0x24
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f001 f87f 	bl	800defc <xTaskRemoveFromEventList>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d013      	beq.n	800ce2c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce04:	4b3f      	ldr	r3, [pc, #252]	; (800cf04 <xQueueGenericSend+0x1f8>)
 800ce06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce0a:	601a      	str	r2, [r3, #0]
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	f3bf 8f6f 	isb	sy
 800ce14:	e00a      	b.n	800ce2c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d007      	beq.n	800ce2c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce1c:	4b39      	ldr	r3, [pc, #228]	; (800cf04 <xQueueGenericSend+0x1f8>)
 800ce1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce2c:	f7ff fd42 	bl	800c8b4 <vPortExitCritical>
				return pdPASS;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e063      	b.n	800cefc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d103      	bne.n	800ce42 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce3a:	f7ff fd3b 	bl	800c8b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	e05c      	b.n	800cefc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ce42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d106      	bne.n	800ce56 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ce48:	f107 0314 	add.w	r3, r7, #20
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f001 f8b7 	bl	800dfc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce52:	2301      	movs	r3, #1
 800ce54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce56:	f7ff fd2d 	bl	800c8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce5a:	f000 fe35 	bl	800dac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce5e:	f7ff fcf9 	bl	800c854 <vPortEnterCritical>
 800ce62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce68:	b25b      	sxtb	r3, r3
 800ce6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce6e:	d103      	bne.n	800ce78 <xQueueGenericSend+0x16c>
 800ce70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce72:	2200      	movs	r2, #0
 800ce74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce7e:	b25b      	sxtb	r3, r3
 800ce80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce84:	d103      	bne.n	800ce8e <xQueueGenericSend+0x182>
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce8e:	f7ff fd11 	bl	800c8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce92:	1d3a      	adds	r2, r7, #4
 800ce94:	f107 0314 	add.w	r3, r7, #20
 800ce98:	4611      	mov	r1, r2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f001 f8a6 	bl	800dfec <xTaskCheckForTimeOut>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d124      	bne.n	800cef0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea8:	f000 fbae 	bl	800d608 <prvIsQueueFull>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d018      	beq.n	800cee4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ceb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb4:	3310      	adds	r3, #16
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	4611      	mov	r1, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 fffa 	bl	800deb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cec2:	f000 fb39 	bl	800d538 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cec6:	f000 fe0d 	bl	800dae4 <xTaskResumeAll>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	f47f af7c 	bne.w	800cdca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ced2:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <xQueueGenericSend+0x1f8>)
 800ced4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	f3bf 8f6f 	isb	sy
 800cee2:	e772      	b.n	800cdca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee6:	f000 fb27 	bl	800d538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ceea:	f000 fdfb 	bl	800dae4 <xTaskResumeAll>
 800ceee:	e76c      	b.n	800cdca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cef2:	f000 fb21 	bl	800d538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cef6:	f000 fdf5 	bl	800dae4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cefa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3738      	adds	r7, #56	; 0x38
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	e000ed04 	.word	0xe000ed04

0800cf08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b090      	sub	sp, #64	; 0x40
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
 800cf14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d10a      	bne.n	800cf36 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf32:	bf00      	nop
 800cf34:	e7fe      	b.n	800cf34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d103      	bne.n	800cf44 <xQueueGenericSendFromISR+0x3c>
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d101      	bne.n	800cf48 <xQueueGenericSendFromISR+0x40>
 800cf44:	2301      	movs	r3, #1
 800cf46:	e000      	b.n	800cf4a <xQueueGenericSendFromISR+0x42>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10a      	bne.n	800cf64 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d103      	bne.n	800cf72 <xQueueGenericSendFromISR+0x6a>
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d101      	bne.n	800cf76 <xQueueGenericSendFromISR+0x6e>
 800cf72:	2301      	movs	r3, #1
 800cf74:	e000      	b.n	800cf78 <xQueueGenericSendFromISR+0x70>
 800cf76:	2300      	movs	r3, #0
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d10a      	bne.n	800cf92 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf80:	f383 8811 	msr	BASEPRI, r3
 800cf84:	f3bf 8f6f 	isb	sy
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	623b      	str	r3, [r7, #32]
}
 800cf8e:	bf00      	nop
 800cf90:	e7fe      	b.n	800cf90 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf92:	f7ff fd41 	bl	800ca18 <vPortValidateInterruptPriority>
	__asm volatile
 800cf96:	f3ef 8211 	mrs	r2, BASEPRI
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	61fa      	str	r2, [r7, #28]
 800cfac:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800cfae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cfb0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cfb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d302      	bcc.n	800cfc4 <xQueueGenericSendFromISR+0xbc>
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	2b02      	cmp	r3, #2
 800cfc2:	d12f      	bne.n	800d024 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cfca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	68b9      	ldr	r1, [r7, #8]
 800cfd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfda:	f000 fa1d 	bl	800d418 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cfde:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfe6:	d112      	bne.n	800d00e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d016      	beq.n	800d01e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff2:	3324      	adds	r3, #36	; 0x24
 800cff4:	4618      	mov	r0, r3
 800cff6:	f000 ff81 	bl	800defc <xTaskRemoveFromEventList>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00e      	beq.n	800d01e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d00b      	beq.n	800d01e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2201      	movs	r2, #1
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	e007      	b.n	800d01e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d00e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d012:	3301      	adds	r3, #1
 800d014:	b2db      	uxtb	r3, r3
 800d016:	b25a      	sxtb	r2, r3
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d01e:	2301      	movs	r3, #1
 800d020:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d022:	e001      	b.n	800d028 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d024:	2300      	movs	r3, #0
 800d026:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d02a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f383 8811 	msr	BASEPRI, r3
}
 800d032:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d036:	4618      	mov	r0, r3
 800d038:	3740      	adds	r7, #64	; 0x40
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}

0800d03e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d03e:	b580      	push	{r7, lr}
 800d040:	b08e      	sub	sp, #56	; 0x38
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d10a      	bne.n	800d068 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	623b      	str	r3, [r7, #32]
}
 800d064:	bf00      	nop
 800d066:	e7fe      	b.n	800d066 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00a      	beq.n	800d086 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	61fb      	str	r3, [r7, #28]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d103      	bne.n	800d096 <xQueueGiveFromISR+0x58>
 800d08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d101      	bne.n	800d09a <xQueueGiveFromISR+0x5c>
 800d096:	2301      	movs	r3, #1
 800d098:	e000      	b.n	800d09c <xQueueGiveFromISR+0x5e>
 800d09a:	2300      	movs	r3, #0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d10a      	bne.n	800d0b6 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	61bb      	str	r3, [r7, #24]
}
 800d0b2:	bf00      	nop
 800d0b4:	e7fe      	b.n	800d0b4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0b6:	f7ff fcaf 	bl	800ca18 <vPortValidateInterruptPriority>
	__asm volatile
 800d0ba:	f3ef 8211 	mrs	r2, BASEPRI
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	617a      	str	r2, [r7, #20]
 800d0d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d0d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e2:	429a      	cmp	r2, r3
 800d0e4:	d22b      	bcs.n	800d13e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d0f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d0fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d100:	d112      	bne.n	800d128 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d106:	2b00      	cmp	r3, #0
 800d108:	d016      	beq.n	800d138 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10c:	3324      	adds	r3, #36	; 0x24
 800d10e:	4618      	mov	r0, r3
 800d110:	f000 fef4 	bl	800defc <xTaskRemoveFromEventList>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00e      	beq.n	800d138 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	e007      	b.n	800d138 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d12c:	3301      	adds	r3, #1
 800d12e:	b2db      	uxtb	r3, r3
 800d130:	b25a      	sxtb	r2, r3
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d138:	2301      	movs	r3, #1
 800d13a:	637b      	str	r3, [r7, #52]	; 0x34
 800d13c:	e001      	b.n	800d142 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d13e:	2300      	movs	r3, #0
 800d140:	637b      	str	r3, [r7, #52]	; 0x34
 800d142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d144:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f383 8811 	msr	BASEPRI, r3
}
 800d14c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d150:	4618      	mov	r0, r3
 800d152:	3738      	adds	r7, #56	; 0x38
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b08c      	sub	sp, #48	; 0x30
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d164:	2300      	movs	r3, #0
 800d166:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10a      	bne.n	800d188 <xQueueReceive+0x30>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	623b      	str	r3, [r7, #32]
}
 800d184:	bf00      	nop
 800d186:	e7fe      	b.n	800d186 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d103      	bne.n	800d196 <xQueueReceive+0x3e>
 800d18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <xQueueReceive+0x42>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <xQueueReceive+0x44>
 800d19a:	2300      	movs	r3, #0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10a      	bne.n	800d1b6 <xQueueReceive+0x5e>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	61fb      	str	r3, [r7, #28]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1b6:	f001 f861 	bl	800e27c <xTaskGetSchedulerState>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <xQueueReceive+0x6e>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d101      	bne.n	800d1ca <xQueueReceive+0x72>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e000      	b.n	800d1cc <xQueueReceive+0x74>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10a      	bne.n	800d1e6 <xQueueReceive+0x8e>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	61bb      	str	r3, [r7, #24]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1e6:	f7ff fb35 	bl	800c854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d01f      	beq.n	800d236 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1f6:	68b9      	ldr	r1, [r7, #8]
 800d1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1fa:	f000 f977 	bl	800d4ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d200:	1e5a      	subs	r2, r3, #1
 800d202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d204:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00f      	beq.n	800d22e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d210:	3310      	adds	r3, #16
 800d212:	4618      	mov	r0, r3
 800d214:	f000 fe72 	bl	800defc <xTaskRemoveFromEventList>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d007      	beq.n	800d22e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d21e:	4b3d      	ldr	r3, [pc, #244]	; (800d314 <xQueueReceive+0x1bc>)
 800d220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d22e:	f7ff fb41 	bl	800c8b4 <vPortExitCritical>
				return pdPASS;
 800d232:	2301      	movs	r3, #1
 800d234:	e069      	b.n	800d30a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d103      	bne.n	800d244 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d23c:	f7ff fb3a 	bl	800c8b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d240:	2300      	movs	r3, #0
 800d242:	e062      	b.n	800d30a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	2b00      	cmp	r3, #0
 800d248:	d106      	bne.n	800d258 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d24a:	f107 0310 	add.w	r3, r7, #16
 800d24e:	4618      	mov	r0, r3
 800d250:	f000 feb6 	bl	800dfc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d254:	2301      	movs	r3, #1
 800d256:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d258:	f7ff fb2c 	bl	800c8b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d25c:	f000 fc34 	bl	800dac8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d260:	f7ff faf8 	bl	800c854 <vPortEnterCritical>
 800d264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d26a:	b25b      	sxtb	r3, r3
 800d26c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d270:	d103      	bne.n	800d27a <xQueueReceive+0x122>
 800d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d274:	2200      	movs	r2, #0
 800d276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d280:	b25b      	sxtb	r3, r3
 800d282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d286:	d103      	bne.n	800d290 <xQueueReceive+0x138>
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d290:	f7ff fb10 	bl	800c8b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d294:	1d3a      	adds	r2, r7, #4
 800d296:	f107 0310 	add.w	r3, r7, #16
 800d29a:	4611      	mov	r1, r2
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 fea5 	bl	800dfec <xTaskCheckForTimeOut>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d123      	bne.n	800d2f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2aa:	f000 f997 	bl	800d5dc <prvIsQueueEmpty>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d017      	beq.n	800d2e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	3324      	adds	r3, #36	; 0x24
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	4611      	mov	r1, r2
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 fdf9 	bl	800deb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2c4:	f000 f938 	bl	800d538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2c8:	f000 fc0c 	bl	800dae4 <xTaskResumeAll>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d189      	bne.n	800d1e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d2d2:	4b10      	ldr	r3, [pc, #64]	; (800d314 <xQueueReceive+0x1bc>)
 800d2d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	e780      	b.n	800d1e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2e6:	f000 f927 	bl	800d538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2ea:	f000 fbfb 	bl	800dae4 <xTaskResumeAll>
 800d2ee:	e77a      	b.n	800d1e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2f2:	f000 f921 	bl	800d538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2f6:	f000 fbf5 	bl	800dae4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fc:	f000 f96e 	bl	800d5dc <prvIsQueueEmpty>
 800d300:	4603      	mov	r3, r0
 800d302:	2b00      	cmp	r3, #0
 800d304:	f43f af6f 	beq.w	800d1e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3730      	adds	r7, #48	; 0x30
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	e000ed04 	.word	0xe000ed04

0800d318 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b08e      	sub	sp, #56	; 0x38
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	60b9      	str	r1, [r7, #8]
 800d322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d10a      	bne.n	800d344 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d332:	f383 8811 	msr	BASEPRI, r3
 800d336:	f3bf 8f6f 	isb	sy
 800d33a:	f3bf 8f4f 	dsb	sy
 800d33e:	623b      	str	r3, [r7, #32]
}
 800d340:	bf00      	nop
 800d342:	e7fe      	b.n	800d342 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d103      	bne.n	800d352 <xQueueReceiveFromISR+0x3a>
 800d34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <xQueueReceiveFromISR+0x3e>
 800d352:	2301      	movs	r3, #1
 800d354:	e000      	b.n	800d358 <xQueueReceiveFromISR+0x40>
 800d356:	2300      	movs	r3, #0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d10a      	bne.n	800d372 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d360:	f383 8811 	msr	BASEPRI, r3
 800d364:	f3bf 8f6f 	isb	sy
 800d368:	f3bf 8f4f 	dsb	sy
 800d36c:	61fb      	str	r3, [r7, #28]
}
 800d36e:	bf00      	nop
 800d370:	e7fe      	b.n	800d370 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d372:	f7ff fb51 	bl	800ca18 <vPortValidateInterruptPriority>
	__asm volatile
 800d376:	f3ef 8211 	mrs	r2, BASEPRI
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	61ba      	str	r2, [r7, #24]
 800d38c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d38e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d02f      	beq.n	800d3fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3a8:	68b9      	ldr	r1, [r7, #8]
 800d3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ac:	f000 f89e 	bl	800d4ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	1e5a      	subs	r2, r3, #1
 800d3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d3b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3c0:	d112      	bne.n	800d3e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d016      	beq.n	800d3f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	3310      	adds	r3, #16
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 fd94 	bl	800defc <xTaskRemoveFromEventList>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00e      	beq.n	800d3f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00b      	beq.n	800d3f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	601a      	str	r2, [r3, #0]
 800d3e6:	e007      	b.n	800d3f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3ec:	3301      	adds	r3, #1
 800d3ee:	b2db      	uxtb	r3, r3
 800d3f0:	b25a      	sxtb	r2, r3
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	637b      	str	r3, [r7, #52]	; 0x34
 800d3fc:	e001      	b.n	800d402 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d3fe:	2300      	movs	r3, #0
 800d400:	637b      	str	r3, [r7, #52]	; 0x34
 800d402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d404:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	f383 8811 	msr	BASEPRI, r3
}
 800d40c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d410:	4618      	mov	r0, r3
 800d412:	3738      	adds	r7, #56	; 0x38
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d424:	2300      	movs	r3, #0
 800d426:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d432:	2b00      	cmp	r3, #0
 800d434:	d10d      	bne.n	800d452 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d14d      	bne.n	800d4da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	4618      	mov	r0, r3
 800d444:	f000 ff38 	bl	800e2b8 <xTaskPriorityDisinherit>
 800d448:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	609a      	str	r2, [r3, #8]
 800d450:	e043      	b.n	800d4da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d119      	bne.n	800d48c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6858      	ldr	r0, [r3, #4]
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d460:	461a      	mov	r2, r3
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	f001 f941 	bl	800e6ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	685a      	ldr	r2, [r3, #4]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d470:	441a      	add	r2, r3
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d32b      	bcc.n	800d4da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	605a      	str	r2, [r3, #4]
 800d48a:	e026      	b.n	800d4da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	68d8      	ldr	r0, [r3, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d494:	461a      	mov	r2, r3
 800d496:	68b9      	ldr	r1, [r7, #8]
 800d498:	f001 f927 	bl	800e6ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	68da      	ldr	r2, [r3, #12]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a4:	425b      	negs	r3, r3
 800d4a6:	441a      	add	r2, r3
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	68da      	ldr	r2, [r3, #12]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d207      	bcs.n	800d4c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	689a      	ldr	r2, [r3, #8]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4c0:	425b      	negs	r3, r3
 800d4c2:	441a      	add	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b02      	cmp	r3, #2
 800d4cc:	d105      	bne.n	800d4da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d002      	beq.n	800d4da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	3b01      	subs	r3, #1
 800d4d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	1c5a      	adds	r2, r3, #1
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d4e2:	697b      	ldr	r3, [r7, #20]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d018      	beq.n	800d530 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	68da      	ldr	r2, [r3, #12]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d506:	441a      	add	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	68da      	ldr	r2, [r3, #12]
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	429a      	cmp	r2, r3
 800d516:	d303      	bcc.n	800d520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	68d9      	ldr	r1, [r3, #12]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d528:	461a      	mov	r2, r3
 800d52a:	6838      	ldr	r0, [r7, #0]
 800d52c:	f001 f8dd 	bl	800e6ea <memcpy>
	}
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b084      	sub	sp, #16
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d540:	f7ff f988 	bl	800c854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d54a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d54c:	e011      	b.n	800d572 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d552:	2b00      	cmp	r3, #0
 800d554:	d012      	beq.n	800d57c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	3324      	adds	r3, #36	; 0x24
 800d55a:	4618      	mov	r0, r3
 800d55c:	f000 fcce 	bl	800defc <xTaskRemoveFromEventList>
 800d560:	4603      	mov	r3, r0
 800d562:	2b00      	cmp	r3, #0
 800d564:	d001      	beq.n	800d56a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d566:	f000 fda3 	bl	800e0b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
 800d56c:	3b01      	subs	r3, #1
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d576:	2b00      	cmp	r3, #0
 800d578:	dce9      	bgt.n	800d54e <prvUnlockQueue+0x16>
 800d57a:	e000      	b.n	800d57e <prvUnlockQueue+0x46>
					break;
 800d57c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	22ff      	movs	r2, #255	; 0xff
 800d582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d586:	f7ff f995 	bl	800c8b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d58a:	f7ff f963 	bl	800c854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d594:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d596:	e011      	b.n	800d5bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	691b      	ldr	r3, [r3, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d012      	beq.n	800d5c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	3310      	adds	r3, #16
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f000 fca9 	bl	800defc <xTaskRemoveFromEventList>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d001      	beq.n	800d5b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d5b0:	f000 fd7e 	bl	800e0b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d5b4:	7bbb      	ldrb	r3, [r7, #14]
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	dce9      	bgt.n	800d598 <prvUnlockQueue+0x60>
 800d5c4:	e000      	b.n	800d5c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d5c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	22ff      	movs	r2, #255	; 0xff
 800d5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d5d0:	f7ff f970 	bl	800c8b4 <vPortExitCritical>
}
 800d5d4:	bf00      	nop
 800d5d6:	3710      	adds	r7, #16
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}

0800d5dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5e4:	f7ff f936 	bl	800c854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d102      	bne.n	800d5f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	60fb      	str	r3, [r7, #12]
 800d5f4:	e001      	b.n	800d5fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5fa:	f7ff f95b 	bl	800c8b4 <vPortExitCritical>

	return xReturn;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
}
 800d600:	4618      	mov	r0, r3
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d610:	f7ff f920 	bl	800c854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d102      	bne.n	800d626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d620:	2301      	movs	r3, #1
 800d622:	60fb      	str	r3, [r7, #12]
 800d624:	e001      	b.n	800d62a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d626:	2300      	movs	r3, #0
 800d628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d62a:	f7ff f943 	bl	800c8b4 <vPortExitCritical>

	return xReturn;
 800d62e:	68fb      	ldr	r3, [r7, #12]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08e      	sub	sp, #56	; 0x38
 800d63c:	af04      	add	r7, sp, #16
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	60b9      	str	r1, [r7, #8]
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d10a      	bne.n	800d662 <xTaskCreateStatic+0x2a>
	__asm volatile
 800d64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d650:	f383 8811 	msr	BASEPRI, r3
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	f3bf 8f4f 	dsb	sy
 800d65c:	623b      	str	r3, [r7, #32]
}
 800d65e:	bf00      	nop
 800d660:	e7fe      	b.n	800d660 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10a      	bne.n	800d67e <xTaskCreateStatic+0x46>
	__asm volatile
 800d668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d66c:	f383 8811 	msr	BASEPRI, r3
 800d670:	f3bf 8f6f 	isb	sy
 800d674:	f3bf 8f4f 	dsb	sy
 800d678:	61fb      	str	r3, [r7, #28]
}
 800d67a:	bf00      	nop
 800d67c:	e7fe      	b.n	800d67c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d67e:	23b4      	movs	r3, #180	; 0xb4
 800d680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2bb4      	cmp	r3, #180	; 0xb4
 800d686:	d00a      	beq.n	800d69e <xTaskCreateStatic+0x66>
	__asm volatile
 800d688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d68c:	f383 8811 	msr	BASEPRI, r3
 800d690:	f3bf 8f6f 	isb	sy
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	61bb      	str	r3, [r7, #24]
}
 800d69a:	bf00      	nop
 800d69c:	e7fe      	b.n	800d69c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d69e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d01e      	beq.n	800d6e4 <xTaskCreateStatic+0xac>
 800d6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d01b      	beq.n	800d6e4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b8:	2202      	movs	r2, #2
 800d6ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6be:	2300      	movs	r3, #0
 800d6c0:	9303      	str	r3, [sp, #12]
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c4:	9302      	str	r3, [sp, #8]
 800d6c6:	f107 0314 	add.w	r3, r7, #20
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ce:	9300      	str	r3, [sp, #0]
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	68b9      	ldr	r1, [r7, #8]
 800d6d6:	68f8      	ldr	r0, [r7, #12]
 800d6d8:	f000 f850 	bl	800d77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6de:	f000 f8eb 	bl	800d8b8 <prvAddNewTaskToReadyList>
 800d6e2:	e001      	b.n	800d6e8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6e8:	697b      	ldr	r3, [r7, #20]
	}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3728      	adds	r7, #40	; 0x28
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}

0800d6f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6f2:	b580      	push	{r7, lr}
 800d6f4:	b08c      	sub	sp, #48	; 0x30
 800d6f6:	af04      	add	r7, sp, #16
 800d6f8:	60f8      	str	r0, [r7, #12]
 800d6fa:	60b9      	str	r1, [r7, #8]
 800d6fc:	603b      	str	r3, [r7, #0]
 800d6fe:	4613      	mov	r3, r2
 800d700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d702:	88fb      	ldrh	r3, [r7, #6]
 800d704:	009b      	lsls	r3, r3, #2
 800d706:	4618      	mov	r0, r3
 800d708:	f7fe fcda 	bl	800c0c0 <pvPortMalloc>
 800d70c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d00e      	beq.n	800d732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d714:	20b4      	movs	r0, #180	; 0xb4
 800d716:	f7fe fcd3 	bl	800c0c0 <pvPortMalloc>
 800d71a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d003      	beq.n	800d72a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	631a      	str	r2, [r3, #48]	; 0x30
 800d728:	e005      	b.n	800d736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d72a:	6978      	ldr	r0, [r7, #20]
 800d72c:	f7fe fd94 	bl	800c258 <vPortFree>
 800d730:	e001      	b.n	800d736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d732:	2300      	movs	r3, #0
 800d734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d017      	beq.n	800d76c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d744:	88fa      	ldrh	r2, [r7, #6]
 800d746:	2300      	movs	r3, #0
 800d748:	9303      	str	r3, [sp, #12]
 800d74a:	69fb      	ldr	r3, [r7, #28]
 800d74c:	9302      	str	r3, [sp, #8]
 800d74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	68b9      	ldr	r1, [r7, #8]
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f000 f80e 	bl	800d77c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d760:	69f8      	ldr	r0, [r7, #28]
 800d762:	f000 f8a9 	bl	800d8b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d766:	2301      	movs	r3, #1
 800d768:	61bb      	str	r3, [r7, #24]
 800d76a:	e002      	b.n	800d772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d76c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d772:	69bb      	ldr	r3, [r7, #24]
	}
 800d774:	4618      	mov	r0, r3
 800d776:	3720      	adds	r7, #32
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af00      	add	r7, sp, #0
 800d782:	60f8      	str	r0, [r7, #12]
 800d784:	60b9      	str	r1, [r7, #8]
 800d786:	607a      	str	r2, [r7, #4]
 800d788:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d78e:	6879      	ldr	r1, [r7, #4]
 800d790:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d794:	440b      	add	r3, r1
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	4413      	add	r3, r2
 800d79a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d79c:	69bb      	ldr	r3, [r7, #24]
 800d79e:	f023 0307 	bic.w	r3, r3, #7
 800d7a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	f003 0307 	and.w	r3, r3, #7
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00a      	beq.n	800d7c4 <prvInitialiseNewTask+0x48>
	__asm volatile
 800d7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b2:	f383 8811 	msr	BASEPRI, r3
 800d7b6:	f3bf 8f6f 	isb	sy
 800d7ba:	f3bf 8f4f 	dsb	sy
 800d7be:	617b      	str	r3, [r7, #20]
}
 800d7c0:	bf00      	nop
 800d7c2:	e7fe      	b.n	800d7c2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d7c4:	68bb      	ldr	r3, [r7, #8]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d01f      	beq.n	800d80a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61fb      	str	r3, [r7, #28]
 800d7ce:	e012      	b.n	800d7f6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7d0:	68ba      	ldr	r2, [r7, #8]
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	4413      	add	r3, r2
 800d7d6:	7819      	ldrb	r1, [r3, #0]
 800d7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	4413      	add	r3, r2
 800d7de:	3334      	adds	r3, #52	; 0x34
 800d7e0:	460a      	mov	r2, r1
 800d7e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	4413      	add	r3, r2
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d006      	beq.n	800d7fe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	61fb      	str	r3, [r7, #28]
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	2b0f      	cmp	r3, #15
 800d7fa:	d9e9      	bls.n	800d7d0 <prvInitialiseNewTask+0x54>
 800d7fc:	e000      	b.n	800d800 <prvInitialiseNewTask+0x84>
			{
				break;
 800d7fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d802:	2200      	movs	r2, #0
 800d804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d808:	e003      	b.n	800d812 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d814:	2b06      	cmp	r3, #6
 800d816:	d901      	bls.n	800d81c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d818:	2306      	movs	r3, #6
 800d81a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d826:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82a:	2200      	movs	r2, #0
 800d82c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d830:	3304      	adds	r3, #4
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fe4e 	bl	800c4d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83a:	3318      	adds	r3, #24
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fe fe49 	bl	800c4d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d84a:	f1c3 0207 	rsb	r2, r3, #7
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85a:	2200      	movs	r2, #0
 800d85c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d862:	2200      	movs	r2, #0
 800d864:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86a:	334c      	adds	r3, #76	; 0x4c
 800d86c:	2260      	movs	r2, #96	; 0x60
 800d86e:	2100      	movs	r1, #0
 800d870:	4618      	mov	r0, r3
 800d872:	f000 ff62 	bl	800e73a <memset>
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	4a0c      	ldr	r2, [pc, #48]	; (800d8ac <prvInitialiseNewTask+0x130>)
 800d87a:	651a      	str	r2, [r3, #80]	; 0x50
 800d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d87e:	4a0c      	ldr	r2, [pc, #48]	; (800d8b0 <prvInitialiseNewTask+0x134>)
 800d880:	655a      	str	r2, [r3, #84]	; 0x54
 800d882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d884:	4a0b      	ldr	r2, [pc, #44]	; (800d8b4 <prvInitialiseNewTask+0x138>)
 800d886:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	68f9      	ldr	r1, [r7, #12]
 800d88c:	69b8      	ldr	r0, [r7, #24]
 800d88e:	f7fe feb5 	bl	800c5fc <pxPortInitialiseStack>
 800d892:	4602      	mov	r2, r0
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d002      	beq.n	800d8a4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8a4:	bf00      	nop
 800d8a6:	3720      	adds	r7, #32
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	0800fc84 	.word	0x0800fc84
 800d8b0:	0800fca4 	.word	0x0800fca4
 800d8b4:	0800fc64 	.word	0x0800fc64

0800d8b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d8c0:	f7fe ffc8 	bl	800c854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d8c4:	4b2a      	ldr	r3, [pc, #168]	; (800d970 <prvAddNewTaskToReadyList+0xb8>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	4a29      	ldr	r2, [pc, #164]	; (800d970 <prvAddNewTaskToReadyList+0xb8>)
 800d8cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d8ce:	4b29      	ldr	r3, [pc, #164]	; (800d974 <prvAddNewTaskToReadyList+0xbc>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d109      	bne.n	800d8ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d8d6:	4a27      	ldr	r2, [pc, #156]	; (800d974 <prvAddNewTaskToReadyList+0xbc>)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d8dc:	4b24      	ldr	r3, [pc, #144]	; (800d970 <prvAddNewTaskToReadyList+0xb8>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	2b01      	cmp	r3, #1
 800d8e2:	d110      	bne.n	800d906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d8e4:	f000 fc08 	bl	800e0f8 <prvInitialiseTaskLists>
 800d8e8:	e00d      	b.n	800d906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d8ea:	4b23      	ldr	r3, [pc, #140]	; (800d978 <prvAddNewTaskToReadyList+0xc0>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d109      	bne.n	800d906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8f2:	4b20      	ldr	r3, [pc, #128]	; (800d974 <prvAddNewTaskToReadyList+0xbc>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d802      	bhi.n	800d906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d900:	4a1c      	ldr	r2, [pc, #112]	; (800d974 <prvAddNewTaskToReadyList+0xbc>)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d906:	4b1d      	ldr	r3, [pc, #116]	; (800d97c <prvAddNewTaskToReadyList+0xc4>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	3301      	adds	r3, #1
 800d90c:	4a1b      	ldr	r2, [pc, #108]	; (800d97c <prvAddNewTaskToReadyList+0xc4>)
 800d90e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d914:	2201      	movs	r2, #1
 800d916:	409a      	lsls	r2, r3
 800d918:	4b19      	ldr	r3, [pc, #100]	; (800d980 <prvAddNewTaskToReadyList+0xc8>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	4a18      	ldr	r2, [pc, #96]	; (800d980 <prvAddNewTaskToReadyList+0xc8>)
 800d920:	6013      	str	r3, [r2, #0]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d926:	4613      	mov	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4413      	add	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4a15      	ldr	r2, [pc, #84]	; (800d984 <prvAddNewTaskToReadyList+0xcc>)
 800d930:	441a      	add	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3304      	adds	r3, #4
 800d936:	4619      	mov	r1, r3
 800d938:	4610      	mov	r0, r2
 800d93a:	f7fe fdd8 	bl	800c4ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d93e:	f7fe ffb9 	bl	800c8b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d942:	4b0d      	ldr	r3, [pc, #52]	; (800d978 <prvAddNewTaskToReadyList+0xc0>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00e      	beq.n	800d968 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d94a:	4b0a      	ldr	r3, [pc, #40]	; (800d974 <prvAddNewTaskToReadyList+0xbc>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d954:	429a      	cmp	r2, r3
 800d956:	d207      	bcs.n	800d968 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d958:	4b0b      	ldr	r3, [pc, #44]	; (800d988 <prvAddNewTaskToReadyList+0xd0>)
 800d95a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d95e:	601a      	str	r2, [r3, #0]
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d968:	bf00      	nop
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	24008ae0 	.word	0x24008ae0
 800d974:	240089e0 	.word	0x240089e0
 800d978:	24008aec 	.word	0x24008aec
 800d97c:	24008afc 	.word	0x24008afc
 800d980:	24008ae8 	.word	0x24008ae8
 800d984:	240089e4 	.word	0x240089e4
 800d988:	e000ed04 	.word	0xe000ed04

0800d98c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b084      	sub	sp, #16
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d994:	2300      	movs	r3, #0
 800d996:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d017      	beq.n	800d9ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d99e:	4b13      	ldr	r3, [pc, #76]	; (800d9ec <vTaskDelay+0x60>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d00a      	beq.n	800d9bc <vTaskDelay+0x30>
	__asm volatile
 800d9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9aa:	f383 8811 	msr	BASEPRI, r3
 800d9ae:	f3bf 8f6f 	isb	sy
 800d9b2:	f3bf 8f4f 	dsb	sy
 800d9b6:	60bb      	str	r3, [r7, #8]
}
 800d9b8:	bf00      	nop
 800d9ba:	e7fe      	b.n	800d9ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d9bc:	f000 f884 	bl	800dac8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d9c0:	2100      	movs	r1, #0
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 fcfe 	bl	800e3c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d9c8:	f000 f88c 	bl	800dae4 <xTaskResumeAll>
 800d9cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d107      	bne.n	800d9e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d9d4:	4b06      	ldr	r3, [pc, #24]	; (800d9f0 <vTaskDelay+0x64>)
 800d9d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9da:	601a      	str	r2, [r3, #0]
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d9e4:	bf00      	nop
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	24008b08 	.word	0x24008b08
 800d9f0:	e000ed04 	.word	0xe000ed04

0800d9f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b08a      	sub	sp, #40	; 0x28
 800d9f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da02:	463a      	mov	r2, r7
 800da04:	1d39      	adds	r1, r7, #4
 800da06:	f107 0308 	add.w	r3, r7, #8
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7f2 fefc 	bl	8000808 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	9202      	str	r2, [sp, #8]
 800da18:	9301      	str	r3, [sp, #4]
 800da1a:	2300      	movs	r3, #0
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	2300      	movs	r3, #0
 800da20:	460a      	mov	r2, r1
 800da22:	4921      	ldr	r1, [pc, #132]	; (800daa8 <vTaskStartScheduler+0xb4>)
 800da24:	4821      	ldr	r0, [pc, #132]	; (800daac <vTaskStartScheduler+0xb8>)
 800da26:	f7ff fe07 	bl	800d638 <xTaskCreateStatic>
 800da2a:	4603      	mov	r3, r0
 800da2c:	4a20      	ldr	r2, [pc, #128]	; (800dab0 <vTaskStartScheduler+0xbc>)
 800da2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da30:	4b1f      	ldr	r3, [pc, #124]	; (800dab0 <vTaskStartScheduler+0xbc>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da38:	2301      	movs	r3, #1
 800da3a:	617b      	str	r3, [r7, #20]
 800da3c:	e001      	b.n	800da42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da3e:	2300      	movs	r3, #0
 800da40:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d11b      	bne.n	800da80 <vTaskStartScheduler+0x8c>
	__asm volatile
 800da48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da4c:	f383 8811 	msr	BASEPRI, r3
 800da50:	f3bf 8f6f 	isb	sy
 800da54:	f3bf 8f4f 	dsb	sy
 800da58:	613b      	str	r3, [r7, #16]
}
 800da5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da5c:	4b15      	ldr	r3, [pc, #84]	; (800dab4 <vTaskStartScheduler+0xc0>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	334c      	adds	r3, #76	; 0x4c
 800da62:	4a15      	ldr	r2, [pc, #84]	; (800dab8 <vTaskStartScheduler+0xc4>)
 800da64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800da66:	4b15      	ldr	r3, [pc, #84]	; (800dabc <vTaskStartScheduler+0xc8>)
 800da68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800da6e:	4b14      	ldr	r3, [pc, #80]	; (800dac0 <vTaskStartScheduler+0xcc>)
 800da70:	2201      	movs	r2, #1
 800da72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800da74:	4b13      	ldr	r3, [pc, #76]	; (800dac4 <vTaskStartScheduler+0xd0>)
 800da76:	2200      	movs	r2, #0
 800da78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800da7a:	f7fe fe49 	bl	800c710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800da7e:	e00e      	b.n	800da9e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da86:	d10a      	bne.n	800da9e <vTaskStartScheduler+0xaa>
	__asm volatile
 800da88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da8c:	f383 8811 	msr	BASEPRI, r3
 800da90:	f3bf 8f6f 	isb	sy
 800da94:	f3bf 8f4f 	dsb	sy
 800da98:	60fb      	str	r3, [r7, #12]
}
 800da9a:	bf00      	nop
 800da9c:	e7fe      	b.n	800da9c <vTaskStartScheduler+0xa8>
}
 800da9e:	bf00      	nop
 800daa0:	3718      	adds	r7, #24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	0800fc08 	.word	0x0800fc08
 800daac:	0800e0c9 	.word	0x0800e0c9
 800dab0:	24008b04 	.word	0x24008b04
 800dab4:	240089e0 	.word	0x240089e0
 800dab8:	24000014 	.word	0x24000014
 800dabc:	24008b00 	.word	0x24008b00
 800dac0:	24008aec 	.word	0x24008aec
 800dac4:	24008ae4 	.word	0x24008ae4

0800dac8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dac8:	b480      	push	{r7}
 800daca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dacc:	4b04      	ldr	r3, [pc, #16]	; (800dae0 <vTaskSuspendAll+0x18>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3301      	adds	r3, #1
 800dad2:	4a03      	ldr	r2, [pc, #12]	; (800dae0 <vTaskSuspendAll+0x18>)
 800dad4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dad6:	bf00      	nop
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr
 800dae0:	24008b08 	.word	0x24008b08

0800dae4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b084      	sub	sp, #16
 800dae8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800daea:	2300      	movs	r3, #0
 800daec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800daee:	2300      	movs	r3, #0
 800daf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800daf2:	4b41      	ldr	r3, [pc, #260]	; (800dbf8 <xTaskResumeAll+0x114>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10a      	bne.n	800db10 <xTaskResumeAll+0x2c>
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	603b      	str	r3, [r7, #0]
}
 800db0c:	bf00      	nop
 800db0e:	e7fe      	b.n	800db0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db10:	f7fe fea0 	bl	800c854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db14:	4b38      	ldr	r3, [pc, #224]	; (800dbf8 <xTaskResumeAll+0x114>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	3b01      	subs	r3, #1
 800db1a:	4a37      	ldr	r2, [pc, #220]	; (800dbf8 <xTaskResumeAll+0x114>)
 800db1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db1e:	4b36      	ldr	r3, [pc, #216]	; (800dbf8 <xTaskResumeAll+0x114>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d161      	bne.n	800dbea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db26:	4b35      	ldr	r3, [pc, #212]	; (800dbfc <xTaskResumeAll+0x118>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d05d      	beq.n	800dbea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db2e:	e02e      	b.n	800db8e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db30:	4b33      	ldr	r3, [pc, #204]	; (800dc00 <xTaskResumeAll+0x11c>)
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	3318      	adds	r3, #24
 800db3c:	4618      	mov	r0, r3
 800db3e:	f7fe fd33 	bl	800c5a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3304      	adds	r3, #4
 800db46:	4618      	mov	r0, r3
 800db48:	f7fe fd2e 	bl	800c5a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db50:	2201      	movs	r2, #1
 800db52:	409a      	lsls	r2, r3
 800db54:	4b2b      	ldr	r3, [pc, #172]	; (800dc04 <xTaskResumeAll+0x120>)
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	4313      	orrs	r3, r2
 800db5a:	4a2a      	ldr	r2, [pc, #168]	; (800dc04 <xTaskResumeAll+0x120>)
 800db5c:	6013      	str	r3, [r2, #0]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db62:	4613      	mov	r3, r2
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	4413      	add	r3, r2
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	4a27      	ldr	r2, [pc, #156]	; (800dc08 <xTaskResumeAll+0x124>)
 800db6c:	441a      	add	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	3304      	adds	r3, #4
 800db72:	4619      	mov	r1, r3
 800db74:	4610      	mov	r0, r2
 800db76:	f7fe fcba 	bl	800c4ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7e:	4b23      	ldr	r3, [pc, #140]	; (800dc0c <xTaskResumeAll+0x128>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db84:	429a      	cmp	r2, r3
 800db86:	d302      	bcc.n	800db8e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800db88:	4b21      	ldr	r3, [pc, #132]	; (800dc10 <xTaskResumeAll+0x12c>)
 800db8a:	2201      	movs	r2, #1
 800db8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db8e:	4b1c      	ldr	r3, [pc, #112]	; (800dc00 <xTaskResumeAll+0x11c>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d1cc      	bne.n	800db30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d001      	beq.n	800dba0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800db9c:	f000 fb4e 	bl	800e23c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dba0:	4b1c      	ldr	r3, [pc, #112]	; (800dc14 <xTaskResumeAll+0x130>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d010      	beq.n	800dbce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dbac:	f000 f858 	bl	800dc60 <xTaskIncrementTick>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d002      	beq.n	800dbbc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800dbb6:	4b16      	ldr	r3, [pc, #88]	; (800dc10 <xTaskResumeAll+0x12c>)
 800dbb8:	2201      	movs	r2, #1
 800dbba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	3b01      	subs	r3, #1
 800dbc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d1f1      	bne.n	800dbac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800dbc8:	4b12      	ldr	r3, [pc, #72]	; (800dc14 <xTaskResumeAll+0x130>)
 800dbca:	2200      	movs	r2, #0
 800dbcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dbce:	4b10      	ldr	r3, [pc, #64]	; (800dc10 <xTaskResumeAll+0x12c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d009      	beq.n	800dbea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dbda:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <xTaskResumeAll+0x134>)
 800dbdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dbea:	f7fe fe63 	bl	800c8b4 <vPortExitCritical>

	return xAlreadyYielded;
 800dbee:	68bb      	ldr	r3, [r7, #8]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3710      	adds	r7, #16
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	24008b08 	.word	0x24008b08
 800dbfc:	24008ae0 	.word	0x24008ae0
 800dc00:	24008aa0 	.word	0x24008aa0
 800dc04:	24008ae8 	.word	0x24008ae8
 800dc08:	240089e4 	.word	0x240089e4
 800dc0c:	240089e0 	.word	0x240089e0
 800dc10:	24008af4 	.word	0x24008af4
 800dc14:	24008af0 	.word	0x24008af0
 800dc18:	e000ed04 	.word	0xe000ed04

0800dc1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b083      	sub	sp, #12
 800dc20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc22:	4b05      	ldr	r3, [pc, #20]	; (800dc38 <xTaskGetTickCount+0x1c>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc28:	687b      	ldr	r3, [r7, #4]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	370c      	adds	r7, #12
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	24008ae4 	.word	0x24008ae4

0800dc3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dc42:	f7fe fee9 	bl	800ca18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dc46:	2300      	movs	r3, #0
 800dc48:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dc4a:	4b04      	ldr	r3, [pc, #16]	; (800dc5c <xTaskGetTickCountFromISR+0x20>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dc50:	683b      	ldr	r3, [r7, #0]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3708      	adds	r7, #8
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	24008ae4 	.word	0x24008ae4

0800dc60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dc66:	2300      	movs	r3, #0
 800dc68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc6a:	4b4e      	ldr	r3, [pc, #312]	; (800dda4 <xTaskIncrementTick+0x144>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f040 808e 	bne.w	800dd90 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dc74:	4b4c      	ldr	r3, [pc, #304]	; (800dda8 <xTaskIncrementTick+0x148>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	3301      	adds	r3, #1
 800dc7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dc7c:	4a4a      	ldr	r2, [pc, #296]	; (800dda8 <xTaskIncrementTick+0x148>)
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d120      	bne.n	800dcca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dc88:	4b48      	ldr	r3, [pc, #288]	; (800ddac <xTaskIncrementTick+0x14c>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d00a      	beq.n	800dca8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc96:	f383 8811 	msr	BASEPRI, r3
 800dc9a:	f3bf 8f6f 	isb	sy
 800dc9e:	f3bf 8f4f 	dsb	sy
 800dca2:	603b      	str	r3, [r7, #0]
}
 800dca4:	bf00      	nop
 800dca6:	e7fe      	b.n	800dca6 <xTaskIncrementTick+0x46>
 800dca8:	4b40      	ldr	r3, [pc, #256]	; (800ddac <xTaskIncrementTick+0x14c>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	60fb      	str	r3, [r7, #12]
 800dcae:	4b40      	ldr	r3, [pc, #256]	; (800ddb0 <xTaskIncrementTick+0x150>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	4a3e      	ldr	r2, [pc, #248]	; (800ddac <xTaskIncrementTick+0x14c>)
 800dcb4:	6013      	str	r3, [r2, #0]
 800dcb6:	4a3e      	ldr	r2, [pc, #248]	; (800ddb0 <xTaskIncrementTick+0x150>)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	4b3d      	ldr	r3, [pc, #244]	; (800ddb4 <xTaskIncrementTick+0x154>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	4a3c      	ldr	r2, [pc, #240]	; (800ddb4 <xTaskIncrementTick+0x154>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	f000 fab9 	bl	800e23c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dcca:	4b3b      	ldr	r3, [pc, #236]	; (800ddb8 <xTaskIncrementTick+0x158>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	693a      	ldr	r2, [r7, #16]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d348      	bcc.n	800dd66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dcd4:	4b35      	ldr	r3, [pc, #212]	; (800ddac <xTaskIncrementTick+0x14c>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d104      	bne.n	800dce8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcde:	4b36      	ldr	r3, [pc, #216]	; (800ddb8 <xTaskIncrementTick+0x158>)
 800dce0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dce4:	601a      	str	r2, [r3, #0]
					break;
 800dce6:	e03e      	b.n	800dd66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dce8:	4b30      	ldr	r3, [pc, #192]	; (800ddac <xTaskIncrementTick+0x14c>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d203      	bcs.n	800dd08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd00:	4a2d      	ldr	r2, [pc, #180]	; (800ddb8 <xTaskIncrementTick+0x158>)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd06:	e02e      	b.n	800dd66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	3304      	adds	r3, #4
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fe fc4b 	bl	800c5a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d004      	beq.n	800dd24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3318      	adds	r3, #24
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7fe fc42 	bl	800c5a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd24:	68bb      	ldr	r3, [r7, #8]
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	2201      	movs	r2, #1
 800dd2a:	409a      	lsls	r2, r3
 800dd2c:	4b23      	ldr	r3, [pc, #140]	; (800ddbc <xTaskIncrementTick+0x15c>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	4a22      	ldr	r2, [pc, #136]	; (800ddbc <xTaskIncrementTick+0x15c>)
 800dd34:	6013      	str	r3, [r2, #0]
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	4a1f      	ldr	r2, [pc, #124]	; (800ddc0 <xTaskIncrementTick+0x160>)
 800dd44:	441a      	add	r2, r3
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	f7fe fbce 	bl	800c4ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd52:	68bb      	ldr	r3, [r7, #8]
 800dd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd56:	4b1b      	ldr	r3, [pc, #108]	; (800ddc4 <xTaskIncrementTick+0x164>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d3b9      	bcc.n	800dcd4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd64:	e7b6      	b.n	800dcd4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dd66:	4b17      	ldr	r3, [pc, #92]	; (800ddc4 <xTaskIncrementTick+0x164>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6c:	4914      	ldr	r1, [pc, #80]	; (800ddc0 <xTaskIncrementTick+0x160>)
 800dd6e:	4613      	mov	r3, r2
 800dd70:	009b      	lsls	r3, r3, #2
 800dd72:	4413      	add	r3, r2
 800dd74:	009b      	lsls	r3, r3, #2
 800dd76:	440b      	add	r3, r1
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d901      	bls.n	800dd82 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dd82:	4b11      	ldr	r3, [pc, #68]	; (800ddc8 <xTaskIncrementTick+0x168>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d007      	beq.n	800dd9a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	617b      	str	r3, [r7, #20]
 800dd8e:	e004      	b.n	800dd9a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dd90:	4b0e      	ldr	r3, [pc, #56]	; (800ddcc <xTaskIncrementTick+0x16c>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3301      	adds	r3, #1
 800dd96:	4a0d      	ldr	r2, [pc, #52]	; (800ddcc <xTaskIncrementTick+0x16c>)
 800dd98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dd9a:	697b      	ldr	r3, [r7, #20]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	24008b08 	.word	0x24008b08
 800dda8:	24008ae4 	.word	0x24008ae4
 800ddac:	24008a98 	.word	0x24008a98
 800ddb0:	24008a9c 	.word	0x24008a9c
 800ddb4:	24008af8 	.word	0x24008af8
 800ddb8:	24008b00 	.word	0x24008b00
 800ddbc:	24008ae8 	.word	0x24008ae8
 800ddc0:	240089e4 	.word	0x240089e4
 800ddc4:	240089e0 	.word	0x240089e0
 800ddc8:	24008af4 	.word	0x24008af4
 800ddcc:	24008af0 	.word	0x24008af0

0800ddd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b086      	sub	sp, #24
 800ddd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ddd6:	4b31      	ldr	r3, [pc, #196]	; (800de9c <vTaskSwitchContext+0xcc>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ddde:	4b30      	ldr	r3, [pc, #192]	; (800dea0 <vTaskSwitchContext+0xd0>)
 800dde0:	2201      	movs	r2, #1
 800dde2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dde4:	e055      	b.n	800de92 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 800dde6:	4b2e      	ldr	r3, [pc, #184]	; (800dea0 <vTaskSwitchContext+0xd0>)
 800dde8:	2200      	movs	r2, #0
 800ddea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ddec:	4b2d      	ldr	r3, [pc, #180]	; (800dea4 <vTaskSwitchContext+0xd4>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	4b2c      	ldr	r3, [pc, #176]	; (800dea4 <vTaskSwitchContext+0xd4>)
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d808      	bhi.n	800de0e <vTaskSwitchContext+0x3e>
 800ddfc:	4b29      	ldr	r3, [pc, #164]	; (800dea4 <vTaskSwitchContext+0xd4>)
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	4b28      	ldr	r3, [pc, #160]	; (800dea4 <vTaskSwitchContext+0xd4>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	3334      	adds	r3, #52	; 0x34
 800de06:	4619      	mov	r1, r3
 800de08:	4610      	mov	r0, r2
 800de0a:	f7f2 fcf1 	bl	80007f0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de0e:	4b26      	ldr	r3, [pc, #152]	; (800dea8 <vTaskSwitchContext+0xd8>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	fab3 f383 	clz	r3, r3
 800de1a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800de1c:	7afb      	ldrb	r3, [r7, #11]
 800de1e:	f1c3 031f 	rsb	r3, r3, #31
 800de22:	617b      	str	r3, [r7, #20]
 800de24:	4921      	ldr	r1, [pc, #132]	; (800deac <vTaskSwitchContext+0xdc>)
 800de26:	697a      	ldr	r2, [r7, #20]
 800de28:	4613      	mov	r3, r2
 800de2a:	009b      	lsls	r3, r3, #2
 800de2c:	4413      	add	r3, r2
 800de2e:	009b      	lsls	r3, r3, #2
 800de30:	440b      	add	r3, r1
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d10a      	bne.n	800de4e <vTaskSwitchContext+0x7e>
	__asm volatile
 800de38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3c:	f383 8811 	msr	BASEPRI, r3
 800de40:	f3bf 8f6f 	isb	sy
 800de44:	f3bf 8f4f 	dsb	sy
 800de48:	607b      	str	r3, [r7, #4]
}
 800de4a:	bf00      	nop
 800de4c:	e7fe      	b.n	800de4c <vTaskSwitchContext+0x7c>
 800de4e:	697a      	ldr	r2, [r7, #20]
 800de50:	4613      	mov	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	4413      	add	r3, r2
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4a14      	ldr	r2, [pc, #80]	; (800deac <vTaskSwitchContext+0xdc>)
 800de5a:	4413      	add	r3, r2
 800de5c:	613b      	str	r3, [r7, #16]
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	685a      	ldr	r2, [r3, #4]
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	605a      	str	r2, [r3, #4]
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	3308      	adds	r3, #8
 800de70:	429a      	cmp	r2, r3
 800de72:	d104      	bne.n	800de7e <vTaskSwitchContext+0xae>
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	685a      	ldr	r2, [r3, #4]
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	605a      	str	r2, [r3, #4]
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	4a07      	ldr	r2, [pc, #28]	; (800dea4 <vTaskSwitchContext+0xd4>)
 800de86:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800de88:	4b06      	ldr	r3, [pc, #24]	; (800dea4 <vTaskSwitchContext+0xd4>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	334c      	adds	r3, #76	; 0x4c
 800de8e:	4a08      	ldr	r2, [pc, #32]	; (800deb0 <vTaskSwitchContext+0xe0>)
 800de90:	6013      	str	r3, [r2, #0]
}
 800de92:	bf00      	nop
 800de94:	3718      	adds	r7, #24
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}
 800de9a:	bf00      	nop
 800de9c:	24008b08 	.word	0x24008b08
 800dea0:	24008af4 	.word	0x24008af4
 800dea4:	240089e0 	.word	0x240089e0
 800dea8:	24008ae8 	.word	0x24008ae8
 800deac:	240089e4 	.word	0x240089e4
 800deb0:	24000014 	.word	0x24000014

0800deb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10a      	bne.n	800deda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	60fb      	str	r3, [r7, #12]
}
 800ded6:	bf00      	nop
 800ded8:	e7fe      	b.n	800ded8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800deda:	4b07      	ldr	r3, [pc, #28]	; (800def8 <vTaskPlaceOnEventList+0x44>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	3318      	adds	r3, #24
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7fe fb27 	bl	800c536 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dee8:	2101      	movs	r1, #1
 800deea:	6838      	ldr	r0, [r7, #0]
 800deec:	f000 fa6a 	bl	800e3c4 <prvAddCurrentTaskToDelayedList>
}
 800def0:	bf00      	nop
 800def2:	3710      	adds	r7, #16
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	240089e0 	.word	0x240089e0

0800defc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	68db      	ldr	r3, [r3, #12]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800df0c:	693b      	ldr	r3, [r7, #16]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	60fb      	str	r3, [r7, #12]
}
 800df24:	bf00      	nop
 800df26:	e7fe      	b.n	800df26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	3318      	adds	r3, #24
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7fe fb3b 	bl	800c5a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df32:	4b1d      	ldr	r3, [pc, #116]	; (800dfa8 <xTaskRemoveFromEventList+0xac>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d11c      	bne.n	800df74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	3304      	adds	r3, #4
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fb32 	bl	800c5a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	2201      	movs	r2, #1
 800df4a:	409a      	lsls	r2, r3
 800df4c:	4b17      	ldr	r3, [pc, #92]	; (800dfac <xTaskRemoveFromEventList+0xb0>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4313      	orrs	r3, r2
 800df52:	4a16      	ldr	r2, [pc, #88]	; (800dfac <xTaskRemoveFromEventList+0xb0>)
 800df54:	6013      	str	r3, [r2, #0]
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df5a:	4613      	mov	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4a13      	ldr	r2, [pc, #76]	; (800dfb0 <xTaskRemoveFromEventList+0xb4>)
 800df64:	441a      	add	r2, r3
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	3304      	adds	r3, #4
 800df6a:	4619      	mov	r1, r3
 800df6c:	4610      	mov	r0, r2
 800df6e:	f7fe fabe 	bl	800c4ee <vListInsertEnd>
 800df72:	e005      	b.n	800df80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	3318      	adds	r3, #24
 800df78:	4619      	mov	r1, r3
 800df7a:	480e      	ldr	r0, [pc, #56]	; (800dfb4 <xTaskRemoveFromEventList+0xb8>)
 800df7c:	f7fe fab7 	bl	800c4ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df84:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <xTaskRemoveFromEventList+0xbc>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d905      	bls.n	800df9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800df8e:	2301      	movs	r3, #1
 800df90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800df92:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <xTaskRemoveFromEventList+0xc0>)
 800df94:	2201      	movs	r2, #1
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	e001      	b.n	800df9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800df9a:	2300      	movs	r3, #0
 800df9c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800df9e:	697b      	ldr	r3, [r7, #20]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3718      	adds	r7, #24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	24008b08 	.word	0x24008b08
 800dfac:	24008ae8 	.word	0x24008ae8
 800dfb0:	240089e4 	.word	0x240089e4
 800dfb4:	24008aa0 	.word	0x24008aa0
 800dfb8:	240089e0 	.word	0x240089e0
 800dfbc:	24008af4 	.word	0x24008af4

0800dfc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dfc8:	4b06      	ldr	r3, [pc, #24]	; (800dfe4 <vTaskInternalSetTimeOutState+0x24>)
 800dfca:	681a      	ldr	r2, [r3, #0]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dfd0:	4b05      	ldr	r3, [pc, #20]	; (800dfe8 <vTaskInternalSetTimeOutState+0x28>)
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	605a      	str	r2, [r3, #4]
}
 800dfd8:	bf00      	nop
 800dfda:	370c      	adds	r7, #12
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe2:	4770      	bx	lr
 800dfe4:	24008af8 	.word	0x24008af8
 800dfe8:	24008ae4 	.word	0x24008ae4

0800dfec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d10a      	bne.n	800e012 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e000:	f383 8811 	msr	BASEPRI, r3
 800e004:	f3bf 8f6f 	isb	sy
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	613b      	str	r3, [r7, #16]
}
 800e00e:	bf00      	nop
 800e010:	e7fe      	b.n	800e010 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10a      	bne.n	800e02e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01c:	f383 8811 	msr	BASEPRI, r3
 800e020:	f3bf 8f6f 	isb	sy
 800e024:	f3bf 8f4f 	dsb	sy
 800e028:	60fb      	str	r3, [r7, #12]
}
 800e02a:	bf00      	nop
 800e02c:	e7fe      	b.n	800e02c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e02e:	f7fe fc11 	bl	800c854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e032:	4b1d      	ldr	r3, [pc, #116]	; (800e0a8 <xTaskCheckForTimeOut+0xbc>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	69ba      	ldr	r2, [r7, #24]
 800e03e:	1ad3      	subs	r3, r2, r3
 800e040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e04a:	d102      	bne.n	800e052 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e04c:	2300      	movs	r3, #0
 800e04e:	61fb      	str	r3, [r7, #28]
 800e050:	e023      	b.n	800e09a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	4b15      	ldr	r3, [pc, #84]	; (800e0ac <xTaskCheckForTimeOut+0xc0>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d007      	beq.n	800e06e <xTaskCheckForTimeOut+0x82>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	685b      	ldr	r3, [r3, #4]
 800e062:	69ba      	ldr	r2, [r7, #24]
 800e064:	429a      	cmp	r2, r3
 800e066:	d302      	bcc.n	800e06e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e068:	2301      	movs	r3, #1
 800e06a:	61fb      	str	r3, [r7, #28]
 800e06c:	e015      	b.n	800e09a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	697a      	ldr	r2, [r7, #20]
 800e074:	429a      	cmp	r2, r3
 800e076:	d20b      	bcs.n	800e090 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	697b      	ldr	r3, [r7, #20]
 800e07e:	1ad2      	subs	r2, r2, r3
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f7ff ff9b 	bl	800dfc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e08a:	2300      	movs	r3, #0
 800e08c:	61fb      	str	r3, [r7, #28]
 800e08e:	e004      	b.n	800e09a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	2200      	movs	r2, #0
 800e094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e096:	2301      	movs	r3, #1
 800e098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e09a:	f7fe fc0b 	bl	800c8b4 <vPortExitCritical>

	return xReturn;
 800e09e:	69fb      	ldr	r3, [r7, #28]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3720      	adds	r7, #32
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	24008ae4 	.word	0x24008ae4
 800e0ac:	24008af8 	.word	0x24008af8

0800e0b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e0b4:	4b03      	ldr	r3, [pc, #12]	; (800e0c4 <vTaskMissedYield+0x14>)
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	601a      	str	r2, [r3, #0]
}
 800e0ba:	bf00      	nop
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	24008af4 	.word	0x24008af4

0800e0c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e0d0:	f000 f852 	bl	800e178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e0d4:	4b06      	ldr	r3, [pc, #24]	; (800e0f0 <prvIdleTask+0x28>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2b01      	cmp	r3, #1
 800e0da:	d9f9      	bls.n	800e0d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e0dc:	4b05      	ldr	r3, [pc, #20]	; (800e0f4 <prvIdleTask+0x2c>)
 800e0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0e2:	601a      	str	r2, [r3, #0]
 800e0e4:	f3bf 8f4f 	dsb	sy
 800e0e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e0ec:	e7f0      	b.n	800e0d0 <prvIdleTask+0x8>
 800e0ee:	bf00      	nop
 800e0f0:	240089e4 	.word	0x240089e4
 800e0f4:	e000ed04 	.word	0xe000ed04

0800e0f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0fe:	2300      	movs	r3, #0
 800e100:	607b      	str	r3, [r7, #4]
 800e102:	e00c      	b.n	800e11e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	4613      	mov	r3, r2
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	4413      	add	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	4a12      	ldr	r2, [pc, #72]	; (800e158 <prvInitialiseTaskLists+0x60>)
 800e110:	4413      	add	r3, r2
 800e112:	4618      	mov	r0, r3
 800e114:	f7fe f9be 	bl	800c494 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	3301      	adds	r3, #1
 800e11c:	607b      	str	r3, [r7, #4]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b06      	cmp	r3, #6
 800e122:	d9ef      	bls.n	800e104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e124:	480d      	ldr	r0, [pc, #52]	; (800e15c <prvInitialiseTaskLists+0x64>)
 800e126:	f7fe f9b5 	bl	800c494 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e12a:	480d      	ldr	r0, [pc, #52]	; (800e160 <prvInitialiseTaskLists+0x68>)
 800e12c:	f7fe f9b2 	bl	800c494 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e130:	480c      	ldr	r0, [pc, #48]	; (800e164 <prvInitialiseTaskLists+0x6c>)
 800e132:	f7fe f9af 	bl	800c494 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e136:	480c      	ldr	r0, [pc, #48]	; (800e168 <prvInitialiseTaskLists+0x70>)
 800e138:	f7fe f9ac 	bl	800c494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e13c:	480b      	ldr	r0, [pc, #44]	; (800e16c <prvInitialiseTaskLists+0x74>)
 800e13e:	f7fe f9a9 	bl	800c494 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e142:	4b0b      	ldr	r3, [pc, #44]	; (800e170 <prvInitialiseTaskLists+0x78>)
 800e144:	4a05      	ldr	r2, [pc, #20]	; (800e15c <prvInitialiseTaskLists+0x64>)
 800e146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e148:	4b0a      	ldr	r3, [pc, #40]	; (800e174 <prvInitialiseTaskLists+0x7c>)
 800e14a:	4a05      	ldr	r2, [pc, #20]	; (800e160 <prvInitialiseTaskLists+0x68>)
 800e14c:	601a      	str	r2, [r3, #0]
}
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	240089e4 	.word	0x240089e4
 800e15c:	24008a70 	.word	0x24008a70
 800e160:	24008a84 	.word	0x24008a84
 800e164:	24008aa0 	.word	0x24008aa0
 800e168:	24008ab4 	.word	0x24008ab4
 800e16c:	24008acc 	.word	0x24008acc
 800e170:	24008a98 	.word	0x24008a98
 800e174:	24008a9c 	.word	0x24008a9c

0800e178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e17e:	e019      	b.n	800e1b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e180:	f7fe fb68 	bl	800c854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e184:	4b10      	ldr	r3, [pc, #64]	; (800e1c8 <prvCheckTasksWaitingTermination+0x50>)
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3304      	adds	r3, #4
 800e190:	4618      	mov	r0, r3
 800e192:	f7fe fa09 	bl	800c5a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e196:	4b0d      	ldr	r3, [pc, #52]	; (800e1cc <prvCheckTasksWaitingTermination+0x54>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	3b01      	subs	r3, #1
 800e19c:	4a0b      	ldr	r2, [pc, #44]	; (800e1cc <prvCheckTasksWaitingTermination+0x54>)
 800e19e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e1a0:	4b0b      	ldr	r3, [pc, #44]	; (800e1d0 <prvCheckTasksWaitingTermination+0x58>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	4a0a      	ldr	r2, [pc, #40]	; (800e1d0 <prvCheckTasksWaitingTermination+0x58>)
 800e1a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e1aa:	f7fe fb83 	bl	800c8b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 f810 	bl	800e1d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e1b4:	4b06      	ldr	r3, [pc, #24]	; (800e1d0 <prvCheckTasksWaitingTermination+0x58>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1e1      	bne.n	800e180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e1bc:	bf00      	nop
 800e1be:	bf00      	nop
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	24008ab4 	.word	0x24008ab4
 800e1cc:	24008ae0 	.word	0x24008ae0
 800e1d0:	24008ac8 	.word	0x24008ac8

0800e1d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	334c      	adds	r3, #76	; 0x4c
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 fbe3 	bl	800e9ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d108      	bne.n	800e202 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f7fe f82f 	bl	800c258 <vPortFree>
				vPortFree( pxTCB );
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f7fe f82c 	bl	800c258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e200:	e018      	b.n	800e234 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d103      	bne.n	800e214 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7fe f823 	bl	800c258 <vPortFree>
	}
 800e212:	e00f      	b.n	800e234 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	d00a      	beq.n	800e234 <prvDeleteTCB+0x60>
	__asm volatile
 800e21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	60fb      	str	r3, [r7, #12]
}
 800e230:	bf00      	nop
 800e232:	e7fe      	b.n	800e232 <prvDeleteTCB+0x5e>
	}
 800e234:	bf00      	nop
 800e236:	3710      	adds	r7, #16
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}

0800e23c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e242:	4b0c      	ldr	r3, [pc, #48]	; (800e274 <prvResetNextTaskUnblockTime+0x38>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d104      	bne.n	800e256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e24c:	4b0a      	ldr	r3, [pc, #40]	; (800e278 <prvResetNextTaskUnblockTime+0x3c>)
 800e24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e254:	e008      	b.n	800e268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e256:	4b07      	ldr	r3, [pc, #28]	; (800e274 <prvResetNextTaskUnblockTime+0x38>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	68db      	ldr	r3, [r3, #12]
 800e25c:	68db      	ldr	r3, [r3, #12]
 800e25e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	4a04      	ldr	r2, [pc, #16]	; (800e278 <prvResetNextTaskUnblockTime+0x3c>)
 800e266:	6013      	str	r3, [r2, #0]
}
 800e268:	bf00      	nop
 800e26a:	370c      	adds	r7, #12
 800e26c:	46bd      	mov	sp, r7
 800e26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e272:	4770      	bx	lr
 800e274:	24008a98 	.word	0x24008a98
 800e278:	24008b00 	.word	0x24008b00

0800e27c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e282:	4b0b      	ldr	r3, [pc, #44]	; (800e2b0 <xTaskGetSchedulerState+0x34>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e28a:	2301      	movs	r3, #1
 800e28c:	607b      	str	r3, [r7, #4]
 800e28e:	e008      	b.n	800e2a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e290:	4b08      	ldr	r3, [pc, #32]	; (800e2b4 <xTaskGetSchedulerState+0x38>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d102      	bne.n	800e29e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e298:	2302      	movs	r3, #2
 800e29a:	607b      	str	r3, [r7, #4]
 800e29c:	e001      	b.n	800e2a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e2a2:	687b      	ldr	r3, [r7, #4]
	}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	24008aec 	.word	0x24008aec
 800e2b4:	24008b08 	.word	0x24008b08

0800e2b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b086      	sub	sp, #24
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d06e      	beq.n	800e3ac <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e2ce:	4b3a      	ldr	r3, [pc, #232]	; (800e3b8 <xTaskPriorityDisinherit+0x100>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	693a      	ldr	r2, [r7, #16]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d00a      	beq.n	800e2ee <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2dc:	f383 8811 	msr	BASEPRI, r3
 800e2e0:	f3bf 8f6f 	isb	sy
 800e2e4:	f3bf 8f4f 	dsb	sy
 800e2e8:	60fb      	str	r3, [r7, #12]
}
 800e2ea:	bf00      	nop
 800e2ec:	e7fe      	b.n	800e2ec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d10a      	bne.n	800e30c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2fa:	f383 8811 	msr	BASEPRI, r3
 800e2fe:	f3bf 8f6f 	isb	sy
 800e302:	f3bf 8f4f 	dsb	sy
 800e306:	60bb      	str	r3, [r7, #8]
}
 800e308:	bf00      	nop
 800e30a:	e7fe      	b.n	800e30a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e310:	1e5a      	subs	r2, r3, #1
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e31e:	429a      	cmp	r2, r3
 800e320:	d044      	beq.n	800e3ac <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e326:	2b00      	cmp	r3, #0
 800e328:	d140      	bne.n	800e3ac <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	3304      	adds	r3, #4
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe f93a 	bl	800c5a8 <uxListRemove>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d115      	bne.n	800e366 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33e:	491f      	ldr	r1, [pc, #124]	; (800e3bc <xTaskPriorityDisinherit+0x104>)
 800e340:	4613      	mov	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	440b      	add	r3, r1
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d10a      	bne.n	800e366 <xTaskPriorityDisinherit+0xae>
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e354:	2201      	movs	r2, #1
 800e356:	fa02 f303 	lsl.w	r3, r2, r3
 800e35a:	43da      	mvns	r2, r3
 800e35c:	4b18      	ldr	r3, [pc, #96]	; (800e3c0 <xTaskPriorityDisinherit+0x108>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4013      	ands	r3, r2
 800e362:	4a17      	ldr	r2, [pc, #92]	; (800e3c0 <xTaskPriorityDisinherit+0x108>)
 800e364:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e372:	f1c3 0207 	rsb	r2, r3, #7
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e37e:	2201      	movs	r2, #1
 800e380:	409a      	lsls	r2, r3
 800e382:	4b0f      	ldr	r3, [pc, #60]	; (800e3c0 <xTaskPriorityDisinherit+0x108>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4313      	orrs	r3, r2
 800e388:	4a0d      	ldr	r2, [pc, #52]	; (800e3c0 <xTaskPriorityDisinherit+0x108>)
 800e38a:	6013      	str	r3, [r2, #0]
 800e38c:	693b      	ldr	r3, [r7, #16]
 800e38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e390:	4613      	mov	r3, r2
 800e392:	009b      	lsls	r3, r3, #2
 800e394:	4413      	add	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4a08      	ldr	r2, [pc, #32]	; (800e3bc <xTaskPriorityDisinherit+0x104>)
 800e39a:	441a      	add	r2, r3
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	3304      	adds	r3, #4
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	f7fe f8a3 	bl	800c4ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e3ac:	697b      	ldr	r3, [r7, #20]
	}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}
 800e3b6:	bf00      	nop
 800e3b8:	240089e0 	.word	0x240089e0
 800e3bc:	240089e4 	.word	0x240089e4
 800e3c0:	24008ae8 	.word	0x24008ae8

0800e3c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e3ce:	4b29      	ldr	r3, [pc, #164]	; (800e474 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e3d4:	4b28      	ldr	r3, [pc, #160]	; (800e478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	3304      	adds	r3, #4
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe f8e4 	bl	800c5a8 <uxListRemove>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10b      	bne.n	800e3fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e3e6:	4b24      	ldr	r3, [pc, #144]	; (800e478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e3f2:	43da      	mvns	r2, r3
 800e3f4:	4b21      	ldr	r3, [pc, #132]	; (800e47c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	4a20      	ldr	r2, [pc, #128]	; (800e47c <prvAddCurrentTaskToDelayedList+0xb8>)
 800e3fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e404:	d10a      	bne.n	800e41c <prvAddCurrentTaskToDelayedList+0x58>
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d007      	beq.n	800e41c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e40c:	4b1a      	ldr	r3, [pc, #104]	; (800e478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	3304      	adds	r3, #4
 800e412:	4619      	mov	r1, r3
 800e414:	481a      	ldr	r0, [pc, #104]	; (800e480 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e416:	f7fe f86a 	bl	800c4ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e41a:	e026      	b.n	800e46a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e41c:	68fa      	ldr	r2, [r7, #12]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	4413      	add	r3, r2
 800e422:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e424:	4b14      	ldr	r3, [pc, #80]	; (800e478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e42c:	68ba      	ldr	r2, [r7, #8]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	429a      	cmp	r2, r3
 800e432:	d209      	bcs.n	800e448 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e434:	4b13      	ldr	r3, [pc, #76]	; (800e484 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	4b0f      	ldr	r3, [pc, #60]	; (800e478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3304      	adds	r3, #4
 800e43e:	4619      	mov	r1, r3
 800e440:	4610      	mov	r0, r2
 800e442:	f7fe f878 	bl	800c536 <vListInsert>
}
 800e446:	e010      	b.n	800e46a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e448:	4b0f      	ldr	r3, [pc, #60]	; (800e488 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	4b0a      	ldr	r3, [pc, #40]	; (800e478 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	3304      	adds	r3, #4
 800e452:	4619      	mov	r1, r3
 800e454:	4610      	mov	r0, r2
 800e456:	f7fe f86e 	bl	800c536 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e45a:	4b0c      	ldr	r3, [pc, #48]	; (800e48c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	68ba      	ldr	r2, [r7, #8]
 800e460:	429a      	cmp	r2, r3
 800e462:	d202      	bcs.n	800e46a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e464:	4a09      	ldr	r2, [pc, #36]	; (800e48c <prvAddCurrentTaskToDelayedList+0xc8>)
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	6013      	str	r3, [r2, #0]
}
 800e46a:	bf00      	nop
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	24008ae4 	.word	0x24008ae4
 800e478:	240089e0 	.word	0x240089e0
 800e47c:	24008ae8 	.word	0x24008ae8
 800e480:	24008acc 	.word	0x24008acc
 800e484:	24008a9c 	.word	0x24008a9c
 800e488:	24008a98 	.word	0x24008a98
 800e48c:	24008b00 	.word	0x24008b00

0800e490 <std>:
 800e490:	2300      	movs	r3, #0
 800e492:	b510      	push	{r4, lr}
 800e494:	4604      	mov	r4, r0
 800e496:	e9c0 3300 	strd	r3, r3, [r0]
 800e49a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e49e:	6083      	str	r3, [r0, #8]
 800e4a0:	8181      	strh	r1, [r0, #12]
 800e4a2:	6643      	str	r3, [r0, #100]	; 0x64
 800e4a4:	81c2      	strh	r2, [r0, #14]
 800e4a6:	6183      	str	r3, [r0, #24]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	2208      	movs	r2, #8
 800e4ac:	305c      	adds	r0, #92	; 0x5c
 800e4ae:	f000 f944 	bl	800e73a <memset>
 800e4b2:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <std+0x38>)
 800e4b4:	6263      	str	r3, [r4, #36]	; 0x24
 800e4b6:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <std+0x3c>)
 800e4b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4ba:	4b05      	ldr	r3, [pc, #20]	; (800e4d0 <std+0x40>)
 800e4bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4be:	4b05      	ldr	r3, [pc, #20]	; (800e4d4 <std+0x44>)
 800e4c0:	6224      	str	r4, [r4, #32]
 800e4c2:	6323      	str	r3, [r4, #48]	; 0x30
 800e4c4:	bd10      	pop	{r4, pc}
 800e4c6:	bf00      	nop
 800e4c8:	0800eac5 	.word	0x0800eac5
 800e4cc:	0800eae7 	.word	0x0800eae7
 800e4d0:	0800eb1f 	.word	0x0800eb1f
 800e4d4:	0800eb43 	.word	0x0800eb43

0800e4d8 <_cleanup_r>:
 800e4d8:	4901      	ldr	r1, [pc, #4]	; (800e4e0 <_cleanup_r+0x8>)
 800e4da:	f000 b8af 	b.w	800e63c <_fwalk_reent>
 800e4de:	bf00      	nop
 800e4e0:	0800ee35 	.word	0x0800ee35

0800e4e4 <__sfmoreglue>:
 800e4e4:	b570      	push	{r4, r5, r6, lr}
 800e4e6:	2268      	movs	r2, #104	; 0x68
 800e4e8:	1e4d      	subs	r5, r1, #1
 800e4ea:	4355      	muls	r5, r2
 800e4ec:	460e      	mov	r6, r1
 800e4ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4f2:	f000 f94b 	bl	800e78c <_malloc_r>
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	b140      	cbz	r0, 800e50c <__sfmoreglue+0x28>
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	e9c0 1600 	strd	r1, r6, [r0]
 800e500:	300c      	adds	r0, #12
 800e502:	60a0      	str	r0, [r4, #8]
 800e504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e508:	f000 f917 	bl	800e73a <memset>
 800e50c:	4620      	mov	r0, r4
 800e50e:	bd70      	pop	{r4, r5, r6, pc}

0800e510 <__sfp_lock_acquire>:
 800e510:	4801      	ldr	r0, [pc, #4]	; (800e518 <__sfp_lock_acquire+0x8>)
 800e512:	f000 b8d8 	b.w	800e6c6 <__retarget_lock_acquire_recursive>
 800e516:	bf00      	nop
 800e518:	24008b0d 	.word	0x24008b0d

0800e51c <__sfp_lock_release>:
 800e51c:	4801      	ldr	r0, [pc, #4]	; (800e524 <__sfp_lock_release+0x8>)
 800e51e:	f000 b8d3 	b.w	800e6c8 <__retarget_lock_release_recursive>
 800e522:	bf00      	nop
 800e524:	24008b0d 	.word	0x24008b0d

0800e528 <__sinit_lock_acquire>:
 800e528:	4801      	ldr	r0, [pc, #4]	; (800e530 <__sinit_lock_acquire+0x8>)
 800e52a:	f000 b8cc 	b.w	800e6c6 <__retarget_lock_acquire_recursive>
 800e52e:	bf00      	nop
 800e530:	24008b0e 	.word	0x24008b0e

0800e534 <__sinit_lock_release>:
 800e534:	4801      	ldr	r0, [pc, #4]	; (800e53c <__sinit_lock_release+0x8>)
 800e536:	f000 b8c7 	b.w	800e6c8 <__retarget_lock_release_recursive>
 800e53a:	bf00      	nop
 800e53c:	24008b0e 	.word	0x24008b0e

0800e540 <__sinit>:
 800e540:	b510      	push	{r4, lr}
 800e542:	4604      	mov	r4, r0
 800e544:	f7ff fff0 	bl	800e528 <__sinit_lock_acquire>
 800e548:	69a3      	ldr	r3, [r4, #24]
 800e54a:	b11b      	cbz	r3, 800e554 <__sinit+0x14>
 800e54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e550:	f7ff bff0 	b.w	800e534 <__sinit_lock_release>
 800e554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e558:	6523      	str	r3, [r4, #80]	; 0x50
 800e55a:	4b13      	ldr	r3, [pc, #76]	; (800e5a8 <__sinit+0x68>)
 800e55c:	4a13      	ldr	r2, [pc, #76]	; (800e5ac <__sinit+0x6c>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	62a2      	str	r2, [r4, #40]	; 0x28
 800e562:	42a3      	cmp	r3, r4
 800e564:	bf04      	itt	eq
 800e566:	2301      	moveq	r3, #1
 800e568:	61a3      	streq	r3, [r4, #24]
 800e56a:	4620      	mov	r0, r4
 800e56c:	f000 f820 	bl	800e5b0 <__sfp>
 800e570:	6060      	str	r0, [r4, #4]
 800e572:	4620      	mov	r0, r4
 800e574:	f000 f81c 	bl	800e5b0 <__sfp>
 800e578:	60a0      	str	r0, [r4, #8]
 800e57a:	4620      	mov	r0, r4
 800e57c:	f000 f818 	bl	800e5b0 <__sfp>
 800e580:	2200      	movs	r2, #0
 800e582:	60e0      	str	r0, [r4, #12]
 800e584:	2104      	movs	r1, #4
 800e586:	6860      	ldr	r0, [r4, #4]
 800e588:	f7ff ff82 	bl	800e490 <std>
 800e58c:	68a0      	ldr	r0, [r4, #8]
 800e58e:	2201      	movs	r2, #1
 800e590:	2109      	movs	r1, #9
 800e592:	f7ff ff7d 	bl	800e490 <std>
 800e596:	68e0      	ldr	r0, [r4, #12]
 800e598:	2202      	movs	r2, #2
 800e59a:	2112      	movs	r1, #18
 800e59c:	f7ff ff78 	bl	800e490 <std>
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	61a3      	str	r3, [r4, #24]
 800e5a4:	e7d2      	b.n	800e54c <__sinit+0xc>
 800e5a6:	bf00      	nop
 800e5a8:	0800fcc4 	.word	0x0800fcc4
 800e5ac:	0800e4d9 	.word	0x0800e4d9

0800e5b0 <__sfp>:
 800e5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5b2:	4607      	mov	r7, r0
 800e5b4:	f7ff ffac 	bl	800e510 <__sfp_lock_acquire>
 800e5b8:	4b1e      	ldr	r3, [pc, #120]	; (800e634 <__sfp+0x84>)
 800e5ba:	681e      	ldr	r6, [r3, #0]
 800e5bc:	69b3      	ldr	r3, [r6, #24]
 800e5be:	b913      	cbnz	r3, 800e5c6 <__sfp+0x16>
 800e5c0:	4630      	mov	r0, r6
 800e5c2:	f7ff ffbd 	bl	800e540 <__sinit>
 800e5c6:	3648      	adds	r6, #72	; 0x48
 800e5c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	d503      	bpl.n	800e5d8 <__sfp+0x28>
 800e5d0:	6833      	ldr	r3, [r6, #0]
 800e5d2:	b30b      	cbz	r3, 800e618 <__sfp+0x68>
 800e5d4:	6836      	ldr	r6, [r6, #0]
 800e5d6:	e7f7      	b.n	800e5c8 <__sfp+0x18>
 800e5d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e5dc:	b9d5      	cbnz	r5, 800e614 <__sfp+0x64>
 800e5de:	4b16      	ldr	r3, [pc, #88]	; (800e638 <__sfp+0x88>)
 800e5e0:	60e3      	str	r3, [r4, #12]
 800e5e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e5e6:	6665      	str	r5, [r4, #100]	; 0x64
 800e5e8:	f000 f86c 	bl	800e6c4 <__retarget_lock_init_recursive>
 800e5ec:	f7ff ff96 	bl	800e51c <__sfp_lock_release>
 800e5f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e5f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e5f8:	6025      	str	r5, [r4, #0]
 800e5fa:	61a5      	str	r5, [r4, #24]
 800e5fc:	2208      	movs	r2, #8
 800e5fe:	4629      	mov	r1, r5
 800e600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e604:	f000 f899 	bl	800e73a <memset>
 800e608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e60c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e610:	4620      	mov	r0, r4
 800e612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e614:	3468      	adds	r4, #104	; 0x68
 800e616:	e7d9      	b.n	800e5cc <__sfp+0x1c>
 800e618:	2104      	movs	r1, #4
 800e61a:	4638      	mov	r0, r7
 800e61c:	f7ff ff62 	bl	800e4e4 <__sfmoreglue>
 800e620:	4604      	mov	r4, r0
 800e622:	6030      	str	r0, [r6, #0]
 800e624:	2800      	cmp	r0, #0
 800e626:	d1d5      	bne.n	800e5d4 <__sfp+0x24>
 800e628:	f7ff ff78 	bl	800e51c <__sfp_lock_release>
 800e62c:	230c      	movs	r3, #12
 800e62e:	603b      	str	r3, [r7, #0]
 800e630:	e7ee      	b.n	800e610 <__sfp+0x60>
 800e632:	bf00      	nop
 800e634:	0800fcc4 	.word	0x0800fcc4
 800e638:	ffff0001 	.word	0xffff0001

0800e63c <_fwalk_reent>:
 800e63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e640:	4606      	mov	r6, r0
 800e642:	4688      	mov	r8, r1
 800e644:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e648:	2700      	movs	r7, #0
 800e64a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e64e:	f1b9 0901 	subs.w	r9, r9, #1
 800e652:	d505      	bpl.n	800e660 <_fwalk_reent+0x24>
 800e654:	6824      	ldr	r4, [r4, #0]
 800e656:	2c00      	cmp	r4, #0
 800e658:	d1f7      	bne.n	800e64a <_fwalk_reent+0xe>
 800e65a:	4638      	mov	r0, r7
 800e65c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e660:	89ab      	ldrh	r3, [r5, #12]
 800e662:	2b01      	cmp	r3, #1
 800e664:	d907      	bls.n	800e676 <_fwalk_reent+0x3a>
 800e666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e66a:	3301      	adds	r3, #1
 800e66c:	d003      	beq.n	800e676 <_fwalk_reent+0x3a>
 800e66e:	4629      	mov	r1, r5
 800e670:	4630      	mov	r0, r6
 800e672:	47c0      	blx	r8
 800e674:	4307      	orrs	r7, r0
 800e676:	3568      	adds	r5, #104	; 0x68
 800e678:	e7e9      	b.n	800e64e <_fwalk_reent+0x12>
	...

0800e67c <__libc_init_array>:
 800e67c:	b570      	push	{r4, r5, r6, lr}
 800e67e:	4d0d      	ldr	r5, [pc, #52]	; (800e6b4 <__libc_init_array+0x38>)
 800e680:	4c0d      	ldr	r4, [pc, #52]	; (800e6b8 <__libc_init_array+0x3c>)
 800e682:	1b64      	subs	r4, r4, r5
 800e684:	10a4      	asrs	r4, r4, #2
 800e686:	2600      	movs	r6, #0
 800e688:	42a6      	cmp	r6, r4
 800e68a:	d109      	bne.n	800e6a0 <__libc_init_array+0x24>
 800e68c:	4d0b      	ldr	r5, [pc, #44]	; (800e6bc <__libc_init_array+0x40>)
 800e68e:	4c0c      	ldr	r4, [pc, #48]	; (800e6c0 <__libc_init_array+0x44>)
 800e690:	f001 f992 	bl	800f9b8 <_init>
 800e694:	1b64      	subs	r4, r4, r5
 800e696:	10a4      	asrs	r4, r4, #2
 800e698:	2600      	movs	r6, #0
 800e69a:	42a6      	cmp	r6, r4
 800e69c:	d105      	bne.n	800e6aa <__libc_init_array+0x2e>
 800e69e:	bd70      	pop	{r4, r5, r6, pc}
 800e6a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6a4:	4798      	blx	r3
 800e6a6:	3601      	adds	r6, #1
 800e6a8:	e7ee      	b.n	800e688 <__libc_init_array+0xc>
 800e6aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800e6ae:	4798      	blx	r3
 800e6b0:	3601      	adds	r6, #1
 800e6b2:	e7f2      	b.n	800e69a <__libc_init_array+0x1e>
 800e6b4:	0800fcfc 	.word	0x0800fcfc
 800e6b8:	0800fcfc 	.word	0x0800fcfc
 800e6bc:	0800fcfc 	.word	0x0800fcfc
 800e6c0:	0800fd00 	.word	0x0800fd00

0800e6c4 <__retarget_lock_init_recursive>:
 800e6c4:	4770      	bx	lr

0800e6c6 <__retarget_lock_acquire_recursive>:
 800e6c6:	4770      	bx	lr

0800e6c8 <__retarget_lock_release_recursive>:
 800e6c8:	4770      	bx	lr

0800e6ca <memcmp>:
 800e6ca:	b510      	push	{r4, lr}
 800e6cc:	3901      	subs	r1, #1
 800e6ce:	4402      	add	r2, r0
 800e6d0:	4290      	cmp	r0, r2
 800e6d2:	d101      	bne.n	800e6d8 <memcmp+0xe>
 800e6d4:	2000      	movs	r0, #0
 800e6d6:	e005      	b.n	800e6e4 <memcmp+0x1a>
 800e6d8:	7803      	ldrb	r3, [r0, #0]
 800e6da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e6de:	42a3      	cmp	r3, r4
 800e6e0:	d001      	beq.n	800e6e6 <memcmp+0x1c>
 800e6e2:	1b18      	subs	r0, r3, r4
 800e6e4:	bd10      	pop	{r4, pc}
 800e6e6:	3001      	adds	r0, #1
 800e6e8:	e7f2      	b.n	800e6d0 <memcmp+0x6>

0800e6ea <memcpy>:
 800e6ea:	440a      	add	r2, r1
 800e6ec:	4291      	cmp	r1, r2
 800e6ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e6f2:	d100      	bne.n	800e6f6 <memcpy+0xc>
 800e6f4:	4770      	bx	lr
 800e6f6:	b510      	push	{r4, lr}
 800e6f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e700:	4291      	cmp	r1, r2
 800e702:	d1f9      	bne.n	800e6f8 <memcpy+0xe>
 800e704:	bd10      	pop	{r4, pc}

0800e706 <memmove>:
 800e706:	4288      	cmp	r0, r1
 800e708:	b510      	push	{r4, lr}
 800e70a:	eb01 0402 	add.w	r4, r1, r2
 800e70e:	d902      	bls.n	800e716 <memmove+0x10>
 800e710:	4284      	cmp	r4, r0
 800e712:	4623      	mov	r3, r4
 800e714:	d807      	bhi.n	800e726 <memmove+0x20>
 800e716:	1e43      	subs	r3, r0, #1
 800e718:	42a1      	cmp	r1, r4
 800e71a:	d008      	beq.n	800e72e <memmove+0x28>
 800e71c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e720:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e724:	e7f8      	b.n	800e718 <memmove+0x12>
 800e726:	4402      	add	r2, r0
 800e728:	4601      	mov	r1, r0
 800e72a:	428a      	cmp	r2, r1
 800e72c:	d100      	bne.n	800e730 <memmove+0x2a>
 800e72e:	bd10      	pop	{r4, pc}
 800e730:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e734:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e738:	e7f7      	b.n	800e72a <memmove+0x24>

0800e73a <memset>:
 800e73a:	4402      	add	r2, r0
 800e73c:	4603      	mov	r3, r0
 800e73e:	4293      	cmp	r3, r2
 800e740:	d100      	bne.n	800e744 <memset+0xa>
 800e742:	4770      	bx	lr
 800e744:	f803 1b01 	strb.w	r1, [r3], #1
 800e748:	e7f9      	b.n	800e73e <memset+0x4>
	...

0800e74c <sbrk_aligned>:
 800e74c:	b570      	push	{r4, r5, r6, lr}
 800e74e:	4e0e      	ldr	r6, [pc, #56]	; (800e788 <sbrk_aligned+0x3c>)
 800e750:	460c      	mov	r4, r1
 800e752:	6831      	ldr	r1, [r6, #0]
 800e754:	4605      	mov	r5, r0
 800e756:	b911      	cbnz	r1, 800e75e <sbrk_aligned+0x12>
 800e758:	f000 f984 	bl	800ea64 <_sbrk_r>
 800e75c:	6030      	str	r0, [r6, #0]
 800e75e:	4621      	mov	r1, r4
 800e760:	4628      	mov	r0, r5
 800e762:	f000 f97f 	bl	800ea64 <_sbrk_r>
 800e766:	1c43      	adds	r3, r0, #1
 800e768:	d00a      	beq.n	800e780 <sbrk_aligned+0x34>
 800e76a:	1cc4      	adds	r4, r0, #3
 800e76c:	f024 0403 	bic.w	r4, r4, #3
 800e770:	42a0      	cmp	r0, r4
 800e772:	d007      	beq.n	800e784 <sbrk_aligned+0x38>
 800e774:	1a21      	subs	r1, r4, r0
 800e776:	4628      	mov	r0, r5
 800e778:	f000 f974 	bl	800ea64 <_sbrk_r>
 800e77c:	3001      	adds	r0, #1
 800e77e:	d101      	bne.n	800e784 <sbrk_aligned+0x38>
 800e780:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e784:	4620      	mov	r0, r4
 800e786:	bd70      	pop	{r4, r5, r6, pc}
 800e788:	24008b14 	.word	0x24008b14

0800e78c <_malloc_r>:
 800e78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e790:	1ccd      	adds	r5, r1, #3
 800e792:	f025 0503 	bic.w	r5, r5, #3
 800e796:	3508      	adds	r5, #8
 800e798:	2d0c      	cmp	r5, #12
 800e79a:	bf38      	it	cc
 800e79c:	250c      	movcc	r5, #12
 800e79e:	2d00      	cmp	r5, #0
 800e7a0:	4607      	mov	r7, r0
 800e7a2:	db01      	blt.n	800e7a8 <_malloc_r+0x1c>
 800e7a4:	42a9      	cmp	r1, r5
 800e7a6:	d905      	bls.n	800e7b4 <_malloc_r+0x28>
 800e7a8:	230c      	movs	r3, #12
 800e7aa:	603b      	str	r3, [r7, #0]
 800e7ac:	2600      	movs	r6, #0
 800e7ae:	4630      	mov	r0, r6
 800e7b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b4:	4e2e      	ldr	r6, [pc, #184]	; (800e870 <_malloc_r+0xe4>)
 800e7b6:	f000 fbf1 	bl	800ef9c <__malloc_lock>
 800e7ba:	6833      	ldr	r3, [r6, #0]
 800e7bc:	461c      	mov	r4, r3
 800e7be:	bb34      	cbnz	r4, 800e80e <_malloc_r+0x82>
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	f7ff ffc2 	bl	800e74c <sbrk_aligned>
 800e7c8:	1c43      	adds	r3, r0, #1
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	d14d      	bne.n	800e86a <_malloc_r+0xde>
 800e7ce:	6834      	ldr	r4, [r6, #0]
 800e7d0:	4626      	mov	r6, r4
 800e7d2:	2e00      	cmp	r6, #0
 800e7d4:	d140      	bne.n	800e858 <_malloc_r+0xcc>
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	4631      	mov	r1, r6
 800e7da:	4638      	mov	r0, r7
 800e7dc:	eb04 0803 	add.w	r8, r4, r3
 800e7e0:	f000 f940 	bl	800ea64 <_sbrk_r>
 800e7e4:	4580      	cmp	r8, r0
 800e7e6:	d13a      	bne.n	800e85e <_malloc_r+0xd2>
 800e7e8:	6821      	ldr	r1, [r4, #0]
 800e7ea:	3503      	adds	r5, #3
 800e7ec:	1a6d      	subs	r5, r5, r1
 800e7ee:	f025 0503 	bic.w	r5, r5, #3
 800e7f2:	3508      	adds	r5, #8
 800e7f4:	2d0c      	cmp	r5, #12
 800e7f6:	bf38      	it	cc
 800e7f8:	250c      	movcc	r5, #12
 800e7fa:	4629      	mov	r1, r5
 800e7fc:	4638      	mov	r0, r7
 800e7fe:	f7ff ffa5 	bl	800e74c <sbrk_aligned>
 800e802:	3001      	adds	r0, #1
 800e804:	d02b      	beq.n	800e85e <_malloc_r+0xd2>
 800e806:	6823      	ldr	r3, [r4, #0]
 800e808:	442b      	add	r3, r5
 800e80a:	6023      	str	r3, [r4, #0]
 800e80c:	e00e      	b.n	800e82c <_malloc_r+0xa0>
 800e80e:	6822      	ldr	r2, [r4, #0]
 800e810:	1b52      	subs	r2, r2, r5
 800e812:	d41e      	bmi.n	800e852 <_malloc_r+0xc6>
 800e814:	2a0b      	cmp	r2, #11
 800e816:	d916      	bls.n	800e846 <_malloc_r+0xba>
 800e818:	1961      	adds	r1, r4, r5
 800e81a:	42a3      	cmp	r3, r4
 800e81c:	6025      	str	r5, [r4, #0]
 800e81e:	bf18      	it	ne
 800e820:	6059      	strne	r1, [r3, #4]
 800e822:	6863      	ldr	r3, [r4, #4]
 800e824:	bf08      	it	eq
 800e826:	6031      	streq	r1, [r6, #0]
 800e828:	5162      	str	r2, [r4, r5]
 800e82a:	604b      	str	r3, [r1, #4]
 800e82c:	4638      	mov	r0, r7
 800e82e:	f104 060b 	add.w	r6, r4, #11
 800e832:	f000 fbb9 	bl	800efa8 <__malloc_unlock>
 800e836:	f026 0607 	bic.w	r6, r6, #7
 800e83a:	1d23      	adds	r3, r4, #4
 800e83c:	1af2      	subs	r2, r6, r3
 800e83e:	d0b6      	beq.n	800e7ae <_malloc_r+0x22>
 800e840:	1b9b      	subs	r3, r3, r6
 800e842:	50a3      	str	r3, [r4, r2]
 800e844:	e7b3      	b.n	800e7ae <_malloc_r+0x22>
 800e846:	6862      	ldr	r2, [r4, #4]
 800e848:	42a3      	cmp	r3, r4
 800e84a:	bf0c      	ite	eq
 800e84c:	6032      	streq	r2, [r6, #0]
 800e84e:	605a      	strne	r2, [r3, #4]
 800e850:	e7ec      	b.n	800e82c <_malloc_r+0xa0>
 800e852:	4623      	mov	r3, r4
 800e854:	6864      	ldr	r4, [r4, #4]
 800e856:	e7b2      	b.n	800e7be <_malloc_r+0x32>
 800e858:	4634      	mov	r4, r6
 800e85a:	6876      	ldr	r6, [r6, #4]
 800e85c:	e7b9      	b.n	800e7d2 <_malloc_r+0x46>
 800e85e:	230c      	movs	r3, #12
 800e860:	603b      	str	r3, [r7, #0]
 800e862:	4638      	mov	r0, r7
 800e864:	f000 fba0 	bl	800efa8 <__malloc_unlock>
 800e868:	e7a1      	b.n	800e7ae <_malloc_r+0x22>
 800e86a:	6025      	str	r5, [r4, #0]
 800e86c:	e7de      	b.n	800e82c <_malloc_r+0xa0>
 800e86e:	bf00      	nop
 800e870:	24008b10 	.word	0x24008b10

0800e874 <iprintf>:
 800e874:	b40f      	push	{r0, r1, r2, r3}
 800e876:	4b0a      	ldr	r3, [pc, #40]	; (800e8a0 <iprintf+0x2c>)
 800e878:	b513      	push	{r0, r1, r4, lr}
 800e87a:	681c      	ldr	r4, [r3, #0]
 800e87c:	b124      	cbz	r4, 800e888 <iprintf+0x14>
 800e87e:	69a3      	ldr	r3, [r4, #24]
 800e880:	b913      	cbnz	r3, 800e888 <iprintf+0x14>
 800e882:	4620      	mov	r0, r4
 800e884:	f7ff fe5c 	bl	800e540 <__sinit>
 800e888:	ab05      	add	r3, sp, #20
 800e88a:	9a04      	ldr	r2, [sp, #16]
 800e88c:	68a1      	ldr	r1, [r4, #8]
 800e88e:	9301      	str	r3, [sp, #4]
 800e890:	4620      	mov	r0, r4
 800e892:	f000 fd61 	bl	800f358 <_vfiprintf_r>
 800e896:	b002      	add	sp, #8
 800e898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e89c:	b004      	add	sp, #16
 800e89e:	4770      	bx	lr
 800e8a0:	24000014 	.word	0x24000014

0800e8a4 <_puts_r>:
 800e8a4:	b570      	push	{r4, r5, r6, lr}
 800e8a6:	460e      	mov	r6, r1
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	b118      	cbz	r0, 800e8b4 <_puts_r+0x10>
 800e8ac:	6983      	ldr	r3, [r0, #24]
 800e8ae:	b90b      	cbnz	r3, 800e8b4 <_puts_r+0x10>
 800e8b0:	f7ff fe46 	bl	800e540 <__sinit>
 800e8b4:	69ab      	ldr	r3, [r5, #24]
 800e8b6:	68ac      	ldr	r4, [r5, #8]
 800e8b8:	b913      	cbnz	r3, 800e8c0 <_puts_r+0x1c>
 800e8ba:	4628      	mov	r0, r5
 800e8bc:	f7ff fe40 	bl	800e540 <__sinit>
 800e8c0:	4b2c      	ldr	r3, [pc, #176]	; (800e974 <_puts_r+0xd0>)
 800e8c2:	429c      	cmp	r4, r3
 800e8c4:	d120      	bne.n	800e908 <_puts_r+0x64>
 800e8c6:	686c      	ldr	r4, [r5, #4]
 800e8c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8ca:	07db      	lsls	r3, r3, #31
 800e8cc:	d405      	bmi.n	800e8da <_puts_r+0x36>
 800e8ce:	89a3      	ldrh	r3, [r4, #12]
 800e8d0:	0598      	lsls	r0, r3, #22
 800e8d2:	d402      	bmi.n	800e8da <_puts_r+0x36>
 800e8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8d6:	f7ff fef6 	bl	800e6c6 <__retarget_lock_acquire_recursive>
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	0719      	lsls	r1, r3, #28
 800e8de:	d51d      	bpl.n	800e91c <_puts_r+0x78>
 800e8e0:	6923      	ldr	r3, [r4, #16]
 800e8e2:	b1db      	cbz	r3, 800e91c <_puts_r+0x78>
 800e8e4:	3e01      	subs	r6, #1
 800e8e6:	68a3      	ldr	r3, [r4, #8]
 800e8e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	60a3      	str	r3, [r4, #8]
 800e8f0:	bb39      	cbnz	r1, 800e942 <_puts_r+0x9e>
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	da38      	bge.n	800e968 <_puts_r+0xc4>
 800e8f6:	4622      	mov	r2, r4
 800e8f8:	210a      	movs	r1, #10
 800e8fa:	4628      	mov	r0, r5
 800e8fc:	f000 f932 	bl	800eb64 <__swbuf_r>
 800e900:	3001      	adds	r0, #1
 800e902:	d011      	beq.n	800e928 <_puts_r+0x84>
 800e904:	250a      	movs	r5, #10
 800e906:	e011      	b.n	800e92c <_puts_r+0x88>
 800e908:	4b1b      	ldr	r3, [pc, #108]	; (800e978 <_puts_r+0xd4>)
 800e90a:	429c      	cmp	r4, r3
 800e90c:	d101      	bne.n	800e912 <_puts_r+0x6e>
 800e90e:	68ac      	ldr	r4, [r5, #8]
 800e910:	e7da      	b.n	800e8c8 <_puts_r+0x24>
 800e912:	4b1a      	ldr	r3, [pc, #104]	; (800e97c <_puts_r+0xd8>)
 800e914:	429c      	cmp	r4, r3
 800e916:	bf08      	it	eq
 800e918:	68ec      	ldreq	r4, [r5, #12]
 800e91a:	e7d5      	b.n	800e8c8 <_puts_r+0x24>
 800e91c:	4621      	mov	r1, r4
 800e91e:	4628      	mov	r0, r5
 800e920:	f000 f984 	bl	800ec2c <__swsetup_r>
 800e924:	2800      	cmp	r0, #0
 800e926:	d0dd      	beq.n	800e8e4 <_puts_r+0x40>
 800e928:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e92c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e92e:	07da      	lsls	r2, r3, #31
 800e930:	d405      	bmi.n	800e93e <_puts_r+0x9a>
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	059b      	lsls	r3, r3, #22
 800e936:	d402      	bmi.n	800e93e <_puts_r+0x9a>
 800e938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e93a:	f7ff fec5 	bl	800e6c8 <__retarget_lock_release_recursive>
 800e93e:	4628      	mov	r0, r5
 800e940:	bd70      	pop	{r4, r5, r6, pc}
 800e942:	2b00      	cmp	r3, #0
 800e944:	da04      	bge.n	800e950 <_puts_r+0xac>
 800e946:	69a2      	ldr	r2, [r4, #24]
 800e948:	429a      	cmp	r2, r3
 800e94a:	dc06      	bgt.n	800e95a <_puts_r+0xb6>
 800e94c:	290a      	cmp	r1, #10
 800e94e:	d004      	beq.n	800e95a <_puts_r+0xb6>
 800e950:	6823      	ldr	r3, [r4, #0]
 800e952:	1c5a      	adds	r2, r3, #1
 800e954:	6022      	str	r2, [r4, #0]
 800e956:	7019      	strb	r1, [r3, #0]
 800e958:	e7c5      	b.n	800e8e6 <_puts_r+0x42>
 800e95a:	4622      	mov	r2, r4
 800e95c:	4628      	mov	r0, r5
 800e95e:	f000 f901 	bl	800eb64 <__swbuf_r>
 800e962:	3001      	adds	r0, #1
 800e964:	d1bf      	bne.n	800e8e6 <_puts_r+0x42>
 800e966:	e7df      	b.n	800e928 <_puts_r+0x84>
 800e968:	6823      	ldr	r3, [r4, #0]
 800e96a:	250a      	movs	r5, #10
 800e96c:	1c5a      	adds	r2, r3, #1
 800e96e:	6022      	str	r2, [r4, #0]
 800e970:	701d      	strb	r5, [r3, #0]
 800e972:	e7db      	b.n	800e92c <_puts_r+0x88>
 800e974:	0800fc84 	.word	0x0800fc84
 800e978:	0800fca4 	.word	0x0800fca4
 800e97c:	0800fc64 	.word	0x0800fc64

0800e980 <puts>:
 800e980:	4b02      	ldr	r3, [pc, #8]	; (800e98c <puts+0xc>)
 800e982:	4601      	mov	r1, r0
 800e984:	6818      	ldr	r0, [r3, #0]
 800e986:	f7ff bf8d 	b.w	800e8a4 <_puts_r>
 800e98a:	bf00      	nop
 800e98c:	24000014 	.word	0x24000014

0800e990 <cleanup_glue>:
 800e990:	b538      	push	{r3, r4, r5, lr}
 800e992:	460c      	mov	r4, r1
 800e994:	6809      	ldr	r1, [r1, #0]
 800e996:	4605      	mov	r5, r0
 800e998:	b109      	cbz	r1, 800e99e <cleanup_glue+0xe>
 800e99a:	f7ff fff9 	bl	800e990 <cleanup_glue>
 800e99e:	4621      	mov	r1, r4
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e9a6:	f000 bb05 	b.w	800efb4 <_free_r>
	...

0800e9ac <_reclaim_reent>:
 800e9ac:	4b2c      	ldr	r3, [pc, #176]	; (800ea60 <_reclaim_reent+0xb4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4283      	cmp	r3, r0
 800e9b2:	b570      	push	{r4, r5, r6, lr}
 800e9b4:	4604      	mov	r4, r0
 800e9b6:	d051      	beq.n	800ea5c <_reclaim_reent+0xb0>
 800e9b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e9ba:	b143      	cbz	r3, 800e9ce <_reclaim_reent+0x22>
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d14a      	bne.n	800ea58 <_reclaim_reent+0xac>
 800e9c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e9c4:	6819      	ldr	r1, [r3, #0]
 800e9c6:	b111      	cbz	r1, 800e9ce <_reclaim_reent+0x22>
 800e9c8:	4620      	mov	r0, r4
 800e9ca:	f000 faf3 	bl	800efb4 <_free_r>
 800e9ce:	6961      	ldr	r1, [r4, #20]
 800e9d0:	b111      	cbz	r1, 800e9d8 <_reclaim_reent+0x2c>
 800e9d2:	4620      	mov	r0, r4
 800e9d4:	f000 faee 	bl	800efb4 <_free_r>
 800e9d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e9da:	b111      	cbz	r1, 800e9e2 <_reclaim_reent+0x36>
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f000 fae9 	bl	800efb4 <_free_r>
 800e9e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e9e4:	b111      	cbz	r1, 800e9ec <_reclaim_reent+0x40>
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f000 fae4 	bl	800efb4 <_free_r>
 800e9ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e9ee:	b111      	cbz	r1, 800e9f6 <_reclaim_reent+0x4a>
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f000 fadf 	bl	800efb4 <_free_r>
 800e9f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e9f8:	b111      	cbz	r1, 800ea00 <_reclaim_reent+0x54>
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	f000 fada 	bl	800efb4 <_free_r>
 800ea00:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ea02:	b111      	cbz	r1, 800ea0a <_reclaim_reent+0x5e>
 800ea04:	4620      	mov	r0, r4
 800ea06:	f000 fad5 	bl	800efb4 <_free_r>
 800ea0a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ea0c:	b111      	cbz	r1, 800ea14 <_reclaim_reent+0x68>
 800ea0e:	4620      	mov	r0, r4
 800ea10:	f000 fad0 	bl	800efb4 <_free_r>
 800ea14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea16:	b111      	cbz	r1, 800ea1e <_reclaim_reent+0x72>
 800ea18:	4620      	mov	r0, r4
 800ea1a:	f000 facb 	bl	800efb4 <_free_r>
 800ea1e:	69a3      	ldr	r3, [r4, #24]
 800ea20:	b1e3      	cbz	r3, 800ea5c <_reclaim_reent+0xb0>
 800ea22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ea24:	4620      	mov	r0, r4
 800ea26:	4798      	blx	r3
 800ea28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ea2a:	b1b9      	cbz	r1, 800ea5c <_reclaim_reent+0xb0>
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea32:	f7ff bfad 	b.w	800e990 <cleanup_glue>
 800ea36:	5949      	ldr	r1, [r1, r5]
 800ea38:	b941      	cbnz	r1, 800ea4c <_reclaim_reent+0xa0>
 800ea3a:	3504      	adds	r5, #4
 800ea3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea3e:	2d80      	cmp	r5, #128	; 0x80
 800ea40:	68d9      	ldr	r1, [r3, #12]
 800ea42:	d1f8      	bne.n	800ea36 <_reclaim_reent+0x8a>
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 fab5 	bl	800efb4 <_free_r>
 800ea4a:	e7ba      	b.n	800e9c2 <_reclaim_reent+0x16>
 800ea4c:	680e      	ldr	r6, [r1, #0]
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f000 fab0 	bl	800efb4 <_free_r>
 800ea54:	4631      	mov	r1, r6
 800ea56:	e7ef      	b.n	800ea38 <_reclaim_reent+0x8c>
 800ea58:	2500      	movs	r5, #0
 800ea5a:	e7ef      	b.n	800ea3c <_reclaim_reent+0x90>
 800ea5c:	bd70      	pop	{r4, r5, r6, pc}
 800ea5e:	bf00      	nop
 800ea60:	24000014 	.word	0x24000014

0800ea64 <_sbrk_r>:
 800ea64:	b538      	push	{r3, r4, r5, lr}
 800ea66:	4d06      	ldr	r5, [pc, #24]	; (800ea80 <_sbrk_r+0x1c>)
 800ea68:	2300      	movs	r3, #0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4608      	mov	r0, r1
 800ea6e:	602b      	str	r3, [r5, #0]
 800ea70:	f7f2 fc12 	bl	8001298 <_sbrk>
 800ea74:	1c43      	adds	r3, r0, #1
 800ea76:	d102      	bne.n	800ea7e <_sbrk_r+0x1a>
 800ea78:	682b      	ldr	r3, [r5, #0]
 800ea7a:	b103      	cbz	r3, 800ea7e <_sbrk_r+0x1a>
 800ea7c:	6023      	str	r3, [r4, #0]
 800ea7e:	bd38      	pop	{r3, r4, r5, pc}
 800ea80:	24008b18 	.word	0x24008b18

0800ea84 <siprintf>:
 800ea84:	b40e      	push	{r1, r2, r3}
 800ea86:	b500      	push	{lr}
 800ea88:	b09c      	sub	sp, #112	; 0x70
 800ea8a:	ab1d      	add	r3, sp, #116	; 0x74
 800ea8c:	9002      	str	r0, [sp, #8]
 800ea8e:	9006      	str	r0, [sp, #24]
 800ea90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea94:	4809      	ldr	r0, [pc, #36]	; (800eabc <siprintf+0x38>)
 800ea96:	9107      	str	r1, [sp, #28]
 800ea98:	9104      	str	r1, [sp, #16]
 800ea9a:	4909      	ldr	r1, [pc, #36]	; (800eac0 <siprintf+0x3c>)
 800ea9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800eaa0:	9105      	str	r1, [sp, #20]
 800eaa2:	6800      	ldr	r0, [r0, #0]
 800eaa4:	9301      	str	r3, [sp, #4]
 800eaa6:	a902      	add	r1, sp, #8
 800eaa8:	f000 fb2c 	bl	800f104 <_svfiprintf_r>
 800eaac:	9b02      	ldr	r3, [sp, #8]
 800eaae:	2200      	movs	r2, #0
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	b01c      	add	sp, #112	; 0x70
 800eab4:	f85d eb04 	ldr.w	lr, [sp], #4
 800eab8:	b003      	add	sp, #12
 800eaba:	4770      	bx	lr
 800eabc:	24000014 	.word	0x24000014
 800eac0:	ffff0208 	.word	0xffff0208

0800eac4 <__sread>:
 800eac4:	b510      	push	{r4, lr}
 800eac6:	460c      	mov	r4, r1
 800eac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eacc:	f000 ff08 	bl	800f8e0 <_read_r>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	bfab      	itete	ge
 800ead4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ead6:	89a3      	ldrhlt	r3, [r4, #12]
 800ead8:	181b      	addge	r3, r3, r0
 800eada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eade:	bfac      	ite	ge
 800eae0:	6563      	strge	r3, [r4, #84]	; 0x54
 800eae2:	81a3      	strhlt	r3, [r4, #12]
 800eae4:	bd10      	pop	{r4, pc}

0800eae6 <__swrite>:
 800eae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaea:	461f      	mov	r7, r3
 800eaec:	898b      	ldrh	r3, [r1, #12]
 800eaee:	05db      	lsls	r3, r3, #23
 800eaf0:	4605      	mov	r5, r0
 800eaf2:	460c      	mov	r4, r1
 800eaf4:	4616      	mov	r6, r2
 800eaf6:	d505      	bpl.n	800eb04 <__swrite+0x1e>
 800eaf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eafc:	2302      	movs	r3, #2
 800eafe:	2200      	movs	r2, #0
 800eb00:	f000 f9d4 	bl	800eeac <_lseek_r>
 800eb04:	89a3      	ldrh	r3, [r4, #12]
 800eb06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb0e:	81a3      	strh	r3, [r4, #12]
 800eb10:	4632      	mov	r2, r6
 800eb12:	463b      	mov	r3, r7
 800eb14:	4628      	mov	r0, r5
 800eb16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1a:	f000 b875 	b.w	800ec08 <_write_r>

0800eb1e <__sseek>:
 800eb1e:	b510      	push	{r4, lr}
 800eb20:	460c      	mov	r4, r1
 800eb22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb26:	f000 f9c1 	bl	800eeac <_lseek_r>
 800eb2a:	1c43      	adds	r3, r0, #1
 800eb2c:	89a3      	ldrh	r3, [r4, #12]
 800eb2e:	bf15      	itete	ne
 800eb30:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb3a:	81a3      	strheq	r3, [r4, #12]
 800eb3c:	bf18      	it	ne
 800eb3e:	81a3      	strhne	r3, [r4, #12]
 800eb40:	bd10      	pop	{r4, pc}

0800eb42 <__sclose>:
 800eb42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb46:	f000 b8df 	b.w	800ed08 <_close_r>

0800eb4a <strchr>:
 800eb4a:	b2c9      	uxtb	r1, r1
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb52:	b11a      	cbz	r2, 800eb5c <strchr+0x12>
 800eb54:	428a      	cmp	r2, r1
 800eb56:	d1f9      	bne.n	800eb4c <strchr+0x2>
 800eb58:	4618      	mov	r0, r3
 800eb5a:	4770      	bx	lr
 800eb5c:	2900      	cmp	r1, #0
 800eb5e:	bf18      	it	ne
 800eb60:	2300      	movne	r3, #0
 800eb62:	e7f9      	b.n	800eb58 <strchr+0xe>

0800eb64 <__swbuf_r>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	460e      	mov	r6, r1
 800eb68:	4614      	mov	r4, r2
 800eb6a:	4605      	mov	r5, r0
 800eb6c:	b118      	cbz	r0, 800eb76 <__swbuf_r+0x12>
 800eb6e:	6983      	ldr	r3, [r0, #24]
 800eb70:	b90b      	cbnz	r3, 800eb76 <__swbuf_r+0x12>
 800eb72:	f7ff fce5 	bl	800e540 <__sinit>
 800eb76:	4b21      	ldr	r3, [pc, #132]	; (800ebfc <__swbuf_r+0x98>)
 800eb78:	429c      	cmp	r4, r3
 800eb7a:	d12b      	bne.n	800ebd4 <__swbuf_r+0x70>
 800eb7c:	686c      	ldr	r4, [r5, #4]
 800eb7e:	69a3      	ldr	r3, [r4, #24]
 800eb80:	60a3      	str	r3, [r4, #8]
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	071a      	lsls	r2, r3, #28
 800eb86:	d52f      	bpl.n	800ebe8 <__swbuf_r+0x84>
 800eb88:	6923      	ldr	r3, [r4, #16]
 800eb8a:	b36b      	cbz	r3, 800ebe8 <__swbuf_r+0x84>
 800eb8c:	6923      	ldr	r3, [r4, #16]
 800eb8e:	6820      	ldr	r0, [r4, #0]
 800eb90:	1ac0      	subs	r0, r0, r3
 800eb92:	6963      	ldr	r3, [r4, #20]
 800eb94:	b2f6      	uxtb	r6, r6
 800eb96:	4283      	cmp	r3, r0
 800eb98:	4637      	mov	r7, r6
 800eb9a:	dc04      	bgt.n	800eba6 <__swbuf_r+0x42>
 800eb9c:	4621      	mov	r1, r4
 800eb9e:	4628      	mov	r0, r5
 800eba0:	f000 f948 	bl	800ee34 <_fflush_r>
 800eba4:	bb30      	cbnz	r0, 800ebf4 <__swbuf_r+0x90>
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	60a3      	str	r3, [r4, #8]
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	6022      	str	r2, [r4, #0]
 800ebb2:	701e      	strb	r6, [r3, #0]
 800ebb4:	6963      	ldr	r3, [r4, #20]
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	4283      	cmp	r3, r0
 800ebba:	d004      	beq.n	800ebc6 <__swbuf_r+0x62>
 800ebbc:	89a3      	ldrh	r3, [r4, #12]
 800ebbe:	07db      	lsls	r3, r3, #31
 800ebc0:	d506      	bpl.n	800ebd0 <__swbuf_r+0x6c>
 800ebc2:	2e0a      	cmp	r6, #10
 800ebc4:	d104      	bne.n	800ebd0 <__swbuf_r+0x6c>
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f000 f933 	bl	800ee34 <_fflush_r>
 800ebce:	b988      	cbnz	r0, 800ebf4 <__swbuf_r+0x90>
 800ebd0:	4638      	mov	r0, r7
 800ebd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebd4:	4b0a      	ldr	r3, [pc, #40]	; (800ec00 <__swbuf_r+0x9c>)
 800ebd6:	429c      	cmp	r4, r3
 800ebd8:	d101      	bne.n	800ebde <__swbuf_r+0x7a>
 800ebda:	68ac      	ldr	r4, [r5, #8]
 800ebdc:	e7cf      	b.n	800eb7e <__swbuf_r+0x1a>
 800ebde:	4b09      	ldr	r3, [pc, #36]	; (800ec04 <__swbuf_r+0xa0>)
 800ebe0:	429c      	cmp	r4, r3
 800ebe2:	bf08      	it	eq
 800ebe4:	68ec      	ldreq	r4, [r5, #12]
 800ebe6:	e7ca      	b.n	800eb7e <__swbuf_r+0x1a>
 800ebe8:	4621      	mov	r1, r4
 800ebea:	4628      	mov	r0, r5
 800ebec:	f000 f81e 	bl	800ec2c <__swsetup_r>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	d0cb      	beq.n	800eb8c <__swbuf_r+0x28>
 800ebf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ebf8:	e7ea      	b.n	800ebd0 <__swbuf_r+0x6c>
 800ebfa:	bf00      	nop
 800ebfc:	0800fc84 	.word	0x0800fc84
 800ec00:	0800fca4 	.word	0x0800fca4
 800ec04:	0800fc64 	.word	0x0800fc64

0800ec08 <_write_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d07      	ldr	r5, [pc, #28]	; (800ec28 <_write_r+0x20>)
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	4608      	mov	r0, r1
 800ec10:	4611      	mov	r1, r2
 800ec12:	2200      	movs	r2, #0
 800ec14:	602a      	str	r2, [r5, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	f7f1 fe41 	bl	800089e <_write>
 800ec1c:	1c43      	adds	r3, r0, #1
 800ec1e:	d102      	bne.n	800ec26 <_write_r+0x1e>
 800ec20:	682b      	ldr	r3, [r5, #0]
 800ec22:	b103      	cbz	r3, 800ec26 <_write_r+0x1e>
 800ec24:	6023      	str	r3, [r4, #0]
 800ec26:	bd38      	pop	{r3, r4, r5, pc}
 800ec28:	24008b18 	.word	0x24008b18

0800ec2c <__swsetup_r>:
 800ec2c:	4b32      	ldr	r3, [pc, #200]	; (800ecf8 <__swsetup_r+0xcc>)
 800ec2e:	b570      	push	{r4, r5, r6, lr}
 800ec30:	681d      	ldr	r5, [r3, #0]
 800ec32:	4606      	mov	r6, r0
 800ec34:	460c      	mov	r4, r1
 800ec36:	b125      	cbz	r5, 800ec42 <__swsetup_r+0x16>
 800ec38:	69ab      	ldr	r3, [r5, #24]
 800ec3a:	b913      	cbnz	r3, 800ec42 <__swsetup_r+0x16>
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	f7ff fc7f 	bl	800e540 <__sinit>
 800ec42:	4b2e      	ldr	r3, [pc, #184]	; (800ecfc <__swsetup_r+0xd0>)
 800ec44:	429c      	cmp	r4, r3
 800ec46:	d10f      	bne.n	800ec68 <__swsetup_r+0x3c>
 800ec48:	686c      	ldr	r4, [r5, #4]
 800ec4a:	89a3      	ldrh	r3, [r4, #12]
 800ec4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec50:	0719      	lsls	r1, r3, #28
 800ec52:	d42c      	bmi.n	800ecae <__swsetup_r+0x82>
 800ec54:	06dd      	lsls	r5, r3, #27
 800ec56:	d411      	bmi.n	800ec7c <__swsetup_r+0x50>
 800ec58:	2309      	movs	r3, #9
 800ec5a:	6033      	str	r3, [r6, #0]
 800ec5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ec60:	81a3      	strh	r3, [r4, #12]
 800ec62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec66:	e03e      	b.n	800ece6 <__swsetup_r+0xba>
 800ec68:	4b25      	ldr	r3, [pc, #148]	; (800ed00 <__swsetup_r+0xd4>)
 800ec6a:	429c      	cmp	r4, r3
 800ec6c:	d101      	bne.n	800ec72 <__swsetup_r+0x46>
 800ec6e:	68ac      	ldr	r4, [r5, #8]
 800ec70:	e7eb      	b.n	800ec4a <__swsetup_r+0x1e>
 800ec72:	4b24      	ldr	r3, [pc, #144]	; (800ed04 <__swsetup_r+0xd8>)
 800ec74:	429c      	cmp	r4, r3
 800ec76:	bf08      	it	eq
 800ec78:	68ec      	ldreq	r4, [r5, #12]
 800ec7a:	e7e6      	b.n	800ec4a <__swsetup_r+0x1e>
 800ec7c:	0758      	lsls	r0, r3, #29
 800ec7e:	d512      	bpl.n	800eca6 <__swsetup_r+0x7a>
 800ec80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec82:	b141      	cbz	r1, 800ec96 <__swsetup_r+0x6a>
 800ec84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec88:	4299      	cmp	r1, r3
 800ec8a:	d002      	beq.n	800ec92 <__swsetup_r+0x66>
 800ec8c:	4630      	mov	r0, r6
 800ec8e:	f000 f991 	bl	800efb4 <_free_r>
 800ec92:	2300      	movs	r3, #0
 800ec94:	6363      	str	r3, [r4, #52]	; 0x34
 800ec96:	89a3      	ldrh	r3, [r4, #12]
 800ec98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ec9c:	81a3      	strh	r3, [r4, #12]
 800ec9e:	2300      	movs	r3, #0
 800eca0:	6063      	str	r3, [r4, #4]
 800eca2:	6923      	ldr	r3, [r4, #16]
 800eca4:	6023      	str	r3, [r4, #0]
 800eca6:	89a3      	ldrh	r3, [r4, #12]
 800eca8:	f043 0308 	orr.w	r3, r3, #8
 800ecac:	81a3      	strh	r3, [r4, #12]
 800ecae:	6923      	ldr	r3, [r4, #16]
 800ecb0:	b94b      	cbnz	r3, 800ecc6 <__swsetup_r+0x9a>
 800ecb2:	89a3      	ldrh	r3, [r4, #12]
 800ecb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecbc:	d003      	beq.n	800ecc6 <__swsetup_r+0x9a>
 800ecbe:	4621      	mov	r1, r4
 800ecc0:	4630      	mov	r0, r6
 800ecc2:	f000 f92b 	bl	800ef1c <__smakebuf_r>
 800ecc6:	89a0      	ldrh	r0, [r4, #12]
 800ecc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eccc:	f010 0301 	ands.w	r3, r0, #1
 800ecd0:	d00a      	beq.n	800ece8 <__swsetup_r+0xbc>
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60a3      	str	r3, [r4, #8]
 800ecd6:	6963      	ldr	r3, [r4, #20]
 800ecd8:	425b      	negs	r3, r3
 800ecda:	61a3      	str	r3, [r4, #24]
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	b943      	cbnz	r3, 800ecf2 <__swsetup_r+0xc6>
 800ece0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ece4:	d1ba      	bne.n	800ec5c <__swsetup_r+0x30>
 800ece6:	bd70      	pop	{r4, r5, r6, pc}
 800ece8:	0781      	lsls	r1, r0, #30
 800ecea:	bf58      	it	pl
 800ecec:	6963      	ldrpl	r3, [r4, #20]
 800ecee:	60a3      	str	r3, [r4, #8]
 800ecf0:	e7f4      	b.n	800ecdc <__swsetup_r+0xb0>
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	e7f7      	b.n	800ece6 <__swsetup_r+0xba>
 800ecf6:	bf00      	nop
 800ecf8:	24000014 	.word	0x24000014
 800ecfc:	0800fc84 	.word	0x0800fc84
 800ed00:	0800fca4 	.word	0x0800fca4
 800ed04:	0800fc64 	.word	0x0800fc64

0800ed08 <_close_r>:
 800ed08:	b538      	push	{r3, r4, r5, lr}
 800ed0a:	4d06      	ldr	r5, [pc, #24]	; (800ed24 <_close_r+0x1c>)
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	4604      	mov	r4, r0
 800ed10:	4608      	mov	r0, r1
 800ed12:	602b      	str	r3, [r5, #0]
 800ed14:	f7f2 fa8b 	bl	800122e <_close>
 800ed18:	1c43      	adds	r3, r0, #1
 800ed1a:	d102      	bne.n	800ed22 <_close_r+0x1a>
 800ed1c:	682b      	ldr	r3, [r5, #0]
 800ed1e:	b103      	cbz	r3, 800ed22 <_close_r+0x1a>
 800ed20:	6023      	str	r3, [r4, #0]
 800ed22:	bd38      	pop	{r3, r4, r5, pc}
 800ed24:	24008b18 	.word	0x24008b18

0800ed28 <__sflush_r>:
 800ed28:	898a      	ldrh	r2, [r1, #12]
 800ed2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed2e:	4605      	mov	r5, r0
 800ed30:	0710      	lsls	r0, r2, #28
 800ed32:	460c      	mov	r4, r1
 800ed34:	d458      	bmi.n	800ede8 <__sflush_r+0xc0>
 800ed36:	684b      	ldr	r3, [r1, #4]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	dc05      	bgt.n	800ed48 <__sflush_r+0x20>
 800ed3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	dc02      	bgt.n	800ed48 <__sflush_r+0x20>
 800ed42:	2000      	movs	r0, #0
 800ed44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed4a:	2e00      	cmp	r6, #0
 800ed4c:	d0f9      	beq.n	800ed42 <__sflush_r+0x1a>
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ed54:	682f      	ldr	r7, [r5, #0]
 800ed56:	602b      	str	r3, [r5, #0]
 800ed58:	d032      	beq.n	800edc0 <__sflush_r+0x98>
 800ed5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ed5c:	89a3      	ldrh	r3, [r4, #12]
 800ed5e:	075a      	lsls	r2, r3, #29
 800ed60:	d505      	bpl.n	800ed6e <__sflush_r+0x46>
 800ed62:	6863      	ldr	r3, [r4, #4]
 800ed64:	1ac0      	subs	r0, r0, r3
 800ed66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ed68:	b10b      	cbz	r3, 800ed6e <__sflush_r+0x46>
 800ed6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed6c:	1ac0      	subs	r0, r0, r3
 800ed6e:	2300      	movs	r3, #0
 800ed70:	4602      	mov	r2, r0
 800ed72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed74:	6a21      	ldr	r1, [r4, #32]
 800ed76:	4628      	mov	r0, r5
 800ed78:	47b0      	blx	r6
 800ed7a:	1c43      	adds	r3, r0, #1
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	d106      	bne.n	800ed8e <__sflush_r+0x66>
 800ed80:	6829      	ldr	r1, [r5, #0]
 800ed82:	291d      	cmp	r1, #29
 800ed84:	d82c      	bhi.n	800ede0 <__sflush_r+0xb8>
 800ed86:	4a2a      	ldr	r2, [pc, #168]	; (800ee30 <__sflush_r+0x108>)
 800ed88:	40ca      	lsrs	r2, r1
 800ed8a:	07d6      	lsls	r6, r2, #31
 800ed8c:	d528      	bpl.n	800ede0 <__sflush_r+0xb8>
 800ed8e:	2200      	movs	r2, #0
 800ed90:	6062      	str	r2, [r4, #4]
 800ed92:	04d9      	lsls	r1, r3, #19
 800ed94:	6922      	ldr	r2, [r4, #16]
 800ed96:	6022      	str	r2, [r4, #0]
 800ed98:	d504      	bpl.n	800eda4 <__sflush_r+0x7c>
 800ed9a:	1c42      	adds	r2, r0, #1
 800ed9c:	d101      	bne.n	800eda2 <__sflush_r+0x7a>
 800ed9e:	682b      	ldr	r3, [r5, #0]
 800eda0:	b903      	cbnz	r3, 800eda4 <__sflush_r+0x7c>
 800eda2:	6560      	str	r0, [r4, #84]	; 0x54
 800eda4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eda6:	602f      	str	r7, [r5, #0]
 800eda8:	2900      	cmp	r1, #0
 800edaa:	d0ca      	beq.n	800ed42 <__sflush_r+0x1a>
 800edac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edb0:	4299      	cmp	r1, r3
 800edb2:	d002      	beq.n	800edba <__sflush_r+0x92>
 800edb4:	4628      	mov	r0, r5
 800edb6:	f000 f8fd 	bl	800efb4 <_free_r>
 800edba:	2000      	movs	r0, #0
 800edbc:	6360      	str	r0, [r4, #52]	; 0x34
 800edbe:	e7c1      	b.n	800ed44 <__sflush_r+0x1c>
 800edc0:	6a21      	ldr	r1, [r4, #32]
 800edc2:	2301      	movs	r3, #1
 800edc4:	4628      	mov	r0, r5
 800edc6:	47b0      	blx	r6
 800edc8:	1c41      	adds	r1, r0, #1
 800edca:	d1c7      	bne.n	800ed5c <__sflush_r+0x34>
 800edcc:	682b      	ldr	r3, [r5, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d0c4      	beq.n	800ed5c <__sflush_r+0x34>
 800edd2:	2b1d      	cmp	r3, #29
 800edd4:	d001      	beq.n	800edda <__sflush_r+0xb2>
 800edd6:	2b16      	cmp	r3, #22
 800edd8:	d101      	bne.n	800edde <__sflush_r+0xb6>
 800edda:	602f      	str	r7, [r5, #0]
 800eddc:	e7b1      	b.n	800ed42 <__sflush_r+0x1a>
 800edde:	89a3      	ldrh	r3, [r4, #12]
 800ede0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ede4:	81a3      	strh	r3, [r4, #12]
 800ede6:	e7ad      	b.n	800ed44 <__sflush_r+0x1c>
 800ede8:	690f      	ldr	r7, [r1, #16]
 800edea:	2f00      	cmp	r7, #0
 800edec:	d0a9      	beq.n	800ed42 <__sflush_r+0x1a>
 800edee:	0793      	lsls	r3, r2, #30
 800edf0:	680e      	ldr	r6, [r1, #0]
 800edf2:	bf08      	it	eq
 800edf4:	694b      	ldreq	r3, [r1, #20]
 800edf6:	600f      	str	r7, [r1, #0]
 800edf8:	bf18      	it	ne
 800edfa:	2300      	movne	r3, #0
 800edfc:	eba6 0807 	sub.w	r8, r6, r7
 800ee00:	608b      	str	r3, [r1, #8]
 800ee02:	f1b8 0f00 	cmp.w	r8, #0
 800ee06:	dd9c      	ble.n	800ed42 <__sflush_r+0x1a>
 800ee08:	6a21      	ldr	r1, [r4, #32]
 800ee0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ee0c:	4643      	mov	r3, r8
 800ee0e:	463a      	mov	r2, r7
 800ee10:	4628      	mov	r0, r5
 800ee12:	47b0      	blx	r6
 800ee14:	2800      	cmp	r0, #0
 800ee16:	dc06      	bgt.n	800ee26 <__sflush_r+0xfe>
 800ee18:	89a3      	ldrh	r3, [r4, #12]
 800ee1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee1e:	81a3      	strh	r3, [r4, #12]
 800ee20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee24:	e78e      	b.n	800ed44 <__sflush_r+0x1c>
 800ee26:	4407      	add	r7, r0
 800ee28:	eba8 0800 	sub.w	r8, r8, r0
 800ee2c:	e7e9      	b.n	800ee02 <__sflush_r+0xda>
 800ee2e:	bf00      	nop
 800ee30:	20400001 	.word	0x20400001

0800ee34 <_fflush_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	690b      	ldr	r3, [r1, #16]
 800ee38:	4605      	mov	r5, r0
 800ee3a:	460c      	mov	r4, r1
 800ee3c:	b913      	cbnz	r3, 800ee44 <_fflush_r+0x10>
 800ee3e:	2500      	movs	r5, #0
 800ee40:	4628      	mov	r0, r5
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
 800ee44:	b118      	cbz	r0, 800ee4e <_fflush_r+0x1a>
 800ee46:	6983      	ldr	r3, [r0, #24]
 800ee48:	b90b      	cbnz	r3, 800ee4e <_fflush_r+0x1a>
 800ee4a:	f7ff fb79 	bl	800e540 <__sinit>
 800ee4e:	4b14      	ldr	r3, [pc, #80]	; (800eea0 <_fflush_r+0x6c>)
 800ee50:	429c      	cmp	r4, r3
 800ee52:	d11b      	bne.n	800ee8c <_fflush_r+0x58>
 800ee54:	686c      	ldr	r4, [r5, #4]
 800ee56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d0ef      	beq.n	800ee3e <_fflush_r+0xa>
 800ee5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ee60:	07d0      	lsls	r0, r2, #31
 800ee62:	d404      	bmi.n	800ee6e <_fflush_r+0x3a>
 800ee64:	0599      	lsls	r1, r3, #22
 800ee66:	d402      	bmi.n	800ee6e <_fflush_r+0x3a>
 800ee68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee6a:	f7ff fc2c 	bl	800e6c6 <__retarget_lock_acquire_recursive>
 800ee6e:	4628      	mov	r0, r5
 800ee70:	4621      	mov	r1, r4
 800ee72:	f7ff ff59 	bl	800ed28 <__sflush_r>
 800ee76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee78:	07da      	lsls	r2, r3, #31
 800ee7a:	4605      	mov	r5, r0
 800ee7c:	d4e0      	bmi.n	800ee40 <_fflush_r+0xc>
 800ee7e:	89a3      	ldrh	r3, [r4, #12]
 800ee80:	059b      	lsls	r3, r3, #22
 800ee82:	d4dd      	bmi.n	800ee40 <_fflush_r+0xc>
 800ee84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee86:	f7ff fc1f 	bl	800e6c8 <__retarget_lock_release_recursive>
 800ee8a:	e7d9      	b.n	800ee40 <_fflush_r+0xc>
 800ee8c:	4b05      	ldr	r3, [pc, #20]	; (800eea4 <_fflush_r+0x70>)
 800ee8e:	429c      	cmp	r4, r3
 800ee90:	d101      	bne.n	800ee96 <_fflush_r+0x62>
 800ee92:	68ac      	ldr	r4, [r5, #8]
 800ee94:	e7df      	b.n	800ee56 <_fflush_r+0x22>
 800ee96:	4b04      	ldr	r3, [pc, #16]	; (800eea8 <_fflush_r+0x74>)
 800ee98:	429c      	cmp	r4, r3
 800ee9a:	bf08      	it	eq
 800ee9c:	68ec      	ldreq	r4, [r5, #12]
 800ee9e:	e7da      	b.n	800ee56 <_fflush_r+0x22>
 800eea0:	0800fc84 	.word	0x0800fc84
 800eea4:	0800fca4 	.word	0x0800fca4
 800eea8:	0800fc64 	.word	0x0800fc64

0800eeac <_lseek_r>:
 800eeac:	b538      	push	{r3, r4, r5, lr}
 800eeae:	4d07      	ldr	r5, [pc, #28]	; (800eecc <_lseek_r+0x20>)
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4608      	mov	r0, r1
 800eeb4:	4611      	mov	r1, r2
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	602a      	str	r2, [r5, #0]
 800eeba:	461a      	mov	r2, r3
 800eebc:	f7f2 f9de 	bl	800127c <_lseek>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d102      	bne.n	800eeca <_lseek_r+0x1e>
 800eec4:	682b      	ldr	r3, [r5, #0]
 800eec6:	b103      	cbz	r3, 800eeca <_lseek_r+0x1e>
 800eec8:	6023      	str	r3, [r4, #0]
 800eeca:	bd38      	pop	{r3, r4, r5, pc}
 800eecc:	24008b18 	.word	0x24008b18

0800eed0 <__swhatbuf_r>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	460e      	mov	r6, r1
 800eed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eed8:	2900      	cmp	r1, #0
 800eeda:	b096      	sub	sp, #88	; 0x58
 800eedc:	4614      	mov	r4, r2
 800eede:	461d      	mov	r5, r3
 800eee0:	da08      	bge.n	800eef4 <__swhatbuf_r+0x24>
 800eee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	602a      	str	r2, [r5, #0]
 800eeea:	061a      	lsls	r2, r3, #24
 800eeec:	d410      	bmi.n	800ef10 <__swhatbuf_r+0x40>
 800eeee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eef2:	e00e      	b.n	800ef12 <__swhatbuf_r+0x42>
 800eef4:	466a      	mov	r2, sp
 800eef6:	f000 fd05 	bl	800f904 <_fstat_r>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	dbf1      	blt.n	800eee2 <__swhatbuf_r+0x12>
 800eefe:	9a01      	ldr	r2, [sp, #4]
 800ef00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef08:	425a      	negs	r2, r3
 800ef0a:	415a      	adcs	r2, r3
 800ef0c:	602a      	str	r2, [r5, #0]
 800ef0e:	e7ee      	b.n	800eeee <__swhatbuf_r+0x1e>
 800ef10:	2340      	movs	r3, #64	; 0x40
 800ef12:	2000      	movs	r0, #0
 800ef14:	6023      	str	r3, [r4, #0]
 800ef16:	b016      	add	sp, #88	; 0x58
 800ef18:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ef1c <__smakebuf_r>:
 800ef1c:	898b      	ldrh	r3, [r1, #12]
 800ef1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ef20:	079d      	lsls	r5, r3, #30
 800ef22:	4606      	mov	r6, r0
 800ef24:	460c      	mov	r4, r1
 800ef26:	d507      	bpl.n	800ef38 <__smakebuf_r+0x1c>
 800ef28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	6123      	str	r3, [r4, #16]
 800ef30:	2301      	movs	r3, #1
 800ef32:	6163      	str	r3, [r4, #20]
 800ef34:	b002      	add	sp, #8
 800ef36:	bd70      	pop	{r4, r5, r6, pc}
 800ef38:	ab01      	add	r3, sp, #4
 800ef3a:	466a      	mov	r2, sp
 800ef3c:	f7ff ffc8 	bl	800eed0 <__swhatbuf_r>
 800ef40:	9900      	ldr	r1, [sp, #0]
 800ef42:	4605      	mov	r5, r0
 800ef44:	4630      	mov	r0, r6
 800ef46:	f7ff fc21 	bl	800e78c <_malloc_r>
 800ef4a:	b948      	cbnz	r0, 800ef60 <__smakebuf_r+0x44>
 800ef4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef50:	059a      	lsls	r2, r3, #22
 800ef52:	d4ef      	bmi.n	800ef34 <__smakebuf_r+0x18>
 800ef54:	f023 0303 	bic.w	r3, r3, #3
 800ef58:	f043 0302 	orr.w	r3, r3, #2
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	e7e3      	b.n	800ef28 <__smakebuf_r+0xc>
 800ef60:	4b0d      	ldr	r3, [pc, #52]	; (800ef98 <__smakebuf_r+0x7c>)
 800ef62:	62b3      	str	r3, [r6, #40]	; 0x28
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	6020      	str	r0, [r4, #0]
 800ef68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef6c:	81a3      	strh	r3, [r4, #12]
 800ef6e:	9b00      	ldr	r3, [sp, #0]
 800ef70:	6163      	str	r3, [r4, #20]
 800ef72:	9b01      	ldr	r3, [sp, #4]
 800ef74:	6120      	str	r0, [r4, #16]
 800ef76:	b15b      	cbz	r3, 800ef90 <__smakebuf_r+0x74>
 800ef78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef7c:	4630      	mov	r0, r6
 800ef7e:	f000 fcd3 	bl	800f928 <_isatty_r>
 800ef82:	b128      	cbz	r0, 800ef90 <__smakebuf_r+0x74>
 800ef84:	89a3      	ldrh	r3, [r4, #12]
 800ef86:	f023 0303 	bic.w	r3, r3, #3
 800ef8a:	f043 0301 	orr.w	r3, r3, #1
 800ef8e:	81a3      	strh	r3, [r4, #12]
 800ef90:	89a0      	ldrh	r0, [r4, #12]
 800ef92:	4305      	orrs	r5, r0
 800ef94:	81a5      	strh	r5, [r4, #12]
 800ef96:	e7cd      	b.n	800ef34 <__smakebuf_r+0x18>
 800ef98:	0800e4d9 	.word	0x0800e4d9

0800ef9c <__malloc_lock>:
 800ef9c:	4801      	ldr	r0, [pc, #4]	; (800efa4 <__malloc_lock+0x8>)
 800ef9e:	f7ff bb92 	b.w	800e6c6 <__retarget_lock_acquire_recursive>
 800efa2:	bf00      	nop
 800efa4:	24008b0c 	.word	0x24008b0c

0800efa8 <__malloc_unlock>:
 800efa8:	4801      	ldr	r0, [pc, #4]	; (800efb0 <__malloc_unlock+0x8>)
 800efaa:	f7ff bb8d 	b.w	800e6c8 <__retarget_lock_release_recursive>
 800efae:	bf00      	nop
 800efb0:	24008b0c 	.word	0x24008b0c

0800efb4 <_free_r>:
 800efb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efb6:	2900      	cmp	r1, #0
 800efb8:	d044      	beq.n	800f044 <_free_r+0x90>
 800efba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efbe:	9001      	str	r0, [sp, #4]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	f1a1 0404 	sub.w	r4, r1, #4
 800efc6:	bfb8      	it	lt
 800efc8:	18e4      	addlt	r4, r4, r3
 800efca:	f7ff ffe7 	bl	800ef9c <__malloc_lock>
 800efce:	4a1e      	ldr	r2, [pc, #120]	; (800f048 <_free_r+0x94>)
 800efd0:	9801      	ldr	r0, [sp, #4]
 800efd2:	6813      	ldr	r3, [r2, #0]
 800efd4:	b933      	cbnz	r3, 800efe4 <_free_r+0x30>
 800efd6:	6063      	str	r3, [r4, #4]
 800efd8:	6014      	str	r4, [r2, #0]
 800efda:	b003      	add	sp, #12
 800efdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efe0:	f7ff bfe2 	b.w	800efa8 <__malloc_unlock>
 800efe4:	42a3      	cmp	r3, r4
 800efe6:	d908      	bls.n	800effa <_free_r+0x46>
 800efe8:	6825      	ldr	r5, [r4, #0]
 800efea:	1961      	adds	r1, r4, r5
 800efec:	428b      	cmp	r3, r1
 800efee:	bf01      	itttt	eq
 800eff0:	6819      	ldreq	r1, [r3, #0]
 800eff2:	685b      	ldreq	r3, [r3, #4]
 800eff4:	1949      	addeq	r1, r1, r5
 800eff6:	6021      	streq	r1, [r4, #0]
 800eff8:	e7ed      	b.n	800efd6 <_free_r+0x22>
 800effa:	461a      	mov	r2, r3
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	b10b      	cbz	r3, 800f004 <_free_r+0x50>
 800f000:	42a3      	cmp	r3, r4
 800f002:	d9fa      	bls.n	800effa <_free_r+0x46>
 800f004:	6811      	ldr	r1, [r2, #0]
 800f006:	1855      	adds	r5, r2, r1
 800f008:	42a5      	cmp	r5, r4
 800f00a:	d10b      	bne.n	800f024 <_free_r+0x70>
 800f00c:	6824      	ldr	r4, [r4, #0]
 800f00e:	4421      	add	r1, r4
 800f010:	1854      	adds	r4, r2, r1
 800f012:	42a3      	cmp	r3, r4
 800f014:	6011      	str	r1, [r2, #0]
 800f016:	d1e0      	bne.n	800efda <_free_r+0x26>
 800f018:	681c      	ldr	r4, [r3, #0]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	6053      	str	r3, [r2, #4]
 800f01e:	4421      	add	r1, r4
 800f020:	6011      	str	r1, [r2, #0]
 800f022:	e7da      	b.n	800efda <_free_r+0x26>
 800f024:	d902      	bls.n	800f02c <_free_r+0x78>
 800f026:	230c      	movs	r3, #12
 800f028:	6003      	str	r3, [r0, #0]
 800f02a:	e7d6      	b.n	800efda <_free_r+0x26>
 800f02c:	6825      	ldr	r5, [r4, #0]
 800f02e:	1961      	adds	r1, r4, r5
 800f030:	428b      	cmp	r3, r1
 800f032:	bf04      	itt	eq
 800f034:	6819      	ldreq	r1, [r3, #0]
 800f036:	685b      	ldreq	r3, [r3, #4]
 800f038:	6063      	str	r3, [r4, #4]
 800f03a:	bf04      	itt	eq
 800f03c:	1949      	addeq	r1, r1, r5
 800f03e:	6021      	streq	r1, [r4, #0]
 800f040:	6054      	str	r4, [r2, #4]
 800f042:	e7ca      	b.n	800efda <_free_r+0x26>
 800f044:	b003      	add	sp, #12
 800f046:	bd30      	pop	{r4, r5, pc}
 800f048:	24008b10 	.word	0x24008b10

0800f04c <__ssputs_r>:
 800f04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f050:	688e      	ldr	r6, [r1, #8]
 800f052:	429e      	cmp	r6, r3
 800f054:	4682      	mov	sl, r0
 800f056:	460c      	mov	r4, r1
 800f058:	4690      	mov	r8, r2
 800f05a:	461f      	mov	r7, r3
 800f05c:	d838      	bhi.n	800f0d0 <__ssputs_r+0x84>
 800f05e:	898a      	ldrh	r2, [r1, #12]
 800f060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f064:	d032      	beq.n	800f0cc <__ssputs_r+0x80>
 800f066:	6825      	ldr	r5, [r4, #0]
 800f068:	6909      	ldr	r1, [r1, #16]
 800f06a:	eba5 0901 	sub.w	r9, r5, r1
 800f06e:	6965      	ldr	r5, [r4, #20]
 800f070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f078:	3301      	adds	r3, #1
 800f07a:	444b      	add	r3, r9
 800f07c:	106d      	asrs	r5, r5, #1
 800f07e:	429d      	cmp	r5, r3
 800f080:	bf38      	it	cc
 800f082:	461d      	movcc	r5, r3
 800f084:	0553      	lsls	r3, r2, #21
 800f086:	d531      	bpl.n	800f0ec <__ssputs_r+0xa0>
 800f088:	4629      	mov	r1, r5
 800f08a:	f7ff fb7f 	bl	800e78c <_malloc_r>
 800f08e:	4606      	mov	r6, r0
 800f090:	b950      	cbnz	r0, 800f0a8 <__ssputs_r+0x5c>
 800f092:	230c      	movs	r3, #12
 800f094:	f8ca 3000 	str.w	r3, [sl]
 800f098:	89a3      	ldrh	r3, [r4, #12]
 800f09a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f09e:	81a3      	strh	r3, [r4, #12]
 800f0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f0a8:	6921      	ldr	r1, [r4, #16]
 800f0aa:	464a      	mov	r2, r9
 800f0ac:	f7ff fb1d 	bl	800e6ea <memcpy>
 800f0b0:	89a3      	ldrh	r3, [r4, #12]
 800f0b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f0b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0ba:	81a3      	strh	r3, [r4, #12]
 800f0bc:	6126      	str	r6, [r4, #16]
 800f0be:	6165      	str	r5, [r4, #20]
 800f0c0:	444e      	add	r6, r9
 800f0c2:	eba5 0509 	sub.w	r5, r5, r9
 800f0c6:	6026      	str	r6, [r4, #0]
 800f0c8:	60a5      	str	r5, [r4, #8]
 800f0ca:	463e      	mov	r6, r7
 800f0cc:	42be      	cmp	r6, r7
 800f0ce:	d900      	bls.n	800f0d2 <__ssputs_r+0x86>
 800f0d0:	463e      	mov	r6, r7
 800f0d2:	6820      	ldr	r0, [r4, #0]
 800f0d4:	4632      	mov	r2, r6
 800f0d6:	4641      	mov	r1, r8
 800f0d8:	f7ff fb15 	bl	800e706 <memmove>
 800f0dc:	68a3      	ldr	r3, [r4, #8]
 800f0de:	1b9b      	subs	r3, r3, r6
 800f0e0:	60a3      	str	r3, [r4, #8]
 800f0e2:	6823      	ldr	r3, [r4, #0]
 800f0e4:	4433      	add	r3, r6
 800f0e6:	6023      	str	r3, [r4, #0]
 800f0e8:	2000      	movs	r0, #0
 800f0ea:	e7db      	b.n	800f0a4 <__ssputs_r+0x58>
 800f0ec:	462a      	mov	r2, r5
 800f0ee:	f000 fc2b 	bl	800f948 <_realloc_r>
 800f0f2:	4606      	mov	r6, r0
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d1e1      	bne.n	800f0bc <__ssputs_r+0x70>
 800f0f8:	6921      	ldr	r1, [r4, #16]
 800f0fa:	4650      	mov	r0, sl
 800f0fc:	f7ff ff5a 	bl	800efb4 <_free_r>
 800f100:	e7c7      	b.n	800f092 <__ssputs_r+0x46>
	...

0800f104 <_svfiprintf_r>:
 800f104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f108:	4698      	mov	r8, r3
 800f10a:	898b      	ldrh	r3, [r1, #12]
 800f10c:	061b      	lsls	r3, r3, #24
 800f10e:	b09d      	sub	sp, #116	; 0x74
 800f110:	4607      	mov	r7, r0
 800f112:	460d      	mov	r5, r1
 800f114:	4614      	mov	r4, r2
 800f116:	d50e      	bpl.n	800f136 <_svfiprintf_r+0x32>
 800f118:	690b      	ldr	r3, [r1, #16]
 800f11a:	b963      	cbnz	r3, 800f136 <_svfiprintf_r+0x32>
 800f11c:	2140      	movs	r1, #64	; 0x40
 800f11e:	f7ff fb35 	bl	800e78c <_malloc_r>
 800f122:	6028      	str	r0, [r5, #0]
 800f124:	6128      	str	r0, [r5, #16]
 800f126:	b920      	cbnz	r0, 800f132 <_svfiprintf_r+0x2e>
 800f128:	230c      	movs	r3, #12
 800f12a:	603b      	str	r3, [r7, #0]
 800f12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f130:	e0d1      	b.n	800f2d6 <_svfiprintf_r+0x1d2>
 800f132:	2340      	movs	r3, #64	; 0x40
 800f134:	616b      	str	r3, [r5, #20]
 800f136:	2300      	movs	r3, #0
 800f138:	9309      	str	r3, [sp, #36]	; 0x24
 800f13a:	2320      	movs	r3, #32
 800f13c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f140:	f8cd 800c 	str.w	r8, [sp, #12]
 800f144:	2330      	movs	r3, #48	; 0x30
 800f146:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f2f0 <_svfiprintf_r+0x1ec>
 800f14a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f14e:	f04f 0901 	mov.w	r9, #1
 800f152:	4623      	mov	r3, r4
 800f154:	469a      	mov	sl, r3
 800f156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f15a:	b10a      	cbz	r2, 800f160 <_svfiprintf_r+0x5c>
 800f15c:	2a25      	cmp	r2, #37	; 0x25
 800f15e:	d1f9      	bne.n	800f154 <_svfiprintf_r+0x50>
 800f160:	ebba 0b04 	subs.w	fp, sl, r4
 800f164:	d00b      	beq.n	800f17e <_svfiprintf_r+0x7a>
 800f166:	465b      	mov	r3, fp
 800f168:	4622      	mov	r2, r4
 800f16a:	4629      	mov	r1, r5
 800f16c:	4638      	mov	r0, r7
 800f16e:	f7ff ff6d 	bl	800f04c <__ssputs_r>
 800f172:	3001      	adds	r0, #1
 800f174:	f000 80aa 	beq.w	800f2cc <_svfiprintf_r+0x1c8>
 800f178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f17a:	445a      	add	r2, fp
 800f17c:	9209      	str	r2, [sp, #36]	; 0x24
 800f17e:	f89a 3000 	ldrb.w	r3, [sl]
 800f182:	2b00      	cmp	r3, #0
 800f184:	f000 80a2 	beq.w	800f2cc <_svfiprintf_r+0x1c8>
 800f188:	2300      	movs	r3, #0
 800f18a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f18e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f192:	f10a 0a01 	add.w	sl, sl, #1
 800f196:	9304      	str	r3, [sp, #16]
 800f198:	9307      	str	r3, [sp, #28]
 800f19a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f19e:	931a      	str	r3, [sp, #104]	; 0x68
 800f1a0:	4654      	mov	r4, sl
 800f1a2:	2205      	movs	r2, #5
 800f1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1a8:	4851      	ldr	r0, [pc, #324]	; (800f2f0 <_svfiprintf_r+0x1ec>)
 800f1aa:	f7f1 f8a1 	bl	80002f0 <memchr>
 800f1ae:	9a04      	ldr	r2, [sp, #16]
 800f1b0:	b9d8      	cbnz	r0, 800f1ea <_svfiprintf_r+0xe6>
 800f1b2:	06d0      	lsls	r0, r2, #27
 800f1b4:	bf44      	itt	mi
 800f1b6:	2320      	movmi	r3, #32
 800f1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1bc:	0711      	lsls	r1, r2, #28
 800f1be:	bf44      	itt	mi
 800f1c0:	232b      	movmi	r3, #43	; 0x2b
 800f1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1c6:	f89a 3000 	ldrb.w	r3, [sl]
 800f1ca:	2b2a      	cmp	r3, #42	; 0x2a
 800f1cc:	d015      	beq.n	800f1fa <_svfiprintf_r+0xf6>
 800f1ce:	9a07      	ldr	r2, [sp, #28]
 800f1d0:	4654      	mov	r4, sl
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	f04f 0c0a 	mov.w	ip, #10
 800f1d8:	4621      	mov	r1, r4
 800f1da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f1de:	3b30      	subs	r3, #48	; 0x30
 800f1e0:	2b09      	cmp	r3, #9
 800f1e2:	d94e      	bls.n	800f282 <_svfiprintf_r+0x17e>
 800f1e4:	b1b0      	cbz	r0, 800f214 <_svfiprintf_r+0x110>
 800f1e6:	9207      	str	r2, [sp, #28]
 800f1e8:	e014      	b.n	800f214 <_svfiprintf_r+0x110>
 800f1ea:	eba0 0308 	sub.w	r3, r0, r8
 800f1ee:	fa09 f303 	lsl.w	r3, r9, r3
 800f1f2:	4313      	orrs	r3, r2
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	46a2      	mov	sl, r4
 800f1f8:	e7d2      	b.n	800f1a0 <_svfiprintf_r+0x9c>
 800f1fa:	9b03      	ldr	r3, [sp, #12]
 800f1fc:	1d19      	adds	r1, r3, #4
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	9103      	str	r1, [sp, #12]
 800f202:	2b00      	cmp	r3, #0
 800f204:	bfbb      	ittet	lt
 800f206:	425b      	neglt	r3, r3
 800f208:	f042 0202 	orrlt.w	r2, r2, #2
 800f20c:	9307      	strge	r3, [sp, #28]
 800f20e:	9307      	strlt	r3, [sp, #28]
 800f210:	bfb8      	it	lt
 800f212:	9204      	strlt	r2, [sp, #16]
 800f214:	7823      	ldrb	r3, [r4, #0]
 800f216:	2b2e      	cmp	r3, #46	; 0x2e
 800f218:	d10c      	bne.n	800f234 <_svfiprintf_r+0x130>
 800f21a:	7863      	ldrb	r3, [r4, #1]
 800f21c:	2b2a      	cmp	r3, #42	; 0x2a
 800f21e:	d135      	bne.n	800f28c <_svfiprintf_r+0x188>
 800f220:	9b03      	ldr	r3, [sp, #12]
 800f222:	1d1a      	adds	r2, r3, #4
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	9203      	str	r2, [sp, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	bfb8      	it	lt
 800f22c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f230:	3402      	adds	r4, #2
 800f232:	9305      	str	r3, [sp, #20]
 800f234:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f300 <_svfiprintf_r+0x1fc>
 800f238:	7821      	ldrb	r1, [r4, #0]
 800f23a:	2203      	movs	r2, #3
 800f23c:	4650      	mov	r0, sl
 800f23e:	f7f1 f857 	bl	80002f0 <memchr>
 800f242:	b140      	cbz	r0, 800f256 <_svfiprintf_r+0x152>
 800f244:	2340      	movs	r3, #64	; 0x40
 800f246:	eba0 000a 	sub.w	r0, r0, sl
 800f24a:	fa03 f000 	lsl.w	r0, r3, r0
 800f24e:	9b04      	ldr	r3, [sp, #16]
 800f250:	4303      	orrs	r3, r0
 800f252:	3401      	adds	r4, #1
 800f254:	9304      	str	r3, [sp, #16]
 800f256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f25a:	4826      	ldr	r0, [pc, #152]	; (800f2f4 <_svfiprintf_r+0x1f0>)
 800f25c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f260:	2206      	movs	r2, #6
 800f262:	f7f1 f845 	bl	80002f0 <memchr>
 800f266:	2800      	cmp	r0, #0
 800f268:	d038      	beq.n	800f2dc <_svfiprintf_r+0x1d8>
 800f26a:	4b23      	ldr	r3, [pc, #140]	; (800f2f8 <_svfiprintf_r+0x1f4>)
 800f26c:	bb1b      	cbnz	r3, 800f2b6 <_svfiprintf_r+0x1b2>
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	3307      	adds	r3, #7
 800f272:	f023 0307 	bic.w	r3, r3, #7
 800f276:	3308      	adds	r3, #8
 800f278:	9303      	str	r3, [sp, #12]
 800f27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f27c:	4433      	add	r3, r6
 800f27e:	9309      	str	r3, [sp, #36]	; 0x24
 800f280:	e767      	b.n	800f152 <_svfiprintf_r+0x4e>
 800f282:	fb0c 3202 	mla	r2, ip, r2, r3
 800f286:	460c      	mov	r4, r1
 800f288:	2001      	movs	r0, #1
 800f28a:	e7a5      	b.n	800f1d8 <_svfiprintf_r+0xd4>
 800f28c:	2300      	movs	r3, #0
 800f28e:	3401      	adds	r4, #1
 800f290:	9305      	str	r3, [sp, #20]
 800f292:	4619      	mov	r1, r3
 800f294:	f04f 0c0a 	mov.w	ip, #10
 800f298:	4620      	mov	r0, r4
 800f29a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f29e:	3a30      	subs	r2, #48	; 0x30
 800f2a0:	2a09      	cmp	r2, #9
 800f2a2:	d903      	bls.n	800f2ac <_svfiprintf_r+0x1a8>
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d0c5      	beq.n	800f234 <_svfiprintf_r+0x130>
 800f2a8:	9105      	str	r1, [sp, #20]
 800f2aa:	e7c3      	b.n	800f234 <_svfiprintf_r+0x130>
 800f2ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	e7f0      	b.n	800f298 <_svfiprintf_r+0x194>
 800f2b6:	ab03      	add	r3, sp, #12
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	462a      	mov	r2, r5
 800f2bc:	4b0f      	ldr	r3, [pc, #60]	; (800f2fc <_svfiprintf_r+0x1f8>)
 800f2be:	a904      	add	r1, sp, #16
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	f3af 8000 	nop.w
 800f2c6:	1c42      	adds	r2, r0, #1
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	d1d6      	bne.n	800f27a <_svfiprintf_r+0x176>
 800f2cc:	89ab      	ldrh	r3, [r5, #12]
 800f2ce:	065b      	lsls	r3, r3, #25
 800f2d0:	f53f af2c 	bmi.w	800f12c <_svfiprintf_r+0x28>
 800f2d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2d6:	b01d      	add	sp, #116	; 0x74
 800f2d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2dc:	ab03      	add	r3, sp, #12
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	462a      	mov	r2, r5
 800f2e2:	4b06      	ldr	r3, [pc, #24]	; (800f2fc <_svfiprintf_r+0x1f8>)
 800f2e4:	a904      	add	r1, sp, #16
 800f2e6:	4638      	mov	r0, r7
 800f2e8:	f000 f9d4 	bl	800f694 <_printf_i>
 800f2ec:	e7eb      	b.n	800f2c6 <_svfiprintf_r+0x1c2>
 800f2ee:	bf00      	nop
 800f2f0:	0800fcc8 	.word	0x0800fcc8
 800f2f4:	0800fcd2 	.word	0x0800fcd2
 800f2f8:	00000000 	.word	0x00000000
 800f2fc:	0800f04d 	.word	0x0800f04d
 800f300:	0800fcce 	.word	0x0800fcce

0800f304 <__sfputc_r>:
 800f304:	6893      	ldr	r3, [r2, #8]
 800f306:	3b01      	subs	r3, #1
 800f308:	2b00      	cmp	r3, #0
 800f30a:	b410      	push	{r4}
 800f30c:	6093      	str	r3, [r2, #8]
 800f30e:	da08      	bge.n	800f322 <__sfputc_r+0x1e>
 800f310:	6994      	ldr	r4, [r2, #24]
 800f312:	42a3      	cmp	r3, r4
 800f314:	db01      	blt.n	800f31a <__sfputc_r+0x16>
 800f316:	290a      	cmp	r1, #10
 800f318:	d103      	bne.n	800f322 <__sfputc_r+0x1e>
 800f31a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f31e:	f7ff bc21 	b.w	800eb64 <__swbuf_r>
 800f322:	6813      	ldr	r3, [r2, #0]
 800f324:	1c58      	adds	r0, r3, #1
 800f326:	6010      	str	r0, [r2, #0]
 800f328:	7019      	strb	r1, [r3, #0]
 800f32a:	4608      	mov	r0, r1
 800f32c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f330:	4770      	bx	lr

0800f332 <__sfputs_r>:
 800f332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f334:	4606      	mov	r6, r0
 800f336:	460f      	mov	r7, r1
 800f338:	4614      	mov	r4, r2
 800f33a:	18d5      	adds	r5, r2, r3
 800f33c:	42ac      	cmp	r4, r5
 800f33e:	d101      	bne.n	800f344 <__sfputs_r+0x12>
 800f340:	2000      	movs	r0, #0
 800f342:	e007      	b.n	800f354 <__sfputs_r+0x22>
 800f344:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f348:	463a      	mov	r2, r7
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7ff ffda 	bl	800f304 <__sfputc_r>
 800f350:	1c43      	adds	r3, r0, #1
 800f352:	d1f3      	bne.n	800f33c <__sfputs_r+0xa>
 800f354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f358 <_vfiprintf_r>:
 800f358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f35c:	460d      	mov	r5, r1
 800f35e:	b09d      	sub	sp, #116	; 0x74
 800f360:	4614      	mov	r4, r2
 800f362:	4698      	mov	r8, r3
 800f364:	4606      	mov	r6, r0
 800f366:	b118      	cbz	r0, 800f370 <_vfiprintf_r+0x18>
 800f368:	6983      	ldr	r3, [r0, #24]
 800f36a:	b90b      	cbnz	r3, 800f370 <_vfiprintf_r+0x18>
 800f36c:	f7ff f8e8 	bl	800e540 <__sinit>
 800f370:	4b89      	ldr	r3, [pc, #548]	; (800f598 <_vfiprintf_r+0x240>)
 800f372:	429d      	cmp	r5, r3
 800f374:	d11b      	bne.n	800f3ae <_vfiprintf_r+0x56>
 800f376:	6875      	ldr	r5, [r6, #4]
 800f378:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f37a:	07d9      	lsls	r1, r3, #31
 800f37c:	d405      	bmi.n	800f38a <_vfiprintf_r+0x32>
 800f37e:	89ab      	ldrh	r3, [r5, #12]
 800f380:	059a      	lsls	r2, r3, #22
 800f382:	d402      	bmi.n	800f38a <_vfiprintf_r+0x32>
 800f384:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f386:	f7ff f99e 	bl	800e6c6 <__retarget_lock_acquire_recursive>
 800f38a:	89ab      	ldrh	r3, [r5, #12]
 800f38c:	071b      	lsls	r3, r3, #28
 800f38e:	d501      	bpl.n	800f394 <_vfiprintf_r+0x3c>
 800f390:	692b      	ldr	r3, [r5, #16]
 800f392:	b9eb      	cbnz	r3, 800f3d0 <_vfiprintf_r+0x78>
 800f394:	4629      	mov	r1, r5
 800f396:	4630      	mov	r0, r6
 800f398:	f7ff fc48 	bl	800ec2c <__swsetup_r>
 800f39c:	b1c0      	cbz	r0, 800f3d0 <_vfiprintf_r+0x78>
 800f39e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3a0:	07dc      	lsls	r4, r3, #31
 800f3a2:	d50e      	bpl.n	800f3c2 <_vfiprintf_r+0x6a>
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3a8:	b01d      	add	sp, #116	; 0x74
 800f3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ae:	4b7b      	ldr	r3, [pc, #492]	; (800f59c <_vfiprintf_r+0x244>)
 800f3b0:	429d      	cmp	r5, r3
 800f3b2:	d101      	bne.n	800f3b8 <_vfiprintf_r+0x60>
 800f3b4:	68b5      	ldr	r5, [r6, #8]
 800f3b6:	e7df      	b.n	800f378 <_vfiprintf_r+0x20>
 800f3b8:	4b79      	ldr	r3, [pc, #484]	; (800f5a0 <_vfiprintf_r+0x248>)
 800f3ba:	429d      	cmp	r5, r3
 800f3bc:	bf08      	it	eq
 800f3be:	68f5      	ldreq	r5, [r6, #12]
 800f3c0:	e7da      	b.n	800f378 <_vfiprintf_r+0x20>
 800f3c2:	89ab      	ldrh	r3, [r5, #12]
 800f3c4:	0598      	lsls	r0, r3, #22
 800f3c6:	d4ed      	bmi.n	800f3a4 <_vfiprintf_r+0x4c>
 800f3c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3ca:	f7ff f97d 	bl	800e6c8 <__retarget_lock_release_recursive>
 800f3ce:	e7e9      	b.n	800f3a4 <_vfiprintf_r+0x4c>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3d4:	2320      	movs	r3, #32
 800f3d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3de:	2330      	movs	r3, #48	; 0x30
 800f3e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f5a4 <_vfiprintf_r+0x24c>
 800f3e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3e8:	f04f 0901 	mov.w	r9, #1
 800f3ec:	4623      	mov	r3, r4
 800f3ee:	469a      	mov	sl, r3
 800f3f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3f4:	b10a      	cbz	r2, 800f3fa <_vfiprintf_r+0xa2>
 800f3f6:	2a25      	cmp	r2, #37	; 0x25
 800f3f8:	d1f9      	bne.n	800f3ee <_vfiprintf_r+0x96>
 800f3fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f3fe:	d00b      	beq.n	800f418 <_vfiprintf_r+0xc0>
 800f400:	465b      	mov	r3, fp
 800f402:	4622      	mov	r2, r4
 800f404:	4629      	mov	r1, r5
 800f406:	4630      	mov	r0, r6
 800f408:	f7ff ff93 	bl	800f332 <__sfputs_r>
 800f40c:	3001      	adds	r0, #1
 800f40e:	f000 80aa 	beq.w	800f566 <_vfiprintf_r+0x20e>
 800f412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f414:	445a      	add	r2, fp
 800f416:	9209      	str	r2, [sp, #36]	; 0x24
 800f418:	f89a 3000 	ldrb.w	r3, [sl]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	f000 80a2 	beq.w	800f566 <_vfiprintf_r+0x20e>
 800f422:	2300      	movs	r3, #0
 800f424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f42c:	f10a 0a01 	add.w	sl, sl, #1
 800f430:	9304      	str	r3, [sp, #16]
 800f432:	9307      	str	r3, [sp, #28]
 800f434:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f438:	931a      	str	r3, [sp, #104]	; 0x68
 800f43a:	4654      	mov	r4, sl
 800f43c:	2205      	movs	r2, #5
 800f43e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f442:	4858      	ldr	r0, [pc, #352]	; (800f5a4 <_vfiprintf_r+0x24c>)
 800f444:	f7f0 ff54 	bl	80002f0 <memchr>
 800f448:	9a04      	ldr	r2, [sp, #16]
 800f44a:	b9d8      	cbnz	r0, 800f484 <_vfiprintf_r+0x12c>
 800f44c:	06d1      	lsls	r1, r2, #27
 800f44e:	bf44      	itt	mi
 800f450:	2320      	movmi	r3, #32
 800f452:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f456:	0713      	lsls	r3, r2, #28
 800f458:	bf44      	itt	mi
 800f45a:	232b      	movmi	r3, #43	; 0x2b
 800f45c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f460:	f89a 3000 	ldrb.w	r3, [sl]
 800f464:	2b2a      	cmp	r3, #42	; 0x2a
 800f466:	d015      	beq.n	800f494 <_vfiprintf_r+0x13c>
 800f468:	9a07      	ldr	r2, [sp, #28]
 800f46a:	4654      	mov	r4, sl
 800f46c:	2000      	movs	r0, #0
 800f46e:	f04f 0c0a 	mov.w	ip, #10
 800f472:	4621      	mov	r1, r4
 800f474:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f478:	3b30      	subs	r3, #48	; 0x30
 800f47a:	2b09      	cmp	r3, #9
 800f47c:	d94e      	bls.n	800f51c <_vfiprintf_r+0x1c4>
 800f47e:	b1b0      	cbz	r0, 800f4ae <_vfiprintf_r+0x156>
 800f480:	9207      	str	r2, [sp, #28]
 800f482:	e014      	b.n	800f4ae <_vfiprintf_r+0x156>
 800f484:	eba0 0308 	sub.w	r3, r0, r8
 800f488:	fa09 f303 	lsl.w	r3, r9, r3
 800f48c:	4313      	orrs	r3, r2
 800f48e:	9304      	str	r3, [sp, #16]
 800f490:	46a2      	mov	sl, r4
 800f492:	e7d2      	b.n	800f43a <_vfiprintf_r+0xe2>
 800f494:	9b03      	ldr	r3, [sp, #12]
 800f496:	1d19      	adds	r1, r3, #4
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	9103      	str	r1, [sp, #12]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	bfbb      	ittet	lt
 800f4a0:	425b      	neglt	r3, r3
 800f4a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f4a6:	9307      	strge	r3, [sp, #28]
 800f4a8:	9307      	strlt	r3, [sp, #28]
 800f4aa:	bfb8      	it	lt
 800f4ac:	9204      	strlt	r2, [sp, #16]
 800f4ae:	7823      	ldrb	r3, [r4, #0]
 800f4b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f4b2:	d10c      	bne.n	800f4ce <_vfiprintf_r+0x176>
 800f4b4:	7863      	ldrb	r3, [r4, #1]
 800f4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f4b8:	d135      	bne.n	800f526 <_vfiprintf_r+0x1ce>
 800f4ba:	9b03      	ldr	r3, [sp, #12]
 800f4bc:	1d1a      	adds	r2, r3, #4
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	9203      	str	r2, [sp, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	bfb8      	it	lt
 800f4c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f4ca:	3402      	adds	r4, #2
 800f4cc:	9305      	str	r3, [sp, #20]
 800f4ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f5b4 <_vfiprintf_r+0x25c>
 800f4d2:	7821      	ldrb	r1, [r4, #0]
 800f4d4:	2203      	movs	r2, #3
 800f4d6:	4650      	mov	r0, sl
 800f4d8:	f7f0 ff0a 	bl	80002f0 <memchr>
 800f4dc:	b140      	cbz	r0, 800f4f0 <_vfiprintf_r+0x198>
 800f4de:	2340      	movs	r3, #64	; 0x40
 800f4e0:	eba0 000a 	sub.w	r0, r0, sl
 800f4e4:	fa03 f000 	lsl.w	r0, r3, r0
 800f4e8:	9b04      	ldr	r3, [sp, #16]
 800f4ea:	4303      	orrs	r3, r0
 800f4ec:	3401      	adds	r4, #1
 800f4ee:	9304      	str	r3, [sp, #16]
 800f4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4f4:	482c      	ldr	r0, [pc, #176]	; (800f5a8 <_vfiprintf_r+0x250>)
 800f4f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4fa:	2206      	movs	r2, #6
 800f4fc:	f7f0 fef8 	bl	80002f0 <memchr>
 800f500:	2800      	cmp	r0, #0
 800f502:	d03f      	beq.n	800f584 <_vfiprintf_r+0x22c>
 800f504:	4b29      	ldr	r3, [pc, #164]	; (800f5ac <_vfiprintf_r+0x254>)
 800f506:	bb1b      	cbnz	r3, 800f550 <_vfiprintf_r+0x1f8>
 800f508:	9b03      	ldr	r3, [sp, #12]
 800f50a:	3307      	adds	r3, #7
 800f50c:	f023 0307 	bic.w	r3, r3, #7
 800f510:	3308      	adds	r3, #8
 800f512:	9303      	str	r3, [sp, #12]
 800f514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f516:	443b      	add	r3, r7
 800f518:	9309      	str	r3, [sp, #36]	; 0x24
 800f51a:	e767      	b.n	800f3ec <_vfiprintf_r+0x94>
 800f51c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f520:	460c      	mov	r4, r1
 800f522:	2001      	movs	r0, #1
 800f524:	e7a5      	b.n	800f472 <_vfiprintf_r+0x11a>
 800f526:	2300      	movs	r3, #0
 800f528:	3401      	adds	r4, #1
 800f52a:	9305      	str	r3, [sp, #20]
 800f52c:	4619      	mov	r1, r3
 800f52e:	f04f 0c0a 	mov.w	ip, #10
 800f532:	4620      	mov	r0, r4
 800f534:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f538:	3a30      	subs	r2, #48	; 0x30
 800f53a:	2a09      	cmp	r2, #9
 800f53c:	d903      	bls.n	800f546 <_vfiprintf_r+0x1ee>
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d0c5      	beq.n	800f4ce <_vfiprintf_r+0x176>
 800f542:	9105      	str	r1, [sp, #20]
 800f544:	e7c3      	b.n	800f4ce <_vfiprintf_r+0x176>
 800f546:	fb0c 2101 	mla	r1, ip, r1, r2
 800f54a:	4604      	mov	r4, r0
 800f54c:	2301      	movs	r3, #1
 800f54e:	e7f0      	b.n	800f532 <_vfiprintf_r+0x1da>
 800f550:	ab03      	add	r3, sp, #12
 800f552:	9300      	str	r3, [sp, #0]
 800f554:	462a      	mov	r2, r5
 800f556:	4b16      	ldr	r3, [pc, #88]	; (800f5b0 <_vfiprintf_r+0x258>)
 800f558:	a904      	add	r1, sp, #16
 800f55a:	4630      	mov	r0, r6
 800f55c:	f3af 8000 	nop.w
 800f560:	4607      	mov	r7, r0
 800f562:	1c78      	adds	r0, r7, #1
 800f564:	d1d6      	bne.n	800f514 <_vfiprintf_r+0x1bc>
 800f566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f568:	07d9      	lsls	r1, r3, #31
 800f56a:	d405      	bmi.n	800f578 <_vfiprintf_r+0x220>
 800f56c:	89ab      	ldrh	r3, [r5, #12]
 800f56e:	059a      	lsls	r2, r3, #22
 800f570:	d402      	bmi.n	800f578 <_vfiprintf_r+0x220>
 800f572:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f574:	f7ff f8a8 	bl	800e6c8 <__retarget_lock_release_recursive>
 800f578:	89ab      	ldrh	r3, [r5, #12]
 800f57a:	065b      	lsls	r3, r3, #25
 800f57c:	f53f af12 	bmi.w	800f3a4 <_vfiprintf_r+0x4c>
 800f580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f582:	e711      	b.n	800f3a8 <_vfiprintf_r+0x50>
 800f584:	ab03      	add	r3, sp, #12
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	462a      	mov	r2, r5
 800f58a:	4b09      	ldr	r3, [pc, #36]	; (800f5b0 <_vfiprintf_r+0x258>)
 800f58c:	a904      	add	r1, sp, #16
 800f58e:	4630      	mov	r0, r6
 800f590:	f000 f880 	bl	800f694 <_printf_i>
 800f594:	e7e4      	b.n	800f560 <_vfiprintf_r+0x208>
 800f596:	bf00      	nop
 800f598:	0800fc84 	.word	0x0800fc84
 800f59c:	0800fca4 	.word	0x0800fca4
 800f5a0:	0800fc64 	.word	0x0800fc64
 800f5a4:	0800fcc8 	.word	0x0800fcc8
 800f5a8:	0800fcd2 	.word	0x0800fcd2
 800f5ac:	00000000 	.word	0x00000000
 800f5b0:	0800f333 	.word	0x0800f333
 800f5b4:	0800fcce 	.word	0x0800fcce

0800f5b8 <_printf_common>:
 800f5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5bc:	4616      	mov	r6, r2
 800f5be:	4699      	mov	r9, r3
 800f5c0:	688a      	ldr	r2, [r1, #8]
 800f5c2:	690b      	ldr	r3, [r1, #16]
 800f5c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	bfb8      	it	lt
 800f5cc:	4613      	movlt	r3, r2
 800f5ce:	6033      	str	r3, [r6, #0]
 800f5d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f5d4:	4607      	mov	r7, r0
 800f5d6:	460c      	mov	r4, r1
 800f5d8:	b10a      	cbz	r2, 800f5de <_printf_common+0x26>
 800f5da:	3301      	adds	r3, #1
 800f5dc:	6033      	str	r3, [r6, #0]
 800f5de:	6823      	ldr	r3, [r4, #0]
 800f5e0:	0699      	lsls	r1, r3, #26
 800f5e2:	bf42      	ittt	mi
 800f5e4:	6833      	ldrmi	r3, [r6, #0]
 800f5e6:	3302      	addmi	r3, #2
 800f5e8:	6033      	strmi	r3, [r6, #0]
 800f5ea:	6825      	ldr	r5, [r4, #0]
 800f5ec:	f015 0506 	ands.w	r5, r5, #6
 800f5f0:	d106      	bne.n	800f600 <_printf_common+0x48>
 800f5f2:	f104 0a19 	add.w	sl, r4, #25
 800f5f6:	68e3      	ldr	r3, [r4, #12]
 800f5f8:	6832      	ldr	r2, [r6, #0]
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	42ab      	cmp	r3, r5
 800f5fe:	dc26      	bgt.n	800f64e <_printf_common+0x96>
 800f600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f604:	1e13      	subs	r3, r2, #0
 800f606:	6822      	ldr	r2, [r4, #0]
 800f608:	bf18      	it	ne
 800f60a:	2301      	movne	r3, #1
 800f60c:	0692      	lsls	r2, r2, #26
 800f60e:	d42b      	bmi.n	800f668 <_printf_common+0xb0>
 800f610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f614:	4649      	mov	r1, r9
 800f616:	4638      	mov	r0, r7
 800f618:	47c0      	blx	r8
 800f61a:	3001      	adds	r0, #1
 800f61c:	d01e      	beq.n	800f65c <_printf_common+0xa4>
 800f61e:	6823      	ldr	r3, [r4, #0]
 800f620:	68e5      	ldr	r5, [r4, #12]
 800f622:	6832      	ldr	r2, [r6, #0]
 800f624:	f003 0306 	and.w	r3, r3, #6
 800f628:	2b04      	cmp	r3, #4
 800f62a:	bf08      	it	eq
 800f62c:	1aad      	subeq	r5, r5, r2
 800f62e:	68a3      	ldr	r3, [r4, #8]
 800f630:	6922      	ldr	r2, [r4, #16]
 800f632:	bf0c      	ite	eq
 800f634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f638:	2500      	movne	r5, #0
 800f63a:	4293      	cmp	r3, r2
 800f63c:	bfc4      	itt	gt
 800f63e:	1a9b      	subgt	r3, r3, r2
 800f640:	18ed      	addgt	r5, r5, r3
 800f642:	2600      	movs	r6, #0
 800f644:	341a      	adds	r4, #26
 800f646:	42b5      	cmp	r5, r6
 800f648:	d11a      	bne.n	800f680 <_printf_common+0xc8>
 800f64a:	2000      	movs	r0, #0
 800f64c:	e008      	b.n	800f660 <_printf_common+0xa8>
 800f64e:	2301      	movs	r3, #1
 800f650:	4652      	mov	r2, sl
 800f652:	4649      	mov	r1, r9
 800f654:	4638      	mov	r0, r7
 800f656:	47c0      	blx	r8
 800f658:	3001      	adds	r0, #1
 800f65a:	d103      	bne.n	800f664 <_printf_common+0xac>
 800f65c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f664:	3501      	adds	r5, #1
 800f666:	e7c6      	b.n	800f5f6 <_printf_common+0x3e>
 800f668:	18e1      	adds	r1, r4, r3
 800f66a:	1c5a      	adds	r2, r3, #1
 800f66c:	2030      	movs	r0, #48	; 0x30
 800f66e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f672:	4422      	add	r2, r4
 800f674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f67c:	3302      	adds	r3, #2
 800f67e:	e7c7      	b.n	800f610 <_printf_common+0x58>
 800f680:	2301      	movs	r3, #1
 800f682:	4622      	mov	r2, r4
 800f684:	4649      	mov	r1, r9
 800f686:	4638      	mov	r0, r7
 800f688:	47c0      	blx	r8
 800f68a:	3001      	adds	r0, #1
 800f68c:	d0e6      	beq.n	800f65c <_printf_common+0xa4>
 800f68e:	3601      	adds	r6, #1
 800f690:	e7d9      	b.n	800f646 <_printf_common+0x8e>
	...

0800f694 <_printf_i>:
 800f694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f698:	7e0f      	ldrb	r7, [r1, #24]
 800f69a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f69c:	2f78      	cmp	r7, #120	; 0x78
 800f69e:	4691      	mov	r9, r2
 800f6a0:	4680      	mov	r8, r0
 800f6a2:	460c      	mov	r4, r1
 800f6a4:	469a      	mov	sl, r3
 800f6a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f6aa:	d807      	bhi.n	800f6bc <_printf_i+0x28>
 800f6ac:	2f62      	cmp	r7, #98	; 0x62
 800f6ae:	d80a      	bhi.n	800f6c6 <_printf_i+0x32>
 800f6b0:	2f00      	cmp	r7, #0
 800f6b2:	f000 80d8 	beq.w	800f866 <_printf_i+0x1d2>
 800f6b6:	2f58      	cmp	r7, #88	; 0x58
 800f6b8:	f000 80a3 	beq.w	800f802 <_printf_i+0x16e>
 800f6bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f6c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f6c4:	e03a      	b.n	800f73c <_printf_i+0xa8>
 800f6c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f6ca:	2b15      	cmp	r3, #21
 800f6cc:	d8f6      	bhi.n	800f6bc <_printf_i+0x28>
 800f6ce:	a101      	add	r1, pc, #4	; (adr r1, 800f6d4 <_printf_i+0x40>)
 800f6d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6d4:	0800f72d 	.word	0x0800f72d
 800f6d8:	0800f741 	.word	0x0800f741
 800f6dc:	0800f6bd 	.word	0x0800f6bd
 800f6e0:	0800f6bd 	.word	0x0800f6bd
 800f6e4:	0800f6bd 	.word	0x0800f6bd
 800f6e8:	0800f6bd 	.word	0x0800f6bd
 800f6ec:	0800f741 	.word	0x0800f741
 800f6f0:	0800f6bd 	.word	0x0800f6bd
 800f6f4:	0800f6bd 	.word	0x0800f6bd
 800f6f8:	0800f6bd 	.word	0x0800f6bd
 800f6fc:	0800f6bd 	.word	0x0800f6bd
 800f700:	0800f84d 	.word	0x0800f84d
 800f704:	0800f771 	.word	0x0800f771
 800f708:	0800f82f 	.word	0x0800f82f
 800f70c:	0800f6bd 	.word	0x0800f6bd
 800f710:	0800f6bd 	.word	0x0800f6bd
 800f714:	0800f86f 	.word	0x0800f86f
 800f718:	0800f6bd 	.word	0x0800f6bd
 800f71c:	0800f771 	.word	0x0800f771
 800f720:	0800f6bd 	.word	0x0800f6bd
 800f724:	0800f6bd 	.word	0x0800f6bd
 800f728:	0800f837 	.word	0x0800f837
 800f72c:	682b      	ldr	r3, [r5, #0]
 800f72e:	1d1a      	adds	r2, r3, #4
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	602a      	str	r2, [r5, #0]
 800f734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f73c:	2301      	movs	r3, #1
 800f73e:	e0a3      	b.n	800f888 <_printf_i+0x1f4>
 800f740:	6820      	ldr	r0, [r4, #0]
 800f742:	6829      	ldr	r1, [r5, #0]
 800f744:	0606      	lsls	r6, r0, #24
 800f746:	f101 0304 	add.w	r3, r1, #4
 800f74a:	d50a      	bpl.n	800f762 <_printf_i+0xce>
 800f74c:	680e      	ldr	r6, [r1, #0]
 800f74e:	602b      	str	r3, [r5, #0]
 800f750:	2e00      	cmp	r6, #0
 800f752:	da03      	bge.n	800f75c <_printf_i+0xc8>
 800f754:	232d      	movs	r3, #45	; 0x2d
 800f756:	4276      	negs	r6, r6
 800f758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f75c:	485e      	ldr	r0, [pc, #376]	; (800f8d8 <_printf_i+0x244>)
 800f75e:	230a      	movs	r3, #10
 800f760:	e019      	b.n	800f796 <_printf_i+0x102>
 800f762:	680e      	ldr	r6, [r1, #0]
 800f764:	602b      	str	r3, [r5, #0]
 800f766:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f76a:	bf18      	it	ne
 800f76c:	b236      	sxthne	r6, r6
 800f76e:	e7ef      	b.n	800f750 <_printf_i+0xbc>
 800f770:	682b      	ldr	r3, [r5, #0]
 800f772:	6820      	ldr	r0, [r4, #0]
 800f774:	1d19      	adds	r1, r3, #4
 800f776:	6029      	str	r1, [r5, #0]
 800f778:	0601      	lsls	r1, r0, #24
 800f77a:	d501      	bpl.n	800f780 <_printf_i+0xec>
 800f77c:	681e      	ldr	r6, [r3, #0]
 800f77e:	e002      	b.n	800f786 <_printf_i+0xf2>
 800f780:	0646      	lsls	r6, r0, #25
 800f782:	d5fb      	bpl.n	800f77c <_printf_i+0xe8>
 800f784:	881e      	ldrh	r6, [r3, #0]
 800f786:	4854      	ldr	r0, [pc, #336]	; (800f8d8 <_printf_i+0x244>)
 800f788:	2f6f      	cmp	r7, #111	; 0x6f
 800f78a:	bf0c      	ite	eq
 800f78c:	2308      	moveq	r3, #8
 800f78e:	230a      	movne	r3, #10
 800f790:	2100      	movs	r1, #0
 800f792:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f796:	6865      	ldr	r5, [r4, #4]
 800f798:	60a5      	str	r5, [r4, #8]
 800f79a:	2d00      	cmp	r5, #0
 800f79c:	bfa2      	ittt	ge
 800f79e:	6821      	ldrge	r1, [r4, #0]
 800f7a0:	f021 0104 	bicge.w	r1, r1, #4
 800f7a4:	6021      	strge	r1, [r4, #0]
 800f7a6:	b90e      	cbnz	r6, 800f7ac <_printf_i+0x118>
 800f7a8:	2d00      	cmp	r5, #0
 800f7aa:	d04d      	beq.n	800f848 <_printf_i+0x1b4>
 800f7ac:	4615      	mov	r5, r2
 800f7ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800f7b2:	fb03 6711 	mls	r7, r3, r1, r6
 800f7b6:	5dc7      	ldrb	r7, [r0, r7]
 800f7b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f7bc:	4637      	mov	r7, r6
 800f7be:	42bb      	cmp	r3, r7
 800f7c0:	460e      	mov	r6, r1
 800f7c2:	d9f4      	bls.n	800f7ae <_printf_i+0x11a>
 800f7c4:	2b08      	cmp	r3, #8
 800f7c6:	d10b      	bne.n	800f7e0 <_printf_i+0x14c>
 800f7c8:	6823      	ldr	r3, [r4, #0]
 800f7ca:	07de      	lsls	r6, r3, #31
 800f7cc:	d508      	bpl.n	800f7e0 <_printf_i+0x14c>
 800f7ce:	6923      	ldr	r3, [r4, #16]
 800f7d0:	6861      	ldr	r1, [r4, #4]
 800f7d2:	4299      	cmp	r1, r3
 800f7d4:	bfde      	ittt	le
 800f7d6:	2330      	movle	r3, #48	; 0x30
 800f7d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f7dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f7e0:	1b52      	subs	r2, r2, r5
 800f7e2:	6122      	str	r2, [r4, #16]
 800f7e4:	f8cd a000 	str.w	sl, [sp]
 800f7e8:	464b      	mov	r3, r9
 800f7ea:	aa03      	add	r2, sp, #12
 800f7ec:	4621      	mov	r1, r4
 800f7ee:	4640      	mov	r0, r8
 800f7f0:	f7ff fee2 	bl	800f5b8 <_printf_common>
 800f7f4:	3001      	adds	r0, #1
 800f7f6:	d14c      	bne.n	800f892 <_printf_i+0x1fe>
 800f7f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7fc:	b004      	add	sp, #16
 800f7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f802:	4835      	ldr	r0, [pc, #212]	; (800f8d8 <_printf_i+0x244>)
 800f804:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f808:	6829      	ldr	r1, [r5, #0]
 800f80a:	6823      	ldr	r3, [r4, #0]
 800f80c:	f851 6b04 	ldr.w	r6, [r1], #4
 800f810:	6029      	str	r1, [r5, #0]
 800f812:	061d      	lsls	r5, r3, #24
 800f814:	d514      	bpl.n	800f840 <_printf_i+0x1ac>
 800f816:	07df      	lsls	r7, r3, #31
 800f818:	bf44      	itt	mi
 800f81a:	f043 0320 	orrmi.w	r3, r3, #32
 800f81e:	6023      	strmi	r3, [r4, #0]
 800f820:	b91e      	cbnz	r6, 800f82a <_printf_i+0x196>
 800f822:	6823      	ldr	r3, [r4, #0]
 800f824:	f023 0320 	bic.w	r3, r3, #32
 800f828:	6023      	str	r3, [r4, #0]
 800f82a:	2310      	movs	r3, #16
 800f82c:	e7b0      	b.n	800f790 <_printf_i+0xfc>
 800f82e:	6823      	ldr	r3, [r4, #0]
 800f830:	f043 0320 	orr.w	r3, r3, #32
 800f834:	6023      	str	r3, [r4, #0]
 800f836:	2378      	movs	r3, #120	; 0x78
 800f838:	4828      	ldr	r0, [pc, #160]	; (800f8dc <_printf_i+0x248>)
 800f83a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f83e:	e7e3      	b.n	800f808 <_printf_i+0x174>
 800f840:	0659      	lsls	r1, r3, #25
 800f842:	bf48      	it	mi
 800f844:	b2b6      	uxthmi	r6, r6
 800f846:	e7e6      	b.n	800f816 <_printf_i+0x182>
 800f848:	4615      	mov	r5, r2
 800f84a:	e7bb      	b.n	800f7c4 <_printf_i+0x130>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	6826      	ldr	r6, [r4, #0]
 800f850:	6961      	ldr	r1, [r4, #20]
 800f852:	1d18      	adds	r0, r3, #4
 800f854:	6028      	str	r0, [r5, #0]
 800f856:	0635      	lsls	r5, r6, #24
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	d501      	bpl.n	800f860 <_printf_i+0x1cc>
 800f85c:	6019      	str	r1, [r3, #0]
 800f85e:	e002      	b.n	800f866 <_printf_i+0x1d2>
 800f860:	0670      	lsls	r0, r6, #25
 800f862:	d5fb      	bpl.n	800f85c <_printf_i+0x1c8>
 800f864:	8019      	strh	r1, [r3, #0]
 800f866:	2300      	movs	r3, #0
 800f868:	6123      	str	r3, [r4, #16]
 800f86a:	4615      	mov	r5, r2
 800f86c:	e7ba      	b.n	800f7e4 <_printf_i+0x150>
 800f86e:	682b      	ldr	r3, [r5, #0]
 800f870:	1d1a      	adds	r2, r3, #4
 800f872:	602a      	str	r2, [r5, #0]
 800f874:	681d      	ldr	r5, [r3, #0]
 800f876:	6862      	ldr	r2, [r4, #4]
 800f878:	2100      	movs	r1, #0
 800f87a:	4628      	mov	r0, r5
 800f87c:	f7f0 fd38 	bl	80002f0 <memchr>
 800f880:	b108      	cbz	r0, 800f886 <_printf_i+0x1f2>
 800f882:	1b40      	subs	r0, r0, r5
 800f884:	6060      	str	r0, [r4, #4]
 800f886:	6863      	ldr	r3, [r4, #4]
 800f888:	6123      	str	r3, [r4, #16]
 800f88a:	2300      	movs	r3, #0
 800f88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f890:	e7a8      	b.n	800f7e4 <_printf_i+0x150>
 800f892:	6923      	ldr	r3, [r4, #16]
 800f894:	462a      	mov	r2, r5
 800f896:	4649      	mov	r1, r9
 800f898:	4640      	mov	r0, r8
 800f89a:	47d0      	blx	sl
 800f89c:	3001      	adds	r0, #1
 800f89e:	d0ab      	beq.n	800f7f8 <_printf_i+0x164>
 800f8a0:	6823      	ldr	r3, [r4, #0]
 800f8a2:	079b      	lsls	r3, r3, #30
 800f8a4:	d413      	bmi.n	800f8ce <_printf_i+0x23a>
 800f8a6:	68e0      	ldr	r0, [r4, #12]
 800f8a8:	9b03      	ldr	r3, [sp, #12]
 800f8aa:	4298      	cmp	r0, r3
 800f8ac:	bfb8      	it	lt
 800f8ae:	4618      	movlt	r0, r3
 800f8b0:	e7a4      	b.n	800f7fc <_printf_i+0x168>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	4632      	mov	r2, r6
 800f8b6:	4649      	mov	r1, r9
 800f8b8:	4640      	mov	r0, r8
 800f8ba:	47d0      	blx	sl
 800f8bc:	3001      	adds	r0, #1
 800f8be:	d09b      	beq.n	800f7f8 <_printf_i+0x164>
 800f8c0:	3501      	adds	r5, #1
 800f8c2:	68e3      	ldr	r3, [r4, #12]
 800f8c4:	9903      	ldr	r1, [sp, #12]
 800f8c6:	1a5b      	subs	r3, r3, r1
 800f8c8:	42ab      	cmp	r3, r5
 800f8ca:	dcf2      	bgt.n	800f8b2 <_printf_i+0x21e>
 800f8cc:	e7eb      	b.n	800f8a6 <_printf_i+0x212>
 800f8ce:	2500      	movs	r5, #0
 800f8d0:	f104 0619 	add.w	r6, r4, #25
 800f8d4:	e7f5      	b.n	800f8c2 <_printf_i+0x22e>
 800f8d6:	bf00      	nop
 800f8d8:	0800fcd9 	.word	0x0800fcd9
 800f8dc:	0800fcea 	.word	0x0800fcea

0800f8e0 <_read_r>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	4d07      	ldr	r5, [pc, #28]	; (800f900 <_read_r+0x20>)
 800f8e4:	4604      	mov	r4, r0
 800f8e6:	4608      	mov	r0, r1
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	602a      	str	r2, [r5, #0]
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	f7f1 fc80 	bl	80011f4 <_read>
 800f8f4:	1c43      	adds	r3, r0, #1
 800f8f6:	d102      	bne.n	800f8fe <_read_r+0x1e>
 800f8f8:	682b      	ldr	r3, [r5, #0]
 800f8fa:	b103      	cbz	r3, 800f8fe <_read_r+0x1e>
 800f8fc:	6023      	str	r3, [r4, #0]
 800f8fe:	bd38      	pop	{r3, r4, r5, pc}
 800f900:	24008b18 	.word	0x24008b18

0800f904 <_fstat_r>:
 800f904:	b538      	push	{r3, r4, r5, lr}
 800f906:	4d07      	ldr	r5, [pc, #28]	; (800f924 <_fstat_r+0x20>)
 800f908:	2300      	movs	r3, #0
 800f90a:	4604      	mov	r4, r0
 800f90c:	4608      	mov	r0, r1
 800f90e:	4611      	mov	r1, r2
 800f910:	602b      	str	r3, [r5, #0]
 800f912:	f7f1 fc98 	bl	8001246 <_fstat>
 800f916:	1c43      	adds	r3, r0, #1
 800f918:	d102      	bne.n	800f920 <_fstat_r+0x1c>
 800f91a:	682b      	ldr	r3, [r5, #0]
 800f91c:	b103      	cbz	r3, 800f920 <_fstat_r+0x1c>
 800f91e:	6023      	str	r3, [r4, #0]
 800f920:	bd38      	pop	{r3, r4, r5, pc}
 800f922:	bf00      	nop
 800f924:	24008b18 	.word	0x24008b18

0800f928 <_isatty_r>:
 800f928:	b538      	push	{r3, r4, r5, lr}
 800f92a:	4d06      	ldr	r5, [pc, #24]	; (800f944 <_isatty_r+0x1c>)
 800f92c:	2300      	movs	r3, #0
 800f92e:	4604      	mov	r4, r0
 800f930:	4608      	mov	r0, r1
 800f932:	602b      	str	r3, [r5, #0]
 800f934:	f7f1 fc97 	bl	8001266 <_isatty>
 800f938:	1c43      	adds	r3, r0, #1
 800f93a:	d102      	bne.n	800f942 <_isatty_r+0x1a>
 800f93c:	682b      	ldr	r3, [r5, #0]
 800f93e:	b103      	cbz	r3, 800f942 <_isatty_r+0x1a>
 800f940:	6023      	str	r3, [r4, #0]
 800f942:	bd38      	pop	{r3, r4, r5, pc}
 800f944:	24008b18 	.word	0x24008b18

0800f948 <_realloc_r>:
 800f948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f94c:	4680      	mov	r8, r0
 800f94e:	4614      	mov	r4, r2
 800f950:	460e      	mov	r6, r1
 800f952:	b921      	cbnz	r1, 800f95e <_realloc_r+0x16>
 800f954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f958:	4611      	mov	r1, r2
 800f95a:	f7fe bf17 	b.w	800e78c <_malloc_r>
 800f95e:	b92a      	cbnz	r2, 800f96c <_realloc_r+0x24>
 800f960:	f7ff fb28 	bl	800efb4 <_free_r>
 800f964:	4625      	mov	r5, r4
 800f966:	4628      	mov	r0, r5
 800f968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f96c:	f000 f81b 	bl	800f9a6 <_malloc_usable_size_r>
 800f970:	4284      	cmp	r4, r0
 800f972:	4607      	mov	r7, r0
 800f974:	d802      	bhi.n	800f97c <_realloc_r+0x34>
 800f976:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f97a:	d812      	bhi.n	800f9a2 <_realloc_r+0x5a>
 800f97c:	4621      	mov	r1, r4
 800f97e:	4640      	mov	r0, r8
 800f980:	f7fe ff04 	bl	800e78c <_malloc_r>
 800f984:	4605      	mov	r5, r0
 800f986:	2800      	cmp	r0, #0
 800f988:	d0ed      	beq.n	800f966 <_realloc_r+0x1e>
 800f98a:	42bc      	cmp	r4, r7
 800f98c:	4622      	mov	r2, r4
 800f98e:	4631      	mov	r1, r6
 800f990:	bf28      	it	cs
 800f992:	463a      	movcs	r2, r7
 800f994:	f7fe fea9 	bl	800e6ea <memcpy>
 800f998:	4631      	mov	r1, r6
 800f99a:	4640      	mov	r0, r8
 800f99c:	f7ff fb0a 	bl	800efb4 <_free_r>
 800f9a0:	e7e1      	b.n	800f966 <_realloc_r+0x1e>
 800f9a2:	4635      	mov	r5, r6
 800f9a4:	e7df      	b.n	800f966 <_realloc_r+0x1e>

0800f9a6 <_malloc_usable_size_r>:
 800f9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9aa:	1f18      	subs	r0, r3, #4
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	bfbc      	itt	lt
 800f9b0:	580b      	ldrlt	r3, [r1, r0]
 800f9b2:	18c0      	addlt	r0, r0, r3
 800f9b4:	4770      	bx	lr
	...

0800f9b8 <_init>:
 800f9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ba:	bf00      	nop
 800f9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9be:	bc08      	pop	{r3}
 800f9c0:	469e      	mov	lr, r3
 800f9c2:	4770      	bx	lr

0800f9c4 <_fini>:
 800f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c6:	bf00      	nop
 800f9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ca:	bc08      	pop	{r3}
 800f9cc:	469e      	mov	lr, r3
 800f9ce:	4770      	bx	lr
