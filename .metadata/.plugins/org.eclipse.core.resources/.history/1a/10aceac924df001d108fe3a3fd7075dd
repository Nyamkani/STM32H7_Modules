/*
 * tcprtosserver.cpp
 *
 *  Created on: Sep 6, 2022
 *      Author: kss
 */
#include <ethernet/tcp_rtos/server/tcp_rtos_server.h>
#include <string>
#include <main.h>
static struct netconn *conn, *newconn;
//static struct netbuf *buf;
//static char msg[1024];  //receiving msg buffer
//static char smsg[1100];	//to send temp buffer

//static ip_addr_t *addr;
//static unsigned short port;

/*Rtos thread handle*/
osThreadId TcpServerHandle;

/*netif*/
extern struct netif gnetif;

#define ServerPort (int) 10


std::string eth_data_;
extern osMessageQId myQueue01Handle;
extern osMessageQId TCPSendQueueHandle;

_Message* tcp_recv_msg_ = NULL;

//memory pool
extern osPoolId Pool_ID ;


/*------------------------------------Server-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
static void StartTCPServerTask(void const *arg)
{
	err_t err, accept_err;
	struct netbuf *buf;
	void* temp_data;
	uint16_t remain_leng;


	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);

	if (conn!=NULL)
	{
		/* Bind connection to the server port. */
		err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);

		if (err == ERR_OK)
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);

				/* Process the new connection. */
				if (accept_err == ERR_OK)
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
					{
						/* Extrct the address and port in case they are required */
						//addr = netbuf_fromaddr(buf);  // get the address of the client
						//port = netbuf_fromport(buf);  // get the Port of the client

						//netbuf_data(buf, &temp_data, &leng);

						//dinamic allocate memmory
						tcp_recv_msg_ = (_Message *)osPoolAlloc(Pool_ID);


						//insert the data to msg
						tcp_recv_msg_->id_ = 0x10;

						//tcp_recv_msg_->data_ = new char[buf->p->len];
						//tcp_recv_msg_->data_ =  (char*)buf->p->payload;


						strncpy(tcp_recv_msg_->data_, (char* )buf->p->payload, buf->p->len);

						//tcp_recv_msg_->data_ = (char*)temp_data;
						tcp_recv_msg_->leng_ = buf->p->len;


						//send msg
						osMessagePut(myQueue01Handle, (uint32_t)tcp_recv_msg_, osWaitForever); //enqueue


//						//delete msg
//						delete tcp_recv_msg_->data_;
//
//						tcp_recv_msg_->data_ = NULL;
//
						//free msg
						osPoolFree(Pool_ID, tcp_recv_msg_);

						//netconn_write(newconn, temp_data, leng, NETCONN_COPY);

						//TcpServerRecvBuffer((const char*)temp_data);

						/* If there is some data remaining to be sent, the following process will continue */
//						do
//						{
//							//strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
//
//
//
//
//							netconn_write(newconn, buf->p->payload, buf->p->len, NETCONN_COPY);
//
//
//
//
//							//for test debug
//							//strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
//
//							//TcpServerRecvBuffer(msg);
//							//enter Queue and parsing
//							/*
//							TcpServerParsingSeq();
//
//							*/
//							// Or modify the message received, so that we can send it back to the client
//							//response
//							//int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
//
//							//taskENTER_CRITICAL();
//
//							//netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
//
//							//taskEXIT_CRITICAL();
//
//							//memset (msg, '\0', sizeof(msg));  // clear the buffer
//							//memset (smsg, '\0', sizeof(smsg));  // clear the buffer
//						}
						while (netbuf_next(buf) >0);

						netbuf_delete(buf);

					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
					netconn_delete(newconn);
				}
			}
		}
		else
		{
			netconn_delete(conn);
		}
	}
	//vTaskDelete(NULL);
}

void TcpServerDelete()
{
	  if((netif_is_link_up(&gnetif))) return;

	  if(newconn == NULL && conn == NULL) return;

	  if(netconn_close(newconn) != ERR_OK) return;

	  if(netconn_delete(newconn) != ERR_OK) return;

	  if(netconn_delete(conn) != ERR_OK) return;

	  vTaskDelete(TcpServerHandle);

	  return;
}

void TcpServerRecvBuffer(const char *data)
{
	std::string string_buf_(data);

	eth_data_ = string_buf_;

	return;
}



void TcpServerSend(const char *data,)
{
	//if(newconn != NULL)
	//{


		// send the data to the connected connection
		netconn_write(newconn, data, strlen(data), NETCONN_COPY);
		// relaese the semaphore
		//sys_sem_signal(&tcpsem);
	//}
	return;
}


void TcpServerInit(void)
{
	if(newconn == NULL)
	{
		/* definition and creation of TCPServerTask */
		osThreadDef(TCPServerTask, StartTCPServerTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *8);
		TcpServerHandle = osThreadCreate(osThread(TCPServerTask), NULL);
	}
}


