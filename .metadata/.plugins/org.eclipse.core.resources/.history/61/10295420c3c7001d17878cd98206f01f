/*
 * fatfs.c
 *
 *  Created on: Mar 16, 2023
 *      Author: studio3s
 */



#include <fatfs_h7/include/fatfs_h7/fatfs_h7.h>
/* Private variables ---------------------------------------------------------*/
FATFS SDFatFs;  /* File system object for SD card logical drive */
FIL SDFile;
char SDPath[4]; /* SD card logical drive path */


static bool is_init_ = false;
char workBuffer[FF_MAX_SS];

static void BSPInit()
{
	if(!(is_init_)) BSP_SD_Init();

	if(BSP_SD_IsDetected()) is_init_ = true;

	return;
}



void FatFsInit()
{

	if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
	{
		BSPInit();

		if(BSP_SD_IsDetected())
		{
			FRESULT res;

			res = f_mkfs(SDPath, 0, workBuffer, sizeof(workBuffer));

			if(res != FR_OK) return; // Error_Handler();

			printf("Successfully formatted\n");
		}

	}

	return;
}



void FatFsTest(const char *filename)
{
  FRESULT res;
  uint32_t written_bytes=0;
  char buf[50];
  char readbuf[100]\ {0.};

  int total_byte_ = 0;
  const char *p = "FatFs example for STM32F747i-Dicovery!\r\n";

  if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 1) != FR_OK) return;

  res = f_open(&SDFile, (const char*)filename, FA_CREATE_ALWAYS | FA_WRITE);
  //res = f_open(&SDFile, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);

  if(res == FR_OK){
    sprintf(buf, "%s\r\n", p);
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
    printf("%ld bytes written.\r\n", written_bytes);

    total_byte_ += written_bytes;

    sprintf(buf, "Filename : %s\r\n", filename);
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
    printf("%ld bytes written.\r\n", written_bytes);

    total_byte_ += written_bytes;

    sprintf(buf, "Tick : %ld\r\n", HAL_GetTick());
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
    printf("%ld bytes written.\r\n", written_bytes);

    total_byte_ += written_bytes;

    sprintf(buf, "parameter1 : 3\r\n");
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
    printf("%ld bytes written.\r\n", written_bytes);

    total_byte_ += written_bytes;

    sprintf(buf, "parameter2 : 5\r\n");
    f_write(&SDFile, (const void*)buf, strlen(buf), (unsigned int*)&written_bytes);
    printf("%ld bytes written.\r\n", written_bytes);

    total_byte_ += written_bytes;

    printf("%total %ld bytes written.\r\n", total_byte_);

    printf("\r\n---------------Reading Start-----------------\r\n");
    f_read(&SDFile, readbuf, strlen(readbuf), (unsigned int*)&total_byte_);
    printf("%s",buf);
    printf("\r\n---------------Reading End-----------------\r\n");


    f_close(&SDFile);

    printf("SD card Writing is successfully complete!\n");
  }else{
  	printf("[ERROR] f_open failed (%d)\r\n", (int)res);
  }
}

