/*
 * api_cjson.cpp
 *
 *  Created on: Apr 28, 2023
 *      Author: studio3s
 */




#include <api_data_structure/include/api_data_structure/api_data_structure.h>
#include <openAMP_RTOS_M7/include/openAMP_RTOS_M7/openAMP_RTOS_M7.h>

#include <main.h>


static main_data* main_data_;

osPoolId MainDataPool_ID ;


int InitializeDataStructure()
{
	int status = -1;

	//0. Dyanamic allocation memory for rtos
	main_data_ = (main_data *)osPoolAlloc(Pool_ID);






	//5.- 1 Dynamic allocate memory
//								tcp_recv_msg_ = (_Message *)osPoolAlloc(Pool_ID);
//
//								//3.-1 insert the data to msg_ID
//								tcp_recv_msg_->id_ = 0x10;
//
//								//3.-2 insert the data to msg_DATA
//								strncpy(tcp_recv_msg_->data_,
//										recv_buffer.substr(5, buf_leng).c_str(), buf_leng);




	return status;
}



























int ethernet_data_parser(const char * const msg, int msg_leng)
{
	//memory copy
	char send_buf[msg_leng + 1];

	strncpy (send_buf, msg, sizeof(send_buf));

	send_buf[msg_leng] = '\0';

	//declare header buffers
    const cJSON *header = NULL;
    const cJSON *transactionid = NULL;
    const cJSON *msgtype = NULL;
    const cJSON *category = NULL;
    const cJSON *timestamp = NULL;

    printf("%s\r\n",send_buf);


    int status = 0;

    //cJSON *msg_json = cJSON_Parse(send_buf);
    cJSON *msg_json = cJSON_ParseWithLength(send_buf, msg_leng);

    //error check
    if (msg_json == NULL)
    {
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL)
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
        }
        status = -1;
        goto end;
    }

    //Get header object pointer
    header = cJSON_GetObjectItemCaseSensitive(msg_json, "header");

    if (header == NULL)
    {
        status = -1;
        goto end;
    }


    transactionid = cJSON_GetObjectItemCaseSensitive(header, "transactionId");

    if (cJSON_IsString(transactionid) && (transactionid->valuestring != NULL))
    {
        printf("transactionid is: \"%s\"\n", transactionid->valuestring);
    }

    msgtype = cJSON_GetObjectItemCaseSensitive(header, "msgType");

    if (cJSON_IsString(msgtype) && (msgtype->valuestring != NULL))
    {
        printf("msgtype is: \"%s\"\n", msgtype->valuestring);
    }

    category = cJSON_GetObjectItemCaseSensitive(header, "category");

    if (cJSON_IsString(category) && (category->valuestring != NULL))
    {
        printf("category is: \"%s\"\n", category->valuestring);
    }

    timestamp = cJSON_GetObjectItemCaseSensitive(header, "timeStamp");

    if (cJSON_IsString(msgtype) && (timestamp->valuestring != NULL))
    {
        printf("timestamp is: \"%s\"\n", timestamp->valuestring);
    }


    //switch fucntion for each command type

//    if(strcmp(msgtype->valuestring, "request") == 0)
//    {
//       // printf("1\r\n");
//    }
//    else if (strcmp(msgtype->valuestring, "response") == 0)
//    {
//        //printf("2\r\n");
//
//    }
//


end:
    cJSON_Delete(msg_json);
    return status;
}



const char* ethernet_create_message(void)
{

    char *string = NULL;

	//declare header buffers
    cJSON *header = NULL;
    cJSON *transactionId = NULL;
    cJSON *msgType = NULL;
    cJSON *category = NULL;
    cJSON *timeStamp = NULL;

	//declare body buffers
    cJSON *body = NULL;
    cJSON *taskType = NULL;
    cJSON *JobId = NULL;
    cJSON *taskId = NULL;
    cJSON *taskStatus = NULL;
    cJSON *mode = NULL;
    cJSON *status = NULL;
    cJSON *position = NULL;
    cJSON *destination = NULL;
    cJSON *speed = NULL;
    cJSON *forkStroke = NULL;
    cJSON *forkWidth = NULL;
    cJSON *forkOnLoad = NULL;
    cJSON *alarmCode = NULL;
    cJSON *errorCode = NULL;
    cJSON *sensorGroup1 = NULL;
    cJSON *sensorGroup2 = NULL;
    cJSON *odometer = NULL;


    cJSON *sender = cJSON_CreateObject();
    if (sender == NULL)
    {
        goto end;
    }

    /* after creation was successful, immediately add it to the monitor,
     * thereby transferring ownership of the pointer to it */

    //-------------------------------------------------------header contents

    header = cJSON_CreateObject();
    if (header == NULL)
        goto end;

    cJSON_AddItemToObject(sender, "header", header);

    transactionId = cJSON_CreateString("12");
    if (transactionId == NULL)
        goto end;

    cJSON_AddItemToObject(header, "transactionId", transactionId);

    msgType = cJSON_CreateString("response");
    if (msgType == NULL)
        goto end;

    cJSON_AddItemToObject(header, "msgType", msgType);

    category = cJSON_CreateString("status");
    if (category == NULL)
        goto end;

    cJSON_AddItemToObject(header, "category", category);

    timeStamp = cJSON_CreateString("1680063015500");
    if (timeStamp == NULL)
        goto end;

    cJSON_AddItemToObject(header, "timeStamp", timeStamp);

    //-------------------------------------------------------body contents
    body = cJSON_CreateObject();
    if (body == NULL)
        goto end;

    cJSON_AddItemToObject(sender, "body", body);

    taskType = cJSON_CreateString("move");
    if (taskType == NULL)
        goto end;

    cJSON_AddItemToObject(body, "taskType", taskType);

    JobId = cJSON_CreateString("abcd123456789");
    if (JobId == NULL)
        goto end;

    cJSON_AddItemToObject(body, "JobId", JobId);

    taskId = cJSON_CreateString("1");
    if (taskId == NULL)
        goto end;

    cJSON_AddItemToObject(body, "taskId", taskId);

    taskStatus = cJSON_CreateString("2");
    if (taskStatus == NULL)
        goto end;

    cJSON_AddItemToObject(body, "taskStatus", taskStatus);

    mode = cJSON_CreateString("2");
    if (mode == NULL)
        goto end;

    cJSON_AddItemToObject(body, "mode", mode);

    status = cJSON_CreateString("1");
    if (status == NULL)
        goto end;

    cJSON_AddItemToObject(body, "status", status);

    position = cJSON_CreateString("1234");
    if (position == NULL)
        goto end;

    cJSON_AddItemToObject(body, "position", position);

    destination = cJSON_CreateString("12345");
    if (destination == NULL)
        goto end;

    cJSON_AddItemToObject(body, "destination", destination);

    speed = cJSON_CreateString("4200");
    if (speed == NULL)
        goto end;

    cJSON_AddItemToObject(body, "speed", speed);

    forkStroke = cJSON_CreateString("0");
    if (forkStroke == NULL)
        goto end;

    cJSON_AddItemToObject(body, "forkStroke", forkStroke);

    forkWidth = cJSON_CreateString("500");
    if (forkWidth == NULL)
        goto end;

    cJSON_AddItemToObject(body, "forkWidth", forkWidth);

    forkOnLoad = cJSON_CreateString("3");
    if (forkOnLoad == NULL)
        goto end;

    cJSON_AddItemToObject(body, "forkOnLoad", forkOnLoad);

    alarmCode = cJSON_CreateString("0");
    if (alarmCode == NULL)
        goto end;

    cJSON_AddItemToObject(body, "alarmCode", alarmCode);

    errorCode = cJSON_CreateString("0");
    if (errorCode == NULL)
        goto end;

    cJSON_AddItemToObject(body, "errorCode", errorCode);

    sensorGroup1 = cJSON_CreateString("0");
    if (sensorGroup1 == NULL)
        goto end;

    cJSON_AddItemToObject(body, "sensorGroup1", sensorGroup1);

    sensorGroup2 = cJSON_CreateString("0");
    if (sensorGroup2 == NULL)
        goto end;

    cJSON_AddItemToObject(body, "sensorGroup2", sensorGroup2);

    odometer = cJSON_CreateString("4294967296");
    if (odometer == NULL)
        goto end;

    cJSON_AddItemToObject(body, "odometer", odometer);



    string = cJSON_Print(sender);
    if (string == NULL)
    {
        fprintf(stderr, "Failed to print monitor.\n");
    }
    free(string);

end:

    cJSON_Delete(sender);
    return string;
}














/* return 1 if the monitor supports full hd, 0 otherwise */
int supports_full_hd(const char * const msg, int msg_leng)
{
	char send_buf[msg_leng + 1];

	strncpy (send_buf, msg, sizeof(send_buf));

	send_buf[msg_leng] = '\0';

	char* st = NULL;

    const cJSON *value = NULL;
    const cJSON *values = NULL;
    const cJSON *command = NULL;
    const cJSON *mode = NULL;

    int status = 0;

    cJSON *msg_json = cJSON_Parse(send_buf);

    //error check
    if (msg_json == NULL)
    {
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL)
        {
            fprintf(stderr, "Error before: %s\n", error_ptr);
        }
        status = 0;
        goto end;
    }

    //command parse
    command = cJSON_GetObjectItemCaseSensitive(msg_json, "command");

    if (cJSON_IsString(command) && (command->valuestring != NULL))
    {
        printf("command is: \"%s\"\n", command->valuestring);
    }

    //mode parse
    mode = cJSON_GetObjectItemCaseSensitive(msg_json, "mode");

    if (cJSON_IsString(mode) && (mode->valuestring != NULL))
    {
        printf("mode is: \"%s\"\n", mode->valuestring);
    }

    //value parse
    values = cJSON_GetObjectItemCaseSensitive(msg_json, "values");

    //for
    cJSON_ArrayForEach(value, values)
    {
        cJSON *from = cJSON_GetObjectItemCaseSensitive(value, "from");
        cJSON *to = cJSON_GetObjectItemCaseSensitive(value, "to");

        printf("from : %d, to :%d \r\n", from->valueint, to->valueint);

        itoa(from->valueint, st, 10);

//        if (!cJSON_IsNumber(width) || !cJSON_IsNumber(height))
//        {
//            status = 0;
//            goto end;
//        }
//
//        if ((width->valuedouble == 1920) && (height->valuedouble == 1080))
//        {
//            status = 1;
//            goto end;
//        }
    }



end:
    cJSON_Delete(msg_json);
    return status;
}

//create a monitor with a list of supported resolutions
//NOTE: Returns a heap allocated string, you are required to free it after use.
const char* create_monitor(void)
{
    const unsigned int resolution_numbers[3][2] = {
        {1280, 720},
        {1920, 1080},
        {3840, 2160}
    };
    char *string = NULL;
    cJSON *command = NULL;
    cJSON *mode = NULL;
    cJSON *values = NULL;
    cJSON *value = NULL;
    cJSON *from = NULL;
    cJSON *to = NULL;
    size_t index = 0;

    cJSON *sender = cJSON_CreateObject();

    if (sender == NULL)
    {
        goto end;
    }

    command = cJSON_CreateString("Stop");
    if (command == NULL)
    {
        goto end;
    }
    /* after creation was successful, immediately add it to the monitor,
     * thereby transferring ownership of the pointer to it */
    cJSON_AddItemToObject(sender, "command", command);

    mode = cJSON_CreateString("Auto");
    if (mode == NULL)
    {
        goto end;
    }

    cJSON_AddItemToObject(sender, "mode", mode);


    values = cJSON_CreateArray();
    if (values == NULL)
    {
        goto end;
    }
    cJSON_AddItemToObject(sender, "values", values);

    for (index = 0; index < (sizeof(resolution_numbers) / (2 * sizeof(int))); ++index)
    {
    	value = cJSON_CreateObject();
        if (value == NULL)
        {
            goto end;
        }
        cJSON_AddItemToArray(values, value);

        from = cJSON_CreateNumber(resolution_numbers[index][0]);
        if (from == NULL)
        {
            goto end;
        }
        cJSON_AddItemToObject(value, "from", from);

        to = cJSON_CreateNumber(resolution_numbers[index][1]);
        if (to == NULL)
        {
            goto end;
        }
        cJSON_AddItemToObject(value, "to", to);
    }

    string = cJSON_Print(sender);
    if (string == NULL)
    {
        fprintf(stderr, "Failed to print monitor.\n");
    }

end:
    cJSON_Delete(sender);
    return string;
}



