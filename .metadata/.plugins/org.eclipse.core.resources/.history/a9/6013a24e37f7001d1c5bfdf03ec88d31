/*
 * api_cjson.h
 *
 *  Created on: Apr 28, 2023
 *      Author: studio3s
 */

#ifndef MODULE_API_DATA_STRUCTURE_INCLUDE_API_DATA_STRUCTURE_API_DATA_STRUCTURE_H_
#define MODULE_API_DATA_STRUCTURE_INCLUDE_API_DATA_STRUCTURE_API_DATA_STRUCTURE_H_

#include <api_data_structure/include/api_data_structure/cJSON.h>
#include <api_data_structure/include/api_data_structure/cJSON_Utils.h>
#include <cstring>
#include <cstdio>



typedef struct
{
	uint16_t name_ = 1;
	uint16_t fw_version_ = 100;

}robot_info_;

typedef struct
{
	uint16_t configIP_ADDR0 = 192;
	uint16_t configIP_ADDR1 = 168;
	uint16_t configIP_ADDR2 = 17;
	uint16_t configIP_ADDR3 = 11;

	uint16_t configNET_MASK0 = 255;
	uint16_t configNET_MASK1 = 255;
	uint16_t configNET_MASK2 = 255;
	uint16_t configNET_MASK3 = 0;

	uint16_t configGW_ADDR0 = 192;
	uint16_t configGW_ADDR1 = 168;
	uint16_t configGW_ADDR2 = 17;
	uint16_t configGW_ADDR3 = 1;

}ipaddress_info_;

typedef struct
{
	unsigned long timestamp1_ = 0;
	unsigned long timestamp2_ = 0;

}timestamp_info_;



typedef struct
{
	uint16_t mode_ = 0;
	uint16_t status_ = 0;
	uint16_t position_ = 0;
	uint16_t destination_ = 0;

	uint16_t speed_ = 0;
	uint16_t fork_stroke_ = 0;
	uint16_t fork_width_ = 0;
	uint16_t fork_on_load_ = 0;

	uint16_t alarm_code_ = 0;
	uint16_t error_code_ = 0;

}status_page_1_;

typedef struct
{
	uint32_t sensor_input_ = 0;

}status_page_2_;

typedef struct
{
	uint16_t task_type_ = 0;
	uint16_t job_id_ = 0;
	uint16_t task_id_ = 0;
	uint16_t task_status_ = 0;
	uint16_t pending_task_no_ = 0;
	uint16_t callback_msg_ = 0;

}status_page_3_;

typedef struct
{
	uint32_t move_limit_min_ = 0;
	uint32_t move_limit_max_ = 0;
	uint32_t elevator_entry_pos_ = 0;
	uint32_t elevator_board_pos_ = 0;
	uint32_t elevator_exit_pos_ = 0;
	int16_t fwd_stop_calibration_ = 0;
	int16_t bwd_stop_calibration_ = 0;
	int16_t position_correction_constant_ = 0;

}vehicle_config_;

typedef struct
{
	uint16_t stroke_speed1_ = 0;
	uint16_t stroke_acc1_ = 0;
	uint16_t stroke_speed2_ = 0;
	uint16_t stroke_acc2_ = 0;
	uint16_t width_speed1_ = 0;
	uint16_t width_acc1_ = 0;
	uint16_t width_speed2_ = 0;
	uint16_t width_acc2_ = 0;

}attach_config_;



typedef struct
{
	robot_info robot_info_
	ipaddress_info ipaddress_info_;

	timestamp_info_


}main_data;





int ethernet_data_parser(const char * const msg, int msg_leng);
const char* ethernet_create_message(void);

int supports_full_hd(const char * const msg, int msg_leng);
const char* create_monitor();









#endif /* MODULE_API_DATA_STRUCTURE_INCLUDE_API_DATA_STRUCTURE_API_DATA_STRUCTURE_H_ */
