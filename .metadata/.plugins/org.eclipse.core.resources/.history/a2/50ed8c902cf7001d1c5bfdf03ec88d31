/*
 * tcprtosserver.cpp
 *
 *  Created on: Sep 6, 2022
 *      Author: kss
 */
#include <ethernet/tcp_rtos/server/tcp_rtos_server.h>
#include "cjson/include/cjson/api_cjson.h"
#include <cstring>
#include <vector>
#include <main.h>
static struct netconn *conn, *newconn;
//static struct netbuf *buf;
//static char msg[1024];  //receiving msg buffer
//static char smsg[1100];	//to send temp buffer

//static ip_addr_t *addr;
//static unsigned short port;

/*Rtos thread handle*/
osThreadId TcpServerHandle;

/*netif*/
extern struct netif gnetif;

#define ServerPort (int) 10

#define LWIP_MAX_LENGTH 1460
#define MAX_BUFFER_LENGTH 4000

#define STX 0x02
#define STX_START_PONINTER 0
#define LENGTH_DATA_START_POINTER 1
#define LENGTH_DATA_END_POINTER 4
#define DATA_START_POINTER 5


std::string eth_data_;
extern osMessageQId myQueue01Handle;
extern osMessageQId TCPSendQueueHandle;

_Message* tcp_recv_msg_ = NULL;

//memory pool
extern osPoolId Pool_ID ;


/*------------------------------------Server-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
static void TCPServerRecvTask(void const *arg)
{
	err_t err, accept_err;

	struct netbuf *buf;

	std::string recv_buffer;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);

	if (conn!=NULL)
	{
		/* Bind connection to the server port. */
		err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);

		if (err == ERR_OK)
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);

				/* Process the new connection. */
				if (accept_err == ERR_OK)
				{
					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
					{
						do
						{
							//----------------------------------------------check the buffer length for protect memory and copy to buffer length
							//0. maximum data occur error
							if(recv_buffer.length() >= MAX_BUFFER_LENGTH)
								recv_buffer.clear();

							//1. copy all data using data and length
							char temp_data[LWIP_MAX_LENGTH] = {0,};

							strncpy((char*)(temp_data),
										(char*)((buf->p->payload)), buf->p->len);

							recv_buffer.append(temp_data);




							//2. check front values is 0x02, 0x32 is '2' character value for test
							if(recv_buffer.front() != 0x32)
							{
								recv_buffer.clear();

								continue;
							}

							//3. get buf length
							uint16_t buf_leng =
									std::stoi(recv_buffer.substr(LENGTH_DATA_START_POINTER, LENGTH_DATA_END_POINTER));

							if((recv_buffer.length()) < buf_leng)
							{
								continue;
							}




							//4. get into the json parser and get data
							//this must do the data move to main data
							if(ethernet_data_parser(recv_buffer.substr(DATA_START_POINTER,
									buf_leng + DATA_START_POINTER).c_str(), buf_leng) < 0)
							{
								//error occur
								continue;
							}

							volatile const char* dd = ethernet_create_message();

							TcpServerSend((const char*)dd);

							//5. access main data structure and save data


							//6. send message to each task
							//notify the response 'request' or get 'report'
							//this must notify the recved data type to the write thread

//								//5.- 1 Dynamic allocate memory
//								tcp_recv_msg_ = (_Message *)osPoolAlloc(Pool_ID);
//
//								//3.-1 insert the data to msg_ID
//								tcp_recv_msg_->id_ = 0x10;
//
//								//3.-2 insert the data to msg_DATA
//								strncpy(tcp_recv_msg_->data_,
//										recv_buffer.substr(5, buf_leng).c_str(), buf_leng);
//


							//7. buffer init
							recv_buffer.erase(0, buf_leng +5);

							recv_buffer.shrink_to_fit();
//
//								//char* last_word_pointer = (char*)(int)tcp_recv_msg_->data_+buf_leng;
//
//								//last_word_pointer = "\0";
//
//								//strncpy(tcp_recv_msg_->data_, temp_data, remain_leng);
//
//								//insert the data to msg_DATA_length
//								tcp_recv_msg_->leng_ = buf_leng + 1;
//
//								//send msg
//								osMessagePut(myQueue01Handle, (uint32_t)tcp_recv_msg_, 10); //enqueue
//
//								//memcpy(temp_data, '\0', buf_leng);
//
//								//free msg
//								osPoolFree(Pool_ID, tcp_recv_msg_);

						}
						while (netbuf_next(buf) >=0);

						netbuf_delete(buf);
					}
					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
					netconn_delete(newconn);
				}
			}
		}
	}
	else
	{
		netconn_delete(conn);

	}
	//for whatever case occur
	vTaskDelete(NULL);
}



void TcpServerDelete()
{
	  if((netif_is_link_up(&gnetif))) return;

	  if(newconn == NULL && conn == NULL) return;

	  if(netconn_close(newconn) != ERR_OK) return;

	  if(netconn_delete(newconn) != ERR_OK) return;

	  if(netconn_delete(conn) != ERR_OK) return;

	  vTaskDelete(TcpServerHandle);

	  return;
}

void TcpServerSend(const char *data)
{

	netconn_write(newconn, data, strlen(data), NETCONN_COPY);
}


typedef struct
{
	uint16_t type = 0; //report? response
	uint16_t recv_command_ = 0;
	uint16_t send_command_ = 0;
}eth_command_;

static void TCPServerSendTask(void const *arg)
{
	osEvent retVal;

	//1. check the msg
	std::vector<eth_command_> send_command_data_;

	while(1)
	{
		//0. Get all messages from eth (be notified type)
		retVal = osMessageGet(myQueue01Handle, Oswaitforever); //dequeue

		//1. if msg queue is available
		if(retVal.status == osEventMessage)
		{
			//this must enqeue command data to vector queue

		}

		//if no msg, do empty the queue
		if()

			netconn_write(newconn, data, strlen(data), NETCONN_COPY);


	}

	//if data is all set, dequeue the vector qeuue
	//if(send_command_data_.send_command_ == sre_command_data_.recv_command_ )
	//send_command_data_.erase(send_command_data_.begin())





	return;
}


void TcpServerInit(void)
{
	if(newconn == NULL)
	{
		/* definition and creation of TCPServerTask */
		osThreadDef(TCPServerRecvTask_, TCPServerRecvTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *8);
		TcpServerHandle = osThreadCreate(osThread(TCPServerRecvTask_), NULL);
	}
}


