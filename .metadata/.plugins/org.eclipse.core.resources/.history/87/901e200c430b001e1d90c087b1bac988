/*
 * tcprtosserver.cpp
 *
 *  Created on: May 23, 2022
 *      Author: kss
 */
#include <api_data_structure/include/api_data_structure/api_data_structure.h>
#include <ethernet/tcp_rtos/server/tcp_rtos_server.h>
#include <cstring>
#include <vector>
#include <main.h>


/*Rtos thread handle*/
osThreadId TcpAcceptConnHandle;
osThreadId TcpServerRecvHandle;
osThreadId TcpServerSendHandle;

/*netif*/
extern struct netif gnetif;

//port config
#define ServerPort (int) 10

//defines
#define LWIP_MAX_LENGTH 1460
#define MAX_BUFFER_LENGTH 4000

#define STX 0x02
#define STX_START_PONINTER 0
#define LENGTH_DATA_START_POINTER 1
#define LENGTH_DATA_END_POINTER 4
#define DATA_START_POINTER 5

/*------------------------------------accept connection -----------------------------------------*/
/*-----------------------------------------------------------------------------------*/



void TcpRtos::TCPAcceptConnTask(void const* argument)
{
	TcpRtos* this_ = (TcpRtos *)argument;

	std::vector<netconn* > buf_conn_list_;

	while (1)
	{
		struct netconn* buf_conn_ = nullptr;

		netconn_listen(this_->conn_);

		/* Grab new connection. */
		while (netconn_accept(this_->conn_, &(buf_conn_)) != ERR_OK );

		/*When the zombie socket available, delete them*/
		if(!(buf_conn_list_.empty()))
		{
			for(auto range : buf_conn_list_)
			{
				netconn_close(range);
				netconn_delete(range);
			}
			buf_conn_list_.clear();
		}

		/*When the conn is not nullptr, delete ptr*/
		if(this_->accept_conn_)
			this_->accept_conn_= nullptr;

		/*matching new ptr*/
		this_->accept_conn_ = buf_conn_;

		/*enqueue the ptr*/
		buf_conn_list_.push_back(buf_conn_);


		/*make thread only once*/
		if((this_->is_init_) && !(this_->is_run_))
		{
			/* definition and creation of TCPServerRecvTask */
			osThreadDef(TCPServerRecvTask_
						, (os_pthread)&TcpRtos::TCPServerRecvTask
						, osPriorityNormal
						, 0
						, configMINIMAL_STACK_SIZE *8);

			this_->TcpServerRecvHandle = osThreadCreate(osThread(TCPServerRecvTask_), this_);

			/* definition and creation of TCPServerSendTask */
			osThreadDef(TCPServerSendTask_
						, (os_pthread)&TcpRtos::TCPServerSendTask
						, osPriorityNormal
						, 0
						, configMINIMAL_STACK_SIZE *8);

			this_->TcpServerSendHandle = osThreadCreate(osThread(TCPServerSendTask_), this_);

			this_->is_run_ = true;
		}
	}
	osThreadTerminate(NULL);

	return;
}



/*------------------------------------Server-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
void TcpRtos::TCPServerRecvTask(void const* argument)
{
	TcpRtos* this_ = (TcpRtos *)argument;

	struct netbuf *buf;

	std::string recv_buffer;

	while(1)
	{
		/*wait for recv*/
		/*notice : When socket is alive, Didnt get recv in 5 seconds, break socket*/

		if(netconn_recv(this_->accept_conn_, &buf) != ERR_OK)
			continue;

		do
		{
			char temp_data[LWIP_MAX_LENGTH] = {0,};

			memcpy((char*)(temp_data), (char*)((buf->p->payload)), buf->p->len);

			if(recv_buffer.length() >= MAX_BUFFER_LENGTH)
				recv_buffer.clear();

			recv_buffer.append(temp_data);

			//if(recv_buffer.front() != 0x32)
			if(recv_buffer.front() != 0x02)
			{
				recv_buffer.clear();

				recv_buffer.shrink_to_fit();

				continue;
			}

			uint16_t buf_leng = std::stoi(recv_buffer.substr(LENGTH_DATA_START_POINTER, LENGTH_DATA_END_POINTER));

			if(recv_buffer.length() < buf_leng)
				continue;

			if(GetDataFromEthernet(this_->Dst_
					, recv_buffer.substr(DATA_START_POINTER
										, buf_leng + DATA_START_POINTER).c_str()
					, buf_leng) < 0)
				continue; //error

			recv_buffer.erase(0, buf_leng + DATA_START_POINTER);

			recv_buffer.shrink_to_fit();

			//if(recv_buffer.front() != 0x32)
			if(recv_buffer.front() != 0x02)
				recv_buffer.clear();

		}
		while (netbuf_next(buf) > 0);

		netbuf_delete(buf);
	}
	osThreadTerminate(NULL);

	return;
}


void TcpRtos::TCPServerSendTask(void const* argument)
{
	TcpRtos* this_ = (TcpRtos *)argument;

	//1. check the msg
	while(1)
	{
		//0. Get all messages from eth (be notified type)
		if(!(this_->Dst_->tcp_send_queue_.empty()))
		{
			std::string send_buffer;

			cmd_queue_data cmd_queue_data_ = this_->Dst_->tcp_send_queue_.front();

			char json_data_[LWIP_MAX_LENGTH] = {0,};


			if(GetStringFromMainData(this_->Dst_, cmd_queue_data_, json_data_) < 0)
			{
				//error occur
			}

			send_buffer.insert(0, 1, 0x02);

			std::string data_length_ = std::to_string(strlen(json_data_));

			if (data_length_.length() < 4)
			{
				int itr = 4 - data_length_.length();

				for(int i = 0; i < itr; i++)
					send_buffer.append("0");
			}

			send_buffer.append(data_length_);

			data_length_.clear();

			data_length_.shrink_to_fit();			

			send_buffer.append(json_data_);

			netconn_write(this_->accept_conn_
					, send_buffer.c_str()
					, send_buffer.length()
					, NETCONN_COPY);

			this_->Dst_->tcp_send_queue_.erase(this_->Dst_->tcp_send_queue_.begin());
		}
		osDelay(10);
	}
	osThreadTerminate(NULL);

	return;
}

//-----------------------------------------------------------------------class

TcpRtos::TcpRtos()
{

}

TcpRtos::TcpRtos(data_structure* Dst)
{
	this->Dst_ = Dst;
}

TcpRtos::~TcpRtos()
{


}

TcpRtos& TcpRtos::SetData(data_structure* Dst)
{
	this->Dst_ = Dst;

	return *this;
}


void TcpRtos::LWIPInitialize()
{
	if(!(this->Dst_))
	{
		this->ip_address[0] = 192;
		this->ip_address[1] = 168;
		this->ip_address[2] = 1;
		this->ip_address[3] = 30;

		this->netmask_address[0] = 255;
		this->netmask_address[1] = 255;
		this->netmask_address[2] = 255;
		this->netmask_address[3] = 0;

		this->gateway_address[0] = 0;
		this->gateway_address[1] = 0;
		this->gateway_address[2] = 0;
		this->gateway_address[3] = 0;
	}
	else
	{
		this->ip_address[0] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGIP_ADDR0);
		this->ip_address[1] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGIP_ADDR1);
		this->ip_address[2] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGIP_ADDR2);
		this->ip_address[3] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGIP_ADDR3);

		this->netmask_address[0] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGNET_MASK0);
		this->netmask_address[1] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGNET_MASK1);
		this->netmask_address[2] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGNET_MASK2);
		this->netmask_address[3] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGNET_MASK3);

		this->gateway_address[0] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGGW_ADDR0);
		this->gateway_address[1] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGGW_ADDR1);
		this->gateway_address[2] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGGW_ADDR2);
		this->gateway_address[3] = ReadDataFromMainData(this->Dst_, RobotDataId::CONFIGGW_ADDR3);
	}

	/* Initilialize the LwIP stack with RTOS */
	tcpip_init( NULL, NULL );

	/* IP addresses initialization without DHCP (IPv4) */
	IP4_ADDR(&(this->ipaddr)
				, this->ip_address[0]
				, this->ip_address[1]
				, this->ip_address[2]
				, this->ip_address[3]);

	IP4_ADDR(&(this->netmask)
				, this->netmask_address[0]
				, this->netmask_address[1]
				, this->netmask_address[2]
				, this->netmask_address[3]);

	IP4_ADDR(&(this->gateway)
				, this->gateway_address[0]
				, this->gateway_address[1]
				, this->gateway_address[2]
				, this->gateway_address[3]);

	/* add the network interface (IPv4/IPv6) with RTOS */
	netif_add(&(this->gnetif)
				, &(this->ipaddr)
				, &(this->netmask)
				, &(this->gateway)
				, NULL
				, &ethernetif_init
				, &tcpip_input);

	/* Registers the default network interface */
	netif_set_default(&(this->gnetif));

	netif_set_down(&(this->gnetif));

	return;
}


void TcpRtos::Initialize()
{
	//must add the ip params
	LWIPInitialize();

	/* Create a new connection identifier. */
	this->conn_ = netconn_new(NETCONN_TCP);

	/*failed init error check */
	if (!(this->conn_))
		return; //error

	/* Bind connection to the server port. */
	this->err = netconn_bind(this->conn_ , IP_ADDR_ANY, this->ip_port_);

	/*bind failed error check*/
	if (this->err != ERR_OK)
		printf("error\r\n");

	/* definition and creation of TCPAcceptConnTask*/
	osThreadDef(TCPAcceptConnTask_
				, (os_pthread)&TcpRtos::TCPAcceptConnTask
				, osPriorityNormal
				, 0
				, configMINIMAL_STACK_SIZE);

	this->TcpAcceptConnHandle = osThreadCreate(osThread(TCPAcceptConnTask_), this);

	if(!(this->TcpAcceptConnHandle))
		return; //error

	/*init done*/
	this->is_init_ = true;

	return;
}






