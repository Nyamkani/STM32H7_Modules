/*
 * openAMP_RTOS_M7.c
 *
 *  Created on: Mar 8, 2023
 *      Author: studio3s
 */


#include <openAMP_RTOS_M7/include/openAMP_RTOS_M7/openAMP_RTOS_M7.h>
#include <api_data_structure/include/api_data_structure/api_data_structure.h>

/* Private variables ---------------------------------------------------------*/
static openamp_type message_recv = {0,};

static volatile int message_received = 0;
static volatile int service_created;
static openamp_type received_data;
static struct rpmsg_endpoint rp_endpoint;


/* Extern variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/


/* Private functions ---------------------------------------------------------*/

int OpenAMP_M7::OpenAMP_M7::rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
                size_t len, uint32_t src, void *priv)
{
  received_data = *((openamp_type*) data);

  //osSemaphoreRelease(this->osSemaphore_MessageReception);

  message_received = 1;

  return 0;
}

openamp_type receive_message(void)
{
	  received_data.command_= 0xff;
	  uint32_t status = 0;

	  while (received_data.command_ == 0xff)
	  {
	  //  status = osSemaphoreWait(osSemaphore_MessageReception , 0xffff);

	   if (status != osOK) break;

	    //OPENAMP_check_for_message();
	  }
	  return received_data;
}

void OpenAMP_M7::service_destroy_cb(struct rpmsg_endpoint *ept)
{
  /* this function is called while remote endpoint as been destroyed, the
   * service is no more available
   */
	  service_created = 0 ;
}

void OpenAMP_M7::new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
	  /* create a endpoint for rmpsg communication */
	  OPENAMP_create_endpoint(&rp_endpoint
							  , name
							  , dest
							  , &(OpenAMP_M7::rpmsg_recv_callback)
							  , service_destroy_cb);

	 osSemaphoreRelease (osSemaphore_ChannelCreation);

	  service_created = 1;
}


void OpenAMP_M7::OpenAMPReadTask(void const *argument)
{
	data_structure* Dst_ = (data_structure*)argument;

	//openamp_type test;

	while(1)
	{
		//0. check the openamp queue (aync or sync)
		if(!(Dst_->openamp_send_queue_.empty())) //async qeueu
		{
			//get cmd to 1.
		}
		else //sync queue
		{
			//get cmd to 1.
		}
		
		//1. get cmd to convert to openamp protocol
		//int ret = GetOpenAMPCmdFromQueue(structval)

		//2. send data to slave(m4)
		//OpenAMPSend(structval)

		//3. wait for the msg
		message_recv = receive_message();

		//4. if got msg do next thing (making tcp cmd to rcs or things)

		//5. delete queue(check aync or sync)



	}
		//}

	return;
}


void OpenAMPChkMsgtask(void const *argument)
{
	while(1)
	{
		OPENAMP_check_for_message();

		osDelay(1);
	}
	return;
}


//------------------------------------------------------------------------

OpenAMP_M7::OpenAMP_M7()
{

}

OpenAMP_M7::OpenAMP_M7(data_structure* Dst)
{
	this->Dst_ = Dst;

}

OpenAMP_M7::~OpenAMP_M7()
{

}

void OpenAMP_M7::Initialize()
{

	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */

	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
	/* wait until CPU2 wakes up from stop mode */

	uint32_t timeout = 0xFFFF;

	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
	if ( timeout < 0 ){}
		//error

	/* Define used semaphore */
	osSemaphoreDef(CHN_CREAT);
	osSemaphoreDef(MSG_RECPT);

	/* Create the semaphore */
	this->osSemaphore_ChannelCreation  = osSemaphoreCreate(osSemaphore(CHN_CREAT) , 1);
	this->osSemaphore_MessageReception = osSemaphoreCreate(osSemaphore(MSG_RECPT) , 1);

	/* Initialize the mailbox use notify the other core on new message */
	MAILBOX_Init();

	/* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
	rpmsg_init_ept(&rp_endpoint
					, RPMSG_CHAN_NAME
					, RPMSG_ADDR_ANY
					, RPMSG_ADDR_ANY
					, NULL, NULL);

	/* Initialize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_MASTER, this->new_service_cb)!= HAL_OK)
						//, static_cast<OpenAMP_M7*>(this->new_service_cb))!= HAL_OK)
						//, static_cast<OpenAMP_M7*>this->new_service_cb)!= HAL_OK)
		//error

	/*
	* The rpmsg service is initiate by the remote processor, on A7 new_service_cb
	* callback is received on service creation. Wait for the callback
	*/
	OPENAMP_Wait_EndPointready(&rp_endpoint);


	/* Create the Thread */
	startTask();

//	osThreadDef(OpenAMP_ReadTask, OpenAMPReadTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
//	osThreadCreate(osThread(OpenAMP_ReadTask), (void*)this->Dst_);
//
//	osThreadDef(OpenAMP_ChkTask, OpenAMPChkMsgtask, osPriorityNormal, 0, 128);
//	osThreadCreate(osThread(OpenAMP_ChkTask), nullptr);

	return;
}

void OpenAMP_M7::OpenAMPSend(const char* msg, int msg_leng)
{
	openamp_type test;

	test.data1_ = 1;
	test.data2_ = 2;
	test.data3_ = 3;
	test.data4_ = 4;
	test.data5_ = 5;
	test.data6_ = 6;
	test.data7_ = 7;
	test.data8_ = 8;
//	test.data9_ = 9;

	size_t size = sizeof(test);

	/* Send the massage to the remote CPU */
	int status = OPENAMP_send(&rp_endpoint, &test, size);

	if (status < 0){}
		//error

	return;
}


void OpenAMP_M7::startTask()
{
	startRaedTaskImpl = [this](void* argument){OpenAMPReadTask(argument);};
						 //&OpenAMP_M7::OpenAMPReadTask;

	osThreadDef(OpenAMP_ReadTask
				, (os_pthread)&OpenAMP_M7::OpenAMPReadTask//&OpenAMP_M7::startRaedTaskImpl
				, osPriorityNormal
				, 0
				, configMINIMAL_STACK_SIZE *2);

	osThreadCreate(osThread(OpenAMP_ReadTask), this);

}

//void OpenAMP_M7::startTaskImpl(void* _this)
//{
//  static_cast<AIFreeRTOS*>(_this)->OpenAMPReadTask();
//}





