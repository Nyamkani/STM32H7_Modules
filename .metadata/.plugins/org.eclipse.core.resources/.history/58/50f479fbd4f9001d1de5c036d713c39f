/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include <api_data_structure/include/api_data_structure/api_data_structure.h>
#include <main.h>
#include "cmsis_os.h"
#include "fatfs.h"
#include "lwip.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <ethernet/tcp_rtos/server/tcp_rtos_server.h>
#include <fatfs_h7/include/fatfs_h7/fatfs_h7.h>
#include <openAMP_RTOS_M7/include/openAMP_RTOS_M7/openAMP_RTOS_M7.h>
#include "api_debug/api_debug.h"

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/


//task handle
osThreadId InitTaskHandle;
osThreadId Task1Handle;
osThreadId Task2Handle;

//memory pool



//eventflag
//EventGroupHandle_t evtGrpHandle;
//uint32_t evtFlag = 0x11;
//uint32_t evtFlag2 = 0x02;

/* USER CODE BEGIN PV */

uint32_t timeout;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/

void StartInitTask(void const * argument);
void StartTask1(void const * argument);
void StartTask2(void const * argument);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef __cplusplus
extern "C"{
#endif


int _write(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
  {
	  ITM_SendChar(*ptr++);
  }
  return len;
}

#ifdef __cplusplus
}
#endif

/* USER CODE END 0 */






/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
 // int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

	MPU_config();

  /* USER CODE BEGIN SysInit */
  initialize_peripheral();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */

  //-----------------------------------------------------main data structure init;
  data_structure* main_data_ = NULL;

  main_data_ = new data_structure;

  InitializeDataStructure(main_data_);


  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityNormal,0,  512);
  InitTaskHandle = osThreadCreate(osThread(InitTask), (void*)main_data_);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}


/* USER CODE BEGIN 4 */


/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartInitTask */
/**
  * @brief  Function implementing the InitTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const * argument)
{
	data_structure* st = (data_structure*)argument;

	/* init code for LWIP */
	MX_LWIP_Init();
	/* USER CODE BEGIN 5 */

	//0. check printf alive
	printf("Hello World!\n");

	//1. TCP server initialize
	TcpServerInit();

	//2. FATfs Initialize
	FatFsInit();
	//FatFsTest("test.txt");

	//3. openAMP_h7 initialize
	OpenAMPInit_M7();

	//message pool
	 //osPoolDef (Pool_ID_, sizeof(*tcp_recv_msg_), &tcp_recv_msg_);
	 //Pool_ID = osPoolCreate(osPool(Pool_ID_));

	//main to tcp sender
	//osMessageQDef(tcpsendq, 16, _Message);
	//TCPSendQueueHandle = osMessageCreate(osMessageQ(tcpsendq), NULL);

	/* definition and creation of Task1 */
//	osThreadDef(Task1, StartTask1, osPriorityLow, 0, configMINIMAL_STACK_SIZE *2);
//	Task1Handle = osThreadCreate(osThread(Task1), NULL);

	/* definition and creation of Task2 */
//	osThreadDef(Task2, StartTask2, osPriorityHigh, 0, configMINIMAL_STACK_SIZE *6);
//	Task2Handle = osThreadCreate(osThread(Task2), NULL);

	/*Delete Itself*/
    vTaskDelete(NULL);

  /* USER CODE END 5 */
}

/* USER CODE BEGIN StartTask1 */
/**
* @brief Function implementing the Task1 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Task1 */
void StartTask1(void const *argument)
{
  /* USER CODE BEGIN StartCommonSensorTask */

	const TickType_t xTime = pdMS_TO_TICKS(5);

	TickType_t xLastWakeTime = xTaskGetTickCount();

  /* Infinite loop */

  for(;;)
  {
	 osDelay(1);
	//vTaskDelayUntil(&xLastWakeTime, xTime);
  }
  /* USER CODE END StartTask1 */
}

/* USER CODE BEGIN StartTask2 */
/**
* @brief Function implementing the Task2 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END StartTask2 */

void StartTask2(void const *argument)
{
  /* USER CODE BEGIN Task2 */

	//const TickType_t xTime = pdMS_TO_TICKS(2);

	//TickType_t xLastWakeTime = xTaskGetTickCount();

	_Message* recv_msg = NULL;
	_Message send_msg;
	char* recv_buf = NULL;
	char* send_buf = NULL;
	int send_buf_leng_ = 0;
	//char char_temp_buf[1024*3] = {0,};
	osEvent retVal;


  /* Infinite loop */
  for(;;)
  {
	  //0. Get all messages from eth, SDMMC and openAMP
	  retVal = osMessageGet(myQueue01Handle, osWaitForever); //dequeue

	  //1. When the message is received
	  if(retVal.status == osEventMessage)
	  {
		  	//1.-1---------------------- Copy message
		  	//message allocation
			recv_msg  = new _Message;

			//get data
			memcpy(recv_msg, (_Message*)retVal.value.p, sizeof(*tcp_recv_msg_));

			//get element
			//recv_buf = new char[recv_msg->leng_+1];
			//char send_buf[recv_msg->leng_ + 1];

			//send_buf[recv_msg->leng_] = '\0';

			strncpy (recv_buf, recv_msg->data_, recv_msg->leng_);   // get the message from the client

		  	//1.-2---------------------- parsing message and save data

			switch(recv_msg->id_)
			{
				//When the message is from eth receiver
				case 0x10: ethernet_data_parser(recv_msg->data_, recv_msg->leng_); break;

				//When the message is from sdmmc receiver
				case 0x20: break;

				//When the message is from openAMP receiver
				case 0x30: break;

				default: /*Unknown message type error occur*/ break;
			}





			//DebugDrive(recv_msg);
			//xEventGroupSetBits(evtGrpHandle, evtFlag);

			//send_msg.id_ = 0x11;
			//send_msg.data_ = (char*)recv_msg->data_;
			//send_msg.leng_ = recv_msg->leng_;

			//osMessagePut(TCPSendQueueHandle, (uint32_t)(&send_msg), 10); //enqueue


			//if(recv_msg->leng_ != 1000)
			//{
			//	printf("the message length has been currupted %d bytes. \r\n", recv_msg->leng_);
			//}

			//TcpServerSend(send_buf);

			char send_buf[1024] = {0,};

			send_buf_leng_ = strlen(ethernet_create_message());

			*send_buf = 0x02;

			strncpy ((char*)(int)(send_buf + 1), "0", 1);

			//itoa(0x02, (char*)(int)(send_buf), 10);

			itoa(send_buf_leng_, (char*)(int)(send_buf + 2), 10);



			strncpy ((char*)(int)(send_buf + 5), ethernet_create_message(), send_buf_leng_);

			strncpy ((char*)(int)(send_buf + send_buf_leng_+ 5), "\0", 1);


		    printf("%s\r\n",send_buf);

			TcpServerSend(send_buf);


			//delete[] send_buf;
			//send_buf = NULL;
			//send_buf_leng_=  0;
			delete recv_buf;
			recv_buf = NULL;
			delete recv_msg;
			recv_msg = NULL;
			//delete msg
			//delete tcp_recv_msg_->data_;

			//tcp_recv_msg_->data_ = NULL;

			//free msg
			//osPoolFree(Pool_ID, tcp_recv_msg_);

	  }

	//osDelay(1);

	//vTaskDelayUntil(&xLastWakeTime, xTime);

	//vTaskDelay(pdMS_TO_TICKS(80));
	}
  /* USER CODE END StartTask2 */
}













/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  /*Disable Speculative access*/
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /*Set LwIP Heap */
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30020000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /*RX & Tx Descriptors*/
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0x30040000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);


  /*openAMP Memory*/
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x38000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);

  /*rtos memory protection*/
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
  MPU_InitStruct.BaseAddress = 0x24000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);




  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM6 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
