
ethernet_h7_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0810771c  0810771c  0001771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810772c  0810772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08107730  08107730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  08107734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000037c  10000010  08107744  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  1000038c  08107744  0002038c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001b746  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002ec4  00000000  00000000  0003b786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001700  00000000  00000000  0003e650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000015d0  00000000  00000000  0003fd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00045a6e  00000000  00000000  00041320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001b666  00000000  00000000  00086d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001bc991  00000000  00000000  000a23f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0025ed85  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006340  00000000  00000000  0025edd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08107704 	.word	0x08107704

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08107704 	.word	0x08107704

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b23      	ldr	r3, [pc, #140]	; (810039c <main+0x94>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a21      	ldr	r2, [pc, #132]	; (810039c <main+0x94>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1f      	ldr	r3, [pc, #124]	; (810039c <main+0x94>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f002 fd0d 	bl	8102d4c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f002 fd97 	bl	8102e64 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f002 fd18 	bl	8102d70 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b17      	ldr	r3, [pc, #92]	; (81003a0 <main+0x98>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b15      	ldr	r3, [pc, #84]	; (81003a4 <main+0x9c>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a13      	ldr	r2, [pc, #76]	; (81003a4 <main+0x9c>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b10      	ldr	r3, [pc, #64]	; (81003a4 <main+0x9c>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0f      	ldr	r2, [pc, #60]	; (81003a4 <main+0x9c>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 ff52 	bl	8101218 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100374:	f000 fb7a 	bl	8100a6c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8100378:	f000 f816 	bl	81003a8 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 810037c:	f000 f89c 	bl	81004b8 <_ZL12MX_ADC3_Initv>
  MX_HDMI_CEC_Init();
 8100380:	f000 f904 	bl	810058c <_ZL16MX_HDMI_CEC_Initv>
  MX_RTC_Init();
 8100384:	f000 f93c 	bl	8100600 <_ZL11MX_RTC_Initv>
  MX_SAI1_Init();
 8100388:	f000 f992 	bl	81006b0 <_ZL12MX_SAI1_Initv>
  MX_SPDIFRX1_Init();
 810038c:	f000 fa36 	bl	81007fc <_ZL16MX_SPDIFRX1_Initv>
  MX_TIM8_Init();
 8100390:	f000 fa72 	bl	8100878 <_ZL12MX_TIM8_Initv>
  MX_TIM13_Init();
 8100394:	f000 fb14 	bl	81009c0 <_ZL13MX_TIM13_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100398:	e7fe      	b.n	8100398 <main+0x90>
 810039a:	bf00      	nop
 810039c:	58024400 	.word	0x58024400
 81003a0:	e000ed00 	.word	0xe000ed00
 81003a4:	58026400 	.word	0x58026400

081003a8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 81003a8:	b580      	push	{r7, lr}
 81003aa:	b08a      	sub	sp, #40	; 0x28
 81003ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 81003ae:	f107 031c 	add.w	r3, r7, #28
 81003b2:	2200      	movs	r2, #0
 81003b4:	601a      	str	r2, [r3, #0]
 81003b6:	605a      	str	r2, [r3, #4]
 81003b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81003ba:	463b      	mov	r3, r7
 81003bc:	2200      	movs	r2, #0
 81003be:	601a      	str	r2, [r3, #0]
 81003c0:	605a      	str	r2, [r3, #4]
 81003c2:	609a      	str	r2, [r3, #8]
 81003c4:	60da      	str	r2, [r3, #12]
 81003c6:	611a      	str	r2, [r3, #16]
 81003c8:	615a      	str	r2, [r3, #20]
 81003ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81003cc:	4b37      	ldr	r3, [pc, #220]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003ce:	4a38      	ldr	r2, [pc, #224]	; (81004b0 <_ZL12MX_ADC1_Initv+0x108>)
 81003d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 81003d2:	4b36      	ldr	r3, [pc, #216]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003d4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 81003d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81003da:	4b34      	ldr	r3, [pc, #208]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003dc:	2200      	movs	r2, #0
 81003de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81003e0:	4b32      	ldr	r3, [pc, #200]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003e2:	2200      	movs	r2, #0
 81003e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81003e6:	4b31      	ldr	r3, [pc, #196]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003e8:	2204      	movs	r2, #4
 81003ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81003ec:	4b2f      	ldr	r3, [pc, #188]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003ee:	2200      	movs	r2, #0
 81003f0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81003f2:	4b2e      	ldr	r3, [pc, #184]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003f4:	2200      	movs	r2, #0
 81003f6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81003f8:	4b2c      	ldr	r3, [pc, #176]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 81003fa:	2201      	movs	r2, #1
 81003fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81003fe:	4b2b      	ldr	r3, [pc, #172]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 8100400:	2200      	movs	r2, #0
 8100402:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100404:	4b29      	ldr	r3, [pc, #164]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 8100406:	2200      	movs	r2, #0
 8100408:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810040a:	4b28      	ldr	r3, [pc, #160]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 810040c:	2200      	movs	r2, #0
 810040e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100410:	4b26      	ldr	r3, [pc, #152]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 8100412:	2200      	movs	r2, #0
 8100414:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100416:	4b25      	ldr	r3, [pc, #148]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 8100418:	2200      	movs	r2, #0
 810041a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810041c:	4b23      	ldr	r3, [pc, #140]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 810041e:	2200      	movs	r2, #0
 8100420:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100422:	4b22      	ldr	r3, [pc, #136]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 8100424:	2200      	movs	r2, #0
 8100426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810042a:	4820      	ldr	r0, [pc, #128]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 810042c:	f001 f956 	bl	81016dc <HAL_ADC_Init>
 8100430:	4603      	mov	r3, r0
 8100432:	2b00      	cmp	r3, #0
 8100434:	bf14      	ite	ne
 8100436:	2301      	movne	r3, #1
 8100438:	2300      	moveq	r3, #0
 810043a:	b2db      	uxtb	r3, r3
 810043c:	2b00      	cmp	r3, #0
 810043e:	d001      	beq.n	8100444 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8100440:	f000 fb98 	bl	8100b74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100444:	2300      	movs	r3, #0
 8100446:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100448:	f107 031c 	add.w	r3, r7, #28
 810044c:	4619      	mov	r1, r3
 810044e:	4817      	ldr	r0, [pc, #92]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 8100450:	f001 ff68 	bl	8102324 <HAL_ADCEx_MultiModeConfigChannel>
 8100454:	4603      	mov	r3, r0
 8100456:	2b00      	cmp	r3, #0
 8100458:	bf14      	ite	ne
 810045a:	2301      	movne	r3, #1
 810045c:	2300      	moveq	r3, #0
 810045e:	b2db      	uxtb	r3, r3
 8100460:	2b00      	cmp	r3, #0
 8100462:	d001      	beq.n	8100468 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8100464:	f000 fb86 	bl	8100b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100468:	4b12      	ldr	r3, [pc, #72]	; (81004b4 <_ZL12MX_ADC1_Initv+0x10c>)
 810046a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810046c:	2306      	movs	r3, #6
 810046e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100470:	2300      	movs	r3, #0
 8100472:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100474:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100478:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810047a:	2304      	movs	r3, #4
 810047c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810047e:	2300      	movs	r3, #0
 8100480:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100482:	2300      	movs	r3, #0
 8100484:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100486:	463b      	mov	r3, r7
 8100488:	4619      	mov	r1, r3
 810048a:	4808      	ldr	r0, [pc, #32]	; (81004ac <_ZL12MX_ADC1_Initv+0x104>)
 810048c:	f001 fac8 	bl	8101a20 <HAL_ADC_ConfigChannel>
 8100490:	4603      	mov	r3, r0
 8100492:	2b00      	cmp	r3, #0
 8100494:	bf14      	ite	ne
 8100496:	2301      	movne	r3, #1
 8100498:	2300      	moveq	r3, #0
 810049a:	b2db      	uxtb	r3, r3
 810049c:	2b00      	cmp	r3, #0
 810049e:	d001      	beq.n	81004a4 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 81004a0:	f000 fb68 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 81004a4:	bf00      	nop
 81004a6:	3728      	adds	r7, #40	; 0x28
 81004a8:	46bd      	mov	sp, r7
 81004aa:	bd80      	pop	{r7, pc}
 81004ac:	1000002c 	.word	0x1000002c
 81004b0:	40022000 	.word	0x40022000
 81004b4:	04300002 	.word	0x04300002

081004b8 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81004b8:	b580      	push	{r7, lr}
 81004ba:	b088      	sub	sp, #32
 81004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81004be:	1d3b      	adds	r3, r7, #4
 81004c0:	2200      	movs	r2, #0
 81004c2:	601a      	str	r2, [r3, #0]
 81004c4:	605a      	str	r2, [r3, #4]
 81004c6:	609a      	str	r2, [r3, #8]
 81004c8:	60da      	str	r2, [r3, #12]
 81004ca:	611a      	str	r2, [r3, #16]
 81004cc:	615a      	str	r2, [r3, #20]
 81004ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 81004d0:	4b2c      	ldr	r3, [pc, #176]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004d2:	4a2d      	ldr	r2, [pc, #180]	; (8100588 <_ZL12MX_ADC3_Initv+0xd0>)
 81004d4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 81004d6:	4b2b      	ldr	r3, [pc, #172]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004d8:	2200      	movs	r2, #0
 81004da:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81004dc:	4b29      	ldr	r3, [pc, #164]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004de:	2200      	movs	r2, #0
 81004e0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81004e2:	4b28      	ldr	r3, [pc, #160]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004e4:	2204      	movs	r2, #4
 81004e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 81004e8:	4b26      	ldr	r3, [pc, #152]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004ea:	2200      	movs	r2, #0
 81004ec:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 81004ee:	4b25      	ldr	r3, [pc, #148]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004f0:	2200      	movs	r2, #0
 81004f2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 81004f4:	4b23      	ldr	r3, [pc, #140]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004f6:	2201      	movs	r2, #1
 81004f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 81004fa:	4b22      	ldr	r3, [pc, #136]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 81004fc:	2200      	movs	r2, #0
 81004fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100500:	4b20      	ldr	r3, [pc, #128]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 8100502:	2200      	movs	r2, #0
 8100504:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100506:	4b1f      	ldr	r3, [pc, #124]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 8100508:	2200      	movs	r2, #0
 810050a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 810050c:	4b1d      	ldr	r3, [pc, #116]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 810050e:	2200      	movs	r2, #0
 8100510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100512:	4b1c      	ldr	r3, [pc, #112]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 8100514:	2200      	movs	r2, #0
 8100516:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100518:	4b1a      	ldr	r3, [pc, #104]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 810051a:	2200      	movs	r2, #0
 810051c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 810051e:	4b19      	ldr	r3, [pc, #100]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 8100520:	2200      	movs	r2, #0
 8100522:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100526:	4817      	ldr	r0, [pc, #92]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 8100528:	f001 f8d8 	bl	81016dc <HAL_ADC_Init>
 810052c:	4603      	mov	r3, r0
 810052e:	2b00      	cmp	r3, #0
 8100530:	bf14      	ite	ne
 8100532:	2301      	movne	r3, #1
 8100534:	2300      	moveq	r3, #0
 8100536:	b2db      	uxtb	r3, r3
 8100538:	2b00      	cmp	r3, #0
 810053a:	d001      	beq.n	8100540 <_ZL12MX_ADC3_Initv+0x88>
  {
    Error_Handler();
 810053c:	f000 fb1a 	bl	8100b74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100540:	2301      	movs	r3, #1
 8100542:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100544:	2306      	movs	r3, #6
 8100546:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100548:	2300      	movs	r3, #0
 810054a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810054c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100550:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100552:	2304      	movs	r3, #4
 8100554:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8100556:	2300      	movs	r3, #0
 8100558:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 810055a:	2300      	movs	r3, #0
 810055c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810055e:	1d3b      	adds	r3, r7, #4
 8100560:	4619      	mov	r1, r3
 8100562:	4808      	ldr	r0, [pc, #32]	; (8100584 <_ZL12MX_ADC3_Initv+0xcc>)
 8100564:	f001 fa5c 	bl	8101a20 <HAL_ADC_ConfigChannel>
 8100568:	4603      	mov	r3, r0
 810056a:	2b00      	cmp	r3, #0
 810056c:	bf14      	ite	ne
 810056e:	2301      	movne	r3, #1
 8100570:	2300      	moveq	r3, #0
 8100572:	b2db      	uxtb	r3, r3
 8100574:	2b00      	cmp	r3, #0
 8100576:	d001      	beq.n	810057c <_ZL12MX_ADC3_Initv+0xc4>
  {
    Error_Handler();
 8100578:	f000 fafc 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 810057c:	bf00      	nop
 810057e:	3720      	adds	r7, #32
 8100580:	46bd      	mov	sp, r7
 8100582:	bd80      	pop	{r7, pc}
 8100584:	10000090 	.word	0x10000090
 8100588:	58026000 	.word	0x58026000

0810058c <_ZL16MX_HDMI_CEC_Initv>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 810058c:	b580      	push	{r7, lr}
 810058e:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100590:	4b18      	ldr	r3, [pc, #96]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100592:	4a19      	ldr	r2, [pc, #100]	; (81005f8 <_ZL16MX_HDMI_CEC_Initv+0x6c>)
 8100594:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100596:	4b17      	ldr	r3, [pc, #92]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100598:	2200      	movs	r2, #0
 810059a:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 810059c:	4b15      	ldr	r3, [pc, #84]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 810059e:	2200      	movs	r2, #0
 81005a0:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 81005a2:	4b14      	ldr	r3, [pc, #80]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005a4:	2210      	movs	r2, #16
 81005a6:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 81005a8:	4b12      	ldr	r3, [pc, #72]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005aa:	2200      	movs	r2, #0
 81005ac:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 81005ae:	4b11      	ldr	r3, [pc, #68]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005b0:	2200      	movs	r2, #0
 81005b2:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 81005b4:	4b0f      	ldr	r3, [pc, #60]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005b6:	2200      	movs	r2, #0
 81005b8:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 81005ba:	4b0e      	ldr	r3, [pc, #56]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005bc:	2200      	movs	r2, #0
 81005be:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 81005c0:	4b0c      	ldr	r3, [pc, #48]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81005c6:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 81005c8:	4b0a      	ldr	r3, [pc, #40]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005ca:	2200      	movs	r2, #0
 81005cc:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 81005ce:	4b09      	ldr	r3, [pc, #36]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005d0:	4a0a      	ldr	r2, [pc, #40]	; (81005fc <_ZL16MX_HDMI_CEC_Initv+0x70>)
 81005d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 81005d4:	4807      	ldr	r0, [pc, #28]	; (81005f4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81005d6:	f001 ff87 	bl	81024e8 <HAL_CEC_Init>
 81005da:	4603      	mov	r3, r0
 81005dc:	2b00      	cmp	r3, #0
 81005de:	bf14      	ite	ne
 81005e0:	2301      	movne	r3, #1
 81005e2:	2300      	moveq	r3, #0
 81005e4:	b2db      	uxtb	r3, r3
 81005e6:	2b00      	cmp	r3, #0
 81005e8:	d001      	beq.n	81005ee <_ZL16MX_HDMI_CEC_Initv+0x62>
  {
    Error_Handler();
 81005ea:	f000 fac3 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 81005ee:	bf00      	nop
 81005f0:	bd80      	pop	{r7, pc}
 81005f2:	bf00      	nop
 81005f4:	100000f4 	.word	0x100000f4
 81005f8:	40006c00 	.word	0x40006c00
 81005fc:	10000374 	.word	0x10000374

08100600 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100600:	b580      	push	{r7, lr}
 8100602:	b08a      	sub	sp, #40	; 0x28
 8100604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100606:	463b      	mov	r3, r7
 8100608:	2228      	movs	r2, #40	; 0x28
 810060a:	2100      	movs	r1, #0
 810060c:	4618      	mov	r0, r3
 810060e:	f007 f871 	bl	81076f4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100612:	4b25      	ldr	r3, [pc, #148]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 8100614:	4a25      	ldr	r2, [pc, #148]	; (81006ac <_ZL11MX_RTC_Initv+0xac>)
 8100616:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100618:	4b23      	ldr	r3, [pc, #140]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 810061a:	2200      	movs	r2, #0
 810061c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 810061e:	4b22      	ldr	r3, [pc, #136]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 8100620:	227f      	movs	r2, #127	; 0x7f
 8100622:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100624:	4b20      	ldr	r3, [pc, #128]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 8100626:	22ff      	movs	r2, #255	; 0xff
 8100628:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 810062a:	4b1f      	ldr	r3, [pc, #124]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 810062c:	2200      	movs	r2, #0
 810062e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100630:	4b1d      	ldr	r3, [pc, #116]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 8100632:	2200      	movs	r2, #0
 8100634:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100636:	4b1c      	ldr	r3, [pc, #112]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 8100638:	2200      	movs	r2, #0
 810063a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 810063c:	4b1a      	ldr	r3, [pc, #104]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 810063e:	2200      	movs	r2, #0
 8100640:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100642:	4819      	ldr	r0, [pc, #100]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 8100644:	f005 fb1c 	bl	8105c80 <HAL_RTC_Init>
 8100648:	4603      	mov	r3, r0
 810064a:	2b00      	cmp	r3, #0
 810064c:	bf14      	ite	ne
 810064e:	2301      	movne	r3, #1
 8100650:	2300      	moveq	r3, #0
 8100652:	b2db      	uxtb	r3, r3
 8100654:	2b00      	cmp	r3, #0
 8100656:	d001      	beq.n	810065c <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 8100658:	f000 fa8c 	bl	8100b74 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 810065c:	2301      	movs	r3, #1
 810065e:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100660:	2301      	movs	r3, #1
 8100662:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100664:	2300      	movs	r3, #0
 8100666:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100668:	2300      	movs	r3, #0
 810066a:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 810066c:	2300      	movs	r3, #0
 810066e:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100670:	2300      	movs	r3, #0
 8100672:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100674:	2300      	movs	r3, #0
 8100676:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100678:	2300      	movs	r3, #0
 810067a:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 810067c:	2380      	movs	r3, #128	; 0x80
 810067e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100680:	463b      	mov	r3, r7
 8100682:	4619      	mov	r1, r3
 8100684:	4808      	ldr	r0, [pc, #32]	; (81006a8 <_ZL11MX_RTC_Initv+0xa8>)
 8100686:	f005 fc13 	bl	8105eb0 <HAL_RTCEx_SetTamper>
 810068a:	4603      	mov	r3, r0
 810068c:	2b00      	cmp	r3, #0
 810068e:	bf14      	ite	ne
 8100690:	2301      	movne	r3, #1
 8100692:	2300      	moveq	r3, #0
 8100694:	b2db      	uxtb	r3, r3
 8100696:	2b00      	cmp	r3, #0
 8100698:	d001      	beq.n	810069e <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 810069a:	f000 fa6b 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 810069e:	bf00      	nop
 81006a0:	3728      	adds	r7, #40	; 0x28
 81006a2:	46bd      	mov	sp, r7
 81006a4:	bd80      	pop	{r7, pc}
 81006a6:	bf00      	nop
 81006a8:	10000138 	.word	0x10000138
 81006ac:	58004000 	.word	0x58004000

081006b0 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 81006b0:	b580      	push	{r7, lr}
 81006b2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 81006b4:	4b4c      	ldr	r3, [pc, #304]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006b6:	4a4d      	ldr	r2, [pc, #308]	; (81007ec <_ZL12MX_SAI1_Initv+0x13c>)
 81006b8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 81006ba:	4b4b      	ldr	r3, [pc, #300]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006bc:	2200      	movs	r2, #0
 81006be:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 81006c0:	4b49      	ldr	r3, [pc, #292]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006c2:	2200      	movs	r2, #0
 81006c4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 81006c6:	4b48      	ldr	r3, [pc, #288]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006c8:	2240      	movs	r2, #64	; 0x40
 81006ca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 81006cc:	4b46      	ldr	r3, [pc, #280]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006ce:	2200      	movs	r2, #0
 81006d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 81006d2:	4b45      	ldr	r3, [pc, #276]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006d4:	2200      	movs	r2, #0
 81006d6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 81006d8:	4b43      	ldr	r3, [pc, #268]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006da:	2200      	movs	r2, #0
 81006dc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81006de:	4b42      	ldr	r3, [pc, #264]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006e0:	2200      	movs	r2, #0
 81006e2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 81006e4:	4b40      	ldr	r3, [pc, #256]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006e6:	2200      	movs	r2, #0
 81006e8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81006ea:	4b3f      	ldr	r3, [pc, #252]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006ec:	2200      	movs	r2, #0
 81006ee:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 81006f0:	4b3d      	ldr	r3, [pc, #244]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006f2:	4a3f      	ldr	r2, [pc, #252]	; (81007f0 <_ZL12MX_SAI1_Initv+0x140>)
 81006f4:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81006f6:	4b3c      	ldr	r3, [pc, #240]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006f8:	2200      	movs	r2, #0
 81006fa:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 81006fc:	4b3a      	ldr	r3, [pc, #232]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 81006fe:	2200      	movs	r2, #0
 8100700:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100702:	4b39      	ldr	r3, [pc, #228]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100704:	2200      	movs	r2, #0
 8100706:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100708:	4b37      	ldr	r3, [pc, #220]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 810070a:	2200      	movs	r2, #0
 810070c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 810070e:	4b36      	ldr	r3, [pc, #216]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100710:	2200      	movs	r2, #0
 8100712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100716:	4b34      	ldr	r3, [pc, #208]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100718:	2201      	movs	r2, #1
 810071a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 810071c:	4b32      	ldr	r3, [pc, #200]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 810071e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100722:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100724:	4b30      	ldr	r3, [pc, #192]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100726:	2208      	movs	r2, #8
 8100728:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 810072a:	4b2f      	ldr	r3, [pc, #188]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 810072c:	2201      	movs	r2, #1
 810072e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100730:	4b2d      	ldr	r3, [pc, #180]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100732:	2200      	movs	r2, #0
 8100734:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100736:	4b2c      	ldr	r3, [pc, #176]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100738:	2200      	movs	r2, #0
 810073a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 810073c:	4b2a      	ldr	r3, [pc, #168]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 810073e:	2200      	movs	r2, #0
 8100740:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100742:	4b29      	ldr	r3, [pc, #164]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100744:	2200      	movs	r2, #0
 8100746:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100748:	4b27      	ldr	r3, [pc, #156]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 810074a:	2200      	movs	r2, #0
 810074c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 810074e:	4b26      	ldr	r3, [pc, #152]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100750:	2201      	movs	r2, #1
 8100752:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100754:	4b24      	ldr	r3, [pc, #144]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 8100756:	2200      	movs	r2, #0
 8100758:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 810075a:	4823      	ldr	r0, [pc, #140]	; (81007e8 <_ZL12MX_SAI1_Initv+0x138>)
 810075c:	f005 fc88 	bl	8106070 <HAL_SAI_Init>
 8100760:	4603      	mov	r3, r0
 8100762:	2b00      	cmp	r3, #0
 8100764:	bf14      	ite	ne
 8100766:	2301      	movne	r3, #1
 8100768:	2300      	moveq	r3, #0
 810076a:	b2db      	uxtb	r3, r3
 810076c:	2b00      	cmp	r3, #0
 810076e:	d001      	beq.n	8100774 <_ZL12MX_SAI1_Initv+0xc4>
  {
    Error_Handler();
 8100770:	f000 fa00 	bl	8100b74 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100774:	4b1f      	ldr	r3, [pc, #124]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 8100776:	4a20      	ldr	r2, [pc, #128]	; (81007f8 <_ZL12MX_SAI1_Initv+0x148>)
 8100778:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 810077a:	4b1e      	ldr	r3, [pc, #120]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 810077c:	2204      	movs	r2, #4
 810077e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100780:	4b1c      	ldr	r3, [pc, #112]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 8100782:	2200      	movs	r2, #0
 8100784:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100786:	4b1b      	ldr	r3, [pc, #108]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 8100788:	2200      	movs	r2, #0
 810078a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 810078c:	4b19      	ldr	r3, [pc, #100]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 810078e:	2200      	movs	r2, #0
 8100790:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100792:	4b18      	ldr	r3, [pc, #96]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 8100794:	2200      	movs	r2, #0
 8100796:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100798:	4b16      	ldr	r3, [pc, #88]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 810079a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 810079e:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81007a0:	4b14      	ldr	r3, [pc, #80]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 81007a2:	2200      	movs	r2, #0
 81007a4:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 81007a6:	4b13      	ldr	r3, [pc, #76]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 81007a8:	2200      	movs	r2, #0
 81007aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 81007ac:	4b11      	ldr	r3, [pc, #68]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 81007ae:	2200      	movs	r2, #0
 81007b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 81007b2:	4b10      	ldr	r3, [pc, #64]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 81007b4:	2200      	movs	r2, #0
 81007b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 81007ba:	4b0e      	ldr	r3, [pc, #56]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 81007bc:	2201      	movs	r2, #1
 81007be:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81007c0:	4b0c      	ldr	r3, [pc, #48]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 81007c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 81007c6:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 81007c8:	480a      	ldr	r0, [pc, #40]	; (81007f4 <_ZL12MX_SAI1_Initv+0x144>)
 81007ca:	f005 fc51 	bl	8106070 <HAL_SAI_Init>
 81007ce:	4603      	mov	r3, r0
 81007d0:	2b00      	cmp	r3, #0
 81007d2:	bf14      	ite	ne
 81007d4:	2301      	movne	r3, #1
 81007d6:	2300      	moveq	r3, #0
 81007d8:	b2db      	uxtb	r3, r3
 81007da:	2b00      	cmp	r3, #0
 81007dc:	d001      	beq.n	81007e2 <_ZL12MX_SAI1_Initv+0x132>
  {
    Error_Handler();
 81007de:	f000 f9c9 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 81007e2:	bf00      	nop
 81007e4:	bd80      	pop	{r7, pc}
 81007e6:	bf00      	nop
 81007e8:	1000015c 	.word	0x1000015c
 81007ec:	40015804 	.word	0x40015804
 81007f0:	0002ee00 	.word	0x0002ee00
 81007f4:	100001f4 	.word	0x100001f4
 81007f8:	40015824 	.word	0x40015824

081007fc <_ZL16MX_SPDIFRX1_Initv>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 81007fc:	b580      	push	{r7, lr}
 81007fe:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100800:	4b1c      	ldr	r3, [pc, #112]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100802:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8100806:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100808:	4b1a      	ldr	r3, [pc, #104]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810080a:	2200      	movs	r2, #0
 810080c:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 810080e:	4b19      	ldr	r3, [pc, #100]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100810:	2200      	movs	r2, #0
 8100812:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100814:	4b17      	ldr	r3, [pc, #92]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100816:	2200      	movs	r2, #0
 8100818:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 810081a:	4b16      	ldr	r3, [pc, #88]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810081c:	2200      	movs	r2, #0
 810081e:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100820:	4b14      	ldr	r3, [pc, #80]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100822:	2200      	movs	r2, #0
 8100824:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100826:	4b13      	ldr	r3, [pc, #76]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100828:	2200      	movs	r2, #0
 810082a:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 810082c:	4b11      	ldr	r3, [pc, #68]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810082e:	2200      	movs	r2, #0
 8100830:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100832:	4b10      	ldr	r3, [pc, #64]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100834:	2200      	movs	r2, #0
 8100836:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100838:	4b0e      	ldr	r3, [pc, #56]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810083a:	2200      	movs	r2, #0
 810083c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 810083e:	4b0d      	ldr	r3, [pc, #52]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100840:	2200      	movs	r2, #0
 8100842:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100844:	4b0b      	ldr	r3, [pc, #44]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100846:	2200      	movs	r2, #0
 8100848:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 810084c:	4b09      	ldr	r3, [pc, #36]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 810084e:	2200      	movs	r2, #0
 8100850:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100854:	4807      	ldr	r0, [pc, #28]	; (8100874 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100856:	f005 feef 	bl	8106638 <HAL_SPDIFRX_Init>
 810085a:	4603      	mov	r3, r0
 810085c:	2b00      	cmp	r3, #0
 810085e:	bf14      	ite	ne
 8100860:	2301      	movne	r3, #1
 8100862:	2300      	moveq	r3, #0
 8100864:	b2db      	uxtb	r3, r3
 8100866:	2b00      	cmp	r3, #0
 8100868:	d001      	beq.n	810086e <_ZL16MX_SPDIFRX1_Initv+0x72>
  {
    Error_Handler();
 810086a:	f000 f983 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 810086e:	bf00      	nop
 8100870:	bd80      	pop	{r7, pc}
 8100872:	bf00      	nop
 8100874:	1000028c 	.word	0x1000028c

08100878 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100878:	b580      	push	{r7, lr}
 810087a:	b096      	sub	sp, #88	; 0x58
 810087c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810087e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100882:	2200      	movs	r2, #0
 8100884:	601a      	str	r2, [r3, #0]
 8100886:	605a      	str	r2, [r3, #4]
 8100888:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 810088a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810088e:	2200      	movs	r2, #0
 8100890:	601a      	str	r2, [r3, #0]
 8100892:	605a      	str	r2, [r3, #4]
 8100894:	609a      	str	r2, [r3, #8]
 8100896:	60da      	str	r2, [r3, #12]
 8100898:	611a      	str	r2, [r3, #16]
 810089a:	615a      	str	r2, [r3, #20]
 810089c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 810089e:	1d3b      	adds	r3, r7, #4
 81008a0:	222c      	movs	r2, #44	; 0x2c
 81008a2:	2100      	movs	r1, #0
 81008a4:	4618      	mov	r0, r3
 81008a6:	f006 ff25 	bl	81076f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 81008aa:	4b43      	ldr	r3, [pc, #268]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008ac:	4a43      	ldr	r2, [pc, #268]	; (81009bc <_ZL12MX_TIM8_Initv+0x144>)
 81008ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 81008b0:	4b41      	ldr	r3, [pc, #260]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008b2:	2200      	movs	r2, #0
 81008b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 81008b6:	4b40      	ldr	r3, [pc, #256]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008b8:	2200      	movs	r2, #0
 81008ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 81008bc:	4b3e      	ldr	r3, [pc, #248]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81008c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81008c4:	4b3c      	ldr	r3, [pc, #240]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008c6:	2200      	movs	r2, #0
 81008c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 81008ca:	4b3b      	ldr	r3, [pc, #236]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008cc:	2200      	movs	r2, #0
 81008ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81008d0:	4b39      	ldr	r3, [pc, #228]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008d2:	2200      	movs	r2, #0
 81008d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 81008d6:	4838      	ldr	r0, [pc, #224]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81008d8:	f005 ff73 	bl	81067c2 <HAL_TIM_OC_Init>
 81008dc:	4603      	mov	r3, r0
 81008de:	2b00      	cmp	r3, #0
 81008e0:	bf14      	ite	ne
 81008e2:	2301      	movne	r3, #1
 81008e4:	2300      	moveq	r3, #0
 81008e6:	b2db      	uxtb	r3, r3
 81008e8:	2b00      	cmp	r3, #0
 81008ea:	d001      	beq.n	81008f0 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 81008ec:	f000 f942 	bl	8100b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81008f0:	2300      	movs	r3, #0
 81008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81008f4:	2300      	movs	r3, #0
 81008f6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81008f8:	2300      	movs	r3, #0
 81008fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 81008fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100900:	4619      	mov	r1, r3
 8100902:	482d      	ldr	r0, [pc, #180]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 8100904:	f006 fdc6 	bl	8107494 <HAL_TIMEx_MasterConfigSynchronization>
 8100908:	4603      	mov	r3, r0
 810090a:	2b00      	cmp	r3, #0
 810090c:	bf14      	ite	ne
 810090e:	2301      	movne	r3, #1
 8100910:	2300      	moveq	r3, #0
 8100912:	b2db      	uxtb	r3, r3
 8100914:	2b00      	cmp	r3, #0
 8100916:	d001      	beq.n	810091c <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8100918:	f000 f92c 	bl	8100b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 810091c:	2300      	movs	r3, #0
 810091e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8100920:	2300      	movs	r3, #0
 8100922:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100924:	2300      	movs	r3, #0
 8100926:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100928:	2300      	movs	r3, #0
 810092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 810092c:	2300      	movs	r3, #0
 810092e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100930:	2300      	movs	r3, #0
 8100932:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100934:	2300      	movs	r3, #0
 8100936:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810093c:	2204      	movs	r2, #4
 810093e:	4619      	mov	r1, r3
 8100940:	481d      	ldr	r0, [pc, #116]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 8100942:	f005 fff7 	bl	8106934 <HAL_TIM_OC_ConfigChannel>
 8100946:	4603      	mov	r3, r0
 8100948:	2b00      	cmp	r3, #0
 810094a:	bf14      	ite	ne
 810094c:	2301      	movne	r3, #1
 810094e:	2300      	moveq	r3, #0
 8100950:	b2db      	uxtb	r3, r3
 8100952:	2b00      	cmp	r3, #0
 8100954:	d001      	beq.n	810095a <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 8100956:	f000 f90d 	bl	8100b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810095a:	2300      	movs	r3, #0
 810095c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 810095e:	2300      	movs	r3, #0
 8100960:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100962:	2300      	movs	r3, #0
 8100964:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100966:	2300      	movs	r3, #0
 8100968:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810096a:	2300      	movs	r3, #0
 810096c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 810096e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100972:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100974:	2300      	movs	r3, #0
 8100976:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100978:	2300      	movs	r3, #0
 810097a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 810097c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100980:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100982:	2300      	movs	r3, #0
 8100984:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100986:	2300      	movs	r3, #0
 8100988:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 810098a:	1d3b      	adds	r3, r7, #4
 810098c:	4619      	mov	r1, r3
 810098e:	480a      	ldr	r0, [pc, #40]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 8100990:	f006 fe0e 	bl	81075b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8100994:	4603      	mov	r3, r0
 8100996:	2b00      	cmp	r3, #0
 8100998:	bf14      	ite	ne
 810099a:	2301      	movne	r3, #1
 810099c:	2300      	moveq	r3, #0
 810099e:	b2db      	uxtb	r3, r3
 81009a0:	2b00      	cmp	r3, #0
 81009a2:	d001      	beq.n	81009a8 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 81009a4:	f000 f8e6 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 81009a8:	4803      	ldr	r0, [pc, #12]	; (81009b8 <_ZL12MX_TIM8_Initv+0x140>)
 81009aa:	f000 fb1f 	bl	8100fec <HAL_TIM_MspPostInit>

}
 81009ae:	bf00      	nop
 81009b0:	3758      	adds	r7, #88	; 0x58
 81009b2:	46bd      	mov	sp, r7
 81009b4:	bd80      	pop	{r7, pc}
 81009b6:	bf00      	nop
 81009b8:	100002dc 	.word	0x100002dc
 81009bc:	40010400 	.word	0x40010400

081009c0 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 81009c0:	b580      	push	{r7, lr}
 81009c2:	b084      	sub	sp, #16
 81009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 81009c6:	463b      	mov	r3, r7
 81009c8:	2200      	movs	r2, #0
 81009ca:	601a      	str	r2, [r3, #0]
 81009cc:	605a      	str	r2, [r3, #4]
 81009ce:	609a      	str	r2, [r3, #8]
 81009d0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 81009d2:	4b24      	ldr	r3, [pc, #144]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 81009d4:	4a24      	ldr	r2, [pc, #144]	; (8100a68 <_ZL13MX_TIM13_Initv+0xa8>)
 81009d6:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 81009d8:	4b22      	ldr	r3, [pc, #136]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 81009da:	2200      	movs	r2, #0
 81009dc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 81009de:	4b21      	ldr	r3, [pc, #132]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 81009e0:	2200      	movs	r2, #0
 81009e2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 81009e4:	4b1f      	ldr	r3, [pc, #124]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 81009e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 81009ea:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81009ec:	4b1d      	ldr	r3, [pc, #116]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 81009ee:	2200      	movs	r2, #0
 81009f0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81009f2:	4b1c      	ldr	r3, [pc, #112]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 81009f4:	2200      	movs	r2, #0
 81009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 81009f8:	481a      	ldr	r0, [pc, #104]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 81009fa:	f005 fe8b 	bl	8106714 <HAL_TIM_Base_Init>
 81009fe:	4603      	mov	r3, r0
 8100a00:	2b00      	cmp	r3, #0
 8100a02:	bf14      	ite	ne
 8100a04:	2301      	movne	r3, #1
 8100a06:	2300      	moveq	r3, #0
 8100a08:	b2db      	uxtb	r3, r3
 8100a0a:	2b00      	cmp	r3, #0
 8100a0c:	d001      	beq.n	8100a12 <_ZL13MX_TIM13_Initv+0x52>
  {
    Error_Handler();
 8100a0e:	f000 f8b1 	bl	8100b74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100a12:	4814      	ldr	r0, [pc, #80]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 8100a14:	f005 ff2c 	bl	8106870 <HAL_TIM_IC_Init>
 8100a18:	4603      	mov	r3, r0
 8100a1a:	2b00      	cmp	r3, #0
 8100a1c:	bf14      	ite	ne
 8100a1e:	2301      	movne	r3, #1
 8100a20:	2300      	moveq	r3, #0
 8100a22:	b2db      	uxtb	r3, r3
 8100a24:	2b00      	cmp	r3, #0
 8100a26:	d001      	beq.n	8100a2c <_ZL13MX_TIM13_Initv+0x6c>
  {
    Error_Handler();
 8100a28:	f000 f8a4 	bl	8100b74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100a2c:	2300      	movs	r3, #0
 8100a2e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100a30:	2301      	movs	r3, #1
 8100a32:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100a34:	2300      	movs	r3, #0
 8100a36:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100a38:	2300      	movs	r3, #0
 8100a3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100a3c:	463b      	mov	r3, r7
 8100a3e:	2200      	movs	r2, #0
 8100a40:	4619      	mov	r1, r3
 8100a42:	4808      	ldr	r0, [pc, #32]	; (8100a64 <_ZL13MX_TIM13_Initv+0xa4>)
 8100a44:	f005 fff0 	bl	8106a28 <HAL_TIM_IC_ConfigChannel>
 8100a48:	4603      	mov	r3, r0
 8100a4a:	2b00      	cmp	r3, #0
 8100a4c:	bf14      	ite	ne
 8100a4e:	2301      	movne	r3, #1
 8100a50:	2300      	moveq	r3, #0
 8100a52:	b2db      	uxtb	r3, r3
 8100a54:	2b00      	cmp	r3, #0
 8100a56:	d001      	beq.n	8100a5c <_ZL13MX_TIM13_Initv+0x9c>
  {
    Error_Handler();
 8100a58:	f000 f88c 	bl	8100b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100a5c:	bf00      	nop
 8100a5e:	3710      	adds	r7, #16
 8100a60:	46bd      	mov	sp, r7
 8100a62:	bd80      	pop	{r7, pc}
 8100a64:	10000328 	.word	0x10000328
 8100a68:	40001c00 	.word	0x40001c00

08100a6c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100a6c:	b480      	push	{r7}
 8100a6e:	b089      	sub	sp, #36	; 0x24
 8100a70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100a72:	4b3f      	ldr	r3, [pc, #252]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a78:	4a3d      	ldr	r2, [pc, #244]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100a7a:	f043 0302 	orr.w	r3, r3, #2
 8100a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100a82:	4b3b      	ldr	r3, [pc, #236]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a88:	f003 0302 	and.w	r3, r3, #2
 8100a8c:	61fb      	str	r3, [r7, #28]
 8100a8e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100a90:	4b37      	ldr	r3, [pc, #220]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100a96:	4a36      	ldr	r2, [pc, #216]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100a98:	f043 0308 	orr.w	r3, r3, #8
 8100a9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100aa0:	4b33      	ldr	r3, [pc, #204]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100aa6:	f003 0308 	and.w	r3, r3, #8
 8100aaa:	61bb      	str	r3, [r7, #24]
 8100aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100aae:	4b30      	ldr	r3, [pc, #192]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ab4:	4a2e      	ldr	r2, [pc, #184]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100ab6:	f043 0310 	orr.w	r3, r3, #16
 8100aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100abe:	4b2c      	ldr	r3, [pc, #176]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ac4:	f003 0310 	and.w	r3, r3, #16
 8100ac8:	617b      	str	r3, [r7, #20]
 8100aca:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100acc:	4b28      	ldr	r3, [pc, #160]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ad2:	4a27      	ldr	r2, [pc, #156]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100ad4:	f043 0304 	orr.w	r3, r3, #4
 8100ad8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100adc:	4b24      	ldr	r3, [pc, #144]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ae2:	f003 0304 	and.w	r3, r3, #4
 8100ae6:	613b      	str	r3, [r7, #16]
 8100ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100aea:	4b21      	ldr	r3, [pc, #132]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100af0:	4a1f      	ldr	r2, [pc, #124]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100afa:	4b1d      	ldr	r3, [pc, #116]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100b04:	60fb      	str	r3, [r7, #12]
 8100b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100b08:	4b19      	ldr	r3, [pc, #100]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b0e:	4a18      	ldr	r2, [pc, #96]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b10:	f043 0320 	orr.w	r3, r3, #32
 8100b14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b18:	4b15      	ldr	r3, [pc, #84]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b1e:	f003 0320 	and.w	r3, r3, #32
 8100b22:	60bb      	str	r3, [r7, #8]
 8100b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100b26:	4b12      	ldr	r3, [pc, #72]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b2c:	4a10      	ldr	r2, [pc, #64]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100b32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b36:	4b0e      	ldr	r3, [pc, #56]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100b40:	607b      	str	r3, [r7, #4]
 8100b42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100b44:	4b0a      	ldr	r3, [pc, #40]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b4a:	4a09      	ldr	r2, [pc, #36]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b4c:	f043 0301 	orr.w	r3, r3, #1
 8100b50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b54:	4b06      	ldr	r3, [pc, #24]	; (8100b70 <_ZL12MX_GPIO_Initv+0x104>)
 8100b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b5a:	f003 0301 	and.w	r3, r3, #1
 8100b5e:	603b      	str	r3, [r7, #0]
 8100b60:	683b      	ldr	r3, [r7, #0]

}
 8100b62:	bf00      	nop
 8100b64:	3724      	adds	r7, #36	; 0x24
 8100b66:	46bd      	mov	sp, r7
 8100b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b6c:	4770      	bx	lr
 8100b6e:	bf00      	nop
 8100b70:	58024400 	.word	0x58024400

08100b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100b74:	b480      	push	{r7}
 8100b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100b78:	b672      	cpsid	i
}
 8100b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100b7c:	e7fe      	b.n	8100b7c <Error_Handler+0x8>
	...

08100b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100b80:	b480      	push	{r7}
 8100b82:	b083      	sub	sp, #12
 8100b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100b86:	4b0a      	ldr	r3, [pc, #40]	; (8100bb0 <HAL_MspInit+0x30>)
 8100b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b8c:	4a08      	ldr	r2, [pc, #32]	; (8100bb0 <HAL_MspInit+0x30>)
 8100b8e:	f043 0302 	orr.w	r3, r3, #2
 8100b92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100b96:	4b06      	ldr	r3, [pc, #24]	; (8100bb0 <HAL_MspInit+0x30>)
 8100b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100b9c:	f003 0302 	and.w	r3, r3, #2
 8100ba0:	607b      	str	r3, [r7, #4]
 8100ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100ba4:	bf00      	nop
 8100ba6:	370c      	adds	r7, #12
 8100ba8:	46bd      	mov	sp, r7
 8100baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bae:	4770      	bx	lr
 8100bb0:	58024400 	.word	0x58024400

08100bb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8100bb4:	b580      	push	{r7, lr}
 8100bb6:	b08c      	sub	sp, #48	; 0x30
 8100bb8:	af00      	add	r7, sp, #0
 8100bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100bbc:	f107 031c 	add.w	r3, r7, #28
 8100bc0:	2200      	movs	r2, #0
 8100bc2:	601a      	str	r2, [r3, #0]
 8100bc4:	605a      	str	r2, [r3, #4]
 8100bc6:	609a      	str	r2, [r3, #8]
 8100bc8:	60da      	str	r2, [r3, #12]
 8100bca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8100bcc:	687b      	ldr	r3, [r7, #4]
 8100bce:	681b      	ldr	r3, [r3, #0]
 8100bd0:	4a3e      	ldr	r2, [pc, #248]	; (8100ccc <HAL_ADC_MspInit+0x118>)
 8100bd2:	4293      	cmp	r3, r2
 8100bd4:	d12a      	bne.n	8100c2c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100bd6:	4b3e      	ldr	r3, [pc, #248]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100bdc:	4a3c      	ldr	r2, [pc, #240]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100bde:	f043 0320 	orr.w	r3, r3, #32
 8100be2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100be6:	4b3a      	ldr	r3, [pc, #232]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100be8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100bec:	f003 0320 	and.w	r3, r3, #32
 8100bf0:	61bb      	str	r3, [r7, #24]
 8100bf2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100bf4:	4b36      	ldr	r3, [pc, #216]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bfa:	4a35      	ldr	r2, [pc, #212]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100bfc:	f043 0301 	orr.w	r3, r3, #1
 8100c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c04:	4b32      	ldr	r3, [pc, #200]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c0a:	f003 0301 	and.w	r3, r3, #1
 8100c0e:	617b      	str	r3, [r7, #20]
 8100c10:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100c12:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8100c16:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8100c1a:	f000 fbbd 	bl	8101398 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8100c1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8100c22:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8100c26:	f000 fbb7 	bl	8101398 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8100c2a:	e04a      	b.n	8100cc2 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 8100c2c:	687b      	ldr	r3, [r7, #4]
 8100c2e:	681b      	ldr	r3, [r3, #0]
 8100c30:	4a28      	ldr	r2, [pc, #160]	; (8100cd4 <HAL_ADC_MspInit+0x120>)
 8100c32:	4293      	cmp	r3, r2
 8100c34:	d145      	bne.n	8100cc2 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8100c36:	4b26      	ldr	r3, [pc, #152]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c3c:	4a24      	ldr	r2, [pc, #144]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8100c42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c46:	4b22      	ldr	r3, [pc, #136]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8100c50:	613b      	str	r3, [r7, #16]
 8100c52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100c54:	4b1e      	ldr	r3, [pc, #120]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c5a:	4a1d      	ldr	r2, [pc, #116]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c5c:	f043 0320 	orr.w	r3, r3, #32
 8100c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c64:	4b1a      	ldr	r3, [pc, #104]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c6a:	f003 0320 	and.w	r3, r3, #32
 8100c6e:	60fb      	str	r3, [r7, #12]
 8100c70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100c72:	4b17      	ldr	r3, [pc, #92]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c78:	4a15      	ldr	r2, [pc, #84]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c7a:	f043 0304 	orr.w	r3, r3, #4
 8100c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c82:	4b13      	ldr	r3, [pc, #76]	; (8100cd0 <HAL_ADC_MspInit+0x11c>)
 8100c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c88:	f003 0304 	and.w	r3, r3, #4
 8100c8c:	60bb      	str	r3, [r7, #8]
 8100c8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8100c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8100c96:	2303      	movs	r3, #3
 8100c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c9a:	2300      	movs	r3, #0
 8100c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8100c9e:	f107 031c 	add.w	r3, r7, #28
 8100ca2:	4619      	mov	r1, r3
 8100ca4:	480c      	ldr	r0, [pc, #48]	; (8100cd8 <HAL_ADC_MspInit+0x124>)
 8100ca6:	f001 fea1 	bl	81029ec <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8100caa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8100cae:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8100cb2:	f000 fb71 	bl	8101398 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8100cb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8100cba:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8100cbe:	f000 fb6b 	bl	8101398 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8100cc2:	bf00      	nop
 8100cc4:	3730      	adds	r7, #48	; 0x30
 8100cc6:	46bd      	mov	sp, r7
 8100cc8:	bd80      	pop	{r7, pc}
 8100cca:	bf00      	nop
 8100ccc:	40022000 	.word	0x40022000
 8100cd0:	58024400 	.word	0x58024400
 8100cd4:	58026000 	.word	0x58026000
 8100cd8:	58021400 	.word	0x58021400

08100cdc <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8100cdc:	b580      	push	{r7, lr}
 8100cde:	b0bc      	sub	sp, #240	; 0xf0
 8100ce0:	af00      	add	r7, sp, #0
 8100ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ce4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100ce8:	2200      	movs	r2, #0
 8100cea:	601a      	str	r2, [r3, #0]
 8100cec:	605a      	str	r2, [r3, #4]
 8100cee:	609a      	str	r2, [r3, #8]
 8100cf0:	60da      	str	r2, [r3, #12]
 8100cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cf4:	f107 0310 	add.w	r3, r7, #16
 8100cf8:	22c8      	movs	r2, #200	; 0xc8
 8100cfa:	2100      	movs	r1, #0
 8100cfc:	4618      	mov	r0, r3
 8100cfe:	f006 fcf9 	bl	81076f4 <memset>
  if(hcec->Instance==CEC)
 8100d02:	687b      	ldr	r3, [r7, #4]
 8100d04:	681b      	ldr	r3, [r3, #0]
 8100d06:	4a2b      	ldr	r2, [pc, #172]	; (8100db4 <HAL_CEC_MspInit+0xd8>)
 8100d08:	4293      	cmp	r3, r2
 8100d0a:	d14e      	bne.n	8100daa <HAL_CEC_MspInit+0xce>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8100d0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8100d10:	f04f 0300 	mov.w	r3, #0
 8100d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8100d18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d20:	f107 0310 	add.w	r3, r7, #16
 8100d24:	4618      	mov	r0, r3
 8100d26:	f002 fa6d 	bl	8103204 <HAL_RCCEx_PeriphCLKConfig>
 8100d2a:	4603      	mov	r3, r0
 8100d2c:	2b00      	cmp	r3, #0
 8100d2e:	d001      	beq.n	8100d34 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8100d30:	f7ff ff20 	bl	8100b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8100d34:	4b20      	ldr	r3, [pc, #128]	; (8100db8 <HAL_CEC_MspInit+0xdc>)
 8100d36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d3a:	4a1f      	ldr	r2, [pc, #124]	; (8100db8 <HAL_CEC_MspInit+0xdc>)
 8100d3c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8100d40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100d44:	4b1c      	ldr	r3, [pc, #112]	; (8100db8 <HAL_CEC_MspInit+0xdc>)
 8100d46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8100d4e:	60fb      	str	r3, [r7, #12]
 8100d50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100d52:	4b19      	ldr	r3, [pc, #100]	; (8100db8 <HAL_CEC_MspInit+0xdc>)
 8100d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d58:	4a17      	ldr	r2, [pc, #92]	; (8100db8 <HAL_CEC_MspInit+0xdc>)
 8100d5a:	f043 0302 	orr.w	r3, r3, #2
 8100d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d62:	4b15      	ldr	r3, [pc, #84]	; (8100db8 <HAL_CEC_MspInit+0xdc>)
 8100d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d68:	f003 0302 	and.w	r3, r3, #2
 8100d6c:	60bb      	str	r3, [r7, #8]
 8100d6e:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8100d70:	2340      	movs	r3, #64	; 0x40
 8100d72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100d76:	2312      	movs	r3, #18
 8100d78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d7c:	2300      	movs	r3, #0
 8100d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d82:	2300      	movs	r3, #0
 8100d84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8100d88:	2305      	movs	r3, #5
 8100d8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8100d8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100d92:	4619      	mov	r1, r3
 8100d94:	4809      	ldr	r0, [pc, #36]	; (8100dbc <HAL_CEC_MspInit+0xe0>)
 8100d96:	f001 fe29 	bl	81029ec <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	2100      	movs	r1, #0
 8100d9e:	205e      	movs	r0, #94	; 0x5e
 8100da0:	f001 fddb 	bl	810295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8100da4:	205e      	movs	r0, #94	; 0x5e
 8100da6:	f001 fdf2 	bl	810298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 8100daa:	bf00      	nop
 8100dac:	37f0      	adds	r7, #240	; 0xf0
 8100dae:	46bd      	mov	sp, r7
 8100db0:	bd80      	pop	{r7, pc}
 8100db2:	bf00      	nop
 8100db4:	40006c00 	.word	0x40006c00
 8100db8:	58024400 	.word	0x58024400
 8100dbc:	58020400 	.word	0x58020400

08100dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100dc0:	b580      	push	{r7, lr}
 8100dc2:	b0b4      	sub	sp, #208	; 0xd0
 8100dc4:	af00      	add	r7, sp, #0
 8100dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100dc8:	f107 0308 	add.w	r3, r7, #8
 8100dcc:	22c8      	movs	r2, #200	; 0xc8
 8100dce:	2100      	movs	r1, #0
 8100dd0:	4618      	mov	r0, r3
 8100dd2:	f006 fc8f 	bl	81076f4 <memset>
  if(hrtc->Instance==RTC)
 8100dd6:	687b      	ldr	r3, [r7, #4]
 8100dd8:	681b      	ldr	r3, [r3, #0]
 8100dda:	4a10      	ldr	r2, [pc, #64]	; (8100e1c <HAL_RTC_MspInit+0x5c>)
 8100ddc:	4293      	cmp	r3, r2
 8100dde:	d119      	bne.n	8100e14 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100de0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100de4:	f04f 0300 	mov.w	r3, #0
 8100de8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100dec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100df4:	f107 0308 	add.w	r3, r7, #8
 8100df8:	4618      	mov	r0, r3
 8100dfa:	f002 fa03 	bl	8103204 <HAL_RCCEx_PeriphCLKConfig>
 8100dfe:	4603      	mov	r3, r0
 8100e00:	2b00      	cmp	r3, #0
 8100e02:	d001      	beq.n	8100e08 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8100e04:	f7ff feb6 	bl	8100b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8100e08:	4b05      	ldr	r3, [pc, #20]	; (8100e20 <HAL_RTC_MspInit+0x60>)
 8100e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8100e0c:	4a04      	ldr	r2, [pc, #16]	; (8100e20 <HAL_RTC_MspInit+0x60>)
 8100e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100e12:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8100e14:	bf00      	nop
 8100e16:	37d0      	adds	r7, #208	; 0xd0
 8100e18:	46bd      	mov	sp, r7
 8100e1a:	bd80      	pop	{r7, pc}
 8100e1c:	58004000 	.word	0x58004000
 8100e20:	58024400 	.word	0x58024400

08100e24 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8100e24:	b580      	push	{r7, lr}
 8100e26:	b0bc      	sub	sp, #240	; 0xf0
 8100e28:	af00      	add	r7, sp, #0
 8100e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100e2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100e30:	2200      	movs	r2, #0
 8100e32:	601a      	str	r2, [r3, #0]
 8100e34:	605a      	str	r2, [r3, #4]
 8100e36:	609a      	str	r2, [r3, #8]
 8100e38:	60da      	str	r2, [r3, #12]
 8100e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100e3c:	f107 0310 	add.w	r3, r7, #16
 8100e40:	22c8      	movs	r2, #200	; 0xc8
 8100e42:	2100      	movs	r1, #0
 8100e44:	4618      	mov	r0, r3
 8100e46:	f006 fc55 	bl	81076f4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8100e4a:	687b      	ldr	r3, [r7, #4]
 8100e4c:	681b      	ldr	r3, [r3, #0]
 8100e4e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8100e52:	d156      	bne.n	8100f02 <HAL_SPDIFRX_MspInit+0xde>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8100e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8100e58:	f04f 0300 	mov.w	r3, #0
 8100e5c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8100e60:	2304      	movs	r3, #4
 8100e62:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8100e64:	2309      	movs	r3, #9
 8100e66:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8100e68:	2302      	movs	r3, #2
 8100e6a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100e6c:	2302      	movs	r3, #2
 8100e6e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8100e70:	2301      	movs	r3, #1
 8100e72:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8100e74:	23c0      	movs	r3, #192	; 0xc0
 8100e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8100e78:	2320      	movs	r3, #32
 8100e7a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8100e7c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100e80:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL2;
 8100e82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8100e86:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100e88:	f107 0310 	add.w	r3, r7, #16
 8100e8c:	4618      	mov	r0, r3
 8100e8e:	f002 f9b9 	bl	8103204 <HAL_RCCEx_PeriphCLKConfig>
 8100e92:	4603      	mov	r3, r0
 8100e94:	2b00      	cmp	r3, #0
 8100e96:	d001      	beq.n	8100e9c <HAL_SPDIFRX_MspInit+0x78>
    {
      Error_Handler();
 8100e98:	f7ff fe6c 	bl	8100b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8100e9c:	4b1b      	ldr	r3, [pc, #108]	; (8100f0c <HAL_SPDIFRX_MspInit+0xe8>)
 8100e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100ea2:	4a1a      	ldr	r2, [pc, #104]	; (8100f0c <HAL_SPDIFRX_MspInit+0xe8>)
 8100ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8100ea8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100eac:	4b17      	ldr	r3, [pc, #92]	; (8100f0c <HAL_SPDIFRX_MspInit+0xe8>)
 8100eae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8100eb6:	60fb      	str	r3, [r7, #12]
 8100eb8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100eba:	4b14      	ldr	r3, [pc, #80]	; (8100f0c <HAL_SPDIFRX_MspInit+0xe8>)
 8100ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ec0:	4a12      	ldr	r2, [pc, #72]	; (8100f0c <HAL_SPDIFRX_MspInit+0xe8>)
 8100ec2:	f043 0308 	orr.w	r3, r3, #8
 8100ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100eca:	4b10      	ldr	r3, [pc, #64]	; (8100f0c <HAL_SPDIFRX_MspInit+0xe8>)
 8100ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ed0:	f003 0308 	and.w	r3, r3, #8
 8100ed4:	60bb      	str	r3, [r7, #8]
 8100ed6:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8100ed8:	2380      	movs	r3, #128	; 0x80
 8100eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100ede:	2302      	movs	r3, #2
 8100ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100ee4:	2300      	movs	r3, #0
 8100ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100eea:	2300      	movs	r3, #0
 8100eec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8100ef0:	2309      	movs	r3, #9
 8100ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8100ef6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100efa:	4619      	mov	r1, r3
 8100efc:	4804      	ldr	r0, [pc, #16]	; (8100f10 <HAL_SPDIFRX_MspInit+0xec>)
 8100efe:	f001 fd75 	bl	81029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8100f02:	bf00      	nop
 8100f04:	37f0      	adds	r7, #240	; 0xf0
 8100f06:	46bd      	mov	sp, r7
 8100f08:	bd80      	pop	{r7, pc}
 8100f0a:	bf00      	nop
 8100f0c:	58024400 	.word	0x58024400
 8100f10:	58020c00 	.word	0x58020c00

08100f14 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8100f14:	b480      	push	{r7}
 8100f16:	b085      	sub	sp, #20
 8100f18:	af00      	add	r7, sp, #0
 8100f1a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8100f1c:	687b      	ldr	r3, [r7, #4]
 8100f1e:	681b      	ldr	r3, [r3, #0]
 8100f20:	4a0b      	ldr	r2, [pc, #44]	; (8100f50 <HAL_TIM_OC_MspInit+0x3c>)
 8100f22:	4293      	cmp	r3, r2
 8100f24:	d10e      	bne.n	8100f44 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8100f26:	4b0b      	ldr	r3, [pc, #44]	; (8100f54 <HAL_TIM_OC_MspInit+0x40>)
 8100f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f2c:	4a09      	ldr	r2, [pc, #36]	; (8100f54 <HAL_TIM_OC_MspInit+0x40>)
 8100f2e:	f043 0302 	orr.w	r3, r3, #2
 8100f32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8100f36:	4b07      	ldr	r3, [pc, #28]	; (8100f54 <HAL_TIM_OC_MspInit+0x40>)
 8100f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8100f3c:	f003 0302 	and.w	r3, r3, #2
 8100f40:	60fb      	str	r3, [r7, #12]
 8100f42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8100f44:	bf00      	nop
 8100f46:	3714      	adds	r7, #20
 8100f48:	46bd      	mov	sp, r7
 8100f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f4e:	4770      	bx	lr
 8100f50:	40010400 	.word	0x40010400
 8100f54:	58024400 	.word	0x58024400

08100f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8100f58:	b580      	push	{r7, lr}
 8100f5a:	b08a      	sub	sp, #40	; 0x28
 8100f5c:	af00      	add	r7, sp, #0
 8100f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f60:	f107 0314 	add.w	r3, r7, #20
 8100f64:	2200      	movs	r2, #0
 8100f66:	601a      	str	r2, [r3, #0]
 8100f68:	605a      	str	r2, [r3, #4]
 8100f6a:	609a      	str	r2, [r3, #8]
 8100f6c:	60da      	str	r2, [r3, #12]
 8100f6e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8100f70:	687b      	ldr	r3, [r7, #4]
 8100f72:	681b      	ldr	r3, [r3, #0]
 8100f74:	4a1a      	ldr	r2, [pc, #104]	; (8100fe0 <HAL_TIM_Base_MspInit+0x88>)
 8100f76:	4293      	cmp	r3, r2
 8100f78:	d12e      	bne.n	8100fd8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8100f7a:	4b1a      	ldr	r3, [pc, #104]	; (8100fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8100f7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f80:	4a18      	ldr	r2, [pc, #96]	; (8100fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8100f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8100f86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f8a:	4b16      	ldr	r3, [pc, #88]	; (8100fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8100f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100f94:	613b      	str	r3, [r7, #16]
 8100f96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100f98:	4b12      	ldr	r3, [pc, #72]	; (8100fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8100f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f9e:	4a11      	ldr	r2, [pc, #68]	; (8100fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8100fa0:	f043 0320 	orr.w	r3, r3, #32
 8100fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fa8:	4b0e      	ldr	r3, [pc, #56]	; (8100fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8100faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fae:	f003 0320 	and.w	r3, r3, #32
 8100fb2:	60fb      	str	r3, [r7, #12]
 8100fb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 8100fb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8100fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fbc:	2302      	movs	r3, #2
 8100fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fc0:	2300      	movs	r3, #0
 8100fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fc4:	2300      	movs	r3, #0
 8100fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8100fc8:	2309      	movs	r3, #9
 8100fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8100fcc:	f107 0314 	add.w	r3, r7, #20
 8100fd0:	4619      	mov	r1, r3
 8100fd2:	4805      	ldr	r0, [pc, #20]	; (8100fe8 <HAL_TIM_Base_MspInit+0x90>)
 8100fd4:	f001 fd0a 	bl	81029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8100fd8:	bf00      	nop
 8100fda:	3728      	adds	r7, #40	; 0x28
 8100fdc:	46bd      	mov	sp, r7
 8100fde:	bd80      	pop	{r7, pc}
 8100fe0:	40001c00 	.word	0x40001c00
 8100fe4:	58024400 	.word	0x58024400
 8100fe8:	58021400 	.word	0x58021400

08100fec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8100fec:	b580      	push	{r7, lr}
 8100fee:	b088      	sub	sp, #32
 8100ff0:	af00      	add	r7, sp, #0
 8100ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ff4:	f107 030c 	add.w	r3, r7, #12
 8100ff8:	2200      	movs	r2, #0
 8100ffa:	601a      	str	r2, [r3, #0]
 8100ffc:	605a      	str	r2, [r3, #4]
 8100ffe:	609a      	str	r2, [r3, #8]
 8101000:	60da      	str	r2, [r3, #12]
 8101002:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101004:	687b      	ldr	r3, [r7, #4]
 8101006:	681b      	ldr	r3, [r3, #0]
 8101008:	4a12      	ldr	r2, [pc, #72]	; (8101054 <HAL_TIM_MspPostInit+0x68>)
 810100a:	4293      	cmp	r3, r2
 810100c:	d11e      	bne.n	810104c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810100e:	4b12      	ldr	r3, [pc, #72]	; (8101058 <HAL_TIM_MspPostInit+0x6c>)
 8101010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101014:	4a10      	ldr	r2, [pc, #64]	; (8101058 <HAL_TIM_MspPostInit+0x6c>)
 8101016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810101a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810101e:	4b0e      	ldr	r3, [pc, #56]	; (8101058 <HAL_TIM_MspPostInit+0x6c>)
 8101020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101028:	60bb      	str	r3, [r7, #8]
 810102a:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 810102c:	23c0      	movs	r3, #192	; 0xc0
 810102e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101030:	2302      	movs	r3, #2
 8101032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101034:	2300      	movs	r3, #0
 8101036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101038:	2300      	movs	r3, #0
 810103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 810103c:	2303      	movs	r3, #3
 810103e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8101040:	f107 030c 	add.w	r3, r7, #12
 8101044:	4619      	mov	r1, r3
 8101046:	4805      	ldr	r0, [pc, #20]	; (810105c <HAL_TIM_MspPostInit+0x70>)
 8101048:	f001 fcd0 	bl	81029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 810104c:	bf00      	nop
 810104e:	3720      	adds	r7, #32
 8101050:	46bd      	mov	sp, r7
 8101052:	bd80      	pop	{r7, pc}
 8101054:	40010400 	.word	0x40010400
 8101058:	58024400 	.word	0x58024400
 810105c:	58022400 	.word	0x58022400

08101060 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8101060:	b580      	push	{r7, lr}
 8101062:	b08a      	sub	sp, #40	; 0x28
 8101064:	af00      	add	r7, sp, #0
 8101066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101068:	687b      	ldr	r3, [r7, #4]
 810106a:	681b      	ldr	r3, [r3, #0]
 810106c:	4a35      	ldr	r2, [pc, #212]	; (8101144 <HAL_SAI_MspInit+0xe4>)
 810106e:	4293      	cmp	r3, r2
 8101070:	d137      	bne.n	81010e2 <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8101072:	4b35      	ldr	r3, [pc, #212]	; (8101148 <HAL_SAI_MspInit+0xe8>)
 8101074:	681b      	ldr	r3, [r3, #0]
 8101076:	2b00      	cmp	r3, #0
 8101078:	d10e      	bne.n	8101098 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 810107a:	4b34      	ldr	r3, [pc, #208]	; (810114c <HAL_SAI_MspInit+0xec>)
 810107c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101080:	4a32      	ldr	r2, [pc, #200]	; (810114c <HAL_SAI_MspInit+0xec>)
 8101082:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101086:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 810108a:	4b30      	ldr	r3, [pc, #192]	; (810114c <HAL_SAI_MspInit+0xec>)
 810108c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101094:	613b      	str	r3, [r7, #16]
 8101096:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8101098:	4b2b      	ldr	r3, [pc, #172]	; (8101148 <HAL_SAI_MspInit+0xe8>)
 810109a:	681b      	ldr	r3, [r3, #0]
 810109c:	3301      	adds	r3, #1
 810109e:	4a2a      	ldr	r2, [pc, #168]	; (8101148 <HAL_SAI_MspInit+0xe8>)
 81010a0:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 81010a2:	2370      	movs	r3, #112	; 0x70
 81010a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010a6:	2302      	movs	r3, #2
 81010a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010aa:	2300      	movs	r3, #0
 81010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010ae:	2300      	movs	r3, #0
 81010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81010b2:	2306      	movs	r3, #6
 81010b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81010b6:	f107 0314 	add.w	r3, r7, #20
 81010ba:	4619      	mov	r1, r3
 81010bc:	4824      	ldr	r0, [pc, #144]	; (8101150 <HAL_SAI_MspInit+0xf0>)
 81010be:	f001 fc95 	bl	81029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 81010c2:	2380      	movs	r3, #128	; 0x80
 81010c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010c6:	2302      	movs	r3, #2
 81010c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010ca:	2300      	movs	r3, #0
 81010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010ce:	2300      	movs	r3, #0
 81010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81010d2:	2306      	movs	r3, #6
 81010d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81010d6:	f107 0314 	add.w	r3, r7, #20
 81010da:	4619      	mov	r1, r3
 81010dc:	481d      	ldr	r0, [pc, #116]	; (8101154 <HAL_SAI_MspInit+0xf4>)
 81010de:	f001 fc85 	bl	81029ec <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81010e2:	687b      	ldr	r3, [r7, #4]
 81010e4:	681b      	ldr	r3, [r3, #0]
 81010e6:	4a1c      	ldr	r2, [pc, #112]	; (8101158 <HAL_SAI_MspInit+0xf8>)
 81010e8:	4293      	cmp	r3, r2
 81010ea:	d127      	bne.n	810113c <HAL_SAI_MspInit+0xdc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 81010ec:	4b16      	ldr	r3, [pc, #88]	; (8101148 <HAL_SAI_MspInit+0xe8>)
 81010ee:	681b      	ldr	r3, [r3, #0]
 81010f0:	2b00      	cmp	r3, #0
 81010f2:	d10e      	bne.n	8101112 <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81010f4:	4b15      	ldr	r3, [pc, #84]	; (810114c <HAL_SAI_MspInit+0xec>)
 81010f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81010fa:	4a14      	ldr	r2, [pc, #80]	; (810114c <HAL_SAI_MspInit+0xec>)
 81010fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101100:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101104:	4b11      	ldr	r3, [pc, #68]	; (810114c <HAL_SAI_MspInit+0xec>)
 8101106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810110a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810110e:	60fb      	str	r3, [r7, #12]
 8101110:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8101112:	4b0d      	ldr	r3, [pc, #52]	; (8101148 <HAL_SAI_MspInit+0xe8>)
 8101114:	681b      	ldr	r3, [r3, #0]
 8101116:	3301      	adds	r3, #1
 8101118:	4a0b      	ldr	r2, [pc, #44]	; (8101148 <HAL_SAI_MspInit+0xe8>)
 810111a:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 810111c:	2308      	movs	r3, #8
 810111e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101120:	2302      	movs	r3, #2
 8101122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101124:	2300      	movs	r3, #0
 8101126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101128:	2300      	movs	r3, #0
 810112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810112c:	2306      	movs	r3, #6
 810112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8101130:	f107 0314 	add.w	r3, r7, #20
 8101134:	4619      	mov	r1, r3
 8101136:	4806      	ldr	r0, [pc, #24]	; (8101150 <HAL_SAI_MspInit+0xf0>)
 8101138:	f001 fc58 	bl	81029ec <HAL_GPIO_Init>

    }
}
 810113c:	bf00      	nop
 810113e:	3728      	adds	r7, #40	; 0x28
 8101140:	46bd      	mov	sp, r7
 8101142:	bd80      	pop	{r7, pc}
 8101144:	40015804 	.word	0x40015804
 8101148:	10000384 	.word	0x10000384
 810114c:	58024400 	.word	0x58024400
 8101150:	58021000 	.word	0x58021000
 8101154:	58021800 	.word	0x58021800
 8101158:	40015824 	.word	0x40015824

0810115c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810115c:	b480      	push	{r7}
 810115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101160:	e7fe      	b.n	8101160 <NMI_Handler+0x4>

08101162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101162:	b480      	push	{r7}
 8101164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101166:	e7fe      	b.n	8101166 <HardFault_Handler+0x4>

08101168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101168:	b480      	push	{r7}
 810116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810116c:	e7fe      	b.n	810116c <MemManage_Handler+0x4>

0810116e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810116e:	b480      	push	{r7}
 8101170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101172:	e7fe      	b.n	8101172 <BusFault_Handler+0x4>

08101174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101174:	b480      	push	{r7}
 8101176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101178:	e7fe      	b.n	8101178 <UsageFault_Handler+0x4>

0810117a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810117a:	b480      	push	{r7}
 810117c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810117e:	bf00      	nop
 8101180:	46bd      	mov	sp, r7
 8101182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101186:	4770      	bx	lr

08101188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101188:	b480      	push	{r7}
 810118a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810118c:	bf00      	nop
 810118e:	46bd      	mov	sp, r7
 8101190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101194:	4770      	bx	lr

08101196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101196:	b480      	push	{r7}
 8101198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810119a:	bf00      	nop
 810119c:	46bd      	mov	sp, r7
 810119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011a2:	4770      	bx	lr

081011a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81011a4:	b580      	push	{r7, lr}
 81011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81011a8:	f000 f8ca 	bl	8101340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81011ac:	bf00      	nop
 81011ae:	bd80      	pop	{r7, pc}

081011b0 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 81011b0:	b580      	push	{r7, lr}
 81011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 81011b4:	4802      	ldr	r0, [pc, #8]	; (81011c0 <CEC_IRQHandler+0x10>)
 81011b6:	f001 f9f9 	bl	81025ac <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 81011ba:	bf00      	nop
 81011bc:	bd80      	pop	{r7, pc}
 81011be:	bf00      	nop
 81011c0:	100000f4 	.word	0x100000f4

081011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 81011fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81011c8:	f7ff f886 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81011cc:	480c      	ldr	r0, [pc, #48]	; (8101200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81011ce:	490d      	ldr	r1, [pc, #52]	; (8101204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81011d0:	4a0d      	ldr	r2, [pc, #52]	; (8101208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81011d4:	e002      	b.n	81011dc <LoopCopyDataInit>

081011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81011da:	3304      	adds	r3, #4

081011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81011e0:	d3f9      	bcc.n	81011d6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81011e2:	4a0a      	ldr	r2, [pc, #40]	; (810120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81011e4:	4c0a      	ldr	r4, [pc, #40]	; (8101210 <LoopFillZerobss+0x22>)
  movs r3, #0
 81011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 81011e8:	e001      	b.n	81011ee <LoopFillZerobss>

081011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81011ec:	3204      	adds	r2, #4

081011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81011f0:	d3fb      	bcc.n	81011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81011f2:	f006 fa5b 	bl	81076ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81011f6:	f7ff f887 	bl	8100308 <main>
  bx  lr
 81011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81011fc:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101200:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101204:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8101208:	08107734 	.word	0x08107734
  ldr r2, =_sbss
 810120c:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101210:	1000038c 	.word	0x1000038c

08101214 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101214:	e7fe      	b.n	8101214 <ADC3_IRQHandler>
	...

08101218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101218:	b580      	push	{r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810121e:	4b28      	ldr	r3, [pc, #160]	; (81012c0 <HAL_Init+0xa8>)
 8101220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101224:	4a26      	ldr	r2, [pc, #152]	; (81012c0 <HAL_Init+0xa8>)
 8101226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810122a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810122e:	4b24      	ldr	r3, [pc, #144]	; (81012c0 <HAL_Init+0xa8>)
 8101230:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101238:	603b      	str	r3, [r7, #0]
 810123a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810123c:	4b21      	ldr	r3, [pc, #132]	; (81012c4 <HAL_Init+0xac>)
 810123e:	681b      	ldr	r3, [r3, #0]
 8101240:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101244:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101248:	4a1e      	ldr	r2, [pc, #120]	; (81012c4 <HAL_Init+0xac>)
 810124a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810124e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101250:	4b1c      	ldr	r3, [pc, #112]	; (81012c4 <HAL_Init+0xac>)
 8101252:	681b      	ldr	r3, [r3, #0]
 8101254:	4a1b      	ldr	r2, [pc, #108]	; (81012c4 <HAL_Init+0xac>)
 8101256:	f043 0301 	orr.w	r3, r3, #1
 810125a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810125c:	2003      	movs	r0, #3
 810125e:	f001 fb71 	bl	8102944 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101262:	f001 fe0d 	bl	8102e80 <HAL_RCC_GetSysClockFreq>
 8101266:	4602      	mov	r2, r0
 8101268:	4b15      	ldr	r3, [pc, #84]	; (81012c0 <HAL_Init+0xa8>)
 810126a:	699b      	ldr	r3, [r3, #24]
 810126c:	0a1b      	lsrs	r3, r3, #8
 810126e:	f003 030f 	and.w	r3, r3, #15
 8101272:	4915      	ldr	r1, [pc, #84]	; (81012c8 <HAL_Init+0xb0>)
 8101274:	5ccb      	ldrb	r3, [r1, r3]
 8101276:	f003 031f 	and.w	r3, r3, #31
 810127a:	fa22 f303 	lsr.w	r3, r2, r3
 810127e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101280:	4b0f      	ldr	r3, [pc, #60]	; (81012c0 <HAL_Init+0xa8>)
 8101282:	699b      	ldr	r3, [r3, #24]
 8101284:	f003 030f 	and.w	r3, r3, #15
 8101288:	4a0f      	ldr	r2, [pc, #60]	; (81012c8 <HAL_Init+0xb0>)
 810128a:	5cd3      	ldrb	r3, [r2, r3]
 810128c:	f003 031f 	and.w	r3, r3, #31
 8101290:	687a      	ldr	r2, [r7, #4]
 8101292:	fa22 f303 	lsr.w	r3, r2, r3
 8101296:	4a0d      	ldr	r2, [pc, #52]	; (81012cc <HAL_Init+0xb4>)
 8101298:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810129a:	4b0c      	ldr	r3, [pc, #48]	; (81012cc <HAL_Init+0xb4>)
 810129c:	681b      	ldr	r3, [r3, #0]
 810129e:	4a0c      	ldr	r2, [pc, #48]	; (81012d0 <HAL_Init+0xb8>)
 81012a0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81012a2:	2000      	movs	r0, #0
 81012a4:	f000 f816 	bl	81012d4 <HAL_InitTick>
 81012a8:	4603      	mov	r3, r0
 81012aa:	2b00      	cmp	r3, #0
 81012ac:	d001      	beq.n	81012b2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81012ae:	2301      	movs	r3, #1
 81012b0:	e002      	b.n	81012b8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81012b2:	f7ff fc65 	bl	8100b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81012b6:	2300      	movs	r3, #0
}
 81012b8:	4618      	mov	r0, r3
 81012ba:	3708      	adds	r7, #8
 81012bc:	46bd      	mov	sp, r7
 81012be:	bd80      	pop	{r7, pc}
 81012c0:	58024400 	.word	0x58024400
 81012c4:	40024400 	.word	0x40024400
 81012c8:	0810771c 	.word	0x0810771c
 81012cc:	10000004 	.word	0x10000004
 81012d0:	10000000 	.word	0x10000000

081012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81012d4:	b580      	push	{r7, lr}
 81012d6:	b082      	sub	sp, #8
 81012d8:	af00      	add	r7, sp, #0
 81012da:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81012dc:	4b15      	ldr	r3, [pc, #84]	; (8101334 <HAL_InitTick+0x60>)
 81012de:	781b      	ldrb	r3, [r3, #0]
 81012e0:	2b00      	cmp	r3, #0
 81012e2:	d101      	bne.n	81012e8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81012e4:	2301      	movs	r3, #1
 81012e6:	e021      	b.n	810132c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81012e8:	4b13      	ldr	r3, [pc, #76]	; (8101338 <HAL_InitTick+0x64>)
 81012ea:	681a      	ldr	r2, [r3, #0]
 81012ec:	4b11      	ldr	r3, [pc, #68]	; (8101334 <HAL_InitTick+0x60>)
 81012ee:	781b      	ldrb	r3, [r3, #0]
 81012f0:	4619      	mov	r1, r3
 81012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 81012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 81012fe:	4618      	mov	r0, r3
 8101300:	f001 fb53 	bl	81029aa <HAL_SYSTICK_Config>
 8101304:	4603      	mov	r3, r0
 8101306:	2b00      	cmp	r3, #0
 8101308:	d001      	beq.n	810130e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810130a:	2301      	movs	r3, #1
 810130c:	e00e      	b.n	810132c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810130e:	687b      	ldr	r3, [r7, #4]
 8101310:	2b0f      	cmp	r3, #15
 8101312:	d80a      	bhi.n	810132a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101314:	2200      	movs	r2, #0
 8101316:	6879      	ldr	r1, [r7, #4]
 8101318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810131c:	f001 fb1d 	bl	810295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101320:	4a06      	ldr	r2, [pc, #24]	; (810133c <HAL_InitTick+0x68>)
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101326:	2300      	movs	r3, #0
 8101328:	e000      	b.n	810132c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810132a:	2301      	movs	r3, #1
}
 810132c:	4618      	mov	r0, r3
 810132e:	3708      	adds	r7, #8
 8101330:	46bd      	mov	sp, r7
 8101332:	bd80      	pop	{r7, pc}
 8101334:	1000000c 	.word	0x1000000c
 8101338:	10000000 	.word	0x10000000
 810133c:	10000008 	.word	0x10000008

08101340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101340:	b480      	push	{r7}
 8101342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101344:	4b06      	ldr	r3, [pc, #24]	; (8101360 <HAL_IncTick+0x20>)
 8101346:	781b      	ldrb	r3, [r3, #0]
 8101348:	461a      	mov	r2, r3
 810134a:	4b06      	ldr	r3, [pc, #24]	; (8101364 <HAL_IncTick+0x24>)
 810134c:	681b      	ldr	r3, [r3, #0]
 810134e:	4413      	add	r3, r2
 8101350:	4a04      	ldr	r2, [pc, #16]	; (8101364 <HAL_IncTick+0x24>)
 8101352:	6013      	str	r3, [r2, #0]
}
 8101354:	bf00      	nop
 8101356:	46bd      	mov	sp, r7
 8101358:	f85d 7b04 	ldr.w	r7, [sp], #4
 810135c:	4770      	bx	lr
 810135e:	bf00      	nop
 8101360:	1000000c 	.word	0x1000000c
 8101364:	10000388 	.word	0x10000388

08101368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101368:	b480      	push	{r7}
 810136a:	af00      	add	r7, sp, #0
  return uwTick;
 810136c:	4b03      	ldr	r3, [pc, #12]	; (810137c <HAL_GetTick+0x14>)
 810136e:	681b      	ldr	r3, [r3, #0]
}
 8101370:	4618      	mov	r0, r3
 8101372:	46bd      	mov	sp, r7
 8101374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101378:	4770      	bx	lr
 810137a:	bf00      	nop
 810137c:	10000388 	.word	0x10000388

08101380 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101380:	b480      	push	{r7}
 8101382:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101384:	4b03      	ldr	r3, [pc, #12]	; (8101394 <HAL_GetREVID+0x14>)
 8101386:	681b      	ldr	r3, [r3, #0]
 8101388:	0c1b      	lsrs	r3, r3, #16
}
 810138a:	4618      	mov	r0, r3
 810138c:	46bd      	mov	sp, r7
 810138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101392:	4770      	bx	lr
 8101394:	5c001000 	.word	0x5c001000

08101398 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8101398:	b480      	push	{r7}
 810139a:	b083      	sub	sp, #12
 810139c:	af00      	add	r7, sp, #0
 810139e:	6078      	str	r0, [r7, #4]
 81013a0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 81013a2:	4b07      	ldr	r3, [pc, #28]	; (81013c0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 81013a4:	685a      	ldr	r2, [r3, #4]
 81013a6:	687b      	ldr	r3, [r7, #4]
 81013a8:	43db      	mvns	r3, r3
 81013aa:	401a      	ands	r2, r3
 81013ac:	4904      	ldr	r1, [pc, #16]	; (81013c0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 81013ae:	683b      	ldr	r3, [r7, #0]
 81013b0:	4313      	orrs	r3, r2
 81013b2:	604b      	str	r3, [r1, #4]
}
 81013b4:	bf00      	nop
 81013b6:	370c      	adds	r7, #12
 81013b8:	46bd      	mov	sp, r7
 81013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013be:	4770      	bx	lr
 81013c0:	58000400 	.word	0x58000400

081013c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81013c4:	b480      	push	{r7}
 81013c6:	b083      	sub	sp, #12
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	6078      	str	r0, [r7, #4]
 81013cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	689b      	ldr	r3, [r3, #8]
 81013d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81013d6:	683b      	ldr	r3, [r7, #0]
 81013d8:	431a      	orrs	r2, r3
 81013da:	687b      	ldr	r3, [r7, #4]
 81013dc:	609a      	str	r2, [r3, #8]
}
 81013de:	bf00      	nop
 81013e0:	370c      	adds	r7, #12
 81013e2:	46bd      	mov	sp, r7
 81013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e8:	4770      	bx	lr

081013ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81013ea:	b480      	push	{r7}
 81013ec:	b083      	sub	sp, #12
 81013ee:	af00      	add	r7, sp, #0
 81013f0:	6078      	str	r0, [r7, #4]
 81013f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81013f4:	687b      	ldr	r3, [r7, #4]
 81013f6:	689b      	ldr	r3, [r3, #8]
 81013f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81013fc:	683b      	ldr	r3, [r7, #0]
 81013fe:	431a      	orrs	r2, r3
 8101400:	687b      	ldr	r3, [r7, #4]
 8101402:	609a      	str	r2, [r3, #8]
}
 8101404:	bf00      	nop
 8101406:	370c      	adds	r7, #12
 8101408:	46bd      	mov	sp, r7
 810140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140e:	4770      	bx	lr

08101410 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101410:	b480      	push	{r7}
 8101412:	b083      	sub	sp, #12
 8101414:	af00      	add	r7, sp, #0
 8101416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	689b      	ldr	r3, [r3, #8]
 810141c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8101420:	4618      	mov	r0, r3
 8101422:	370c      	adds	r7, #12
 8101424:	46bd      	mov	sp, r7
 8101426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810142a:	4770      	bx	lr

0810142c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 810142c:	b480      	push	{r7}
 810142e:	b087      	sub	sp, #28
 8101430:	af00      	add	r7, sp, #0
 8101432:	60f8      	str	r0, [r7, #12]
 8101434:	60b9      	str	r1, [r7, #8]
 8101436:	607a      	str	r2, [r7, #4]
 8101438:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810143a:	68fb      	ldr	r3, [r7, #12]
 810143c:	3360      	adds	r3, #96	; 0x60
 810143e:	461a      	mov	r2, r3
 8101440:	68bb      	ldr	r3, [r7, #8]
 8101442:	009b      	lsls	r3, r3, #2
 8101444:	4413      	add	r3, r2
 8101446:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101448:	697b      	ldr	r3, [r7, #20]
 810144a:	681b      	ldr	r3, [r3, #0]
 810144c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101450:	687b      	ldr	r3, [r7, #4]
 8101452:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8101456:	683b      	ldr	r3, [r7, #0]
 8101458:	430b      	orrs	r3, r1
 810145a:	431a      	orrs	r2, r3
 810145c:	697b      	ldr	r3, [r7, #20]
 810145e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101460:	bf00      	nop
 8101462:	371c      	adds	r7, #28
 8101464:	46bd      	mov	sp, r7
 8101466:	f85d 7b04 	ldr.w	r7, [sp], #4
 810146a:	4770      	bx	lr

0810146c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 810146c:	b480      	push	{r7}
 810146e:	b085      	sub	sp, #20
 8101470:	af00      	add	r7, sp, #0
 8101472:	60f8      	str	r0, [r7, #12]
 8101474:	60b9      	str	r1, [r7, #8]
 8101476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101478:	68fb      	ldr	r3, [r7, #12]
 810147a:	691b      	ldr	r3, [r3, #16]
 810147c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101480:	68bb      	ldr	r3, [r7, #8]
 8101482:	f003 031f 	and.w	r3, r3, #31
 8101486:	6879      	ldr	r1, [r7, #4]
 8101488:	fa01 f303 	lsl.w	r3, r1, r3
 810148c:	431a      	orrs	r2, r3
 810148e:	68fb      	ldr	r3, [r7, #12]
 8101490:	611a      	str	r2, [r3, #16]
}
 8101492:	bf00      	nop
 8101494:	3714      	adds	r7, #20
 8101496:	46bd      	mov	sp, r7
 8101498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810149c:	4770      	bx	lr

0810149e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 810149e:	b480      	push	{r7}
 81014a0:	b087      	sub	sp, #28
 81014a2:	af00      	add	r7, sp, #0
 81014a4:	60f8      	str	r0, [r7, #12]
 81014a6:	60b9      	str	r1, [r7, #8]
 81014a8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81014aa:	68fb      	ldr	r3, [r7, #12]
 81014ac:	3360      	adds	r3, #96	; 0x60
 81014ae:	461a      	mov	r2, r3
 81014b0:	68bb      	ldr	r3, [r7, #8]
 81014b2:	009b      	lsls	r3, r3, #2
 81014b4:	4413      	add	r3, r2
 81014b6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81014b8:	697b      	ldr	r3, [r7, #20]
 81014ba:	681b      	ldr	r3, [r3, #0]
 81014bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	431a      	orrs	r2, r3
 81014c4:	697b      	ldr	r3, [r7, #20]
 81014c6:	601a      	str	r2, [r3, #0]
  }
}
 81014c8:	bf00      	nop
 81014ca:	371c      	adds	r7, #28
 81014cc:	46bd      	mov	sp, r7
 81014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014d2:	4770      	bx	lr

081014d4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81014d4:	b480      	push	{r7}
 81014d6:	b087      	sub	sp, #28
 81014d8:	af00      	add	r7, sp, #0
 81014da:	60f8      	str	r0, [r7, #12]
 81014dc:	60b9      	str	r1, [r7, #8]
 81014de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81014e0:	68fb      	ldr	r3, [r7, #12]
 81014e2:	3330      	adds	r3, #48	; 0x30
 81014e4:	461a      	mov	r2, r3
 81014e6:	68bb      	ldr	r3, [r7, #8]
 81014e8:	0a1b      	lsrs	r3, r3, #8
 81014ea:	009b      	lsls	r3, r3, #2
 81014ec:	f003 030c 	and.w	r3, r3, #12
 81014f0:	4413      	add	r3, r2
 81014f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81014f4:	697b      	ldr	r3, [r7, #20]
 81014f6:	681a      	ldr	r2, [r3, #0]
 81014f8:	68bb      	ldr	r3, [r7, #8]
 81014fa:	f003 031f 	and.w	r3, r3, #31
 81014fe:	211f      	movs	r1, #31
 8101500:	fa01 f303 	lsl.w	r3, r1, r3
 8101504:	43db      	mvns	r3, r3
 8101506:	401a      	ands	r2, r3
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	0e9b      	lsrs	r3, r3, #26
 810150c:	f003 011f 	and.w	r1, r3, #31
 8101510:	68bb      	ldr	r3, [r7, #8]
 8101512:	f003 031f 	and.w	r3, r3, #31
 8101516:	fa01 f303 	lsl.w	r3, r1, r3
 810151a:	431a      	orrs	r2, r3
 810151c:	697b      	ldr	r3, [r7, #20]
 810151e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8101520:	bf00      	nop
 8101522:	371c      	adds	r7, #28
 8101524:	46bd      	mov	sp, r7
 8101526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810152a:	4770      	bx	lr

0810152c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 810152c:	b480      	push	{r7}
 810152e:	b087      	sub	sp, #28
 8101530:	af00      	add	r7, sp, #0
 8101532:	60f8      	str	r0, [r7, #12]
 8101534:	60b9      	str	r1, [r7, #8]
 8101536:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8101538:	68fb      	ldr	r3, [r7, #12]
 810153a:	3314      	adds	r3, #20
 810153c:	461a      	mov	r2, r3
 810153e:	68bb      	ldr	r3, [r7, #8]
 8101540:	0e5b      	lsrs	r3, r3, #25
 8101542:	009b      	lsls	r3, r3, #2
 8101544:	f003 0304 	and.w	r3, r3, #4
 8101548:	4413      	add	r3, r2
 810154a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 810154c:	697b      	ldr	r3, [r7, #20]
 810154e:	681a      	ldr	r2, [r3, #0]
 8101550:	68bb      	ldr	r3, [r7, #8]
 8101552:	0d1b      	lsrs	r3, r3, #20
 8101554:	f003 031f 	and.w	r3, r3, #31
 8101558:	2107      	movs	r1, #7
 810155a:	fa01 f303 	lsl.w	r3, r1, r3
 810155e:	43db      	mvns	r3, r3
 8101560:	401a      	ands	r2, r3
 8101562:	68bb      	ldr	r3, [r7, #8]
 8101564:	0d1b      	lsrs	r3, r3, #20
 8101566:	f003 031f 	and.w	r3, r3, #31
 810156a:	6879      	ldr	r1, [r7, #4]
 810156c:	fa01 f303 	lsl.w	r3, r1, r3
 8101570:	431a      	orrs	r2, r3
 8101572:	697b      	ldr	r3, [r7, #20]
 8101574:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8101576:	bf00      	nop
 8101578:	371c      	adds	r7, #28
 810157a:	46bd      	mov	sp, r7
 810157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101580:	4770      	bx	lr
	...

08101584 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8101584:	b480      	push	{r7}
 8101586:	b085      	sub	sp, #20
 8101588:	af00      	add	r7, sp, #0
 810158a:	60f8      	str	r0, [r7, #12]
 810158c:	60b9      	str	r1, [r7, #8]
 810158e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101590:	68fb      	ldr	r3, [r7, #12]
 8101592:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8101596:	68bb      	ldr	r3, [r7, #8]
 8101598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810159c:	43db      	mvns	r3, r3
 810159e:	401a      	ands	r2, r3
 81015a0:	687b      	ldr	r3, [r7, #4]
 81015a2:	f003 0318 	and.w	r3, r3, #24
 81015a6:	4908      	ldr	r1, [pc, #32]	; (81015c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 81015a8:	40d9      	lsrs	r1, r3
 81015aa:	68bb      	ldr	r3, [r7, #8]
 81015ac:	400b      	ands	r3, r1
 81015ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81015b2:	431a      	orrs	r2, r3
 81015b4:	68fb      	ldr	r3, [r7, #12]
 81015b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 81015ba:	bf00      	nop
 81015bc:	3714      	adds	r7, #20
 81015be:	46bd      	mov	sp, r7
 81015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c4:	4770      	bx	lr
 81015c6:	bf00      	nop
 81015c8:	000fffff 	.word	0x000fffff

081015cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 81015cc:	b480      	push	{r7}
 81015ce:	b083      	sub	sp, #12
 81015d0:	af00      	add	r7, sp, #0
 81015d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 81015d4:	687b      	ldr	r3, [r7, #4]
 81015d6:	689b      	ldr	r3, [r3, #8]
 81015d8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 81015dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81015e0:	687a      	ldr	r2, [r7, #4]
 81015e2:	6093      	str	r3, [r2, #8]
}
 81015e4:	bf00      	nop
 81015e6:	370c      	adds	r7, #12
 81015e8:	46bd      	mov	sp, r7
 81015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015ee:	4770      	bx	lr

081015f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 81015f0:	b480      	push	{r7}
 81015f2:	b083      	sub	sp, #12
 81015f4:	af00      	add	r7, sp, #0
 81015f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 81015f8:	687b      	ldr	r3, [r7, #4]
 81015fa:	689b      	ldr	r3, [r3, #8]
 81015fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101604:	d101      	bne.n	810160a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8101606:	2301      	movs	r3, #1
 8101608:	e000      	b.n	810160c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810160a:	2300      	movs	r3, #0
}
 810160c:	4618      	mov	r0, r3
 810160e:	370c      	adds	r7, #12
 8101610:	46bd      	mov	sp, r7
 8101612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101616:	4770      	bx	lr

08101618 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101618:	b480      	push	{r7}
 810161a:	b083      	sub	sp, #12
 810161c:	af00      	add	r7, sp, #0
 810161e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	689b      	ldr	r3, [r3, #8]
 8101624:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8101628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 810162c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8101630:	687b      	ldr	r3, [r7, #4]
 8101632:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8101634:	bf00      	nop
 8101636:	370c      	adds	r7, #12
 8101638:	46bd      	mov	sp, r7
 810163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810163e:	4770      	bx	lr

08101640 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101640:	b480      	push	{r7}
 8101642:	b083      	sub	sp, #12
 8101644:	af00      	add	r7, sp, #0
 8101646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101648:	687b      	ldr	r3, [r7, #4]
 810164a:	689b      	ldr	r3, [r3, #8]
 810164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101654:	d101      	bne.n	810165a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8101656:	2301      	movs	r3, #1
 8101658:	e000      	b.n	810165c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810165a:	2300      	movs	r3, #0
}
 810165c:	4618      	mov	r0, r3
 810165e:	370c      	adds	r7, #12
 8101660:	46bd      	mov	sp, r7
 8101662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101666:	4770      	bx	lr

08101668 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101668:	b480      	push	{r7}
 810166a:	b083      	sub	sp, #12
 810166c:	af00      	add	r7, sp, #0
 810166e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101670:	687b      	ldr	r3, [r7, #4]
 8101672:	689b      	ldr	r3, [r3, #8]
 8101674:	f003 0301 	and.w	r3, r3, #1
 8101678:	2b01      	cmp	r3, #1
 810167a:	d101      	bne.n	8101680 <LL_ADC_IsEnabled+0x18>
 810167c:	2301      	movs	r3, #1
 810167e:	e000      	b.n	8101682 <LL_ADC_IsEnabled+0x1a>
 8101680:	2300      	movs	r3, #0
}
 8101682:	4618      	mov	r0, r3
 8101684:	370c      	adds	r7, #12
 8101686:	46bd      	mov	sp, r7
 8101688:	f85d 7b04 	ldr.w	r7, [sp], #4
 810168c:	4770      	bx	lr

0810168e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 810168e:	b480      	push	{r7}
 8101690:	b083      	sub	sp, #12
 8101692:	af00      	add	r7, sp, #0
 8101694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101696:	687b      	ldr	r3, [r7, #4]
 8101698:	689b      	ldr	r3, [r3, #8]
 810169a:	f003 0304 	and.w	r3, r3, #4
 810169e:	2b04      	cmp	r3, #4
 81016a0:	d101      	bne.n	81016a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 81016a2:	2301      	movs	r3, #1
 81016a4:	e000      	b.n	81016a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 81016a6:	2300      	movs	r3, #0
}
 81016a8:	4618      	mov	r0, r3
 81016aa:	370c      	adds	r7, #12
 81016ac:	46bd      	mov	sp, r7
 81016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016b2:	4770      	bx	lr

081016b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 81016b4:	b480      	push	{r7}
 81016b6:	b083      	sub	sp, #12
 81016b8:	af00      	add	r7, sp, #0
 81016ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 81016bc:	687b      	ldr	r3, [r7, #4]
 81016be:	689b      	ldr	r3, [r3, #8]
 81016c0:	f003 0308 	and.w	r3, r3, #8
 81016c4:	2b08      	cmp	r3, #8
 81016c6:	d101      	bne.n	81016cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 81016c8:	2301      	movs	r3, #1
 81016ca:	e000      	b.n	81016ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 81016cc:	2300      	movs	r3, #0
}
 81016ce:	4618      	mov	r0, r3
 81016d0:	370c      	adds	r7, #12
 81016d2:	46bd      	mov	sp, r7
 81016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d8:	4770      	bx	lr
	...

081016dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81016dc:	b590      	push	{r4, r7, lr}
 81016de:	b089      	sub	sp, #36	; 0x24
 81016e0:	af00      	add	r7, sp, #0
 81016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81016e4:	2300      	movs	r3, #0
 81016e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81016e8:	2300      	movs	r3, #0
 81016ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81016ec:	687b      	ldr	r3, [r7, #4]
 81016ee:	2b00      	cmp	r3, #0
 81016f0:	d101      	bne.n	81016f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81016f2:	2301      	movs	r3, #1
 81016f4:	e18f      	b.n	8101a16 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	68db      	ldr	r3, [r3, #12]
 81016fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81016fc:	687b      	ldr	r3, [r7, #4]
 81016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101700:	2b00      	cmp	r3, #0
 8101702:	d109      	bne.n	8101718 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8101704:	6878      	ldr	r0, [r7, #4]
 8101706:	f7ff fa55 	bl	8100bb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	2200      	movs	r2, #0
 810170e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101710:	687b      	ldr	r3, [r7, #4]
 8101712:	2200      	movs	r2, #0
 8101714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101718:	687b      	ldr	r3, [r7, #4]
 810171a:	681b      	ldr	r3, [r3, #0]
 810171c:	4618      	mov	r0, r3
 810171e:	f7ff ff67 	bl	81015f0 <LL_ADC_IsDeepPowerDownEnabled>
 8101722:	4603      	mov	r3, r0
 8101724:	2b00      	cmp	r3, #0
 8101726:	d004      	beq.n	8101732 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	681b      	ldr	r3, [r3, #0]
 810172c:	4618      	mov	r0, r3
 810172e:	f7ff ff4d 	bl	81015cc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	681b      	ldr	r3, [r3, #0]
 8101736:	4618      	mov	r0, r3
 8101738:	f7ff ff82 	bl	8101640 <LL_ADC_IsInternalRegulatorEnabled>
 810173c:	4603      	mov	r3, r0
 810173e:	2b00      	cmp	r3, #0
 8101740:	d114      	bne.n	810176c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8101742:	687b      	ldr	r3, [r7, #4]
 8101744:	681b      	ldr	r3, [r3, #0]
 8101746:	4618      	mov	r0, r3
 8101748:	f7ff ff66 	bl	8101618 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810174c:	4b88      	ldr	r3, [pc, #544]	; (8101970 <HAL_ADC_Init+0x294>)
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	099b      	lsrs	r3, r3, #6
 8101752:	4a88      	ldr	r2, [pc, #544]	; (8101974 <HAL_ADC_Init+0x298>)
 8101754:	fba2 2303 	umull	r2, r3, r2, r3
 8101758:	099b      	lsrs	r3, r3, #6
 810175a:	3301      	adds	r3, #1
 810175c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810175e:	e002      	b.n	8101766 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101760:	68bb      	ldr	r3, [r7, #8]
 8101762:	3b01      	subs	r3, #1
 8101764:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101766:	68bb      	ldr	r3, [r7, #8]
 8101768:	2b00      	cmp	r3, #0
 810176a:	d1f9      	bne.n	8101760 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810176c:	687b      	ldr	r3, [r7, #4]
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	4618      	mov	r0, r3
 8101772:	f7ff ff65 	bl	8101640 <LL_ADC_IsInternalRegulatorEnabled>
 8101776:	4603      	mov	r3, r0
 8101778:	2b00      	cmp	r3, #0
 810177a:	d10d      	bne.n	8101798 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101780:	f043 0210 	orr.w	r2, r3, #16
 8101784:	687b      	ldr	r3, [r7, #4]
 8101786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101788:	687b      	ldr	r3, [r7, #4]
 810178a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810178c:	f043 0201 	orr.w	r2, r3, #1
 8101790:	687b      	ldr	r3, [r7, #4]
 8101792:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8101794:	2301      	movs	r3, #1
 8101796:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101798:	687b      	ldr	r3, [r7, #4]
 810179a:	681b      	ldr	r3, [r3, #0]
 810179c:	4618      	mov	r0, r3
 810179e:	f7ff ff76 	bl	810168e <LL_ADC_REG_IsConversionOngoing>
 81017a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81017a4:	687b      	ldr	r3, [r7, #4]
 81017a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81017a8:	f003 0310 	and.w	r3, r3, #16
 81017ac:	2b00      	cmp	r3, #0
 81017ae:	f040 8129 	bne.w	8101a04 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 81017b2:	697b      	ldr	r3, [r7, #20]
 81017b4:	2b00      	cmp	r3, #0
 81017b6:	f040 8125 	bne.w	8101a04 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 81017ba:	687b      	ldr	r3, [r7, #4]
 81017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81017be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 81017c2:	f043 0202 	orr.w	r2, r3, #2
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 81017ca:	687b      	ldr	r3, [r7, #4]
 81017cc:	681b      	ldr	r3, [r3, #0]
 81017ce:	4618      	mov	r0, r3
 81017d0:	f7ff ff4a 	bl	8101668 <LL_ADC_IsEnabled>
 81017d4:	4603      	mov	r3, r0
 81017d6:	2b00      	cmp	r3, #0
 81017d8:	d136      	bne.n	8101848 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81017da:	687b      	ldr	r3, [r7, #4]
 81017dc:	681b      	ldr	r3, [r3, #0]
 81017de:	4a66      	ldr	r2, [pc, #408]	; (8101978 <HAL_ADC_Init+0x29c>)
 81017e0:	4293      	cmp	r3, r2
 81017e2:	d004      	beq.n	81017ee <HAL_ADC_Init+0x112>
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	681b      	ldr	r3, [r3, #0]
 81017e8:	4a64      	ldr	r2, [pc, #400]	; (810197c <HAL_ADC_Init+0x2a0>)
 81017ea:	4293      	cmp	r3, r2
 81017ec:	d10e      	bne.n	810180c <HAL_ADC_Init+0x130>
 81017ee:	4862      	ldr	r0, [pc, #392]	; (8101978 <HAL_ADC_Init+0x29c>)
 81017f0:	f7ff ff3a 	bl	8101668 <LL_ADC_IsEnabled>
 81017f4:	4604      	mov	r4, r0
 81017f6:	4861      	ldr	r0, [pc, #388]	; (810197c <HAL_ADC_Init+0x2a0>)
 81017f8:	f7ff ff36 	bl	8101668 <LL_ADC_IsEnabled>
 81017fc:	4603      	mov	r3, r0
 81017fe:	4323      	orrs	r3, r4
 8101800:	2b00      	cmp	r3, #0
 8101802:	bf0c      	ite	eq
 8101804:	2301      	moveq	r3, #1
 8101806:	2300      	movne	r3, #0
 8101808:	b2db      	uxtb	r3, r3
 810180a:	e008      	b.n	810181e <HAL_ADC_Init+0x142>
 810180c:	485c      	ldr	r0, [pc, #368]	; (8101980 <HAL_ADC_Init+0x2a4>)
 810180e:	f7ff ff2b 	bl	8101668 <LL_ADC_IsEnabled>
 8101812:	4603      	mov	r3, r0
 8101814:	2b00      	cmp	r3, #0
 8101816:	bf0c      	ite	eq
 8101818:	2301      	moveq	r3, #1
 810181a:	2300      	movne	r3, #0
 810181c:	b2db      	uxtb	r3, r3
 810181e:	2b00      	cmp	r3, #0
 8101820:	d012      	beq.n	8101848 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8101822:	687b      	ldr	r3, [r7, #4]
 8101824:	681b      	ldr	r3, [r3, #0]
 8101826:	4a54      	ldr	r2, [pc, #336]	; (8101978 <HAL_ADC_Init+0x29c>)
 8101828:	4293      	cmp	r3, r2
 810182a:	d004      	beq.n	8101836 <HAL_ADC_Init+0x15a>
 810182c:	687b      	ldr	r3, [r7, #4]
 810182e:	681b      	ldr	r3, [r3, #0]
 8101830:	4a52      	ldr	r2, [pc, #328]	; (810197c <HAL_ADC_Init+0x2a0>)
 8101832:	4293      	cmp	r3, r2
 8101834:	d101      	bne.n	810183a <HAL_ADC_Init+0x15e>
 8101836:	4a53      	ldr	r2, [pc, #332]	; (8101984 <HAL_ADC_Init+0x2a8>)
 8101838:	e000      	b.n	810183c <HAL_ADC_Init+0x160>
 810183a:	4a53      	ldr	r2, [pc, #332]	; (8101988 <HAL_ADC_Init+0x2ac>)
 810183c:	687b      	ldr	r3, [r7, #4]
 810183e:	685b      	ldr	r3, [r3, #4]
 8101840:	4619      	mov	r1, r3
 8101842:	4610      	mov	r0, r2
 8101844:	f7ff fdbe 	bl	81013c4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101848:	f7ff fd9a 	bl	8101380 <HAL_GetREVID>
 810184c:	4603      	mov	r3, r0
 810184e:	f241 0203 	movw	r2, #4099	; 0x1003
 8101852:	4293      	cmp	r3, r2
 8101854:	d914      	bls.n	8101880 <HAL_ADC_Init+0x1a4>
 8101856:	687b      	ldr	r3, [r7, #4]
 8101858:	689b      	ldr	r3, [r3, #8]
 810185a:	2b10      	cmp	r3, #16
 810185c:	d110      	bne.n	8101880 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	7d5b      	ldrb	r3, [r3, #21]
 8101862:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101868:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810186a:	687b      	ldr	r3, [r7, #4]
 810186c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810186e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101870:	687b      	ldr	r3, [r7, #4]
 8101872:	7f1b      	ldrb	r3, [r3, #28]
 8101874:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101876:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101878:	f043 030c 	orr.w	r3, r3, #12
 810187c:	61bb      	str	r3, [r7, #24]
 810187e:	e00d      	b.n	810189c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101880:	687b      	ldr	r3, [r7, #4]
 8101882:	7d5b      	ldrb	r3, [r3, #21]
 8101884:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810188a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810188c:	687b      	ldr	r3, [r7, #4]
 810188e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101890:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	7f1b      	ldrb	r3, [r3, #28]
 8101896:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101898:	4313      	orrs	r3, r2
 810189a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	7f1b      	ldrb	r3, [r3, #28]
 81018a0:	2b01      	cmp	r3, #1
 81018a2:	d106      	bne.n	81018b2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 81018a4:	687b      	ldr	r3, [r7, #4]
 81018a6:	6a1b      	ldr	r3, [r3, #32]
 81018a8:	3b01      	subs	r3, #1
 81018aa:	045b      	lsls	r3, r3, #17
 81018ac:	69ba      	ldr	r2, [r7, #24]
 81018ae:	4313      	orrs	r3, r2
 81018b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 81018b2:	687b      	ldr	r3, [r7, #4]
 81018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81018b6:	2b00      	cmp	r3, #0
 81018b8:	d009      	beq.n	81018ce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81018ba:	687b      	ldr	r3, [r7, #4]
 81018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81018be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81018c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 81018c8:	69ba      	ldr	r2, [r7, #24]
 81018ca:	4313      	orrs	r3, r2
 81018cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 81018ce:	687b      	ldr	r3, [r7, #4]
 81018d0:	681b      	ldr	r3, [r3, #0]
 81018d2:	68da      	ldr	r2, [r3, #12]
 81018d4:	4b2d      	ldr	r3, [pc, #180]	; (810198c <HAL_ADC_Init+0x2b0>)
 81018d6:	4013      	ands	r3, r2
 81018d8:	687a      	ldr	r2, [r7, #4]
 81018da:	6812      	ldr	r2, [r2, #0]
 81018dc:	69b9      	ldr	r1, [r7, #24]
 81018de:	430b      	orrs	r3, r1
 81018e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81018e2:	687b      	ldr	r3, [r7, #4]
 81018e4:	681b      	ldr	r3, [r3, #0]
 81018e6:	4618      	mov	r0, r3
 81018e8:	f7ff fed1 	bl	810168e <LL_ADC_REG_IsConversionOngoing>
 81018ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	681b      	ldr	r3, [r3, #0]
 81018f2:	4618      	mov	r0, r3
 81018f4:	f7ff fede 	bl	81016b4 <LL_ADC_INJ_IsConversionOngoing>
 81018f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81018fa:	693b      	ldr	r3, [r7, #16]
 81018fc:	2b00      	cmp	r3, #0
 81018fe:	d15f      	bne.n	81019c0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101900:	68fb      	ldr	r3, [r7, #12]
 8101902:	2b00      	cmp	r3, #0
 8101904:	d15c      	bne.n	81019c0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8101906:	687b      	ldr	r3, [r7, #4]
 8101908:	7d1b      	ldrb	r3, [r3, #20]
 810190a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 810190c:	687b      	ldr	r3, [r7, #4]
 810190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8101910:	4313      	orrs	r3, r2
 8101912:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8101914:	687b      	ldr	r3, [r7, #4]
 8101916:	681b      	ldr	r3, [r3, #0]
 8101918:	68db      	ldr	r3, [r3, #12]
 810191a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 810191e:	f023 0303 	bic.w	r3, r3, #3
 8101922:	687a      	ldr	r2, [r7, #4]
 8101924:	6812      	ldr	r2, [r2, #0]
 8101926:	69b9      	ldr	r1, [r7, #24]
 8101928:	430b      	orrs	r3, r1
 810192a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 810192c:	687b      	ldr	r3, [r7, #4]
 810192e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101932:	2b01      	cmp	r3, #1
 8101934:	d12e      	bne.n	8101994 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8101936:	687b      	ldr	r3, [r7, #4]
 8101938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810193a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810193c:	687b      	ldr	r3, [r7, #4]
 810193e:	681b      	ldr	r3, [r3, #0]
 8101940:	691a      	ldr	r2, [r3, #16]
 8101942:	4b13      	ldr	r3, [pc, #76]	; (8101990 <HAL_ADC_Init+0x2b4>)
 8101944:	4013      	ands	r3, r2
 8101946:	687a      	ldr	r2, [r7, #4]
 8101948:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 810194a:	3a01      	subs	r2, #1
 810194c:	0411      	lsls	r1, r2, #16
 810194e:	687a      	ldr	r2, [r7, #4]
 8101950:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8101952:	4311      	orrs	r1, r2
 8101954:	687a      	ldr	r2, [r7, #4]
 8101956:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101958:	4311      	orrs	r1, r2
 810195a:	687a      	ldr	r2, [r7, #4]
 810195c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 810195e:	430a      	orrs	r2, r1
 8101960:	431a      	orrs	r2, r3
 8101962:	687b      	ldr	r3, [r7, #4]
 8101964:	681b      	ldr	r3, [r3, #0]
 8101966:	f042 0201 	orr.w	r2, r2, #1
 810196a:	611a      	str	r2, [r3, #16]
 810196c:	e01a      	b.n	81019a4 <HAL_ADC_Init+0x2c8>
 810196e:	bf00      	nop
 8101970:	10000000 	.word	0x10000000
 8101974:	053e2d63 	.word	0x053e2d63
 8101978:	40022000 	.word	0x40022000
 810197c:	40022100 	.word	0x40022100
 8101980:	58026000 	.word	0x58026000
 8101984:	40022300 	.word	0x40022300
 8101988:	58026300 	.word	0x58026300
 810198c:	fff0c003 	.word	0xfff0c003
 8101990:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	681b      	ldr	r3, [r3, #0]
 8101998:	691a      	ldr	r2, [r3, #16]
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	681b      	ldr	r3, [r3, #0]
 810199e:	f022 0201 	bic.w	r2, r2, #1
 81019a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 81019a4:	687b      	ldr	r3, [r7, #4]
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	691b      	ldr	r3, [r3, #16]
 81019aa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 81019ae:	687b      	ldr	r3, [r7, #4]
 81019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81019b2:	687b      	ldr	r3, [r7, #4]
 81019b4:	681b      	ldr	r3, [r3, #0]
 81019b6:	430a      	orrs	r2, r1
 81019b8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 81019ba:	6878      	ldr	r0, [r7, #4]
 81019bc:	f000 fb80 	bl	81020c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	68db      	ldr	r3, [r3, #12]
 81019c4:	2b01      	cmp	r3, #1
 81019c6:	d10c      	bne.n	81019e2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 81019c8:	687b      	ldr	r3, [r7, #4]
 81019ca:	681b      	ldr	r3, [r3, #0]
 81019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81019ce:	f023 010f 	bic.w	r1, r3, #15
 81019d2:	687b      	ldr	r3, [r7, #4]
 81019d4:	699b      	ldr	r3, [r3, #24]
 81019d6:	1e5a      	subs	r2, r3, #1
 81019d8:	687b      	ldr	r3, [r7, #4]
 81019da:	681b      	ldr	r3, [r3, #0]
 81019dc:	430a      	orrs	r2, r1
 81019de:	631a      	str	r2, [r3, #48]	; 0x30
 81019e0:	e007      	b.n	81019f2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81019e2:	687b      	ldr	r3, [r7, #4]
 81019e4:	681b      	ldr	r3, [r3, #0]
 81019e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81019e8:	687b      	ldr	r3, [r7, #4]
 81019ea:	681b      	ldr	r3, [r3, #0]
 81019ec:	f022 020f 	bic.w	r2, r2, #15
 81019f0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81019f2:	687b      	ldr	r3, [r7, #4]
 81019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81019f6:	f023 0303 	bic.w	r3, r3, #3
 81019fa:	f043 0201 	orr.w	r2, r3, #1
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	655a      	str	r2, [r3, #84]	; 0x54
 8101a02:	e007      	b.n	8101a14 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101a04:	687b      	ldr	r3, [r7, #4]
 8101a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101a08:	f043 0210 	orr.w	r2, r3, #16
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8101a10:	2301      	movs	r3, #1
 8101a12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8101a14:	7ffb      	ldrb	r3, [r7, #31]
}
 8101a16:	4618      	mov	r0, r3
 8101a18:	3724      	adds	r7, #36	; 0x24
 8101a1a:	46bd      	mov	sp, r7
 8101a1c:	bd90      	pop	{r4, r7, pc}
 8101a1e:	bf00      	nop

08101a20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8101a20:	b590      	push	{r4, r7, lr}
 8101a22:	b0a1      	sub	sp, #132	; 0x84
 8101a24:	af00      	add	r7, sp, #0
 8101a26:	6078      	str	r0, [r7, #4]
 8101a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101a2a:	2300      	movs	r3, #0
 8101a2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8101a30:	2300      	movs	r3, #0
 8101a32:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8101a34:	683b      	ldr	r3, [r7, #0]
 8101a36:	68db      	ldr	r3, [r3, #12]
 8101a38:	4a9d      	ldr	r2, [pc, #628]	; (8101cb0 <HAL_ADC_ConfigChannel+0x290>)
 8101a3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101a42:	2b01      	cmp	r3, #1
 8101a44:	d101      	bne.n	8101a4a <HAL_ADC_ConfigChannel+0x2a>
 8101a46:	2302      	movs	r3, #2
 8101a48:	e321      	b.n	810208e <HAL_ADC_ConfigChannel+0x66e>
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	2201      	movs	r2, #1
 8101a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	4618      	mov	r0, r3
 8101a58:	f7ff fe19 	bl	810168e <LL_ADC_REG_IsConversionOngoing>
 8101a5c:	4603      	mov	r3, r0
 8101a5e:	2b00      	cmp	r3, #0
 8101a60:	f040 8306 	bne.w	8102070 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8101a64:	683b      	ldr	r3, [r7, #0]
 8101a66:	681b      	ldr	r3, [r3, #0]
 8101a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101a6c:	2b00      	cmp	r3, #0
 8101a6e:	d108      	bne.n	8101a82 <HAL_ADC_ConfigChannel+0x62>
 8101a70:	683b      	ldr	r3, [r7, #0]
 8101a72:	681b      	ldr	r3, [r3, #0]
 8101a74:	0e9b      	lsrs	r3, r3, #26
 8101a76:	f003 031f 	and.w	r3, r3, #31
 8101a7a:	2201      	movs	r2, #1
 8101a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8101a80:	e016      	b.n	8101ab0 <HAL_ADC_ConfigChannel+0x90>
 8101a82:	683b      	ldr	r3, [r7, #0]
 8101a84:	681b      	ldr	r3, [r3, #0]
 8101a86:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101a8a:	fa93 f3a3 	rbit	r3, r3
 8101a8e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8101a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101a92:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8101a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101a96:	2b00      	cmp	r3, #0
 8101a98:	d101      	bne.n	8101a9e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8101a9a:	2320      	movs	r3, #32
 8101a9c:	e003      	b.n	8101aa6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8101a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101aa0:	fab3 f383 	clz	r3, r3
 8101aa4:	b2db      	uxtb	r3, r3
 8101aa6:	f003 031f 	and.w	r3, r3, #31
 8101aaa:	2201      	movs	r2, #1
 8101aac:	fa02 f303 	lsl.w	r3, r2, r3
 8101ab0:	687a      	ldr	r2, [r7, #4]
 8101ab2:	6812      	ldr	r2, [r2, #0]
 8101ab4:	69d1      	ldr	r1, [r2, #28]
 8101ab6:	687a      	ldr	r2, [r7, #4]
 8101ab8:	6812      	ldr	r2, [r2, #0]
 8101aba:	430b      	orrs	r3, r1
 8101abc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8101abe:	687b      	ldr	r3, [r7, #4]
 8101ac0:	6818      	ldr	r0, [r3, #0]
 8101ac2:	683b      	ldr	r3, [r7, #0]
 8101ac4:	6859      	ldr	r1, [r3, #4]
 8101ac6:	683b      	ldr	r3, [r7, #0]
 8101ac8:	681b      	ldr	r3, [r3, #0]
 8101aca:	461a      	mov	r2, r3
 8101acc:	f7ff fd02 	bl	81014d4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101ad0:	687b      	ldr	r3, [r7, #4]
 8101ad2:	681b      	ldr	r3, [r3, #0]
 8101ad4:	4618      	mov	r0, r3
 8101ad6:	f7ff fdda 	bl	810168e <LL_ADC_REG_IsConversionOngoing>
 8101ada:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101adc:	687b      	ldr	r3, [r7, #4]
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	4618      	mov	r0, r3
 8101ae2:	f7ff fde7 	bl	81016b4 <LL_ADC_INJ_IsConversionOngoing>
 8101ae6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101aea:	2b00      	cmp	r3, #0
 8101aec:	f040 80b3 	bne.w	8101c56 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101af2:	2b00      	cmp	r3, #0
 8101af4:	f040 80af 	bne.w	8101c56 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8101af8:	687b      	ldr	r3, [r7, #4]
 8101afa:	6818      	ldr	r0, [r3, #0]
 8101afc:	683b      	ldr	r3, [r7, #0]
 8101afe:	6819      	ldr	r1, [r3, #0]
 8101b00:	683b      	ldr	r3, [r7, #0]
 8101b02:	689b      	ldr	r3, [r3, #8]
 8101b04:	461a      	mov	r2, r3
 8101b06:	f7ff fd11 	bl	810152c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8101b0a:	4b6a      	ldr	r3, [pc, #424]	; (8101cb4 <HAL_ADC_ConfigChannel+0x294>)
 8101b0c:	681b      	ldr	r3, [r3, #0]
 8101b0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8101b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101b16:	d10b      	bne.n	8101b30 <HAL_ADC_ConfigChannel+0x110>
 8101b18:	683b      	ldr	r3, [r7, #0]
 8101b1a:	695a      	ldr	r2, [r3, #20]
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	681b      	ldr	r3, [r3, #0]
 8101b20:	68db      	ldr	r3, [r3, #12]
 8101b22:	089b      	lsrs	r3, r3, #2
 8101b24:	f003 0307 	and.w	r3, r3, #7
 8101b28:	005b      	lsls	r3, r3, #1
 8101b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8101b2e:	e01d      	b.n	8101b6c <HAL_ADC_ConfigChannel+0x14c>
 8101b30:	687b      	ldr	r3, [r7, #4]
 8101b32:	681b      	ldr	r3, [r3, #0]
 8101b34:	68db      	ldr	r3, [r3, #12]
 8101b36:	f003 0310 	and.w	r3, r3, #16
 8101b3a:	2b00      	cmp	r3, #0
 8101b3c:	d10b      	bne.n	8101b56 <HAL_ADC_ConfigChannel+0x136>
 8101b3e:	683b      	ldr	r3, [r7, #0]
 8101b40:	695a      	ldr	r2, [r3, #20]
 8101b42:	687b      	ldr	r3, [r7, #4]
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	68db      	ldr	r3, [r3, #12]
 8101b48:	089b      	lsrs	r3, r3, #2
 8101b4a:	f003 0307 	and.w	r3, r3, #7
 8101b4e:	005b      	lsls	r3, r3, #1
 8101b50:	fa02 f303 	lsl.w	r3, r2, r3
 8101b54:	e00a      	b.n	8101b6c <HAL_ADC_ConfigChannel+0x14c>
 8101b56:	683b      	ldr	r3, [r7, #0]
 8101b58:	695a      	ldr	r2, [r3, #20]
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	681b      	ldr	r3, [r3, #0]
 8101b5e:	68db      	ldr	r3, [r3, #12]
 8101b60:	089b      	lsrs	r3, r3, #2
 8101b62:	f003 0304 	and.w	r3, r3, #4
 8101b66:	005b      	lsls	r3, r3, #1
 8101b68:	fa02 f303 	lsl.w	r3, r2, r3
 8101b6c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8101b6e:	683b      	ldr	r3, [r7, #0]
 8101b70:	691b      	ldr	r3, [r3, #16]
 8101b72:	2b04      	cmp	r3, #4
 8101b74:	d027      	beq.n	8101bc6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8101b76:	687b      	ldr	r3, [r7, #4]
 8101b78:	6818      	ldr	r0, [r3, #0]
 8101b7a:	683b      	ldr	r3, [r7, #0]
 8101b7c:	6919      	ldr	r1, [r3, #16]
 8101b7e:	683b      	ldr	r3, [r7, #0]
 8101b80:	681a      	ldr	r2, [r3, #0]
 8101b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101b84:	f7ff fc52 	bl	810142c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	6818      	ldr	r0, [r3, #0]
 8101b8c:	683b      	ldr	r3, [r7, #0]
 8101b8e:	6919      	ldr	r1, [r3, #16]
 8101b90:	683b      	ldr	r3, [r7, #0]
 8101b92:	7e5b      	ldrb	r3, [r3, #25]
 8101b94:	2b01      	cmp	r3, #1
 8101b96:	d102      	bne.n	8101b9e <HAL_ADC_ConfigChannel+0x17e>
 8101b98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8101b9c:	e000      	b.n	8101ba0 <HAL_ADC_ConfigChannel+0x180>
 8101b9e:	2300      	movs	r3, #0
 8101ba0:	461a      	mov	r2, r3
 8101ba2:	f7ff fc7c 	bl	810149e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101ba6:	687b      	ldr	r3, [r7, #4]
 8101ba8:	6818      	ldr	r0, [r3, #0]
 8101baa:	683b      	ldr	r3, [r7, #0]
 8101bac:	6919      	ldr	r1, [r3, #16]
 8101bae:	683b      	ldr	r3, [r7, #0]
 8101bb0:	7e1b      	ldrb	r3, [r3, #24]
 8101bb2:	2b01      	cmp	r3, #1
 8101bb4:	d102      	bne.n	8101bbc <HAL_ADC_ConfigChannel+0x19c>
 8101bb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101bba:	e000      	b.n	8101bbe <HAL_ADC_ConfigChannel+0x19e>
 8101bbc:	2300      	movs	r3, #0
 8101bbe:	461a      	mov	r2, r3
 8101bc0:	f7ff fc54 	bl	810146c <LL_ADC_SetDataRightShift>
 8101bc4:	e047      	b.n	8101c56 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101bc6:	687b      	ldr	r3, [r7, #4]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101bcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101bd0:	683b      	ldr	r3, [r7, #0]
 8101bd2:	681b      	ldr	r3, [r3, #0]
 8101bd4:	069b      	lsls	r3, r3, #26
 8101bd6:	429a      	cmp	r2, r3
 8101bd8:	d107      	bne.n	8101bea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8101bda:	687b      	ldr	r3, [r7, #4]
 8101bdc:	681b      	ldr	r3, [r3, #0]
 8101bde:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101be8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	681b      	ldr	r3, [r3, #0]
 8101bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101bf4:	683b      	ldr	r3, [r7, #0]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	069b      	lsls	r3, r3, #26
 8101bfa:	429a      	cmp	r2, r3
 8101bfc:	d107      	bne.n	8101c0e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	681b      	ldr	r3, [r3, #0]
 8101c08:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101c0c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101c14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101c18:	683b      	ldr	r3, [r7, #0]
 8101c1a:	681b      	ldr	r3, [r3, #0]
 8101c1c:	069b      	lsls	r3, r3, #26
 8101c1e:	429a      	cmp	r2, r3
 8101c20:	d107      	bne.n	8101c32 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8101c22:	687b      	ldr	r3, [r7, #4]
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8101c28:	687b      	ldr	r3, [r7, #4]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101c30:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	681b      	ldr	r3, [r3, #0]
 8101c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101c38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101c3c:	683b      	ldr	r3, [r7, #0]
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	069b      	lsls	r3, r3, #26
 8101c42:	429a      	cmp	r2, r3
 8101c44:	d107      	bne.n	8101c56 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101c54:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	681b      	ldr	r3, [r3, #0]
 8101c5a:	4618      	mov	r0, r3
 8101c5c:	f7ff fd04 	bl	8101668 <LL_ADC_IsEnabled>
 8101c60:	4603      	mov	r3, r0
 8101c62:	2b00      	cmp	r3, #0
 8101c64:	f040 820d 	bne.w	8102082 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8101c68:	687b      	ldr	r3, [r7, #4]
 8101c6a:	6818      	ldr	r0, [r3, #0]
 8101c6c:	683b      	ldr	r3, [r7, #0]
 8101c6e:	6819      	ldr	r1, [r3, #0]
 8101c70:	683b      	ldr	r3, [r7, #0]
 8101c72:	68db      	ldr	r3, [r3, #12]
 8101c74:	461a      	mov	r2, r3
 8101c76:	f7ff fc85 	bl	8101584 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8101c7a:	683b      	ldr	r3, [r7, #0]
 8101c7c:	68db      	ldr	r3, [r3, #12]
 8101c7e:	4a0c      	ldr	r2, [pc, #48]	; (8101cb0 <HAL_ADC_ConfigChannel+0x290>)
 8101c80:	4293      	cmp	r3, r2
 8101c82:	f040 8133 	bne.w	8101eec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101c8a:	683b      	ldr	r3, [r7, #0]
 8101c8c:	681b      	ldr	r3, [r3, #0]
 8101c8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101c92:	2b00      	cmp	r3, #0
 8101c94:	d110      	bne.n	8101cb8 <HAL_ADC_ConfigChannel+0x298>
 8101c96:	683b      	ldr	r3, [r7, #0]
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	0e9b      	lsrs	r3, r3, #26
 8101c9c:	3301      	adds	r3, #1
 8101c9e:	f003 031f 	and.w	r3, r3, #31
 8101ca2:	2b09      	cmp	r3, #9
 8101ca4:	bf94      	ite	ls
 8101ca6:	2301      	movls	r3, #1
 8101ca8:	2300      	movhi	r3, #0
 8101caa:	b2db      	uxtb	r3, r3
 8101cac:	e01e      	b.n	8101cec <HAL_ADC_ConfigChannel+0x2cc>
 8101cae:	bf00      	nop
 8101cb0:	47ff0000 	.word	0x47ff0000
 8101cb4:	5c001000 	.word	0x5c001000
 8101cb8:	683b      	ldr	r3, [r7, #0]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101cc0:	fa93 f3a3 	rbit	r3, r3
 8101cc4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8101cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8101cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101ccc:	2b00      	cmp	r3, #0
 8101cce:	d101      	bne.n	8101cd4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8101cd0:	2320      	movs	r3, #32
 8101cd2:	e003      	b.n	8101cdc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8101cd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101cd6:	fab3 f383 	clz	r3, r3
 8101cda:	b2db      	uxtb	r3, r3
 8101cdc:	3301      	adds	r3, #1
 8101cde:	f003 031f 	and.w	r3, r3, #31
 8101ce2:	2b09      	cmp	r3, #9
 8101ce4:	bf94      	ite	ls
 8101ce6:	2301      	movls	r3, #1
 8101ce8:	2300      	movhi	r3, #0
 8101cea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101cec:	2b00      	cmp	r3, #0
 8101cee:	d079      	beq.n	8101de4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101cf0:	683b      	ldr	r3, [r7, #0]
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101cf8:	2b00      	cmp	r3, #0
 8101cfa:	d107      	bne.n	8101d0c <HAL_ADC_ConfigChannel+0x2ec>
 8101cfc:	683b      	ldr	r3, [r7, #0]
 8101cfe:	681b      	ldr	r3, [r3, #0]
 8101d00:	0e9b      	lsrs	r3, r3, #26
 8101d02:	3301      	adds	r3, #1
 8101d04:	069b      	lsls	r3, r3, #26
 8101d06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101d0a:	e015      	b.n	8101d38 <HAL_ADC_ConfigChannel+0x318>
 8101d0c:	683b      	ldr	r3, [r7, #0]
 8101d0e:	681b      	ldr	r3, [r3, #0]
 8101d10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101d14:	fa93 f3a3 	rbit	r3, r3
 8101d18:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8101d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101d1c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8101d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101d20:	2b00      	cmp	r3, #0
 8101d22:	d101      	bne.n	8101d28 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8101d24:	2320      	movs	r3, #32
 8101d26:	e003      	b.n	8101d30 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8101d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101d2a:	fab3 f383 	clz	r3, r3
 8101d2e:	b2db      	uxtb	r3, r3
 8101d30:	3301      	adds	r3, #1
 8101d32:	069b      	lsls	r3, r3, #26
 8101d34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101d38:	683b      	ldr	r3, [r7, #0]
 8101d3a:	681b      	ldr	r3, [r3, #0]
 8101d3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101d40:	2b00      	cmp	r3, #0
 8101d42:	d109      	bne.n	8101d58 <HAL_ADC_ConfigChannel+0x338>
 8101d44:	683b      	ldr	r3, [r7, #0]
 8101d46:	681b      	ldr	r3, [r3, #0]
 8101d48:	0e9b      	lsrs	r3, r3, #26
 8101d4a:	3301      	adds	r3, #1
 8101d4c:	f003 031f 	and.w	r3, r3, #31
 8101d50:	2101      	movs	r1, #1
 8101d52:	fa01 f303 	lsl.w	r3, r1, r3
 8101d56:	e017      	b.n	8101d88 <HAL_ADC_ConfigChannel+0x368>
 8101d58:	683b      	ldr	r3, [r7, #0]
 8101d5a:	681b      	ldr	r3, [r3, #0]
 8101d5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101d60:	fa93 f3a3 	rbit	r3, r3
 8101d64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8101d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101d68:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8101d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d6c:	2b00      	cmp	r3, #0
 8101d6e:	d101      	bne.n	8101d74 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8101d70:	2320      	movs	r3, #32
 8101d72:	e003      	b.n	8101d7c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8101d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d76:	fab3 f383 	clz	r3, r3
 8101d7a:	b2db      	uxtb	r3, r3
 8101d7c:	3301      	adds	r3, #1
 8101d7e:	f003 031f 	and.w	r3, r3, #31
 8101d82:	2101      	movs	r1, #1
 8101d84:	fa01 f303 	lsl.w	r3, r1, r3
 8101d88:	ea42 0103 	orr.w	r1, r2, r3
 8101d8c:	683b      	ldr	r3, [r7, #0]
 8101d8e:	681b      	ldr	r3, [r3, #0]
 8101d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	d10a      	bne.n	8101dae <HAL_ADC_ConfigChannel+0x38e>
 8101d98:	683b      	ldr	r3, [r7, #0]
 8101d9a:	681b      	ldr	r3, [r3, #0]
 8101d9c:	0e9b      	lsrs	r3, r3, #26
 8101d9e:	3301      	adds	r3, #1
 8101da0:	f003 021f 	and.w	r2, r3, #31
 8101da4:	4613      	mov	r3, r2
 8101da6:	005b      	lsls	r3, r3, #1
 8101da8:	4413      	add	r3, r2
 8101daa:	051b      	lsls	r3, r3, #20
 8101dac:	e018      	b.n	8101de0 <HAL_ADC_ConfigChannel+0x3c0>
 8101dae:	683b      	ldr	r3, [r7, #0]
 8101db0:	681b      	ldr	r3, [r3, #0]
 8101db2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101db6:	fa93 f3a3 	rbit	r3, r3
 8101dba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8101dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8101dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101dc2:	2b00      	cmp	r3, #0
 8101dc4:	d101      	bne.n	8101dca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8101dc6:	2320      	movs	r3, #32
 8101dc8:	e003      	b.n	8101dd2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8101dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101dcc:	fab3 f383 	clz	r3, r3
 8101dd0:	b2db      	uxtb	r3, r3
 8101dd2:	3301      	adds	r3, #1
 8101dd4:	f003 021f 	and.w	r2, r3, #31
 8101dd8:	4613      	mov	r3, r2
 8101dda:	005b      	lsls	r3, r3, #1
 8101ddc:	4413      	add	r3, r2
 8101dde:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101de0:	430b      	orrs	r3, r1
 8101de2:	e07e      	b.n	8101ee2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8101de4:	683b      	ldr	r3, [r7, #0]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101dec:	2b00      	cmp	r3, #0
 8101dee:	d107      	bne.n	8101e00 <HAL_ADC_ConfigChannel+0x3e0>
 8101df0:	683b      	ldr	r3, [r7, #0]
 8101df2:	681b      	ldr	r3, [r3, #0]
 8101df4:	0e9b      	lsrs	r3, r3, #26
 8101df6:	3301      	adds	r3, #1
 8101df8:	069b      	lsls	r3, r3, #26
 8101dfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101dfe:	e015      	b.n	8101e2c <HAL_ADC_ConfigChannel+0x40c>
 8101e00:	683b      	ldr	r3, [r7, #0]
 8101e02:	681b      	ldr	r3, [r3, #0]
 8101e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101e08:	fa93 f3a3 	rbit	r3, r3
 8101e0c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8101e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8101e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e14:	2b00      	cmp	r3, #0
 8101e16:	d101      	bne.n	8101e1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8101e18:	2320      	movs	r3, #32
 8101e1a:	e003      	b.n	8101e24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8101e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e1e:	fab3 f383 	clz	r3, r3
 8101e22:	b2db      	uxtb	r3, r3
 8101e24:	3301      	adds	r3, #1
 8101e26:	069b      	lsls	r3, r3, #26
 8101e28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101e2c:	683b      	ldr	r3, [r7, #0]
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e34:	2b00      	cmp	r3, #0
 8101e36:	d109      	bne.n	8101e4c <HAL_ADC_ConfigChannel+0x42c>
 8101e38:	683b      	ldr	r3, [r7, #0]
 8101e3a:	681b      	ldr	r3, [r3, #0]
 8101e3c:	0e9b      	lsrs	r3, r3, #26
 8101e3e:	3301      	adds	r3, #1
 8101e40:	f003 031f 	and.w	r3, r3, #31
 8101e44:	2101      	movs	r1, #1
 8101e46:	fa01 f303 	lsl.w	r3, r1, r3
 8101e4a:	e017      	b.n	8101e7c <HAL_ADC_ConfigChannel+0x45c>
 8101e4c:	683b      	ldr	r3, [r7, #0]
 8101e4e:	681b      	ldr	r3, [r3, #0]
 8101e50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e52:	69fb      	ldr	r3, [r7, #28]
 8101e54:	fa93 f3a3 	rbit	r3, r3
 8101e58:	61bb      	str	r3, [r7, #24]
  return result;
 8101e5a:	69bb      	ldr	r3, [r7, #24]
 8101e5c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8101e5e:	6a3b      	ldr	r3, [r7, #32]
 8101e60:	2b00      	cmp	r3, #0
 8101e62:	d101      	bne.n	8101e68 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8101e64:	2320      	movs	r3, #32
 8101e66:	e003      	b.n	8101e70 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8101e68:	6a3b      	ldr	r3, [r7, #32]
 8101e6a:	fab3 f383 	clz	r3, r3
 8101e6e:	b2db      	uxtb	r3, r3
 8101e70:	3301      	adds	r3, #1
 8101e72:	f003 031f 	and.w	r3, r3, #31
 8101e76:	2101      	movs	r1, #1
 8101e78:	fa01 f303 	lsl.w	r3, r1, r3
 8101e7c:	ea42 0103 	orr.w	r1, r2, r3
 8101e80:	683b      	ldr	r3, [r7, #0]
 8101e82:	681b      	ldr	r3, [r3, #0]
 8101e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e88:	2b00      	cmp	r3, #0
 8101e8a:	d10d      	bne.n	8101ea8 <HAL_ADC_ConfigChannel+0x488>
 8101e8c:	683b      	ldr	r3, [r7, #0]
 8101e8e:	681b      	ldr	r3, [r3, #0]
 8101e90:	0e9b      	lsrs	r3, r3, #26
 8101e92:	3301      	adds	r3, #1
 8101e94:	f003 021f 	and.w	r2, r3, #31
 8101e98:	4613      	mov	r3, r2
 8101e9a:	005b      	lsls	r3, r3, #1
 8101e9c:	4413      	add	r3, r2
 8101e9e:	3b1e      	subs	r3, #30
 8101ea0:	051b      	lsls	r3, r3, #20
 8101ea2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101ea6:	e01b      	b.n	8101ee0 <HAL_ADC_ConfigChannel+0x4c0>
 8101ea8:	683b      	ldr	r3, [r7, #0]
 8101eaa:	681b      	ldr	r3, [r3, #0]
 8101eac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101eae:	693b      	ldr	r3, [r7, #16]
 8101eb0:	fa93 f3a3 	rbit	r3, r3
 8101eb4:	60fb      	str	r3, [r7, #12]
  return result;
 8101eb6:	68fb      	ldr	r3, [r7, #12]
 8101eb8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8101eba:	697b      	ldr	r3, [r7, #20]
 8101ebc:	2b00      	cmp	r3, #0
 8101ebe:	d101      	bne.n	8101ec4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8101ec0:	2320      	movs	r3, #32
 8101ec2:	e003      	b.n	8101ecc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8101ec4:	697b      	ldr	r3, [r7, #20]
 8101ec6:	fab3 f383 	clz	r3, r3
 8101eca:	b2db      	uxtb	r3, r3
 8101ecc:	3301      	adds	r3, #1
 8101ece:	f003 021f 	and.w	r2, r3, #31
 8101ed2:	4613      	mov	r3, r2
 8101ed4:	005b      	lsls	r3, r3, #1
 8101ed6:	4413      	add	r3, r2
 8101ed8:	3b1e      	subs	r3, #30
 8101eda:	051b      	lsls	r3, r3, #20
 8101edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8101ee0:	430b      	orrs	r3, r1
 8101ee2:	683a      	ldr	r2, [r7, #0]
 8101ee4:	6892      	ldr	r2, [r2, #8]
 8101ee6:	4619      	mov	r1, r3
 8101ee8:	f7ff fb20 	bl	810152c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8101eec:	683b      	ldr	r3, [r7, #0]
 8101eee:	681b      	ldr	r3, [r3, #0]
 8101ef0:	2b00      	cmp	r3, #0
 8101ef2:	f280 80c6 	bge.w	8102082 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101ef6:	687b      	ldr	r3, [r7, #4]
 8101ef8:	681b      	ldr	r3, [r3, #0]
 8101efa:	4a67      	ldr	r2, [pc, #412]	; (8102098 <HAL_ADC_ConfigChannel+0x678>)
 8101efc:	4293      	cmp	r3, r2
 8101efe:	d004      	beq.n	8101f0a <HAL_ADC_ConfigChannel+0x4ea>
 8101f00:	687b      	ldr	r3, [r7, #4]
 8101f02:	681b      	ldr	r3, [r3, #0]
 8101f04:	4a65      	ldr	r2, [pc, #404]	; (810209c <HAL_ADC_ConfigChannel+0x67c>)
 8101f06:	4293      	cmp	r3, r2
 8101f08:	d101      	bne.n	8101f0e <HAL_ADC_ConfigChannel+0x4ee>
 8101f0a:	4b65      	ldr	r3, [pc, #404]	; (81020a0 <HAL_ADC_ConfigChannel+0x680>)
 8101f0c:	e000      	b.n	8101f10 <HAL_ADC_ConfigChannel+0x4f0>
 8101f0e:	4b65      	ldr	r3, [pc, #404]	; (81020a4 <HAL_ADC_ConfigChannel+0x684>)
 8101f10:	4618      	mov	r0, r3
 8101f12:	f7ff fa7d 	bl	8101410 <LL_ADC_GetCommonPathInternalCh>
 8101f16:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101f18:	687b      	ldr	r3, [r7, #4]
 8101f1a:	681b      	ldr	r3, [r3, #0]
 8101f1c:	4a5e      	ldr	r2, [pc, #376]	; (8102098 <HAL_ADC_ConfigChannel+0x678>)
 8101f1e:	4293      	cmp	r3, r2
 8101f20:	d004      	beq.n	8101f2c <HAL_ADC_ConfigChannel+0x50c>
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	681b      	ldr	r3, [r3, #0]
 8101f26:	4a5d      	ldr	r2, [pc, #372]	; (810209c <HAL_ADC_ConfigChannel+0x67c>)
 8101f28:	4293      	cmp	r3, r2
 8101f2a:	d10e      	bne.n	8101f4a <HAL_ADC_ConfigChannel+0x52a>
 8101f2c:	485a      	ldr	r0, [pc, #360]	; (8102098 <HAL_ADC_ConfigChannel+0x678>)
 8101f2e:	f7ff fb9b 	bl	8101668 <LL_ADC_IsEnabled>
 8101f32:	4604      	mov	r4, r0
 8101f34:	4859      	ldr	r0, [pc, #356]	; (810209c <HAL_ADC_ConfigChannel+0x67c>)
 8101f36:	f7ff fb97 	bl	8101668 <LL_ADC_IsEnabled>
 8101f3a:	4603      	mov	r3, r0
 8101f3c:	4323      	orrs	r3, r4
 8101f3e:	2b00      	cmp	r3, #0
 8101f40:	bf0c      	ite	eq
 8101f42:	2301      	moveq	r3, #1
 8101f44:	2300      	movne	r3, #0
 8101f46:	b2db      	uxtb	r3, r3
 8101f48:	e008      	b.n	8101f5c <HAL_ADC_ConfigChannel+0x53c>
 8101f4a:	4857      	ldr	r0, [pc, #348]	; (81020a8 <HAL_ADC_ConfigChannel+0x688>)
 8101f4c:	f7ff fb8c 	bl	8101668 <LL_ADC_IsEnabled>
 8101f50:	4603      	mov	r3, r0
 8101f52:	2b00      	cmp	r3, #0
 8101f54:	bf0c      	ite	eq
 8101f56:	2301      	moveq	r3, #1
 8101f58:	2300      	movne	r3, #0
 8101f5a:	b2db      	uxtb	r3, r3
 8101f5c:	2b00      	cmp	r3, #0
 8101f5e:	d07d      	beq.n	810205c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8101f60:	683b      	ldr	r3, [r7, #0]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	4a51      	ldr	r2, [pc, #324]	; (81020ac <HAL_ADC_ConfigChannel+0x68c>)
 8101f66:	4293      	cmp	r3, r2
 8101f68:	d130      	bne.n	8101fcc <HAL_ADC_ConfigChannel+0x5ac>
 8101f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8101f70:	2b00      	cmp	r3, #0
 8101f72:	d12b      	bne.n	8101fcc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	4a4b      	ldr	r2, [pc, #300]	; (81020a8 <HAL_ADC_ConfigChannel+0x688>)
 8101f7a:	4293      	cmp	r3, r2
 8101f7c:	f040 8081 	bne.w	8102082 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	681b      	ldr	r3, [r3, #0]
 8101f84:	4a44      	ldr	r2, [pc, #272]	; (8102098 <HAL_ADC_ConfigChannel+0x678>)
 8101f86:	4293      	cmp	r3, r2
 8101f88:	d004      	beq.n	8101f94 <HAL_ADC_ConfigChannel+0x574>
 8101f8a:	687b      	ldr	r3, [r7, #4]
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	4a43      	ldr	r2, [pc, #268]	; (810209c <HAL_ADC_ConfigChannel+0x67c>)
 8101f90:	4293      	cmp	r3, r2
 8101f92:	d101      	bne.n	8101f98 <HAL_ADC_ConfigChannel+0x578>
 8101f94:	4a42      	ldr	r2, [pc, #264]	; (81020a0 <HAL_ADC_ConfigChannel+0x680>)
 8101f96:	e000      	b.n	8101f9a <HAL_ADC_ConfigChannel+0x57a>
 8101f98:	4a42      	ldr	r2, [pc, #264]	; (81020a4 <HAL_ADC_ConfigChannel+0x684>)
 8101f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101f9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8101fa0:	4619      	mov	r1, r3
 8101fa2:	4610      	mov	r0, r2
 8101fa4:	f7ff fa21 	bl	81013ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101fa8:	4b41      	ldr	r3, [pc, #260]	; (81020b0 <HAL_ADC_ConfigChannel+0x690>)
 8101faa:	681b      	ldr	r3, [r3, #0]
 8101fac:	099b      	lsrs	r3, r3, #6
 8101fae:	4a41      	ldr	r2, [pc, #260]	; (81020b4 <HAL_ADC_ConfigChannel+0x694>)
 8101fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8101fb4:	099b      	lsrs	r3, r3, #6
 8101fb6:	3301      	adds	r3, #1
 8101fb8:	005b      	lsls	r3, r3, #1
 8101fba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101fbc:	e002      	b.n	8101fc4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8101fbe:	68bb      	ldr	r3, [r7, #8]
 8101fc0:	3b01      	subs	r3, #1
 8101fc2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8101fc4:	68bb      	ldr	r3, [r7, #8]
 8101fc6:	2b00      	cmp	r3, #0
 8101fc8:	d1f9      	bne.n	8101fbe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8101fca:	e05a      	b.n	8102082 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8101fcc:	683b      	ldr	r3, [r7, #0]
 8101fce:	681b      	ldr	r3, [r3, #0]
 8101fd0:	4a39      	ldr	r2, [pc, #228]	; (81020b8 <HAL_ADC_ConfigChannel+0x698>)
 8101fd2:	4293      	cmp	r3, r2
 8101fd4:	d11e      	bne.n	8102014 <HAL_ADC_ConfigChannel+0x5f4>
 8101fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101fd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8101fdc:	2b00      	cmp	r3, #0
 8101fde:	d119      	bne.n	8102014 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	4a30      	ldr	r2, [pc, #192]	; (81020a8 <HAL_ADC_ConfigChannel+0x688>)
 8101fe6:	4293      	cmp	r3, r2
 8101fe8:	d14b      	bne.n	8102082 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	4a2a      	ldr	r2, [pc, #168]	; (8102098 <HAL_ADC_ConfigChannel+0x678>)
 8101ff0:	4293      	cmp	r3, r2
 8101ff2:	d004      	beq.n	8101ffe <HAL_ADC_ConfigChannel+0x5de>
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	4a28      	ldr	r2, [pc, #160]	; (810209c <HAL_ADC_ConfigChannel+0x67c>)
 8101ffa:	4293      	cmp	r3, r2
 8101ffc:	d101      	bne.n	8102002 <HAL_ADC_ConfigChannel+0x5e2>
 8101ffe:	4a28      	ldr	r2, [pc, #160]	; (81020a0 <HAL_ADC_ConfigChannel+0x680>)
 8102000:	e000      	b.n	8102004 <HAL_ADC_ConfigChannel+0x5e4>
 8102002:	4a28      	ldr	r2, [pc, #160]	; (81020a4 <HAL_ADC_ConfigChannel+0x684>)
 8102004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810200a:	4619      	mov	r1, r3
 810200c:	4610      	mov	r0, r2
 810200e:	f7ff f9ec 	bl	81013ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102012:	e036      	b.n	8102082 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102014:	683b      	ldr	r3, [r7, #0]
 8102016:	681b      	ldr	r3, [r3, #0]
 8102018:	4a28      	ldr	r2, [pc, #160]	; (81020bc <HAL_ADC_ConfigChannel+0x69c>)
 810201a:	4293      	cmp	r3, r2
 810201c:	d131      	bne.n	8102082 <HAL_ADC_ConfigChannel+0x662>
 810201e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102024:	2b00      	cmp	r3, #0
 8102026:	d12c      	bne.n	8102082 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102028:	687b      	ldr	r3, [r7, #4]
 810202a:	681b      	ldr	r3, [r3, #0]
 810202c:	4a1e      	ldr	r2, [pc, #120]	; (81020a8 <HAL_ADC_ConfigChannel+0x688>)
 810202e:	4293      	cmp	r3, r2
 8102030:	d127      	bne.n	8102082 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	681b      	ldr	r3, [r3, #0]
 8102036:	4a18      	ldr	r2, [pc, #96]	; (8102098 <HAL_ADC_ConfigChannel+0x678>)
 8102038:	4293      	cmp	r3, r2
 810203a:	d004      	beq.n	8102046 <HAL_ADC_ConfigChannel+0x626>
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	681b      	ldr	r3, [r3, #0]
 8102040:	4a16      	ldr	r2, [pc, #88]	; (810209c <HAL_ADC_ConfigChannel+0x67c>)
 8102042:	4293      	cmp	r3, r2
 8102044:	d101      	bne.n	810204a <HAL_ADC_ConfigChannel+0x62a>
 8102046:	4a16      	ldr	r2, [pc, #88]	; (81020a0 <HAL_ADC_ConfigChannel+0x680>)
 8102048:	e000      	b.n	810204c <HAL_ADC_ConfigChannel+0x62c>
 810204a:	4a16      	ldr	r2, [pc, #88]	; (81020a4 <HAL_ADC_ConfigChannel+0x684>)
 810204c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810204e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102052:	4619      	mov	r1, r3
 8102054:	4610      	mov	r0, r2
 8102056:	f7ff f9c8 	bl	81013ea <LL_ADC_SetCommonPathInternalCh>
 810205a:	e012      	b.n	8102082 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102060:	f043 0220 	orr.w	r2, r3, #32
 8102064:	687b      	ldr	r3, [r7, #4]
 8102066:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102068:	2301      	movs	r3, #1
 810206a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 810206e:	e008      	b.n	8102082 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102070:	687b      	ldr	r3, [r7, #4]
 8102072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102074:	f043 0220 	orr.w	r2, r3, #32
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810207c:	2301      	movs	r3, #1
 810207e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102082:	687b      	ldr	r3, [r7, #4]
 8102084:	2200      	movs	r2, #0
 8102086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810208a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 810208e:	4618      	mov	r0, r3
 8102090:	3784      	adds	r7, #132	; 0x84
 8102092:	46bd      	mov	sp, r7
 8102094:	bd90      	pop	{r4, r7, pc}
 8102096:	bf00      	nop
 8102098:	40022000 	.word	0x40022000
 810209c:	40022100 	.word	0x40022100
 81020a0:	40022300 	.word	0x40022300
 81020a4:	58026300 	.word	0x58026300
 81020a8:	58026000 	.word	0x58026000
 81020ac:	cb840000 	.word	0xcb840000
 81020b0:	10000000 	.word	0x10000000
 81020b4:	053e2d63 	.word	0x053e2d63
 81020b8:	c7520000 	.word	0xc7520000
 81020bc:	cfb80000 	.word	0xcfb80000

081020c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81020c0:	b580      	push	{r7, lr}
 81020c2:	b084      	sub	sp, #16
 81020c4:	af00      	add	r7, sp, #0
 81020c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81020c8:	687b      	ldr	r3, [r7, #4]
 81020ca:	681b      	ldr	r3, [r3, #0]
 81020cc:	4a7a      	ldr	r2, [pc, #488]	; (81022b8 <ADC_ConfigureBoostMode+0x1f8>)
 81020ce:	4293      	cmp	r3, r2
 81020d0:	d004      	beq.n	81020dc <ADC_ConfigureBoostMode+0x1c>
 81020d2:	687b      	ldr	r3, [r7, #4]
 81020d4:	681b      	ldr	r3, [r3, #0]
 81020d6:	4a79      	ldr	r2, [pc, #484]	; (81022bc <ADC_ConfigureBoostMode+0x1fc>)
 81020d8:	4293      	cmp	r3, r2
 81020da:	d109      	bne.n	81020f0 <ADC_ConfigureBoostMode+0x30>
 81020dc:	4b78      	ldr	r3, [pc, #480]	; (81022c0 <ADC_ConfigureBoostMode+0x200>)
 81020de:	689b      	ldr	r3, [r3, #8]
 81020e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020e4:	2b00      	cmp	r3, #0
 81020e6:	bf14      	ite	ne
 81020e8:	2301      	movne	r3, #1
 81020ea:	2300      	moveq	r3, #0
 81020ec:	b2db      	uxtb	r3, r3
 81020ee:	e008      	b.n	8102102 <ADC_ConfigureBoostMode+0x42>
 81020f0:	4b74      	ldr	r3, [pc, #464]	; (81022c4 <ADC_ConfigureBoostMode+0x204>)
 81020f2:	689b      	ldr	r3, [r3, #8]
 81020f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81020f8:	2b00      	cmp	r3, #0
 81020fa:	bf14      	ite	ne
 81020fc:	2301      	movne	r3, #1
 81020fe:	2300      	moveq	r3, #0
 8102100:	b2db      	uxtb	r3, r3
 8102102:	2b00      	cmp	r3, #0
 8102104:	d01c      	beq.n	8102140 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8102106:	f001 f835 	bl	8103174 <HAL_RCC_GetHCLKFreq>
 810210a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	685b      	ldr	r3, [r3, #4]
 8102110:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102114:	d010      	beq.n	8102138 <ADC_ConfigureBoostMode+0x78>
 8102116:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810211a:	d873      	bhi.n	8102204 <ADC_ConfigureBoostMode+0x144>
 810211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102120:	d002      	beq.n	8102128 <ADC_ConfigureBoostMode+0x68>
 8102122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102126:	d16d      	bne.n	8102204 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	685b      	ldr	r3, [r3, #4]
 810212c:	0c1b      	lsrs	r3, r3, #16
 810212e:	68fa      	ldr	r2, [r7, #12]
 8102130:	fbb2 f3f3 	udiv	r3, r2, r3
 8102134:	60fb      	str	r3, [r7, #12]
        break;
 8102136:	e068      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8102138:	68fb      	ldr	r3, [r7, #12]
 810213a:	089b      	lsrs	r3, r3, #2
 810213c:	60fb      	str	r3, [r7, #12]
        break;
 810213e:	e064      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102140:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8102144:	f04f 0100 	mov.w	r1, #0
 8102148:	f002 faa6 	bl	8104698 <HAL_RCCEx_GetPeriphCLKFreq>
 810214c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 810214e:	687b      	ldr	r3, [r7, #4]
 8102150:	685b      	ldr	r3, [r3, #4]
 8102152:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102156:	d051      	beq.n	81021fc <ADC_ConfigureBoostMode+0x13c>
 8102158:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 810215c:	d854      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 810215e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102162:	d047      	beq.n	81021f4 <ADC_ConfigureBoostMode+0x134>
 8102164:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102168:	d84e      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 810216a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 810216e:	d03d      	beq.n	81021ec <ADC_ConfigureBoostMode+0x12c>
 8102170:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102174:	d848      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 8102176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810217a:	d033      	beq.n	81021e4 <ADC_ConfigureBoostMode+0x124>
 810217c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102180:	d842      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 8102182:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102186:	d029      	beq.n	81021dc <ADC_ConfigureBoostMode+0x11c>
 8102188:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810218c:	d83c      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 810218e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102192:	d01a      	beq.n	81021ca <ADC_ConfigureBoostMode+0x10a>
 8102194:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102198:	d836      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 810219a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 810219e:	d014      	beq.n	81021ca <ADC_ConfigureBoostMode+0x10a>
 81021a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 81021a4:	d830      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 81021a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81021aa:	d00e      	beq.n	81021ca <ADC_ConfigureBoostMode+0x10a>
 81021ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81021b0:	d82a      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 81021b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81021b6:	d008      	beq.n	81021ca <ADC_ConfigureBoostMode+0x10a>
 81021b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 81021bc:	d824      	bhi.n	8102208 <ADC_ConfigureBoostMode+0x148>
 81021be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81021c2:	d002      	beq.n	81021ca <ADC_ConfigureBoostMode+0x10a>
 81021c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81021c8:	d11e      	bne.n	8102208 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 81021ca:	687b      	ldr	r3, [r7, #4]
 81021cc:	685b      	ldr	r3, [r3, #4]
 81021ce:	0c9b      	lsrs	r3, r3, #18
 81021d0:	005b      	lsls	r3, r3, #1
 81021d2:	68fa      	ldr	r2, [r7, #12]
 81021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 81021d8:	60fb      	str	r3, [r7, #12]
        break;
 81021da:	e016      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 81021dc:	68fb      	ldr	r3, [r7, #12]
 81021de:	091b      	lsrs	r3, r3, #4
 81021e0:	60fb      	str	r3, [r7, #12]
        break;
 81021e2:	e012      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 81021e4:	68fb      	ldr	r3, [r7, #12]
 81021e6:	095b      	lsrs	r3, r3, #5
 81021e8:	60fb      	str	r3, [r7, #12]
        break;
 81021ea:	e00e      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 81021ec:	68fb      	ldr	r3, [r7, #12]
 81021ee:	099b      	lsrs	r3, r3, #6
 81021f0:	60fb      	str	r3, [r7, #12]
        break;
 81021f2:	e00a      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 81021f4:	68fb      	ldr	r3, [r7, #12]
 81021f6:	09db      	lsrs	r3, r3, #7
 81021f8:	60fb      	str	r3, [r7, #12]
        break;
 81021fa:	e006      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 81021fc:	68fb      	ldr	r3, [r7, #12]
 81021fe:	0a1b      	lsrs	r3, r3, #8
 8102200:	60fb      	str	r3, [r7, #12]
        break;
 8102202:	e002      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
        break;
 8102204:	bf00      	nop
 8102206:	e000      	b.n	810220a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8102208:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810220a:	f7ff f8b9 	bl	8101380 <HAL_GetREVID>
 810220e:	4603      	mov	r3, r0
 8102210:	f241 0203 	movw	r2, #4099	; 0x1003
 8102214:	4293      	cmp	r3, r2
 8102216:	d815      	bhi.n	8102244 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8102218:	68fb      	ldr	r3, [r7, #12]
 810221a:	4a2b      	ldr	r2, [pc, #172]	; (81022c8 <ADC_ConfigureBoostMode+0x208>)
 810221c:	4293      	cmp	r3, r2
 810221e:	d908      	bls.n	8102232 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102220:	687b      	ldr	r3, [r7, #4]
 8102222:	681b      	ldr	r3, [r3, #0]
 8102224:	689a      	ldr	r2, [r3, #8]
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810222e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102230:	e03e      	b.n	81022b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	689a      	ldr	r2, [r3, #8]
 8102238:	687b      	ldr	r3, [r7, #4]
 810223a:	681b      	ldr	r3, [r3, #0]
 810223c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102240:	609a      	str	r2, [r3, #8]
}
 8102242:	e035      	b.n	81022b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8102244:	68fb      	ldr	r3, [r7, #12]
 8102246:	085b      	lsrs	r3, r3, #1
 8102248:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 810224a:	68fb      	ldr	r3, [r7, #12]
 810224c:	4a1f      	ldr	r2, [pc, #124]	; (81022cc <ADC_ConfigureBoostMode+0x20c>)
 810224e:	4293      	cmp	r3, r2
 8102250:	d808      	bhi.n	8102264 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	681b      	ldr	r3, [r3, #0]
 8102256:	689a      	ldr	r2, [r3, #8]
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102260:	609a      	str	r2, [r3, #8]
}
 8102262:	e025      	b.n	81022b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8102264:	68fb      	ldr	r3, [r7, #12]
 8102266:	4a1a      	ldr	r2, [pc, #104]	; (81022d0 <ADC_ConfigureBoostMode+0x210>)
 8102268:	4293      	cmp	r3, r2
 810226a:	d80a      	bhi.n	8102282 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	689b      	ldr	r3, [r3, #8]
 8102272:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	681b      	ldr	r3, [r3, #0]
 810227a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810227e:	609a      	str	r2, [r3, #8]
}
 8102280:	e016      	b.n	81022b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8102282:	68fb      	ldr	r3, [r7, #12]
 8102284:	4a13      	ldr	r2, [pc, #76]	; (81022d4 <ADC_ConfigureBoostMode+0x214>)
 8102286:	4293      	cmp	r3, r2
 8102288:	d80a      	bhi.n	81022a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	681b      	ldr	r3, [r3, #0]
 810228e:	689b      	ldr	r3, [r3, #8]
 8102290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810229c:	609a      	str	r2, [r3, #8]
}
 810229e:	e007      	b.n	81022b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 81022a0:	687b      	ldr	r3, [r7, #4]
 81022a2:	681b      	ldr	r3, [r3, #0]
 81022a4:	689a      	ldr	r2, [r3, #8]
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	681b      	ldr	r3, [r3, #0]
 81022aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 81022ae:	609a      	str	r2, [r3, #8]
}
 81022b0:	bf00      	nop
 81022b2:	3710      	adds	r7, #16
 81022b4:	46bd      	mov	sp, r7
 81022b6:	bd80      	pop	{r7, pc}
 81022b8:	40022000 	.word	0x40022000
 81022bc:	40022100 	.word	0x40022100
 81022c0:	40022300 	.word	0x40022300
 81022c4:	58026300 	.word	0x58026300
 81022c8:	01312d00 	.word	0x01312d00
 81022cc:	005f5e10 	.word	0x005f5e10
 81022d0:	00bebc20 	.word	0x00bebc20
 81022d4:	017d7840 	.word	0x017d7840

081022d8 <LL_ADC_IsEnabled>:
{
 81022d8:	b480      	push	{r7}
 81022da:	b083      	sub	sp, #12
 81022dc:	af00      	add	r7, sp, #0
 81022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	689b      	ldr	r3, [r3, #8]
 81022e4:	f003 0301 	and.w	r3, r3, #1
 81022e8:	2b01      	cmp	r3, #1
 81022ea:	d101      	bne.n	81022f0 <LL_ADC_IsEnabled+0x18>
 81022ec:	2301      	movs	r3, #1
 81022ee:	e000      	b.n	81022f2 <LL_ADC_IsEnabled+0x1a>
 81022f0:	2300      	movs	r3, #0
}
 81022f2:	4618      	mov	r0, r3
 81022f4:	370c      	adds	r7, #12
 81022f6:	46bd      	mov	sp, r7
 81022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fc:	4770      	bx	lr

081022fe <LL_ADC_REG_IsConversionOngoing>:
{
 81022fe:	b480      	push	{r7}
 8102300:	b083      	sub	sp, #12
 8102302:	af00      	add	r7, sp, #0
 8102304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	689b      	ldr	r3, [r3, #8]
 810230a:	f003 0304 	and.w	r3, r3, #4
 810230e:	2b04      	cmp	r3, #4
 8102310:	d101      	bne.n	8102316 <LL_ADC_REG_IsConversionOngoing+0x18>
 8102312:	2301      	movs	r3, #1
 8102314:	e000      	b.n	8102318 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8102316:	2300      	movs	r3, #0
}
 8102318:	4618      	mov	r0, r3
 810231a:	370c      	adds	r7, #12
 810231c:	46bd      	mov	sp, r7
 810231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102322:	4770      	bx	lr

08102324 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8102324:	b590      	push	{r4, r7, lr}
 8102326:	b09f      	sub	sp, #124	; 0x7c
 8102328:	af00      	add	r7, sp, #0
 810232a:	6078      	str	r0, [r7, #4]
 810232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810232e:	2300      	movs	r3, #0
 8102330:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8102334:	687b      	ldr	r3, [r7, #4]
 8102336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 810233a:	2b01      	cmp	r3, #1
 810233c:	d101      	bne.n	8102342 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 810233e:	2302      	movs	r3, #2
 8102340:	e0c4      	b.n	81024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	2201      	movs	r2, #1
 8102346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 810234a:	2300      	movs	r3, #0
 810234c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 810234e:	2300      	movs	r3, #0
 8102350:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8102352:	687b      	ldr	r3, [r7, #4]
 8102354:	681b      	ldr	r3, [r3, #0]
 8102356:	4a5f      	ldr	r2, [pc, #380]	; (81024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102358:	4293      	cmp	r3, r2
 810235a:	d102      	bne.n	8102362 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 810235c:	4b5e      	ldr	r3, [pc, #376]	; (81024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810235e:	60bb      	str	r3, [r7, #8]
 8102360:	e001      	b.n	8102366 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8102362:	2300      	movs	r3, #0
 8102364:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8102366:	68bb      	ldr	r3, [r7, #8]
 8102368:	2b00      	cmp	r3, #0
 810236a:	d10b      	bne.n	8102384 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810236c:	687b      	ldr	r3, [r7, #4]
 810236e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102370:	f043 0220 	orr.w	r2, r3, #32
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	2200      	movs	r2, #0
 810237c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8102380:	2301      	movs	r3, #1
 8102382:	e0a3      	b.n	81024cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102384:	68bb      	ldr	r3, [r7, #8]
 8102386:	4618      	mov	r0, r3
 8102388:	f7ff ffb9 	bl	81022fe <LL_ADC_REG_IsConversionOngoing>
 810238c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 810238e:	687b      	ldr	r3, [r7, #4]
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	4618      	mov	r0, r3
 8102394:	f7ff ffb3 	bl	81022fe <LL_ADC_REG_IsConversionOngoing>
 8102398:	4603      	mov	r3, r0
 810239a:	2b00      	cmp	r3, #0
 810239c:	f040 8085 	bne.w	81024aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 81023a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	f040 8081 	bne.w	81024aa <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 81023a8:	687b      	ldr	r3, [r7, #4]
 81023aa:	681b      	ldr	r3, [r3, #0]
 81023ac:	4a49      	ldr	r2, [pc, #292]	; (81024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81023ae:	4293      	cmp	r3, r2
 81023b0:	d004      	beq.n	81023bc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 81023b2:	687b      	ldr	r3, [r7, #4]
 81023b4:	681b      	ldr	r3, [r3, #0]
 81023b6:	4a48      	ldr	r2, [pc, #288]	; (81024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81023b8:	4293      	cmp	r3, r2
 81023ba:	d101      	bne.n	81023c0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 81023bc:	4b47      	ldr	r3, [pc, #284]	; (81024dc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 81023be:	e000      	b.n	81023c2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 81023c0:	4b47      	ldr	r3, [pc, #284]	; (81024e0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 81023c2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81023c4:	683b      	ldr	r3, [r7, #0]
 81023c6:	681b      	ldr	r3, [r3, #0]
 81023c8:	2b00      	cmp	r3, #0
 81023ca:	d03b      	beq.n	8102444 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 81023cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023ce:	689b      	ldr	r3, [r3, #8]
 81023d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81023d4:	683b      	ldr	r3, [r7, #0]
 81023d6:	685b      	ldr	r3, [r3, #4]
 81023d8:	431a      	orrs	r2, r3
 81023da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023dc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81023de:	687b      	ldr	r3, [r7, #4]
 81023e0:	681b      	ldr	r3, [r3, #0]
 81023e2:	4a3c      	ldr	r2, [pc, #240]	; (81024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81023e4:	4293      	cmp	r3, r2
 81023e6:	d004      	beq.n	81023f2 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	4a3a      	ldr	r2, [pc, #232]	; (81024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81023ee:	4293      	cmp	r3, r2
 81023f0:	d10e      	bne.n	8102410 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 81023f2:	4838      	ldr	r0, [pc, #224]	; (81024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81023f4:	f7ff ff70 	bl	81022d8 <LL_ADC_IsEnabled>
 81023f8:	4604      	mov	r4, r0
 81023fa:	4837      	ldr	r0, [pc, #220]	; (81024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81023fc:	f7ff ff6c 	bl	81022d8 <LL_ADC_IsEnabled>
 8102400:	4603      	mov	r3, r0
 8102402:	4323      	orrs	r3, r4
 8102404:	2b00      	cmp	r3, #0
 8102406:	bf0c      	ite	eq
 8102408:	2301      	moveq	r3, #1
 810240a:	2300      	movne	r3, #0
 810240c:	b2db      	uxtb	r3, r3
 810240e:	e008      	b.n	8102422 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8102410:	4834      	ldr	r0, [pc, #208]	; (81024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102412:	f7ff ff61 	bl	81022d8 <LL_ADC_IsEnabled>
 8102416:	4603      	mov	r3, r0
 8102418:	2b00      	cmp	r3, #0
 810241a:	bf0c      	ite	eq
 810241c:	2301      	moveq	r3, #1
 810241e:	2300      	movne	r3, #0
 8102420:	b2db      	uxtb	r3, r3
 8102422:	2b00      	cmp	r3, #0
 8102424:	d04b      	beq.n	81024be <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8102426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102428:	689b      	ldr	r3, [r3, #8]
 810242a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 810242e:	f023 030f 	bic.w	r3, r3, #15
 8102432:	683a      	ldr	r2, [r7, #0]
 8102434:	6811      	ldr	r1, [r2, #0]
 8102436:	683a      	ldr	r2, [r7, #0]
 8102438:	6892      	ldr	r2, [r2, #8]
 810243a:	430a      	orrs	r2, r1
 810243c:	431a      	orrs	r2, r3
 810243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102440:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102442:	e03c      	b.n	81024be <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8102444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102446:	689b      	ldr	r3, [r3, #8]
 8102448:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 810244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810244e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102450:	687b      	ldr	r3, [r7, #4]
 8102452:	681b      	ldr	r3, [r3, #0]
 8102454:	4a1f      	ldr	r2, [pc, #124]	; (81024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102456:	4293      	cmp	r3, r2
 8102458:	d004      	beq.n	8102464 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	681b      	ldr	r3, [r3, #0]
 810245e:	4a1e      	ldr	r2, [pc, #120]	; (81024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102460:	4293      	cmp	r3, r2
 8102462:	d10e      	bne.n	8102482 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8102464:	481b      	ldr	r0, [pc, #108]	; (81024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102466:	f7ff ff37 	bl	81022d8 <LL_ADC_IsEnabled>
 810246a:	4604      	mov	r4, r0
 810246c:	481a      	ldr	r0, [pc, #104]	; (81024d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810246e:	f7ff ff33 	bl	81022d8 <LL_ADC_IsEnabled>
 8102472:	4603      	mov	r3, r0
 8102474:	4323      	orrs	r3, r4
 8102476:	2b00      	cmp	r3, #0
 8102478:	bf0c      	ite	eq
 810247a:	2301      	moveq	r3, #1
 810247c:	2300      	movne	r3, #0
 810247e:	b2db      	uxtb	r3, r3
 8102480:	e008      	b.n	8102494 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8102482:	4818      	ldr	r0, [pc, #96]	; (81024e4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102484:	f7ff ff28 	bl	81022d8 <LL_ADC_IsEnabled>
 8102488:	4603      	mov	r3, r0
 810248a:	2b00      	cmp	r3, #0
 810248c:	bf0c      	ite	eq
 810248e:	2301      	moveq	r3, #1
 8102490:	2300      	movne	r3, #0
 8102492:	b2db      	uxtb	r3, r3
 8102494:	2b00      	cmp	r3, #0
 8102496:	d012      	beq.n	81024be <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8102498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810249a:	689b      	ldr	r3, [r3, #8]
 810249c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81024a0:	f023 030f 	bic.w	r3, r3, #15
 81024a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81024a6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81024a8:	e009      	b.n	81024be <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024ae:	f043 0220 	orr.w	r2, r3, #32
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 81024b6:	2301      	movs	r3, #1
 81024b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 81024bc:	e000      	b.n	81024c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81024be:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 81024c0:	687b      	ldr	r3, [r7, #4]
 81024c2:	2200      	movs	r2, #0
 81024c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 81024c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 81024cc:	4618      	mov	r0, r3
 81024ce:	377c      	adds	r7, #124	; 0x7c
 81024d0:	46bd      	mov	sp, r7
 81024d2:	bd90      	pop	{r4, r7, pc}
 81024d4:	40022000 	.word	0x40022000
 81024d8:	40022100 	.word	0x40022100
 81024dc:	40022300 	.word	0x40022300
 81024e0:	58026300 	.word	0x58026300
 81024e4:	58026000 	.word	0x58026000

081024e8 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 81024e8:	b580      	push	{r7, lr}
 81024ea:	b082      	sub	sp, #8
 81024ec:	af00      	add	r7, sp, #0
 81024ee:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 81024f0:	687b      	ldr	r3, [r7, #4]
 81024f2:	2b00      	cmp	r3, #0
 81024f4:	d003      	beq.n	81024fe <HAL_CEC_Init+0x16>
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024fa:	2b00      	cmp	r3, #0
 81024fc:	d101      	bne.n	8102502 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 81024fe:	2301      	movs	r3, #1
 8102500:	e050      	b.n	81025a4 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8102502:	687b      	ldr	r3, [r7, #4]
 8102504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102506:	2b00      	cmp	r3, #0
 8102508:	d106      	bne.n	8102518 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 810250a:	687b      	ldr	r3, [r7, #4]
 810250c:	2200      	movs	r2, #0
 810250e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8102512:	6878      	ldr	r0, [r7, #4]
 8102514:	f7fe fbe2 	bl	8100cdc <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8102518:	687b      	ldr	r3, [r7, #4]
 810251a:	2224      	movs	r2, #36	; 0x24
 810251c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 810251e:	687b      	ldr	r3, [r7, #4]
 8102520:	681b      	ldr	r3, [r3, #0]
 8102522:	681a      	ldr	r2, [r3, #0]
 8102524:	687b      	ldr	r3, [r7, #4]
 8102526:	681b      	ldr	r3, [r3, #0]
 8102528:	f022 0201 	bic.w	r2, r2, #1
 810252c:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	685a      	ldr	r2, [r3, #4]
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	689b      	ldr	r3, [r3, #8]
 8102536:	431a      	orrs	r2, r3
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	68db      	ldr	r3, [r3, #12]
 810253c:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810253e:	687b      	ldr	r3, [r7, #4]
 8102540:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102542:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8102544:	687b      	ldr	r3, [r7, #4]
 8102546:	695b      	ldr	r3, [r3, #20]
 8102548:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 810254e:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8102554:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 810255a:	041b      	lsls	r3, r3, #16
 810255c:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8102560:	687b      	ldr	r3, [r7, #4]
 8102562:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8102568:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 810256a:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 810256c:	687b      	ldr	r3, [r7, #4]
 810256e:	681b      	ldr	r3, [r3, #0]
 8102570:	695b      	ldr	r3, [r3, #20]
 8102572:	687a      	ldr	r2, [r7, #4]
 8102574:	6812      	ldr	r2, [r2, #0]
 8102576:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 810257a:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 810257e:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	681b      	ldr	r3, [r3, #0]
 8102584:	681a      	ldr	r2, [r3, #0]
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	681b      	ldr	r3, [r3, #0]
 810258a:	f042 0201 	orr.w	r2, r2, #1
 810258e:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	2200      	movs	r2, #0
 8102594:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	2220      	movs	r2, #32
 810259a:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	2220      	movs	r2, #32
 81025a0:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81025a2:	2300      	movs	r3, #0
}
 81025a4:	4618      	mov	r0, r3
 81025a6:	3708      	adds	r7, #8
 81025a8:	46bd      	mov	sp, r7
 81025aa:	bd80      	pop	{r7, pc}

081025ac <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 81025ac:	b580      	push	{r7, lr}
 81025ae:	b084      	sub	sp, #16
 81025b0:	af00      	add	r7, sp, #0
 81025b2:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	691b      	ldr	r3, [r3, #16]
 81025ba:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 81025bc:	68fb      	ldr	r3, [r7, #12]
 81025be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81025c2:	2b00      	cmp	r3, #0
 81025c4:	d00a      	beq.n	81025dc <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	2280      	movs	r2, #128	; 0x80
 81025ca:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	691a      	ldr	r2, [r3, #16]
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 81025da:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 81025dc:	68fb      	ldr	r3, [r7, #12]
 81025de:	f003 0301 	and.w	r3, r3, #1
 81025e2:	2b00      	cmp	r3, #0
 81025e4:	d01c      	beq.n	8102620 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	2222      	movs	r2, #34	; 0x22
 81025ea:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 81025f0:	3301      	adds	r3, #1
 81025f2:	b29a      	uxth	r2, r3
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 81025f8:	687b      	ldr	r3, [r7, #4]
 81025fa:	681b      	ldr	r3, [r3, #0]
 81025fc:	68da      	ldr	r2, [r3, #12]
 81025fe:	687b      	ldr	r3, [r7, #4]
 8102600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102602:	b2d2      	uxtb	r2, r2
 8102604:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8102606:	687b      	ldr	r3, [r7, #4]
 8102608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810260a:	1c5a      	adds	r2, r3, #1
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	681b      	ldr	r3, [r3, #0]
 8102614:	691a      	ldr	r2, [r3, #16]
 8102616:	687b      	ldr	r3, [r7, #4]
 8102618:	681b      	ldr	r3, [r3, #0]
 810261a:	f042 0201 	orr.w	r2, r2, #1
 810261e:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8102620:	68fb      	ldr	r3, [r7, #12]
 8102622:	f003 0302 	and.w	r3, r3, #2
 8102626:	2b00      	cmp	r3, #0
 8102628:	d01e      	beq.n	8102668 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	681b      	ldr	r3, [r3, #0]
 810262e:	691a      	ldr	r2, [r3, #16]
 8102630:	687b      	ldr	r3, [r7, #4]
 8102632:	681b      	ldr	r3, [r3, #0]
 8102634:	f042 0202 	orr.w	r2, r2, #2
 8102638:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	2220      	movs	r2, #32
 810263e:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	2200      	movs	r2, #0
 8102644:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810264e:	425b      	negs	r3, r3
 8102650:	441a      	add	r2, r3
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8102656:	687b      	ldr	r3, [r7, #4]
 8102658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 810265a:	4619      	mov	r1, r3
 810265c:	6878      	ldr	r0, [r7, #4]
 810265e:	f000 f88c 	bl	810277a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	2200      	movs	r2, #0
 8102666:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8102668:	68fb      	ldr	r3, [r7, #12]
 810266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810266e:	2b00      	cmp	r3, #0
 8102670:	d024      	beq.n	81026bc <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8102676:	3b01      	subs	r3, #1
 8102678:	b29a      	uxth	r2, r3
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8102682:	2b00      	cmp	r3, #0
 8102684:	d107      	bne.n	8102696 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	681b      	ldr	r3, [r3, #0]
 810268a:	681a      	ldr	r2, [r3, #0]
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	681b      	ldr	r3, [r3, #0]
 8102690:	f042 0204 	orr.w	r2, r2, #4
 8102694:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810269a:	781a      	ldrb	r2, [r3, #0]
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	681b      	ldr	r3, [r3, #0]
 81026a0:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 81026a2:	687b      	ldr	r3, [r7, #4]
 81026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026a6:	1c5a      	adds	r2, r3, #1
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	691a      	ldr	r2, [r3, #16]
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	681b      	ldr	r3, [r3, #0]
 81026b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81026ba:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 81026bc:	68fb      	ldr	r3, [r7, #12]
 81026be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81026c2:	2b00      	cmp	r3, #0
 81026c4:	d014      	beq.n	81026f0 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 81026c6:	687b      	ldr	r3, [r7, #4]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	691a      	ldr	r2, [r3, #16]
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	681b      	ldr	r3, [r3, #0]
 81026d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81026d4:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	2220      	movs	r2, #32
 81026da:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	2200      	movs	r2, #0
 81026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81026e4:	687b      	ldr	r3, [r7, #4]
 81026e6:	2200      	movs	r2, #0
 81026e8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 81026ea:	6878      	ldr	r0, [r7, #4]
 81026ec:	f000 f83b 	bl	8102766 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 81026f0:	68fa      	ldr	r2, [r7, #12]
 81026f2:	f641 437c 	movw	r3, #7292	; 0x1c7c
 81026f6:	4013      	ands	r3, r2
 81026f8:	2b00      	cmp	r3, #0
 81026fa:	d030      	beq.n	810275e <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	68fa      	ldr	r2, [r7, #12]
 8102700:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8102702:	687b      	ldr	r3, [r7, #4]
 8102704:	681b      	ldr	r3, [r3, #0]
 8102706:	691b      	ldr	r3, [r3, #16]
 8102708:	687a      	ldr	r2, [r7, #4]
 810270a:	6812      	ldr	r2, [r2, #0]
 810270c:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8102710:	f043 031c 	orr.w	r3, r3, #28
 8102714:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8102716:	68fb      	ldr	r3, [r7, #12]
 8102718:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 810271c:	2b00      	cmp	r3, #0
 810271e:	d00e      	beq.n	810273e <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102724:	687b      	ldr	r3, [r7, #4]
 8102726:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102728:	425b      	negs	r3, r3
 810272a:	441a      	add	r2, r3
 810272c:	687b      	ldr	r3, [r7, #4]
 810272e:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	2200      	movs	r2, #0
 8102734:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	2220      	movs	r2, #32
 810273a:	63da      	str	r2, [r3, #60]	; 0x3c
 810273c:	e00c      	b.n	8102758 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 810273e:	68fb      	ldr	r3, [r7, #12]
 8102740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102744:	2b00      	cmp	r3, #0
 8102746:	d107      	bne.n	8102758 <HAL_CEC_IRQHandler+0x1ac>
 8102748:	68fb      	ldr	r3, [r7, #12]
 810274a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 810274e:	2b00      	cmp	r3, #0
 8102750:	d002      	beq.n	8102758 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8102752:	687b      	ldr	r3, [r7, #4]
 8102754:	2220      	movs	r2, #32
 8102756:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8102758:	6878      	ldr	r0, [r7, #4]
 810275a:	f000 f819 	bl	8102790 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 810275e:	bf00      	nop
 8102760:	3710      	adds	r7, #16
 8102762:	46bd      	mov	sp, r7
 8102764:	bd80      	pop	{r7, pc}

08102766 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8102766:	b480      	push	{r7}
 8102768:	b083      	sub	sp, #12
 810276a:	af00      	add	r7, sp, #0
 810276c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 810276e:	bf00      	nop
 8102770:	370c      	adds	r7, #12
 8102772:	46bd      	mov	sp, r7
 8102774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102778:	4770      	bx	lr

0810277a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 810277a:	b480      	push	{r7}
 810277c:	b083      	sub	sp, #12
 810277e:	af00      	add	r7, sp, #0
 8102780:	6078      	str	r0, [r7, #4]
 8102782:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102784:	bf00      	nop
 8102786:	370c      	adds	r7, #12
 8102788:	46bd      	mov	sp, r7
 810278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810278e:	4770      	bx	lr

08102790 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102790:	b480      	push	{r7}
 8102792:	b083      	sub	sp, #12
 8102794:	af00      	add	r7, sp, #0
 8102796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8102798:	bf00      	nop
 810279a:	370c      	adds	r7, #12
 810279c:	46bd      	mov	sp, r7
 810279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a2:	4770      	bx	lr

081027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81027a4:	b480      	push	{r7}
 81027a6:	b085      	sub	sp, #20
 81027a8:	af00      	add	r7, sp, #0
 81027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81027ac:	687b      	ldr	r3, [r7, #4]
 81027ae:	f003 0307 	and.w	r3, r3, #7
 81027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81027b4:	4b0c      	ldr	r3, [pc, #48]	; (81027e8 <__NVIC_SetPriorityGrouping+0x44>)
 81027b6:	68db      	ldr	r3, [r3, #12]
 81027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81027ba:	68ba      	ldr	r2, [r7, #8]
 81027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81027c0:	4013      	ands	r3, r2
 81027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81027c4:	68fb      	ldr	r3, [r7, #12]
 81027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81027c8:	68bb      	ldr	r3, [r7, #8]
 81027ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81027cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81027d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81027d6:	4a04      	ldr	r2, [pc, #16]	; (81027e8 <__NVIC_SetPriorityGrouping+0x44>)
 81027d8:	68bb      	ldr	r3, [r7, #8]
 81027da:	60d3      	str	r3, [r2, #12]
}
 81027dc:	bf00      	nop
 81027de:	3714      	adds	r7, #20
 81027e0:	46bd      	mov	sp, r7
 81027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027e6:	4770      	bx	lr
 81027e8:	e000ed00 	.word	0xe000ed00

081027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81027ec:	b480      	push	{r7}
 81027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81027f0:	4b04      	ldr	r3, [pc, #16]	; (8102804 <__NVIC_GetPriorityGrouping+0x18>)
 81027f2:	68db      	ldr	r3, [r3, #12]
 81027f4:	0a1b      	lsrs	r3, r3, #8
 81027f6:	f003 0307 	and.w	r3, r3, #7
}
 81027fa:	4618      	mov	r0, r3
 81027fc:	46bd      	mov	sp, r7
 81027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102802:	4770      	bx	lr
 8102804:	e000ed00 	.word	0xe000ed00

08102808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102808:	b480      	push	{r7}
 810280a:	b083      	sub	sp, #12
 810280c:	af00      	add	r7, sp, #0
 810280e:	4603      	mov	r3, r0
 8102810:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102816:	2b00      	cmp	r3, #0
 8102818:	db0b      	blt.n	8102832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810281a:	88fb      	ldrh	r3, [r7, #6]
 810281c:	f003 021f 	and.w	r2, r3, #31
 8102820:	4907      	ldr	r1, [pc, #28]	; (8102840 <__NVIC_EnableIRQ+0x38>)
 8102822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102826:	095b      	lsrs	r3, r3, #5
 8102828:	2001      	movs	r0, #1
 810282a:	fa00 f202 	lsl.w	r2, r0, r2
 810282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102832:	bf00      	nop
 8102834:	370c      	adds	r7, #12
 8102836:	46bd      	mov	sp, r7
 8102838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810283c:	4770      	bx	lr
 810283e:	bf00      	nop
 8102840:	e000e100 	.word	0xe000e100

08102844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102844:	b480      	push	{r7}
 8102846:	b083      	sub	sp, #12
 8102848:	af00      	add	r7, sp, #0
 810284a:	4603      	mov	r3, r0
 810284c:	6039      	str	r1, [r7, #0]
 810284e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102854:	2b00      	cmp	r3, #0
 8102856:	db0a      	blt.n	810286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102858:	683b      	ldr	r3, [r7, #0]
 810285a:	b2da      	uxtb	r2, r3
 810285c:	490c      	ldr	r1, [pc, #48]	; (8102890 <__NVIC_SetPriority+0x4c>)
 810285e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102862:	0112      	lsls	r2, r2, #4
 8102864:	b2d2      	uxtb	r2, r2
 8102866:	440b      	add	r3, r1
 8102868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810286c:	e00a      	b.n	8102884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810286e:	683b      	ldr	r3, [r7, #0]
 8102870:	b2da      	uxtb	r2, r3
 8102872:	4908      	ldr	r1, [pc, #32]	; (8102894 <__NVIC_SetPriority+0x50>)
 8102874:	88fb      	ldrh	r3, [r7, #6]
 8102876:	f003 030f 	and.w	r3, r3, #15
 810287a:	3b04      	subs	r3, #4
 810287c:	0112      	lsls	r2, r2, #4
 810287e:	b2d2      	uxtb	r2, r2
 8102880:	440b      	add	r3, r1
 8102882:	761a      	strb	r2, [r3, #24]
}
 8102884:	bf00      	nop
 8102886:	370c      	adds	r7, #12
 8102888:	46bd      	mov	sp, r7
 810288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810288e:	4770      	bx	lr
 8102890:	e000e100 	.word	0xe000e100
 8102894:	e000ed00 	.word	0xe000ed00

08102898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102898:	b480      	push	{r7}
 810289a:	b089      	sub	sp, #36	; 0x24
 810289c:	af00      	add	r7, sp, #0
 810289e:	60f8      	str	r0, [r7, #12]
 81028a0:	60b9      	str	r1, [r7, #8]
 81028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81028a4:	68fb      	ldr	r3, [r7, #12]
 81028a6:	f003 0307 	and.w	r3, r3, #7
 81028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81028ac:	69fb      	ldr	r3, [r7, #28]
 81028ae:	f1c3 0307 	rsb	r3, r3, #7
 81028b2:	2b04      	cmp	r3, #4
 81028b4:	bf28      	it	cs
 81028b6:	2304      	movcs	r3, #4
 81028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81028ba:	69fb      	ldr	r3, [r7, #28]
 81028bc:	3304      	adds	r3, #4
 81028be:	2b06      	cmp	r3, #6
 81028c0:	d902      	bls.n	81028c8 <NVIC_EncodePriority+0x30>
 81028c2:	69fb      	ldr	r3, [r7, #28]
 81028c4:	3b03      	subs	r3, #3
 81028c6:	e000      	b.n	81028ca <NVIC_EncodePriority+0x32>
 81028c8:	2300      	movs	r3, #0
 81028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81028cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81028d0:	69bb      	ldr	r3, [r7, #24]
 81028d2:	fa02 f303 	lsl.w	r3, r2, r3
 81028d6:	43da      	mvns	r2, r3
 81028d8:	68bb      	ldr	r3, [r7, #8]
 81028da:	401a      	ands	r2, r3
 81028dc:	697b      	ldr	r3, [r7, #20]
 81028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81028e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81028e4:	697b      	ldr	r3, [r7, #20]
 81028e6:	fa01 f303 	lsl.w	r3, r1, r3
 81028ea:	43d9      	mvns	r1, r3
 81028ec:	687b      	ldr	r3, [r7, #4]
 81028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81028f0:	4313      	orrs	r3, r2
         );
}
 81028f2:	4618      	mov	r0, r3
 81028f4:	3724      	adds	r7, #36	; 0x24
 81028f6:	46bd      	mov	sp, r7
 81028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028fc:	4770      	bx	lr
	...

08102900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102900:	b580      	push	{r7, lr}
 8102902:	b082      	sub	sp, #8
 8102904:	af00      	add	r7, sp, #0
 8102906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102908:	687b      	ldr	r3, [r7, #4]
 810290a:	3b01      	subs	r3, #1
 810290c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102910:	d301      	bcc.n	8102916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102912:	2301      	movs	r3, #1
 8102914:	e00f      	b.n	8102936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102916:	4a0a      	ldr	r2, [pc, #40]	; (8102940 <SysTick_Config+0x40>)
 8102918:	687b      	ldr	r3, [r7, #4]
 810291a:	3b01      	subs	r3, #1
 810291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810291e:	210f      	movs	r1, #15
 8102920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8102924:	f7ff ff8e 	bl	8102844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102928:	4b05      	ldr	r3, [pc, #20]	; (8102940 <SysTick_Config+0x40>)
 810292a:	2200      	movs	r2, #0
 810292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810292e:	4b04      	ldr	r3, [pc, #16]	; (8102940 <SysTick_Config+0x40>)
 8102930:	2207      	movs	r2, #7
 8102932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102934:	2300      	movs	r3, #0
}
 8102936:	4618      	mov	r0, r3
 8102938:	3708      	adds	r7, #8
 810293a:	46bd      	mov	sp, r7
 810293c:	bd80      	pop	{r7, pc}
 810293e:	bf00      	nop
 8102940:	e000e010 	.word	0xe000e010

08102944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102944:	b580      	push	{r7, lr}
 8102946:	b082      	sub	sp, #8
 8102948:	af00      	add	r7, sp, #0
 810294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810294c:	6878      	ldr	r0, [r7, #4]
 810294e:	f7ff ff29 	bl	81027a4 <__NVIC_SetPriorityGrouping>
}
 8102952:	bf00      	nop
 8102954:	3708      	adds	r7, #8
 8102956:	46bd      	mov	sp, r7
 8102958:	bd80      	pop	{r7, pc}

0810295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810295a:	b580      	push	{r7, lr}
 810295c:	b086      	sub	sp, #24
 810295e:	af00      	add	r7, sp, #0
 8102960:	4603      	mov	r3, r0
 8102962:	60b9      	str	r1, [r7, #8]
 8102964:	607a      	str	r2, [r7, #4]
 8102966:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102968:	f7ff ff40 	bl	81027ec <__NVIC_GetPriorityGrouping>
 810296c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810296e:	687a      	ldr	r2, [r7, #4]
 8102970:	68b9      	ldr	r1, [r7, #8]
 8102972:	6978      	ldr	r0, [r7, #20]
 8102974:	f7ff ff90 	bl	8102898 <NVIC_EncodePriority>
 8102978:	4602      	mov	r2, r0
 810297a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810297e:	4611      	mov	r1, r2
 8102980:	4618      	mov	r0, r3
 8102982:	f7ff ff5f 	bl	8102844 <__NVIC_SetPriority>
}
 8102986:	bf00      	nop
 8102988:	3718      	adds	r7, #24
 810298a:	46bd      	mov	sp, r7
 810298c:	bd80      	pop	{r7, pc}

0810298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810298e:	b580      	push	{r7, lr}
 8102990:	b082      	sub	sp, #8
 8102992:	af00      	add	r7, sp, #0
 8102994:	4603      	mov	r3, r0
 8102996:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810299c:	4618      	mov	r0, r3
 810299e:	f7ff ff33 	bl	8102808 <__NVIC_EnableIRQ>
}
 81029a2:	bf00      	nop
 81029a4:	3708      	adds	r7, #8
 81029a6:	46bd      	mov	sp, r7
 81029a8:	bd80      	pop	{r7, pc}

081029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81029aa:	b580      	push	{r7, lr}
 81029ac:	b082      	sub	sp, #8
 81029ae:	af00      	add	r7, sp, #0
 81029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81029b2:	6878      	ldr	r0, [r7, #4]
 81029b4:	f7ff ffa4 	bl	8102900 <SysTick_Config>
 81029b8:	4603      	mov	r3, r0
}
 81029ba:	4618      	mov	r0, r3
 81029bc:	3708      	adds	r7, #8
 81029be:	46bd      	mov	sp, r7
 81029c0:	bd80      	pop	{r7, pc}
	...

081029c4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81029c4:	b480      	push	{r7}
 81029c6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81029c8:	4b07      	ldr	r3, [pc, #28]	; (81029e8 <HAL_GetCurrentCPUID+0x24>)
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	091b      	lsrs	r3, r3, #4
 81029ce:	f003 030f 	and.w	r3, r3, #15
 81029d2:	2b07      	cmp	r3, #7
 81029d4:	d101      	bne.n	81029da <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81029d6:	2303      	movs	r3, #3
 81029d8:	e000      	b.n	81029dc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81029da:	2301      	movs	r3, #1
  }
}
 81029dc:	4618      	mov	r0, r3
 81029de:	46bd      	mov	sp, r7
 81029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029e4:	4770      	bx	lr
 81029e6:	bf00      	nop
 81029e8:	e000ed00 	.word	0xe000ed00

081029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81029ec:	b480      	push	{r7}
 81029ee:	b089      	sub	sp, #36	; 0x24
 81029f0:	af00      	add	r7, sp, #0
 81029f2:	6078      	str	r0, [r7, #4]
 81029f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81029f6:	2300      	movs	r3, #0
 81029f8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81029fa:	4b89      	ldr	r3, [pc, #548]	; (8102c20 <HAL_GPIO_Init+0x234>)
 81029fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81029fe:	e194      	b.n	8102d2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102a00:	683b      	ldr	r3, [r7, #0]
 8102a02:	681a      	ldr	r2, [r3, #0]
 8102a04:	2101      	movs	r1, #1
 8102a06:	69fb      	ldr	r3, [r7, #28]
 8102a08:	fa01 f303 	lsl.w	r3, r1, r3
 8102a0c:	4013      	ands	r3, r2
 8102a0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102a10:	693b      	ldr	r3, [r7, #16]
 8102a12:	2b00      	cmp	r3, #0
 8102a14:	f000 8186 	beq.w	8102d24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102a18:	683b      	ldr	r3, [r7, #0]
 8102a1a:	685b      	ldr	r3, [r3, #4]
 8102a1c:	f003 0303 	and.w	r3, r3, #3
 8102a20:	2b01      	cmp	r3, #1
 8102a22:	d005      	beq.n	8102a30 <HAL_GPIO_Init+0x44>
 8102a24:	683b      	ldr	r3, [r7, #0]
 8102a26:	685b      	ldr	r3, [r3, #4]
 8102a28:	f003 0303 	and.w	r3, r3, #3
 8102a2c:	2b02      	cmp	r3, #2
 8102a2e:	d130      	bne.n	8102a92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	689b      	ldr	r3, [r3, #8]
 8102a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102a36:	69fb      	ldr	r3, [r7, #28]
 8102a38:	005b      	lsls	r3, r3, #1
 8102a3a:	2203      	movs	r2, #3
 8102a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8102a40:	43db      	mvns	r3, r3
 8102a42:	69ba      	ldr	r2, [r7, #24]
 8102a44:	4013      	ands	r3, r2
 8102a46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102a48:	683b      	ldr	r3, [r7, #0]
 8102a4a:	68da      	ldr	r2, [r3, #12]
 8102a4c:	69fb      	ldr	r3, [r7, #28]
 8102a4e:	005b      	lsls	r3, r3, #1
 8102a50:	fa02 f303 	lsl.w	r3, r2, r3
 8102a54:	69ba      	ldr	r2, [r7, #24]
 8102a56:	4313      	orrs	r3, r2
 8102a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	69ba      	ldr	r2, [r7, #24]
 8102a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	685b      	ldr	r3, [r3, #4]
 8102a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102a66:	2201      	movs	r2, #1
 8102a68:	69fb      	ldr	r3, [r7, #28]
 8102a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8102a6e:	43db      	mvns	r3, r3
 8102a70:	69ba      	ldr	r2, [r7, #24]
 8102a72:	4013      	ands	r3, r2
 8102a74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102a76:	683b      	ldr	r3, [r7, #0]
 8102a78:	685b      	ldr	r3, [r3, #4]
 8102a7a:	091b      	lsrs	r3, r3, #4
 8102a7c:	f003 0201 	and.w	r2, r3, #1
 8102a80:	69fb      	ldr	r3, [r7, #28]
 8102a82:	fa02 f303 	lsl.w	r3, r2, r3
 8102a86:	69ba      	ldr	r2, [r7, #24]
 8102a88:	4313      	orrs	r3, r2
 8102a8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102a8c:	687b      	ldr	r3, [r7, #4]
 8102a8e:	69ba      	ldr	r2, [r7, #24]
 8102a90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102a92:	683b      	ldr	r3, [r7, #0]
 8102a94:	685b      	ldr	r3, [r3, #4]
 8102a96:	f003 0303 	and.w	r3, r3, #3
 8102a9a:	2b03      	cmp	r3, #3
 8102a9c:	d017      	beq.n	8102ace <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	68db      	ldr	r3, [r3, #12]
 8102aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102aa4:	69fb      	ldr	r3, [r7, #28]
 8102aa6:	005b      	lsls	r3, r3, #1
 8102aa8:	2203      	movs	r2, #3
 8102aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8102aae:	43db      	mvns	r3, r3
 8102ab0:	69ba      	ldr	r2, [r7, #24]
 8102ab2:	4013      	ands	r3, r2
 8102ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102ab6:	683b      	ldr	r3, [r7, #0]
 8102ab8:	689a      	ldr	r2, [r3, #8]
 8102aba:	69fb      	ldr	r3, [r7, #28]
 8102abc:	005b      	lsls	r3, r3, #1
 8102abe:	fa02 f303 	lsl.w	r3, r2, r3
 8102ac2:	69ba      	ldr	r2, [r7, #24]
 8102ac4:	4313      	orrs	r3, r2
 8102ac6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	69ba      	ldr	r2, [r7, #24]
 8102acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102ace:	683b      	ldr	r3, [r7, #0]
 8102ad0:	685b      	ldr	r3, [r3, #4]
 8102ad2:	f003 0303 	and.w	r3, r3, #3
 8102ad6:	2b02      	cmp	r3, #2
 8102ad8:	d123      	bne.n	8102b22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102ada:	69fb      	ldr	r3, [r7, #28]
 8102adc:	08da      	lsrs	r2, r3, #3
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	3208      	adds	r2, #8
 8102ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102ae8:	69fb      	ldr	r3, [r7, #28]
 8102aea:	f003 0307 	and.w	r3, r3, #7
 8102aee:	009b      	lsls	r3, r3, #2
 8102af0:	220f      	movs	r2, #15
 8102af2:	fa02 f303 	lsl.w	r3, r2, r3
 8102af6:	43db      	mvns	r3, r3
 8102af8:	69ba      	ldr	r2, [r7, #24]
 8102afa:	4013      	ands	r3, r2
 8102afc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102afe:	683b      	ldr	r3, [r7, #0]
 8102b00:	691a      	ldr	r2, [r3, #16]
 8102b02:	69fb      	ldr	r3, [r7, #28]
 8102b04:	f003 0307 	and.w	r3, r3, #7
 8102b08:	009b      	lsls	r3, r3, #2
 8102b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8102b0e:	69ba      	ldr	r2, [r7, #24]
 8102b10:	4313      	orrs	r3, r2
 8102b12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102b14:	69fb      	ldr	r3, [r7, #28]
 8102b16:	08da      	lsrs	r2, r3, #3
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	3208      	adds	r2, #8
 8102b1c:	69b9      	ldr	r1, [r7, #24]
 8102b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102b28:	69fb      	ldr	r3, [r7, #28]
 8102b2a:	005b      	lsls	r3, r3, #1
 8102b2c:	2203      	movs	r2, #3
 8102b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8102b32:	43db      	mvns	r3, r3
 8102b34:	69ba      	ldr	r2, [r7, #24]
 8102b36:	4013      	ands	r3, r2
 8102b38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102b3a:	683b      	ldr	r3, [r7, #0]
 8102b3c:	685b      	ldr	r3, [r3, #4]
 8102b3e:	f003 0203 	and.w	r2, r3, #3
 8102b42:	69fb      	ldr	r3, [r7, #28]
 8102b44:	005b      	lsls	r3, r3, #1
 8102b46:	fa02 f303 	lsl.w	r3, r2, r3
 8102b4a:	69ba      	ldr	r2, [r7, #24]
 8102b4c:	4313      	orrs	r3, r2
 8102b4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102b50:	687b      	ldr	r3, [r7, #4]
 8102b52:	69ba      	ldr	r2, [r7, #24]
 8102b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102b56:	683b      	ldr	r3, [r7, #0]
 8102b58:	685b      	ldr	r3, [r3, #4]
 8102b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102b5e:	2b00      	cmp	r3, #0
 8102b60:	f000 80e0 	beq.w	8102d24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102b64:	4b2f      	ldr	r3, [pc, #188]	; (8102c24 <HAL_GPIO_Init+0x238>)
 8102b66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102b6a:	4a2e      	ldr	r2, [pc, #184]	; (8102c24 <HAL_GPIO_Init+0x238>)
 8102b6c:	f043 0302 	orr.w	r3, r3, #2
 8102b70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102b74:	4b2b      	ldr	r3, [pc, #172]	; (8102c24 <HAL_GPIO_Init+0x238>)
 8102b76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102b7a:	f003 0302 	and.w	r3, r3, #2
 8102b7e:	60fb      	str	r3, [r7, #12]
 8102b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102b82:	4a29      	ldr	r2, [pc, #164]	; (8102c28 <HAL_GPIO_Init+0x23c>)
 8102b84:	69fb      	ldr	r3, [r7, #28]
 8102b86:	089b      	lsrs	r3, r3, #2
 8102b88:	3302      	adds	r3, #2
 8102b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102b90:	69fb      	ldr	r3, [r7, #28]
 8102b92:	f003 0303 	and.w	r3, r3, #3
 8102b96:	009b      	lsls	r3, r3, #2
 8102b98:	220f      	movs	r2, #15
 8102b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8102b9e:	43db      	mvns	r3, r3
 8102ba0:	69ba      	ldr	r2, [r7, #24]
 8102ba2:	4013      	ands	r3, r2
 8102ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102ba6:	687b      	ldr	r3, [r7, #4]
 8102ba8:	4a20      	ldr	r2, [pc, #128]	; (8102c2c <HAL_GPIO_Init+0x240>)
 8102baa:	4293      	cmp	r3, r2
 8102bac:	d052      	beq.n	8102c54 <HAL_GPIO_Init+0x268>
 8102bae:	687b      	ldr	r3, [r7, #4]
 8102bb0:	4a1f      	ldr	r2, [pc, #124]	; (8102c30 <HAL_GPIO_Init+0x244>)
 8102bb2:	4293      	cmp	r3, r2
 8102bb4:	d031      	beq.n	8102c1a <HAL_GPIO_Init+0x22e>
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	4a1e      	ldr	r2, [pc, #120]	; (8102c34 <HAL_GPIO_Init+0x248>)
 8102bba:	4293      	cmp	r3, r2
 8102bbc:	d02b      	beq.n	8102c16 <HAL_GPIO_Init+0x22a>
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	4a1d      	ldr	r2, [pc, #116]	; (8102c38 <HAL_GPIO_Init+0x24c>)
 8102bc2:	4293      	cmp	r3, r2
 8102bc4:	d025      	beq.n	8102c12 <HAL_GPIO_Init+0x226>
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	4a1c      	ldr	r2, [pc, #112]	; (8102c3c <HAL_GPIO_Init+0x250>)
 8102bca:	4293      	cmp	r3, r2
 8102bcc:	d01f      	beq.n	8102c0e <HAL_GPIO_Init+0x222>
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	4a1b      	ldr	r2, [pc, #108]	; (8102c40 <HAL_GPIO_Init+0x254>)
 8102bd2:	4293      	cmp	r3, r2
 8102bd4:	d019      	beq.n	8102c0a <HAL_GPIO_Init+0x21e>
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	4a1a      	ldr	r2, [pc, #104]	; (8102c44 <HAL_GPIO_Init+0x258>)
 8102bda:	4293      	cmp	r3, r2
 8102bdc:	d013      	beq.n	8102c06 <HAL_GPIO_Init+0x21a>
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	4a19      	ldr	r2, [pc, #100]	; (8102c48 <HAL_GPIO_Init+0x25c>)
 8102be2:	4293      	cmp	r3, r2
 8102be4:	d00d      	beq.n	8102c02 <HAL_GPIO_Init+0x216>
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	4a18      	ldr	r2, [pc, #96]	; (8102c4c <HAL_GPIO_Init+0x260>)
 8102bea:	4293      	cmp	r3, r2
 8102bec:	d007      	beq.n	8102bfe <HAL_GPIO_Init+0x212>
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	4a17      	ldr	r2, [pc, #92]	; (8102c50 <HAL_GPIO_Init+0x264>)
 8102bf2:	4293      	cmp	r3, r2
 8102bf4:	d101      	bne.n	8102bfa <HAL_GPIO_Init+0x20e>
 8102bf6:	2309      	movs	r3, #9
 8102bf8:	e02d      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102bfa:	230a      	movs	r3, #10
 8102bfc:	e02b      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102bfe:	2308      	movs	r3, #8
 8102c00:	e029      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c02:	2307      	movs	r3, #7
 8102c04:	e027      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c06:	2306      	movs	r3, #6
 8102c08:	e025      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c0a:	2305      	movs	r3, #5
 8102c0c:	e023      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c0e:	2304      	movs	r3, #4
 8102c10:	e021      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c12:	2303      	movs	r3, #3
 8102c14:	e01f      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c16:	2302      	movs	r3, #2
 8102c18:	e01d      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c1a:	2301      	movs	r3, #1
 8102c1c:	e01b      	b.n	8102c56 <HAL_GPIO_Init+0x26a>
 8102c1e:	bf00      	nop
 8102c20:	580000c0 	.word	0x580000c0
 8102c24:	58024400 	.word	0x58024400
 8102c28:	58000400 	.word	0x58000400
 8102c2c:	58020000 	.word	0x58020000
 8102c30:	58020400 	.word	0x58020400
 8102c34:	58020800 	.word	0x58020800
 8102c38:	58020c00 	.word	0x58020c00
 8102c3c:	58021000 	.word	0x58021000
 8102c40:	58021400 	.word	0x58021400
 8102c44:	58021800 	.word	0x58021800
 8102c48:	58021c00 	.word	0x58021c00
 8102c4c:	58022000 	.word	0x58022000
 8102c50:	58022400 	.word	0x58022400
 8102c54:	2300      	movs	r3, #0
 8102c56:	69fa      	ldr	r2, [r7, #28]
 8102c58:	f002 0203 	and.w	r2, r2, #3
 8102c5c:	0092      	lsls	r2, r2, #2
 8102c5e:	4093      	lsls	r3, r2
 8102c60:	69ba      	ldr	r2, [r7, #24]
 8102c62:	4313      	orrs	r3, r2
 8102c64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102c66:	4938      	ldr	r1, [pc, #224]	; (8102d48 <HAL_GPIO_Init+0x35c>)
 8102c68:	69fb      	ldr	r3, [r7, #28]
 8102c6a:	089b      	lsrs	r3, r3, #2
 8102c6c:	3302      	adds	r3, #2
 8102c6e:	69ba      	ldr	r2, [r7, #24]
 8102c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102c78:	681b      	ldr	r3, [r3, #0]
 8102c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102c7c:	693b      	ldr	r3, [r7, #16]
 8102c7e:	43db      	mvns	r3, r3
 8102c80:	69ba      	ldr	r2, [r7, #24]
 8102c82:	4013      	ands	r3, r2
 8102c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102c86:	683b      	ldr	r3, [r7, #0]
 8102c88:	685b      	ldr	r3, [r3, #4]
 8102c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102c8e:	2b00      	cmp	r3, #0
 8102c90:	d003      	beq.n	8102c9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102c92:	69ba      	ldr	r2, [r7, #24]
 8102c94:	693b      	ldr	r3, [r7, #16]
 8102c96:	4313      	orrs	r3, r2
 8102c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102c9e:	69bb      	ldr	r3, [r7, #24]
 8102ca0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102ca6:	685b      	ldr	r3, [r3, #4]
 8102ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102caa:	693b      	ldr	r3, [r7, #16]
 8102cac:	43db      	mvns	r3, r3
 8102cae:	69ba      	ldr	r2, [r7, #24]
 8102cb0:	4013      	ands	r3, r2
 8102cb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102cb4:	683b      	ldr	r3, [r7, #0]
 8102cb6:	685b      	ldr	r3, [r3, #4]
 8102cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102cbc:	2b00      	cmp	r3, #0
 8102cbe:	d003      	beq.n	8102cc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102cc0:	69ba      	ldr	r2, [r7, #24]
 8102cc2:	693b      	ldr	r3, [r7, #16]
 8102cc4:	4313      	orrs	r3, r2
 8102cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102ccc:	69bb      	ldr	r3, [r7, #24]
 8102cce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102cd0:	697b      	ldr	r3, [r7, #20]
 8102cd2:	685b      	ldr	r3, [r3, #4]
 8102cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102cd6:	693b      	ldr	r3, [r7, #16]
 8102cd8:	43db      	mvns	r3, r3
 8102cda:	69ba      	ldr	r2, [r7, #24]
 8102cdc:	4013      	ands	r3, r2
 8102cde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102ce0:	683b      	ldr	r3, [r7, #0]
 8102ce2:	685b      	ldr	r3, [r3, #4]
 8102ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102ce8:	2b00      	cmp	r3, #0
 8102cea:	d003      	beq.n	8102cf4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102cec:	69ba      	ldr	r2, [r7, #24]
 8102cee:	693b      	ldr	r3, [r7, #16]
 8102cf0:	4313      	orrs	r3, r2
 8102cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102cf4:	697b      	ldr	r3, [r7, #20]
 8102cf6:	69ba      	ldr	r2, [r7, #24]
 8102cf8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102cfa:	697b      	ldr	r3, [r7, #20]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102d00:	693b      	ldr	r3, [r7, #16]
 8102d02:	43db      	mvns	r3, r3
 8102d04:	69ba      	ldr	r2, [r7, #24]
 8102d06:	4013      	ands	r3, r2
 8102d08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102d0a:	683b      	ldr	r3, [r7, #0]
 8102d0c:	685b      	ldr	r3, [r3, #4]
 8102d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102d12:	2b00      	cmp	r3, #0
 8102d14:	d003      	beq.n	8102d1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102d16:	69ba      	ldr	r2, [r7, #24]
 8102d18:	693b      	ldr	r3, [r7, #16]
 8102d1a:	4313      	orrs	r3, r2
 8102d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102d1e:	697b      	ldr	r3, [r7, #20]
 8102d20:	69ba      	ldr	r2, [r7, #24]
 8102d22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102d24:	69fb      	ldr	r3, [r7, #28]
 8102d26:	3301      	adds	r3, #1
 8102d28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102d2a:	683b      	ldr	r3, [r7, #0]
 8102d2c:	681a      	ldr	r2, [r3, #0]
 8102d2e:	69fb      	ldr	r3, [r7, #28]
 8102d30:	fa22 f303 	lsr.w	r3, r2, r3
 8102d34:	2b00      	cmp	r3, #0
 8102d36:	f47f ae63 	bne.w	8102a00 <HAL_GPIO_Init+0x14>
  }
}
 8102d3a:	bf00      	nop
 8102d3c:	bf00      	nop
 8102d3e:	3724      	adds	r7, #36	; 0x24
 8102d40:	46bd      	mov	sp, r7
 8102d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d46:	4770      	bx	lr
 8102d48:	58000400 	.word	0x58000400

08102d4c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102d4c:	b480      	push	{r7}
 8102d4e:	b083      	sub	sp, #12
 8102d50:	af00      	add	r7, sp, #0
 8102d52:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102d54:	4b05      	ldr	r3, [pc, #20]	; (8102d6c <HAL_HSEM_ActivateNotification+0x20>)
 8102d56:	681a      	ldr	r2, [r3, #0]
 8102d58:	4904      	ldr	r1, [pc, #16]	; (8102d6c <HAL_HSEM_ActivateNotification+0x20>)
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	4313      	orrs	r3, r2
 8102d5e:	600b      	str	r3, [r1, #0]
#endif
}
 8102d60:	bf00      	nop
 8102d62:	370c      	adds	r7, #12
 8102d64:	46bd      	mov	sp, r7
 8102d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d6a:	4770      	bx	lr
 8102d6c:	58026510 	.word	0x58026510

08102d70 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102d70:	b580      	push	{r7, lr}
 8102d72:	b084      	sub	sp, #16
 8102d74:	af00      	add	r7, sp, #0
 8102d76:	60f8      	str	r0, [r7, #12]
 8102d78:	460b      	mov	r3, r1
 8102d7a:	607a      	str	r2, [r7, #4]
 8102d7c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102d7e:	4b37      	ldr	r3, [pc, #220]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	f023 0201 	bic.w	r2, r3, #1
 8102d86:	4935      	ldr	r1, [pc, #212]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102d88:	68fb      	ldr	r3, [r7, #12]
 8102d8a:	4313      	orrs	r3, r2
 8102d8c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102d8e:	687b      	ldr	r3, [r7, #4]
 8102d90:	2b00      	cmp	r3, #0
 8102d92:	d123      	bne.n	8102ddc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102d94:	f7ff fe16 	bl	81029c4 <HAL_GetCurrentCPUID>
 8102d98:	4603      	mov	r3, r0
 8102d9a:	2b03      	cmp	r3, #3
 8102d9c:	d158      	bne.n	8102e50 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102d9e:	4b2f      	ldr	r3, [pc, #188]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102da0:	691b      	ldr	r3, [r3, #16]
 8102da2:	4a2e      	ldr	r2, [pc, #184]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102da4:	f023 0301 	bic.w	r3, r3, #1
 8102da8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102daa:	4b2d      	ldr	r3, [pc, #180]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dac:	691b      	ldr	r3, [r3, #16]
 8102dae:	4a2c      	ldr	r2, [pc, #176]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102db0:	f043 0304 	orr.w	r3, r3, #4
 8102db4:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102db6:	f3bf 8f4f 	dsb	sy
}
 8102dba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102dbc:	f3bf 8f6f 	isb	sy
}
 8102dc0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102dc2:	7afb      	ldrb	r3, [r7, #11]
 8102dc4:	2b01      	cmp	r3, #1
 8102dc6:	d101      	bne.n	8102dcc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102dc8:	bf30      	wfi
 8102dca:	e000      	b.n	8102dce <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102dcc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102dce:	4b24      	ldr	r3, [pc, #144]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dd0:	691b      	ldr	r3, [r3, #16]
 8102dd2:	4a23      	ldr	r2, [pc, #140]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dd4:	f023 0304 	bic.w	r3, r3, #4
 8102dd8:	6113      	str	r3, [r2, #16]
 8102dda:	e03c      	b.n	8102e56 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	2b01      	cmp	r3, #1
 8102de0:	d123      	bne.n	8102e2a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102de2:	f7ff fdef 	bl	81029c4 <HAL_GetCurrentCPUID>
 8102de6:	4603      	mov	r3, r0
 8102de8:	2b01      	cmp	r3, #1
 8102dea:	d133      	bne.n	8102e54 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102dec:	4b1b      	ldr	r3, [pc, #108]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102dee:	695b      	ldr	r3, [r3, #20]
 8102df0:	4a1a      	ldr	r2, [pc, #104]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102df2:	f023 0302 	bic.w	r3, r3, #2
 8102df6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102df8:	4b19      	ldr	r3, [pc, #100]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dfa:	691b      	ldr	r3, [r3, #16]
 8102dfc:	4a18      	ldr	r2, [pc, #96]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102dfe:	f043 0304 	orr.w	r3, r3, #4
 8102e02:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102e04:	f3bf 8f4f 	dsb	sy
}
 8102e08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102e0a:	f3bf 8f6f 	isb	sy
}
 8102e0e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102e10:	7afb      	ldrb	r3, [r7, #11]
 8102e12:	2b01      	cmp	r3, #1
 8102e14:	d101      	bne.n	8102e1a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102e16:	bf30      	wfi
 8102e18:	e000      	b.n	8102e1c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102e1a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102e1c:	4b10      	ldr	r3, [pc, #64]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e1e:	691b      	ldr	r3, [r3, #16]
 8102e20:	4a0f      	ldr	r2, [pc, #60]	; (8102e60 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102e22:	f023 0304 	bic.w	r3, r3, #4
 8102e26:	6113      	str	r3, [r2, #16]
 8102e28:	e015      	b.n	8102e56 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102e2a:	f7ff fdcb 	bl	81029c4 <HAL_GetCurrentCPUID>
 8102e2e:	4603      	mov	r3, r0
 8102e30:	2b03      	cmp	r3, #3
 8102e32:	d106      	bne.n	8102e42 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102e34:	4b09      	ldr	r3, [pc, #36]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e36:	691b      	ldr	r3, [r3, #16]
 8102e38:	4a08      	ldr	r2, [pc, #32]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e3a:	f023 0304 	bic.w	r3, r3, #4
 8102e3e:	6113      	str	r3, [r2, #16]
 8102e40:	e009      	b.n	8102e56 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102e42:	4b06      	ldr	r3, [pc, #24]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e44:	695b      	ldr	r3, [r3, #20]
 8102e46:	4a05      	ldr	r2, [pc, #20]	; (8102e5c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102e48:	f023 0304 	bic.w	r3, r3, #4
 8102e4c:	6153      	str	r3, [r2, #20]
 8102e4e:	e002      	b.n	8102e56 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102e50:	bf00      	nop
 8102e52:	e000      	b.n	8102e56 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102e54:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102e56:	3710      	adds	r7, #16
 8102e58:	46bd      	mov	sp, r7
 8102e5a:	bd80      	pop	{r7, pc}
 8102e5c:	58024800 	.word	0x58024800
 8102e60:	e000ed00 	.word	0xe000ed00

08102e64 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102e64:	b580      	push	{r7, lr}
 8102e66:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102e68:	f7ff fdac 	bl	81029c4 <HAL_GetCurrentCPUID>
 8102e6c:	4603      	mov	r3, r0
 8102e6e:	2b03      	cmp	r3, #3
 8102e70:	d101      	bne.n	8102e76 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102e72:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102e74:	e001      	b.n	8102e7a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102e76:	bf40      	sev
    __WFE ();
 8102e78:	bf20      	wfe
}
 8102e7a:	bf00      	nop
 8102e7c:	bd80      	pop	{r7, pc}
	...

08102e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102e80:	b480      	push	{r7}
 8102e82:	b089      	sub	sp, #36	; 0x24
 8102e84:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102e86:	4bb3      	ldr	r3, [pc, #716]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102e88:	691b      	ldr	r3, [r3, #16]
 8102e8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8102e8e:	2b18      	cmp	r3, #24
 8102e90:	f200 8155 	bhi.w	810313e <HAL_RCC_GetSysClockFreq+0x2be>
 8102e94:	a201      	add	r2, pc, #4	; (adr r2, 8102e9c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102e9a:	bf00      	nop
 8102e9c:	08102f01 	.word	0x08102f01
 8102ea0:	0810313f 	.word	0x0810313f
 8102ea4:	0810313f 	.word	0x0810313f
 8102ea8:	0810313f 	.word	0x0810313f
 8102eac:	0810313f 	.word	0x0810313f
 8102eb0:	0810313f 	.word	0x0810313f
 8102eb4:	0810313f 	.word	0x0810313f
 8102eb8:	0810313f 	.word	0x0810313f
 8102ebc:	08102f27 	.word	0x08102f27
 8102ec0:	0810313f 	.word	0x0810313f
 8102ec4:	0810313f 	.word	0x0810313f
 8102ec8:	0810313f 	.word	0x0810313f
 8102ecc:	0810313f 	.word	0x0810313f
 8102ed0:	0810313f 	.word	0x0810313f
 8102ed4:	0810313f 	.word	0x0810313f
 8102ed8:	0810313f 	.word	0x0810313f
 8102edc:	08102f2d 	.word	0x08102f2d
 8102ee0:	0810313f 	.word	0x0810313f
 8102ee4:	0810313f 	.word	0x0810313f
 8102ee8:	0810313f 	.word	0x0810313f
 8102eec:	0810313f 	.word	0x0810313f
 8102ef0:	0810313f 	.word	0x0810313f
 8102ef4:	0810313f 	.word	0x0810313f
 8102ef8:	0810313f 	.word	0x0810313f
 8102efc:	08102f33 	.word	0x08102f33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102f00:	4b94      	ldr	r3, [pc, #592]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	f003 0320 	and.w	r3, r3, #32
 8102f08:	2b00      	cmp	r3, #0
 8102f0a:	d009      	beq.n	8102f20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102f0c:	4b91      	ldr	r3, [pc, #580]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f0e:	681b      	ldr	r3, [r3, #0]
 8102f10:	08db      	lsrs	r3, r3, #3
 8102f12:	f003 0303 	and.w	r3, r3, #3
 8102f16:	4a90      	ldr	r2, [pc, #576]	; (8103158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102f18:	fa22 f303 	lsr.w	r3, r2, r3
 8102f1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102f1e:	e111      	b.n	8103144 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102f20:	4b8d      	ldr	r3, [pc, #564]	; (8103158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102f22:	61bb      	str	r3, [r7, #24]
      break;
 8102f24:	e10e      	b.n	8103144 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102f26:	4b8d      	ldr	r3, [pc, #564]	; (810315c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102f28:	61bb      	str	r3, [r7, #24]
      break;
 8102f2a:	e10b      	b.n	8103144 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102f2c:	4b8c      	ldr	r3, [pc, #560]	; (8103160 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102f2e:	61bb      	str	r3, [r7, #24]
      break;
 8102f30:	e108      	b.n	8103144 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102f32:	4b88      	ldr	r3, [pc, #544]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f36:	f003 0303 	and.w	r3, r3, #3
 8102f3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102f3c:	4b85      	ldr	r3, [pc, #532]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102f40:	091b      	lsrs	r3, r3, #4
 8102f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102f46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102f48:	4b82      	ldr	r3, [pc, #520]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f4c:	f003 0301 	and.w	r3, r3, #1
 8102f50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102f52:	4b80      	ldr	r3, [pc, #512]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102f56:	08db      	lsrs	r3, r3, #3
 8102f58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102f5c:	68fa      	ldr	r2, [r7, #12]
 8102f5e:	fb02 f303 	mul.w	r3, r2, r3
 8102f62:	ee07 3a90 	vmov	s15, r3
 8102f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102f6e:	693b      	ldr	r3, [r7, #16]
 8102f70:	2b00      	cmp	r3, #0
 8102f72:	f000 80e1 	beq.w	8103138 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102f76:	697b      	ldr	r3, [r7, #20]
 8102f78:	2b02      	cmp	r3, #2
 8102f7a:	f000 8083 	beq.w	8103084 <HAL_RCC_GetSysClockFreq+0x204>
 8102f7e:	697b      	ldr	r3, [r7, #20]
 8102f80:	2b02      	cmp	r3, #2
 8102f82:	f200 80a1 	bhi.w	81030c8 <HAL_RCC_GetSysClockFreq+0x248>
 8102f86:	697b      	ldr	r3, [r7, #20]
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d003      	beq.n	8102f94 <HAL_RCC_GetSysClockFreq+0x114>
 8102f8c:	697b      	ldr	r3, [r7, #20]
 8102f8e:	2b01      	cmp	r3, #1
 8102f90:	d056      	beq.n	8103040 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102f92:	e099      	b.n	81030c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102f94:	4b6f      	ldr	r3, [pc, #444]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102f96:	681b      	ldr	r3, [r3, #0]
 8102f98:	f003 0320 	and.w	r3, r3, #32
 8102f9c:	2b00      	cmp	r3, #0
 8102f9e:	d02d      	beq.n	8102ffc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102fa0:	4b6c      	ldr	r3, [pc, #432]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	08db      	lsrs	r3, r3, #3
 8102fa6:	f003 0303 	and.w	r3, r3, #3
 8102faa:	4a6b      	ldr	r2, [pc, #428]	; (8103158 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102fac:	fa22 f303 	lsr.w	r3, r2, r3
 8102fb0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102fb2:	687b      	ldr	r3, [r7, #4]
 8102fb4:	ee07 3a90 	vmov	s15, r3
 8102fb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fbc:	693b      	ldr	r3, [r7, #16]
 8102fbe:	ee07 3a90 	vmov	s15, r3
 8102fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102fca:	4b62      	ldr	r3, [pc, #392]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102fd2:	ee07 3a90 	vmov	s15, r3
 8102fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8102fde:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103164 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8102ffa:	e087      	b.n	810310c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102ffc:	693b      	ldr	r3, [r7, #16]
 8102ffe:	ee07 3a90 	vmov	s15, r3
 8103002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103006:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103168 <HAL_RCC_GetSysClockFreq+0x2e8>
 810300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810300e:	4b51      	ldr	r3, [pc, #324]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103016:	ee07 3a90 	vmov	s15, r3
 810301a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810301e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103022:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103164 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810302a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810302e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103036:	ee67 7a27 	vmul.f32	s15, s14, s15
 810303a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810303e:	e065      	b.n	810310c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103040:	693b      	ldr	r3, [r7, #16]
 8103042:	ee07 3a90 	vmov	s15, r3
 8103046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810304a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810316c <HAL_RCC_GetSysClockFreq+0x2ec>
 810304e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103052:	4b40      	ldr	r3, [pc, #256]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810305a:	ee07 3a90 	vmov	s15, r3
 810305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103062:	ed97 6a02 	vldr	s12, [r7, #8]
 8103066:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103164 <HAL_RCC_GetSysClockFreq+0x2e4>
 810306a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810306e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810307e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103082:	e043      	b.n	810310c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103084:	693b      	ldr	r3, [r7, #16]
 8103086:	ee07 3a90 	vmov	s15, r3
 810308a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810308e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103170 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103096:	4b2f      	ldr	r3, [pc, #188]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810309e:	ee07 3a90 	vmov	s15, r3
 81030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 81030aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103164 <HAL_RCC_GetSysClockFreq+0x2e4>
 81030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81030c6:	e021      	b.n	810310c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81030c8:	693b      	ldr	r3, [r7, #16]
 81030ca:	ee07 3a90 	vmov	s15, r3
 81030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810316c <HAL_RCC_GetSysClockFreq+0x2ec>
 81030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030da:	4b1e      	ldr	r3, [pc, #120]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030e2:	ee07 3a90 	vmov	s15, r3
 81030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030ea:	ed97 6a02 	vldr	s12, [r7, #8]
 81030ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103164 <HAL_RCC_GetSysClockFreq+0x2e4>
 81030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103106:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810310a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810310c:	4b11      	ldr	r3, [pc, #68]	; (8103154 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103110:	0a5b      	lsrs	r3, r3, #9
 8103112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103116:	3301      	adds	r3, #1
 8103118:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810311a:	683b      	ldr	r3, [r7, #0]
 810311c:	ee07 3a90 	vmov	s15, r3
 8103120:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103124:	edd7 6a07 	vldr	s13, [r7, #28]
 8103128:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810312c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103130:	ee17 3a90 	vmov	r3, s15
 8103134:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103136:	e005      	b.n	8103144 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103138:	2300      	movs	r3, #0
 810313a:	61bb      	str	r3, [r7, #24]
      break;
 810313c:	e002      	b.n	8103144 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810313e:	4b07      	ldr	r3, [pc, #28]	; (810315c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103140:	61bb      	str	r3, [r7, #24]
      break;
 8103142:	bf00      	nop
  }

  return sysclockfreq;
 8103144:	69bb      	ldr	r3, [r7, #24]
}
 8103146:	4618      	mov	r0, r3
 8103148:	3724      	adds	r7, #36	; 0x24
 810314a:	46bd      	mov	sp, r7
 810314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103150:	4770      	bx	lr
 8103152:	bf00      	nop
 8103154:	58024400 	.word	0x58024400
 8103158:	03d09000 	.word	0x03d09000
 810315c:	003d0900 	.word	0x003d0900
 8103160:	017d7840 	.word	0x017d7840
 8103164:	46000000 	.word	0x46000000
 8103168:	4c742400 	.word	0x4c742400
 810316c:	4a742400 	.word	0x4a742400
 8103170:	4bbebc20 	.word	0x4bbebc20

08103174 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103174:	b580      	push	{r7, lr}
 8103176:	b082      	sub	sp, #8
 8103178:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810317a:	f7ff fe81 	bl	8102e80 <HAL_RCC_GetSysClockFreq>
 810317e:	4602      	mov	r2, r0
 8103180:	4b11      	ldr	r3, [pc, #68]	; (81031c8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103182:	699b      	ldr	r3, [r3, #24]
 8103184:	0a1b      	lsrs	r3, r3, #8
 8103186:	f003 030f 	and.w	r3, r3, #15
 810318a:	4910      	ldr	r1, [pc, #64]	; (81031cc <HAL_RCC_GetHCLKFreq+0x58>)
 810318c:	5ccb      	ldrb	r3, [r1, r3]
 810318e:	f003 031f 	and.w	r3, r3, #31
 8103192:	fa22 f303 	lsr.w	r3, r2, r3
 8103196:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103198:	4b0b      	ldr	r3, [pc, #44]	; (81031c8 <HAL_RCC_GetHCLKFreq+0x54>)
 810319a:	699b      	ldr	r3, [r3, #24]
 810319c:	f003 030f 	and.w	r3, r3, #15
 81031a0:	4a0a      	ldr	r2, [pc, #40]	; (81031cc <HAL_RCC_GetHCLKFreq+0x58>)
 81031a2:	5cd3      	ldrb	r3, [r2, r3]
 81031a4:	f003 031f 	and.w	r3, r3, #31
 81031a8:	687a      	ldr	r2, [r7, #4]
 81031aa:	fa22 f303 	lsr.w	r3, r2, r3
 81031ae:	4a08      	ldr	r2, [pc, #32]	; (81031d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81031b0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81031b2:	4b07      	ldr	r3, [pc, #28]	; (81031d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81031b4:	681b      	ldr	r3, [r3, #0]
 81031b6:	4a07      	ldr	r2, [pc, #28]	; (81031d4 <HAL_RCC_GetHCLKFreq+0x60>)
 81031b8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81031ba:	4b05      	ldr	r3, [pc, #20]	; (81031d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81031bc:	681b      	ldr	r3, [r3, #0]
}
 81031be:	4618      	mov	r0, r3
 81031c0:	3708      	adds	r7, #8
 81031c2:	46bd      	mov	sp, r7
 81031c4:	bd80      	pop	{r7, pc}
 81031c6:	bf00      	nop
 81031c8:	58024400 	.word	0x58024400
 81031cc:	0810771c 	.word	0x0810771c
 81031d0:	10000004 	.word	0x10000004
 81031d4:	10000000 	.word	0x10000000

081031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81031d8:	b580      	push	{r7, lr}
 81031da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81031dc:	f7ff ffca 	bl	8103174 <HAL_RCC_GetHCLKFreq>
 81031e0:	4602      	mov	r2, r0
 81031e2:	4b06      	ldr	r3, [pc, #24]	; (81031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 81031e4:	69db      	ldr	r3, [r3, #28]
 81031e6:	091b      	lsrs	r3, r3, #4
 81031e8:	f003 0307 	and.w	r3, r3, #7
 81031ec:	4904      	ldr	r1, [pc, #16]	; (8103200 <HAL_RCC_GetPCLK1Freq+0x28>)
 81031ee:	5ccb      	ldrb	r3, [r1, r3]
 81031f0:	f003 031f 	and.w	r3, r3, #31
 81031f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81031f8:	4618      	mov	r0, r3
 81031fa:	bd80      	pop	{r7, pc}
 81031fc:	58024400 	.word	0x58024400
 8103200:	0810771c 	.word	0x0810771c

08103204 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103208:	b0cc      	sub	sp, #304	; 0x130
 810320a:	af00      	add	r7, sp, #0
 810320c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103210:	2300      	movs	r3, #0
 8103212:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103216:	2300      	movs	r3, #0
 8103218:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810321c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103224:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8103228:	2500      	movs	r5, #0
 810322a:	ea54 0305 	orrs.w	r3, r4, r5
 810322e:	d049      	beq.n	81032c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103230:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103236:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810323a:	d02f      	beq.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x98>
 810323c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103240:	d828      	bhi.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103242:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103246:	d01a      	beq.n	810327e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103248:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810324c:	d822      	bhi.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810324e:	2b00      	cmp	r3, #0
 8103250:	d003      	beq.n	810325a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103256:	d007      	beq.n	8103268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103258:	e01c      	b.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810325a:	4bb8      	ldr	r3, [pc, #736]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810325e:	4ab7      	ldr	r2, [pc, #732]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103264:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103266:	e01a      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103268:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810326c:	3308      	adds	r3, #8
 810326e:	2102      	movs	r1, #2
 8103270:	4618      	mov	r0, r3
 8103272:	f002 fba1 	bl	81059b8 <RCCEx_PLL2_Config>
 8103276:	4603      	mov	r3, r0
 8103278:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810327c:	e00f      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810327e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103282:	3328      	adds	r3, #40	; 0x28
 8103284:	2102      	movs	r1, #2
 8103286:	4618      	mov	r0, r3
 8103288:	f002 fc48 	bl	8105b1c <RCCEx_PLL3_Config>
 810328c:	4603      	mov	r3, r0
 810328e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103292:	e004      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103294:	2301      	movs	r3, #1
 8103296:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810329a:	e000      	b.n	810329e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 810329c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810329e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81032a2:	2b00      	cmp	r3, #0
 81032a4:	d10a      	bne.n	81032bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81032a6:	4ba5      	ldr	r3, [pc, #660]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81032a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81032aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81032ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81032b4:	4aa1      	ldr	r2, [pc, #644]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81032b6:	430b      	orrs	r3, r1
 81032b8:	6513      	str	r3, [r2, #80]	; 0x50
 81032ba:	e003      	b.n	81032c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81032c0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81032c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81032d0:	f04f 0900 	mov.w	r9, #0
 81032d4:	ea58 0309 	orrs.w	r3, r8, r9
 81032d8:	d047      	beq.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81032da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81032e0:	2b04      	cmp	r3, #4
 81032e2:	d82a      	bhi.n	810333a <HAL_RCCEx_PeriphCLKConfig+0x136>
 81032e4:	a201      	add	r2, pc, #4	; (adr r2, 81032ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032ea:	bf00      	nop
 81032ec:	08103301 	.word	0x08103301
 81032f0:	0810330f 	.word	0x0810330f
 81032f4:	08103325 	.word	0x08103325
 81032f8:	08103343 	.word	0x08103343
 81032fc:	08103343 	.word	0x08103343
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103300:	4b8e      	ldr	r3, [pc, #568]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103304:	4a8d      	ldr	r2, [pc, #564]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810330a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810330c:	e01a      	b.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810330e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103312:	3308      	adds	r3, #8
 8103314:	2100      	movs	r1, #0
 8103316:	4618      	mov	r0, r3
 8103318:	f002 fb4e 	bl	81059b8 <RCCEx_PLL2_Config>
 810331c:	4603      	mov	r3, r0
 810331e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103322:	e00f      	b.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103328:	3328      	adds	r3, #40	; 0x28
 810332a:	2100      	movs	r1, #0
 810332c:	4618      	mov	r0, r3
 810332e:	f002 fbf5 	bl	8105b1c <RCCEx_PLL3_Config>
 8103332:	4603      	mov	r3, r0
 8103334:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103338:	e004      	b.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810333a:	2301      	movs	r3, #1
 810333c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103340:	e000      	b.n	8103344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103344:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103348:	2b00      	cmp	r3, #0
 810334a:	d10a      	bne.n	8103362 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810334c:	4b7b      	ldr	r3, [pc, #492]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810334e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103350:	f023 0107 	bic.w	r1, r3, #7
 8103354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810335a:	4a78      	ldr	r2, [pc, #480]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810335c:	430b      	orrs	r3, r1
 810335e:	6513      	str	r3, [r2, #80]	; 0x50
 8103360:	e003      	b.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103362:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103366:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810336a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103372:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8103376:	f04f 0b00 	mov.w	fp, #0
 810337a:	ea5a 030b 	orrs.w	r3, sl, fp
 810337e:	d04c      	beq.n	810341a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103380:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810338a:	d030      	beq.n	81033ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 810338c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103390:	d829      	bhi.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103392:	2bc0      	cmp	r3, #192	; 0xc0
 8103394:	d02d      	beq.n	81033f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8103396:	2bc0      	cmp	r3, #192	; 0xc0
 8103398:	d825      	bhi.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810339a:	2b80      	cmp	r3, #128	; 0x80
 810339c:	d018      	beq.n	81033d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810339e:	2b80      	cmp	r3, #128	; 0x80
 81033a0:	d821      	bhi.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81033a2:	2b00      	cmp	r3, #0
 81033a4:	d002      	beq.n	81033ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81033a6:	2b40      	cmp	r3, #64	; 0x40
 81033a8:	d007      	beq.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81033aa:	e01c      	b.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81033ac:	4b63      	ldr	r3, [pc, #396]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81033b0:	4a62      	ldr	r2, [pc, #392]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81033b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81033b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81033b8:	e01c      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81033ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81033be:	3308      	adds	r3, #8
 81033c0:	2100      	movs	r1, #0
 81033c2:	4618      	mov	r0, r3
 81033c4:	f002 faf8 	bl	81059b8 <RCCEx_PLL2_Config>
 81033c8:	4603      	mov	r3, r0
 81033ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81033ce:	e011      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81033d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81033d4:	3328      	adds	r3, #40	; 0x28
 81033d6:	2100      	movs	r1, #0
 81033d8:	4618      	mov	r0, r3
 81033da:	f002 fb9f 	bl	8105b1c <RCCEx_PLL3_Config>
 81033de:	4603      	mov	r3, r0
 81033e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81033e4:	e006      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81033e6:	2301      	movs	r3, #1
 81033e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81033ec:	e002      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81033ee:	bf00      	nop
 81033f0:	e000      	b.n	81033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81033f8:	2b00      	cmp	r3, #0
 81033fa:	d10a      	bne.n	8103412 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81033fc:	4b4f      	ldr	r3, [pc, #316]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81033fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103400:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8103404:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810340a:	4a4c      	ldr	r2, [pc, #304]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810340c:	430b      	orrs	r3, r1
 810340e:	6513      	str	r3, [r2, #80]	; 0x50
 8103410:	e003      	b.n	810341a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103412:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103416:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810341a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103422:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8103426:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 810342a:	2300      	movs	r3, #0
 810342c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8103430:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8103434:	460b      	mov	r3, r1
 8103436:	4313      	orrs	r3, r2
 8103438:	d053      	beq.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810343a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810343e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103446:	d035      	beq.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103448:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810344c:	d82e      	bhi.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810344e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103452:	d031      	beq.n	81034b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103454:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103458:	d828      	bhi.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810345a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810345e:	d01a      	beq.n	8103496 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103464:	d822      	bhi.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103466:	2b00      	cmp	r3, #0
 8103468:	d003      	beq.n	8103472 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810346a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810346e:	d007      	beq.n	8103480 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103470:	e01c      	b.n	81034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103472:	4b32      	ldr	r3, [pc, #200]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103476:	4a31      	ldr	r2, [pc, #196]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810347c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810347e:	e01c      	b.n	81034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103484:	3308      	adds	r3, #8
 8103486:	2100      	movs	r1, #0
 8103488:	4618      	mov	r0, r3
 810348a:	f002 fa95 	bl	81059b8 <RCCEx_PLL2_Config>
 810348e:	4603      	mov	r3, r0
 8103490:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103494:	e011      	b.n	81034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103496:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810349a:	3328      	adds	r3, #40	; 0x28
 810349c:	2100      	movs	r1, #0
 810349e:	4618      	mov	r0, r3
 81034a0:	f002 fb3c 	bl	8105b1c <RCCEx_PLL3_Config>
 81034a4:	4603      	mov	r3, r0
 81034a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81034aa:	e006      	b.n	81034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81034ac:	2301      	movs	r3, #1
 81034ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81034b2:	e002      	b.n	81034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81034b4:	bf00      	nop
 81034b6:	e000      	b.n	81034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81034b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81034ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d10b      	bne.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81034c2:	4b1e      	ldr	r3, [pc, #120]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81034ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81034d2:	4a1a      	ldr	r2, [pc, #104]	; (810353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81034d4:	430b      	orrs	r3, r1
 81034d6:	6593      	str	r3, [r2, #88]	; 0x58
 81034d8:	e003      	b.n	81034e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81034de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81034e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 81034ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 81034f2:	2300      	movs	r3, #0
 81034f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 81034f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 81034fc:	460b      	mov	r3, r1
 81034fe:	4313      	orrs	r3, r2
 8103500:	d056      	beq.n	81035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103502:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810350a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810350e:	d038      	beq.n	8103582 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103514:	d831      	bhi.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103516:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810351a:	d034      	beq.n	8103586 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810351c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103520:	d82b      	bhi.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103526:	d01d      	beq.n	8103564 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103528:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810352c:	d825      	bhi.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810352e:	2b00      	cmp	r3, #0
 8103530:	d006      	beq.n	8103540 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103532:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103536:	d00a      	beq.n	810354e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103538:	e01f      	b.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810353a:	bf00      	nop
 810353c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103540:	4ba2      	ldr	r3, [pc, #648]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103544:	4aa1      	ldr	r2, [pc, #644]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810354a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810354c:	e01c      	b.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810354e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103552:	3308      	adds	r3, #8
 8103554:	2100      	movs	r1, #0
 8103556:	4618      	mov	r0, r3
 8103558:	f002 fa2e 	bl	81059b8 <RCCEx_PLL2_Config>
 810355c:	4603      	mov	r3, r0
 810355e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103562:	e011      	b.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103568:	3328      	adds	r3, #40	; 0x28
 810356a:	2100      	movs	r1, #0
 810356c:	4618      	mov	r0, r3
 810356e:	f002 fad5 	bl	8105b1c <RCCEx_PLL3_Config>
 8103572:	4603      	mov	r3, r0
 8103574:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103578:	e006      	b.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810357a:	2301      	movs	r3, #1
 810357c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103580:	e002      	b.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103582:	bf00      	nop
 8103584:	e000      	b.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103588:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810358c:	2b00      	cmp	r3, #0
 810358e:	d10b      	bne.n	81035a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103590:	4b8e      	ldr	r3, [pc, #568]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103594:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8103598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810359c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81035a0:	4a8a      	ldr	r2, [pc, #552]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81035a2:	430b      	orrs	r3, r1
 81035a4:	6593      	str	r3, [r2, #88]	; 0x58
 81035a6:	e003      	b.n	81035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81035ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81035b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 81035bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 81035c0:	2300      	movs	r3, #0
 81035c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 81035c6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81035ca:	460b      	mov	r3, r1
 81035cc:	4313      	orrs	r3, r2
 81035ce:	d03a      	beq.n	8103646 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81035d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81035d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81035d6:	2b30      	cmp	r3, #48	; 0x30
 81035d8:	d01f      	beq.n	810361a <HAL_RCCEx_PeriphCLKConfig+0x416>
 81035da:	2b30      	cmp	r3, #48	; 0x30
 81035dc:	d819      	bhi.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81035de:	2b20      	cmp	r3, #32
 81035e0:	d00c      	beq.n	81035fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81035e2:	2b20      	cmp	r3, #32
 81035e4:	d815      	bhi.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81035e6:	2b00      	cmp	r3, #0
 81035e8:	d019      	beq.n	810361e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81035ea:	2b10      	cmp	r3, #16
 81035ec:	d111      	bne.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035ee:	4b77      	ldr	r3, [pc, #476]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035f2:	4a76      	ldr	r2, [pc, #472]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81035f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81035fa:	e011      	b.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81035fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103600:	3308      	adds	r3, #8
 8103602:	2102      	movs	r1, #2
 8103604:	4618      	mov	r0, r3
 8103606:	f002 f9d7 	bl	81059b8 <RCCEx_PLL2_Config>
 810360a:	4603      	mov	r3, r0
 810360c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103610:	e006      	b.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103612:	2301      	movs	r3, #1
 8103614:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103618:	e002      	b.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810361a:	bf00      	nop
 810361c:	e000      	b.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103620:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103624:	2b00      	cmp	r3, #0
 8103626:	d10a      	bne.n	810363e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103628:	4b68      	ldr	r3, [pc, #416]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810362a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810362c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8103630:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103636:	4a65      	ldr	r2, [pc, #404]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103638:	430b      	orrs	r3, r1
 810363a:	64d3      	str	r3, [r2, #76]	; 0x4c
 810363c:	e003      	b.n	8103646 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810363e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103642:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103646:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810364e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8103652:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8103656:	2300      	movs	r3, #0
 8103658:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 810365c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8103660:	460b      	mov	r3, r1
 8103662:	4313      	orrs	r3, r2
 8103664:	d051      	beq.n	810370a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810366a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810366c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103670:	d035      	beq.n	81036de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103676:	d82e      	bhi.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103678:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810367c:	d031      	beq.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810367e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103682:	d828      	bhi.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103688:	d01a      	beq.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810368a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810368e:	d822      	bhi.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103690:	2b00      	cmp	r3, #0
 8103692:	d003      	beq.n	810369c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103698:	d007      	beq.n	81036aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810369a:	e01c      	b.n	81036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810369c:	4b4b      	ldr	r3, [pc, #300]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036a0:	4a4a      	ldr	r2, [pc, #296]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81036a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81036a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81036a8:	e01c      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81036aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036ae:	3308      	adds	r3, #8
 81036b0:	2100      	movs	r1, #0
 81036b2:	4618      	mov	r0, r3
 81036b4:	f002 f980 	bl	81059b8 <RCCEx_PLL2_Config>
 81036b8:	4603      	mov	r3, r0
 81036ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81036be:	e011      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036c4:	3328      	adds	r3, #40	; 0x28
 81036c6:	2100      	movs	r1, #0
 81036c8:	4618      	mov	r0, r3
 81036ca:	f002 fa27 	bl	8105b1c <RCCEx_PLL3_Config>
 81036ce:	4603      	mov	r3, r0
 81036d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81036d4:	e006      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036d6:	2301      	movs	r3, #1
 81036d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81036dc:	e002      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81036de:	bf00      	nop
 81036e0:	e000      	b.n	81036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81036e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81036e8:	2b00      	cmp	r3, #0
 81036ea:	d10a      	bne.n	8103702 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81036ec:	4b37      	ldr	r3, [pc, #220]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81036ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81036f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81036fa:	4a34      	ldr	r2, [pc, #208]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81036fc:	430b      	orrs	r3, r1
 81036fe:	6513      	str	r3, [r2, #80]	; 0x50
 8103700:	e003      	b.n	810370a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103702:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103706:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810370a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103712:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8103716:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 810371a:	2300      	movs	r3, #0
 810371c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8103720:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8103724:	460b      	mov	r3, r1
 8103726:	4313      	orrs	r3, r2
 8103728:	d056      	beq.n	81037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810372e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103734:	d033      	beq.n	810379e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810373a:	d82c      	bhi.n	8103796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810373c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103740:	d02f      	beq.n	81037a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103742:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103746:	d826      	bhi.n	8103796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103748:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810374c:	d02b      	beq.n	81037a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810374e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103752:	d820      	bhi.n	8103796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103754:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103758:	d012      	beq.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810375a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810375e:	d81a      	bhi.n	8103796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103760:	2b00      	cmp	r3, #0
 8103762:	d022      	beq.n	81037aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103768:	d115      	bne.n	8103796 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810376a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810376e:	3308      	adds	r3, #8
 8103770:	2101      	movs	r1, #1
 8103772:	4618      	mov	r0, r3
 8103774:	f002 f920 	bl	81059b8 <RCCEx_PLL2_Config>
 8103778:	4603      	mov	r3, r0
 810377a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810377e:	e015      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103784:	3328      	adds	r3, #40	; 0x28
 8103786:	2101      	movs	r1, #1
 8103788:	4618      	mov	r0, r3
 810378a:	f002 f9c7 	bl	8105b1c <RCCEx_PLL3_Config>
 810378e:	4603      	mov	r3, r0
 8103790:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103794:	e00a      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103796:	2301      	movs	r3, #1
 8103798:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810379c:	e006      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810379e:	bf00      	nop
 81037a0:	e004      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81037a2:	bf00      	nop
 81037a4:	e002      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81037a6:	bf00      	nop
 81037a8:	e000      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81037ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81037b0:	2b00      	cmp	r3, #0
 81037b2:	d10d      	bne.n	81037d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81037b4:	4b05      	ldr	r3, [pc, #20]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 81037bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81037c2:	4a02      	ldr	r2, [pc, #8]	; (81037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81037c4:	430b      	orrs	r3, r1
 81037c6:	6513      	str	r3, [r2, #80]	; 0x50
 81037c8:	e006      	b.n	81037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81037ca:	bf00      	nop
 81037cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81037d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81037d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81037e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81037e8:	2300      	movs	r3, #0
 81037ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 81037ee:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 81037f2:	460b      	mov	r3, r1
 81037f4:	4313      	orrs	r3, r2
 81037f6:	d055      	beq.n	81038a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81037f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103800:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103804:	d033      	beq.n	810386e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103806:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810380a:	d82c      	bhi.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810380c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103810:	d02f      	beq.n	8103872 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103816:	d826      	bhi.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103818:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810381c:	d02b      	beq.n	8103876 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810381e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103822:	d820      	bhi.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103828:	d012      	beq.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810382a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810382e:	d81a      	bhi.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103830:	2b00      	cmp	r3, #0
 8103832:	d022      	beq.n	810387a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103838:	d115      	bne.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810383a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810383e:	3308      	adds	r3, #8
 8103840:	2101      	movs	r1, #1
 8103842:	4618      	mov	r0, r3
 8103844:	f002 f8b8 	bl	81059b8 <RCCEx_PLL2_Config>
 8103848:	4603      	mov	r3, r0
 810384a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810384e:	e015      	b.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103850:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103854:	3328      	adds	r3, #40	; 0x28
 8103856:	2101      	movs	r1, #1
 8103858:	4618      	mov	r0, r3
 810385a:	f002 f95f 	bl	8105b1c <RCCEx_PLL3_Config>
 810385e:	4603      	mov	r3, r0
 8103860:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103864:	e00a      	b.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103866:	2301      	movs	r3, #1
 8103868:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810386c:	e006      	b.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810386e:	bf00      	nop
 8103870:	e004      	b.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103872:	bf00      	nop
 8103874:	e002      	b.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103876:	bf00      	nop
 8103878:	e000      	b.n	810387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810387c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103880:	2b00      	cmp	r3, #0
 8103882:	d10b      	bne.n	810389c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103884:	4bb7      	ldr	r3, [pc, #732]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103888:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810388c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103890:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103894:	4ab3      	ldr	r2, [pc, #716]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103896:	430b      	orrs	r3, r1
 8103898:	6593      	str	r3, [r2, #88]	; 0x58
 810389a:	e003      	b.n	81038a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810389c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81038a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 81038a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038ac:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 81038b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 81038b4:	2300      	movs	r3, #0
 81038b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 81038ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81038be:	460b      	mov	r3, r1
 81038c0:	4313      	orrs	r3, r2
 81038c2:	d02a      	beq.n	810391a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 81038c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81038ca:	2b00      	cmp	r3, #0
 81038cc:	d011      	beq.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 81038ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81038d2:	d10a      	bne.n	81038ea <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81038d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038d8:	3308      	adds	r3, #8
 81038da:	2101      	movs	r1, #1
 81038dc:	4618      	mov	r0, r3
 81038de:	f002 f86b 	bl	81059b8 <RCCEx_PLL2_Config>
 81038e2:	4603      	mov	r3, r0
 81038e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81038e8:	e004      	b.n	81038f4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81038ea:	2301      	movs	r3, #1
 81038ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81038f0:	e000      	b.n	81038f4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81038f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81038f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d10a      	bne.n	8103912 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81038fc:	4b99      	ldr	r3, [pc, #612]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103900:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8103904:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810390a:	4a96      	ldr	r2, [pc, #600]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810390c:	430b      	orrs	r3, r1
 810390e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103910:	e003      	b.n	810391a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103912:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103916:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810391a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810391e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103922:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8103926:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 810392a:	2300      	movs	r3, #0
 810392c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8103930:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8103934:	460b      	mov	r3, r1
 8103936:	4313      	orrs	r3, r2
 8103938:	d037      	beq.n	81039aa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810393a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103944:	d00e      	beq.n	8103964 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8103946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810394a:	d816      	bhi.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x776>
 810394c:	2b00      	cmp	r3, #0
 810394e:	d018      	beq.n	8103982 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8103950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103954:	d111      	bne.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103956:	4b83      	ldr	r3, [pc, #524]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810395a:	4a82      	ldr	r2, [pc, #520]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810395c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103960:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103962:	e00f      	b.n	8103984 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103964:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103968:	3308      	adds	r3, #8
 810396a:	2101      	movs	r1, #1
 810396c:	4618      	mov	r0, r3
 810396e:	f002 f823 	bl	81059b8 <RCCEx_PLL2_Config>
 8103972:	4603      	mov	r3, r0
 8103974:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103978:	e004      	b.n	8103984 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810397a:	2301      	movs	r3, #1
 810397c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103980:	e000      	b.n	8103984 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8103982:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103984:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103988:	2b00      	cmp	r3, #0
 810398a:	d10a      	bne.n	81039a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810398c:	4b75      	ldr	r3, [pc, #468]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810398e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103990:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8103994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810399a:	4a72      	ldr	r2, [pc, #456]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810399c:	430b      	orrs	r3, r1
 810399e:	6513      	str	r3, [r2, #80]	; 0x50
 81039a0:	e003      	b.n	81039aa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81039a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81039aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039b2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 81039b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 81039ba:	2300      	movs	r3, #0
 81039bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 81039c0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 81039c4:	460b      	mov	r3, r1
 81039c6:	4313      	orrs	r3, r2
 81039c8:	d03a      	beq.n	8103a40 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81039ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81039d0:	2b03      	cmp	r3, #3
 81039d2:	d81d      	bhi.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 81039d4:	a201      	add	r2, pc, #4	; (adr r2, 81039dc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 81039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039da:	bf00      	nop
 81039dc:	08103a19 	.word	0x08103a19
 81039e0:	081039ed 	.word	0x081039ed
 81039e4:	081039fb 	.word	0x081039fb
 81039e8:	08103a19 	.word	0x08103a19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039ec:	4b5d      	ldr	r3, [pc, #372]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039f0:	4a5c      	ldr	r2, [pc, #368]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81039f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81039f8:	e00f      	b.n	8103a1a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81039fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039fe:	3308      	adds	r3, #8
 8103a00:	2102      	movs	r1, #2
 8103a02:	4618      	mov	r0, r3
 8103a04:	f001 ffd8 	bl	81059b8 <RCCEx_PLL2_Config>
 8103a08:	4603      	mov	r3, r0
 8103a0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103a0e:	e004      	b.n	8103a1a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103a10:	2301      	movs	r3, #1
 8103a12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103a16:	e000      	b.n	8103a1a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8103a18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103a1e:	2b00      	cmp	r3, #0
 8103a20:	d10a      	bne.n	8103a38 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103a22:	4b50      	ldr	r3, [pc, #320]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a26:	f023 0103 	bic.w	r1, r3, #3
 8103a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a30:	4a4c      	ldr	r2, [pc, #304]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103a32:	430b      	orrs	r3, r1
 8103a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103a36:	e003      	b.n	8103a40 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103a3c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a48:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8103a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8103a50:	2300      	movs	r3, #0
 8103a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8103a56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8103a5a:	460b      	mov	r3, r1
 8103a5c:	4313      	orrs	r3, r2
 8103a5e:	f000 80a0 	beq.w	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103a62:	4b41      	ldr	r3, [pc, #260]	; (8103b68 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103a64:	681b      	ldr	r3, [r3, #0]
 8103a66:	4a40      	ldr	r2, [pc, #256]	; (8103b68 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103a6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103a6e:	f7fd fc7b 	bl	8101368 <HAL_GetTick>
 8103a72:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103a76:	e00b      	b.n	8103a90 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103a78:	f7fd fc76 	bl	8101368 <HAL_GetTick>
 8103a7c:	4602      	mov	r2, r0
 8103a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8103a82:	1ad3      	subs	r3, r2, r3
 8103a84:	2b64      	cmp	r3, #100	; 0x64
 8103a86:	d903      	bls.n	8103a90 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103a88:	2303      	movs	r3, #3
 8103a8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103a8e:	e005      	b.n	8103a9c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103a90:	4b35      	ldr	r3, [pc, #212]	; (8103b68 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103a92:	681b      	ldr	r3, [r3, #0]
 8103a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a98:	2b00      	cmp	r3, #0
 8103a9a:	d0ed      	beq.n	8103a78 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8103a9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103aa0:	2b00      	cmp	r3, #0
 8103aa2:	d17a      	bne.n	8103b9a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103aa4:	4b2f      	ldr	r3, [pc, #188]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103aa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103aac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103ab0:	4053      	eors	r3, r2
 8103ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	d015      	beq.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103aba:	4b2a      	ldr	r3, [pc, #168]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103ac2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103ac6:	4b27      	ldr	r3, [pc, #156]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103aca:	4a26      	ldr	r2, [pc, #152]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103ad0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103ad2:	4b24      	ldr	r3, [pc, #144]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ad6:	4a23      	ldr	r2, [pc, #140]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103adc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103ade:	4a21      	ldr	r2, [pc, #132]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ae0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8103ae4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103aea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103af2:	d118      	bne.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103af4:	f7fd fc38 	bl	8101368 <HAL_GetTick>
 8103af8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103afc:	e00d      	b.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103afe:	f7fd fc33 	bl	8101368 <HAL_GetTick>
 8103b02:	4602      	mov	r2, r0
 8103b04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8103b08:	1ad2      	subs	r2, r2, r3
 8103b0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8103b0e:	429a      	cmp	r2, r3
 8103b10:	d903      	bls.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8103b12:	2303      	movs	r3, #3
 8103b14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8103b18:	e005      	b.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103b1a:	4b12      	ldr	r3, [pc, #72]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103b1e:	f003 0302 	and.w	r3, r3, #2
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d0eb      	beq.n	8103afe <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8103b26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b2a:	2b00      	cmp	r3, #0
 8103b2c:	d130      	bne.n	8103b90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103b3e:	d115      	bne.n	8103b6c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8103b40:	4b08      	ldr	r3, [pc, #32]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103b42:	691b      	ldr	r3, [r3, #16]
 8103b44:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8103b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b50:	091b      	lsrs	r3, r3, #4
 8103b52:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103b56:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103b5a:	4a02      	ldr	r2, [pc, #8]	; (8103b64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103b5c:	430b      	orrs	r3, r1
 8103b5e:	6113      	str	r3, [r2, #16]
 8103b60:	e00a      	b.n	8103b78 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8103b62:	bf00      	nop
 8103b64:	58024400 	.word	0x58024400
 8103b68:	58024800 	.word	0x58024800
 8103b6c:	4bd4      	ldr	r3, [pc, #848]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b6e:	691b      	ldr	r3, [r3, #16]
 8103b70:	4ad3      	ldr	r2, [pc, #844]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103b76:	6113      	str	r3, [r2, #16]
 8103b78:	4bd1      	ldr	r3, [pc, #836]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b7a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8103b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103b88:	4acd      	ldr	r2, [pc, #820]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103b8a:	430b      	orrs	r3, r1
 8103b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8103b8e:	e008      	b.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103b90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b94:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8103b98:	e003      	b.n	8103ba2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b9e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103baa:	f002 0301 	and.w	r3, r2, #1
 8103bae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8103bb2:	2300      	movs	r3, #0
 8103bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8103bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8103bbc:	460b      	mov	r3, r1
 8103bbe:	4313      	orrs	r3, r2
 8103bc0:	f000 808b 	beq.w	8103cda <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103bcc:	2b28      	cmp	r3, #40	; 0x28
 8103bce:	d86b      	bhi.n	8103ca8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103bd0:	a201      	add	r2, pc, #4	; (adr r2, 8103bd8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103bd6:	bf00      	nop
 8103bd8:	08103cb1 	.word	0x08103cb1
 8103bdc:	08103ca9 	.word	0x08103ca9
 8103be0:	08103ca9 	.word	0x08103ca9
 8103be4:	08103ca9 	.word	0x08103ca9
 8103be8:	08103ca9 	.word	0x08103ca9
 8103bec:	08103ca9 	.word	0x08103ca9
 8103bf0:	08103ca9 	.word	0x08103ca9
 8103bf4:	08103ca9 	.word	0x08103ca9
 8103bf8:	08103c7d 	.word	0x08103c7d
 8103bfc:	08103ca9 	.word	0x08103ca9
 8103c00:	08103ca9 	.word	0x08103ca9
 8103c04:	08103ca9 	.word	0x08103ca9
 8103c08:	08103ca9 	.word	0x08103ca9
 8103c0c:	08103ca9 	.word	0x08103ca9
 8103c10:	08103ca9 	.word	0x08103ca9
 8103c14:	08103ca9 	.word	0x08103ca9
 8103c18:	08103c93 	.word	0x08103c93
 8103c1c:	08103ca9 	.word	0x08103ca9
 8103c20:	08103ca9 	.word	0x08103ca9
 8103c24:	08103ca9 	.word	0x08103ca9
 8103c28:	08103ca9 	.word	0x08103ca9
 8103c2c:	08103ca9 	.word	0x08103ca9
 8103c30:	08103ca9 	.word	0x08103ca9
 8103c34:	08103ca9 	.word	0x08103ca9
 8103c38:	08103cb1 	.word	0x08103cb1
 8103c3c:	08103ca9 	.word	0x08103ca9
 8103c40:	08103ca9 	.word	0x08103ca9
 8103c44:	08103ca9 	.word	0x08103ca9
 8103c48:	08103ca9 	.word	0x08103ca9
 8103c4c:	08103ca9 	.word	0x08103ca9
 8103c50:	08103ca9 	.word	0x08103ca9
 8103c54:	08103ca9 	.word	0x08103ca9
 8103c58:	08103cb1 	.word	0x08103cb1
 8103c5c:	08103ca9 	.word	0x08103ca9
 8103c60:	08103ca9 	.word	0x08103ca9
 8103c64:	08103ca9 	.word	0x08103ca9
 8103c68:	08103ca9 	.word	0x08103ca9
 8103c6c:	08103ca9 	.word	0x08103ca9
 8103c70:	08103ca9 	.word	0x08103ca9
 8103c74:	08103ca9 	.word	0x08103ca9
 8103c78:	08103cb1 	.word	0x08103cb1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c80:	3308      	adds	r3, #8
 8103c82:	2101      	movs	r1, #1
 8103c84:	4618      	mov	r0, r3
 8103c86:	f001 fe97 	bl	81059b8 <RCCEx_PLL2_Config>
 8103c8a:	4603      	mov	r3, r0
 8103c8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103c90:	e00f      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c96:	3328      	adds	r3, #40	; 0x28
 8103c98:	2101      	movs	r1, #1
 8103c9a:	4618      	mov	r0, r3
 8103c9c:	f001 ff3e 	bl	8105b1c <RCCEx_PLL3_Config>
 8103ca0:	4603      	mov	r3, r0
 8103ca2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103ca6:	e004      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103ca8:	2301      	movs	r3, #1
 8103caa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103cae:	e000      	b.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8103cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103cb6:	2b00      	cmp	r3, #0
 8103cb8:	d10b      	bne.n	8103cd2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103cba:	4b81      	ldr	r3, [pc, #516]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103cbe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8103cc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103cca:	4a7d      	ldr	r2, [pc, #500]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103ccc:	430b      	orrs	r3, r1
 8103cce:	6553      	str	r3, [r2, #84]	; 0x54
 8103cd0:	e003      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103cd6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ce2:	f002 0302 	and.w	r3, r2, #2
 8103ce6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8103cea:	2300      	movs	r3, #0
 8103cec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8103cf0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8103cf4:	460b      	mov	r3, r1
 8103cf6:	4313      	orrs	r3, r2
 8103cf8:	d042      	beq.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103d00:	2b05      	cmp	r3, #5
 8103d02:	d825      	bhi.n	8103d50 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8103d04:	a201      	add	r2, pc, #4	; (adr r2, 8103d0c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8103d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d0a:	bf00      	nop
 8103d0c:	08103d59 	.word	0x08103d59
 8103d10:	08103d25 	.word	0x08103d25
 8103d14:	08103d3b 	.word	0x08103d3b
 8103d18:	08103d59 	.word	0x08103d59
 8103d1c:	08103d59 	.word	0x08103d59
 8103d20:	08103d59 	.word	0x08103d59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d28:	3308      	adds	r3, #8
 8103d2a:	2101      	movs	r1, #1
 8103d2c:	4618      	mov	r0, r3
 8103d2e:	f001 fe43 	bl	81059b8 <RCCEx_PLL2_Config>
 8103d32:	4603      	mov	r3, r0
 8103d34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103d38:	e00f      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d3e:	3328      	adds	r3, #40	; 0x28
 8103d40:	2101      	movs	r1, #1
 8103d42:	4618      	mov	r0, r3
 8103d44:	f001 feea 	bl	8105b1c <RCCEx_PLL3_Config>
 8103d48:	4603      	mov	r3, r0
 8103d4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8103d4e:	e004      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d50:	2301      	movs	r3, #1
 8103d52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103d56:	e000      	b.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8103d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d5e:	2b00      	cmp	r3, #0
 8103d60:	d10a      	bne.n	8103d78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103d62:	4b57      	ldr	r3, [pc, #348]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d66:	f023 0107 	bic.w	r1, r3, #7
 8103d6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103d70:	4a53      	ldr	r2, [pc, #332]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103d72:	430b      	orrs	r3, r1
 8103d74:	6553      	str	r3, [r2, #84]	; 0x54
 8103d76:	e003      	b.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d78:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d7c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d88:	f002 0304 	and.w	r3, r2, #4
 8103d8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8103d90:	2300      	movs	r3, #0
 8103d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8103d96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8103d9a:	460b      	mov	r3, r1
 8103d9c:	4313      	orrs	r3, r2
 8103d9e:	d044      	beq.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8103da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103da8:	2b05      	cmp	r3, #5
 8103daa:	d825      	bhi.n	8103df8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8103dac:	a201      	add	r2, pc, #4	; (adr r2, 8103db4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8103dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103db2:	bf00      	nop
 8103db4:	08103e01 	.word	0x08103e01
 8103db8:	08103dcd 	.word	0x08103dcd
 8103dbc:	08103de3 	.word	0x08103de3
 8103dc0:	08103e01 	.word	0x08103e01
 8103dc4:	08103e01 	.word	0x08103e01
 8103dc8:	08103e01 	.word	0x08103e01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dd0:	3308      	adds	r3, #8
 8103dd2:	2101      	movs	r1, #1
 8103dd4:	4618      	mov	r0, r3
 8103dd6:	f001 fdef 	bl	81059b8 <RCCEx_PLL2_Config>
 8103dda:	4603      	mov	r3, r0
 8103ddc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103de0:	e00f      	b.n	8103e02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103de2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103de6:	3328      	adds	r3, #40	; 0x28
 8103de8:	2101      	movs	r1, #1
 8103dea:	4618      	mov	r0, r3
 8103dec:	f001 fe96 	bl	8105b1c <RCCEx_PLL3_Config>
 8103df0:	4603      	mov	r3, r0
 8103df2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103df6:	e004      	b.n	8103e02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103df8:	2301      	movs	r3, #1
 8103dfa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103dfe:	e000      	b.n	8103e02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8103e00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e06:	2b00      	cmp	r3, #0
 8103e08:	d10b      	bne.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103e0a:	4b2d      	ldr	r3, [pc, #180]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e0e:	f023 0107 	bic.w	r1, r3, #7
 8103e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103e1a:	4a29      	ldr	r2, [pc, #164]	; (8103ec0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103e1c:	430b      	orrs	r3, r1
 8103e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8103e20:	e003      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e32:	f002 0320 	and.w	r3, r2, #32
 8103e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8103e3a:	2300      	movs	r3, #0
 8103e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8103e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8103e44:	460b      	mov	r3, r1
 8103e46:	4313      	orrs	r3, r2
 8103e48:	d057      	beq.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8103e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e56:	d035      	beq.n	8103ec4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8103e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e5c:	d82c      	bhi.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e62:	d031      	beq.n	8103ec8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8103e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e68:	d826      	bhi.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e6e:	d02d      	beq.n	8103ecc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8103e70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e74:	d820      	bhi.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e7a:	d012      	beq.n	8103ea2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8103e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e80:	d81a      	bhi.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d024      	beq.n	8103ed0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8103e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e8a:	d115      	bne.n	8103eb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e90:	3308      	adds	r3, #8
 8103e92:	2100      	movs	r1, #0
 8103e94:	4618      	mov	r0, r3
 8103e96:	f001 fd8f 	bl	81059b8 <RCCEx_PLL2_Config>
 8103e9a:	4603      	mov	r3, r0
 8103e9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103ea0:	e017      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103ea2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ea6:	3328      	adds	r3, #40	; 0x28
 8103ea8:	2102      	movs	r1, #2
 8103eaa:	4618      	mov	r0, r3
 8103eac:	f001 fe36 	bl	8105b1c <RCCEx_PLL3_Config>
 8103eb0:	4603      	mov	r3, r0
 8103eb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103eb6:	e00c      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103eb8:	2301      	movs	r3, #1
 8103eba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103ebe:	e008      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8103ec0:	58024400 	.word	0x58024400
        break;
 8103ec4:	bf00      	nop
 8103ec6:	e004      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103ec8:	bf00      	nop
 8103eca:	e002      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103ecc:	bf00      	nop
 8103ece:	e000      	b.n	8103ed2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8103ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103ed6:	2b00      	cmp	r3, #0
 8103ed8:	d10b      	bne.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103eda:	4bc2      	ldr	r3, [pc, #776]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ede:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103eea:	4abe      	ldr	r2, [pc, #760]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103eec:	430b      	orrs	r3, r1
 8103eee:	6553      	str	r3, [r2, #84]	; 0x54
 8103ef0:	e003      	b.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103ef6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f02:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8103f06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8103f0a:	2300      	movs	r3, #0
 8103f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8103f10:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8103f14:	460b      	mov	r3, r1
 8103f16:	4313      	orrs	r3, r2
 8103f18:	d055      	beq.n	8103fc6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8103f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103f26:	d033      	beq.n	8103f90 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8103f28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103f2c:	d82c      	bhi.n	8103f88 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f32:	d02f      	beq.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8103f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f38:	d826      	bhi.n	8103f88 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103f3e:	d02b      	beq.n	8103f98 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8103f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103f44:	d820      	bhi.n	8103f88 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103f4a:	d012      	beq.n	8103f72 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8103f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103f50:	d81a      	bhi.n	8103f88 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d022      	beq.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8103f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103f5a:	d115      	bne.n	8103f88 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f60:	3308      	adds	r3, #8
 8103f62:	2100      	movs	r1, #0
 8103f64:	4618      	mov	r0, r3
 8103f66:	f001 fd27 	bl	81059b8 <RCCEx_PLL2_Config>
 8103f6a:	4603      	mov	r3, r0
 8103f6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103f70:	e015      	b.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103f72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f76:	3328      	adds	r3, #40	; 0x28
 8103f78:	2102      	movs	r1, #2
 8103f7a:	4618      	mov	r0, r3
 8103f7c:	f001 fdce 	bl	8105b1c <RCCEx_PLL3_Config>
 8103f80:	4603      	mov	r3, r0
 8103f82:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8103f86:	e00a      	b.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f88:	2301      	movs	r3, #1
 8103f8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103f8e:	e006      	b.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f90:	bf00      	nop
 8103f92:	e004      	b.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f94:	bf00      	nop
 8103f96:	e002      	b.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f98:	bf00      	nop
 8103f9a:	e000      	b.n	8103f9e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8103f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103fa2:	2b00      	cmp	r3, #0
 8103fa4:	d10b      	bne.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103fa6:	4b8f      	ldr	r3, [pc, #572]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103faa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8103fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103fb6:	4a8b      	ldr	r2, [pc, #556]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8103fb8:	430b      	orrs	r3, r1
 8103fba:	6593      	str	r3, [r2, #88]	; 0x58
 8103fbc:	e003      	b.n	8103fc6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103fc2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fce:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8103fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8103fd6:	2300      	movs	r3, #0
 8103fd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8103fdc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8103fe0:	460b      	mov	r3, r1
 8103fe2:	4313      	orrs	r3, r2
 8103fe4:	d055      	beq.n	8104092 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103fee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103ff2:	d033      	beq.n	810405c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8103ff4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103ff8:	d82c      	bhi.n	8104054 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8103ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103ffe:	d02f      	beq.n	8104060 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8104000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104004:	d826      	bhi.n	8104054 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104006:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810400a:	d02b      	beq.n	8104064 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 810400c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104010:	d820      	bhi.n	8104054 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104012:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104016:	d012      	beq.n	810403e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8104018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810401c:	d81a      	bhi.n	8104054 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810401e:	2b00      	cmp	r3, #0
 8104020:	d022      	beq.n	8104068 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8104022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104026:	d115      	bne.n	8104054 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104028:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810402c:	3308      	adds	r3, #8
 810402e:	2100      	movs	r1, #0
 8104030:	4618      	mov	r0, r3
 8104032:	f001 fcc1 	bl	81059b8 <RCCEx_PLL2_Config>
 8104036:	4603      	mov	r3, r0
 8104038:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810403c:	e015      	b.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810403e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104042:	3328      	adds	r3, #40	; 0x28
 8104044:	2102      	movs	r1, #2
 8104046:	4618      	mov	r0, r3
 8104048:	f001 fd68 	bl	8105b1c <RCCEx_PLL3_Config>
 810404c:	4603      	mov	r3, r0
 810404e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104052:	e00a      	b.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104054:	2301      	movs	r3, #1
 8104056:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810405a:	e006      	b.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810405c:	bf00      	nop
 810405e:	e004      	b.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104060:	bf00      	nop
 8104062:	e002      	b.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104064:	bf00      	nop
 8104066:	e000      	b.n	810406a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104068:	bf00      	nop
    }

    if (ret == HAL_OK)
 810406a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810406e:	2b00      	cmp	r3, #0
 8104070:	d10b      	bne.n	810408a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104072:	4b5c      	ldr	r3, [pc, #368]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104076:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 810407a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810407e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104082:	4a58      	ldr	r2, [pc, #352]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104084:	430b      	orrs	r3, r1
 8104086:	6593      	str	r3, [r2, #88]	; 0x58
 8104088:	e003      	b.n	8104092 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810408a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810408e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104096:	e9d3 2300 	ldrd	r2, r3, [r3]
 810409a:	f002 0308 	and.w	r3, r2, #8
 810409e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 81040a2:	2300      	movs	r3, #0
 81040a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 81040a8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 81040ac:	460b      	mov	r3, r1
 81040ae:	4313      	orrs	r3, r2
 81040b0:	d01e      	beq.n	81040f0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81040b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81040ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81040be:	d10c      	bne.n	81040da <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81040c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040c4:	3328      	adds	r3, #40	; 0x28
 81040c6:	2102      	movs	r1, #2
 81040c8:	4618      	mov	r0, r3
 81040ca:	f001 fd27 	bl	8105b1c <RCCEx_PLL3_Config>
 81040ce:	4603      	mov	r3, r0
 81040d0:	2b00      	cmp	r3, #0
 81040d2:	d002      	beq.n	81040da <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81040d4:	2301      	movs	r3, #1
 81040d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81040da:	4b42      	ldr	r3, [pc, #264]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81040e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81040ea:	4a3e      	ldr	r2, [pc, #248]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81040ec:	430b      	orrs	r3, r1
 81040ee:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81040f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81040f8:	f002 0310 	and.w	r3, r2, #16
 81040fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8104100:	2300      	movs	r3, #0
 8104102:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8104106:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 810410a:	460b      	mov	r3, r1
 810410c:	4313      	orrs	r3, r2
 810410e:	d01e      	beq.n	810414e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810411c:	d10c      	bne.n	8104138 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810411e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104122:	3328      	adds	r3, #40	; 0x28
 8104124:	2102      	movs	r1, #2
 8104126:	4618      	mov	r0, r3
 8104128:	f001 fcf8 	bl	8105b1c <RCCEx_PLL3_Config>
 810412c:	4603      	mov	r3, r0
 810412e:	2b00      	cmp	r3, #0
 8104130:	d002      	beq.n	8104138 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8104132:	2301      	movs	r3, #1
 8104134:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104138:	4b2a      	ldr	r3, [pc, #168]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810413a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810413c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104140:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104148:	4a26      	ldr	r2, [pc, #152]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810414a:	430b      	orrs	r3, r1
 810414c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810414e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104156:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 810415a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 810415e:	2300      	movs	r3, #0
 8104160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8104164:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8104168:	460b      	mov	r3, r1
 810416a:	4313      	orrs	r3, r2
 810416c:	d040      	beq.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810416e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104172:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810417a:	d022      	beq.n	81041c2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 810417c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104180:	d81b      	bhi.n	81041ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8104182:	2b00      	cmp	r3, #0
 8104184:	d003      	beq.n	810418e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8104186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810418a:	d00b      	beq.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 810418c:	e015      	b.n	81041ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810418e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104192:	3308      	adds	r3, #8
 8104194:	2100      	movs	r1, #0
 8104196:	4618      	mov	r0, r3
 8104198:	f001 fc0e 	bl	81059b8 <RCCEx_PLL2_Config>
 810419c:	4603      	mov	r3, r0
 810419e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81041a2:	e00f      	b.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81041a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041a8:	3328      	adds	r3, #40	; 0x28
 81041aa:	2102      	movs	r1, #2
 81041ac:	4618      	mov	r0, r3
 81041ae:	f001 fcb5 	bl	8105b1c <RCCEx_PLL3_Config>
 81041b2:	4603      	mov	r3, r0
 81041b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81041b8:	e004      	b.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041ba:	2301      	movs	r3, #1
 81041bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81041c0:	e000      	b.n	81041c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 81041c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041c8:	2b00      	cmp	r3, #0
 81041ca:	d10d      	bne.n	81041e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81041cc:	4b05      	ldr	r3, [pc, #20]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81041ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041d0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81041d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81041dc:	4a01      	ldr	r2, [pc, #4]	; (81041e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81041de:	430b      	orrs	r3, r1
 81041e0:	6593      	str	r3, [r2, #88]	; 0x58
 81041e2:	e005      	b.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81041e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041ec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81041f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041f8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81041fc:	67bb      	str	r3, [r7, #120]	; 0x78
 81041fe:	2300      	movs	r3, #0
 8104200:	67fb      	str	r3, [r7, #124]	; 0x7c
 8104202:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8104206:	460b      	mov	r3, r1
 8104208:	4313      	orrs	r3, r2
 810420a:	d03b      	beq.n	8104284 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810420c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104214:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104218:	d01f      	beq.n	810425a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810421a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810421e:	d818      	bhi.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8104220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104224:	d003      	beq.n	810422e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8104226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810422a:	d007      	beq.n	810423c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 810422c:	e011      	b.n	8104252 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810422e:	4b64      	ldr	r3, [pc, #400]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104232:	4a63      	ldr	r2, [pc, #396]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810423a:	e00f      	b.n	810425c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810423c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104240:	3328      	adds	r3, #40	; 0x28
 8104242:	2101      	movs	r1, #1
 8104244:	4618      	mov	r0, r3
 8104246:	f001 fc69 	bl	8105b1c <RCCEx_PLL3_Config>
 810424a:	4603      	mov	r3, r0
 810424c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8104250:	e004      	b.n	810425c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104252:	2301      	movs	r3, #1
 8104254:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104258:	e000      	b.n	810425c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810425c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104260:	2b00      	cmp	r3, #0
 8104262:	d10b      	bne.n	810427c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104264:	4b56      	ldr	r3, [pc, #344]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104268:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810426c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104274:	4a52      	ldr	r2, [pc, #328]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104276:	430b      	orrs	r3, r1
 8104278:	6553      	str	r3, [r2, #84]	; 0x54
 810427a:	e003      	b.n	8104284 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810427c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104280:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104284:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104288:	e9d3 2300 	ldrd	r2, r3, [r3]
 810428c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8104290:	673b      	str	r3, [r7, #112]	; 0x70
 8104292:	2300      	movs	r3, #0
 8104294:	677b      	str	r3, [r7, #116]	; 0x74
 8104296:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 810429a:	460b      	mov	r3, r1
 810429c:	4313      	orrs	r3, r2
 810429e:	d031      	beq.n	8104304 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81042a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042a6:	2b00      	cmp	r3, #0
 81042a8:	d003      	beq.n	81042b2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81042aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81042ae:	d007      	beq.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81042b0:	e011      	b.n	81042d6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81042b2:	4b43      	ldr	r3, [pc, #268]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042b6:	4a42      	ldr	r2, [pc, #264]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81042b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81042bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81042be:	e00e      	b.n	81042de <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81042c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042c4:	3308      	adds	r3, #8
 81042c6:	2102      	movs	r1, #2
 81042c8:	4618      	mov	r0, r3
 81042ca:	f001 fb75 	bl	81059b8 <RCCEx_PLL2_Config>
 81042ce:	4603      	mov	r3, r0
 81042d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81042d4:	e003      	b.n	81042de <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81042d6:	2301      	movs	r3, #1
 81042d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81042dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	d10a      	bne.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81042e6:	4b36      	ldr	r3, [pc, #216]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81042e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81042ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042f4:	4a32      	ldr	r2, [pc, #200]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81042f6:	430b      	orrs	r3, r1
 81042f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 81042fa:	e003      	b.n	8104304 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104300:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104304:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104308:	e9d3 2300 	ldrd	r2, r3, [r3]
 810430c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8104310:	66bb      	str	r3, [r7, #104]	; 0x68
 8104312:	2300      	movs	r3, #0
 8104314:	66fb      	str	r3, [r7, #108]	; 0x6c
 8104316:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810431a:	460b      	mov	r3, r1
 810431c:	4313      	orrs	r3, r2
 810431e:	d00c      	beq.n	810433a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104320:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104324:	3328      	adds	r3, #40	; 0x28
 8104326:	2102      	movs	r1, #2
 8104328:	4618      	mov	r0, r3
 810432a:	f001 fbf7 	bl	8105b1c <RCCEx_PLL3_Config>
 810432e:	4603      	mov	r3, r0
 8104330:	2b00      	cmp	r3, #0
 8104332:	d002      	beq.n	810433a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8104334:	2301      	movs	r3, #1
 8104336:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810433a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104342:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8104346:	663b      	str	r3, [r7, #96]	; 0x60
 8104348:	2300      	movs	r3, #0
 810434a:	667b      	str	r3, [r7, #100]	; 0x64
 810434c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8104350:	460b      	mov	r3, r1
 8104352:	4313      	orrs	r3, r2
 8104354:	d03a      	beq.n	81043cc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8104356:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810435e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104362:	d018      	beq.n	8104396 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8104364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104368:	d811      	bhi.n	810438e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810436a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810436e:	d014      	beq.n	810439a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8104370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104374:	d80b      	bhi.n	810438e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8104376:	2b00      	cmp	r3, #0
 8104378:	d011      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810437a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810437e:	d106      	bne.n	810438e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104380:	4b0f      	ldr	r3, [pc, #60]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104384:	4a0e      	ldr	r2, [pc, #56]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810438a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810438c:	e008      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810438e:	2301      	movs	r3, #1
 8104390:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104394:	e004      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8104396:	bf00      	nop
 8104398:	e002      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810439a:	bf00      	nop
 810439c:	e000      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810439e:	bf00      	nop
    }

    if (ret == HAL_OK)
 81043a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81043a4:	2b00      	cmp	r3, #0
 81043a6:	d10d      	bne.n	81043c4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81043a8:	4b05      	ldr	r3, [pc, #20]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81043aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81043b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043b8:	4a01      	ldr	r2, [pc, #4]	; (81043c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81043ba:	430b      	orrs	r3, r1
 81043bc:	6553      	str	r3, [r2, #84]	; 0x54
 81043be:	e005      	b.n	81043cc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81043c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81043c8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81043cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 81043d8:	65bb      	str	r3, [r7, #88]	; 0x58
 81043da:	2300      	movs	r3, #0
 81043dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 81043de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 81043e2:	460b      	mov	r3, r1
 81043e4:	4313      	orrs	r3, r2
 81043e6:	d009      	beq.n	81043fc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81043e8:	4baa      	ldr	r3, [pc, #680]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81043ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81043f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81043f6:	4aa7      	ldr	r2, [pc, #668]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81043f8:	430b      	orrs	r3, r1
 81043fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81043fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104404:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8104408:	653b      	str	r3, [r7, #80]	; 0x50
 810440a:	2300      	movs	r3, #0
 810440c:	657b      	str	r3, [r7, #84]	; 0x54
 810440e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8104412:	460b      	mov	r3, r1
 8104414:	4313      	orrs	r3, r2
 8104416:	d00a      	beq.n	810442e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104418:	4b9e      	ldr	r3, [pc, #632]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810441a:	691b      	ldr	r3, [r3, #16]
 810441c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8104420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8104428:	4a9a      	ldr	r2, [pc, #616]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810442a:	430b      	orrs	r3, r1
 810442c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810442e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104436:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810443a:	64bb      	str	r3, [r7, #72]	; 0x48
 810443c:	2300      	movs	r3, #0
 810443e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8104440:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8104444:	460b      	mov	r3, r1
 8104446:	4313      	orrs	r3, r2
 8104448:	d009      	beq.n	810445e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810444a:	4b92      	ldr	r3, [pc, #584]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810444e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8104452:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104458:	4a8e      	ldr	r2, [pc, #568]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810445a:	430b      	orrs	r3, r1
 810445c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810445e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104466:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 810446a:	643b      	str	r3, [r7, #64]	; 0x40
 810446c:	2300      	movs	r3, #0
 810446e:	647b      	str	r3, [r7, #68]	; 0x44
 8104470:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8104474:	460b      	mov	r3, r1
 8104476:	4313      	orrs	r3, r2
 8104478:	d00e      	beq.n	8104498 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810447a:	4b86      	ldr	r3, [pc, #536]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810447c:	691b      	ldr	r3, [r3, #16]
 810447e:	4a85      	ldr	r2, [pc, #532]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104480:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104484:	6113      	str	r3, [r2, #16]
 8104486:	4b83      	ldr	r3, [pc, #524]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104488:	6919      	ldr	r1, [r3, #16]
 810448a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810448e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8104492:	4a80      	ldr	r2, [pc, #512]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104494:	430b      	orrs	r3, r1
 8104496:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104498:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 81044a4:	63bb      	str	r3, [r7, #56]	; 0x38
 81044a6:	2300      	movs	r3, #0
 81044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81044aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 81044ae:	460b      	mov	r3, r1
 81044b0:	4313      	orrs	r3, r2
 81044b2:	d009      	beq.n	81044c8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81044b4:	4b77      	ldr	r3, [pc, #476]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81044b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81044bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044c2:	4a74      	ldr	r2, [pc, #464]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81044c4:	430b      	orrs	r3, r1
 81044c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81044c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 81044d4:	633b      	str	r3, [r7, #48]	; 0x30
 81044d6:	2300      	movs	r3, #0
 81044d8:	637b      	str	r3, [r7, #52]	; 0x34
 81044da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 81044de:	460b      	mov	r3, r1
 81044e0:	4313      	orrs	r3, r2
 81044e2:	d00a      	beq.n	81044fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81044e4:	4b6b      	ldr	r3, [pc, #428]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81044e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 81044ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81044f4:	4a67      	ldr	r2, [pc, #412]	; (8104694 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81044f6:	430b      	orrs	r3, r1
 81044f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81044fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104502:	2100      	movs	r1, #0
 8104504:	62b9      	str	r1, [r7, #40]	; 0x28
 8104506:	f003 0301 	and.w	r3, r3, #1
 810450a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810450c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8104510:	460b      	mov	r3, r1
 8104512:	4313      	orrs	r3, r2
 8104514:	d011      	beq.n	810453a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104516:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810451a:	3308      	adds	r3, #8
 810451c:	2100      	movs	r1, #0
 810451e:	4618      	mov	r0, r3
 8104520:	f001 fa4a 	bl	81059b8 <RCCEx_PLL2_Config>
 8104524:	4603      	mov	r3, r0
 8104526:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810452a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810452e:	2b00      	cmp	r3, #0
 8104530:	d003      	beq.n	810453a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104532:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104536:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810453a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104542:	2100      	movs	r1, #0
 8104544:	6239      	str	r1, [r7, #32]
 8104546:	f003 0302 	and.w	r3, r3, #2
 810454a:	627b      	str	r3, [r7, #36]	; 0x24
 810454c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104550:	460b      	mov	r3, r1
 8104552:	4313      	orrs	r3, r2
 8104554:	d011      	beq.n	810457a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104556:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810455a:	3308      	adds	r3, #8
 810455c:	2101      	movs	r1, #1
 810455e:	4618      	mov	r0, r3
 8104560:	f001 fa2a 	bl	81059b8 <RCCEx_PLL2_Config>
 8104564:	4603      	mov	r3, r0
 8104566:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810456a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810456e:	2b00      	cmp	r3, #0
 8104570:	d003      	beq.n	810457a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104572:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104576:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810457a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104582:	2100      	movs	r1, #0
 8104584:	61b9      	str	r1, [r7, #24]
 8104586:	f003 0304 	and.w	r3, r3, #4
 810458a:	61fb      	str	r3, [r7, #28]
 810458c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104590:	460b      	mov	r3, r1
 8104592:	4313      	orrs	r3, r2
 8104594:	d011      	beq.n	81045ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104596:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810459a:	3308      	adds	r3, #8
 810459c:	2102      	movs	r1, #2
 810459e:	4618      	mov	r0, r3
 81045a0:	f001 fa0a 	bl	81059b8 <RCCEx_PLL2_Config>
 81045a4:	4603      	mov	r3, r0
 81045a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 81045aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045ae:	2b00      	cmp	r3, #0
 81045b0:	d003      	beq.n	81045ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81045ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045c2:	2100      	movs	r1, #0
 81045c4:	6139      	str	r1, [r7, #16]
 81045c6:	f003 0308 	and.w	r3, r3, #8
 81045ca:	617b      	str	r3, [r7, #20]
 81045cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81045d0:	460b      	mov	r3, r1
 81045d2:	4313      	orrs	r3, r2
 81045d4:	d011      	beq.n	81045fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81045d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045da:	3328      	adds	r3, #40	; 0x28
 81045dc:	2100      	movs	r1, #0
 81045de:	4618      	mov	r0, r3
 81045e0:	f001 fa9c 	bl	8105b1c <RCCEx_PLL3_Config>
 81045e4:	4603      	mov	r3, r0
 81045e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 81045ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045ee:	2b00      	cmp	r3, #0
 81045f0:	d003      	beq.n	81045fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81045fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104602:	2100      	movs	r1, #0
 8104604:	60b9      	str	r1, [r7, #8]
 8104606:	f003 0310 	and.w	r3, r3, #16
 810460a:	60fb      	str	r3, [r7, #12]
 810460c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104610:	460b      	mov	r3, r1
 8104612:	4313      	orrs	r3, r2
 8104614:	d011      	beq.n	810463a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104616:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810461a:	3328      	adds	r3, #40	; 0x28
 810461c:	2101      	movs	r1, #1
 810461e:	4618      	mov	r0, r3
 8104620:	f001 fa7c 	bl	8105b1c <RCCEx_PLL3_Config>
 8104624:	4603      	mov	r3, r0
 8104626:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810462a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810462e:	2b00      	cmp	r3, #0
 8104630:	d003      	beq.n	810463a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104632:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104636:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810463a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104642:	2100      	movs	r1, #0
 8104644:	6039      	str	r1, [r7, #0]
 8104646:	f003 0320 	and.w	r3, r3, #32
 810464a:	607b      	str	r3, [r7, #4]
 810464c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104650:	460b      	mov	r3, r1
 8104652:	4313      	orrs	r3, r2
 8104654:	d011      	beq.n	810467a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104656:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810465a:	3328      	adds	r3, #40	; 0x28
 810465c:	2102      	movs	r1, #2
 810465e:	4618      	mov	r0, r3
 8104660:	f001 fa5c 	bl	8105b1c <RCCEx_PLL3_Config>
 8104664:	4603      	mov	r3, r0
 8104666:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810466a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810466e:	2b00      	cmp	r3, #0
 8104670:	d003      	beq.n	810467a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104672:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104676:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 810467a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 810467e:	2b00      	cmp	r3, #0
 8104680:	d101      	bne.n	8104686 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8104682:	2300      	movs	r3, #0
 8104684:	e000      	b.n	8104688 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8104686:	2301      	movs	r3, #1
}
 8104688:	4618      	mov	r0, r3
 810468a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 810468e:	46bd      	mov	sp, r7
 8104690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104694:	58024400 	.word	0x58024400

08104698 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104698:	b580      	push	{r7, lr}
 810469a:	b090      	sub	sp, #64	; 0x40
 810469c:	af00      	add	r7, sp, #0
 810469e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 81046a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81046a6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 81046aa:	430b      	orrs	r3, r1
 81046ac:	f040 8094 	bne.w	81047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 81046b0:	4b9e      	ldr	r3, [pc, #632]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81046b4:	f003 0307 	and.w	r3, r3, #7
 81046b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81046bc:	2b04      	cmp	r3, #4
 81046be:	f200 8087 	bhi.w	81047d0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81046c2:	a201      	add	r2, pc, #4	; (adr r2, 81046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81046c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81046c8:	081046dd 	.word	0x081046dd
 81046cc:	08104705 	.word	0x08104705
 81046d0:	0810472d 	.word	0x0810472d
 81046d4:	081047c9 	.word	0x081047c9
 81046d8:	08104755 	.word	0x08104755
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81046dc:	4b93      	ldr	r3, [pc, #588]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81046e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81046e8:	d108      	bne.n	81046fc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81046ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81046ee:	4618      	mov	r0, r3
 81046f0:	f001 f810 	bl	8105714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81046f8:	f000 bd45 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81046fc:	2300      	movs	r3, #0
 81046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104700:	f000 bd41 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104704:	4b89      	ldr	r3, [pc, #548]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104706:	681b      	ldr	r3, [r3, #0]
 8104708:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810470c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104710:	d108      	bne.n	8104724 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104712:	f107 0318 	add.w	r3, r7, #24
 8104716:	4618      	mov	r0, r3
 8104718:	f000 fd54 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810471c:	69bb      	ldr	r3, [r7, #24]
 810471e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104720:	f000 bd31 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104724:	2300      	movs	r3, #0
 8104726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104728:	f000 bd2d 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810472c:	4b7f      	ldr	r3, [pc, #508]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810472e:	681b      	ldr	r3, [r3, #0]
 8104730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104738:	d108      	bne.n	810474c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810473a:	f107 030c 	add.w	r3, r7, #12
 810473e:	4618      	mov	r0, r3
 8104740:	f000 fe94 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104744:	68fb      	ldr	r3, [r7, #12]
 8104746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104748:	f000 bd1d 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810474c:	2300      	movs	r3, #0
 810474e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104750:	f000 bd19 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104754:	4b75      	ldr	r3, [pc, #468]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810475c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810475e:	4b73      	ldr	r3, [pc, #460]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	f003 0304 	and.w	r3, r3, #4
 8104766:	2b04      	cmp	r3, #4
 8104768:	d10c      	bne.n	8104784 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810476c:	2b00      	cmp	r3, #0
 810476e:	d109      	bne.n	8104784 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104770:	4b6e      	ldr	r3, [pc, #440]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104772:	681b      	ldr	r3, [r3, #0]
 8104774:	08db      	lsrs	r3, r3, #3
 8104776:	f003 0303 	and.w	r3, r3, #3
 810477a:	4a6d      	ldr	r2, [pc, #436]	; (8104930 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810477c:	fa22 f303 	lsr.w	r3, r2, r3
 8104780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104782:	e01f      	b.n	81047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104784:	4b69      	ldr	r3, [pc, #420]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104786:	681b      	ldr	r3, [r3, #0]
 8104788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810478c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104790:	d106      	bne.n	81047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104798:	d102      	bne.n	81047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810479a:	4b66      	ldr	r3, [pc, #408]	; (8104934 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810479c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810479e:	e011      	b.n	81047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81047a0:	4b62      	ldr	r3, [pc, #392]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81047a2:	681b      	ldr	r3, [r3, #0]
 81047a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81047a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81047ac:	d106      	bne.n	81047bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 81047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81047b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81047b4:	d102      	bne.n	81047bc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81047b6:	4b60      	ldr	r3, [pc, #384]	; (8104938 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81047b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81047ba:	e003      	b.n	81047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81047bc:	2300      	movs	r3, #0
 81047be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 81047c0:	f000 bce1 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81047c4:	f000 bcdf 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81047c8:	4b5c      	ldr	r3, [pc, #368]	; (810493c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81047cc:	f000 bcdb 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81047d0:	2300      	movs	r3, #0
 81047d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81047d4:	f000 bcd7 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81047d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81047dc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 81047e0:	430b      	orrs	r3, r1
 81047e2:	f040 80ad 	bne.w	8104940 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81047e6:	4b51      	ldr	r3, [pc, #324]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81047e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047ea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 81047ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 81047f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047f6:	d056      	beq.n	81048a6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81047fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047fe:	f200 8090 	bhi.w	8104922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104804:	2bc0      	cmp	r3, #192	; 0xc0
 8104806:	f000 8088 	beq.w	810491a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 810480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810480c:	2bc0      	cmp	r3, #192	; 0xc0
 810480e:	f200 8088 	bhi.w	8104922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104814:	2b80      	cmp	r3, #128	; 0x80
 8104816:	d032      	beq.n	810487e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8104818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810481a:	2b80      	cmp	r3, #128	; 0x80
 810481c:	f200 8081 	bhi.w	8104922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104822:	2b00      	cmp	r3, #0
 8104824:	d003      	beq.n	810482e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8104826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104828:	2b40      	cmp	r3, #64	; 0x40
 810482a:	d014      	beq.n	8104856 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810482c:	e079      	b.n	8104922 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810482e:	4b3f      	ldr	r3, [pc, #252]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104836:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810483a:	d108      	bne.n	810484e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810483c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104840:	4618      	mov	r0, r3
 8104842:	f000 ff67 	bl	8105714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104848:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810484a:	f000 bc9c 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810484e:	2300      	movs	r3, #0
 8104850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104852:	f000 bc98 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104856:	4b35      	ldr	r3, [pc, #212]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810485e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104862:	d108      	bne.n	8104876 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104864:	f107 0318 	add.w	r3, r7, #24
 8104868:	4618      	mov	r0, r3
 810486a:	f000 fcab 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810486e:	69bb      	ldr	r3, [r7, #24]
 8104870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104872:	f000 bc88 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104876:	2300      	movs	r3, #0
 8104878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810487a:	f000 bc84 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810487e:	4b2b      	ldr	r3, [pc, #172]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104880:	681b      	ldr	r3, [r3, #0]
 8104882:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810488a:	d108      	bne.n	810489e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810488c:	f107 030c 	add.w	r3, r7, #12
 8104890:	4618      	mov	r0, r3
 8104892:	f000 fdeb 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104896:	68fb      	ldr	r3, [r7, #12]
 8104898:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810489a:	f000 bc74 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810489e:	2300      	movs	r3, #0
 81048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81048a2:	f000 bc70 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81048a6:	4b21      	ldr	r3, [pc, #132]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81048aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81048ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81048b0:	4b1e      	ldr	r3, [pc, #120]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	f003 0304 	and.w	r3, r3, #4
 81048b8:	2b04      	cmp	r3, #4
 81048ba:	d10c      	bne.n	81048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 81048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81048be:	2b00      	cmp	r3, #0
 81048c0:	d109      	bne.n	81048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81048c2:	4b1a      	ldr	r3, [pc, #104]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81048c4:	681b      	ldr	r3, [r3, #0]
 81048c6:	08db      	lsrs	r3, r3, #3
 81048c8:	f003 0303 	and.w	r3, r3, #3
 81048cc:	4a18      	ldr	r2, [pc, #96]	; (8104930 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81048ce:	fa22 f303 	lsr.w	r3, r2, r3
 81048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048d4:	e01f      	b.n	8104916 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81048d6:	4b15      	ldr	r3, [pc, #84]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81048d8:	681b      	ldr	r3, [r3, #0]
 81048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81048de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81048e2:	d106      	bne.n	81048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81048e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81048ea:	d102      	bne.n	81048f2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81048ec:	4b11      	ldr	r3, [pc, #68]	; (8104934 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81048ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048f0:	e011      	b.n	8104916 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81048f2:	4b0e      	ldr	r3, [pc, #56]	; (810492c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81048fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81048fe:	d106      	bne.n	810490e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104906:	d102      	bne.n	810490e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104908:	4b0b      	ldr	r3, [pc, #44]	; (8104938 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 810490a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810490c:	e003      	b.n	8104916 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810490e:	2300      	movs	r3, #0
 8104910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104912:	f000 bc38 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104916:	f000 bc36 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810491a:	4b08      	ldr	r3, [pc, #32]	; (810493c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 810491c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810491e:	f000 bc32 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104922:	2300      	movs	r3, #0
 8104924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104926:	f000 bc2e 	b.w	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810492a:	bf00      	nop
 810492c:	58024400 	.word	0x58024400
 8104930:	03d09000 	.word	0x03d09000
 8104934:	003d0900 	.word	0x003d0900
 8104938:	017d7840 	.word	0x017d7840
 810493c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104944:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8104948:	430b      	orrs	r3, r1
 810494a:	f040 809c 	bne.w	8104a86 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810494e:	4b9e      	ldr	r3, [pc, #632]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104952:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8104956:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810495a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810495e:	d054      	beq.n	8104a0a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104966:	f200 808b 	bhi.w	8104a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810496c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104970:	f000 8083 	beq.w	8104a7a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104976:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810497a:	f200 8081 	bhi.w	8104a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104984:	d02f      	beq.n	81049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8104986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810498c:	d878      	bhi.n	8104a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104990:	2b00      	cmp	r3, #0
 8104992:	d004      	beq.n	810499e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810499a:	d012      	beq.n	81049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810499c:	e070      	b.n	8104a80 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810499e:	4b8a      	ldr	r3, [pc, #552]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049a0:	681b      	ldr	r3, [r3, #0]
 81049a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81049a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81049aa:	d107      	bne.n	81049bc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81049ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81049b0:	4618      	mov	r0, r3
 81049b2:	f000 feaf 	bl	8105714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81049b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049ba:	e3e4      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049bc:	2300      	movs	r3, #0
 81049be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049c0:	e3e1      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81049c2:	4b81      	ldr	r3, [pc, #516]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049c4:	681b      	ldr	r3, [r3, #0]
 81049c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81049ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81049ce:	d107      	bne.n	81049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81049d0:	f107 0318 	add.w	r3, r7, #24
 81049d4:	4618      	mov	r0, r3
 81049d6:	f000 fbf5 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81049da:	69bb      	ldr	r3, [r7, #24]
 81049dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81049de:	e3d2      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81049e0:	2300      	movs	r3, #0
 81049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81049e4:	e3cf      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81049e6:	4b78      	ldr	r3, [pc, #480]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81049ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81049f2:	d107      	bne.n	8104a04 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81049f4:	f107 030c 	add.w	r3, r7, #12
 81049f8:	4618      	mov	r0, r3
 81049fa:	f000 fd37 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81049fe:	68fb      	ldr	r3, [r7, #12]
 8104a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104a02:	e3c0      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104a04:	2300      	movs	r3, #0
 8104a06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a08:	e3bd      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104a0a:	4b6f      	ldr	r3, [pc, #444]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104a0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104a12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104a14:	4b6c      	ldr	r3, [pc, #432]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a16:	681b      	ldr	r3, [r3, #0]
 8104a18:	f003 0304 	and.w	r3, r3, #4
 8104a1c:	2b04      	cmp	r3, #4
 8104a1e:	d10c      	bne.n	8104a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8104a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104a22:	2b00      	cmp	r3, #0
 8104a24:	d109      	bne.n	8104a3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a26:	4b68      	ldr	r3, [pc, #416]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	08db      	lsrs	r3, r3, #3
 8104a2c:	f003 0303 	and.w	r3, r3, #3
 8104a30:	4a66      	ldr	r2, [pc, #408]	; (8104bcc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104a32:	fa22 f303 	lsr.w	r3, r2, r3
 8104a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104a38:	e01e      	b.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104a3a:	4b63      	ldr	r3, [pc, #396]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a46:	d106      	bne.n	8104a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8104a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104a4e:	d102      	bne.n	8104a56 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104a50:	4b5f      	ldr	r3, [pc, #380]	; (8104bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104a54:	e010      	b.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104a56:	4b5c      	ldr	r3, [pc, #368]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a58:	681b      	ldr	r3, [r3, #0]
 8104a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104a62:	d106      	bne.n	8104a72 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104a6a:	d102      	bne.n	8104a72 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104a6c:	4b59      	ldr	r3, [pc, #356]	; (8104bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104a70:	e002      	b.n	8104a78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104a72:	2300      	movs	r3, #0
 8104a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104a76:	e386      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104a78:	e385      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104a7a:	4b57      	ldr	r3, [pc, #348]	; (8104bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a7e:	e382      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104a80:	2300      	movs	r3, #0
 8104a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104a84:	e37f      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104a8a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8104a8e:	430b      	orrs	r3, r1
 8104a90:	f040 80a7 	bne.w	8104be2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104a94:	4b4c      	ldr	r3, [pc, #304]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104a98:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104a9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104aa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104aa4:	d055      	beq.n	8104b52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104aac:	f200 8096 	bhi.w	8104bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ab2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ab6:	f000 8084 	beq.w	8104bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8104aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104abc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ac0:	f200 808c 	bhi.w	8104bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104aca:	d030      	beq.n	8104b2e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104ad2:	f200 8083 	bhi.w	8104bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ad8:	2b00      	cmp	r3, #0
 8104ada:	d004      	beq.n	8104ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ade:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104ae2:	d012      	beq.n	8104b0a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104ae4:	e07a      	b.n	8104bdc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104ae6:	4b38      	ldr	r3, [pc, #224]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104aee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104af2:	d107      	bne.n	8104b04 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104af8:	4618      	mov	r0, r3
 8104afa:	f000 fe0b 	bl	8105714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b02:	e340      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b04:	2300      	movs	r3, #0
 8104b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b08:	e33d      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104b0a:	4b2f      	ldr	r3, [pc, #188]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104b16:	d107      	bne.n	8104b28 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104b18:	f107 0318 	add.w	r3, r7, #24
 8104b1c:	4618      	mov	r0, r3
 8104b1e:	f000 fb51 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104b22:	69bb      	ldr	r3, [r7, #24]
 8104b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b26:	e32e      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b28:	2300      	movs	r3, #0
 8104b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b2c:	e32b      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104b2e:	4b26      	ldr	r3, [pc, #152]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b30:	681b      	ldr	r3, [r3, #0]
 8104b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104b3a:	d107      	bne.n	8104b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104b3c:	f107 030c 	add.w	r3, r7, #12
 8104b40:	4618      	mov	r0, r3
 8104b42:	f000 fc93 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104b46:	68fb      	ldr	r3, [r7, #12]
 8104b48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b4a:	e31c      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b4c:	2300      	movs	r3, #0
 8104b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b50:	e319      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104b52:	4b1d      	ldr	r3, [pc, #116]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104b5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104b5c:	4b1a      	ldr	r3, [pc, #104]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b5e:	681b      	ldr	r3, [r3, #0]
 8104b60:	f003 0304 	and.w	r3, r3, #4
 8104b64:	2b04      	cmp	r3, #4
 8104b66:	d10c      	bne.n	8104b82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8104b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b6a:	2b00      	cmp	r3, #0
 8104b6c:	d109      	bne.n	8104b82 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104b6e:	4b16      	ldr	r3, [pc, #88]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b70:	681b      	ldr	r3, [r3, #0]
 8104b72:	08db      	lsrs	r3, r3, #3
 8104b74:	f003 0303 	and.w	r3, r3, #3
 8104b78:	4a14      	ldr	r2, [pc, #80]	; (8104bcc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8104b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b80:	e01e      	b.n	8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104b82:	4b11      	ldr	r3, [pc, #68]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104b84:	681b      	ldr	r3, [r3, #0]
 8104b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b8e:	d106      	bne.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104b96:	d102      	bne.n	8104b9e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104b98:	4b0d      	ldr	r3, [pc, #52]	; (8104bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104b9c:	e010      	b.n	8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104b9e:	4b0a      	ldr	r3, [pc, #40]	; (8104bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104ba0:	681b      	ldr	r3, [r3, #0]
 8104ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104baa:	d106      	bne.n	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104bb2:	d102      	bne.n	8104bba <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104bb4:	4b07      	ldr	r3, [pc, #28]	; (8104bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104bb8:	e002      	b.n	8104bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104bba:	2300      	movs	r3, #0
 8104bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104bbe:	e2e2      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104bc0:	e2e1      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104bc2:	4b05      	ldr	r3, [pc, #20]	; (8104bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104bc6:	e2de      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104bc8:	58024400 	.word	0x58024400
 8104bcc:	03d09000 	.word	0x03d09000
 8104bd0:	003d0900 	.word	0x003d0900
 8104bd4:	017d7840 	.word	0x017d7840
 8104bd8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8104bdc:	2300      	movs	r3, #0
 8104bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104be0:	e2d1      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8104be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104be6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8104bea:	430b      	orrs	r3, r1
 8104bec:	f040 809c 	bne.w	8104d28 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8104bf0:	4b93      	ldr	r3, [pc, #588]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104bf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104bf4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8104bf8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104c00:	d054      	beq.n	8104cac <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8104c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104c08:	f200 808b 	bhi.w	8104d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104c12:	f000 8083 	beq.w	8104d1c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8104c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104c1c:	f200 8081 	bhi.w	8104d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c26:	d02f      	beq.n	8104c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8104c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c2e:	d878      	bhi.n	8104d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8104c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c32:	2b00      	cmp	r3, #0
 8104c34:	d004      	beq.n	8104c40 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8104c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104c3c:	d012      	beq.n	8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8104c3e:	e070      	b.n	8104d22 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104c40:	4b7f      	ldr	r3, [pc, #508]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104c48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104c4c:	d107      	bne.n	8104c5e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104c52:	4618      	mov	r0, r3
 8104c54:	f000 fd5e 	bl	8105714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c5c:	e293      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c5e:	2300      	movs	r3, #0
 8104c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c62:	e290      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104c64:	4b76      	ldr	r3, [pc, #472]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c66:	681b      	ldr	r3, [r3, #0]
 8104c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104c6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104c70:	d107      	bne.n	8104c82 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104c72:	f107 0318 	add.w	r3, r7, #24
 8104c76:	4618      	mov	r0, r3
 8104c78:	f000 faa4 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104c7c:	69bb      	ldr	r3, [r7, #24]
 8104c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c80:	e281      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c82:	2300      	movs	r3, #0
 8104c84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c86:	e27e      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104c88:	4b6d      	ldr	r3, [pc, #436]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104c8a:	681b      	ldr	r3, [r3, #0]
 8104c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104c94:	d107      	bne.n	8104ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104c96:	f107 030c 	add.w	r3, r7, #12
 8104c9a:	4618      	mov	r0, r3
 8104c9c:	f000 fbe6 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104ca0:	68fb      	ldr	r3, [r7, #12]
 8104ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ca4:	e26f      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ca6:	2300      	movs	r3, #0
 8104ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104caa:	e26c      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104cac:	4b64      	ldr	r3, [pc, #400]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104cb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104cb6:	4b62      	ldr	r3, [pc, #392]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104cb8:	681b      	ldr	r3, [r3, #0]
 8104cba:	f003 0304 	and.w	r3, r3, #4
 8104cbe:	2b04      	cmp	r3, #4
 8104cc0:	d10c      	bne.n	8104cdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8104cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104cc4:	2b00      	cmp	r3, #0
 8104cc6:	d109      	bne.n	8104cdc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104cc8:	4b5d      	ldr	r3, [pc, #372]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104cca:	681b      	ldr	r3, [r3, #0]
 8104ccc:	08db      	lsrs	r3, r3, #3
 8104cce:	f003 0303 	and.w	r3, r3, #3
 8104cd2:	4a5c      	ldr	r2, [pc, #368]	; (8104e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8104cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104cda:	e01e      	b.n	8104d1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104cdc:	4b58      	ldr	r3, [pc, #352]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104cde:	681b      	ldr	r3, [r3, #0]
 8104ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104ce8:	d106      	bne.n	8104cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8104cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104cf0:	d102      	bne.n	8104cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104cf2:	4b55      	ldr	r3, [pc, #340]	; (8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104cf6:	e010      	b.n	8104d1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104cf8:	4b51      	ldr	r3, [pc, #324]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104cfa:	681b      	ldr	r3, [r3, #0]
 8104cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d04:	d106      	bne.n	8104d14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8104d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104d0c:	d102      	bne.n	8104d14 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104d0e:	4b4f      	ldr	r3, [pc, #316]	; (8104e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d12:	e002      	b.n	8104d1a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104d14:	2300      	movs	r3, #0
 8104d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104d18:	e235      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104d1a:	e234      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104d1c:	4b4c      	ldr	r3, [pc, #304]	; (8104e50 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8104d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d20:	e231      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104d22:	2300      	movs	r3, #0
 8104d24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d26:	e22e      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8104d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104d2c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8104d30:	430b      	orrs	r3, r1
 8104d32:	f040 808f 	bne.w	8104e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8104d36:	4b42      	ldr	r3, [pc, #264]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d3a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8104d3e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8104d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d46:	d06b      	beq.n	8104e20 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8104d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8104d4e:	d874      	bhi.n	8104e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d56:	d056      	beq.n	8104e06 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8104d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8104d5e:	d86c      	bhi.n	8104e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d66:	d03b      	beq.n	8104de0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8104d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104d6e:	d864      	bhi.n	8104e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d76:	d021      	beq.n	8104dbc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8104d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d7e:	d85c      	bhi.n	8104e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8104d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d82:	2b00      	cmp	r3, #0
 8104d84:	d004      	beq.n	8104d90 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8104d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104d8c:	d004      	beq.n	8104d98 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8104d8e:	e054      	b.n	8104e3a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8104d90:	f7fe fa22 	bl	81031d8 <HAL_RCC_GetPCLK1Freq>
 8104d94:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104d96:	e1f6      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104d98:	4b29      	ldr	r3, [pc, #164]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104d9a:	681b      	ldr	r3, [r3, #0]
 8104d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104da4:	d107      	bne.n	8104db6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104da6:	f107 0318 	add.w	r3, r7, #24
 8104daa:	4618      	mov	r0, r3
 8104dac:	f000 fa0a 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8104db0:	69fb      	ldr	r3, [r7, #28]
 8104db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104db4:	e1e7      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104db6:	2300      	movs	r3, #0
 8104db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104dba:	e1e4      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104dbc:	4b20      	ldr	r3, [pc, #128]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104dbe:	681b      	ldr	r3, [r3, #0]
 8104dc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104dc8:	d107      	bne.n	8104dda <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104dca:	f107 030c 	add.w	r3, r7, #12
 8104dce:	4618      	mov	r0, r3
 8104dd0:	f000 fb4c 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8104dd4:	693b      	ldr	r3, [r7, #16]
 8104dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dd8:	e1d5      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104dda:	2300      	movs	r3, #0
 8104ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104dde:	e1d2      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8104de0:	4b17      	ldr	r3, [pc, #92]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	f003 0304 	and.w	r3, r3, #4
 8104de8:	2b04      	cmp	r3, #4
 8104dea:	d109      	bne.n	8104e00 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104dec:	4b14      	ldr	r3, [pc, #80]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104dee:	681b      	ldr	r3, [r3, #0]
 8104df0:	08db      	lsrs	r3, r3, #3
 8104df2:	f003 0303 	and.w	r3, r3, #3
 8104df6:	4a13      	ldr	r2, [pc, #76]	; (8104e44 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8104df8:	fa22 f303 	lsr.w	r3, r2, r3
 8104dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dfe:	e1c2      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e00:	2300      	movs	r3, #0
 8104e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e04:	e1bf      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8104e06:	4b0e      	ldr	r3, [pc, #56]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104e08:	681b      	ldr	r3, [r3, #0]
 8104e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e12:	d102      	bne.n	8104e1a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8104e14:	4b0c      	ldr	r3, [pc, #48]	; (8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8104e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e18:	e1b5      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e1a:	2300      	movs	r3, #0
 8104e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e1e:	e1b2      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8104e20:	4b07      	ldr	r3, [pc, #28]	; (8104e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8104e22:	681b      	ldr	r3, [r3, #0]
 8104e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104e2c:	d102      	bne.n	8104e34 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8104e2e:	4b07      	ldr	r3, [pc, #28]	; (8104e4c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8104e30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e32:	e1a8      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e34:	2300      	movs	r3, #0
 8104e36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e38:	e1a5      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104e3a:	2300      	movs	r3, #0
 8104e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e3e:	e1a2      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e40:	58024400 	.word	0x58024400
 8104e44:	03d09000 	.word	0x03d09000
 8104e48:	003d0900 	.word	0x003d0900
 8104e4c:	017d7840 	.word	0x017d7840
 8104e50:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8104e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104e58:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8104e5c:	430b      	orrs	r3, r1
 8104e5e:	d173      	bne.n	8104f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8104e60:	4b9c      	ldr	r3, [pc, #624]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8104e68:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104e70:	d02f      	beq.n	8104ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8104e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104e78:	d863      	bhi.n	8104f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8104e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e7c:	2b00      	cmp	r3, #0
 8104e7e:	d004      	beq.n	8104e8a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8104e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104e86:	d012      	beq.n	8104eae <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8104e88:	e05b      	b.n	8104f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104e8a:	4b92      	ldr	r3, [pc, #584]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104e8c:	681b      	ldr	r3, [r3, #0]
 8104e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104e96:	d107      	bne.n	8104ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e98:	f107 0318 	add.w	r3, r7, #24
 8104e9c:	4618      	mov	r0, r3
 8104e9e:	f000 f991 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104ea2:	69bb      	ldr	r3, [r7, #24]
 8104ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104ea6:	e16e      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ea8:	2300      	movs	r3, #0
 8104eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104eac:	e16b      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104eae:	4b89      	ldr	r3, [pc, #548]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104eba:	d107      	bne.n	8104ecc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104ebc:	f107 030c 	add.w	r3, r7, #12
 8104ec0:	4618      	mov	r0, r3
 8104ec2:	f000 fad3 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8104ec6:	697b      	ldr	r3, [r7, #20]
 8104ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104eca:	e15c      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104ecc:	2300      	movs	r3, #0
 8104ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104ed0:	e159      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104ed2:	4b80      	ldr	r3, [pc, #512]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104ed6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104eda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104edc:	4b7d      	ldr	r3, [pc, #500]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	f003 0304 	and.w	r3, r3, #4
 8104ee4:	2b04      	cmp	r3, #4
 8104ee6:	d10c      	bne.n	8104f02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8104ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104eea:	2b00      	cmp	r3, #0
 8104eec:	d109      	bne.n	8104f02 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104eee:	4b79      	ldr	r3, [pc, #484]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104ef0:	681b      	ldr	r3, [r3, #0]
 8104ef2:	08db      	lsrs	r3, r3, #3
 8104ef4:	f003 0303 	and.w	r3, r3, #3
 8104ef8:	4a77      	ldr	r2, [pc, #476]	; (81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8104efa:	fa22 f303 	lsr.w	r3, r2, r3
 8104efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f00:	e01e      	b.n	8104f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104f02:	4b74      	ldr	r3, [pc, #464]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f04:	681b      	ldr	r3, [r3, #0]
 8104f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104f0e:	d106      	bne.n	8104f1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8104f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104f16:	d102      	bne.n	8104f1e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104f18:	4b70      	ldr	r3, [pc, #448]	; (81050dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8104f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f1c:	e010      	b.n	8104f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104f1e:	4b6d      	ldr	r3, [pc, #436]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f20:	681b      	ldr	r3, [r3, #0]
 8104f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104f26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104f2a:	d106      	bne.n	8104f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8104f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f32:	d102      	bne.n	8104f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104f34:	4b6a      	ldr	r3, [pc, #424]	; (81050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8104f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104f38:	e002      	b.n	8104f40 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104f3a:	2300      	movs	r3, #0
 8104f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104f3e:	e122      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104f40:	e121      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104f42:	2300      	movs	r3, #0
 8104f44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f46:	e11e      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8104f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f4c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8104f50:	430b      	orrs	r3, r1
 8104f52:	d133      	bne.n	8104fbc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8104f54:	4b5f      	ldr	r3, [pc, #380]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104f5c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f60:	2b00      	cmp	r3, #0
 8104f62:	d004      	beq.n	8104f6e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8104f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104f6a:	d012      	beq.n	8104f92 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8104f6c:	e023      	b.n	8104fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104f6e:	4b59      	ldr	r3, [pc, #356]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f70:	681b      	ldr	r3, [r3, #0]
 8104f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f7a:	d107      	bne.n	8104f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104f80:	4618      	mov	r0, r3
 8104f82:	f000 fbc7 	bl	8105714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f8a:	e0fc      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f8c:	2300      	movs	r3, #0
 8104f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f90:	e0f9      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104f92:	4b50      	ldr	r3, [pc, #320]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104f94:	681b      	ldr	r3, [r3, #0]
 8104f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104f9e:	d107      	bne.n	8104fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104fa0:	f107 0318 	add.w	r3, r7, #24
 8104fa4:	4618      	mov	r0, r3
 8104fa6:	f000 f90d 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8104faa:	6a3b      	ldr	r3, [r7, #32]
 8104fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104fae:	e0ea      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104fb0:	2300      	movs	r3, #0
 8104fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104fb4:	e0e7      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104fb6:	2300      	movs	r3, #0
 8104fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104fba:	e0e4      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8104fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104fc0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8104fc4:	430b      	orrs	r3, r1
 8104fc6:	f040 808d 	bne.w	81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8104fca:	4b42      	ldr	r3, [pc, #264]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8104fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fce:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8104fd2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8104fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104fda:	d06b      	beq.n	81050b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8104fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104fe2:	d874      	bhi.n	81050ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104fea:	d056      	beq.n	810509a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8104fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104ff2:	d86c      	bhi.n	81050ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8104ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ff6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104ffa:	d03b      	beq.n	8105074 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8104ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ffe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105002:	d864      	bhi.n	81050ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810500a:	d021      	beq.n	8105050 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 810500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810500e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105012:	d85c      	bhi.n	81050ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105016:	2b00      	cmp	r3, #0
 8105018:	d004      	beq.n	8105024 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810501c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105020:	d004      	beq.n	810502c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8105022:	e054      	b.n	81050ce <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105024:	f000 f8b8 	bl	8105198 <HAL_RCCEx_GetD3PCLK1Freq>
 8105028:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810502a:	e0ac      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810502c:	4b29      	ldr	r3, [pc, #164]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810502e:	681b      	ldr	r3, [r3, #0]
 8105030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105038:	d107      	bne.n	810504a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810503a:	f107 0318 	add.w	r3, r7, #24
 810503e:	4618      	mov	r0, r3
 8105040:	f000 f8c0 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105044:	69fb      	ldr	r3, [r7, #28]
 8105046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105048:	e09d      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810504a:	2300      	movs	r3, #0
 810504c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810504e:	e09a      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105050:	4b20      	ldr	r3, [pc, #128]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105052:	681b      	ldr	r3, [r3, #0]
 8105054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810505c:	d107      	bne.n	810506e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810505e:	f107 030c 	add.w	r3, r7, #12
 8105062:	4618      	mov	r0, r3
 8105064:	f000 fa02 	bl	810546c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8105068:	693b      	ldr	r3, [r7, #16]
 810506a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810506c:	e08b      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810506e:	2300      	movs	r3, #0
 8105070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105072:	e088      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105074:	4b17      	ldr	r3, [pc, #92]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105076:	681b      	ldr	r3, [r3, #0]
 8105078:	f003 0304 	and.w	r3, r3, #4
 810507c:	2b04      	cmp	r3, #4
 810507e:	d109      	bne.n	8105094 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105080:	4b14      	ldr	r3, [pc, #80]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	08db      	lsrs	r3, r3, #3
 8105086:	f003 0303 	and.w	r3, r3, #3
 810508a:	4a13      	ldr	r2, [pc, #76]	; (81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810508c:	fa22 f303 	lsr.w	r3, r2, r3
 8105090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105092:	e078      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105094:	2300      	movs	r3, #0
 8105096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105098:	e075      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810509a:	4b0e      	ldr	r3, [pc, #56]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810509c:	681b      	ldr	r3, [r3, #0]
 810509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81050a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81050a6:	d102      	bne.n	81050ae <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81050a8:	4b0c      	ldr	r3, [pc, #48]	; (81050dc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81050ac:	e06b      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81050ae:	2300      	movs	r3, #0
 81050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050b2:	e068      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81050b4:	4b07      	ldr	r3, [pc, #28]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81050bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81050c0:	d102      	bne.n	81050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81050c2:	4b07      	ldr	r3, [pc, #28]	; (81050e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81050c6:	e05e      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81050c8:	2300      	movs	r3, #0
 81050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050cc:	e05b      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81050ce:	2300      	movs	r3, #0
 81050d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050d2:	e058      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81050d4:	58024400 	.word	0x58024400
 81050d8:	03d09000 	.word	0x03d09000
 81050dc:	003d0900 	.word	0x003d0900
 81050e0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81050e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81050e8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 81050ec:	430b      	orrs	r3, r1
 81050ee:	d148      	bne.n	8105182 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81050f0:	4b27      	ldr	r3, [pc, #156]	; (8105190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81050f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81050f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81050f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81050fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105100:	d02a      	beq.n	8105158 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8105102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105108:	d838      	bhi.n	810517c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810510c:	2b00      	cmp	r3, #0
 810510e:	d004      	beq.n	810511a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8105110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105116:	d00d      	beq.n	8105134 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8105118:	e030      	b.n	810517c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810511a:	4b1d      	ldr	r3, [pc, #116]	; (8105190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810511c:	681b      	ldr	r3, [r3, #0]
 810511e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105126:	d102      	bne.n	810512e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8105128:	4b1a      	ldr	r3, [pc, #104]	; (8105194 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810512a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810512c:	e02b      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810512e:	2300      	movs	r3, #0
 8105130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105132:	e028      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105134:	4b16      	ldr	r3, [pc, #88]	; (8105190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105136:	681b      	ldr	r3, [r3, #0]
 8105138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810513c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105140:	d107      	bne.n	8105152 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105146:	4618      	mov	r0, r3
 8105148:	f000 fae4 	bl	8105714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810514e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105150:	e019      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105152:	2300      	movs	r3, #0
 8105154:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105156:	e016      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105158:	4b0d      	ldr	r3, [pc, #52]	; (8105190 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810515a:	681b      	ldr	r3, [r3, #0]
 810515c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105160:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105164:	d107      	bne.n	8105176 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105166:	f107 0318 	add.w	r3, r7, #24
 810516a:	4618      	mov	r0, r3
 810516c:	f000 f82a 	bl	81051c4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105170:	69fb      	ldr	r3, [r7, #28]
 8105172:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105174:	e007      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105176:	2300      	movs	r3, #0
 8105178:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810517a:	e004      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810517c:	2300      	movs	r3, #0
 810517e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105180:	e001      	b.n	8105186 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8105182:	2300      	movs	r3, #0
 8105184:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8105186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8105188:	4618      	mov	r0, r3
 810518a:	3740      	adds	r7, #64	; 0x40
 810518c:	46bd      	mov	sp, r7
 810518e:	bd80      	pop	{r7, pc}
 8105190:	58024400 	.word	0x58024400
 8105194:	017d7840 	.word	0x017d7840

08105198 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8105198:	b580      	push	{r7, lr}
 810519a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810519c:	f7fd ffea 	bl	8103174 <HAL_RCC_GetHCLKFreq>
 81051a0:	4602      	mov	r2, r0
 81051a2:	4b06      	ldr	r3, [pc, #24]	; (81051bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81051a4:	6a1b      	ldr	r3, [r3, #32]
 81051a6:	091b      	lsrs	r3, r3, #4
 81051a8:	f003 0307 	and.w	r3, r3, #7
 81051ac:	4904      	ldr	r1, [pc, #16]	; (81051c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81051ae:	5ccb      	ldrb	r3, [r1, r3]
 81051b0:	f003 031f 	and.w	r3, r3, #31
 81051b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81051b8:	4618      	mov	r0, r3
 81051ba:	bd80      	pop	{r7, pc}
 81051bc:	58024400 	.word	0x58024400
 81051c0:	0810771c 	.word	0x0810771c

081051c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81051c4:	b480      	push	{r7}
 81051c6:	b089      	sub	sp, #36	; 0x24
 81051c8:	af00      	add	r7, sp, #0
 81051ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81051cc:	4ba1      	ldr	r3, [pc, #644]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051d0:	f003 0303 	and.w	r3, r3, #3
 81051d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81051d6:	4b9f      	ldr	r3, [pc, #636]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051da:	0b1b      	lsrs	r3, r3, #12
 81051dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81051e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81051e2:	4b9c      	ldr	r3, [pc, #624]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051e6:	091b      	lsrs	r3, r3, #4
 81051e8:	f003 0301 	and.w	r3, r3, #1
 81051ec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81051ee:	4b99      	ldr	r3, [pc, #612]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81051f2:	08db      	lsrs	r3, r3, #3
 81051f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81051f8:	693a      	ldr	r2, [r7, #16]
 81051fa:	fb02 f303 	mul.w	r3, r2, r3
 81051fe:	ee07 3a90 	vmov	s15, r3
 8105202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105206:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810520a:	697b      	ldr	r3, [r7, #20]
 810520c:	2b00      	cmp	r3, #0
 810520e:	f000 8111 	beq.w	8105434 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105212:	69bb      	ldr	r3, [r7, #24]
 8105214:	2b02      	cmp	r3, #2
 8105216:	f000 8083 	beq.w	8105320 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810521a:	69bb      	ldr	r3, [r7, #24]
 810521c:	2b02      	cmp	r3, #2
 810521e:	f200 80a1 	bhi.w	8105364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105222:	69bb      	ldr	r3, [r7, #24]
 8105224:	2b00      	cmp	r3, #0
 8105226:	d003      	beq.n	8105230 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105228:	69bb      	ldr	r3, [r7, #24]
 810522a:	2b01      	cmp	r3, #1
 810522c:	d056      	beq.n	81052dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810522e:	e099      	b.n	8105364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105230:	4b88      	ldr	r3, [pc, #544]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105232:	681b      	ldr	r3, [r3, #0]
 8105234:	f003 0320 	and.w	r3, r3, #32
 8105238:	2b00      	cmp	r3, #0
 810523a:	d02d      	beq.n	8105298 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810523c:	4b85      	ldr	r3, [pc, #532]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	08db      	lsrs	r3, r3, #3
 8105242:	f003 0303 	and.w	r3, r3, #3
 8105246:	4a84      	ldr	r2, [pc, #528]	; (8105458 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105248:	fa22 f303 	lsr.w	r3, r2, r3
 810524c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810524e:	68bb      	ldr	r3, [r7, #8]
 8105250:	ee07 3a90 	vmov	s15, r3
 8105254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105258:	697b      	ldr	r3, [r7, #20]
 810525a:	ee07 3a90 	vmov	s15, r3
 810525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105266:	4b7b      	ldr	r3, [pc, #492]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810526e:	ee07 3a90 	vmov	s15, r3
 8105272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105276:	ed97 6a03 	vldr	s12, [r7, #12]
 810527a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810545c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810527e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810528a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810528e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105292:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105296:	e087      	b.n	81053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105298:	697b      	ldr	r3, [r7, #20]
 810529a:	ee07 3a90 	vmov	s15, r3
 810529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105460 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81052a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052aa:	4b6a      	ldr	r3, [pc, #424]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052b2:	ee07 3a90 	vmov	s15, r3
 81052b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81052be:	eddf 5a67 	vldr	s11, [pc, #412]	; 810545c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81052c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81052c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81052ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81052ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81052d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81052d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81052da:	e065      	b.n	81053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81052dc:	697b      	ldr	r3, [r7, #20]
 81052de:	ee07 3a90 	vmov	s15, r3
 81052e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81052e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81052ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81052ee:	4b59      	ldr	r3, [pc, #356]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81052f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81052f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81052f6:	ee07 3a90 	vmov	s15, r3
 81052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81052fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8105302:	eddf 5a56 	vldr	s11, [pc, #344]	; 810545c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810530e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105316:	ee67 7a27 	vmul.f32	s15, s14, s15
 810531a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810531e:	e043      	b.n	81053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105320:	697b      	ldr	r3, [r7, #20]
 8105322:	ee07 3a90 	vmov	s15, r3
 8105326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810532a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105332:	4b48      	ldr	r3, [pc, #288]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810533a:	ee07 3a90 	vmov	s15, r3
 810533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105342:	ed97 6a03 	vldr	s12, [r7, #12]
 8105346:	eddf 5a45 	vldr	s11, [pc, #276]	; 810545c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810535e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105362:	e021      	b.n	81053a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105364:	697b      	ldr	r3, [r7, #20]
 8105366:	ee07 3a90 	vmov	s15, r3
 810536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810536e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105376:	4b37      	ldr	r3, [pc, #220]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810537e:	ee07 3a90 	vmov	s15, r3
 8105382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105386:	ed97 6a03 	vldr	s12, [r7, #12]
 810538a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810545c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81053a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81053a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81053a8:	4b2a      	ldr	r3, [pc, #168]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053ac:	0a5b      	lsrs	r3, r3, #9
 81053ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053b2:	ee07 3a90 	vmov	s15, r3
 81053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053be:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053c2:	edd7 6a07 	vldr	s13, [r7, #28]
 81053c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053ce:	ee17 2a90 	vmov	r2, s15
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81053d6:	4b1f      	ldr	r3, [pc, #124]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81053da:	0c1b      	lsrs	r3, r3, #16
 81053dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81053e0:	ee07 3a90 	vmov	s15, r3
 81053e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81053e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81053ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81053f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81053f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81053f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81053fc:	ee17 2a90 	vmov	r2, s15
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105404:	4b13      	ldr	r3, [pc, #76]	; (8105454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105408:	0e1b      	lsrs	r3, r3, #24
 810540a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810540e:	ee07 3a90 	vmov	s15, r3
 8105412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810541a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810541e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810542a:	ee17 2a90 	vmov	r2, s15
 810542e:	687b      	ldr	r3, [r7, #4]
 8105430:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105432:	e008      	b.n	8105446 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105434:	687b      	ldr	r3, [r7, #4]
 8105436:	2200      	movs	r2, #0
 8105438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810543a:	687b      	ldr	r3, [r7, #4]
 810543c:	2200      	movs	r2, #0
 810543e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105440:	687b      	ldr	r3, [r7, #4]
 8105442:	2200      	movs	r2, #0
 8105444:	609a      	str	r2, [r3, #8]
}
 8105446:	bf00      	nop
 8105448:	3724      	adds	r7, #36	; 0x24
 810544a:	46bd      	mov	sp, r7
 810544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105450:	4770      	bx	lr
 8105452:	bf00      	nop
 8105454:	58024400 	.word	0x58024400
 8105458:	03d09000 	.word	0x03d09000
 810545c:	46000000 	.word	0x46000000
 8105460:	4c742400 	.word	0x4c742400
 8105464:	4a742400 	.word	0x4a742400
 8105468:	4bbebc20 	.word	0x4bbebc20

0810546c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810546c:	b480      	push	{r7}
 810546e:	b089      	sub	sp, #36	; 0x24
 8105470:	af00      	add	r7, sp, #0
 8105472:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105474:	4ba1      	ldr	r3, [pc, #644]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105478:	f003 0303 	and.w	r3, r3, #3
 810547c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810547e:	4b9f      	ldr	r3, [pc, #636]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105482:	0d1b      	lsrs	r3, r3, #20
 8105484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105488:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810548a:	4b9c      	ldr	r3, [pc, #624]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810548e:	0a1b      	lsrs	r3, r3, #8
 8105490:	f003 0301 	and.w	r3, r3, #1
 8105494:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8105496:	4b99      	ldr	r3, [pc, #612]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810549a:	08db      	lsrs	r3, r3, #3
 810549c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81054a0:	693a      	ldr	r2, [r7, #16]
 81054a2:	fb02 f303 	mul.w	r3, r2, r3
 81054a6:	ee07 3a90 	vmov	s15, r3
 81054aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81054ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81054b2:	697b      	ldr	r3, [r7, #20]
 81054b4:	2b00      	cmp	r3, #0
 81054b6:	f000 8111 	beq.w	81056dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81054ba:	69bb      	ldr	r3, [r7, #24]
 81054bc:	2b02      	cmp	r3, #2
 81054be:	f000 8083 	beq.w	81055c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81054c2:	69bb      	ldr	r3, [r7, #24]
 81054c4:	2b02      	cmp	r3, #2
 81054c6:	f200 80a1 	bhi.w	810560c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81054ca:	69bb      	ldr	r3, [r7, #24]
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d003      	beq.n	81054d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81054d0:	69bb      	ldr	r3, [r7, #24]
 81054d2:	2b01      	cmp	r3, #1
 81054d4:	d056      	beq.n	8105584 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81054d6:	e099      	b.n	810560c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81054d8:	4b88      	ldr	r3, [pc, #544]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	f003 0320 	and.w	r3, r3, #32
 81054e0:	2b00      	cmp	r3, #0
 81054e2:	d02d      	beq.n	8105540 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054e4:	4b85      	ldr	r3, [pc, #532]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81054e6:	681b      	ldr	r3, [r3, #0]
 81054e8:	08db      	lsrs	r3, r3, #3
 81054ea:	f003 0303 	and.w	r3, r3, #3
 81054ee:	4a84      	ldr	r2, [pc, #528]	; (8105700 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81054f0:	fa22 f303 	lsr.w	r3, r2, r3
 81054f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81054f6:	68bb      	ldr	r3, [r7, #8]
 81054f8:	ee07 3a90 	vmov	s15, r3
 81054fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105500:	697b      	ldr	r3, [r7, #20]
 8105502:	ee07 3a90 	vmov	s15, r3
 8105506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810550a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810550e:	4b7b      	ldr	r3, [pc, #492]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105516:	ee07 3a90 	vmov	s15, r3
 810551a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810551e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105522:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810552a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810552e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105536:	ee67 7a27 	vmul.f32	s15, s14, s15
 810553a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810553e:	e087      	b.n	8105650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105540:	697b      	ldr	r3, [r7, #20]
 8105542:	ee07 3a90 	vmov	s15, r3
 8105546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810554a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105708 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810554e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105552:	4b6a      	ldr	r3, [pc, #424]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810555a:	ee07 3a90 	vmov	s15, r3
 810555e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105562:	ed97 6a03 	vldr	s12, [r7, #12]
 8105566:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810556a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810556e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810557a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810557e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105582:	e065      	b.n	8105650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105584:	697b      	ldr	r3, [r7, #20]
 8105586:	ee07 3a90 	vmov	s15, r3
 810558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810558e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810570c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105596:	4b59      	ldr	r3, [pc, #356]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810559e:	ee07 3a90 	vmov	s15, r3
 81055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81055aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81055c6:	e043      	b.n	8105650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81055c8:	697b      	ldr	r3, [r7, #20]
 81055ca:	ee07 3a90 	vmov	s15, r3
 81055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81055d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055da:	4b48      	ldr	r3, [pc, #288]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81055de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055e2:	ee07 3a90 	vmov	s15, r3
 81055e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81055ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81055f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810560a:	e021      	b.n	8105650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810560c:	697b      	ldr	r3, [r7, #20]
 810560e:	ee07 3a90 	vmov	s15, r3
 8105612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105616:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810570c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810561a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810561e:	4b37      	ldr	r3, [pc, #220]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105626:	ee07 3a90 	vmov	s15, r3
 810562a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810562e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105632:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810563a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810563e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105646:	ee67 7a27 	vmul.f32	s15, s14, s15
 810564a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810564e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105650:	4b2a      	ldr	r3, [pc, #168]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105654:	0a5b      	lsrs	r3, r3, #9
 8105656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810565a:	ee07 3a90 	vmov	s15, r3
 810565e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105666:	ee37 7a87 	vadd.f32	s14, s15, s14
 810566a:	edd7 6a07 	vldr	s13, [r7, #28]
 810566e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105676:	ee17 2a90 	vmov	r2, s15
 810567a:	687b      	ldr	r3, [r7, #4]
 810567c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810567e:	4b1f      	ldr	r3, [pc, #124]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105682:	0c1b      	lsrs	r3, r3, #16
 8105684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105688:	ee07 3a90 	vmov	s15, r3
 810568c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105698:	edd7 6a07 	vldr	s13, [r7, #28]
 810569c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056a4:	ee17 2a90 	vmov	r2, s15
 81056a8:	687b      	ldr	r3, [r7, #4]
 81056aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 81056ac:	4b13      	ldr	r3, [pc, #76]	; (81056fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81056b0:	0e1b      	lsrs	r3, r3, #24
 81056b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81056b6:	ee07 3a90 	vmov	s15, r3
 81056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81056c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81056c6:	edd7 6a07 	vldr	s13, [r7, #28]
 81056ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81056ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81056d2:	ee17 2a90 	vmov	r2, s15
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81056da:	e008      	b.n	81056ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	2200      	movs	r2, #0
 81056e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81056e2:	687b      	ldr	r3, [r7, #4]
 81056e4:	2200      	movs	r2, #0
 81056e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81056e8:	687b      	ldr	r3, [r7, #4]
 81056ea:	2200      	movs	r2, #0
 81056ec:	609a      	str	r2, [r3, #8]
}
 81056ee:	bf00      	nop
 81056f0:	3724      	adds	r7, #36	; 0x24
 81056f2:	46bd      	mov	sp, r7
 81056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056f8:	4770      	bx	lr
 81056fa:	bf00      	nop
 81056fc:	58024400 	.word	0x58024400
 8105700:	03d09000 	.word	0x03d09000
 8105704:	46000000 	.word	0x46000000
 8105708:	4c742400 	.word	0x4c742400
 810570c:	4a742400 	.word	0x4a742400
 8105710:	4bbebc20 	.word	0x4bbebc20

08105714 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105714:	b480      	push	{r7}
 8105716:	b089      	sub	sp, #36	; 0x24
 8105718:	af00      	add	r7, sp, #0
 810571a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810571c:	4ba0      	ldr	r3, [pc, #640]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105720:	f003 0303 	and.w	r3, r3, #3
 8105724:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105726:	4b9e      	ldr	r3, [pc, #632]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810572a:	091b      	lsrs	r3, r3, #4
 810572c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105730:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105732:	4b9b      	ldr	r3, [pc, #620]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105736:	f003 0301 	and.w	r3, r3, #1
 810573a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810573c:	4b98      	ldr	r3, [pc, #608]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105740:	08db      	lsrs	r3, r3, #3
 8105742:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105746:	693a      	ldr	r2, [r7, #16]
 8105748:	fb02 f303 	mul.w	r3, r2, r3
 810574c:	ee07 3a90 	vmov	s15, r3
 8105750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105754:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105758:	697b      	ldr	r3, [r7, #20]
 810575a:	2b00      	cmp	r3, #0
 810575c:	f000 8111 	beq.w	8105982 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105760:	69bb      	ldr	r3, [r7, #24]
 8105762:	2b02      	cmp	r3, #2
 8105764:	f000 8083 	beq.w	810586e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105768:	69bb      	ldr	r3, [r7, #24]
 810576a:	2b02      	cmp	r3, #2
 810576c:	f200 80a1 	bhi.w	81058b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105770:	69bb      	ldr	r3, [r7, #24]
 8105772:	2b00      	cmp	r3, #0
 8105774:	d003      	beq.n	810577e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105776:	69bb      	ldr	r3, [r7, #24]
 8105778:	2b01      	cmp	r3, #1
 810577a:	d056      	beq.n	810582a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810577c:	e099      	b.n	81058b2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810577e:	4b88      	ldr	r3, [pc, #544]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105780:	681b      	ldr	r3, [r3, #0]
 8105782:	f003 0320 	and.w	r3, r3, #32
 8105786:	2b00      	cmp	r3, #0
 8105788:	d02d      	beq.n	81057e6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810578a:	4b85      	ldr	r3, [pc, #532]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810578c:	681b      	ldr	r3, [r3, #0]
 810578e:	08db      	lsrs	r3, r3, #3
 8105790:	f003 0303 	and.w	r3, r3, #3
 8105794:	4a83      	ldr	r2, [pc, #524]	; (81059a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105796:	fa22 f303 	lsr.w	r3, r2, r3
 810579a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810579c:	68bb      	ldr	r3, [r7, #8]
 810579e:	ee07 3a90 	vmov	s15, r3
 81057a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057a6:	697b      	ldr	r3, [r7, #20]
 81057a8:	ee07 3a90 	vmov	s15, r3
 81057ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057b4:	4b7a      	ldr	r3, [pc, #488]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81057b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057bc:	ee07 3a90 	vmov	s15, r3
 81057c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057c4:	ed97 6a03 	vldr	s12, [r7, #12]
 81057c8:	eddf 5a77 	vldr	s11, [pc, #476]	; 81059a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81057cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057e0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81057e4:	e087      	b.n	81058f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81057e6:	697b      	ldr	r3, [r7, #20]
 81057e8:	ee07 3a90 	vmov	s15, r3
 81057ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057f0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 81059ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81057f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057f8:	4b69      	ldr	r3, [pc, #420]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81057fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105800:	ee07 3a90 	vmov	s15, r3
 8105804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105808:	ed97 6a03 	vldr	s12, [r7, #12]
 810580c:	eddf 5a66 	vldr	s11, [pc, #408]	; 81059a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810581c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105824:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105828:	e065      	b.n	81058f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810582a:	697b      	ldr	r3, [r7, #20]
 810582c:	ee07 3a90 	vmov	s15, r3
 8105830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105834:	eddf 6a5e 	vldr	s13, [pc, #376]	; 81059b0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810583c:	4b58      	ldr	r3, [pc, #352]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105844:	ee07 3a90 	vmov	s15, r3
 8105848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810584c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105850:	eddf 5a55 	vldr	s11, [pc, #340]	; 81059a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810585c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105868:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810586c:	e043      	b.n	81058f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810586e:	697b      	ldr	r3, [r7, #20]
 8105870:	ee07 3a90 	vmov	s15, r3
 8105874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105878:	eddf 6a4e 	vldr	s13, [pc, #312]	; 81059b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810587c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105880:	4b47      	ldr	r3, [pc, #284]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105888:	ee07 3a90 	vmov	s15, r3
 810588c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105890:	ed97 6a03 	vldr	s12, [r7, #12]
 8105894:	eddf 5a44 	vldr	s11, [pc, #272]	; 81059a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810589c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81058b0:	e021      	b.n	81058f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81058b2:	697b      	ldr	r3, [r7, #20]
 81058b4:	ee07 3a90 	vmov	s15, r3
 81058b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058bc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 81059ac <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81058c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058c4:	4b36      	ldr	r3, [pc, #216]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058cc:	ee07 3a90 	vmov	s15, r3
 81058d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058d4:	ed97 6a03 	vldr	s12, [r7, #12]
 81058d8:	eddf 5a33 	vldr	s11, [pc, #204]	; 81059a8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81058dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81058f4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81058f6:	4b2a      	ldr	r3, [pc, #168]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81058f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81058fa:	0a5b      	lsrs	r3, r3, #9
 81058fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105900:	ee07 3a90 	vmov	s15, r3
 8105904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105908:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810590c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105910:	edd7 6a07 	vldr	s13, [r7, #28]
 8105914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810591c:	ee17 2a90 	vmov	r2, s15
 8105920:	687b      	ldr	r3, [r7, #4]
 8105922:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105924:	4b1e      	ldr	r3, [pc, #120]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105928:	0c1b      	lsrs	r3, r3, #16
 810592a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810592e:	ee07 3a90 	vmov	s15, r3
 8105932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810593a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810593e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105942:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810594a:	ee17 2a90 	vmov	r2, s15
 810594e:	687b      	ldr	r3, [r7, #4]
 8105950:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105952:	4b13      	ldr	r3, [pc, #76]	; (81059a0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105956:	0e1b      	lsrs	r3, r3, #24
 8105958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810595c:	ee07 3a90 	vmov	s15, r3
 8105960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105968:	ee37 7a87 	vadd.f32	s14, s15, s14
 810596c:	edd7 6a07 	vldr	s13, [r7, #28]
 8105970:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105974:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105978:	ee17 2a90 	vmov	r2, s15
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105980:	e008      	b.n	8105994 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105982:	687b      	ldr	r3, [r7, #4]
 8105984:	2200      	movs	r2, #0
 8105986:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105988:	687b      	ldr	r3, [r7, #4]
 810598a:	2200      	movs	r2, #0
 810598c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	2200      	movs	r2, #0
 8105992:	609a      	str	r2, [r3, #8]
}
 8105994:	bf00      	nop
 8105996:	3724      	adds	r7, #36	; 0x24
 8105998:	46bd      	mov	sp, r7
 810599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810599e:	4770      	bx	lr
 81059a0:	58024400 	.word	0x58024400
 81059a4:	03d09000 	.word	0x03d09000
 81059a8:	46000000 	.word	0x46000000
 81059ac:	4c742400 	.word	0x4c742400
 81059b0:	4a742400 	.word	0x4a742400
 81059b4:	4bbebc20 	.word	0x4bbebc20

081059b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81059b8:	b580      	push	{r7, lr}
 81059ba:	b084      	sub	sp, #16
 81059bc:	af00      	add	r7, sp, #0
 81059be:	6078      	str	r0, [r7, #4]
 81059c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81059c2:	2300      	movs	r3, #0
 81059c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81059c6:	4b54      	ldr	r3, [pc, #336]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 81059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81059ca:	f003 0303 	and.w	r3, r3, #3
 81059ce:	2b03      	cmp	r3, #3
 81059d0:	d101      	bne.n	81059d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81059d2:	2301      	movs	r3, #1
 81059d4:	e09b      	b.n	8105b0e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81059d6:	4b50      	ldr	r3, [pc, #320]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 81059d8:	681b      	ldr	r3, [r3, #0]
 81059da:	4a4f      	ldr	r2, [pc, #316]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 81059dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81059e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81059e2:	f7fb fcc1 	bl	8101368 <HAL_GetTick>
 81059e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81059e8:	e008      	b.n	81059fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81059ea:	f7fb fcbd 	bl	8101368 <HAL_GetTick>
 81059ee:	4602      	mov	r2, r0
 81059f0:	68bb      	ldr	r3, [r7, #8]
 81059f2:	1ad3      	subs	r3, r2, r3
 81059f4:	2b02      	cmp	r3, #2
 81059f6:	d901      	bls.n	81059fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81059f8:	2303      	movs	r3, #3
 81059fa:	e088      	b.n	8105b0e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81059fc:	4b46      	ldr	r3, [pc, #280]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 81059fe:	681b      	ldr	r3, [r3, #0]
 8105a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105a04:	2b00      	cmp	r3, #0
 8105a06:	d1f0      	bne.n	81059ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105a08:	4b43      	ldr	r3, [pc, #268]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	681b      	ldr	r3, [r3, #0]
 8105a14:	031b      	lsls	r3, r3, #12
 8105a16:	4940      	ldr	r1, [pc, #256]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a18:	4313      	orrs	r3, r2
 8105a1a:	628b      	str	r3, [r1, #40]	; 0x28
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	685b      	ldr	r3, [r3, #4]
 8105a20:	3b01      	subs	r3, #1
 8105a22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	689b      	ldr	r3, [r3, #8]
 8105a2a:	3b01      	subs	r3, #1
 8105a2c:	025b      	lsls	r3, r3, #9
 8105a2e:	b29b      	uxth	r3, r3
 8105a30:	431a      	orrs	r2, r3
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	68db      	ldr	r3, [r3, #12]
 8105a36:	3b01      	subs	r3, #1
 8105a38:	041b      	lsls	r3, r3, #16
 8105a3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105a3e:	431a      	orrs	r2, r3
 8105a40:	687b      	ldr	r3, [r7, #4]
 8105a42:	691b      	ldr	r3, [r3, #16]
 8105a44:	3b01      	subs	r3, #1
 8105a46:	061b      	lsls	r3, r3, #24
 8105a48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105a4c:	4932      	ldr	r1, [pc, #200]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a4e:	4313      	orrs	r3, r2
 8105a50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105a52:	4b31      	ldr	r3, [pc, #196]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	695b      	ldr	r3, [r3, #20]
 8105a5e:	492e      	ldr	r1, [pc, #184]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a60:	4313      	orrs	r3, r2
 8105a62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105a64:	4b2c      	ldr	r3, [pc, #176]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a68:	f023 0220 	bic.w	r2, r3, #32
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	699b      	ldr	r3, [r3, #24]
 8105a70:	4929      	ldr	r1, [pc, #164]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a72:	4313      	orrs	r3, r2
 8105a74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105a76:	4b28      	ldr	r3, [pc, #160]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a7a:	4a27      	ldr	r2, [pc, #156]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a7c:	f023 0310 	bic.w	r3, r3, #16
 8105a80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105a82:	4b25      	ldr	r3, [pc, #148]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105a8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105a8e:	687a      	ldr	r2, [r7, #4]
 8105a90:	69d2      	ldr	r2, [r2, #28]
 8105a92:	00d2      	lsls	r2, r2, #3
 8105a94:	4920      	ldr	r1, [pc, #128]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a96:	4313      	orrs	r3, r2
 8105a98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105a9a:	4b1f      	ldr	r3, [pc, #124]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a9e:	4a1e      	ldr	r2, [pc, #120]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105aa0:	f043 0310 	orr.w	r3, r3, #16
 8105aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105aa6:	683b      	ldr	r3, [r7, #0]
 8105aa8:	2b00      	cmp	r3, #0
 8105aaa:	d106      	bne.n	8105aba <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105aac:	4b1a      	ldr	r3, [pc, #104]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ab0:	4a19      	ldr	r2, [pc, #100]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105ab2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105ab8:	e00f      	b.n	8105ada <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105aba:	683b      	ldr	r3, [r7, #0]
 8105abc:	2b01      	cmp	r3, #1
 8105abe:	d106      	bne.n	8105ace <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105ac0:	4b15      	ldr	r3, [pc, #84]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ac4:	4a14      	ldr	r2, [pc, #80]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105aca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105acc:	e005      	b.n	8105ada <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105ace:	4b12      	ldr	r3, [pc, #72]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ad2:	4a11      	ldr	r2, [pc, #68]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105ad8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105ada:	4b0f      	ldr	r3, [pc, #60]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	4a0e      	ldr	r2, [pc, #56]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105ae4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105ae6:	f7fb fc3f 	bl	8101368 <HAL_GetTick>
 8105aea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105aec:	e008      	b.n	8105b00 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105aee:	f7fb fc3b 	bl	8101368 <HAL_GetTick>
 8105af2:	4602      	mov	r2, r0
 8105af4:	68bb      	ldr	r3, [r7, #8]
 8105af6:	1ad3      	subs	r3, r2, r3
 8105af8:	2b02      	cmp	r3, #2
 8105afa:	d901      	bls.n	8105b00 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105afc:	2303      	movs	r3, #3
 8105afe:	e006      	b.n	8105b0e <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105b00:	4b05      	ldr	r3, [pc, #20]	; (8105b18 <RCCEx_PLL2_Config+0x160>)
 8105b02:	681b      	ldr	r3, [r3, #0]
 8105b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105b08:	2b00      	cmp	r3, #0
 8105b0a:	d0f0      	beq.n	8105aee <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8105b0e:	4618      	mov	r0, r3
 8105b10:	3710      	adds	r7, #16
 8105b12:	46bd      	mov	sp, r7
 8105b14:	bd80      	pop	{r7, pc}
 8105b16:	bf00      	nop
 8105b18:	58024400 	.word	0x58024400

08105b1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105b1c:	b580      	push	{r7, lr}
 8105b1e:	b084      	sub	sp, #16
 8105b20:	af00      	add	r7, sp, #0
 8105b22:	6078      	str	r0, [r7, #4]
 8105b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105b26:	2300      	movs	r3, #0
 8105b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105b2a:	4b54      	ldr	r3, [pc, #336]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b2e:	f003 0303 	and.w	r3, r3, #3
 8105b32:	2b03      	cmp	r3, #3
 8105b34:	d101      	bne.n	8105b3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105b36:	2301      	movs	r3, #1
 8105b38:	e09b      	b.n	8105c72 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105b3a:	4b50      	ldr	r3, [pc, #320]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105b3c:	681b      	ldr	r3, [r3, #0]
 8105b3e:	4a4f      	ldr	r2, [pc, #316]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105b46:	f7fb fc0f 	bl	8101368 <HAL_GetTick>
 8105b4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105b4c:	e008      	b.n	8105b60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105b4e:	f7fb fc0b 	bl	8101368 <HAL_GetTick>
 8105b52:	4602      	mov	r2, r0
 8105b54:	68bb      	ldr	r3, [r7, #8]
 8105b56:	1ad3      	subs	r3, r2, r3
 8105b58:	2b02      	cmp	r3, #2
 8105b5a:	d901      	bls.n	8105b60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105b5c:	2303      	movs	r3, #3
 8105b5e:	e088      	b.n	8105c72 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105b60:	4b46      	ldr	r3, [pc, #280]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105b68:	2b00      	cmp	r3, #0
 8105b6a:	d1f0      	bne.n	8105b4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105b6c:	4b43      	ldr	r3, [pc, #268]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	681b      	ldr	r3, [r3, #0]
 8105b78:	051b      	lsls	r3, r3, #20
 8105b7a:	4940      	ldr	r1, [pc, #256]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105b7c:	4313      	orrs	r3, r2
 8105b7e:	628b      	str	r3, [r1, #40]	; 0x28
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	685b      	ldr	r3, [r3, #4]
 8105b84:	3b01      	subs	r3, #1
 8105b86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	689b      	ldr	r3, [r3, #8]
 8105b8e:	3b01      	subs	r3, #1
 8105b90:	025b      	lsls	r3, r3, #9
 8105b92:	b29b      	uxth	r3, r3
 8105b94:	431a      	orrs	r2, r3
 8105b96:	687b      	ldr	r3, [r7, #4]
 8105b98:	68db      	ldr	r3, [r3, #12]
 8105b9a:	3b01      	subs	r3, #1
 8105b9c:	041b      	lsls	r3, r3, #16
 8105b9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105ba2:	431a      	orrs	r2, r3
 8105ba4:	687b      	ldr	r3, [r7, #4]
 8105ba6:	691b      	ldr	r3, [r3, #16]
 8105ba8:	3b01      	subs	r3, #1
 8105baa:	061b      	lsls	r3, r3, #24
 8105bac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105bb0:	4932      	ldr	r1, [pc, #200]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105bb2:	4313      	orrs	r3, r2
 8105bb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105bb6:	4b31      	ldr	r3, [pc, #196]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	695b      	ldr	r3, [r3, #20]
 8105bc2:	492e      	ldr	r1, [pc, #184]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105bc4:	4313      	orrs	r3, r2
 8105bc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105bc8:	4b2c      	ldr	r3, [pc, #176]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bcc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	699b      	ldr	r3, [r3, #24]
 8105bd4:	4929      	ldr	r1, [pc, #164]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105bd6:	4313      	orrs	r3, r2
 8105bd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105bda:	4b28      	ldr	r3, [pc, #160]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105bde:	4a27      	ldr	r2, [pc, #156]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105be4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105be6:	4b25      	ldr	r3, [pc, #148]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105bee:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105bf2:	687a      	ldr	r2, [r7, #4]
 8105bf4:	69d2      	ldr	r2, [r2, #28]
 8105bf6:	00d2      	lsls	r2, r2, #3
 8105bf8:	4920      	ldr	r1, [pc, #128]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105bfa:	4313      	orrs	r3, r2
 8105bfc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105bfe:	4b1f      	ldr	r3, [pc, #124]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c02:	4a1e      	ldr	r2, [pc, #120]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105c08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105c0a:	683b      	ldr	r3, [r7, #0]
 8105c0c:	2b00      	cmp	r3, #0
 8105c0e:	d106      	bne.n	8105c1e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105c10:	4b1a      	ldr	r3, [pc, #104]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c14:	4a19      	ldr	r2, [pc, #100]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105c1c:	e00f      	b.n	8105c3e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105c1e:	683b      	ldr	r3, [r7, #0]
 8105c20:	2b01      	cmp	r3, #1
 8105c22:	d106      	bne.n	8105c32 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105c24:	4b15      	ldr	r3, [pc, #84]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c28:	4a14      	ldr	r2, [pc, #80]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105c2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105c30:	e005      	b.n	8105c3e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105c32:	4b12      	ldr	r3, [pc, #72]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c36:	4a11      	ldr	r2, [pc, #68]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105c3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105c3e:	4b0f      	ldr	r3, [pc, #60]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c40:	681b      	ldr	r3, [r3, #0]
 8105c42:	4a0e      	ldr	r2, [pc, #56]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105c48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105c4a:	f7fb fb8d 	bl	8101368 <HAL_GetTick>
 8105c4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105c50:	e008      	b.n	8105c64 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105c52:	f7fb fb89 	bl	8101368 <HAL_GetTick>
 8105c56:	4602      	mov	r2, r0
 8105c58:	68bb      	ldr	r3, [r7, #8]
 8105c5a:	1ad3      	subs	r3, r2, r3
 8105c5c:	2b02      	cmp	r3, #2
 8105c5e:	d901      	bls.n	8105c64 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105c60:	2303      	movs	r3, #3
 8105c62:	e006      	b.n	8105c72 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105c64:	4b05      	ldr	r3, [pc, #20]	; (8105c7c <RCCEx_PLL3_Config+0x160>)
 8105c66:	681b      	ldr	r3, [r3, #0]
 8105c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105c6c:	2b00      	cmp	r3, #0
 8105c6e:	d0f0      	beq.n	8105c52 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8105c72:	4618      	mov	r0, r3
 8105c74:	3710      	adds	r7, #16
 8105c76:	46bd      	mov	sp, r7
 8105c78:	bd80      	pop	{r7, pc}
 8105c7a:	bf00      	nop
 8105c7c:	58024400 	.word	0x58024400

08105c80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8105c80:	b580      	push	{r7, lr}
 8105c82:	b084      	sub	sp, #16
 8105c84:	af00      	add	r7, sp, #0
 8105c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8105c88:	2301      	movs	r3, #1
 8105c8a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8105c8c:	687b      	ldr	r3, [r7, #4]
 8105c8e:	2b00      	cmp	r3, #0
 8105c90:	d073      	beq.n	8105d7a <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8105c92:	687b      	ldr	r3, [r7, #4]
 8105c94:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8105c98:	b2db      	uxtb	r3, r3
 8105c9a:	2b00      	cmp	r3, #0
 8105c9c:	d106      	bne.n	8105cac <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	2200      	movs	r2, #0
 8105ca2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8105ca6:	6878      	ldr	r0, [r7, #4]
 8105ca8:	f7fb f88a 	bl	8100dc0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8105cac:	687b      	ldr	r3, [r7, #4]
 8105cae:	2202      	movs	r2, #2
 8105cb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8105cb4:	687b      	ldr	r3, [r7, #4]
 8105cb6:	681b      	ldr	r3, [r3, #0]
 8105cb8:	68db      	ldr	r3, [r3, #12]
 8105cba:	f003 0310 	and.w	r3, r3, #16
 8105cbe:	2b10      	cmp	r3, #16
 8105cc0:	d052      	beq.n	8105d68 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	681b      	ldr	r3, [r3, #0]
 8105cc6:	22ca      	movs	r2, #202	; 0xca
 8105cc8:	625a      	str	r2, [r3, #36]	; 0x24
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	2253      	movs	r2, #83	; 0x53
 8105cd0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8105cd2:	6878      	ldr	r0, [r7, #4]
 8105cd4:	f000 f87a 	bl	8105dcc <RTC_EnterInitMode>
 8105cd8:	4603      	mov	r3, r0
 8105cda:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8105cdc:	7bfb      	ldrb	r3, [r7, #15]
 8105cde:	2b00      	cmp	r3, #0
 8105ce0:	d126      	bne.n	8105d30 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8105ce2:	687b      	ldr	r3, [r7, #4]
 8105ce4:	681b      	ldr	r3, [r3, #0]
 8105ce6:	689b      	ldr	r3, [r3, #8]
 8105ce8:	687a      	ldr	r2, [r7, #4]
 8105cea:	6812      	ldr	r2, [r2, #0]
 8105cec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8105cf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105cf4:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8105cf6:	687b      	ldr	r3, [r7, #4]
 8105cf8:	681b      	ldr	r3, [r3, #0]
 8105cfa:	6899      	ldr	r1, [r3, #8]
 8105cfc:	687b      	ldr	r3, [r7, #4]
 8105cfe:	685a      	ldr	r2, [r3, #4]
 8105d00:	687b      	ldr	r3, [r7, #4]
 8105d02:	691b      	ldr	r3, [r3, #16]
 8105d04:	431a      	orrs	r2, r3
 8105d06:	687b      	ldr	r3, [r7, #4]
 8105d08:	699b      	ldr	r3, [r3, #24]
 8105d0a:	431a      	orrs	r2, r3
 8105d0c:	687b      	ldr	r3, [r7, #4]
 8105d0e:	681b      	ldr	r3, [r3, #0]
 8105d10:	430a      	orrs	r2, r1
 8105d12:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8105d14:	687b      	ldr	r3, [r7, #4]
 8105d16:	689b      	ldr	r3, [r3, #8]
 8105d18:	0419      	lsls	r1, r3, #16
 8105d1a:	687b      	ldr	r3, [r7, #4]
 8105d1c:	68da      	ldr	r2, [r3, #12]
 8105d1e:	687b      	ldr	r3, [r7, #4]
 8105d20:	681b      	ldr	r3, [r3, #0]
 8105d22:	430a      	orrs	r2, r1
 8105d24:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8105d26:	6878      	ldr	r0, [r7, #4]
 8105d28:	f000 f884 	bl	8105e34 <RTC_ExitInitMode>
 8105d2c:	4603      	mov	r3, r0
 8105d2e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8105d30:	7bfb      	ldrb	r3, [r7, #15]
 8105d32:	2b00      	cmp	r3, #0
 8105d34:	d113      	bne.n	8105d5e <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8105d36:	687b      	ldr	r3, [r7, #4]
 8105d38:	681b      	ldr	r3, [r3, #0]
 8105d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105d3c:	687b      	ldr	r3, [r7, #4]
 8105d3e:	681b      	ldr	r3, [r3, #0]
 8105d40:	f022 0203 	bic.w	r2, r2, #3
 8105d44:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	681b      	ldr	r3, [r3, #0]
 8105d4a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8105d4c:	687b      	ldr	r3, [r7, #4]
 8105d4e:	69da      	ldr	r2, [r3, #28]
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	695b      	ldr	r3, [r3, #20]
 8105d54:	431a      	orrs	r2, r3
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	681b      	ldr	r3, [r3, #0]
 8105d5a:	430a      	orrs	r2, r1
 8105d5c:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8105d5e:	687b      	ldr	r3, [r7, #4]
 8105d60:	681b      	ldr	r3, [r3, #0]
 8105d62:	22ff      	movs	r2, #255	; 0xff
 8105d64:	625a      	str	r2, [r3, #36]	; 0x24
 8105d66:	e001      	b.n	8105d6c <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8105d68:	2300      	movs	r3, #0
 8105d6a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8105d6c:	7bfb      	ldrb	r3, [r7, #15]
 8105d6e:	2b00      	cmp	r3, #0
 8105d70:	d103      	bne.n	8105d7a <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	2201      	movs	r2, #1
 8105d76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8105d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8105d7c:	4618      	mov	r0, r3
 8105d7e:	3710      	adds	r7, #16
 8105d80:	46bd      	mov	sp, r7
 8105d82:	bd80      	pop	{r7, pc}

08105d84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8105d84:	b580      	push	{r7, lr}
 8105d86:	b084      	sub	sp, #16
 8105d88:	af00      	add	r7, sp, #0
 8105d8a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8105d8c:	687b      	ldr	r3, [r7, #4]
 8105d8e:	681b      	ldr	r3, [r3, #0]
 8105d90:	4a0d      	ldr	r2, [pc, #52]	; (8105dc8 <HAL_RTC_WaitForSynchro+0x44>)
 8105d92:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8105d94:	f7fb fae8 	bl	8101368 <HAL_GetTick>
 8105d98:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105d9a:	e009      	b.n	8105db0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8105d9c:	f7fb fae4 	bl	8101368 <HAL_GetTick>
 8105da0:	4602      	mov	r2, r0
 8105da2:	68fb      	ldr	r3, [r7, #12]
 8105da4:	1ad3      	subs	r3, r2, r3
 8105da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105daa:	d901      	bls.n	8105db0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8105dac:	2303      	movs	r3, #3
 8105dae:	e007      	b.n	8105dc0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	68db      	ldr	r3, [r3, #12]
 8105db6:	f003 0320 	and.w	r3, r3, #32
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	d0ee      	beq.n	8105d9c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 8105dbe:	2300      	movs	r3, #0
}
 8105dc0:	4618      	mov	r0, r3
 8105dc2:	3710      	adds	r7, #16
 8105dc4:	46bd      	mov	sp, r7
 8105dc6:	bd80      	pop	{r7, pc}
 8105dc8:	0003ff5f 	.word	0x0003ff5f

08105dcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8105dcc:	b580      	push	{r7, lr}
 8105dce:	b084      	sub	sp, #16
 8105dd0:	af00      	add	r7, sp, #0
 8105dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105dd4:	2300      	movs	r3, #0
 8105dd6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8105dd8:	687b      	ldr	r3, [r7, #4]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	68db      	ldr	r3, [r3, #12]
 8105dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d120      	bne.n	8105e28 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8105de6:	687b      	ldr	r3, [r7, #4]
 8105de8:	681b      	ldr	r3, [r3, #0]
 8105dea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8105dee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8105df0:	f7fb faba 	bl	8101368 <HAL_GetTick>
 8105df4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105df6:	e00d      	b.n	8105e14 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8105df8:	f7fb fab6 	bl	8101368 <HAL_GetTick>
 8105dfc:	4602      	mov	r2, r0
 8105dfe:	68bb      	ldr	r3, [r7, #8]
 8105e00:	1ad3      	subs	r3, r2, r3
 8105e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8105e06:	d905      	bls.n	8105e14 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8105e08:	2303      	movs	r3, #3
 8105e0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	2203      	movs	r2, #3
 8105e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8105e14:	687b      	ldr	r3, [r7, #4]
 8105e16:	681b      	ldr	r3, [r3, #0]
 8105e18:	68db      	ldr	r3, [r3, #12]
 8105e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105e1e:	2b00      	cmp	r3, #0
 8105e20:	d102      	bne.n	8105e28 <RTC_EnterInitMode+0x5c>
 8105e22:	7bfb      	ldrb	r3, [r7, #15]
 8105e24:	2b03      	cmp	r3, #3
 8105e26:	d1e7      	bne.n	8105df8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8105e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8105e2a:	4618      	mov	r0, r3
 8105e2c:	3710      	adds	r7, #16
 8105e2e:	46bd      	mov	sp, r7
 8105e30:	bd80      	pop	{r7, pc}
	...

08105e34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8105e34:	b580      	push	{r7, lr}
 8105e36:	b084      	sub	sp, #16
 8105e38:	af00      	add	r7, sp, #0
 8105e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8105e3c:	2300      	movs	r3, #0
 8105e3e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8105e40:	4b1a      	ldr	r3, [pc, #104]	; (8105eac <RTC_ExitInitMode+0x78>)
 8105e42:	68db      	ldr	r3, [r3, #12]
 8105e44:	4a19      	ldr	r2, [pc, #100]	; (8105eac <RTC_ExitInitMode+0x78>)
 8105e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8105e4a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8105e4c:	4b17      	ldr	r3, [pc, #92]	; (8105eac <RTC_ExitInitMode+0x78>)
 8105e4e:	689b      	ldr	r3, [r3, #8]
 8105e50:	f003 0320 	and.w	r3, r3, #32
 8105e54:	2b00      	cmp	r3, #0
 8105e56:	d10c      	bne.n	8105e72 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105e58:	6878      	ldr	r0, [r7, #4]
 8105e5a:	f7ff ff93 	bl	8105d84 <HAL_RTC_WaitForSynchro>
 8105e5e:	4603      	mov	r3, r0
 8105e60:	2b00      	cmp	r3, #0
 8105e62:	d01e      	beq.n	8105ea2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	2203      	movs	r2, #3
 8105e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8105e6c:	2303      	movs	r3, #3
 8105e6e:	73fb      	strb	r3, [r7, #15]
 8105e70:	e017      	b.n	8105ea2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105e72:	4b0e      	ldr	r3, [pc, #56]	; (8105eac <RTC_ExitInitMode+0x78>)
 8105e74:	689b      	ldr	r3, [r3, #8]
 8105e76:	4a0d      	ldr	r2, [pc, #52]	; (8105eac <RTC_ExitInitMode+0x78>)
 8105e78:	f023 0320 	bic.w	r3, r3, #32
 8105e7c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8105e7e:	6878      	ldr	r0, [r7, #4]
 8105e80:	f7ff ff80 	bl	8105d84 <HAL_RTC_WaitForSynchro>
 8105e84:	4603      	mov	r3, r0
 8105e86:	2b00      	cmp	r3, #0
 8105e88:	d005      	beq.n	8105e96 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8105e8a:	687b      	ldr	r3, [r7, #4]
 8105e8c:	2203      	movs	r2, #3
 8105e8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8105e92:	2303      	movs	r3, #3
 8105e94:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8105e96:	4b05      	ldr	r3, [pc, #20]	; (8105eac <RTC_ExitInitMode+0x78>)
 8105e98:	689b      	ldr	r3, [r3, #8]
 8105e9a:	4a04      	ldr	r2, [pc, #16]	; (8105eac <RTC_ExitInitMode+0x78>)
 8105e9c:	f043 0320 	orr.w	r3, r3, #32
 8105ea0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8105ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8105ea4:	4618      	mov	r0, r3
 8105ea6:	3710      	adds	r7, #16
 8105ea8:	46bd      	mov	sp, r7
 8105eaa:	bd80      	pop	{r7, pc}
 8105eac:	58004000 	.word	0x58004000

08105eb0 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 8105eb0:	b480      	push	{r7}
 8105eb2:	b085      	sub	sp, #20
 8105eb4:	af00      	add	r7, sp, #0
 8105eb6:	6078      	str	r0, [r7, #4]
 8105eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8105eba:	687b      	ldr	r3, [r7, #4]
 8105ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8105ec0:	2b01      	cmp	r3, #1
 8105ec2:	d101      	bne.n	8105ec8 <HAL_RTCEx_SetTamper+0x18>
 8105ec4:	2302      	movs	r3, #2
 8105ec6:	e0cc      	b.n	8106062 <HAL_RTCEx_SetTamper+0x1b2>
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	2201      	movs	r2, #1
 8105ecc:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	2202      	movs	r2, #2
 8105ed4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8105ed8:	687b      	ldr	r3, [r7, #4]
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ede:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8105ee0:	683b      	ldr	r3, [r7, #0]
 8105ee2:	681b      	ldr	r3, [r3, #0]
 8105ee4:	68fa      	ldr	r2, [r7, #12]
 8105ee6:	4313      	orrs	r3, r2
 8105ee8:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 8105eea:	683b      	ldr	r3, [r7, #0]
 8105eec:	689b      	ldr	r3, [r3, #8]
 8105eee:	2b08      	cmp	r3, #8
 8105ef0:	d003      	beq.n	8105efa <HAL_RTCEx_SetTamper+0x4a>
 8105ef2:	683b      	ldr	r3, [r7, #0]
 8105ef4:	689b      	ldr	r3, [r3, #8]
 8105ef6:	2b02      	cmp	r3, #2
 8105ef8:	d106      	bne.n	8105f08 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 8105efa:	683b      	ldr	r3, [r7, #0]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	005b      	lsls	r3, r3, #1
 8105f00:	68fa      	ldr	r2, [r7, #12]
 8105f02:	4313      	orrs	r3, r2
 8105f04:	60fb      	str	r3, [r7, #12]
 8105f06:	e006      	b.n	8105f16 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 8105f08:	683b      	ldr	r3, [r7, #0]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	005b      	lsls	r3, r3, #1
 8105f0e:	43db      	mvns	r3, r3
 8105f10:	68fa      	ldr	r2, [r7, #12]
 8105f12:	4013      	ands	r3, r2
 8105f14:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 8105f16:	683b      	ldr	r3, [r7, #0]
 8105f18:	68db      	ldr	r3, [r3, #12]
 8105f1a:	2b00      	cmp	r3, #0
 8105f1c:	d01e      	beq.n	8105f5c <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105f1e:	683b      	ldr	r3, [r7, #0]
 8105f20:	681b      	ldr	r3, [r3, #0]
 8105f22:	f003 0301 	and.w	r3, r3, #1
 8105f26:	2b00      	cmp	r3, #0
 8105f28:	d003      	beq.n	8105f32 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 8105f2a:	68fb      	ldr	r3, [r7, #12]
 8105f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105f30:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105f32:	683b      	ldr	r3, [r7, #0]
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	f003 0308 	and.w	r3, r3, #8
 8105f3a:	2b00      	cmp	r3, #0
 8105f3c:	d003      	beq.n	8105f46 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8105f3e:	68fb      	ldr	r3, [r7, #12]
 8105f40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105f44:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105f46:	683b      	ldr	r3, [r7, #0]
 8105f48:	681b      	ldr	r3, [r3, #0]
 8105f4a:	f003 0320 	and.w	r3, r3, #32
 8105f4e:	2b00      	cmp	r3, #0
 8105f50:	d022      	beq.n	8105f98 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8105f52:	68fb      	ldr	r3, [r7, #12]
 8105f54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105f58:	60fb      	str	r3, [r7, #12]
 8105f5a:	e01d      	b.n	8105f98 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105f5c:	683b      	ldr	r3, [r7, #0]
 8105f5e:	681b      	ldr	r3, [r3, #0]
 8105f60:	f003 0301 	and.w	r3, r3, #1
 8105f64:	2b00      	cmp	r3, #0
 8105f66:	d003      	beq.n	8105f70 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8105f68:	68fb      	ldr	r3, [r7, #12]
 8105f6a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8105f6e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105f70:	683b      	ldr	r3, [r7, #0]
 8105f72:	681b      	ldr	r3, [r3, #0]
 8105f74:	f003 0308 	and.w	r3, r3, #8
 8105f78:	2b00      	cmp	r3, #0
 8105f7a:	d003      	beq.n	8105f84 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8105f7c:	68fb      	ldr	r3, [r7, #12]
 8105f7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8105f82:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105f84:	683b      	ldr	r3, [r7, #0]
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	f003 0320 	and.w	r3, r3, #32
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	d003      	beq.n	8105f98 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 8105f90:	68fb      	ldr	r3, [r7, #12]
 8105f92:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8105f96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8105f98:	683b      	ldr	r3, [r7, #0]
 8105f9a:	691b      	ldr	r3, [r3, #16]
 8105f9c:	2b00      	cmp	r3, #0
 8105f9e:	d01e      	beq.n	8105fde <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105fa0:	683b      	ldr	r3, [r7, #0]
 8105fa2:	681b      	ldr	r3, [r3, #0]
 8105fa4:	f003 0301 	and.w	r3, r3, #1
 8105fa8:	2b00      	cmp	r3, #0
 8105faa:	d003      	beq.n	8105fb4 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8105fac:	68fb      	ldr	r3, [r7, #12]
 8105fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8105fb2:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105fb4:	683b      	ldr	r3, [r7, #0]
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	f003 0308 	and.w	r3, r3, #8
 8105fbc:	2b00      	cmp	r3, #0
 8105fbe:	d003      	beq.n	8105fc8 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 8105fc0:	68fb      	ldr	r3, [r7, #12]
 8105fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105fc6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8105fc8:	683b      	ldr	r3, [r7, #0]
 8105fca:	681b      	ldr	r3, [r3, #0]
 8105fcc:	f003 0320 	and.w	r3, r3, #32
 8105fd0:	2b00      	cmp	r3, #0
 8105fd2:	d022      	beq.n	810601a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8105fd4:	68fb      	ldr	r3, [r7, #12]
 8105fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105fda:	60fb      	str	r3, [r7, #12]
 8105fdc:	e01d      	b.n	810601a <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8105fde:	683b      	ldr	r3, [r7, #0]
 8105fe0:	681b      	ldr	r3, [r3, #0]
 8105fe2:	f003 0301 	and.w	r3, r3, #1
 8105fe6:	2b00      	cmp	r3, #0
 8105fe8:	d003      	beq.n	8105ff2 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 8105fea:	68fb      	ldr	r3, [r7, #12]
 8105fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8105ff0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8105ff2:	683b      	ldr	r3, [r7, #0]
 8105ff4:	681b      	ldr	r3, [r3, #0]
 8105ff6:	f003 0308 	and.w	r3, r3, #8
 8105ffa:	2b00      	cmp	r3, #0
 8105ffc:	d003      	beq.n	8106006 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8105ffe:	68fb      	ldr	r3, [r7, #12]
 8106000:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106004:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8106006:	683b      	ldr	r3, [r7, #0]
 8106008:	681b      	ldr	r3, [r3, #0]
 810600a:	f003 0320 	and.w	r3, r3, #32
 810600e:	2b00      	cmp	r3, #0
 8106010:	d003      	beq.n	810601a <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8106012:	68fb      	ldr	r3, [r7, #12]
 8106014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106018:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 810601a:	68fb      	ldr	r3, [r7, #12]
 810601c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106024:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8106026:	683b      	ldr	r3, [r7, #0]
 8106028:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 810602a:	683b      	ldr	r3, [r7, #0]
 810602c:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810602e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8106030:	683b      	ldr	r3, [r7, #0]
 8106032:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8106034:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 8106036:	683b      	ldr	r3, [r7, #0]
 8106038:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 810603a:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 810603c:	683b      	ldr	r3, [r7, #0]
 810603e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8106040:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8106042:	68fa      	ldr	r2, [r7, #12]
 8106044:	4313      	orrs	r3, r2
 8106046:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8106048:	687b      	ldr	r3, [r7, #4]
 810604a:	681b      	ldr	r3, [r3, #0]
 810604c:	68fa      	ldr	r2, [r7, #12]
 810604e:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	2201      	movs	r2, #1
 8106054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8106058:	687b      	ldr	r3, [r7, #4]
 810605a:	2200      	movs	r2, #0
 810605c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8106060:	2300      	movs	r3, #0
}
 8106062:	4618      	mov	r0, r3
 8106064:	3714      	adds	r7, #20
 8106066:	46bd      	mov	sp, r7
 8106068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810606c:	4770      	bx	lr
	...

08106070 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8106070:	b580      	push	{r7, lr}
 8106072:	b08a      	sub	sp, #40	; 0x28
 8106074:	af00      	add	r7, sp, #0
 8106076:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	2b00      	cmp	r3, #0
 810607c:	d101      	bne.n	8106082 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 810607e:	2301      	movs	r3, #1
 8106080:	e290      	b.n	81065a4 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8106082:	f7fb f97d 	bl	8101380 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8106086:	687b      	ldr	r3, [r7, #4]
 8106088:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810608c:	2b01      	cmp	r3, #1
 810608e:	d113      	bne.n	81060b8 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	4a96      	ldr	r2, [pc, #600]	; (81062f0 <HAL_SAI_Init+0x280>)
 8106096:	4293      	cmp	r3, r2
 8106098:	d004      	beq.n	81060a4 <HAL_SAI_Init+0x34>
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	681b      	ldr	r3, [r3, #0]
 810609e:	4a95      	ldr	r2, [pc, #596]	; (81062f4 <HAL_SAI_Init+0x284>)
 81060a0:	4293      	cmp	r3, r2
 81060a2:	d107      	bne.n	81060b4 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81060a4:	687b      	ldr	r3, [r7, #4]
 81060a6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81060a8:	2b01      	cmp	r3, #1
 81060aa:	d103      	bne.n	81060b4 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 81060ac:	687b      	ldr	r3, [r7, #4]
 81060ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81060b0:	2b00      	cmp	r3, #0
 81060b2:	d001      	beq.n	81060b8 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 81060b4:	2301      	movs	r3, #1
 81060b6:	e275      	b.n	81065a4 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	681b      	ldr	r3, [r3, #0]
 81060bc:	4a8c      	ldr	r2, [pc, #560]	; (81062f0 <HAL_SAI_Init+0x280>)
 81060be:	4293      	cmp	r3, r2
 81060c0:	d004      	beq.n	81060cc <HAL_SAI_Init+0x5c>
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	681b      	ldr	r3, [r3, #0]
 81060c6:	4a8c      	ldr	r2, [pc, #560]	; (81062f8 <HAL_SAI_Init+0x288>)
 81060c8:	4293      	cmp	r3, r2
 81060ca:	d102      	bne.n	81060d2 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 81060cc:	4b8b      	ldr	r3, [pc, #556]	; (81062fc <HAL_SAI_Init+0x28c>)
 81060ce:	61bb      	str	r3, [r7, #24]
 81060d0:	e028      	b.n	8106124 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	681b      	ldr	r3, [r3, #0]
 81060d6:	4a8a      	ldr	r2, [pc, #552]	; (8106300 <HAL_SAI_Init+0x290>)
 81060d8:	4293      	cmp	r3, r2
 81060da:	d004      	beq.n	81060e6 <HAL_SAI_Init+0x76>
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	681b      	ldr	r3, [r3, #0]
 81060e0:	4a88      	ldr	r2, [pc, #544]	; (8106304 <HAL_SAI_Init+0x294>)
 81060e2:	4293      	cmp	r3, r2
 81060e4:	d102      	bne.n	81060ec <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 81060e6:	4b88      	ldr	r3, [pc, #544]	; (8106308 <HAL_SAI_Init+0x298>)
 81060e8:	61bb      	str	r3, [r7, #24]
 81060ea:	e01b      	b.n	8106124 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81060ec:	687b      	ldr	r3, [r7, #4]
 81060ee:	681b      	ldr	r3, [r3, #0]
 81060f0:	4a86      	ldr	r2, [pc, #536]	; (810630c <HAL_SAI_Init+0x29c>)
 81060f2:	4293      	cmp	r3, r2
 81060f4:	d004      	beq.n	8106100 <HAL_SAI_Init+0x90>
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	4a85      	ldr	r2, [pc, #532]	; (8106310 <HAL_SAI_Init+0x2a0>)
 81060fc:	4293      	cmp	r3, r2
 81060fe:	d102      	bne.n	8106106 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8106100:	4b84      	ldr	r3, [pc, #528]	; (8106314 <HAL_SAI_Init+0x2a4>)
 8106102:	61bb      	str	r3, [r7, #24]
 8106104:	e00e      	b.n	8106124 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	4a7a      	ldr	r2, [pc, #488]	; (81062f4 <HAL_SAI_Init+0x284>)
 810610c:	4293      	cmp	r3, r2
 810610e:	d004      	beq.n	810611a <HAL_SAI_Init+0xaa>
 8106110:	687b      	ldr	r3, [r7, #4]
 8106112:	681b      	ldr	r3, [r3, #0]
 8106114:	4a80      	ldr	r2, [pc, #512]	; (8106318 <HAL_SAI_Init+0x2a8>)
 8106116:	4293      	cmp	r3, r2
 8106118:	d102      	bne.n	8106120 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810611a:	4b80      	ldr	r3, [pc, #512]	; (810631c <HAL_SAI_Init+0x2ac>)
 810611c:	61bb      	str	r3, [r7, #24]
 810611e:	e001      	b.n	8106124 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8106120:	2301      	movs	r3, #1
 8106122:	e23f      	b.n	81065a4 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 810612a:	b2db      	uxtb	r3, r3
 810612c:	2b00      	cmp	r3, #0
 810612e:	d106      	bne.n	810613e <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	2200      	movs	r2, #0
 8106134:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8106138:	6878      	ldr	r0, [r7, #4]
 810613a:	f7fa ff91 	bl	8101060 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 810613e:	6878      	ldr	r0, [r7, #4]
 8106140:	f000 fa40 	bl	81065c4 <SAI_Disable>
 8106144:	4603      	mov	r3, r0
 8106146:	2b00      	cmp	r3, #0
 8106148:	d001      	beq.n	810614e <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 810614a:	2301      	movs	r3, #1
 810614c:	e22a      	b.n	81065a4 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	2202      	movs	r2, #2
 8106152:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	68db      	ldr	r3, [r3, #12]
 810615a:	2b02      	cmp	r3, #2
 810615c:	d00c      	beq.n	8106178 <HAL_SAI_Init+0x108>
 810615e:	2b02      	cmp	r3, #2
 8106160:	d80d      	bhi.n	810617e <HAL_SAI_Init+0x10e>
 8106162:	2b00      	cmp	r3, #0
 8106164:	d002      	beq.n	810616c <HAL_SAI_Init+0xfc>
 8106166:	2b01      	cmp	r3, #1
 8106168:	d003      	beq.n	8106172 <HAL_SAI_Init+0x102>
 810616a:	e008      	b.n	810617e <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 810616c:	2300      	movs	r3, #0
 810616e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106170:	e008      	b.n	8106184 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8106172:	2310      	movs	r3, #16
 8106174:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106176:	e005      	b.n	8106184 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8106178:	2320      	movs	r3, #32
 810617a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810617c:	e002      	b.n	8106184 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 810617e:	2300      	movs	r3, #0
 8106180:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106182:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8106184:	687b      	ldr	r3, [r7, #4]
 8106186:	689b      	ldr	r3, [r3, #8]
 8106188:	2b05      	cmp	r3, #5
 810618a:	d832      	bhi.n	81061f2 <HAL_SAI_Init+0x182>
 810618c:	a201      	add	r2, pc, #4	; (adr r2, 8106194 <HAL_SAI_Init+0x124>)
 810618e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106192:	bf00      	nop
 8106194:	081061ad 	.word	0x081061ad
 8106198:	081061b3 	.word	0x081061b3
 810619c:	081061bb 	.word	0x081061bb
 81061a0:	081061c3 	.word	0x081061c3
 81061a4:	081061d3 	.word	0x081061d3
 81061a8:	081061e3 	.word	0x081061e3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 81061ac:	2300      	movs	r3, #0
 81061ae:	61fb      	str	r3, [r7, #28]
      break;
 81061b0:	e022      	b.n	81061f8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 81061b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81061b6:	61fb      	str	r3, [r7, #28]
      break;
 81061b8:	e01e      	b.n	81061f8 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81061ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81061be:	61fb      	str	r3, [r7, #28]
      break;
 81061c0:	e01a      	b.n	81061f8 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81061c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81061c6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 81061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061ca:	f043 0301 	orr.w	r3, r3, #1
 81061ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81061d0:	e012      	b.n	81061f8 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81061d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81061d6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 81061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061da:	f043 0302 	orr.w	r3, r3, #2
 81061de:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81061e0:	e00a      	b.n	81061f8 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81061e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81061e6:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 81061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061ea:	f043 0303 	orr.w	r3, r3, #3
 81061ee:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81061f0:	e002      	b.n	81061f8 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 81061f2:	2300      	movs	r3, #0
 81061f4:	61fb      	str	r3, [r7, #28]
      break;
 81061f6:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 81061f8:	69bb      	ldr	r3, [r7, #24]
 81061fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81061fc:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 81061fe:	687b      	ldr	r3, [r7, #4]
 8106200:	6a1b      	ldr	r3, [r3, #32]
 8106202:	2b00      	cmp	r3, #0
 8106204:	f000 80c5 	beq.w	8106392 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 8106208:	2300      	movs	r3, #0
 810620a:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	681b      	ldr	r3, [r3, #0]
 8106210:	4a37      	ldr	r2, [pc, #220]	; (81062f0 <HAL_SAI_Init+0x280>)
 8106212:	4293      	cmp	r3, r2
 8106214:	d004      	beq.n	8106220 <HAL_SAI_Init+0x1b0>
 8106216:	687b      	ldr	r3, [r7, #4]
 8106218:	681b      	ldr	r3, [r3, #0]
 810621a:	4a37      	ldr	r2, [pc, #220]	; (81062f8 <HAL_SAI_Init+0x288>)
 810621c:	4293      	cmp	r3, r2
 810621e:	d106      	bne.n	810622e <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8106220:	f44f 7080 	mov.w	r0, #256	; 0x100
 8106224:	f04f 0100 	mov.w	r1, #0
 8106228:	f7fe fa36 	bl	8104698 <HAL_RCCEx_GetPeriphCLKFreq>
 810622c:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810622e:	687b      	ldr	r3, [r7, #4]
 8106230:	681b      	ldr	r3, [r3, #0]
 8106232:	4a33      	ldr	r2, [pc, #204]	; (8106300 <HAL_SAI_Init+0x290>)
 8106234:	4293      	cmp	r3, r2
 8106236:	d004      	beq.n	8106242 <HAL_SAI_Init+0x1d2>
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	681b      	ldr	r3, [r3, #0]
 810623c:	4a31      	ldr	r2, [pc, #196]	; (8106304 <HAL_SAI_Init+0x294>)
 810623e:	4293      	cmp	r3, r2
 8106240:	d106      	bne.n	8106250 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8106242:	f44f 7000 	mov.w	r0, #512	; 0x200
 8106246:	f04f 0100 	mov.w	r1, #0
 810624a:	f7fe fa25 	bl	8104698 <HAL_RCCEx_GetPeriphCLKFreq>
 810624e:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	4a2d      	ldr	r2, [pc, #180]	; (810630c <HAL_SAI_Init+0x29c>)
 8106256:	4293      	cmp	r3, r2
 8106258:	d004      	beq.n	8106264 <HAL_SAI_Init+0x1f4>
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	681b      	ldr	r3, [r3, #0]
 810625e:	4a2c      	ldr	r2, [pc, #176]	; (8106310 <HAL_SAI_Init+0x2a0>)
 8106260:	4293      	cmp	r3, r2
 8106262:	d106      	bne.n	8106272 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8106264:	f44f 7000 	mov.w	r0, #512	; 0x200
 8106268:	f04f 0100 	mov.w	r1, #0
 810626c:	f7fe fa14 	bl	8104698 <HAL_RCCEx_GetPeriphCLKFreq>
 8106270:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8106272:	687b      	ldr	r3, [r7, #4]
 8106274:	681b      	ldr	r3, [r3, #0]
 8106276:	4a1f      	ldr	r2, [pc, #124]	; (81062f4 <HAL_SAI_Init+0x284>)
 8106278:	4293      	cmp	r3, r2
 810627a:	d106      	bne.n	810628a <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 810627c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8106280:	f04f 0100 	mov.w	r1, #0
 8106284:	f7fe fa08 	bl	8104698 <HAL_RCCEx_GetPeriphCLKFreq>
 8106288:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	681b      	ldr	r3, [r3, #0]
 810628e:	4a22      	ldr	r2, [pc, #136]	; (8106318 <HAL_SAI_Init+0x2a8>)
 8106290:	4293      	cmp	r3, r2
 8106292:	d106      	bne.n	81062a2 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8106294:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8106298:	f04f 0100 	mov.w	r1, #0
 810629c:	f7fe f9fc 	bl	8104698 <HAL_RCCEx_GetPeriphCLKFreq>
 81062a0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 81062a2:	687b      	ldr	r3, [r7, #4]
 81062a4:	699b      	ldr	r3, [r3, #24]
 81062a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81062aa:	d139      	bne.n	8106320 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81062b0:	2b04      	cmp	r3, #4
 81062b2:	d102      	bne.n	81062ba <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 81062b4:	2340      	movs	r3, #64	; 0x40
 81062b6:	60fb      	str	r3, [r7, #12]
 81062b8:	e00a      	b.n	81062d0 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 81062ba:	687b      	ldr	r3, [r7, #4]
 81062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81062be:	2b08      	cmp	r3, #8
 81062c0:	d103      	bne.n	81062ca <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 81062c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81062c6:	60fb      	str	r3, [r7, #12]
 81062c8:	e002      	b.n	81062d0 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 81062ca:	687b      	ldr	r3, [r7, #4]
 81062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81062ce:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 81062d0:	697a      	ldr	r2, [r7, #20]
 81062d2:	4613      	mov	r3, r2
 81062d4:	009b      	lsls	r3, r3, #2
 81062d6:	4413      	add	r3, r2
 81062d8:	005b      	lsls	r3, r3, #1
 81062da:	4619      	mov	r1, r3
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	6a1b      	ldr	r3, [r3, #32]
 81062e0:	68fa      	ldr	r2, [r7, #12]
 81062e2:	fb02 f303 	mul.w	r3, r2, r3
 81062e6:	fbb1 f3f3 	udiv	r3, r1, r3
 81062ea:	613b      	str	r3, [r7, #16]
 81062ec:	e030      	b.n	8106350 <HAL_SAI_Init+0x2e0>
 81062ee:	bf00      	nop
 81062f0:	40015804 	.word	0x40015804
 81062f4:	58005404 	.word	0x58005404
 81062f8:	40015824 	.word	0x40015824
 81062fc:	40015800 	.word	0x40015800
 8106300:	40015c04 	.word	0x40015c04
 8106304:	40015c24 	.word	0x40015c24
 8106308:	40015c00 	.word	0x40015c00
 810630c:	40016004 	.word	0x40016004
 8106310:	40016024 	.word	0x40016024
 8106314:	40016000 	.word	0x40016000
 8106318:	58005424 	.word	0x58005424
 810631c:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106320:	687b      	ldr	r3, [r7, #4]
 8106322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8106328:	d101      	bne.n	810632e <HAL_SAI_Init+0x2be>
 810632a:	2302      	movs	r3, #2
 810632c:	e000      	b.n	8106330 <HAL_SAI_Init+0x2c0>
 810632e:	2301      	movs	r3, #1
 8106330:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8106332:	697a      	ldr	r2, [r7, #20]
 8106334:	4613      	mov	r3, r2
 8106336:	009b      	lsls	r3, r3, #2
 8106338:	4413      	add	r3, r2
 810633a:	005b      	lsls	r3, r3, #1
 810633c:	4619      	mov	r1, r3
 810633e:	687b      	ldr	r3, [r7, #4]
 8106340:	6a1b      	ldr	r3, [r3, #32]
 8106342:	68ba      	ldr	r2, [r7, #8]
 8106344:	fb02 f303 	mul.w	r3, r2, r3
 8106348:	021b      	lsls	r3, r3, #8
 810634a:	fbb1 f3f3 	udiv	r3, r1, r3
 810634e:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8106350:	693b      	ldr	r3, [r7, #16]
 8106352:	4a96      	ldr	r2, [pc, #600]	; (81065ac <HAL_SAI_Init+0x53c>)
 8106354:	fba2 2303 	umull	r2, r3, r2, r3
 8106358:	08da      	lsrs	r2, r3, #3
 810635a:	687b      	ldr	r3, [r7, #4]
 810635c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 810635e:	6939      	ldr	r1, [r7, #16]
 8106360:	4b92      	ldr	r3, [pc, #584]	; (81065ac <HAL_SAI_Init+0x53c>)
 8106362:	fba3 2301 	umull	r2, r3, r3, r1
 8106366:	08da      	lsrs	r2, r3, #3
 8106368:	4613      	mov	r3, r2
 810636a:	009b      	lsls	r3, r3, #2
 810636c:	4413      	add	r3, r2
 810636e:	005b      	lsls	r3, r3, #1
 8106370:	1aca      	subs	r2, r1, r3
 8106372:	2a08      	cmp	r2, #8
 8106374:	d904      	bls.n	8106380 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810637a:	1c5a      	adds	r2, r3, #1
 810637c:	687b      	ldr	r3, [r7, #4]
 810637e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106384:	2b04      	cmp	r3, #4
 8106386:	d104      	bne.n	8106392 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810638c:	085a      	lsrs	r2, r3, #1
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	685b      	ldr	r3, [r3, #4]
 8106396:	2b00      	cmp	r3, #0
 8106398:	d003      	beq.n	81063a2 <HAL_SAI_Init+0x332>
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	685b      	ldr	r3, [r3, #4]
 810639e:	2b02      	cmp	r3, #2
 81063a0:	d109      	bne.n	81063b6 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81063a6:	2b01      	cmp	r3, #1
 81063a8:	d101      	bne.n	81063ae <HAL_SAI_Init+0x33e>
 81063aa:	2300      	movs	r3, #0
 81063ac:	e001      	b.n	81063b2 <HAL_SAI_Init+0x342>
 81063ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 81063b2:	623b      	str	r3, [r7, #32]
 81063b4:	e008      	b.n	81063c8 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 81063b6:	687b      	ldr	r3, [r7, #4]
 81063b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81063ba:	2b01      	cmp	r3, #1
 81063bc:	d102      	bne.n	81063c4 <HAL_SAI_Init+0x354>
 81063be:	f44f 7300 	mov.w	r3, #512	; 0x200
 81063c2:	e000      	b.n	81063c6 <HAL_SAI_Init+0x356>
 81063c4:	2300      	movs	r3, #0
 81063c6:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81063c8:	f7fa ffda 	bl	8101380 <HAL_GetREVID>
 81063cc:	4603      	mov	r3, r0
 81063ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81063d2:	d331      	bcc.n	8106438 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81063d4:	687b      	ldr	r3, [r7, #4]
 81063d6:	681b      	ldr	r3, [r3, #0]
 81063d8:	6819      	ldr	r1, [r3, #0]
 81063da:	687b      	ldr	r3, [r7, #4]
 81063dc:	681a      	ldr	r2, [r3, #0]
 81063de:	4b74      	ldr	r3, [pc, #464]	; (81065b0 <HAL_SAI_Init+0x540>)
 81063e0:	400b      	ands	r3, r1
 81063e2:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	6819      	ldr	r1, [r3, #0]
 81063ea:	687b      	ldr	r3, [r7, #4]
 81063ec:	685a      	ldr	r2, [r3, #4]
 81063ee:	687b      	ldr	r3, [r7, #4]
 81063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81063f2:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81063f8:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81063fe:	431a      	orrs	r2, r3
 8106400:	6a3b      	ldr	r3, [r7, #32]
 8106402:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106404:	69fb      	ldr	r3, [r7, #28]
 8106406:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 810640c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810640e:	687b      	ldr	r3, [r7, #4]
 8106410:	695b      	ldr	r3, [r3, #20]
 8106412:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106418:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810641e:	051b      	lsls	r3, r3, #20
 8106420:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106422:	687b      	ldr	r3, [r7, #4]
 8106424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106426:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	691b      	ldr	r3, [r3, #16]
 810642c:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	681b      	ldr	r3, [r3, #0]
 8106432:	430a      	orrs	r2, r1
 8106434:	601a      	str	r2, [r3, #0]
 8106436:	e02d      	b.n	8106494 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	6819      	ldr	r1, [r3, #0]
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	681a      	ldr	r2, [r3, #0]
 8106442:	4b5c      	ldr	r3, [pc, #368]	; (81065b4 <HAL_SAI_Init+0x544>)
 8106444:	400b      	ands	r3, r1
 8106446:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	6819      	ldr	r1, [r3, #0]
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	685a      	ldr	r2, [r3, #4]
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106456:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106458:	687b      	ldr	r3, [r7, #4]
 810645a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810645c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810645e:	687b      	ldr	r3, [r7, #4]
 8106460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106462:	431a      	orrs	r2, r3
 8106464:	6a3b      	ldr	r3, [r7, #32]
 8106466:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106468:	69fb      	ldr	r3, [r7, #28]
 810646a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106470:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106472:	687b      	ldr	r3, [r7, #4]
 8106474:	695b      	ldr	r3, [r3, #20]
 8106476:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810647c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106482:	051b      	lsls	r3, r3, #20
 8106484:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810648a:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	681b      	ldr	r3, [r3, #0]
 8106490:	430a      	orrs	r2, r1
 8106492:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	685b      	ldr	r3, [r3, #4]
 810649a:	687a      	ldr	r2, [r7, #4]
 810649c:	6812      	ldr	r2, [r2, #0]
 810649e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81064a2:	f023 030f 	bic.w	r3, r3, #15
 81064a6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81064a8:	687b      	ldr	r3, [r7, #4]
 81064aa:	681b      	ldr	r3, [r3, #0]
 81064ac:	6859      	ldr	r1, [r3, #4]
 81064ae:	687b      	ldr	r3, [r7, #4]
 81064b0:	69da      	ldr	r2, [r3, #28]
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81064b6:	431a      	orrs	r2, r3
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81064bc:	431a      	orrs	r2, r3
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	430a      	orrs	r2, r1
 81064c4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	6899      	ldr	r1, [r3, #8]
 81064cc:	687b      	ldr	r3, [r7, #4]
 81064ce:	681a      	ldr	r2, [r3, #0]
 81064d0:	4b39      	ldr	r3, [pc, #228]	; (81065b8 <HAL_SAI_Init+0x548>)
 81064d2:	400b      	ands	r3, r1
 81064d4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81064d6:	687b      	ldr	r3, [r7, #4]
 81064d8:	681b      	ldr	r3, [r3, #0]
 81064da:	6899      	ldr	r1, [r3, #8]
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81064e0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 81064e2:	687b      	ldr	r3, [r7, #4]
 81064e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81064e6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 81064ec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 81064f2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 81064f4:	687b      	ldr	r3, [r7, #4]
 81064f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064f8:	3b01      	subs	r3, #1
 81064fa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 81064fc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81064fe:	687b      	ldr	r3, [r7, #4]
 8106500:	681b      	ldr	r3, [r3, #0]
 8106502:	430a      	orrs	r2, r1
 8106504:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8106506:	687b      	ldr	r3, [r7, #4]
 8106508:	681b      	ldr	r3, [r3, #0]
 810650a:	68d9      	ldr	r1, [r3, #12]
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681a      	ldr	r2, [r3, #0]
 8106510:	f24f 0320 	movw	r3, #61472	; 0xf020
 8106514:	400b      	ands	r3, r1
 8106516:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106518:	687b      	ldr	r3, [r7, #4]
 810651a:	681b      	ldr	r3, [r3, #0]
 810651c:	68d9      	ldr	r1, [r3, #12]
 810651e:	687b      	ldr	r3, [r7, #4]
 8106520:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8106522:	687b      	ldr	r3, [r7, #4]
 8106524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106526:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810652c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810652e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106534:	3b01      	subs	r3, #1
 8106536:	021b      	lsls	r3, r3, #8
 8106538:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	430a      	orrs	r2, r1
 8106540:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8106542:	687b      	ldr	r3, [r7, #4]
 8106544:	681b      	ldr	r3, [r3, #0]
 8106546:	4a1d      	ldr	r2, [pc, #116]	; (81065bc <HAL_SAI_Init+0x54c>)
 8106548:	4293      	cmp	r3, r2
 810654a:	d004      	beq.n	8106556 <HAL_SAI_Init+0x4e6>
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	4a1b      	ldr	r2, [pc, #108]	; (81065c0 <HAL_SAI_Init+0x550>)
 8106552:	4293      	cmp	r3, r2
 8106554:	d119      	bne.n	810658a <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8106556:	69bb      	ldr	r3, [r7, #24]
 8106558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810655a:	f023 0201 	bic.w	r2, r3, #1
 810655e:	69bb      	ldr	r3, [r7, #24]
 8106560:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8106562:	687b      	ldr	r3, [r7, #4]
 8106564:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8106568:	2b01      	cmp	r3, #1
 810656a:	d10e      	bne.n	810658a <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810656c:	687b      	ldr	r3, [r7, #4]
 810656e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106574:	3b01      	subs	r3, #1
 8106576:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106578:	431a      	orrs	r2, r3
 810657a:	69bb      	ldr	r3, [r7, #24]
 810657c:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 810657e:	69bb      	ldr	r3, [r7, #24]
 8106580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106582:	f043 0201 	orr.w	r2, r3, #1
 8106586:	69bb      	ldr	r3, [r7, #24]
 8106588:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	2200      	movs	r2, #0
 810658e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	2201      	movs	r2, #1
 8106596:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 810659a:	687b      	ldr	r3, [r7, #4]
 810659c:	2200      	movs	r2, #0
 810659e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 81065a2:	2300      	movs	r3, #0
}
 81065a4:	4618      	mov	r0, r3
 81065a6:	3728      	adds	r7, #40	; 0x28
 81065a8:	46bd      	mov	sp, r7
 81065aa:	bd80      	pop	{r7, pc}
 81065ac:	cccccccd 	.word	0xcccccccd
 81065b0:	f005c010 	.word	0xf005c010
 81065b4:	f805c010 	.word	0xf805c010
 81065b8:	fff88000 	.word	0xfff88000
 81065bc:	40015804 	.word	0x40015804
 81065c0:	58005404 	.word	0x58005404

081065c4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81065c4:	b480      	push	{r7}
 81065c6:	b085      	sub	sp, #20
 81065c8:	af00      	add	r7, sp, #0
 81065ca:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 81065cc:	4b18      	ldr	r3, [pc, #96]	; (8106630 <SAI_Disable+0x6c>)
 81065ce:	681b      	ldr	r3, [r3, #0]
 81065d0:	4a18      	ldr	r2, [pc, #96]	; (8106634 <SAI_Disable+0x70>)
 81065d2:	fba2 2303 	umull	r2, r3, r2, r3
 81065d6:	0b1b      	lsrs	r3, r3, #12
 81065d8:	009b      	lsls	r3, r3, #2
 81065da:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 81065dc:	2300      	movs	r3, #0
 81065de:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	681a      	ldr	r2, [r3, #0]
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 81065ee:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 81065f0:	68fb      	ldr	r3, [r7, #12]
 81065f2:	2b00      	cmp	r3, #0
 81065f4:	d10a      	bne.n	810660c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 81065f6:	687b      	ldr	r3, [r7, #4]
 81065f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81065fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8106606:	2303      	movs	r3, #3
 8106608:	72fb      	strb	r3, [r7, #11]
      break;
 810660a:	e009      	b.n	8106620 <SAI_Disable+0x5c>
    }
    count--;
 810660c:	68fb      	ldr	r3, [r7, #12]
 810660e:	3b01      	subs	r3, #1
 8106610:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106612:	687b      	ldr	r3, [r7, #4]
 8106614:	681b      	ldr	r3, [r3, #0]
 8106616:	681b      	ldr	r3, [r3, #0]
 8106618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810661c:	2b00      	cmp	r3, #0
 810661e:	d1e7      	bne.n	81065f0 <SAI_Disable+0x2c>

  return status;
 8106620:	7afb      	ldrb	r3, [r7, #11]
}
 8106622:	4618      	mov	r0, r3
 8106624:	3714      	adds	r7, #20
 8106626:	46bd      	mov	sp, r7
 8106628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810662c:	4770      	bx	lr
 810662e:	bf00      	nop
 8106630:	10000000 	.word	0x10000000
 8106634:	95cbec1b 	.word	0x95cbec1b

08106638 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8106638:	b580      	push	{r7, lr}
 810663a:	b084      	sub	sp, #16
 810663c:	af00      	add	r7, sp, #0
 810663e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8106640:	687b      	ldr	r3, [r7, #4]
 8106642:	2b00      	cmp	r3, #0
 8106644:	d101      	bne.n	810664a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8106646:	2301      	movs	r3, #1
 8106648:	e05e      	b.n	8106708 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 810664a:	687b      	ldr	r3, [r7, #4]
 810664c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8106650:	b2db      	uxtb	r3, r3
 8106652:	2b00      	cmp	r3, #0
 8106654:	d106      	bne.n	8106664 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	2200      	movs	r2, #0
 810665a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 810665e:	6878      	ldr	r0, [r7, #4]
 8106660:	f7fa fbe0 	bl	8100e24 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8106664:	687b      	ldr	r3, [r7, #4]
 8106666:	2202      	movs	r2, #2
 8106668:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 810666c:	687b      	ldr	r3, [r7, #4]
 810666e:	681b      	ldr	r3, [r3, #0]
 8106670:	681a      	ldr	r2, [r3, #0]
 8106672:	687b      	ldr	r3, [r7, #4]
 8106674:	681b      	ldr	r3, [r3, #0]
 8106676:	f022 0203 	bic.w	r2, r2, #3
 810667a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	681b      	ldr	r3, [r3, #0]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8106684:	68fa      	ldr	r2, [r7, #12]
 8106686:	4b22      	ldr	r3, [pc, #136]	; (8106710 <HAL_SPDIFRX_Init+0xd8>)
 8106688:	4013      	ands	r3, r2
 810668a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 810668c:	687b      	ldr	r3, [r7, #4]
 810668e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8106690:	687b      	ldr	r3, [r7, #4]
 8106692:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8106694:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 810669a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 810669c:	687b      	ldr	r3, [r7, #4]
 810669e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 81066a0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 81066a2:	687b      	ldr	r3, [r7, #4]
 81066a4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 81066a6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 81066ac:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 81066ae:	687b      	ldr	r3, [r7, #4]
 81066b0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 81066b2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 81066b8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 81066ba:	687b      	ldr	r3, [r7, #4]
 81066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 81066be:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 81066c4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 81066c6:	68fa      	ldr	r2, [r7, #12]
 81066c8:	4313      	orrs	r3, r2
 81066ca:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 81066d2:	2b01      	cmp	r3, #1
 81066d4:	d103      	bne.n	81066de <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 81066d6:	68fb      	ldr	r3, [r7, #12]
 81066d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81066dc:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 81066e4:	2b01      	cmp	r3, #1
 81066e6:	d103      	bne.n	81066f0 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 81066e8:	68fb      	ldr	r3, [r7, #12]
 81066ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81066ee:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	681b      	ldr	r3, [r3, #0]
 81066f4:	68fa      	ldr	r2, [r7, #12]
 81066f6:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 81066f8:	687b      	ldr	r3, [r7, #4]
 81066fa:	2200      	movs	r2, #0
 81066fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	2201      	movs	r2, #1
 8106702:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8106706:	2300      	movs	r3, #0
}
 8106708:	4618      	mov	r0, r3
 810670a:	3710      	adds	r7, #16
 810670c:	46bd      	mov	sp, r7
 810670e:	bd80      	pop	{r7, pc}
 8106710:	ffc88407 	.word	0xffc88407

08106714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106714:	b580      	push	{r7, lr}
 8106716:	b082      	sub	sp, #8
 8106718:	af00      	add	r7, sp, #0
 810671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	2b00      	cmp	r3, #0
 8106720:	d101      	bne.n	8106726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106722:	2301      	movs	r3, #1
 8106724:	e049      	b.n	81067ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810672c:	b2db      	uxtb	r3, r3
 810672e:	2b00      	cmp	r3, #0
 8106730:	d106      	bne.n	8106740 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106732:	687b      	ldr	r3, [r7, #4]
 8106734:	2200      	movs	r2, #0
 8106736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810673a:	6878      	ldr	r0, [r7, #4]
 810673c:	f7fa fc0c 	bl	8100f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106740:	687b      	ldr	r3, [r7, #4]
 8106742:	2202      	movs	r2, #2
 8106744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106748:	687b      	ldr	r3, [r7, #4]
 810674a:	681a      	ldr	r2, [r3, #0]
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	3304      	adds	r3, #4
 8106750:	4619      	mov	r1, r3
 8106752:	4610      	mov	r0, r2
 8106754:	f000 fa04 	bl	8106b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	2201      	movs	r2, #1
 810675c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	2201      	movs	r2, #1
 8106764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	2201      	movs	r2, #1
 810676c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	2201      	movs	r2, #1
 8106774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106778:	687b      	ldr	r3, [r7, #4]
 810677a:	2201      	movs	r2, #1
 810677c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	2201      	movs	r2, #1
 8106784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106788:	687b      	ldr	r3, [r7, #4]
 810678a:	2201      	movs	r2, #1
 810678c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106790:	687b      	ldr	r3, [r7, #4]
 8106792:	2201      	movs	r2, #1
 8106794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106798:	687b      	ldr	r3, [r7, #4]
 810679a:	2201      	movs	r2, #1
 810679c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81067a0:	687b      	ldr	r3, [r7, #4]
 81067a2:	2201      	movs	r2, #1
 81067a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81067a8:	687b      	ldr	r3, [r7, #4]
 81067aa:	2201      	movs	r2, #1
 81067ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	2201      	movs	r2, #1
 81067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81067b8:	2300      	movs	r3, #0
}
 81067ba:	4618      	mov	r0, r3
 81067bc:	3708      	adds	r7, #8
 81067be:	46bd      	mov	sp, r7
 81067c0:	bd80      	pop	{r7, pc}

081067c2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 81067c2:	b580      	push	{r7, lr}
 81067c4:	b082      	sub	sp, #8
 81067c6:	af00      	add	r7, sp, #0
 81067c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81067ca:	687b      	ldr	r3, [r7, #4]
 81067cc:	2b00      	cmp	r3, #0
 81067ce:	d101      	bne.n	81067d4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 81067d0:	2301      	movs	r3, #1
 81067d2:	e049      	b.n	8106868 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81067da:	b2db      	uxtb	r3, r3
 81067dc:	2b00      	cmp	r3, #0
 81067de:	d106      	bne.n	81067ee <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81067e0:	687b      	ldr	r3, [r7, #4]
 81067e2:	2200      	movs	r2, #0
 81067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 81067e8:	6878      	ldr	r0, [r7, #4]
 81067ea:	f7fa fb93 	bl	8100f14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81067ee:	687b      	ldr	r3, [r7, #4]
 81067f0:	2202      	movs	r2, #2
 81067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	681a      	ldr	r2, [r3, #0]
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	3304      	adds	r3, #4
 81067fe:	4619      	mov	r1, r3
 8106800:	4610      	mov	r0, r2
 8106802:	f000 f9ad 	bl	8106b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	2201      	movs	r2, #1
 810680a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	2201      	movs	r2, #1
 8106812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	2201      	movs	r2, #1
 810681a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	2201      	movs	r2, #1
 8106822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	2201      	movs	r2, #1
 810682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	2201      	movs	r2, #1
 8106832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	2201      	movs	r2, #1
 810683a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	2201      	movs	r2, #1
 8106842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	2201      	movs	r2, #1
 810684a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810684e:	687b      	ldr	r3, [r7, #4]
 8106850:	2201      	movs	r2, #1
 8106852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106856:	687b      	ldr	r3, [r7, #4]
 8106858:	2201      	movs	r2, #1
 810685a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810685e:	687b      	ldr	r3, [r7, #4]
 8106860:	2201      	movs	r2, #1
 8106862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106866:	2300      	movs	r3, #0
}
 8106868:	4618      	mov	r0, r3
 810686a:	3708      	adds	r7, #8
 810686c:	46bd      	mov	sp, r7
 810686e:	bd80      	pop	{r7, pc}

08106870 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8106870:	b580      	push	{r7, lr}
 8106872:	b082      	sub	sp, #8
 8106874:	af00      	add	r7, sp, #0
 8106876:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	2b00      	cmp	r3, #0
 810687c:	d101      	bne.n	8106882 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810687e:	2301      	movs	r3, #1
 8106880:	e049      	b.n	8106916 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106888:	b2db      	uxtb	r3, r3
 810688a:	2b00      	cmp	r3, #0
 810688c:	d106      	bne.n	810689c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810688e:	687b      	ldr	r3, [r7, #4]
 8106890:	2200      	movs	r2, #0
 8106892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8106896:	6878      	ldr	r0, [r7, #4]
 8106898:	f000 f841 	bl	810691e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	2202      	movs	r2, #2
 81068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	681a      	ldr	r2, [r3, #0]
 81068a8:	687b      	ldr	r3, [r7, #4]
 81068aa:	3304      	adds	r3, #4
 81068ac:	4619      	mov	r1, r3
 81068ae:	4610      	mov	r0, r2
 81068b0:	f000 f956 	bl	8106b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	2201      	movs	r2, #1
 81068b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81068bc:	687b      	ldr	r3, [r7, #4]
 81068be:	2201      	movs	r2, #1
 81068c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	2201      	movs	r2, #1
 81068c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	2201      	movs	r2, #1
 81068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81068d4:	687b      	ldr	r3, [r7, #4]
 81068d6:	2201      	movs	r2, #1
 81068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	2201      	movs	r2, #1
 81068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81068e4:	687b      	ldr	r3, [r7, #4]
 81068e6:	2201      	movs	r2, #1
 81068e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81068ec:	687b      	ldr	r3, [r7, #4]
 81068ee:	2201      	movs	r2, #1
 81068f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81068f4:	687b      	ldr	r3, [r7, #4]
 81068f6:	2201      	movs	r2, #1
 81068f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81068fc:	687b      	ldr	r3, [r7, #4]
 81068fe:	2201      	movs	r2, #1
 8106900:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106904:	687b      	ldr	r3, [r7, #4]
 8106906:	2201      	movs	r2, #1
 8106908:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	2201      	movs	r2, #1
 8106910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106914:	2300      	movs	r3, #0
}
 8106916:	4618      	mov	r0, r3
 8106918:	3708      	adds	r7, #8
 810691a:	46bd      	mov	sp, r7
 810691c:	bd80      	pop	{r7, pc}

0810691e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810691e:	b480      	push	{r7}
 8106920:	b083      	sub	sp, #12
 8106922:	af00      	add	r7, sp, #0
 8106924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8106926:	bf00      	nop
 8106928:	370c      	adds	r7, #12
 810692a:	46bd      	mov	sp, r7
 810692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106930:	4770      	bx	lr
	...

08106934 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8106934:	b580      	push	{r7, lr}
 8106936:	b086      	sub	sp, #24
 8106938:	af00      	add	r7, sp, #0
 810693a:	60f8      	str	r0, [r7, #12]
 810693c:	60b9      	str	r1, [r7, #8]
 810693e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106940:	2300      	movs	r3, #0
 8106942:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106944:	68fb      	ldr	r3, [r7, #12]
 8106946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810694a:	2b01      	cmp	r3, #1
 810694c:	d101      	bne.n	8106952 <HAL_TIM_OC_ConfigChannel+0x1e>
 810694e:	2302      	movs	r3, #2
 8106950:	e066      	b.n	8106a20 <HAL_TIM_OC_ConfigChannel+0xec>
 8106952:	68fb      	ldr	r3, [r7, #12]
 8106954:	2201      	movs	r2, #1
 8106956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	2b14      	cmp	r3, #20
 810695e:	d857      	bhi.n	8106a10 <HAL_TIM_OC_ConfigChannel+0xdc>
 8106960:	a201      	add	r2, pc, #4	; (adr r2, 8106968 <HAL_TIM_OC_ConfigChannel+0x34>)
 8106962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106966:	bf00      	nop
 8106968:	081069bd 	.word	0x081069bd
 810696c:	08106a11 	.word	0x08106a11
 8106970:	08106a11 	.word	0x08106a11
 8106974:	08106a11 	.word	0x08106a11
 8106978:	081069cb 	.word	0x081069cb
 810697c:	08106a11 	.word	0x08106a11
 8106980:	08106a11 	.word	0x08106a11
 8106984:	08106a11 	.word	0x08106a11
 8106988:	081069d9 	.word	0x081069d9
 810698c:	08106a11 	.word	0x08106a11
 8106990:	08106a11 	.word	0x08106a11
 8106994:	08106a11 	.word	0x08106a11
 8106998:	081069e7 	.word	0x081069e7
 810699c:	08106a11 	.word	0x08106a11
 81069a0:	08106a11 	.word	0x08106a11
 81069a4:	08106a11 	.word	0x08106a11
 81069a8:	081069f5 	.word	0x081069f5
 81069ac:	08106a11 	.word	0x08106a11
 81069b0:	08106a11 	.word	0x08106a11
 81069b4:	08106a11 	.word	0x08106a11
 81069b8:	08106a03 	.word	0x08106a03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81069bc:	68fb      	ldr	r3, [r7, #12]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	68b9      	ldr	r1, [r7, #8]
 81069c2:	4618      	mov	r0, r3
 81069c4:	f000 f966 	bl	8106c94 <TIM_OC1_SetConfig>
      break;
 81069c8:	e025      	b.n	8106a16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81069ca:	68fb      	ldr	r3, [r7, #12]
 81069cc:	681b      	ldr	r3, [r3, #0]
 81069ce:	68b9      	ldr	r1, [r7, #8]
 81069d0:	4618      	mov	r0, r3
 81069d2:	f000 f9ef 	bl	8106db4 <TIM_OC2_SetConfig>
      break;
 81069d6:	e01e      	b.n	8106a16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81069d8:	68fb      	ldr	r3, [r7, #12]
 81069da:	681b      	ldr	r3, [r3, #0]
 81069dc:	68b9      	ldr	r1, [r7, #8]
 81069de:	4618      	mov	r0, r3
 81069e0:	f000 fa72 	bl	8106ec8 <TIM_OC3_SetConfig>
      break;
 81069e4:	e017      	b.n	8106a16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81069e6:	68fb      	ldr	r3, [r7, #12]
 81069e8:	681b      	ldr	r3, [r3, #0]
 81069ea:	68b9      	ldr	r1, [r7, #8]
 81069ec:	4618      	mov	r0, r3
 81069ee:	f000 faf3 	bl	8106fd8 <TIM_OC4_SetConfig>
      break;
 81069f2:	e010      	b.n	8106a16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81069f4:	68fb      	ldr	r3, [r7, #12]
 81069f6:	681b      	ldr	r3, [r3, #0]
 81069f8:	68b9      	ldr	r1, [r7, #8]
 81069fa:	4618      	mov	r0, r3
 81069fc:	f000 fb56 	bl	81070ac <TIM_OC5_SetConfig>
      break;
 8106a00:	e009      	b.n	8106a16 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106a02:	68fb      	ldr	r3, [r7, #12]
 8106a04:	681b      	ldr	r3, [r3, #0]
 8106a06:	68b9      	ldr	r1, [r7, #8]
 8106a08:	4618      	mov	r0, r3
 8106a0a:	f000 fbb3 	bl	8107174 <TIM_OC6_SetConfig>
      break;
 8106a0e:	e002      	b.n	8106a16 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8106a10:	2301      	movs	r3, #1
 8106a12:	75fb      	strb	r3, [r7, #23]
      break;
 8106a14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106a16:	68fb      	ldr	r3, [r7, #12]
 8106a18:	2200      	movs	r2, #0
 8106a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106a1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8106a20:	4618      	mov	r0, r3
 8106a22:	3718      	adds	r7, #24
 8106a24:	46bd      	mov	sp, r7
 8106a26:	bd80      	pop	{r7, pc}

08106a28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8106a28:	b580      	push	{r7, lr}
 8106a2a:	b086      	sub	sp, #24
 8106a2c:	af00      	add	r7, sp, #0
 8106a2e:	60f8      	str	r0, [r7, #12]
 8106a30:	60b9      	str	r1, [r7, #8]
 8106a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106a34:	2300      	movs	r3, #0
 8106a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106a38:	68fb      	ldr	r3, [r7, #12]
 8106a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106a3e:	2b01      	cmp	r3, #1
 8106a40:	d101      	bne.n	8106a46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8106a42:	2302      	movs	r3, #2
 8106a44:	e088      	b.n	8106b58 <HAL_TIM_IC_ConfigChannel+0x130>
 8106a46:	68fb      	ldr	r3, [r7, #12]
 8106a48:	2201      	movs	r2, #1
 8106a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	2b00      	cmp	r3, #0
 8106a52:	d11b      	bne.n	8106a8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8106a54:	68fb      	ldr	r3, [r7, #12]
 8106a56:	6818      	ldr	r0, [r3, #0]
 8106a58:	68bb      	ldr	r3, [r7, #8]
 8106a5a:	6819      	ldr	r1, [r3, #0]
 8106a5c:	68bb      	ldr	r3, [r7, #8]
 8106a5e:	685a      	ldr	r2, [r3, #4]
 8106a60:	68bb      	ldr	r3, [r7, #8]
 8106a62:	68db      	ldr	r3, [r3, #12]
 8106a64:	f000 fbec 	bl	8107240 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8106a68:	68fb      	ldr	r3, [r7, #12]
 8106a6a:	681b      	ldr	r3, [r3, #0]
 8106a6c:	699a      	ldr	r2, [r3, #24]
 8106a6e:	68fb      	ldr	r3, [r7, #12]
 8106a70:	681b      	ldr	r3, [r3, #0]
 8106a72:	f022 020c 	bic.w	r2, r2, #12
 8106a76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8106a78:	68fb      	ldr	r3, [r7, #12]
 8106a7a:	681b      	ldr	r3, [r3, #0]
 8106a7c:	6999      	ldr	r1, [r3, #24]
 8106a7e:	68bb      	ldr	r3, [r7, #8]
 8106a80:	689a      	ldr	r2, [r3, #8]
 8106a82:	68fb      	ldr	r3, [r7, #12]
 8106a84:	681b      	ldr	r3, [r3, #0]
 8106a86:	430a      	orrs	r2, r1
 8106a88:	619a      	str	r2, [r3, #24]
 8106a8a:	e060      	b.n	8106b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8106a8c:	687b      	ldr	r3, [r7, #4]
 8106a8e:	2b04      	cmp	r3, #4
 8106a90:	d11c      	bne.n	8106acc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8106a92:	68fb      	ldr	r3, [r7, #12]
 8106a94:	6818      	ldr	r0, [r3, #0]
 8106a96:	68bb      	ldr	r3, [r7, #8]
 8106a98:	6819      	ldr	r1, [r3, #0]
 8106a9a:	68bb      	ldr	r3, [r7, #8]
 8106a9c:	685a      	ldr	r2, [r3, #4]
 8106a9e:	68bb      	ldr	r3, [r7, #8]
 8106aa0:	68db      	ldr	r3, [r3, #12]
 8106aa2:	f000 fc41 	bl	8107328 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8106aa6:	68fb      	ldr	r3, [r7, #12]
 8106aa8:	681b      	ldr	r3, [r3, #0]
 8106aaa:	699a      	ldr	r2, [r3, #24]
 8106aac:	68fb      	ldr	r3, [r7, #12]
 8106aae:	681b      	ldr	r3, [r3, #0]
 8106ab0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106ab4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8106ab6:	68fb      	ldr	r3, [r7, #12]
 8106ab8:	681b      	ldr	r3, [r3, #0]
 8106aba:	6999      	ldr	r1, [r3, #24]
 8106abc:	68bb      	ldr	r3, [r7, #8]
 8106abe:	689b      	ldr	r3, [r3, #8]
 8106ac0:	021a      	lsls	r2, r3, #8
 8106ac2:	68fb      	ldr	r3, [r7, #12]
 8106ac4:	681b      	ldr	r3, [r3, #0]
 8106ac6:	430a      	orrs	r2, r1
 8106ac8:	619a      	str	r2, [r3, #24]
 8106aca:	e040      	b.n	8106b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	2b08      	cmp	r3, #8
 8106ad0:	d11b      	bne.n	8106b0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8106ad2:	68fb      	ldr	r3, [r7, #12]
 8106ad4:	6818      	ldr	r0, [r3, #0]
 8106ad6:	68bb      	ldr	r3, [r7, #8]
 8106ad8:	6819      	ldr	r1, [r3, #0]
 8106ada:	68bb      	ldr	r3, [r7, #8]
 8106adc:	685a      	ldr	r2, [r3, #4]
 8106ade:	68bb      	ldr	r3, [r7, #8]
 8106ae0:	68db      	ldr	r3, [r3, #12]
 8106ae2:	f000 fc5e 	bl	81073a2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8106ae6:	68fb      	ldr	r3, [r7, #12]
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	69da      	ldr	r2, [r3, #28]
 8106aec:	68fb      	ldr	r3, [r7, #12]
 8106aee:	681b      	ldr	r3, [r3, #0]
 8106af0:	f022 020c 	bic.w	r2, r2, #12
 8106af4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8106af6:	68fb      	ldr	r3, [r7, #12]
 8106af8:	681b      	ldr	r3, [r3, #0]
 8106afa:	69d9      	ldr	r1, [r3, #28]
 8106afc:	68bb      	ldr	r3, [r7, #8]
 8106afe:	689a      	ldr	r2, [r3, #8]
 8106b00:	68fb      	ldr	r3, [r7, #12]
 8106b02:	681b      	ldr	r3, [r3, #0]
 8106b04:	430a      	orrs	r2, r1
 8106b06:	61da      	str	r2, [r3, #28]
 8106b08:	e021      	b.n	8106b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8106b0a:	687b      	ldr	r3, [r7, #4]
 8106b0c:	2b0c      	cmp	r3, #12
 8106b0e:	d11c      	bne.n	8106b4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8106b10:	68fb      	ldr	r3, [r7, #12]
 8106b12:	6818      	ldr	r0, [r3, #0]
 8106b14:	68bb      	ldr	r3, [r7, #8]
 8106b16:	6819      	ldr	r1, [r3, #0]
 8106b18:	68bb      	ldr	r3, [r7, #8]
 8106b1a:	685a      	ldr	r2, [r3, #4]
 8106b1c:	68bb      	ldr	r3, [r7, #8]
 8106b1e:	68db      	ldr	r3, [r3, #12]
 8106b20:	f000 fc7b 	bl	810741a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8106b24:	68fb      	ldr	r3, [r7, #12]
 8106b26:	681b      	ldr	r3, [r3, #0]
 8106b28:	69da      	ldr	r2, [r3, #28]
 8106b2a:	68fb      	ldr	r3, [r7, #12]
 8106b2c:	681b      	ldr	r3, [r3, #0]
 8106b2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106b32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8106b34:	68fb      	ldr	r3, [r7, #12]
 8106b36:	681b      	ldr	r3, [r3, #0]
 8106b38:	69d9      	ldr	r1, [r3, #28]
 8106b3a:	68bb      	ldr	r3, [r7, #8]
 8106b3c:	689b      	ldr	r3, [r3, #8]
 8106b3e:	021a      	lsls	r2, r3, #8
 8106b40:	68fb      	ldr	r3, [r7, #12]
 8106b42:	681b      	ldr	r3, [r3, #0]
 8106b44:	430a      	orrs	r2, r1
 8106b46:	61da      	str	r2, [r3, #28]
 8106b48:	e001      	b.n	8106b4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8106b4a:	2301      	movs	r3, #1
 8106b4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8106b4e:	68fb      	ldr	r3, [r7, #12]
 8106b50:	2200      	movs	r2, #0
 8106b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8106b58:	4618      	mov	r0, r3
 8106b5a:	3718      	adds	r7, #24
 8106b5c:	46bd      	mov	sp, r7
 8106b5e:	bd80      	pop	{r7, pc}

08106b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106b60:	b480      	push	{r7}
 8106b62:	b085      	sub	sp, #20
 8106b64:	af00      	add	r7, sp, #0
 8106b66:	6078      	str	r0, [r7, #4]
 8106b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	681b      	ldr	r3, [r3, #0]
 8106b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	4a40      	ldr	r2, [pc, #256]	; (8106c74 <TIM_Base_SetConfig+0x114>)
 8106b74:	4293      	cmp	r3, r2
 8106b76:	d013      	beq.n	8106ba0 <TIM_Base_SetConfig+0x40>
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106b7e:	d00f      	beq.n	8106ba0 <TIM_Base_SetConfig+0x40>
 8106b80:	687b      	ldr	r3, [r7, #4]
 8106b82:	4a3d      	ldr	r2, [pc, #244]	; (8106c78 <TIM_Base_SetConfig+0x118>)
 8106b84:	4293      	cmp	r3, r2
 8106b86:	d00b      	beq.n	8106ba0 <TIM_Base_SetConfig+0x40>
 8106b88:	687b      	ldr	r3, [r7, #4]
 8106b8a:	4a3c      	ldr	r2, [pc, #240]	; (8106c7c <TIM_Base_SetConfig+0x11c>)
 8106b8c:	4293      	cmp	r3, r2
 8106b8e:	d007      	beq.n	8106ba0 <TIM_Base_SetConfig+0x40>
 8106b90:	687b      	ldr	r3, [r7, #4]
 8106b92:	4a3b      	ldr	r2, [pc, #236]	; (8106c80 <TIM_Base_SetConfig+0x120>)
 8106b94:	4293      	cmp	r3, r2
 8106b96:	d003      	beq.n	8106ba0 <TIM_Base_SetConfig+0x40>
 8106b98:	687b      	ldr	r3, [r7, #4]
 8106b9a:	4a3a      	ldr	r2, [pc, #232]	; (8106c84 <TIM_Base_SetConfig+0x124>)
 8106b9c:	4293      	cmp	r3, r2
 8106b9e:	d108      	bne.n	8106bb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106ba0:	68fb      	ldr	r3, [r7, #12]
 8106ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106ba6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106ba8:	683b      	ldr	r3, [r7, #0]
 8106baa:	685b      	ldr	r3, [r3, #4]
 8106bac:	68fa      	ldr	r2, [r7, #12]
 8106bae:	4313      	orrs	r3, r2
 8106bb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106bb2:	687b      	ldr	r3, [r7, #4]
 8106bb4:	4a2f      	ldr	r2, [pc, #188]	; (8106c74 <TIM_Base_SetConfig+0x114>)
 8106bb6:	4293      	cmp	r3, r2
 8106bb8:	d01f      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106bba:	687b      	ldr	r3, [r7, #4]
 8106bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106bc0:	d01b      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106bc2:	687b      	ldr	r3, [r7, #4]
 8106bc4:	4a2c      	ldr	r2, [pc, #176]	; (8106c78 <TIM_Base_SetConfig+0x118>)
 8106bc6:	4293      	cmp	r3, r2
 8106bc8:	d017      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	4a2b      	ldr	r2, [pc, #172]	; (8106c7c <TIM_Base_SetConfig+0x11c>)
 8106bce:	4293      	cmp	r3, r2
 8106bd0:	d013      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106bd2:	687b      	ldr	r3, [r7, #4]
 8106bd4:	4a2a      	ldr	r2, [pc, #168]	; (8106c80 <TIM_Base_SetConfig+0x120>)
 8106bd6:	4293      	cmp	r3, r2
 8106bd8:	d00f      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	4a29      	ldr	r2, [pc, #164]	; (8106c84 <TIM_Base_SetConfig+0x124>)
 8106bde:	4293      	cmp	r3, r2
 8106be0:	d00b      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	4a28      	ldr	r2, [pc, #160]	; (8106c88 <TIM_Base_SetConfig+0x128>)
 8106be6:	4293      	cmp	r3, r2
 8106be8:	d007      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	4a27      	ldr	r2, [pc, #156]	; (8106c8c <TIM_Base_SetConfig+0x12c>)
 8106bee:	4293      	cmp	r3, r2
 8106bf0:	d003      	beq.n	8106bfa <TIM_Base_SetConfig+0x9a>
 8106bf2:	687b      	ldr	r3, [r7, #4]
 8106bf4:	4a26      	ldr	r2, [pc, #152]	; (8106c90 <TIM_Base_SetConfig+0x130>)
 8106bf6:	4293      	cmp	r3, r2
 8106bf8:	d108      	bne.n	8106c0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106bfa:	68fb      	ldr	r3, [r7, #12]
 8106bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106c02:	683b      	ldr	r3, [r7, #0]
 8106c04:	68db      	ldr	r3, [r3, #12]
 8106c06:	68fa      	ldr	r2, [r7, #12]
 8106c08:	4313      	orrs	r3, r2
 8106c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c0c:	68fb      	ldr	r3, [r7, #12]
 8106c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8106c12:	683b      	ldr	r3, [r7, #0]
 8106c14:	695b      	ldr	r3, [r3, #20]
 8106c16:	4313      	orrs	r3, r2
 8106c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	68fa      	ldr	r2, [r7, #12]
 8106c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c20:	683b      	ldr	r3, [r7, #0]
 8106c22:	689a      	ldr	r2, [r3, #8]
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106c28:	683b      	ldr	r3, [r7, #0]
 8106c2a:	681a      	ldr	r2, [r3, #0]
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106c30:	687b      	ldr	r3, [r7, #4]
 8106c32:	4a10      	ldr	r2, [pc, #64]	; (8106c74 <TIM_Base_SetConfig+0x114>)
 8106c34:	4293      	cmp	r3, r2
 8106c36:	d00f      	beq.n	8106c58 <TIM_Base_SetConfig+0xf8>
 8106c38:	687b      	ldr	r3, [r7, #4]
 8106c3a:	4a12      	ldr	r2, [pc, #72]	; (8106c84 <TIM_Base_SetConfig+0x124>)
 8106c3c:	4293      	cmp	r3, r2
 8106c3e:	d00b      	beq.n	8106c58 <TIM_Base_SetConfig+0xf8>
 8106c40:	687b      	ldr	r3, [r7, #4]
 8106c42:	4a11      	ldr	r2, [pc, #68]	; (8106c88 <TIM_Base_SetConfig+0x128>)
 8106c44:	4293      	cmp	r3, r2
 8106c46:	d007      	beq.n	8106c58 <TIM_Base_SetConfig+0xf8>
 8106c48:	687b      	ldr	r3, [r7, #4]
 8106c4a:	4a10      	ldr	r2, [pc, #64]	; (8106c8c <TIM_Base_SetConfig+0x12c>)
 8106c4c:	4293      	cmp	r3, r2
 8106c4e:	d003      	beq.n	8106c58 <TIM_Base_SetConfig+0xf8>
 8106c50:	687b      	ldr	r3, [r7, #4]
 8106c52:	4a0f      	ldr	r2, [pc, #60]	; (8106c90 <TIM_Base_SetConfig+0x130>)
 8106c54:	4293      	cmp	r3, r2
 8106c56:	d103      	bne.n	8106c60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106c58:	683b      	ldr	r3, [r7, #0]
 8106c5a:	691a      	ldr	r2, [r3, #16]
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	2201      	movs	r2, #1
 8106c64:	615a      	str	r2, [r3, #20]
}
 8106c66:	bf00      	nop
 8106c68:	3714      	adds	r7, #20
 8106c6a:	46bd      	mov	sp, r7
 8106c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106c70:	4770      	bx	lr
 8106c72:	bf00      	nop
 8106c74:	40010000 	.word	0x40010000
 8106c78:	40000400 	.word	0x40000400
 8106c7c:	40000800 	.word	0x40000800
 8106c80:	40000c00 	.word	0x40000c00
 8106c84:	40010400 	.word	0x40010400
 8106c88:	40014000 	.word	0x40014000
 8106c8c:	40014400 	.word	0x40014400
 8106c90:	40014800 	.word	0x40014800

08106c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106c94:	b480      	push	{r7}
 8106c96:	b087      	sub	sp, #28
 8106c98:	af00      	add	r7, sp, #0
 8106c9a:	6078      	str	r0, [r7, #4]
 8106c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	6a1b      	ldr	r3, [r3, #32]
 8106ca2:	f023 0201 	bic.w	r2, r3, #1
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106caa:	687b      	ldr	r3, [r7, #4]
 8106cac:	6a1b      	ldr	r3, [r3, #32]
 8106cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106cb0:	687b      	ldr	r3, [r7, #4]
 8106cb2:	685b      	ldr	r3, [r3, #4]
 8106cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	699b      	ldr	r3, [r3, #24]
 8106cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8106cbc:	68fb      	ldr	r3, [r7, #12]
 8106cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8106cc8:	68fb      	ldr	r3, [r7, #12]
 8106cca:	f023 0303 	bic.w	r3, r3, #3
 8106cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106cd0:	683b      	ldr	r3, [r7, #0]
 8106cd2:	681b      	ldr	r3, [r3, #0]
 8106cd4:	68fa      	ldr	r2, [r7, #12]
 8106cd6:	4313      	orrs	r3, r2
 8106cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8106cda:	697b      	ldr	r3, [r7, #20]
 8106cdc:	f023 0302 	bic.w	r3, r3, #2
 8106ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8106ce2:	683b      	ldr	r3, [r7, #0]
 8106ce4:	689b      	ldr	r3, [r3, #8]
 8106ce6:	697a      	ldr	r2, [r7, #20]
 8106ce8:	4313      	orrs	r3, r2
 8106cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	4a2c      	ldr	r2, [pc, #176]	; (8106da0 <TIM_OC1_SetConfig+0x10c>)
 8106cf0:	4293      	cmp	r3, r2
 8106cf2:	d00f      	beq.n	8106d14 <TIM_OC1_SetConfig+0x80>
 8106cf4:	687b      	ldr	r3, [r7, #4]
 8106cf6:	4a2b      	ldr	r2, [pc, #172]	; (8106da4 <TIM_OC1_SetConfig+0x110>)
 8106cf8:	4293      	cmp	r3, r2
 8106cfa:	d00b      	beq.n	8106d14 <TIM_OC1_SetConfig+0x80>
 8106cfc:	687b      	ldr	r3, [r7, #4]
 8106cfe:	4a2a      	ldr	r2, [pc, #168]	; (8106da8 <TIM_OC1_SetConfig+0x114>)
 8106d00:	4293      	cmp	r3, r2
 8106d02:	d007      	beq.n	8106d14 <TIM_OC1_SetConfig+0x80>
 8106d04:	687b      	ldr	r3, [r7, #4]
 8106d06:	4a29      	ldr	r2, [pc, #164]	; (8106dac <TIM_OC1_SetConfig+0x118>)
 8106d08:	4293      	cmp	r3, r2
 8106d0a:	d003      	beq.n	8106d14 <TIM_OC1_SetConfig+0x80>
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	4a28      	ldr	r2, [pc, #160]	; (8106db0 <TIM_OC1_SetConfig+0x11c>)
 8106d10:	4293      	cmp	r3, r2
 8106d12:	d10c      	bne.n	8106d2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106d14:	697b      	ldr	r3, [r7, #20]
 8106d16:	f023 0308 	bic.w	r3, r3, #8
 8106d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106d1c:	683b      	ldr	r3, [r7, #0]
 8106d1e:	68db      	ldr	r3, [r3, #12]
 8106d20:	697a      	ldr	r2, [r7, #20]
 8106d22:	4313      	orrs	r3, r2
 8106d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106d26:	697b      	ldr	r3, [r7, #20]
 8106d28:	f023 0304 	bic.w	r3, r3, #4
 8106d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106d2e:	687b      	ldr	r3, [r7, #4]
 8106d30:	4a1b      	ldr	r2, [pc, #108]	; (8106da0 <TIM_OC1_SetConfig+0x10c>)
 8106d32:	4293      	cmp	r3, r2
 8106d34:	d00f      	beq.n	8106d56 <TIM_OC1_SetConfig+0xc2>
 8106d36:	687b      	ldr	r3, [r7, #4]
 8106d38:	4a1a      	ldr	r2, [pc, #104]	; (8106da4 <TIM_OC1_SetConfig+0x110>)
 8106d3a:	4293      	cmp	r3, r2
 8106d3c:	d00b      	beq.n	8106d56 <TIM_OC1_SetConfig+0xc2>
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	4a19      	ldr	r2, [pc, #100]	; (8106da8 <TIM_OC1_SetConfig+0x114>)
 8106d42:	4293      	cmp	r3, r2
 8106d44:	d007      	beq.n	8106d56 <TIM_OC1_SetConfig+0xc2>
 8106d46:	687b      	ldr	r3, [r7, #4]
 8106d48:	4a18      	ldr	r2, [pc, #96]	; (8106dac <TIM_OC1_SetConfig+0x118>)
 8106d4a:	4293      	cmp	r3, r2
 8106d4c:	d003      	beq.n	8106d56 <TIM_OC1_SetConfig+0xc2>
 8106d4e:	687b      	ldr	r3, [r7, #4]
 8106d50:	4a17      	ldr	r2, [pc, #92]	; (8106db0 <TIM_OC1_SetConfig+0x11c>)
 8106d52:	4293      	cmp	r3, r2
 8106d54:	d111      	bne.n	8106d7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106d56:	693b      	ldr	r3, [r7, #16]
 8106d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106d5e:	693b      	ldr	r3, [r7, #16]
 8106d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106d66:	683b      	ldr	r3, [r7, #0]
 8106d68:	695b      	ldr	r3, [r3, #20]
 8106d6a:	693a      	ldr	r2, [r7, #16]
 8106d6c:	4313      	orrs	r3, r2
 8106d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106d70:	683b      	ldr	r3, [r7, #0]
 8106d72:	699b      	ldr	r3, [r3, #24]
 8106d74:	693a      	ldr	r2, [r7, #16]
 8106d76:	4313      	orrs	r3, r2
 8106d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	693a      	ldr	r2, [r7, #16]
 8106d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106d80:	687b      	ldr	r3, [r7, #4]
 8106d82:	68fa      	ldr	r2, [r7, #12]
 8106d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106d86:	683b      	ldr	r3, [r7, #0]
 8106d88:	685a      	ldr	r2, [r3, #4]
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106d8e:	687b      	ldr	r3, [r7, #4]
 8106d90:	697a      	ldr	r2, [r7, #20]
 8106d92:	621a      	str	r2, [r3, #32]
}
 8106d94:	bf00      	nop
 8106d96:	371c      	adds	r7, #28
 8106d98:	46bd      	mov	sp, r7
 8106d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d9e:	4770      	bx	lr
 8106da0:	40010000 	.word	0x40010000
 8106da4:	40010400 	.word	0x40010400
 8106da8:	40014000 	.word	0x40014000
 8106dac:	40014400 	.word	0x40014400
 8106db0:	40014800 	.word	0x40014800

08106db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106db4:	b480      	push	{r7}
 8106db6:	b087      	sub	sp, #28
 8106db8:	af00      	add	r7, sp, #0
 8106dba:	6078      	str	r0, [r7, #4]
 8106dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106dbe:	687b      	ldr	r3, [r7, #4]
 8106dc0:	6a1b      	ldr	r3, [r3, #32]
 8106dc2:	f023 0210 	bic.w	r2, r3, #16
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	6a1b      	ldr	r3, [r3, #32]
 8106dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106dd0:	687b      	ldr	r3, [r7, #4]
 8106dd2:	685b      	ldr	r3, [r3, #4]
 8106dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106dd6:	687b      	ldr	r3, [r7, #4]
 8106dd8:	699b      	ldr	r3, [r3, #24]
 8106dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8106ddc:	68fb      	ldr	r3, [r7, #12]
 8106dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106de8:	68fb      	ldr	r3, [r7, #12]
 8106dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106df0:	683b      	ldr	r3, [r7, #0]
 8106df2:	681b      	ldr	r3, [r3, #0]
 8106df4:	021b      	lsls	r3, r3, #8
 8106df6:	68fa      	ldr	r2, [r7, #12]
 8106df8:	4313      	orrs	r3, r2
 8106dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106dfc:	697b      	ldr	r3, [r7, #20]
 8106dfe:	f023 0320 	bic.w	r3, r3, #32
 8106e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106e04:	683b      	ldr	r3, [r7, #0]
 8106e06:	689b      	ldr	r3, [r3, #8]
 8106e08:	011b      	lsls	r3, r3, #4
 8106e0a:	697a      	ldr	r2, [r7, #20]
 8106e0c:	4313      	orrs	r3, r2
 8106e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	4a28      	ldr	r2, [pc, #160]	; (8106eb4 <TIM_OC2_SetConfig+0x100>)
 8106e14:	4293      	cmp	r3, r2
 8106e16:	d003      	beq.n	8106e20 <TIM_OC2_SetConfig+0x6c>
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	4a27      	ldr	r2, [pc, #156]	; (8106eb8 <TIM_OC2_SetConfig+0x104>)
 8106e1c:	4293      	cmp	r3, r2
 8106e1e:	d10d      	bne.n	8106e3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106e20:	697b      	ldr	r3, [r7, #20]
 8106e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106e28:	683b      	ldr	r3, [r7, #0]
 8106e2a:	68db      	ldr	r3, [r3, #12]
 8106e2c:	011b      	lsls	r3, r3, #4
 8106e2e:	697a      	ldr	r2, [r7, #20]
 8106e30:	4313      	orrs	r3, r2
 8106e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106e34:	697b      	ldr	r3, [r7, #20]
 8106e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106e3c:	687b      	ldr	r3, [r7, #4]
 8106e3e:	4a1d      	ldr	r2, [pc, #116]	; (8106eb4 <TIM_OC2_SetConfig+0x100>)
 8106e40:	4293      	cmp	r3, r2
 8106e42:	d00f      	beq.n	8106e64 <TIM_OC2_SetConfig+0xb0>
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	4a1c      	ldr	r2, [pc, #112]	; (8106eb8 <TIM_OC2_SetConfig+0x104>)
 8106e48:	4293      	cmp	r3, r2
 8106e4a:	d00b      	beq.n	8106e64 <TIM_OC2_SetConfig+0xb0>
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	4a1b      	ldr	r2, [pc, #108]	; (8106ebc <TIM_OC2_SetConfig+0x108>)
 8106e50:	4293      	cmp	r3, r2
 8106e52:	d007      	beq.n	8106e64 <TIM_OC2_SetConfig+0xb0>
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	4a1a      	ldr	r2, [pc, #104]	; (8106ec0 <TIM_OC2_SetConfig+0x10c>)
 8106e58:	4293      	cmp	r3, r2
 8106e5a:	d003      	beq.n	8106e64 <TIM_OC2_SetConfig+0xb0>
 8106e5c:	687b      	ldr	r3, [r7, #4]
 8106e5e:	4a19      	ldr	r2, [pc, #100]	; (8106ec4 <TIM_OC2_SetConfig+0x110>)
 8106e60:	4293      	cmp	r3, r2
 8106e62:	d113      	bne.n	8106e8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106e64:	693b      	ldr	r3, [r7, #16]
 8106e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106e6c:	693b      	ldr	r3, [r7, #16]
 8106e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106e74:	683b      	ldr	r3, [r7, #0]
 8106e76:	695b      	ldr	r3, [r3, #20]
 8106e78:	009b      	lsls	r3, r3, #2
 8106e7a:	693a      	ldr	r2, [r7, #16]
 8106e7c:	4313      	orrs	r3, r2
 8106e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106e80:	683b      	ldr	r3, [r7, #0]
 8106e82:	699b      	ldr	r3, [r3, #24]
 8106e84:	009b      	lsls	r3, r3, #2
 8106e86:	693a      	ldr	r2, [r7, #16]
 8106e88:	4313      	orrs	r3, r2
 8106e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106e8c:	687b      	ldr	r3, [r7, #4]
 8106e8e:	693a      	ldr	r2, [r7, #16]
 8106e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106e92:	687b      	ldr	r3, [r7, #4]
 8106e94:	68fa      	ldr	r2, [r7, #12]
 8106e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106e98:	683b      	ldr	r3, [r7, #0]
 8106e9a:	685a      	ldr	r2, [r3, #4]
 8106e9c:	687b      	ldr	r3, [r7, #4]
 8106e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	697a      	ldr	r2, [r7, #20]
 8106ea4:	621a      	str	r2, [r3, #32]
}
 8106ea6:	bf00      	nop
 8106ea8:	371c      	adds	r7, #28
 8106eaa:	46bd      	mov	sp, r7
 8106eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eb0:	4770      	bx	lr
 8106eb2:	bf00      	nop
 8106eb4:	40010000 	.word	0x40010000
 8106eb8:	40010400 	.word	0x40010400
 8106ebc:	40014000 	.word	0x40014000
 8106ec0:	40014400 	.word	0x40014400
 8106ec4:	40014800 	.word	0x40014800

08106ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106ec8:	b480      	push	{r7}
 8106eca:	b087      	sub	sp, #28
 8106ecc:	af00      	add	r7, sp, #0
 8106ece:	6078      	str	r0, [r7, #4]
 8106ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106ed2:	687b      	ldr	r3, [r7, #4]
 8106ed4:	6a1b      	ldr	r3, [r3, #32]
 8106ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106ede:	687b      	ldr	r3, [r7, #4]
 8106ee0:	6a1b      	ldr	r3, [r3, #32]
 8106ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106ee4:	687b      	ldr	r3, [r7, #4]
 8106ee6:	685b      	ldr	r3, [r3, #4]
 8106ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	69db      	ldr	r3, [r3, #28]
 8106eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8106ef0:	68fb      	ldr	r3, [r7, #12]
 8106ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106efc:	68fb      	ldr	r3, [r7, #12]
 8106efe:	f023 0303 	bic.w	r3, r3, #3
 8106f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106f04:	683b      	ldr	r3, [r7, #0]
 8106f06:	681b      	ldr	r3, [r3, #0]
 8106f08:	68fa      	ldr	r2, [r7, #12]
 8106f0a:	4313      	orrs	r3, r2
 8106f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106f0e:	697b      	ldr	r3, [r7, #20]
 8106f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106f16:	683b      	ldr	r3, [r7, #0]
 8106f18:	689b      	ldr	r3, [r3, #8]
 8106f1a:	021b      	lsls	r3, r3, #8
 8106f1c:	697a      	ldr	r2, [r7, #20]
 8106f1e:	4313      	orrs	r3, r2
 8106f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106f22:	687b      	ldr	r3, [r7, #4]
 8106f24:	4a27      	ldr	r2, [pc, #156]	; (8106fc4 <TIM_OC3_SetConfig+0xfc>)
 8106f26:	4293      	cmp	r3, r2
 8106f28:	d003      	beq.n	8106f32 <TIM_OC3_SetConfig+0x6a>
 8106f2a:	687b      	ldr	r3, [r7, #4]
 8106f2c:	4a26      	ldr	r2, [pc, #152]	; (8106fc8 <TIM_OC3_SetConfig+0x100>)
 8106f2e:	4293      	cmp	r3, r2
 8106f30:	d10d      	bne.n	8106f4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106f32:	697b      	ldr	r3, [r7, #20]
 8106f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106f3a:	683b      	ldr	r3, [r7, #0]
 8106f3c:	68db      	ldr	r3, [r3, #12]
 8106f3e:	021b      	lsls	r3, r3, #8
 8106f40:	697a      	ldr	r2, [r7, #20]
 8106f42:	4313      	orrs	r3, r2
 8106f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106f46:	697b      	ldr	r3, [r7, #20]
 8106f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106f4e:	687b      	ldr	r3, [r7, #4]
 8106f50:	4a1c      	ldr	r2, [pc, #112]	; (8106fc4 <TIM_OC3_SetConfig+0xfc>)
 8106f52:	4293      	cmp	r3, r2
 8106f54:	d00f      	beq.n	8106f76 <TIM_OC3_SetConfig+0xae>
 8106f56:	687b      	ldr	r3, [r7, #4]
 8106f58:	4a1b      	ldr	r2, [pc, #108]	; (8106fc8 <TIM_OC3_SetConfig+0x100>)
 8106f5a:	4293      	cmp	r3, r2
 8106f5c:	d00b      	beq.n	8106f76 <TIM_OC3_SetConfig+0xae>
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	4a1a      	ldr	r2, [pc, #104]	; (8106fcc <TIM_OC3_SetConfig+0x104>)
 8106f62:	4293      	cmp	r3, r2
 8106f64:	d007      	beq.n	8106f76 <TIM_OC3_SetConfig+0xae>
 8106f66:	687b      	ldr	r3, [r7, #4]
 8106f68:	4a19      	ldr	r2, [pc, #100]	; (8106fd0 <TIM_OC3_SetConfig+0x108>)
 8106f6a:	4293      	cmp	r3, r2
 8106f6c:	d003      	beq.n	8106f76 <TIM_OC3_SetConfig+0xae>
 8106f6e:	687b      	ldr	r3, [r7, #4]
 8106f70:	4a18      	ldr	r2, [pc, #96]	; (8106fd4 <TIM_OC3_SetConfig+0x10c>)
 8106f72:	4293      	cmp	r3, r2
 8106f74:	d113      	bne.n	8106f9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106f76:	693b      	ldr	r3, [r7, #16]
 8106f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106f7e:	693b      	ldr	r3, [r7, #16]
 8106f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8106f86:	683b      	ldr	r3, [r7, #0]
 8106f88:	695b      	ldr	r3, [r3, #20]
 8106f8a:	011b      	lsls	r3, r3, #4
 8106f8c:	693a      	ldr	r2, [r7, #16]
 8106f8e:	4313      	orrs	r3, r2
 8106f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106f92:	683b      	ldr	r3, [r7, #0]
 8106f94:	699b      	ldr	r3, [r3, #24]
 8106f96:	011b      	lsls	r3, r3, #4
 8106f98:	693a      	ldr	r2, [r7, #16]
 8106f9a:	4313      	orrs	r3, r2
 8106f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	693a      	ldr	r2, [r7, #16]
 8106fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	68fa      	ldr	r2, [r7, #12]
 8106fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8106faa:	683b      	ldr	r3, [r7, #0]
 8106fac:	685a      	ldr	r2, [r3, #4]
 8106fae:	687b      	ldr	r3, [r7, #4]
 8106fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106fb2:	687b      	ldr	r3, [r7, #4]
 8106fb4:	697a      	ldr	r2, [r7, #20]
 8106fb6:	621a      	str	r2, [r3, #32]
}
 8106fb8:	bf00      	nop
 8106fba:	371c      	adds	r7, #28
 8106fbc:	46bd      	mov	sp, r7
 8106fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106fc2:	4770      	bx	lr
 8106fc4:	40010000 	.word	0x40010000
 8106fc8:	40010400 	.word	0x40010400
 8106fcc:	40014000 	.word	0x40014000
 8106fd0:	40014400 	.word	0x40014400
 8106fd4:	40014800 	.word	0x40014800

08106fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8106fd8:	b480      	push	{r7}
 8106fda:	b087      	sub	sp, #28
 8106fdc:	af00      	add	r7, sp, #0
 8106fde:	6078      	str	r0, [r7, #4]
 8106fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8106fe2:	687b      	ldr	r3, [r7, #4]
 8106fe4:	6a1b      	ldr	r3, [r3, #32]
 8106fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	6a1b      	ldr	r3, [r3, #32]
 8106ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	685b      	ldr	r3, [r3, #4]
 8106ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106ffa:	687b      	ldr	r3, [r7, #4]
 8106ffc:	69db      	ldr	r3, [r3, #28]
 8106ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107000:	68fb      	ldr	r3, [r7, #12]
 8107002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810700a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810700c:	68fb      	ldr	r3, [r7, #12]
 810700e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107014:	683b      	ldr	r3, [r7, #0]
 8107016:	681b      	ldr	r3, [r3, #0]
 8107018:	021b      	lsls	r3, r3, #8
 810701a:	68fa      	ldr	r2, [r7, #12]
 810701c:	4313      	orrs	r3, r2
 810701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107020:	693b      	ldr	r3, [r7, #16]
 8107022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8107026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8107028:	683b      	ldr	r3, [r7, #0]
 810702a:	689b      	ldr	r3, [r3, #8]
 810702c:	031b      	lsls	r3, r3, #12
 810702e:	693a      	ldr	r2, [r7, #16]
 8107030:	4313      	orrs	r3, r2
 8107032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107034:	687b      	ldr	r3, [r7, #4]
 8107036:	4a18      	ldr	r2, [pc, #96]	; (8107098 <TIM_OC4_SetConfig+0xc0>)
 8107038:	4293      	cmp	r3, r2
 810703a:	d00f      	beq.n	810705c <TIM_OC4_SetConfig+0x84>
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	4a17      	ldr	r2, [pc, #92]	; (810709c <TIM_OC4_SetConfig+0xc4>)
 8107040:	4293      	cmp	r3, r2
 8107042:	d00b      	beq.n	810705c <TIM_OC4_SetConfig+0x84>
 8107044:	687b      	ldr	r3, [r7, #4]
 8107046:	4a16      	ldr	r2, [pc, #88]	; (81070a0 <TIM_OC4_SetConfig+0xc8>)
 8107048:	4293      	cmp	r3, r2
 810704a:	d007      	beq.n	810705c <TIM_OC4_SetConfig+0x84>
 810704c:	687b      	ldr	r3, [r7, #4]
 810704e:	4a15      	ldr	r2, [pc, #84]	; (81070a4 <TIM_OC4_SetConfig+0xcc>)
 8107050:	4293      	cmp	r3, r2
 8107052:	d003      	beq.n	810705c <TIM_OC4_SetConfig+0x84>
 8107054:	687b      	ldr	r3, [r7, #4]
 8107056:	4a14      	ldr	r2, [pc, #80]	; (81070a8 <TIM_OC4_SetConfig+0xd0>)
 8107058:	4293      	cmp	r3, r2
 810705a:	d109      	bne.n	8107070 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810705c:	697b      	ldr	r3, [r7, #20]
 810705e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107062:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107064:	683b      	ldr	r3, [r7, #0]
 8107066:	695b      	ldr	r3, [r3, #20]
 8107068:	019b      	lsls	r3, r3, #6
 810706a:	697a      	ldr	r2, [r7, #20]
 810706c:	4313      	orrs	r3, r2
 810706e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	697a      	ldr	r2, [r7, #20]
 8107074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8107076:	687b      	ldr	r3, [r7, #4]
 8107078:	68fa      	ldr	r2, [r7, #12]
 810707a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810707c:	683b      	ldr	r3, [r7, #0]
 810707e:	685a      	ldr	r2, [r3, #4]
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	693a      	ldr	r2, [r7, #16]
 8107088:	621a      	str	r2, [r3, #32]
}
 810708a:	bf00      	nop
 810708c:	371c      	adds	r7, #28
 810708e:	46bd      	mov	sp, r7
 8107090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107094:	4770      	bx	lr
 8107096:	bf00      	nop
 8107098:	40010000 	.word	0x40010000
 810709c:	40010400 	.word	0x40010400
 81070a0:	40014000 	.word	0x40014000
 81070a4:	40014400 	.word	0x40014400
 81070a8:	40014800 	.word	0x40014800

081070ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81070ac:	b480      	push	{r7}
 81070ae:	b087      	sub	sp, #28
 81070b0:	af00      	add	r7, sp, #0
 81070b2:	6078      	str	r0, [r7, #4]
 81070b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81070b6:	687b      	ldr	r3, [r7, #4]
 81070b8:	6a1b      	ldr	r3, [r3, #32]
 81070ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81070be:	687b      	ldr	r3, [r7, #4]
 81070c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	6a1b      	ldr	r3, [r3, #32]
 81070c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81070c8:	687b      	ldr	r3, [r7, #4]
 81070ca:	685b      	ldr	r3, [r3, #4]
 81070cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81070d4:	68fb      	ldr	r3, [r7, #12]
 81070d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81070da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81070de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81070e0:	683b      	ldr	r3, [r7, #0]
 81070e2:	681b      	ldr	r3, [r3, #0]
 81070e4:	68fa      	ldr	r2, [r7, #12]
 81070e6:	4313      	orrs	r3, r2
 81070e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 81070ea:	693b      	ldr	r3, [r7, #16]
 81070ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 81070f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 81070f2:	683b      	ldr	r3, [r7, #0]
 81070f4:	689b      	ldr	r3, [r3, #8]
 81070f6:	041b      	lsls	r3, r3, #16
 81070f8:	693a      	ldr	r2, [r7, #16]
 81070fa:	4313      	orrs	r3, r2
 81070fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81070fe:	687b      	ldr	r3, [r7, #4]
 8107100:	4a17      	ldr	r2, [pc, #92]	; (8107160 <TIM_OC5_SetConfig+0xb4>)
 8107102:	4293      	cmp	r3, r2
 8107104:	d00f      	beq.n	8107126 <TIM_OC5_SetConfig+0x7a>
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	4a16      	ldr	r2, [pc, #88]	; (8107164 <TIM_OC5_SetConfig+0xb8>)
 810710a:	4293      	cmp	r3, r2
 810710c:	d00b      	beq.n	8107126 <TIM_OC5_SetConfig+0x7a>
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	4a15      	ldr	r2, [pc, #84]	; (8107168 <TIM_OC5_SetConfig+0xbc>)
 8107112:	4293      	cmp	r3, r2
 8107114:	d007      	beq.n	8107126 <TIM_OC5_SetConfig+0x7a>
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	4a14      	ldr	r2, [pc, #80]	; (810716c <TIM_OC5_SetConfig+0xc0>)
 810711a:	4293      	cmp	r3, r2
 810711c:	d003      	beq.n	8107126 <TIM_OC5_SetConfig+0x7a>
 810711e:	687b      	ldr	r3, [r7, #4]
 8107120:	4a13      	ldr	r2, [pc, #76]	; (8107170 <TIM_OC5_SetConfig+0xc4>)
 8107122:	4293      	cmp	r3, r2
 8107124:	d109      	bne.n	810713a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107126:	697b      	ldr	r3, [r7, #20]
 8107128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810712c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810712e:	683b      	ldr	r3, [r7, #0]
 8107130:	695b      	ldr	r3, [r3, #20]
 8107132:	021b      	lsls	r3, r3, #8
 8107134:	697a      	ldr	r2, [r7, #20]
 8107136:	4313      	orrs	r3, r2
 8107138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	697a      	ldr	r2, [r7, #20]
 810713e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	68fa      	ldr	r2, [r7, #12]
 8107144:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107146:	683b      	ldr	r3, [r7, #0]
 8107148:	685a      	ldr	r2, [r3, #4]
 810714a:	687b      	ldr	r3, [r7, #4]
 810714c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	693a      	ldr	r2, [r7, #16]
 8107152:	621a      	str	r2, [r3, #32]
}
 8107154:	bf00      	nop
 8107156:	371c      	adds	r7, #28
 8107158:	46bd      	mov	sp, r7
 810715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810715e:	4770      	bx	lr
 8107160:	40010000 	.word	0x40010000
 8107164:	40010400 	.word	0x40010400
 8107168:	40014000 	.word	0x40014000
 810716c:	40014400 	.word	0x40014400
 8107170:	40014800 	.word	0x40014800

08107174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107174:	b480      	push	{r7}
 8107176:	b087      	sub	sp, #28
 8107178:	af00      	add	r7, sp, #0
 810717a:	6078      	str	r0, [r7, #4]
 810717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	6a1b      	ldr	r3, [r3, #32]
 8107182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8107186:	687b      	ldr	r3, [r7, #4]
 8107188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	6a1b      	ldr	r3, [r3, #32]
 810718e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107190:	687b      	ldr	r3, [r7, #4]
 8107192:	685b      	ldr	r3, [r3, #4]
 8107194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107196:	687b      	ldr	r3, [r7, #4]
 8107198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810719c:	68fb      	ldr	r3, [r7, #12]
 810719e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81071a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81071a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81071a8:	683b      	ldr	r3, [r7, #0]
 81071aa:	681b      	ldr	r3, [r3, #0]
 81071ac:	021b      	lsls	r3, r3, #8
 81071ae:	68fa      	ldr	r2, [r7, #12]
 81071b0:	4313      	orrs	r3, r2
 81071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81071b4:	693b      	ldr	r3, [r7, #16]
 81071b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81071ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81071bc:	683b      	ldr	r3, [r7, #0]
 81071be:	689b      	ldr	r3, [r3, #8]
 81071c0:	051b      	lsls	r3, r3, #20
 81071c2:	693a      	ldr	r2, [r7, #16]
 81071c4:	4313      	orrs	r3, r2
 81071c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81071c8:	687b      	ldr	r3, [r7, #4]
 81071ca:	4a18      	ldr	r2, [pc, #96]	; (810722c <TIM_OC6_SetConfig+0xb8>)
 81071cc:	4293      	cmp	r3, r2
 81071ce:	d00f      	beq.n	81071f0 <TIM_OC6_SetConfig+0x7c>
 81071d0:	687b      	ldr	r3, [r7, #4]
 81071d2:	4a17      	ldr	r2, [pc, #92]	; (8107230 <TIM_OC6_SetConfig+0xbc>)
 81071d4:	4293      	cmp	r3, r2
 81071d6:	d00b      	beq.n	81071f0 <TIM_OC6_SetConfig+0x7c>
 81071d8:	687b      	ldr	r3, [r7, #4]
 81071da:	4a16      	ldr	r2, [pc, #88]	; (8107234 <TIM_OC6_SetConfig+0xc0>)
 81071dc:	4293      	cmp	r3, r2
 81071de:	d007      	beq.n	81071f0 <TIM_OC6_SetConfig+0x7c>
 81071e0:	687b      	ldr	r3, [r7, #4]
 81071e2:	4a15      	ldr	r2, [pc, #84]	; (8107238 <TIM_OC6_SetConfig+0xc4>)
 81071e4:	4293      	cmp	r3, r2
 81071e6:	d003      	beq.n	81071f0 <TIM_OC6_SetConfig+0x7c>
 81071e8:	687b      	ldr	r3, [r7, #4]
 81071ea:	4a14      	ldr	r2, [pc, #80]	; (810723c <TIM_OC6_SetConfig+0xc8>)
 81071ec:	4293      	cmp	r3, r2
 81071ee:	d109      	bne.n	8107204 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 81071f0:	697b      	ldr	r3, [r7, #20]
 81071f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 81071f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 81071f8:	683b      	ldr	r3, [r7, #0]
 81071fa:	695b      	ldr	r3, [r3, #20]
 81071fc:	029b      	lsls	r3, r3, #10
 81071fe:	697a      	ldr	r2, [r7, #20]
 8107200:	4313      	orrs	r3, r2
 8107202:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107204:	687b      	ldr	r3, [r7, #4]
 8107206:	697a      	ldr	r2, [r7, #20]
 8107208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810720a:	687b      	ldr	r3, [r7, #4]
 810720c:	68fa      	ldr	r2, [r7, #12]
 810720e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107210:	683b      	ldr	r3, [r7, #0]
 8107212:	685a      	ldr	r2, [r3, #4]
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107218:	687b      	ldr	r3, [r7, #4]
 810721a:	693a      	ldr	r2, [r7, #16]
 810721c:	621a      	str	r2, [r3, #32]
}
 810721e:	bf00      	nop
 8107220:	371c      	adds	r7, #28
 8107222:	46bd      	mov	sp, r7
 8107224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107228:	4770      	bx	lr
 810722a:	bf00      	nop
 810722c:	40010000 	.word	0x40010000
 8107230:	40010400 	.word	0x40010400
 8107234:	40014000 	.word	0x40014000
 8107238:	40014400 	.word	0x40014400
 810723c:	40014800 	.word	0x40014800

08107240 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8107240:	b480      	push	{r7}
 8107242:	b087      	sub	sp, #28
 8107244:	af00      	add	r7, sp, #0
 8107246:	60f8      	str	r0, [r7, #12]
 8107248:	60b9      	str	r1, [r7, #8]
 810724a:	607a      	str	r2, [r7, #4]
 810724c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810724e:	68fb      	ldr	r3, [r7, #12]
 8107250:	6a1b      	ldr	r3, [r3, #32]
 8107252:	f023 0201 	bic.w	r2, r3, #1
 8107256:	68fb      	ldr	r3, [r7, #12]
 8107258:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810725a:	68fb      	ldr	r3, [r7, #12]
 810725c:	699b      	ldr	r3, [r3, #24]
 810725e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107260:	68fb      	ldr	r3, [r7, #12]
 8107262:	6a1b      	ldr	r3, [r3, #32]
 8107264:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8107266:	68fb      	ldr	r3, [r7, #12]
 8107268:	4a28      	ldr	r2, [pc, #160]	; (810730c <TIM_TI1_SetConfig+0xcc>)
 810726a:	4293      	cmp	r3, r2
 810726c:	d01b      	beq.n	81072a6 <TIM_TI1_SetConfig+0x66>
 810726e:	68fb      	ldr	r3, [r7, #12]
 8107270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107274:	d017      	beq.n	81072a6 <TIM_TI1_SetConfig+0x66>
 8107276:	68fb      	ldr	r3, [r7, #12]
 8107278:	4a25      	ldr	r2, [pc, #148]	; (8107310 <TIM_TI1_SetConfig+0xd0>)
 810727a:	4293      	cmp	r3, r2
 810727c:	d013      	beq.n	81072a6 <TIM_TI1_SetConfig+0x66>
 810727e:	68fb      	ldr	r3, [r7, #12]
 8107280:	4a24      	ldr	r2, [pc, #144]	; (8107314 <TIM_TI1_SetConfig+0xd4>)
 8107282:	4293      	cmp	r3, r2
 8107284:	d00f      	beq.n	81072a6 <TIM_TI1_SetConfig+0x66>
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	4a23      	ldr	r2, [pc, #140]	; (8107318 <TIM_TI1_SetConfig+0xd8>)
 810728a:	4293      	cmp	r3, r2
 810728c:	d00b      	beq.n	81072a6 <TIM_TI1_SetConfig+0x66>
 810728e:	68fb      	ldr	r3, [r7, #12]
 8107290:	4a22      	ldr	r2, [pc, #136]	; (810731c <TIM_TI1_SetConfig+0xdc>)
 8107292:	4293      	cmp	r3, r2
 8107294:	d007      	beq.n	81072a6 <TIM_TI1_SetConfig+0x66>
 8107296:	68fb      	ldr	r3, [r7, #12]
 8107298:	4a21      	ldr	r2, [pc, #132]	; (8107320 <TIM_TI1_SetConfig+0xe0>)
 810729a:	4293      	cmp	r3, r2
 810729c:	d003      	beq.n	81072a6 <TIM_TI1_SetConfig+0x66>
 810729e:	68fb      	ldr	r3, [r7, #12]
 81072a0:	4a20      	ldr	r2, [pc, #128]	; (8107324 <TIM_TI1_SetConfig+0xe4>)
 81072a2:	4293      	cmp	r3, r2
 81072a4:	d101      	bne.n	81072aa <TIM_TI1_SetConfig+0x6a>
 81072a6:	2301      	movs	r3, #1
 81072a8:	e000      	b.n	81072ac <TIM_TI1_SetConfig+0x6c>
 81072aa:	2300      	movs	r3, #0
 81072ac:	2b00      	cmp	r3, #0
 81072ae:	d008      	beq.n	81072c2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 81072b0:	697b      	ldr	r3, [r7, #20]
 81072b2:	f023 0303 	bic.w	r3, r3, #3
 81072b6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 81072b8:	697a      	ldr	r2, [r7, #20]
 81072ba:	687b      	ldr	r3, [r7, #4]
 81072bc:	4313      	orrs	r3, r2
 81072be:	617b      	str	r3, [r7, #20]
 81072c0:	e003      	b.n	81072ca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 81072c2:	697b      	ldr	r3, [r7, #20]
 81072c4:	f043 0301 	orr.w	r3, r3, #1
 81072c8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81072ca:	697b      	ldr	r3, [r7, #20]
 81072cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81072d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 81072d2:	683b      	ldr	r3, [r7, #0]
 81072d4:	011b      	lsls	r3, r3, #4
 81072d6:	b2db      	uxtb	r3, r3
 81072d8:	697a      	ldr	r2, [r7, #20]
 81072da:	4313      	orrs	r3, r2
 81072dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81072de:	693b      	ldr	r3, [r7, #16]
 81072e0:	f023 030a 	bic.w	r3, r3, #10
 81072e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 81072e6:	68bb      	ldr	r3, [r7, #8]
 81072e8:	f003 030a 	and.w	r3, r3, #10
 81072ec:	693a      	ldr	r2, [r7, #16]
 81072ee:	4313      	orrs	r3, r2
 81072f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81072f2:	68fb      	ldr	r3, [r7, #12]
 81072f4:	697a      	ldr	r2, [r7, #20]
 81072f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81072f8:	68fb      	ldr	r3, [r7, #12]
 81072fa:	693a      	ldr	r2, [r7, #16]
 81072fc:	621a      	str	r2, [r3, #32]
}
 81072fe:	bf00      	nop
 8107300:	371c      	adds	r7, #28
 8107302:	46bd      	mov	sp, r7
 8107304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107308:	4770      	bx	lr
 810730a:	bf00      	nop
 810730c:	40010000 	.word	0x40010000
 8107310:	40000400 	.word	0x40000400
 8107314:	40000800 	.word	0x40000800
 8107318:	40000c00 	.word	0x40000c00
 810731c:	40010400 	.word	0x40010400
 8107320:	40001800 	.word	0x40001800
 8107324:	40014000 	.word	0x40014000

08107328 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8107328:	b480      	push	{r7}
 810732a:	b087      	sub	sp, #28
 810732c:	af00      	add	r7, sp, #0
 810732e:	60f8      	str	r0, [r7, #12]
 8107330:	60b9      	str	r1, [r7, #8]
 8107332:	607a      	str	r2, [r7, #4]
 8107334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107336:	68fb      	ldr	r3, [r7, #12]
 8107338:	6a1b      	ldr	r3, [r3, #32]
 810733a:	f023 0210 	bic.w	r2, r3, #16
 810733e:	68fb      	ldr	r3, [r7, #12]
 8107340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107342:	68fb      	ldr	r3, [r7, #12]
 8107344:	699b      	ldr	r3, [r3, #24]
 8107346:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107348:	68fb      	ldr	r3, [r7, #12]
 810734a:	6a1b      	ldr	r3, [r3, #32]
 810734c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810734e:	697b      	ldr	r3, [r7, #20]
 8107350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107354:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8107356:	687b      	ldr	r3, [r7, #4]
 8107358:	021b      	lsls	r3, r3, #8
 810735a:	697a      	ldr	r2, [r7, #20]
 810735c:	4313      	orrs	r3, r2
 810735e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8107360:	697b      	ldr	r3, [r7, #20]
 8107362:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107366:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8107368:	683b      	ldr	r3, [r7, #0]
 810736a:	031b      	lsls	r3, r3, #12
 810736c:	b29b      	uxth	r3, r3
 810736e:	697a      	ldr	r2, [r7, #20]
 8107370:	4313      	orrs	r3, r2
 8107372:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8107374:	693b      	ldr	r3, [r7, #16]
 8107376:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810737a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810737c:	68bb      	ldr	r3, [r7, #8]
 810737e:	011b      	lsls	r3, r3, #4
 8107380:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8107384:	693a      	ldr	r2, [r7, #16]
 8107386:	4313      	orrs	r3, r2
 8107388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810738a:	68fb      	ldr	r3, [r7, #12]
 810738c:	697a      	ldr	r2, [r7, #20]
 810738e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107390:	68fb      	ldr	r3, [r7, #12]
 8107392:	693a      	ldr	r2, [r7, #16]
 8107394:	621a      	str	r2, [r3, #32]
}
 8107396:	bf00      	nop
 8107398:	371c      	adds	r7, #28
 810739a:	46bd      	mov	sp, r7
 810739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073a0:	4770      	bx	lr

081073a2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81073a2:	b480      	push	{r7}
 81073a4:	b087      	sub	sp, #28
 81073a6:	af00      	add	r7, sp, #0
 81073a8:	60f8      	str	r0, [r7, #12]
 81073aa:	60b9      	str	r1, [r7, #8]
 81073ac:	607a      	str	r2, [r7, #4]
 81073ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81073b0:	68fb      	ldr	r3, [r7, #12]
 81073b2:	6a1b      	ldr	r3, [r3, #32]
 81073b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81073b8:	68fb      	ldr	r3, [r7, #12]
 81073ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81073bc:	68fb      	ldr	r3, [r7, #12]
 81073be:	69db      	ldr	r3, [r3, #28]
 81073c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81073c2:	68fb      	ldr	r3, [r7, #12]
 81073c4:	6a1b      	ldr	r3, [r3, #32]
 81073c6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 81073c8:	697b      	ldr	r3, [r7, #20]
 81073ca:	f023 0303 	bic.w	r3, r3, #3
 81073ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 81073d0:	697a      	ldr	r2, [r7, #20]
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	4313      	orrs	r3, r2
 81073d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 81073d8:	697b      	ldr	r3, [r7, #20]
 81073da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81073de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 81073e0:	683b      	ldr	r3, [r7, #0]
 81073e2:	011b      	lsls	r3, r3, #4
 81073e4:	b2db      	uxtb	r3, r3
 81073e6:	697a      	ldr	r2, [r7, #20]
 81073e8:	4313      	orrs	r3, r2
 81073ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 81073ec:	693b      	ldr	r3, [r7, #16]
 81073ee:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 81073f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 81073f4:	68bb      	ldr	r3, [r7, #8]
 81073f6:	021b      	lsls	r3, r3, #8
 81073f8:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 81073fc:	693a      	ldr	r2, [r7, #16]
 81073fe:	4313      	orrs	r3, r2
 8107400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8107402:	68fb      	ldr	r3, [r7, #12]
 8107404:	697a      	ldr	r2, [r7, #20]
 8107406:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8107408:	68fb      	ldr	r3, [r7, #12]
 810740a:	693a      	ldr	r2, [r7, #16]
 810740c:	621a      	str	r2, [r3, #32]
}
 810740e:	bf00      	nop
 8107410:	371c      	adds	r7, #28
 8107412:	46bd      	mov	sp, r7
 8107414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107418:	4770      	bx	lr

0810741a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810741a:	b480      	push	{r7}
 810741c:	b087      	sub	sp, #28
 810741e:	af00      	add	r7, sp, #0
 8107420:	60f8      	str	r0, [r7, #12]
 8107422:	60b9      	str	r1, [r7, #8]
 8107424:	607a      	str	r2, [r7, #4]
 8107426:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107428:	68fb      	ldr	r3, [r7, #12]
 810742a:	6a1b      	ldr	r3, [r3, #32]
 810742c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107430:	68fb      	ldr	r3, [r7, #12]
 8107432:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8107434:	68fb      	ldr	r3, [r7, #12]
 8107436:	69db      	ldr	r3, [r3, #28]
 8107438:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810743a:	68fb      	ldr	r3, [r7, #12]
 810743c:	6a1b      	ldr	r3, [r3, #32]
 810743e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8107440:	697b      	ldr	r3, [r7, #20]
 8107442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107446:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8107448:	687b      	ldr	r3, [r7, #4]
 810744a:	021b      	lsls	r3, r3, #8
 810744c:	697a      	ldr	r2, [r7, #20]
 810744e:	4313      	orrs	r3, r2
 8107450:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8107452:	697b      	ldr	r3, [r7, #20]
 8107454:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8107458:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810745a:	683b      	ldr	r3, [r7, #0]
 810745c:	031b      	lsls	r3, r3, #12
 810745e:	b29b      	uxth	r3, r3
 8107460:	697a      	ldr	r2, [r7, #20]
 8107462:	4313      	orrs	r3, r2
 8107464:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8107466:	693b      	ldr	r3, [r7, #16]
 8107468:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 810746c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810746e:	68bb      	ldr	r3, [r7, #8]
 8107470:	031b      	lsls	r3, r3, #12
 8107472:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8107476:	693a      	ldr	r2, [r7, #16]
 8107478:	4313      	orrs	r3, r2
 810747a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810747c:	68fb      	ldr	r3, [r7, #12]
 810747e:	697a      	ldr	r2, [r7, #20]
 8107480:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8107482:	68fb      	ldr	r3, [r7, #12]
 8107484:	693a      	ldr	r2, [r7, #16]
 8107486:	621a      	str	r2, [r3, #32]
}
 8107488:	bf00      	nop
 810748a:	371c      	adds	r7, #28
 810748c:	46bd      	mov	sp, r7
 810748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107492:	4770      	bx	lr

08107494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8107494:	b480      	push	{r7}
 8107496:	b085      	sub	sp, #20
 8107498:	af00      	add	r7, sp, #0
 810749a:	6078      	str	r0, [r7, #4]
 810749c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810749e:	687b      	ldr	r3, [r7, #4]
 81074a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81074a4:	2b01      	cmp	r3, #1
 81074a6:	d101      	bne.n	81074ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81074a8:	2302      	movs	r3, #2
 81074aa:	e06d      	b.n	8107588 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81074ac:	687b      	ldr	r3, [r7, #4]
 81074ae:	2201      	movs	r2, #1
 81074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81074b4:	687b      	ldr	r3, [r7, #4]
 81074b6:	2202      	movs	r2, #2
 81074b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	685b      	ldr	r3, [r3, #4]
 81074c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81074c4:	687b      	ldr	r3, [r7, #4]
 81074c6:	681b      	ldr	r3, [r3, #0]
 81074c8:	689b      	ldr	r3, [r3, #8]
 81074ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81074cc:	687b      	ldr	r3, [r7, #4]
 81074ce:	681b      	ldr	r3, [r3, #0]
 81074d0:	4a30      	ldr	r2, [pc, #192]	; (8107594 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81074d2:	4293      	cmp	r3, r2
 81074d4:	d004      	beq.n	81074e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81074d6:	687b      	ldr	r3, [r7, #4]
 81074d8:	681b      	ldr	r3, [r3, #0]
 81074da:	4a2f      	ldr	r2, [pc, #188]	; (8107598 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81074dc:	4293      	cmp	r3, r2
 81074de:	d108      	bne.n	81074f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81074e0:	68fb      	ldr	r3, [r7, #12]
 81074e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81074e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81074e8:	683b      	ldr	r3, [r7, #0]
 81074ea:	685b      	ldr	r3, [r3, #4]
 81074ec:	68fa      	ldr	r2, [r7, #12]
 81074ee:	4313      	orrs	r3, r2
 81074f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81074f2:	68fb      	ldr	r3, [r7, #12]
 81074f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81074f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81074fa:	683b      	ldr	r3, [r7, #0]
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	68fa      	ldr	r2, [r7, #12]
 8107500:	4313      	orrs	r3, r2
 8107502:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107504:	687b      	ldr	r3, [r7, #4]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	68fa      	ldr	r2, [r7, #12]
 810750a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810750c:	687b      	ldr	r3, [r7, #4]
 810750e:	681b      	ldr	r3, [r3, #0]
 8107510:	4a20      	ldr	r2, [pc, #128]	; (8107594 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107512:	4293      	cmp	r3, r2
 8107514:	d022      	beq.n	810755c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107516:	687b      	ldr	r3, [r7, #4]
 8107518:	681b      	ldr	r3, [r3, #0]
 810751a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810751e:	d01d      	beq.n	810755c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107520:	687b      	ldr	r3, [r7, #4]
 8107522:	681b      	ldr	r3, [r3, #0]
 8107524:	4a1d      	ldr	r2, [pc, #116]	; (810759c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107526:	4293      	cmp	r3, r2
 8107528:	d018      	beq.n	810755c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	681b      	ldr	r3, [r3, #0]
 810752e:	4a1c      	ldr	r2, [pc, #112]	; (81075a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107530:	4293      	cmp	r3, r2
 8107532:	d013      	beq.n	810755c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	4a1a      	ldr	r2, [pc, #104]	; (81075a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810753a:	4293      	cmp	r3, r2
 810753c:	d00e      	beq.n	810755c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810753e:	687b      	ldr	r3, [r7, #4]
 8107540:	681b      	ldr	r3, [r3, #0]
 8107542:	4a15      	ldr	r2, [pc, #84]	; (8107598 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107544:	4293      	cmp	r3, r2
 8107546:	d009      	beq.n	810755c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107548:	687b      	ldr	r3, [r7, #4]
 810754a:	681b      	ldr	r3, [r3, #0]
 810754c:	4a16      	ldr	r2, [pc, #88]	; (81075a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810754e:	4293      	cmp	r3, r2
 8107550:	d004      	beq.n	810755c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107552:	687b      	ldr	r3, [r7, #4]
 8107554:	681b      	ldr	r3, [r3, #0]
 8107556:	4a15      	ldr	r2, [pc, #84]	; (81075ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8107558:	4293      	cmp	r3, r2
 810755a:	d10c      	bne.n	8107576 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810755c:	68bb      	ldr	r3, [r7, #8]
 810755e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107562:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107564:	683b      	ldr	r3, [r7, #0]
 8107566:	689b      	ldr	r3, [r3, #8]
 8107568:	68ba      	ldr	r2, [r7, #8]
 810756a:	4313      	orrs	r3, r2
 810756c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	681b      	ldr	r3, [r3, #0]
 8107572:	68ba      	ldr	r2, [r7, #8]
 8107574:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8107576:	687b      	ldr	r3, [r7, #4]
 8107578:	2201      	movs	r2, #1
 810757a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810757e:	687b      	ldr	r3, [r7, #4]
 8107580:	2200      	movs	r2, #0
 8107582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107586:	2300      	movs	r3, #0
}
 8107588:	4618      	mov	r0, r3
 810758a:	3714      	adds	r7, #20
 810758c:	46bd      	mov	sp, r7
 810758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107592:	4770      	bx	lr
 8107594:	40010000 	.word	0x40010000
 8107598:	40010400 	.word	0x40010400
 810759c:	40000400 	.word	0x40000400
 81075a0:	40000800 	.word	0x40000800
 81075a4:	40000c00 	.word	0x40000c00
 81075a8:	40001800 	.word	0x40001800
 81075ac:	40014000 	.word	0x40014000

081075b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81075b0:	b480      	push	{r7}
 81075b2:	b085      	sub	sp, #20
 81075b4:	af00      	add	r7, sp, #0
 81075b6:	6078      	str	r0, [r7, #4]
 81075b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81075ba:	2300      	movs	r3, #0
 81075bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 81075be:	687b      	ldr	r3, [r7, #4]
 81075c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81075c4:	2b01      	cmp	r3, #1
 81075c6:	d101      	bne.n	81075cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81075c8:	2302      	movs	r3, #2
 81075ca:	e065      	b.n	8107698 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	2201      	movs	r2, #1
 81075d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81075d4:	68fb      	ldr	r3, [r7, #12]
 81075d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81075da:	683b      	ldr	r3, [r7, #0]
 81075dc:	68db      	ldr	r3, [r3, #12]
 81075de:	4313      	orrs	r3, r2
 81075e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 81075e2:	68fb      	ldr	r3, [r7, #12]
 81075e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81075e8:	683b      	ldr	r3, [r7, #0]
 81075ea:	689b      	ldr	r3, [r3, #8]
 81075ec:	4313      	orrs	r3, r2
 81075ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 81075f0:	68fb      	ldr	r3, [r7, #12]
 81075f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 81075f6:	683b      	ldr	r3, [r7, #0]
 81075f8:	685b      	ldr	r3, [r3, #4]
 81075fa:	4313      	orrs	r3, r2
 81075fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 81075fe:	68fb      	ldr	r3, [r7, #12]
 8107600:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107604:	683b      	ldr	r3, [r7, #0]
 8107606:	681b      	ldr	r3, [r3, #0]
 8107608:	4313      	orrs	r3, r2
 810760a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810760c:	68fb      	ldr	r3, [r7, #12]
 810760e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107612:	683b      	ldr	r3, [r7, #0]
 8107614:	691b      	ldr	r3, [r3, #16]
 8107616:	4313      	orrs	r3, r2
 8107618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810761a:	68fb      	ldr	r3, [r7, #12]
 810761c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107620:	683b      	ldr	r3, [r7, #0]
 8107622:	695b      	ldr	r3, [r3, #20]
 8107624:	4313      	orrs	r3, r2
 8107626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107628:	68fb      	ldr	r3, [r7, #12]
 810762a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810762e:	683b      	ldr	r3, [r7, #0]
 8107630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107632:	4313      	orrs	r3, r2
 8107634:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107636:	68fb      	ldr	r3, [r7, #12]
 8107638:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810763c:	683b      	ldr	r3, [r7, #0]
 810763e:	699b      	ldr	r3, [r3, #24]
 8107640:	041b      	lsls	r3, r3, #16
 8107642:	4313      	orrs	r3, r2
 8107644:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107646:	687b      	ldr	r3, [r7, #4]
 8107648:	681b      	ldr	r3, [r3, #0]
 810764a:	4a16      	ldr	r2, [pc, #88]	; (81076a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810764c:	4293      	cmp	r3, r2
 810764e:	d004      	beq.n	810765a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107650:	687b      	ldr	r3, [r7, #4]
 8107652:	681b      	ldr	r3, [r3, #0]
 8107654:	4a14      	ldr	r2, [pc, #80]	; (81076a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107656:	4293      	cmp	r3, r2
 8107658:	d115      	bne.n	8107686 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810765a:	68fb      	ldr	r3, [r7, #12]
 810765c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107660:	683b      	ldr	r3, [r7, #0]
 8107662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107664:	051b      	lsls	r3, r3, #20
 8107666:	4313      	orrs	r3, r2
 8107668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810766a:	68fb      	ldr	r3, [r7, #12]
 810766c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107670:	683b      	ldr	r3, [r7, #0]
 8107672:	69db      	ldr	r3, [r3, #28]
 8107674:	4313      	orrs	r3, r2
 8107676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 810767e:	683b      	ldr	r3, [r7, #0]
 8107680:	6a1b      	ldr	r3, [r3, #32]
 8107682:	4313      	orrs	r3, r2
 8107684:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107686:	687b      	ldr	r3, [r7, #4]
 8107688:	681b      	ldr	r3, [r3, #0]
 810768a:	68fa      	ldr	r2, [r7, #12]
 810768c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 810768e:	687b      	ldr	r3, [r7, #4]
 8107690:	2200      	movs	r2, #0
 8107692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107696:	2300      	movs	r3, #0
}
 8107698:	4618      	mov	r0, r3
 810769a:	3714      	adds	r7, #20
 810769c:	46bd      	mov	sp, r7
 810769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81076a2:	4770      	bx	lr
 81076a4:	40010000 	.word	0x40010000
 81076a8:	40010400 	.word	0x40010400

081076ac <__libc_init_array>:
 81076ac:	b570      	push	{r4, r5, r6, lr}
 81076ae:	4d0d      	ldr	r5, [pc, #52]	; (81076e4 <__libc_init_array+0x38>)
 81076b0:	4c0d      	ldr	r4, [pc, #52]	; (81076e8 <__libc_init_array+0x3c>)
 81076b2:	1b64      	subs	r4, r4, r5
 81076b4:	10a4      	asrs	r4, r4, #2
 81076b6:	2600      	movs	r6, #0
 81076b8:	42a6      	cmp	r6, r4
 81076ba:	d109      	bne.n	81076d0 <__libc_init_array+0x24>
 81076bc:	4d0b      	ldr	r5, [pc, #44]	; (81076ec <__libc_init_array+0x40>)
 81076be:	4c0c      	ldr	r4, [pc, #48]	; (81076f0 <__libc_init_array+0x44>)
 81076c0:	f000 f820 	bl	8107704 <_init>
 81076c4:	1b64      	subs	r4, r4, r5
 81076c6:	10a4      	asrs	r4, r4, #2
 81076c8:	2600      	movs	r6, #0
 81076ca:	42a6      	cmp	r6, r4
 81076cc:	d105      	bne.n	81076da <__libc_init_array+0x2e>
 81076ce:	bd70      	pop	{r4, r5, r6, pc}
 81076d0:	f855 3b04 	ldr.w	r3, [r5], #4
 81076d4:	4798      	blx	r3
 81076d6:	3601      	adds	r6, #1
 81076d8:	e7ee      	b.n	81076b8 <__libc_init_array+0xc>
 81076da:	f855 3b04 	ldr.w	r3, [r5], #4
 81076de:	4798      	blx	r3
 81076e0:	3601      	adds	r6, #1
 81076e2:	e7f2      	b.n	81076ca <__libc_init_array+0x1e>
 81076e4:	0810772c 	.word	0x0810772c
 81076e8:	0810772c 	.word	0x0810772c
 81076ec:	0810772c 	.word	0x0810772c
 81076f0:	08107730 	.word	0x08107730

081076f4 <memset>:
 81076f4:	4402      	add	r2, r0
 81076f6:	4603      	mov	r3, r0
 81076f8:	4293      	cmp	r3, r2
 81076fa:	d100      	bne.n	81076fe <memset+0xa>
 81076fc:	4770      	bx	lr
 81076fe:	f803 1b01 	strb.w	r1, [r3], #1
 8107702:	e7f9      	b.n	81076f8 <memset+0x4>

08107704 <_init>:
 8107704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107706:	bf00      	nop
 8107708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810770a:	bc08      	pop	{r3}
 810770c:	469e      	mov	lr, r3
 810770e:	4770      	bx	lr

08107710 <_fini>:
 8107710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107712:	bf00      	nop
 8107714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107716:	bc08      	pop	{r3}
 8107718:	469e      	mov	lr, r3
 810771a:	4770      	bx	lr
