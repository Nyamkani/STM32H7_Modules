
ethernet_h7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018c70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dac  08018f10  08018f10  00028f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ccbc  0801ccbc  00030098  2**0
                  CONTENTS
  4 .ARM          00000000  0801ccbc  0801ccbc  00030098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801ccbc  0801ccbc  00030098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ccbc  0801ccbc  0002ccbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ccc0  0801ccc0  0002ccc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  24000000  0801ccc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f210  24000098  0801cd5c  00030098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2400f2a8  0801cd5c  0003f2a8  2**0
                  ALLOC
 11 .lwip_sec     00024b83  30020000  30020000  00040000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000394ab  00000000  00000000  000300c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f6a  00000000  00000000  00069571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002540  00000000  00000000  000714e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002390  00000000  00000000  00073a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0005168f  00000000  00000000  00075db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b403  00000000  00000000  000c743f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001c3025  00000000  00000000  00102842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002c5867  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a334  00000000  00000000  002c58b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018ef8 	.word	0x08018ef8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	08018ef8 	.word	0x08018ef8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3d      	ldr	r3, [pc, #244]	; (800047c <SystemInit+0xfc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a3c      	ldr	r2, [pc, #240]	; (800047c <SystemInit+0xfc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b39      	ldr	r3, [pc, #228]	; (800047c <SystemInit+0xfc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a38      	ldr	r2, [pc, #224]	; (800047c <SystemInit+0xfc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b37      	ldr	r3, [pc, #220]	; (8000480 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b34      	ldr	r3, [pc, #208]	; (8000480 <SystemInit+0x100>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a32      	ldr	r2, [pc, #200]	; (8000480 <SystemInit+0x100>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b31      	ldr	r3, [pc, #196]	; (8000484 <SystemInit+0x104>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a30      	ldr	r2, [pc, #192]	; (8000484 <SystemInit+0x104>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b2e      	ldr	r3, [pc, #184]	; (8000484 <SystemInit+0x104>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <SystemInit+0x104>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492c      	ldr	r1, [pc, #176]	; (8000484 <SystemInit+0x104>)
 80003d4:	4b2c      	ldr	r3, [pc, #176]	; (8000488 <SystemInit+0x108>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b29      	ldr	r3, [pc, #164]	; (8000480 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b26      	ldr	r3, [pc, #152]	; (8000480 <SystemInit+0x100>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a24      	ldr	r2, [pc, #144]	; (8000480 <SystemInit+0x100>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b23      	ldr	r3, [pc, #140]	; (8000484 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <SystemInit+0x104>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b20      	ldr	r3, [pc, #128]	; (8000484 <SystemInit+0x104>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b1e      	ldr	r3, [pc, #120]	; (8000484 <SystemInit+0x104>)
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <SystemInit+0x10c>)
 800040c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1d      	ldr	r3, [pc, #116]	; (8000484 <SystemInit+0x104>)
 8000410:	4a1f      	ldr	r2, [pc, #124]	; (8000490 <SystemInit+0x110>)
 8000412:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1b      	ldr	r3, [pc, #108]	; (8000484 <SystemInit+0x104>)
 8000416:	4a1f      	ldr	r2, [pc, #124]	; (8000494 <SystemInit+0x114>)
 8000418:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1a      	ldr	r3, [pc, #104]	; (8000484 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b18      	ldr	r3, [pc, #96]	; (8000484 <SystemInit+0x104>)
 8000422:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <SystemInit+0x114>)
 8000424:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b17      	ldr	r3, [pc, #92]	; (8000484 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b15      	ldr	r3, [pc, #84]	; (8000484 <SystemInit+0x104>)
 800042e:	4a19      	ldr	r2, [pc, #100]	; (8000494 <SystemInit+0x114>)
 8000430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b14      	ldr	r3, [pc, #80]	; (8000484 <SystemInit+0x104>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b12      	ldr	r3, [pc, #72]	; (8000484 <SystemInit+0x104>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a11      	ldr	r2, [pc, #68]	; (8000484 <SystemInit+0x104>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <SystemInit+0x104>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <SystemInit+0x118>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800044e:	4a12      	ldr	r2, [pc, #72]	; (8000498 <SystemInit+0x118>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000454:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b11      	ldr	r3, [pc, #68]	; (800049c <SystemInit+0x11c>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <SystemInit+0x120>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x124>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <SystemInit+0x128>)
 800046c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000470:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	e000ed00 	.word	0xe000ed00
 8000480:	52002000 	.word	0x52002000
 8000484:	58024400 	.word	0x58024400
 8000488:	eaf6ed7f 	.word	0xeaf6ed7f
 800048c:	02020200 	.word	0x02020200
 8000490:	01ff0000 	.word	0x01ff0000
 8000494:	01010280 	.word	0x01010280
 8000498:	580000c0 	.word	0x580000c0
 800049c:	5c001000 	.word	0x5c001000
 80004a0:	ffff0000 	.word	0xffff0000
 80004a4:	51008108 	.word	0x51008108
 80004a8:	52004000 	.word	0x52004000

080004ac <TCPServerThread>:
/*-----------------------------------------------------------------------------------*/


/**** Send RESPONSE every time the client sends some data ******/
static void TCPServerThread(void *arg)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af02      	add	r7, sp, #8
 80004b2:	6078      	str	r0, [r7, #4]
	err_t err, accept_err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2010      	movs	r0, #16
 80004ba:	f009 fe87 	bl	800a1cc <netconn_new_with_proto_and_callback>
 80004be:	4603      	mov	r3, r0
 80004c0:	4a44      	ldr	r2, [pc, #272]	; (80005d4 <TCPServerThread+0x128>)
 80004c2:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 80004c4:	4b43      	ldr	r3, [pc, #268]	; (80005d4 <TCPServerThread+0x128>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d07b      	beq.n	80005c4 <TCPServerThread+0x118>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 80004cc:	4b41      	ldr	r3, [pc, #260]	; (80005d4 <TCPServerThread+0x128>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	220a      	movs	r2, #10
 80004d2:	4941      	ldr	r1, [pc, #260]	; (80005d8 <TCPServerThread+0x12c>)
 80004d4:	4618      	mov	r0, r3
 80004d6:	f009 ff33 	bl	800a340 <netconn_bind>
 80004da:	4603      	mov	r3, r0
 80004dc:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 80004de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d169      	bne.n	80005ba <TCPServerThread+0x10e>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 80004e6:	4b3b      	ldr	r3, [pc, #236]	; (80005d4 <TCPServerThread+0x128>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	21ff      	movs	r1, #255	; 0xff
 80004ec:	4618      	mov	r0, r3
 80004ee:	f009 ff5f 	bl	800a3b0 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 80004f2:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <TCPServerThread+0x128>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4939      	ldr	r1, [pc, #228]	; (80005dc <TCPServerThread+0x130>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f009 ff85 	bl	800a408 <netconn_accept>
 80004fe:	4603      	mov	r3, r0
 8000500:	73bb      	strb	r3, [r7, #14]

				/* Process the new connection. */
				if (accept_err == ERR_OK)
 8000502:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d1f3      	bne.n	80004f2 <TCPServerThread+0x46>
				{

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 800050a:	e042      	b.n	8000592 <TCPServerThread+0xe6>
					{
						/* Extrct the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 800050c:	4b34      	ldr	r3, [pc, #208]	; (80005e0 <TCPServerThread+0x134>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3308      	adds	r3, #8
 8000512:	4a34      	ldr	r2, [pc, #208]	; (80005e4 <TCPServerThread+0x138>)
 8000514:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8000516:	4b32      	ldr	r3, [pc, #200]	; (80005e0 <TCPServerThread+0x134>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	899a      	ldrh	r2, [r3, #12]
 800051c:	4b32      	ldr	r3, [pc, #200]	; (80005e8 <TCPServerThread+0x13c>)
 800051e:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{
							strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8000520:	4b2f      	ldr	r3, [pc, #188]	; (80005e0 <TCPServerThread+0x134>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	6859      	ldr	r1, [r3, #4]
 8000528:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <TCPServerThread+0x134>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	895b      	ldrh	r3, [r3, #10]
 8000530:	461a      	mov	r2, r3
 8000532:	482e      	ldr	r0, [pc, #184]	; (80005ec <TCPServerThread+0x140>)
 8000534:	f017 fd21 	bl	8017f7a <strncpy>

							//for test debug
							strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 8000538:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <TCPServerThread+0x134>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	6859      	ldr	r1, [r3, #4]
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <TCPServerThread+0x134>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	895b      	ldrh	r3, [r3, #10]
 8000548:	461a      	mov	r2, r3
 800054a:	4829      	ldr	r0, [pc, #164]	; (80005f0 <TCPServerThread+0x144>)
 800054c:	f017 fd15 	bl	8017f7a <strncpy>
							TcpServerParsingSeq();

							*/
							// Or modify the message received, so that we can send it back to the client
							//response
							int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8000550:	4a26      	ldr	r2, [pc, #152]	; (80005ec <TCPServerThread+0x140>)
 8000552:	4928      	ldr	r1, [pc, #160]	; (80005f4 <TCPServerThread+0x148>)
 8000554:	4828      	ldr	r0, [pc, #160]	; (80005f8 <TCPServerThread+0x14c>)
 8000556:	f017 fcad 	bl	8017eb4 <siprintf>
 800055a:	60b8      	str	r0, [r7, #8]

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <TCPServerThread+0x130>)
 800055e:	6818      	ldr	r0, [r3, #0]
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	2300      	movs	r3, #0
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	2301      	movs	r3, #1
 8000568:	4923      	ldr	r1, [pc, #140]	; (80005f8 <TCPServerThread+0x14c>)
 800056a:	f00a f9cf 	bl	800a90c <netconn_write_partly>

							memset (msg, '\0', sizeof(msg));  // clear the buffer
 800056e:	2264      	movs	r2, #100	; 0x64
 8000570:	2100      	movs	r1, #0
 8000572:	481e      	ldr	r0, [pc, #120]	; (80005ec <TCPServerThread+0x140>)
 8000574:	f017 fb31 	bl	8017bda <memset>
						}
						while (netbuf_next(buf) >0);
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <TCPServerThread+0x134>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f00e fff5 	bl	800f56c <netbuf_next>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	dccb      	bgt.n	8000520 <TCPServerThread+0x74>

						netbuf_delete(buf);
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <TCPServerThread+0x134>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4618      	mov	r0, r3
 800058e:	f00e ffcd 	bl	800f52c <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000592:	4b12      	ldr	r3, [pc, #72]	; (80005dc <TCPServerThread+0x130>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4912      	ldr	r1, [pc, #72]	; (80005e0 <TCPServerThread+0x134>)
 8000598:	4618      	mov	r0, r3
 800059a:	f00a f93d 	bl	800a818 <netconn_recv>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0b3      	beq.n	800050c <TCPServerThread+0x60>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <TCPServerThread+0x130>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f00a fab1 	bl	800ab10 <netconn_close>
					netconn_delete(newconn);
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <TCPServerThread+0x130>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f009 fea8 	bl	800a308 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 80005b8:	e79b      	b.n	80004f2 <TCPServerThread+0x46>
				}
			}
		}
		else
		{
			netconn_delete(conn);
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <TCPServerThread+0x128>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f009 fea2 	bl	800a308 <netconn_delete>
		}
	}


	vTaskDelete(NULL);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f008 fe3b 	bl	8009240 <vTaskDelete>
}
 80005ca:	bf00      	nop
 80005cc:	3710      	adds	r7, #16
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	240000b4 	.word	0x240000b4
 80005d8:	0801ca58 	.word	0x0801ca58
 80005dc:	240000b8 	.word	0x240000b8
 80005e0:	240000bc 	.word	0x240000bc
 80005e4:	240001ec 	.word	0x240001ec
 80005e8:	240001f0 	.word	0x240001f0
 80005ec:	240000c0 	.word	0x240000c0
 80005f0:	240001f4 	.word	0x240001f4
 80005f4:	08018f10 	.word	0x08018f10
 80005f8:	24000124 	.word	0x24000124

080005fc <TcpServerInit>:



void TcpServerInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af02      	add	r7, sp, #8
  sys_thread_new("TCPServerThread", TCPServerThread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8000602:	2300      	movs	r3, #0
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060a:	2200      	movs	r2, #0
 800060c:	4903      	ldr	r1, [pc, #12]	; (800061c <TcpServerInit+0x20>)
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <TcpServerInit+0x24>)
 8000610:	f010 fa8e 	bl	8010b30 <sys_thread_new>
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	080004ad 	.word	0x080004ad
 8000620:	08018f30 	.word	0x08018f30

08000624 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4a07      	ldr	r2, [pc, #28]	; (8000668 <vApplicationGetIdleTaskMemory+0x2c>)
 800064c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4a06      	ldr	r2, [pc, #24]	; (800066c <vApplicationGetIdleTaskMemory+0x30>)
 8000652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800065a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	24000258 	.word	0x24000258
 800066c:	2400030c 	.word	0x2400030c

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b5b0      	push	{r4, r5, r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  //int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000676:	f000 fa4b 	bl	8000b10 <_ZL10MPU_Configv>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800067a:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <main+0x164>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d11b      	bne.n	80006c8 <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000690:	f3bf 8f4f 	dsb	sy
}
 8000694:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800069c:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <main+0x164>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006a4:	f3bf 8f4f 	dsb	sy
}
 80006a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006aa:	f3bf 8f6f 	isb	sy
}
 80006ae:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006b0:	4b48      	ldr	r3, [pc, #288]	; (80007d4 <main+0x164>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	4a47      	ldr	r2, [pc, #284]	; (80007d4 <main+0x164>)
 80006b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006bc:	f3bf 8f4f 	dsb	sy
}
 80006c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c2:	f3bf 8f6f 	isb	sy
}
 80006c6:	e000      	b.n	80006ca <main+0x5a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006c8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006ca:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <main+0x164>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf14      	ite	ne
 80006d6:	2301      	movne	r3, #1
 80006d8:	2300      	moveq	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d144      	bne.n	800076a <main+0xfa>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006e0:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <main+0x164>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006e8:	f3bf 8f4f 	dsb	sy
}
 80006ec:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <main+0x164>)
 80006f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f4:	62fb      	str	r3, [r7, #44]	; 0x2c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f8:	0b5b      	lsrs	r3, r3, #13
 80006fa:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000702:	08db      	lsrs	r3, r3, #3
 8000704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800070a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800070c:	015a      	lsls	r2, r3, #5
 800070e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000712:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000716:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000718:	492e      	ldr	r1, [pc, #184]	; (80007d4 <main+0x164>)
 800071a:	4313      	orrs	r3, r2
 800071c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	627a      	str	r2, [r7, #36]	; 0x24
 8000726:	2b00      	cmp	r3, #0
 8000728:	bf14      	ite	ne
 800072a:	2301      	movne	r3, #1
 800072c:	2300      	moveq	r3, #0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d000      	beq.n	8000736 <main+0xc6>
      do {
 8000734:	e7e9      	b.n	800070a <main+0x9a>
    } while(sets-- != 0U);
 8000736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000738:	1e5a      	subs	r2, r3, #1
 800073a:	62ba      	str	r2, [r7, #40]	; 0x28
 800073c:	2b00      	cmp	r3, #0
 800073e:	bf14      	ite	ne
 8000740:	2301      	movne	r3, #1
 8000742:	2300      	moveq	r3, #0
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d000      	beq.n	800074c <main+0xdc>
    do {
 800074a:	e7d9      	b.n	8000700 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 800074c:	f3bf 8f4f 	dsb	sy
}
 8000750:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <main+0x164>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a1f      	ldr	r2, [pc, #124]	; (80007d4 <main+0x164>)
 8000758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800075c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800075e:	f3bf 8f4f 	dsb	sy
}
 8000762:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000764:	f3bf 8f6f 	isb	sy
}
 8000768:	e000      	b.n	800076c <main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800076a:	bf00      	nop
 // }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fd44 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f838 	bl	80007e4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000774:	f000 f8d0 	bl	8000918 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <main+0x168>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <main+0x168>)
 8000780:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000784:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <main+0x168>)
 800078a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000796:	2000      	movs	r0, #0
 8000798:	f002 fe40 	bl	800341c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800079c:	2100      	movs	r1, #0
 800079e:	2000      	movs	r0, #0
 80007a0:	f002 fe56 	bl	8003450 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a4:	f000 f8f4 	bl	8000990 <_ZL12MX_GPIO_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <main+0x16c>)
 80007aa:	f107 0408 	add.w	r4, r7, #8
 80007ae:	461d      	mov	r5, r3
 80007b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 fc0e 	bl	8006fe4 <osThreadCreate>
 80007c8:	4603      	mov	r3, r0
 80007ca:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <main+0x170>)
 80007cc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ce:	f006 fbf2 	bl	8006fb6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <main+0x162>
 80007d4:	e000ed00 	.word	0xe000ed00
 80007d8:	58024400 	.word	0x58024400
 80007dc:	08018f94 	.word	0x08018f94
 80007e0:	24000b0c 	.word	0x24000b0c

080007e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f017 f9f1 	bl	8017bda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f017 f9eb 	bl	8017bda <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000804:	2004      	movs	r0, #4
 8000806:	f002 fe37 	bl	8003478 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b3f      	ldr	r3, [pc, #252]	; (800090c <_Z18SystemClock_Configv+0x128>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	4a3e      	ldr	r2, [pc, #248]	; (800090c <_Z18SystemClock_Configv+0x128>)
 8000814:	f023 0301 	bic.w	r3, r3, #1
 8000818:	62d3      	str	r3, [r2, #44]	; 0x2c
 800081a:	4b3c      	ldr	r3, [pc, #240]	; (800090c <_Z18SystemClock_Configv+0x128>)
 800081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b3a      	ldr	r3, [pc, #232]	; (8000910 <_Z18SystemClock_Configv+0x12c>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a39      	ldr	r2, [pc, #228]	; (8000910 <_Z18SystemClock_Configv+0x12c>)
 800082a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b37      	ldr	r3, [pc, #220]	; (8000910 <_Z18SystemClock_Configv+0x12c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	4b34      	ldr	r3, [pc, #208]	; (8000910 <_Z18SystemClock_Configv+0x12c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000848:	bf14      	ite	ne
 800084a:	2301      	movne	r3, #1
 800084c:	2300      	moveq	r3, #0
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b00      	cmp	r3, #0
 8000852:	d000      	beq.n	8000856 <_Z18SystemClock_Configv+0x72>
 8000854:	e7f2      	b.n	800083c <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000856:	4b2f      	ldr	r3, [pc, #188]	; (8000914 <_Z18SystemClock_Configv+0x130>)
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	4a2e      	ldr	r2, [pc, #184]	; (8000914 <_Z18SystemClock_Configv+0x130>)
 800085c:	f023 0303 	bic.w	r3, r3, #3
 8000860:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000862:	230a      	movs	r3, #10
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000866:	2301      	movs	r3, #1
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086a:	2340      	movs	r3, #64	; 0x40
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800086e:	2301      	movs	r3, #1
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000876:	2300      	movs	r3, #0
 8000878:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087a:	2304      	movs	r3, #4
 800087c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 800087e:	2332      	movs	r3, #50	; 0x32
 8000880:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800088a:	2302      	movs	r3, #2
 800088c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800088e:	230c      	movs	r3, #12
 8000890:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000892:	2300      	movs	r3, #0
 8000894:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fe44 	bl	800352c <HAL_RCC_OscConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	bf14      	ite	ne
 80008aa:	2301      	movne	r3, #1
 80008ac:	2300      	moveq	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80008b4:	f000 f990 	bl	8000bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	233f      	movs	r3, #63	; 0x3f
 80008ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008bc:	2303      	movs	r3, #3
 80008be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008c4:	2308      	movs	r3, #8
 80008c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008cc:	2340      	movs	r3, #64	; 0x40
 80008ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2102      	movs	r1, #2
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fa7e 	bl	8003de0 <HAL_RCC_ClockConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	bf14      	ite	ne
 80008ea:	2301      	movne	r3, #1
 80008ec:	2300      	moveq	r3, #0
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 80008f4:	f000 f970 	bl	8000bd8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80008f8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008fc:	2100      	movs	r1, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	f003 fc24 	bl	800414c <HAL_RCC_MCOConfig>
}
 8000904:	bf00      	nop
 8000906:	3770      	adds	r7, #112	; 0x70
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	58000400 	.word	0x58000400
 8000910:	58024800 	.word	0x58024800
 8000914:	58024400 	.word	0x58024400

08000918 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b0b2      	sub	sp, #200	; 0xc8
 800091c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	22c8      	movs	r2, #200	; 0xc8
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f017 f958 	bl	8017bda <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 800092a:	4a18      	ldr	r2, [pc, #96]	; (800098c <_Z24PeriphCommonClock_Configv+0x74>)
 800092c:	f04f 0300 	mov.w	r3, #0
 8000930:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8000938:	2309      	movs	r3, #9
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 1;
 800093c:	2301      	movs	r3, #1
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 1;
 8000944:	2301      	movs	r3, #1
 8000946:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000948:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800094c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800094e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000952:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 8000954:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000958:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 800095a:	2302      	movs	r3, #2
 800095c:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 800095e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000966:	463b      	mov	r3, r7
 8000968:	4618      	mov	r0, r3
 800096a:	f003 fe5b 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	bf14      	ite	ne
 8000974:	2301      	movne	r3, #1
 8000976:	2300      	moveq	r3, #0
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <_Z24PeriphCommonClock_Configv+0x6a>
  {
    Error_Handler();
 800097e:	f000 f92b 	bl	8000bd8 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	37c8      	adds	r7, #200	; 0xc8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	00080100 	.word	0x00080100

08000990 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009a6:	4b28      	ldr	r3, [pc, #160]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b6:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ca:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009cc:	f043 0304 	orr.w	r3, r3, #4
 80009d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	4a17      	ldr	r2, [pc, #92]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	4a10      	ldr	r2, [pc, #64]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <_ZL12MX_GPIO_Initv+0xb8>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000a1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <_ZL12MX_GPIO_Initv+0xbc>)
 8000a3c:	f002 fb3e 	bl	80030bc <HAL_GPIO_Init>

}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	58020000 	.word	0x58020000

08000a50 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a50:	b5b0      	push	{r4, r5, r7, lr}
 8000a52:	b090      	sub	sp, #64	; 0x40
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a58:	f005 fc6c 	bl	8006334 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

	//UdpServerInit();
	//UdpClientInit();
	//TcpClientInit();
	TcpServerInit();
 8000a5c:	f7ff fdce 	bl	80005fc <TcpServerInit>

	/* definition and creation of Task1 */
	osThreadDef(Task1, StartTask1, osPriorityLow, 0, 512);
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <_Z16StartDefaultTaskPKv+0x64>)
 8000a62:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000a66:	461d      	mov	r5, r3
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task1Handle = osThreadCreate(osThread(Task1), NULL);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f006 fab2 	bl	8006fe4 <osThreadCreate>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <_Z16StartDefaultTaskPKv+0x68>)
 8000a84:	6013      	str	r3, [r2, #0]

	/* definition and creation of Task2 */
	osThreadDef(ErrCheckTask, StartErrCheckTask, osPriorityHigh, 0, 512);
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <_Z16StartDefaultTaskPKv+0x6c>)
 8000a88:	f107 0408 	add.w	r4, r7, #8
 8000a8c:	461d      	mov	r5, r3
 8000a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a92:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a96:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	Task2Handle = osThreadCreate(osThread(ErrCheckTask), NULL);
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f006 fa9f 	bl	8006fe4 <osThreadCreate>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_Z16StartDefaultTaskPKv+0x70>)
 8000aaa:	6013      	str	r3, [r2, #0]


  /* Infinite loop */
  for(;;)
  {
	  vTaskDelete(NULL);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f008 fbc7 	bl	8009240 <vTaskDelete>
 8000ab2:	e7fb      	b.n	8000aac <_Z16StartDefaultTaskPKv+0x5c>
 8000ab4:	08018fb0 	.word	0x08018fb0
 8000ab8:	24000b10 	.word	0x24000b10
 8000abc:	08018fcc 	.word	0x08018fcc
 8000ac0:	24000b14 	.word	0x24000b14

08000ac4 <_Z10StartTask1PKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Task1 */
void StartTask1(void const *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */

	const TickType_t xTime = pdMS_TO_TICKS(5);
 8000acc:	2305      	movs	r3, #5
 8000ace:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000ad0:	f008 fe0c 	bl	80096ec <xTaskGetTickCount>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */

  for(;;)
  {
    osDelay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f006 facf 	bl	800707c <osDelay>

	vTaskDelayUntil(&xLastWakeTime, xTime);
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2105      	movs	r1, #5
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f008 fc3b 	bl	8009360 <vTaskDelayUntil>
    osDelay(1);
 8000aea:	e7f5      	b.n	8000ad8 <_Z10StartTask1PKv+0x14>

08000aec <_Z17StartErrCheckTaskPKv>:
* @retval None
*/
/* USER CODE END StartTask2 */

void StartErrCheckTask(void const *argument)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2 */

	const TickType_t xTime = pdMS_TO_TICKS(1);
 8000af4:	2301      	movs	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]

	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000af8:	f008 fdf8 	bl	80096ec <xTaskGetTickCount>
 8000afc:	4603      	mov	r3, r0
 8000afe:	60bb      	str	r3, [r7, #8]
  for(;;)
  {

	//osDelay(1);

	vTaskDelayUntil(&xLastWakeTime, xTime);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2101      	movs	r1, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f008 fc2a 	bl	8009360 <vTaskDelayUntil>
 8000b0c:	e7f8      	b.n	8000b00 <_Z17StartErrCheckTaskPKv+0x14>
	...

08000b10 <_ZL10MPU_Configv>:


/* MPU Configuration */

void MPU_Config(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b22:	f000 fcc5 	bl	80014b0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b26:	2301      	movs	r3, #1
 8000b28:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b32:	231f      	movs	r3, #31
 8000b34:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b36:	2387      	movs	r3, #135	; 0x87
 8000b38:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b42:	2301      	movs	r3, #1
 8000b44:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b46:	2301      	movs	r3, #1
 8000b48:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b52:	463b      	mov	r3, r7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f000 fce3 	bl	8001520 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <_ZL10MPU_Configv+0x9c>)
 8000b60:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000b62:	2310      	movs	r3, #16
 8000b64:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b76:	463b      	mov	r3, r7
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fcd1 	bl	8001520 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <_ZL10MPU_Configv+0xa0>)
 8000b84:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000b86:	2308      	movs	r3, #8
 8000b88:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b96:	463b      	mov	r3, r7
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fcc1 	bl	8001520 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b9e:	2004      	movs	r0, #4
 8000ba0:	f000 fc9e 	bl	80014e0 <HAL_MPU_Enable>

}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	30020000 	.word	0x30020000
 8000bb0:	30040000 	.word	0x30040000

08000bb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d101      	bne.n	8000bca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bc6:	f000 fb53 	bl	8001270 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40001000 	.word	0x40001000

08000bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bdc:	b672      	cpsid	i
}
 8000bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <Error_Handler+0x8>
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x38>)
 8000bec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_MspInit+0x38>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_MspInit+0x38>)
 8000bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	f06f 0001 	mvn.w	r0, #1
 8000c10:	f000 fc26 	bl	8001460 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400

08000c20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b090      	sub	sp, #64	; 0x40
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	d827      	bhi.n	8000c7e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	2036      	movs	r0, #54	; 0x36
 8000c34:	f000 fc14 	bl	8001460 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c38:	2036      	movs	r0, #54	; 0x36
 8000c3a:	f000 fc2b 	bl	8001494 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000c3e:	4a29      	ldr	r2, [pc, #164]	; (8000ce4 <HAL_InitTick+0xc4>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <HAL_InitTick+0xc8>)
 8000c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c4a:	4a27      	ldr	r2, [pc, #156]	; (8000ce8 <HAL_InitTick+0xc8>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c54:	4b24      	ldr	r3, [pc, #144]	; (8000ce8 <HAL_InitTick+0xc8>)
 8000c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c5a:	f003 0310 	and.w	r3, r3, #16
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c62:	f107 0210 	add.w	r2, r7, #16
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f003 fc97 	bl	80045a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c74:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d106      	bne.n	8000c8a <HAL_InitTick+0x6a>
 8000c7c:	e001      	b.n	8000c82 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e02b      	b.n	8000cda <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c82:	f003 fc77 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8000c86:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000c88:	e004      	b.n	8000c94 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c8a:	f003 fc73 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c96:	4a15      	ldr	r2, [pc, #84]	; (8000cec <HAL_InitTick+0xcc>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	0c9b      	lsrs	r3, r3, #18
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000ca4:	4a13      	ldr	r2, [pc, #76]	; (8000cf4 <HAL_InitTick+0xd4>)
 8000ca6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000caa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000cc2:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000cc4:	f005 f85c 	bl	8005d80 <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d104      	bne.n	8000cd8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cce:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <HAL_InitTick+0xd0>)
 8000cd0:	f005 f8b8 	bl	8005e44 <HAL_TIM_Base_Start_IT>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	e000      	b.n	8000cda <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3740      	adds	r7, #64	; 0x40
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	24000008 	.word	0x24000008
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	431bde83 	.word	0x431bde83
 8000cf0:	24000b18 	.word	0x24000b18
 8000cf4:	40001000 	.word	0x40001000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM6_DAC_IRQHandler+0x10>)
 8000d2a:	f005 f903 	bl	8005f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	24000b18 	.word	0x24000b18

08000d38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <ETH_IRQHandler+0x10>)
 8000d3e:	f001 f80b 	bl	8001d58 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000bc8 	.word	0x24000bc8

08000d4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return 1;
 8000d50:	2301      	movs	r3, #1
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <_kill>:

int _kill(int pid, int sig)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <_kill+0x20>)
 8000d68:	2216      	movs	r2, #22
 8000d6a:	601a      	str	r2, [r3, #0]
  return -1;
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	2400f2a4 	.word	0x2400f2a4

08000d80 <_exit>:

void _exit (int status)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ffe5 	bl	8000d5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d92:	e7fe      	b.n	8000d92 <_exit+0x12>

08000d94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
  }

  return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e009      	b.n	8000df4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf1      	blt.n	8000de0 <_write+0x12>
  }
  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d205      	bcs.n	8000eac <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <_sbrk+0x6c>)
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	24080000 	.word	0x24080000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	24000b64 	.word	0x24000b64
 8000ed8:	2400f2a8 	.word	0x2400f2a8
 8000edc:	2400f2a4 	.word	0x2400f2a4

08000ee0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ee0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee4:	f7ff fa4c 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ee8:	480c      	ldr	r0, [pc, #48]	; (8000f1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eec:	4a0d      	ldr	r2, [pc, #52]	; (8000f24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef0:	e002      	b.n	8000ef8 <LoopCopyDataInit>

08000ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ef6:	3304      	adds	r3, #4

08000ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000efc:	d3f9      	bcc.n	8000ef2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f00:	4c0a      	ldr	r4, [pc, #40]	; (8000f2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f04:	e001      	b.n	8000f0a <LoopFillZerobss>

08000f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f08:	3204      	adds	r2, #4

08000f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f0c:	d3fb      	bcc.n	8000f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f016 fe05 	bl	8017b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fbad 	bl	8000670 <main>
  bx  lr
 8000f16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f1c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f20:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8000f24:	0801ccc4 	.word	0x0801ccc4
  ldr r2, =_sbss
 8000f28:	24000098 	.word	0x24000098
  ldr r4, =_ebss
 8000f2c:	2400f2a8 	.word	0x2400f2a8

08000f30 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC3_IRQHandler>

08000f32 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00b      	beq.n	8000f5a <LAN8742_RegisterBusIO+0x28>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d007      	beq.n	8000f5a <LAN8742_RegisterBusIO+0x28>
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d003      	beq.n	8000f5a <LAN8742_RegisterBusIO+0x28>
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f5e:	e014      	b.n	8000f8a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689a      	ldr	r2, [r3, #8]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d17c      	bne.n	80010b0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2220      	movs	r2, #32
 8000fc8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	e01c      	b.n	800100a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	f107 0208 	add.w	r2, r7, #8
 8000fd8:	2112      	movs	r1, #18
 8000fda:	6978      	ldr	r0, [r7, #20]
 8000fdc:	4798      	blx	r3
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da03      	bge.n	8000fec <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000fe4:	f06f 0304 	mvn.w	r3, #4
 8000fe8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000fea:	e00b      	b.n	8001004 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d105      	bne.n	8001004 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	697a      	ldr	r2, [r7, #20]
 8000ffc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
         break;
 8001002:	e005      	b.n	8001010 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b1f      	cmp	r3, #31
 800100e:	d9df      	bls.n	8000fd0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b1f      	cmp	r3, #31
 8001016:	d902      	bls.n	800101e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001018:	f06f 0302 	mvn.w	r3, #2
 800101c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d145      	bne.n	80010b0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6810      	ldr	r0, [r2, #0]
 800102c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001030:	2100      	movs	r1, #0
 8001032:	4798      	blx	r3
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	db37      	blt.n	80010aa <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	6810      	ldr	r0, [r2, #0]
 8001042:	f107 0208 	add.w	r2, r7, #8
 8001046:	2100      	movs	r1, #0
 8001048:	4798      	blx	r3
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	db28      	blt.n	80010a2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4798      	blx	r3
 8001056:	4603      	mov	r3, r0
 8001058:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800105a:	e01c      	b.n	8001096 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4798      	blx	r3
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800106e:	d80e      	bhi.n	800108e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	6810      	ldr	r0, [r2, #0]
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	2100      	movs	r1, #0
 800107e:	4798      	blx	r3
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	da07      	bge.n	8001096 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001086:	f06f 0304 	mvn.w	r3, #4
 800108a:	613b      	str	r3, [r7, #16]
                 break;
 800108c:	e010      	b.n	80010b0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800108e:	f06f 0301 	mvn.w	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
               break;
 8001094:	e00c      	b.n	80010b0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1dd      	bne.n	800105c <LAN8742_Init+0xc6>
 80010a0:	e006      	b.n	80010b0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80010a2:	f06f 0304 	mvn.w	r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	e002      	b.n	80010b0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80010aa:	f06f 0303 	mvn.w	r3, #3
 80010ae:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d113      	bne.n	80010de <LAN8742_Init+0x148>
   {
     tickstart =  pObj->IO.GetTick();
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	4798      	blx	r3
 80010bc:	4603      	mov	r3, r0
 80010be:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= 5000U)
 80010c0:	bf00      	nop
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4798      	blx	r3
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d9f4      	bls.n	80010c2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80010de:	693b      	ldr	r3, [r7, #16]
 }
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	6810      	ldr	r0, [r2, #0]
 80010fc:	f107 020c 	add.w	r2, r7, #12
 8001100:	2101      	movs	r1, #1
 8001102:	4798      	blx	r3
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	da02      	bge.n	8001110 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800110a:	f06f 0304 	mvn.w	r3, #4
 800110e:	e06e      	b.n	80011ee <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6810      	ldr	r0, [r2, #0]
 8001118:	f107 020c 	add.w	r2, r7, #12
 800111c:	2101      	movs	r1, #1
 800111e:	4798      	blx	r3
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	da02      	bge.n	800112c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001126:	f06f 0304 	mvn.w	r3, #4
 800112a:	e060      	b.n	80011ee <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001136:	2301      	movs	r3, #1
 8001138:	e059      	b.n	80011ee <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6810      	ldr	r0, [r2, #0]
 8001142:	f107 020c 	add.w	r2, r7, #12
 8001146:	2100      	movs	r1, #0
 8001148:	4798      	blx	r3
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	da02      	bge.n	8001156 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001150:	f06f 0304 	mvn.w	r3, #4
 8001154:	e04b      	b.n	80011ee <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d11b      	bne.n	8001198 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <LAN8742_GetLinkState+0x90>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001174:	2302      	movs	r3, #2
 8001176:	e03a      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001182:	2303      	movs	r3, #3
 8001184:	e033      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001190:	2304      	movs	r3, #4
 8001192:	e02c      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001194:	2305      	movs	r3, #5
 8001196:	e02a      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6810      	ldr	r0, [r2, #0]
 80011a0:	f107 020c 	add.w	r2, r7, #12
 80011a4:	211f      	movs	r1, #31
 80011a6:	4798      	blx	r3
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	da02      	bge.n	80011b4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80011ae:	f06f 0304 	mvn.w	r3, #4
 80011b2:	e01c      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80011be:	2306      	movs	r3, #6
 80011c0:	e015      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f003 031c 	and.w	r3, r3, #28
 80011c8:	2b18      	cmp	r3, #24
 80011ca:	d101      	bne.n	80011d0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011cc:	2302      	movs	r3, #2
 80011ce:	e00e      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 031c 	and.w	r3, r3, #28
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d101      	bne.n	80011de <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011da:	2303      	movs	r3, #3
 80011dc:	e007      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f003 031c 	and.w	r3, r3, #28
 80011e4:	2b14      	cmp	r3, #20
 80011e6:	d101      	bne.n	80011ec <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011e8:	2304      	movs	r3, #4
 80011ea:	e000      	b.n	80011ee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011ec:	2305      	movs	r3, #5
    }				
  }
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f923 	bl	800144a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001204:	f003 f80c 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8001208:	4602      	mov	r2, r0
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_Init+0x68>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	0a1b      	lsrs	r3, r3, #8
 8001210:	f003 030f 	and.w	r3, r3, #15
 8001214:	4913      	ldr	r1, [pc, #76]	; (8001264 <HAL_Init+0x6c>)
 8001216:	5ccb      	ldrb	r3, [r1, r3]
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_Init+0x68>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_Init+0x6c>)
 800122c:	5cd3      	ldrb	r3, [r2, r3]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_Init+0x70>)
 800123a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800123c:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_Init+0x74>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001242:	200f      	movs	r0, #15
 8001244:	f7ff fcec 	bl	8000c20 <HAL_InitTick>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e002      	b.n	8001258 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001252:	f7ff fcc7 	bl	8000be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58024400 	.word	0x58024400
 8001264:	0801ca28 	.word	0x0801ca28
 8001268:	24000004 	.word	0x24000004
 800126c:	24000000 	.word	0x24000000

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	; (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	2400000c 	.word	0x2400000c
 8001294:	24000b68 	.word	0x24000b68

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	24000b68 	.word	0x24000b68

080012b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <HAL_GetREVID+0x14>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	0c1b      	lsrs	r3, r3, #16
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	5c001000 	.word	0x5c001000

080012c8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80012d8:	4904      	ldr	r1, [pc, #16]	; (80012ec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4313      	orrs	r3, r2
 80012de:	604b      	str	r3, [r1, #4]
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	58000400 	.word	0x58000400

080012f0 <__NVIC_SetPriorityGrouping>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001300:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <__NVIC_SetPriorityGrouping+0x44>)
 800131a:	4313      	orrs	r3, r2
 800131c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800131e:	4a04      	ldr	r2, [pc, #16]	; (8001330 <__NVIC_SetPriorityGrouping+0x40>)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	60d3      	str	r3, [r2, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00
 8001334:	05fa0000 	.word	0x05fa0000

08001338 <__NVIC_GetPriorityGrouping>:
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <__NVIC_GetPriorityGrouping+0x18>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	f003 0307 	and.w	r3, r3, #7
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_EnableIRQ>:
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800135e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001362:	2b00      	cmp	r3, #0
 8001364:	db0b      	blt.n	800137e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001366:	88fb      	ldrh	r3, [r7, #6]
 8001368:	f003 021f 	and.w	r2, r3, #31
 800136c:	4907      	ldr	r1, [pc, #28]	; (800138c <__NVIC_EnableIRQ+0x38>)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	2001      	movs	r0, #1
 8001376:	fa00 f202 	lsl.w	r2, r0, r2
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e100 	.word	0xe000e100

08001390 <__NVIC_SetPriority>:
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800139c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	db0a      	blt.n	80013ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	490c      	ldr	r1, [pc, #48]	; (80013dc <__NVIC_SetPriority+0x4c>)
 80013aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ae:	0112      	lsls	r2, r2, #4
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	440b      	add	r3, r1
 80013b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013b8:	e00a      	b.n	80013d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <__NVIC_SetPriority+0x50>)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	3b04      	subs	r3, #4
 80013c8:	0112      	lsls	r2, r2, #4
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	761a      	strb	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <NVIC_EncodePriority>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f1c3 0307 	rsb	r3, r3, #7
 80013fe:	2b04      	cmp	r3, #4
 8001400:	bf28      	it	cs
 8001402:	2304      	movcs	r3, #4
 8001404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3304      	adds	r3, #4
 800140a:	2b06      	cmp	r3, #6
 800140c:	d902      	bls.n	8001414 <NVIC_EncodePriority+0x30>
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3b03      	subs	r3, #3
 8001412:	e000      	b.n	8001416 <NVIC_EncodePriority+0x32>
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43da      	mvns	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	401a      	ands	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800142c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa01 f303 	lsl.w	r3, r1, r3
 8001436:	43d9      	mvns	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143c:	4313      	orrs	r3, r2
}
 800143e:	4618      	mov	r0, r3
 8001440:	3724      	adds	r7, #36	; 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff4c 	bl	80012f0 <__NVIC_SetPriorityGrouping>
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800146e:	f7ff ff63 	bl	8001338 <__NVIC_GetPriorityGrouping>
 8001472:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	6978      	ldr	r0, [r7, #20]
 800147a:	f7ff ffb3 	bl	80013e4 <NVIC_EncodePriority>
 800147e:	4602      	mov	r2, r0
 8001480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001484:	4611      	mov	r1, r2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ff82 	bl	8001390 <__NVIC_SetPriority>
}
 800148c:	bf00      	nop
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff56 	bl	8001354 <__NVIC_EnableIRQ>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80014b4:	f3bf 8f5f 	dmb	sy
}
 80014b8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_MPU_Disable+0x28>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4a06      	ldr	r2, [pc, #24]	; (80014d8 <HAL_MPU_Disable+0x28>)
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_MPU_Disable+0x2c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	605a      	str	r2, [r3, #4]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00
 80014dc:	e000ed90 	.word	0xe000ed90

080014e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_MPU_Enable+0x38>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_MPU_Enable+0x3c>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_MPU_Enable+0x3c>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014fe:	f3bf 8f4f 	dsb	sy
}
 8001502:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001504:	f3bf 8f6f 	isb	sy
}
 8001508:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed90 	.word	0xe000ed90
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	785a      	ldrb	r2, [r3, #1]
 800152c:	4b1d      	ldr	r3, [pc, #116]	; (80015a4 <HAL_MPU_ConfigRegion+0x84>)
 800152e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d029      	beq.n	800158c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001538:	4a1a      	ldr	r2, [pc, #104]	; (80015a4 <HAL_MPU_ConfigRegion+0x84>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7b1b      	ldrb	r3, [r3, #12]
 8001544:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	7adb      	ldrb	r3, [r3, #11]
 800154a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800154c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7a9b      	ldrb	r3, [r3, #10]
 8001552:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001554:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7b5b      	ldrb	r3, [r3, #13]
 800155a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800155c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7b9b      	ldrb	r3, [r3, #14]
 8001562:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001564:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7bdb      	ldrb	r3, [r3, #15]
 800156a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800156c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7a5b      	ldrb	r3, [r3, #9]
 8001572:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001574:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7a1b      	ldrb	r3, [r3, #8]
 800157a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800157c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001584:	4a07      	ldr	r2, [pc, #28]	; (80015a4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001586:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001588:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800158a:	e005      	b.n	8001598 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_MPU_ConfigRegion+0x84>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <HAL_MPU_ConfigRegion+0x84>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000ed90 	.word	0xe000ed90

080015a8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80015ac:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_GetCurrentCPUID+0x24>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	d101      	bne.n	80015be <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e000      	b.n	80015c0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80015be:	2301      	movs	r3, #1
  }
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0cf      	b.n	8001782 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2223      	movs	r2, #35	; 0x23
 80015f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f005 fb0f 	bl	8006c18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b64      	ldr	r3, [pc, #400]	; (800178c <HAL_ETH_Init+0x1bc>)
 80015fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001600:	4a62      	ldr	r2, [pc, #392]	; (800178c <HAL_ETH_Init+0x1bc>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800160a:	4b60      	ldr	r3, [pc, #384]	; (800178c <HAL_ETH_Init+0x1bc>)
 800160c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	7a1b      	ldrb	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d103      	bne.n	8001628 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001620:	2000      	movs	r0, #0
 8001622:	f7ff fe51 	bl	80012c8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001626:	e003      	b.n	8001630 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001628:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800162c:	f7ff fe4c 	bl	80012c8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001630:	4b57      	ldr	r3, [pc, #348]	; (8001790 <HAL_ETH_Init+0x1c0>)
 8001632:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800164a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800164c:	f7ff fe24 	bl	8001298 <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001652:	e011      	b.n	8001678 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001654:	f7ff fe20 	bl	8001298 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001662:	d909      	bls.n	8001678 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2204      	movs	r2, #4
 8001668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	22e0      	movs	r2, #224	; 0xe0
 8001670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e084      	b.n	8001782 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1e4      	bne.n	8001654 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 ff3c 	bl	8002508 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001690:	f002 ff40 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8001694:	4603      	mov	r3, r0
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_ETH_Init+0x1c4>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9a      	lsrs	r2, r3, #18
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3a01      	subs	r2, #1
 80016a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f001 f935 	bl	8002918 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016ba:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ca:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	22e0      	movs	r2, #224	; 0xe0
 80016e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e049      	b.n	8001782 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_ETH_Init+0x1c8>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6952      	ldr	r2, [r2, #20]
 8001702:	0051      	lsls	r1, r2, #1
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	430b      	orrs	r3, r1
 800170a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800170e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f001 f99d 	bl	8002a52 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f001 f9e3 	bl	8002ae4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	3305      	adds	r3, #5
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021a      	lsls	r2, r3, #8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	3304      	adds	r3, #4
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	3303      	adds	r3, #3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	061a      	lsls	r2, r3, #24
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	3302      	adds	r3, #2
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	3301      	adds	r3, #1
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800175c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800176a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800176c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2210      	movs	r2, #16
 800177c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	58024400 	.word	0x58024400
 8001790:	58000400 	.word	0x58000400
 8001794:	431bde83 	.word	0x431bde83
 8001798:	ffff8001 	.word	0xffff8001

0800179c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d179      	bne.n	80018a2 <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2223      	movs	r2, #35	; 0x23
 80017b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b38      	ldr	r3, [pc, #224]	; (80018ac <HAL_ETH_Start_IT+0x110>)
 80017ca:	430b      	orrs	r3, r1
 80017cc:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_ETH_Start_IT+0x114>)
 80017de:	430b      	orrs	r3, r1
 80017e0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2204      	movs	r2, #4
 80017e8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f9eb 	bl	8001bc6 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 0202 	orr.w	r2, r2, #2
 80017fe:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 0201 	orr.w	r2, r2, #1
 8001820:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800183c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001848:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001858:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001864:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001870:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001874:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001880:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 800188c:	430b      	orrs	r3, r1
 800188e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001892:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2223      	movs	r2, #35	; 0x23
 800189a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	0c020060 	.word	0x0c020060
 80018b0:	0c20c000 	.word	0x0c20c000

080018b4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018c2:	2b23      	cmp	r3, #35	; 0x23
 80018c4:	d165      	bne.n	8001992 <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2223      	movs	r2, #35	; 0x23
 80018ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d6:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_ETH_Stop_IT+0xec>)
 80018e0:	400b      	ands	r3, r1
 80018e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80018e6:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6812      	ldr	r2, [r2, #0]
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001902:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800190e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	f023 0301 	bic.w	r3, r3, #1
 800191a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800191e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0201 	bic.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 0201 	orr.w	r2, r2, #1
 8001942:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0202 	bic.w	r2, r2, #2
 8001954:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	e00e      	b.n	800197a <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	3212      	adds	r2, #18
 8001962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001966:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d9ed      	bls.n	800195c <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2210      	movs	r2, #16
 800198a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	ffff2f3e 	.word	0xffff2f3e

080019a4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e03a      	b.n	8001a3e <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019ce:	2b23      	cmp	r3, #35	; 0x23
 80019d0:	d134      	bne.n	8001a3c <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80019da:	2201      	movs	r2, #1
 80019dc:	6839      	ldr	r1, [r7, #0]
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f001 f8de 	bl	8002ba0 <ETH_Prepare_Tx_Descriptors>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f0:	f043 0202 	orr.w	r2, r3, #2
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e01f      	b.n	8001a3e <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 80019fe:	f3bf 8f4f 	dsb	sy
}
 8001a02:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	1c5a      	adds	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d904      	bls.n	8001a20 <HAL_ETH_Transmit_IT+0x7c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	1f1a      	subs	r2, r3, #4
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3106      	adds	r1, #6
 8001a2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a34:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b088      	sub	sp, #32
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a64:	f043 0201 	orr.w	r2, r3, #1
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e0a5      	b.n	8001bbe <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a78:	2b23      	cmp	r3, #35	; 0x23
 8001a7a:	d001      	beq.n	8001a80 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e09e      	b.n	8001bbe <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69fa      	ldr	r2, [r7, #28]
 8001a8a:	3212      	adds	r2, #18
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a96:	f1c3 0304 	rsb	r3, r3, #4
 8001a9a:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001a9c:	e067      	b.n	8001b6e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d103      	bne.n	8001ace <HAL_ETH_ReadData+0x88>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d03d      	beq.n	8001b4a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d005      	beq.n	8001ae6 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00d      	beq.n	8001b14 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001b24:	461a      	mov	r2, r3
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f005 f9a7 	bl	8006e7c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	441a      	add	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	61fb      	str	r3, [r7, #28]
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d902      	bls.n	8001b5c <HAL_ETH_ReadData+0x116>
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3b04      	subs	r3, #4
 8001b5a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	3212      	adds	r2, #18
 8001b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	db06      	blt.n	8001b84 <HAL_ETH_ReadData+0x13e>
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d202      	bcs.n	8001b84 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8001b7e:	7bfb      	ldrb	r3, [r7, #15]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d08c      	beq.n	8001a9e <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	441a      	add	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f814 	bl	8001bc6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d108      	bne.n	8001bbc <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	e000      	b.n	8001bbe <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b088      	sub	sp, #32
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bda:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69fa      	ldr	r2, [r7, #28]
 8001be0:	3212      	adds	r2, #18
 8001be2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bec:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001bee:	e03b      	b.n	8001c68 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d112      	bne.n	8001c1e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 f90d 	bl	8006e1c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	74fb      	strb	r3, [r7, #19]
 8001c0c:	e007      	b.n	8001c1e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	461a      	mov	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001c1e:	7cfb      	ldrb	r3, [r7, #19]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d021      	beq.n	8001c68 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8001c24:	f3bf 8f5f 	dmb	sy
}
 8001c28:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d004      	beq.n	8001c3c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	e003      	b.n	8001c44 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8001c42:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3301      	adds	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d902      	bls.n	8001c56 <ETH_UpdateDescriptor+0x90>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3b04      	subs	r3, #4
 8001c54:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	3212      	adds	r2, #18
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	617b      	str	r3, [r7, #20]
      desccount--;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <ETH_UpdateDescriptor+0xae>
 8001c6e:	7cfb      	ldrb	r3, [r7, #19]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1bd      	bne.n	8001bf0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d00d      	beq.n	8001c9a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c86:	461a      	mov	r2, r3
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3318      	adds	r3, #24
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cba:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001cc0:	e03f      	b.n	8001d42 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001cea:	7bbb      	ldrb	r3, [r7, #14]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d028      	beq.n	8001d42 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68d9      	ldr	r1, [r3, #12]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	440b      	add	r3, r1
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	db1b      	blt.n	8001d3e <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f005 f91a 	bl	8006f4c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d3c:	e001      	b.n	8001d42 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_ETH_ReleaseTxPacket+0xac>
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1b9      	bne.n	8001cc2 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d68:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d70:	2b40      	cmp	r3, #64	; 0x40
 8001d72:	d115      	bne.n	8001da0 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	d10b      	bne.n	8001da0 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d90:	461a      	mov	r2, r3
 8001d92:	f248 0340 	movw	r3, #32832	; 0x8040
 8001d96:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f004 fbfc 	bl	8006598 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d115      	bne.n	8001de0 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10b      	bne.n	8001de0 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f248 0301 	movw	r3, #32769	; 0x8001
 8001dd6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f004 fbec 	bl	80065b8 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df4:	d153      	bne.n	8001e9e <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e0a:	d148      	bne.n	8001e9e <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	f043 0208 	orr.w	r2, r3, #8
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e30:	d11e      	bne.n	8001e70 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e3a:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8001e3e:	f241 1302 	movw	r3, #4354	; 0x1102
 8001e42:	4013      	ands	r3, r2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e52:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001e5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e62:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	22e0      	movs	r2, #224	; 0xe0
 8001e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001e6e:	e013      	b.n	8001e98 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001e7c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8e:	461a      	mov	r2, r3
 8001e90:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8001e94:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f004 fb9d 	bl	80065d8 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001ea6:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d019      	beq.n	8001ef0 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	f043 0210 	orr.w	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	22e0      	movs	r2, #224	; 0xe0
 8001ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f004 fb78 	bl	80065d8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d10f      	bne.n	8001f20 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f08:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f844 	bl	8001fa0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f28:	f003 0320 	and.w	r3, r3, #32
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d10f      	bne.n	8001f50 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f836 	bl	8001fb4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001f50:	f7ff fb2a 	bl	80015a8 <HAL_GetCurrentCPUID>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d10d      	bne.n	8001f76 <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_ETH_IRQHandler+0x240>)
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d014      	beq.n	8001f90 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_ETH_IRQHandler+0x240>)
 8001f68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f6c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f82a 	bl	8001fc8 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8001f74:	e00c      	b.n	8001f90 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_ETH_IRQHandler+0x244>)
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_ETH_IRQHandler+0x244>)
 8001f84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f81c 	bl	8001fc8 <HAL_ETH_WakeUpCallback>
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	58000080 	.word	0x58000080
 8001f9c:	580000c0 	.word	0x580000c0

08001fa0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e03e      	b.n	800207c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002006:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	055b      	lsls	r3, r3, #21
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	041b      	lsls	r3, r3, #16
 8002020:	4313      	orrs	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f043 030c 	orr.w	r3, r3, #12
 800202a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800203e:	f7ff f92b 	bl	8001298 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002044:	e009      	b.n	800205a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002046:	f7ff f927 	bl	8001298 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002054:	d901      	bls.n	800205a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e010      	b.n	800207c <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ed      	bne.n	8002046 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002072:	b29b      	uxth	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e03c      	b.n	8002120 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	055b      	lsls	r3, r3, #21
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f023 030c 	bic.w	r3, r3, #12
 80020d2:	f043 0304 	orr.w	r3, r3, #4
 80020d6:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b10      	ldr	r3, [pc, #64]	; (8002128 <HAL_ETH_WritePHYRegister+0xa4>)
 80020e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80020ea:	4a0f      	ldr	r2, [pc, #60]	; (8002128 <HAL_ETH_WritePHYRegister+0xa4>)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80020f2:	f7ff f8d1 	bl	8001298 <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020f8:	e009      	b.n	800210e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80020fa:	f7ff f8cd 	bl	8001298 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002108:	d901      	bls.n	800210e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e008      	b.n	8002120 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1ed      	bne.n	80020fa <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40028000 	.word	0x40028000

0800212c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e1c3      	b.n	80024c8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0310 	and.w	r3, r3, #16
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	461a      	mov	r2, r3
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	bf0c      	ite	eq
 8002186:	2301      	moveq	r3, #1
 8002188:	2300      	movne	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 800219e:	2b00      	cmp	r3, #0
 80021a0:	bf14      	ite	ne
 80021a2:	2301      	movne	r3, #1
 80021a4:	2300      	moveq	r3, #0
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	bf0c      	ite	eq
 80021bc:	2301      	moveq	r3, #1
 80021be:	2300      	movne	r3, #0
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	bf14      	ite	ne
 80021d6:	2301      	movne	r3, #1
 80021d8:	2300      	moveq	r3, #0
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf0c      	ite	eq
 800225a:	2301      	moveq	r3, #1
 800225c:	2300      	movne	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	461a      	mov	r2, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80022ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf14      	ite	ne
 80022c2:	2301      	movne	r3, #1
 80022c4:	2300      	moveq	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf0c      	ite	eq
 8002320:	2301      	moveq	r3, #1
 8002322:	2300      	movne	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	bf14      	ite	ne
 800233c:	2301      	movne	r3, #1
 800233e:	2300      	moveq	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf14      	ite	ne
 8002358:	2301      	movne	r3, #1
 800235a:	2300      	moveq	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8002370:	2b00      	cmp	r3, #0
 8002372:	bf14      	ite	ne
 8002374:	2301      	movne	r3, #1
 8002376:	2300      	moveq	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0e5b      	lsrs	r3, r3, #25
 800238a:	f003 021f 	and.w	r2, r3, #31
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	bf14      	ite	ne
 80023a0:	2301      	movne	r3, #1
 80023a2:	2300      	moveq	r3, #0
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 020f 	and.w	r2, r3, #15
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf0c      	ite	eq
 80023e6:	2301      	moveq	r3, #1
 80023e8:	2300      	movne	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	b29a      	uxth	r2, r3
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf14      	ite	ne
 8002420:	2301      	movne	r3, #1
 8002422:	2300      	moveq	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 800243a:	2b00      	cmp	r3, #0
 800243c:	bf14      	ite	ne
 800243e:	2301      	movne	r3, #1
 8002440:	2300      	moveq	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002454:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002464:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf0c      	ite	eq
 80024b8:	2301      	moveq	r3, #1
 80024ba:	2300      	movne	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e00b      	b.n	8002500 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d105      	bne.n	80024fe <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f86d 	bl	80025d4 <ETH_SetMACConfig>

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002518:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002520:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002522:	f001 fff7 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8002526:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4a1e      	ldr	r2, [pc, #120]	; (80025a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d908      	bls.n	8002542 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4a1d      	ldr	r2, [pc, #116]	; (80025a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d804      	bhi.n	8002542 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e027      	b.n	8002592 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a18      	ldr	r2, [pc, #96]	; (80025a8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d908      	bls.n	800255c <HAL_ETH_SetMDIOClockRange+0x54>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4a17      	ldr	r2, [pc, #92]	; (80025ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d204      	bcs.n	800255c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e01a      	b.n	8002592 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4a13      	ldr	r2, [pc, #76]	; (80025ac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d303      	bcc.n	800256c <HAL_ETH_SetMDIOClockRange+0x64>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4a12      	ldr	r2, [pc, #72]	; (80025b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d911      	bls.n	8002590 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d908      	bls.n	8002586 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d804      	bhi.n	8002586 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e005      	b.n	8002592 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	e000      	b.n	8002592 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002590:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	01312cff 	.word	0x01312cff
 80025a8:	02160ebf 	.word	0x02160ebf
 80025ac:	03938700 	.word	0x03938700
 80025b0:	05f5e0ff 	.word	0x05f5e0ff
 80025b4:	08f0d17f 	.word	0x08f0d17f

080025b8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80025e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	791b      	ldrb	r3, [r3, #4]
 80025ec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80025ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	7b1b      	ldrb	r3, [r3, #12]
 80025f4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80025f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	7b5b      	ldrb	r3, [r3, #13]
 80025fc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80025fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	7b9b      	ldrb	r3, [r3, #14]
 8002604:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	7bdb      	ldrb	r3, [r3, #15]
 800260c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800260e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	7c12      	ldrb	r2, [r2, #16]
 8002614:	2a00      	cmp	r2, #0
 8002616:	d102      	bne.n	800261e <ETH_SetMACConfig+0x4a>
 8002618:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800261c:	e000      	b.n	8002620 <ETH_SetMACConfig+0x4c>
 800261e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002620:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	7c52      	ldrb	r2, [r2, #17]
 8002626:	2a00      	cmp	r2, #0
 8002628:	d102      	bne.n	8002630 <ETH_SetMACConfig+0x5c>
 800262a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800262e:	e000      	b.n	8002632 <ETH_SetMACConfig+0x5e>
 8002630:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002632:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	7c9b      	ldrb	r3, [r3, #18]
 8002638:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800263a:	431a      	orrs	r2, r3
               macconf->Speed |
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002640:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002646:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	7f1b      	ldrb	r3, [r3, #28]
 800264c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800264e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	7f5b      	ldrb	r3, [r3, #29]
 8002654:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002656:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	7f92      	ldrb	r2, [r2, #30]
 800265c:	2a00      	cmp	r2, #0
 800265e:	d102      	bne.n	8002666 <ETH_SetMACConfig+0x92>
 8002660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002664:	e000      	b.n	8002668 <ETH_SetMACConfig+0x94>
 8002666:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002668:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	7fdb      	ldrb	r3, [r3, #31]
 800266e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002670:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002678:	2a00      	cmp	r2, #0
 800267a:	d102      	bne.n	8002682 <ETH_SetMACConfig+0xae>
 800267c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002680:	e000      	b.n	8002684 <ETH_SetMACConfig+0xb0>
 8002682:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002684:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800268a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002692:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002694:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b56      	ldr	r3, [pc, #344]	; (8002800 <ETH_SetMACConfig+0x22c>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	68f9      	ldr	r1, [r7, #12]
 80026ae:	430b      	orrs	r3, r1
 80026b0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026be:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026c0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026c8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80026ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80026d2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80026d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80026dc:	2a00      	cmp	r2, #0
 80026de:	d102      	bne.n	80026e6 <ETH_SetMACConfig+0x112>
 80026e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026e4:	e000      	b.n	80026e8 <ETH_SetMACConfig+0x114>
 80026e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80026e8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <ETH_SetMACConfig+0x230>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	68f9      	ldr	r1, [r7, #12]
 8002702:	430b      	orrs	r3, r1
 8002704:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800270c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <ETH_SetMACConfig+0x234>)
 800271e:	4013      	ands	r3, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	430b      	orrs	r3, r1
 8002728:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002730:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002736:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800273e:	2a00      	cmp	r2, #0
 8002740:	d101      	bne.n	8002746 <ETH_SetMACConfig+0x172>
 8002742:	2280      	movs	r2, #128	; 0x80
 8002744:	e000      	b.n	8002748 <ETH_SetMACConfig+0x174>
 8002746:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002748:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800274e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002750:	4313      	orrs	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800275a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800275e:	4013      	ands	r3, r2
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	68f9      	ldr	r1, [r7, #12]
 8002766:	430b      	orrs	r3, r1
 8002768:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002770:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002778:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002786:	f023 0103 	bic.w	r1, r3, #3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	430a      	orrs	r2, r1
 8002792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800279e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80027ba:	2a00      	cmp	r2, #0
 80027bc:	d101      	bne.n	80027c2 <ETH_SetMACConfig+0x1ee>
 80027be:	2240      	movs	r2, #64	; 0x40
 80027c0:	e000      	b.n	80027c4 <ETH_SetMACConfig+0x1f0>
 80027c2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80027c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80027cc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80027ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80027d6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80027e4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80027f4:	bf00      	nop
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	00048083 	.word	0x00048083
 8002804:	c0f88000 	.word	0xc0f88000
 8002808:	fffffef0 	.word	0xfffffef0

0800280c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b38      	ldr	r3, [pc, #224]	; (8002904 <ETH_SetDMAConfig+0xf8>)
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002832:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	791b      	ldrb	r3, [r3, #4]
 8002838:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800283e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	7b1b      	ldrb	r3, [r3, #12]
 8002844:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4b2c      	ldr	r3, [pc, #176]	; (8002908 <ETH_SetDMAConfig+0xfc>)
 8002856:	4013      	ands	r3, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	68f9      	ldr	r1, [r7, #12]
 800285e:	430b      	orrs	r3, r1
 8002860:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002864:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	7b5b      	ldrb	r3, [r3, #13]
 800286a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <ETH_SetDMAConfig+0x100>)
 8002882:	4013      	ands	r3, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	430b      	orrs	r3, r1
 800288c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002890:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	7d1b      	ldrb	r3, [r3, #20]
 800289c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800289e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	7f5b      	ldrb	r3, [r3, #29]
 80028a4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <ETH_SetDMAConfig+0x104>)
 80028b8:	4013      	ands	r3, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	430b      	orrs	r3, r1
 80028c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028c6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	7f1b      	ldrb	r3, [r3, #28]
 80028ce:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <ETH_SetDMAConfig+0x108>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	68f9      	ldr	r1, [r7, #12]
 80028ee:	430b      	orrs	r3, r1
 80028f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028f4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80028f8:	bf00      	nop
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	ffff87fd 	.word	0xffff87fd
 8002908:	ffff2ffe 	.word	0xffff2ffe
 800290c:	fffec000 	.word	0xfffec000
 8002910:	ffc0efef 	.word	0xffc0efef
 8002914:	7fc0ffff 	.word	0x7fc0ffff

08002918 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b0a4      	sub	sp, #144	; 0x90
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002926:	2300      	movs	r3, #0
 8002928:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002942:	2301      	movs	r3, #1
 8002944:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002960:	2300      	movs	r3, #0
 8002962:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002964:	2300      	movs	r3, #0
 8002966:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002970:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002974:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800297c:	2300      	movs	r3, #0
 800297e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002992:	2300      	movs	r3, #0
 8002994:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002996:	2300      	movs	r3, #0
 8002998:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800299a:	2300      	movs	r3, #0
 800299c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80029b0:	2320      	movs	r3, #32
 80029b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80029c2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80029c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029cc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80029d4:	2302      	movs	r3, #2
 80029d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029da:	2300      	movs	r3, #0
 80029dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80029f2:	2300      	movs	r3, #0
 80029f4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a00:	4619      	mov	r1, r3
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fde6 	bl	80025d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002a38:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a3e:	f107 0308 	add.w	r3, r7, #8
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff fee1 	bl	800280c <ETH_SetDMAConfig>
}
 8002a4a:	bf00      	nop
 8002a4c:	3790      	adds	r7, #144	; 0x90
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a52:	b480      	push	{r7}
 8002a54:	b085      	sub	sp, #20
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	e01d      	b.n	8002a9c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68d9      	ldr	r1, [r3, #12]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	3206      	adds	r2, #6
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d9de      	bls.n	8002a60 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ac4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68da      	ldr	r2, [r3, #12]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8002ad8:	bf00      	nop
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	e023      	b.n	8002b3a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6919      	ldr	r1, [r3, #16]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	440b      	add	r3, r1
 8002b02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	3212      	adds	r2, #18
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3301      	adds	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d9d8      	bls.n	8002af2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b66:	461a      	mov	r2, r3
 8002b68:	2303      	movs	r3, #3
 8002b6a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8002b92:	bf00      	nop
 8002b94:	3714      	adds	r7, #20
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
	...

08002ba0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b08d      	sub	sp, #52	; 0x34
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	3318      	adds	r3, #24
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002be2:	d007      	beq.n	8002bf4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	3304      	adds	r3, #4
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e259      	b.n	80030ac <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d044      	beq.n	8002c8e <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c10:	431a      	orrs	r2, r3
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c30:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d027      	beq.n	8002c8e <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	041b      	lsls	r3, r3, #16
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	6a3b      	ldr	r3, [r7, #32]
 8002c6c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002c7c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c8c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00e      	beq.n	8002cb8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	4b51      	ldr	r3, [pc, #324]	; (8002de4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	6992      	ldr	r2, [r2, #24]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d036      	beq.n	8002d3e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cdc:	f3bf 8f5f 	dmb	sy
}
 8002ce0:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d902      	bls.n	8002d00 <ETH_Prepare_Tx_Descriptors+0x160>
 8002cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfc:	3b04      	subs	r3, #4
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d08:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002d10:	6a3b      	ldr	r3, [r7, #32]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d1c:	d10f      	bne.n	8002d3e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d28:	f3bf 8f5f 	dmb	sy
}
 8002d2c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e1b6      	b.n	80030ac <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	3301      	adds	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	689a      	ldr	r2, [r3, #8]
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <ETH_Prepare_Tx_Descriptors+0x244>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	6852      	ldr	r2, [r2, #4]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	461a      	mov	r2, r3
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	6852      	ldr	r2, [r2, #4]
 8002d84:	0412      	lsls	r2, r2, #16
 8002d86:	431a      	orrs	r2, r3
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	e008      	b.n	8002da0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0310 	and.w	r3, r3, #16
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d021      	beq.n	8002df0 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002dac:	6a3b      	ldr	r3, [r7, #32]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	04db      	lsls	r3, r3, #19
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <ETH_Prepare_Tx_Descriptors+0x24c>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	69d2      	ldr	r2, [r2, #28]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	e02e      	b.n	8002e3e <ETH_Prepare_Tx_Descriptors+0x29e>
 8002de0:	ffff0000 	.word	0xffff0000
 8002de4:	ffffc000 	.word	0xffffc000
 8002de8:	c000ffff 	.word	0xc000ffff
 8002dec:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	4b7b      	ldr	r3, [pc, #492]	; (8002fe4 <ETH_Prepare_Tx_Descriptors+0x444>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	6852      	ldr	r2, [r2, #4]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002e0e:	6a3b      	ldr	r3, [r7, #32]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e56:	431a      	orrs	r2, r3
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e74:	f3bf 8f5f 	dmb	sy
}
 8002e78:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	f000 80da 	beq.w	8003048 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e94:	6a3b      	ldr	r3, [r7, #32]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ea6:	e0cf      	b.n	8003048 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d902      	bls.n	8002ec6 <ETH_Prepare_Tx_Descriptors+0x326>
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	3b04      	subs	r3, #4
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ece:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ee8:	d007      	beq.n	8002efa <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eee:	3304      	adds	r3, #4
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d029      	beq.n	8002f4e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f06:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f0c:	e019      	b.n	8002f42 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f0e:	f3bf 8f5f 	dmb	sy
}
 8002f12:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f22:	3301      	adds	r3, #1
 8002f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d902      	bls.n	8002f32 <ETH_Prepare_Tx_Descriptors+0x392>
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f3a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	3301      	adds	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d3e1      	bcc.n	8002f0e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0ae      	b.n	80030ac <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	3301      	adds	r3, #1
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	4b1f      	ldr	r3, [pc, #124]	; (8002fe8 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	431a      	orrs	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d012      	beq.n	8002fa4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	6852      	ldr	r2, [r2, #4]
 8002f9a:	0412      	lsls	r2, r2, #16
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	e008      	b.n	8002fb6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002faa:	6a3b      	ldr	r3, [r7, #32]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <ETH_Prepare_Tx_Descriptors+0x44c>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	6a3a      	ldr	r2, [r7, #32]
 8002fb4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d018      	beq.n	8002ff4 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <ETH_Prepare_Tx_Descriptors+0x450>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	69d2      	ldr	r2, [r2, #28]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	60da      	str	r2, [r3, #12]
 8002fe0:	e020      	b.n	8003024 <ETH_Prepare_Tx_Descriptors+0x484>
 8002fe2:	bf00      	nop
 8002fe4:	ffff8000 	.word	0xffff8000
 8002fe8:	ffffc000 	.word	0xffffc000
 8002fec:	c000ffff 	.word	0xc000ffff
 8002ff0:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <ETH_Prepare_Tx_Descriptors+0x518>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	6852      	ldr	r2, [r2, #4]
 8003000:	431a      	orrs	r2, r3
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d008      	beq.n	8003024 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	431a      	orrs	r2, r3
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	3301      	adds	r3, #1
 8003028:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800302a:	f3bf 8f5f 	dmb	sy
}
 800302e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f af2b 	bne.w	8002ea8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d006      	beq.n	8003066 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	e005      	b.n	8003072 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003082:	6979      	ldr	r1, [r7, #20]
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	3304      	adds	r3, #4
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003092:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i
}
 8003096:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80030a6:	b662      	cpsie	i
}
 80030a8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3734      	adds	r7, #52	; 0x34
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	ffff8000 	.word	0xffff8000

080030bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_GPIO_Init+0x234>)
 80030cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80030ce:	e194      	b.n	80033fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 8186 	beq.w	80033f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f003 0303 	and.w	r3, r3, #3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d005      	beq.n	8003100 <HAL_GPIO_Init+0x44>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d130      	bne.n	8003162 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	2203      	movs	r2, #3
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003136:	2201      	movs	r2, #1
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43db      	mvns	r3, r3
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f003 0201 	and.w	r2, r3, #1
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b03      	cmp	r3, #3
 800316c:	d017      	beq.n	800319e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	2203      	movs	r2, #3
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	689a      	ldr	r2, [r3, #8]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d123      	bne.n	80031f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	08da      	lsrs	r2, r3, #3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	3208      	adds	r2, #8
 80031b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	69b9      	ldr	r1, [r7, #24]
 80031ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43db      	mvns	r3, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 0203 	and.w	r2, r3, #3
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 80e0 	beq.w	80033f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003234:	4b2f      	ldr	r3, [pc, #188]	; (80032f4 <HAL_GPIO_Init+0x238>)
 8003236:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800323a:	4a2e      	ldr	r2, [pc, #184]	; (80032f4 <HAL_GPIO_Init+0x238>)
 800323c:	f043 0302 	orr.w	r3, r3, #2
 8003240:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_GPIO_Init+0x238>)
 8003246:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003252:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <HAL_GPIO_Init+0x23c>)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a20      	ldr	r2, [pc, #128]	; (80032fc <HAL_GPIO_Init+0x240>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d052      	beq.n	8003324 <HAL_GPIO_Init+0x268>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_GPIO_Init+0x244>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d031      	beq.n	80032ea <HAL_GPIO_Init+0x22e>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_GPIO_Init+0x248>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02b      	beq.n	80032e6 <HAL_GPIO_Init+0x22a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_GPIO_Init+0x24c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d025      	beq.n	80032e2 <HAL_GPIO_Init+0x226>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a1c      	ldr	r2, [pc, #112]	; (800330c <HAL_GPIO_Init+0x250>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01f      	beq.n	80032de <HAL_GPIO_Init+0x222>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a1b      	ldr	r2, [pc, #108]	; (8003310 <HAL_GPIO_Init+0x254>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d019      	beq.n	80032da <HAL_GPIO_Init+0x21e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x258>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_GPIO_Init+0x21a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_GPIO_Init+0x25c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00d      	beq.n	80032d2 <HAL_GPIO_Init+0x216>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <HAL_GPIO_Init+0x260>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <HAL_GPIO_Init+0x212>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <HAL_GPIO_Init+0x264>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_GPIO_Init+0x20e>
 80032c6:	2309      	movs	r3, #9
 80032c8:	e02d      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032ca:	230a      	movs	r3, #10
 80032cc:	e02b      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032ce:	2308      	movs	r3, #8
 80032d0:	e029      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032d2:	2307      	movs	r3, #7
 80032d4:	e027      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032d6:	2306      	movs	r3, #6
 80032d8:	e025      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032da:	2305      	movs	r3, #5
 80032dc:	e023      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032de:	2304      	movs	r3, #4
 80032e0:	e021      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e01f      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e01d      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e01b      	b.n	8003326 <HAL_GPIO_Init+0x26a>
 80032ee:	bf00      	nop
 80032f0:	58000080 	.word	0x58000080
 80032f4:	58024400 	.word	0x58024400
 80032f8:	58000400 	.word	0x58000400
 80032fc:	58020000 	.word	0x58020000
 8003300:	58020400 	.word	0x58020400
 8003304:	58020800 	.word	0x58020800
 8003308:	58020c00 	.word	0x58020c00
 800330c:	58021000 	.word	0x58021000
 8003310:	58021400 	.word	0x58021400
 8003314:	58021800 	.word	0x58021800
 8003318:	58021c00 	.word	0x58021c00
 800331c:	58022000 	.word	0x58022000
 8003320:	58022400 	.word	0x58022400
 8003324:	2300      	movs	r3, #0
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	f002 0203 	and.w	r2, r2, #3
 800332c:	0092      	lsls	r2, r2, #2
 800332e:	4093      	lsls	r3, r2
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003336:	4938      	ldr	r1, [pc, #224]	; (8003418 <HAL_GPIO_Init+0x35c>)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800336a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa22 f303 	lsr.w	r3, r2, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	f47f ae63 	bne.w	80030d0 <HAL_GPIO_Init+0x14>
  }
}
 800340a:	bf00      	nop
 800340c:	bf00      	nop
 800340e:	3724      	adds	r7, #36	; 0x24
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	58000400 	.word	0x58000400

0800341c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003424:	4a08      	ldr	r2, [pc, #32]	; (8003448 <HAL_HSEM_FastTake+0x2c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3320      	adds	r3, #32
 800342a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342e:	4a07      	ldr	r2, [pc, #28]	; (800344c <HAL_HSEM_FastTake+0x30>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	58026400 	.word	0x58026400
 800344c:	80000300 	.word	0x80000300

08003450 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800345a:	4906      	ldr	r1, [pc, #24]	; (8003474 <HAL_HSEM_Release+0x24>)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	58026400 	.word	0x58026400

08003478 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003480:	4b29      	ldr	r3, [pc, #164]	; (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	2b06      	cmp	r3, #6
 800348a:	d00a      	beq.n	80034a2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800348c:	4b26      	ldr	r3, [pc, #152]	; (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e040      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e03e      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034a2:	4b21      	ldr	r3, [pc, #132]	; (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80034aa:	491f      	ldr	r1, [pc, #124]	; (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034b2:	f7fd fef1 	bl	8001298 <HAL_GetTick>
 80034b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034b8:	e009      	b.n	80034ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034ba:	f7fd feed 	bl	8001298 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80034c8:	d901      	bls.n	80034ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e028      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034da:	d1ee      	bne.n	80034ba <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b1e      	cmp	r3, #30
 80034e0:	d008      	beq.n	80034f4 <HAL_PWREx_ConfigSupply+0x7c>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b2e      	cmp	r3, #46	; 0x2e
 80034e6:	d005      	beq.n	80034f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b1d      	cmp	r3, #29
 80034ec:	d002      	beq.n	80034f4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b2d      	cmp	r3, #45	; 0x2d
 80034f2:	d114      	bne.n	800351e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034f4:	f7fd fed0 	bl	8001298 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034fa:	e009      	b.n	8003510 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034fc:	f7fd fecc 	bl	8001298 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800350a:	d901      	bls.n	8003510 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e007      	b.n	8003520 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_PWREx_ConfigSupply+0xb0>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351c:	d1ee      	bne.n	80034fc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	58024800 	.word	0x58024800

0800352c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08c      	sub	sp, #48	; 0x30
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f000 bc48 	b.w	8003dd0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8088 	beq.w	800365e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354e:	4b99      	ldr	r3, [pc, #612]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003558:	4b96      	ldr	r3, [pc, #600]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800355a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	2b10      	cmp	r3, #16
 8003562:	d007      	beq.n	8003574 <HAL_RCC_OscConfig+0x48>
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	2b18      	cmp	r3, #24
 8003568:	d111      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
 800356a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d10c      	bne.n	800358e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003574:	4b8f      	ldr	r3, [pc, #572]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d06d      	beq.n	800365c <HAL_RCC_OscConfig+0x130>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d169      	bne.n	800365c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	f000 bc21 	b.w	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003596:	d106      	bne.n	80035a6 <HAL_RCC_OscConfig+0x7a>
 8003598:	4b86      	ldr	r3, [pc, #536]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a85      	ldr	r2, [pc, #532]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800359e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	e02e      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10c      	bne.n	80035c8 <HAL_RCC_OscConfig+0x9c>
 80035ae:	4b81      	ldr	r3, [pc, #516]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a80      	ldr	r2, [pc, #512]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b7e      	ldr	r3, [pc, #504]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7d      	ldr	r2, [pc, #500]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xc0>
 80035d2:	4b78      	ldr	r3, [pc, #480]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a77      	ldr	r2, [pc, #476]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b75      	ldr	r3, [pc, #468]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a74      	ldr	r2, [pc, #464]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xd8>
 80035ec:	4b71      	ldr	r3, [pc, #452]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a70      	ldr	r2, [pc, #448]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6e      	ldr	r3, [pc, #440]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6d      	ldr	r2, [pc, #436]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fd fe44 	bl	8001298 <HAL_GetTick>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fd fe40 	bl	8001298 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e3d4      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fd fe30 	bl	8001298 <HAL_GetTick>
 8003638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fd fe2c 	bl	8001298 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	; 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e3c0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800364e:	4b59      	ldr	r3, [pc, #356]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x110>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 80ca 	beq.w	8003800 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366c:	4b51      	ldr	r3, [pc, #324]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003674:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003676:	4b4f      	ldr	r3, [pc, #316]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_RCC_OscConfig+0x166>
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	2b18      	cmp	r3, #24
 8003686:	d156      	bne.n	8003736 <HAL_RCC_OscConfig+0x20a>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d151      	bne.n	8003736 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003692:	4b48      	ldr	r3, [pc, #288]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e392      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036aa:	4b42      	ldr	r3, [pc, #264]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 0219 	bic.w	r2, r3, #25
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	493f      	ldr	r1, [pc, #252]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fdec 	bl	8001298 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c4:	f7fd fde8 	bl	8001298 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e37c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036d6:	4b37      	ldr	r3, [pc, #220]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e2:	f7fd fde5 	bl	80012b0 <HAL_GetREVID>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d817      	bhi.n	8003720 <HAL_RCC_OscConfig+0x1f4>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b40      	cmp	r3, #64	; 0x40
 80036f6:	d108      	bne.n	800370a <HAL_RCC_OscConfig+0x1de>
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003700:	4a2c      	ldr	r2, [pc, #176]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003706:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003708:	e07a      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	031b      	lsls	r3, r3, #12
 8003718:	4926      	ldr	r1, [pc, #152]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800371a:	4313      	orrs	r3, r2
 800371c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800371e:	e06f      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003720:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	061b      	lsls	r3, r3, #24
 800372e:	4921      	ldr	r1, [pc, #132]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003734:	e064      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d047      	beq.n	80037ce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800373e:	4b1d      	ldr	r3, [pc, #116]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0219 	bic.w	r2, r3, #25
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	491a      	ldr	r1, [pc, #104]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fd fda2 	bl	8001298 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003758:	f7fd fd9e 	bl	8001298 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e332      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800376a:	4b12      	ldr	r3, [pc, #72]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0304 	and.w	r3, r3, #4
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003776:	f7fd fd9b 	bl	80012b0 <HAL_GetREVID>
 800377a:	4603      	mov	r3, r0
 800377c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003780:	4293      	cmp	r3, r2
 8003782:	d819      	bhi.n	80037b8 <HAL_RCC_OscConfig+0x28c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d108      	bne.n	800379e <HAL_RCC_OscConfig+0x272>
 800378c:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003794:	4a07      	ldr	r2, [pc, #28]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379a:	6053      	str	r3, [r2, #4]
 800379c:	e030      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	031b      	lsls	r3, r3, #12
 80037ac:	4901      	ldr	r1, [pc, #4]	; (80037b4 <HAL_RCC_OscConfig+0x288>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e025      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
 80037b4:	58024400 	.word	0x58024400
 80037b8:	4b9a      	ldr	r3, [pc, #616]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	061b      	lsls	r3, r3, #24
 80037c6:	4997      	ldr	r1, [pc, #604]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]
 80037cc:	e018      	b.n	8003800 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ce:	4b95      	ldr	r3, [pc, #596]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a94      	ldr	r2, [pc, #592]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037da:	f7fd fd5d 	bl	8001298 <HAL_GetTick>
 80037de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e2:	f7fd fd59 	bl	8001298 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e2ed      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037f4:	4b8b      	ldr	r3, [pc, #556]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f0      	bne.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80a9 	beq.w	8003960 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800380e:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003816:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003818:	4b82      	ldr	r3, [pc, #520]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d007      	beq.n	8003834 <HAL_RCC_OscConfig+0x308>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b18      	cmp	r3, #24
 8003828:	d13a      	bne.n	80038a0 <HAL_RCC_OscConfig+0x374>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d135      	bne.n	80038a0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003834:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_OscConfig+0x320>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	2b80      	cmp	r3, #128	; 0x80
 8003846:	d001      	beq.n	800384c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e2c1      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800384c:	f7fd fd30 	bl	80012b0 <HAL_GetREVID>
 8003850:	4603      	mov	r3, r0
 8003852:	f241 0203 	movw	r2, #4099	; 0x1003
 8003856:	4293      	cmp	r3, r2
 8003858:	d817      	bhi.n	800388a <HAL_RCC_OscConfig+0x35e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2b20      	cmp	r3, #32
 8003860:	d108      	bne.n	8003874 <HAL_RCC_OscConfig+0x348>
 8003862:	4b70      	ldr	r3, [pc, #448]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800386a:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800386c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003870:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003872:	e075      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003874:	4b6b      	ldr	r3, [pc, #428]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	069b      	lsls	r3, r3, #26
 8003882:	4968      	ldr	r1, [pc, #416]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003888:	e06a      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800388a:	4b66      	ldr	r3, [pc, #408]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	4962      	ldr	r1, [pc, #392]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800389e:	e05f      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	69db      	ldr	r3, [r3, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d042      	beq.n	800392e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80038a8:	4b5e      	ldr	r3, [pc, #376]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a5d      	ldr	r2, [pc, #372]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fcf0 	bl	8001298 <HAL_GetTick>
 80038b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80038bc:	f7fd fcec 	bl	8001298 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e280      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80038ce:	4b55      	ldr	r3, [pc, #340]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f0      	beq.n	80038bc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80038da:	f7fd fce9 	bl	80012b0 <HAL_GetREVID>
 80038de:	4603      	mov	r3, r0
 80038e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d817      	bhi.n	8003918 <HAL_RCC_OscConfig+0x3ec>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d108      	bne.n	8003902 <HAL_RCC_OscConfig+0x3d6>
 80038f0:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80038f8:	4a4a      	ldr	r2, [pc, #296]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80038fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80038fe:	6053      	str	r3, [r2, #4]
 8003900:	e02e      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
 8003902:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	069b      	lsls	r3, r3, #26
 8003910:	4944      	ldr	r1, [pc, #272]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
 8003916:	e023      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	493f      	ldr	r1, [pc, #252]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003928:	4313      	orrs	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
 800392c:	e018      	b.n	8003960 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800392e:	4b3d      	ldr	r3, [pc, #244]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a3c      	ldr	r2, [pc, #240]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003934:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd fcad 	bl	8001298 <HAL_GetTick>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003942:	f7fd fca9 	bl	8001298 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e23d      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003954:	4b33      	ldr	r3, [pc, #204]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d036      	beq.n	80039da <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d019      	beq.n	80039a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003974:	4b2b      	ldr	r3, [pc, #172]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	4a2a      	ldr	r2, [pc, #168]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fd fc8a 	bl	8001298 <HAL_GetTick>
 8003984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003988:	f7fd fc86 	bl	8001298 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e21a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x45c>
 80039a6:	e018      	b.n	80039da <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a8:	4b1e      	ldr	r3, [pc, #120]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ac:	4a1d      	ldr	r2, [pc, #116]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fd fc70 	bl	8001298 <HAL_GetTick>
 80039b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fd fc6c 	bl	8001298 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e200      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039ce:	4b15      	ldr	r3, [pc, #84]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d039      	beq.n	8003a5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 80039f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80039fa:	f7fd fc4d 	bl	8001298 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a02:	f7fd fc49 	bl	8001298 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e1dd      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a14:	4b03      	ldr	r3, [pc, #12]	; (8003a24 <HAL_RCC_OscConfig+0x4f8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x4d6>
 8003a20:	e01b      	b.n	8003a5a <HAL_RCC_OscConfig+0x52e>
 8003a22:	bf00      	nop
 8003a24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a28:	4b9b      	ldr	r3, [pc, #620]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a9a      	ldr	r2, [pc, #616]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003a2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003a34:	f7fd fc30 	bl	8001298 <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a3c:	f7fd fc2c 	bl	8001298 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e1c0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a4e:	4b92      	ldr	r3, [pc, #584]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 8081 	beq.w	8003b6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a68:	4b8c      	ldr	r3, [pc, #560]	; (8003c9c <HAL_RCC_OscConfig+0x770>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a8b      	ldr	r2, [pc, #556]	; (8003c9c <HAL_RCC_OscConfig+0x770>)
 8003a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a74:	f7fd fc10 	bl	8001298 <HAL_GetTick>
 8003a78:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7c:	f7fd fc0c 	bl	8001298 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e1a0      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8e:	4b83      	ldr	r3, [pc, #524]	; (8003c9c <HAL_RCC_OscConfig+0x770>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d106      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x584>
 8003aa2:	4b7d      	ldr	r3, [pc, #500]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4a7c      	ldr	r2, [pc, #496]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	6713      	str	r3, [r2, #112]	; 0x70
 8003aae:	e02d      	b.n	8003b0c <HAL_RCC_OscConfig+0x5e0>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10c      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x5a6>
 8003ab8:	4b77      	ldr	r3, [pc, #476]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abc:	4a76      	ldr	r2, [pc, #472]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac4:	4b74      	ldr	r3, [pc, #464]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac8:	4a73      	ldr	r2, [pc, #460]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aca:	f023 0304 	bic.w	r3, r3, #4
 8003ace:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad0:	e01c      	b.n	8003b0c <HAL_RCC_OscConfig+0x5e0>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c8>
 8003ada:	4b6f      	ldr	r3, [pc, #444]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	4a6e      	ldr	r2, [pc, #440]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	f043 0304 	orr.w	r3, r3, #4
 8003ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aea:	4a6b      	ldr	r2, [pc, #428]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003aec:	f043 0301 	orr.w	r3, r3, #1
 8003af0:	6713      	str	r3, [r2, #112]	; 0x70
 8003af2:	e00b      	b.n	8003b0c <HAL_RCC_OscConfig+0x5e0>
 8003af4:	4b68      	ldr	r3, [pc, #416]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af8:	4a67      	ldr	r2, [pc, #412]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	6713      	str	r3, [r2, #112]	; 0x70
 8003b00:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a64      	ldr	r2, [pc, #400]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b06:	f023 0304 	bic.w	r3, r3, #4
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d015      	beq.n	8003b40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fbc0 	bl	8001298 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b1a:	e00a      	b.n	8003b32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1c:	f7fd fbbc 	bl	8001298 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e14e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b32:	4b59      	ldr	r3, [pc, #356]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ee      	beq.n	8003b1c <HAL_RCC_OscConfig+0x5f0>
 8003b3e:	e014      	b.n	8003b6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd fbaa 	bl	8001298 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b48:	f7fd fba6 	bl	8001298 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e138      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b5e:	4b4e      	ldr	r3, [pc, #312]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1ee      	bne.n	8003b48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	f000 812d 	beq.w	8003dce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003b74:	4b48      	ldr	r3, [pc, #288]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b7c:	2b18      	cmp	r3, #24
 8003b7e:	f000 80bd 	beq.w	8003cfc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	f040 809e 	bne.w	8003cc8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b8c:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a41      	ldr	r2, [pc, #260]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fb7e 	bl	8001298 <HAL_GetTick>
 8003b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd fb7a 	bl	8001298 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e10e      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bbe:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bc2:	4b37      	ldr	r3, [pc, #220]	; (8003ca0 <HAL_RCC_OscConfig+0x774>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4931      	ldr	r1, [pc, #196]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be6:	3b01      	subs	r3, #1
 8003be8:	025b      	lsls	r3, r3, #9
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	3b01      	subs	r3, #1
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c08:	4923      	ldr	r1, [pc, #140]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c14:	f023 0301 	bic.w	r3, r3, #1
 8003c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c1a:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1e:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_RCC_OscConfig+0x778>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c26:	00d2      	lsls	r2, r2, #3
 8003c28:	491b      	ldr	r1, [pc, #108]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	f023 020c 	bic.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	4917      	ldr	r1, [pc, #92]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	f023 0202 	bic.w	r2, r3, #2
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	4912      	ldr	r1, [pc, #72]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	4a10      	ldr	r2, [pc, #64]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	4a0a      	ldr	r2, [pc, #40]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003c76:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a04      	ldr	r2, [pc, #16]	; (8003c98 <HAL_RCC_OscConfig+0x76c>)
 8003c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fb03 	bl	8001298 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c94:	e011      	b.n	8003cba <HAL_RCC_OscConfig+0x78e>
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	58024800 	.word	0x58024800
 8003ca0:	fffffc0c 	.word	0xfffffc0c
 8003ca4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca8:	f7fd faf6 	bl	8001298 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e08a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x77c>
 8003cc6:	e082      	b.n	8003dce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc8:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd fae0 	bl	8001298 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cdc:	f7fd fadc 	bl	8001298 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e070      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003cee:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x7b0>
 8003cfa:	e068      	b.n	8003dce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003cfc:	4b36      	ldr	r3, [pc, #216]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003d02:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d031      	beq.n	8003d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d12a      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d122      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11a      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	0a5b      	lsrs	r3, r3, #9
 8003d42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d111      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d108      	bne.n	8003d74 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	0e1b      	lsrs	r3, r3, #24
 8003d66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d001      	beq.n	8003d78 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e02b      	b.n	8003dd0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003d78:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d82:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d01f      	beq.n	8003dce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	4a11      	ldr	r2, [pc, #68]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d9a:	f7fd fa7d 	bl	8001298 <HAL_GetTick>
 8003d9e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003da0:	bf00      	nop
 8003da2:	f7fd fa79 	bl	8001298 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d0f9      	beq.n	8003da2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <HAL_RCC_OscConfig+0x8b0>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003dba:	00d2      	lsls	r2, r2, #3
 8003dbc:	4906      	ldr	r1, [pc, #24]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <HAL_RCC_OscConfig+0x8ac>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3730      	adds	r7, #48	; 0x30
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	58024400 	.word	0x58024400
 8003ddc:	ffff0007 	.word	0xffff0007

08003de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e19c      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003df4:	4b8a      	ldr	r3, [pc, #552]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	683a      	ldr	r2, [r7, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d910      	bls.n	8003e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e02:	4b87      	ldr	r3, [pc, #540]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f023 020f 	bic.w	r2, r3, #15
 8003e0a:	4985      	ldr	r1, [pc, #532]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e12:	4b83      	ldr	r3, [pc, #524]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e184      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	4b7b      	ldr	r3, [pc, #492]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d908      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003e40:	4b78      	ldr	r3, [pc, #480]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4975      	ldr	r1, [pc, #468]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d010      	beq.n	8003e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	4b70      	ldr	r3, [pc, #448]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d908      	bls.n	8003e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003e6e:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	496a      	ldr	r1, [pc, #424]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d010      	beq.n	8003eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	4b64      	ldr	r3, [pc, #400]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d908      	bls.n	8003eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003e9c:	4b61      	ldr	r3, [pc, #388]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	495e      	ldr	r1, [pc, #376]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d908      	bls.n	8003edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003eca:	4b56      	ldr	r3, [pc, #344]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	4953      	ldr	r1, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d010      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	4b4d      	ldr	r3, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d908      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b4a      	ldr	r3, [pc, #296]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f023 020f 	bic.w	r2, r3, #15
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4947      	ldr	r1, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d055      	beq.n	8003fc2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003f16:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4940      	ldr	r1, [pc, #256]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f30:	4b3c      	ldr	r3, [pc, #240]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d121      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0f6      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d107      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f48:	4b36      	ldr	r3, [pc, #216]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d115      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0ea      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f60:	4b30      	ldr	r3, [pc, #192]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e0de      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f70:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e0d6      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f80:	4b28      	ldr	r3, [pc, #160]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f023 0207 	bic.w	r2, r3, #7
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4925      	ldr	r1, [pc, #148]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f92:	f7fd f981 	bl	8001298 <HAL_GetTick>
 8003f96:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9a:	f7fd f97d 	bl	8001298 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0be      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d1eb      	bne.n	8003f9a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d010      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 030f 	and.w	r3, r3, #15
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d208      	bcs.n	8003ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f023 020f 	bic.w	r2, r3, #15
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x244>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d214      	bcs.n	8004028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 020f 	bic.w	r2, r3, #15
 8004006:	4906      	ldr	r1, [pc, #24]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <HAL_RCC_ClockConfig+0x240>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d005      	beq.n	8004028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e086      	b.n	800412e <HAL_RCC_ClockConfig+0x34e>
 8004020:	52002000 	.word	0x52002000
 8004024:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004040:	429a      	cmp	r2, r3
 8004042:	d208      	bcs.n	8004056 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004044:	4b3c      	ldr	r3, [pc, #240]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4939      	ldr	r1, [pc, #228]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004052:	4313      	orrs	r3, r2
 8004054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d010      	beq.n	8004084 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	4b34      	ldr	r3, [pc, #208]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800406e:	429a      	cmp	r2, r3
 8004070:	d208      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004072:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	492e      	ldr	r1, [pc, #184]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004080:	4313      	orrs	r3, r2
 8004082:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b00      	cmp	r3, #0
 800408e:	d010      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699a      	ldr	r2, [r3, #24]
 8004094:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800409c:	429a      	cmp	r2, r3
 800409e:	d208      	bcs.n	80040b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	699b      	ldr	r3, [r3, #24]
 80040ac:	4922      	ldr	r1, [pc, #136]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69da      	ldr	r2, [r3, #28]
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d208      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4917      	ldr	r1, [pc, #92]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040e0:	f000 f89e 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80040e4:	4602      	mov	r2, r0
 80040e6:	4b14      	ldr	r3, [pc, #80]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	4912      	ldr	r1, [pc, #72]	; (800413c <HAL_RCC_ClockConfig+0x35c>)
 80040f2:	5ccb      	ldrb	r3, [r1, r3]
 80040f4:	f003 031f 	and.w	r3, r3, #31
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <HAL_RCC_ClockConfig+0x358>)
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <HAL_RCC_ClockConfig+0x35c>)
 8004108:	5cd3      	ldrb	r3, [r2, r3]
 800410a:	f003 031f 	and.w	r3, r3, #31
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	fa22 f303 	lsr.w	r3, r2, r3
 8004114:	4a0a      	ldr	r2, [pc, #40]	; (8004140 <HAL_RCC_ClockConfig+0x360>)
 8004116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <HAL_RCC_ClockConfig+0x364>)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x368>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fd7c 	bl	8000c20 <HAL_InitTick>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	58024400 	.word	0x58024400
 800413c:	0801ca28 	.word	0x0801ca28
 8004140:	24000004 	.word	0x24000004
 8004144:	24000000 	.word	0x24000000
 8004148:	24000008 	.word	0x24000008

0800414c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08c      	sub	sp, #48	; 0x30
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d12a      	bne.n	80041b4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800415e:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 8004160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004164:	4a2b      	ldr	r2, [pc, #172]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 8004166:	f043 0301 	orr.w	r3, r3, #1
 800416a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800416e:	4b29      	ldr	r3, [pc, #164]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 8004170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800417c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004182:	2302      	movs	r3, #2
 8004184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004186:	2303      	movs	r3, #3
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800418e:	2300      	movs	r3, #0
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004192:	f107 031c 	add.w	r3, r7, #28
 8004196:	4619      	mov	r1, r3
 8004198:	481f      	ldr	r0, [pc, #124]	; (8004218 <HAL_RCC_MCOConfig+0xcc>)
 800419a:	f7fe ff8f 	bl	80030bc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	430b      	orrs	r3, r1
 80041ac:	4919      	ldr	r1, [pc, #100]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80041b2:	e02a      	b.n	800420a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80041b4:	4b17      	ldr	r3, [pc, #92]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 80041b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ba:	4a16      	ldr	r2, [pc, #88]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 80041bc:	f043 0304 	orr.w	r3, r3, #4
 80041c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041c4:	4b13      	ldr	r3, [pc, #76]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 80041c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80041d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	2302      	movs	r3, #2
 80041da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041dc:	2303      	movs	r3, #3
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80041e4:	2300      	movs	r3, #0
 80041e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80041e8:	f107 031c 	add.w	r3, r7, #28
 80041ec:	4619      	mov	r1, r3
 80041ee:	480b      	ldr	r0, [pc, #44]	; (800421c <HAL_RCC_MCOConfig+0xd0>)
 80041f0:	f7fe ff64 	bl	80030bc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	01d9      	lsls	r1, r3, #7
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	430b      	orrs	r3, r1
 8004204:	4903      	ldr	r1, [pc, #12]	; (8004214 <HAL_RCC_MCOConfig+0xc8>)
 8004206:	4313      	orrs	r3, r2
 8004208:	610b      	str	r3, [r1, #16]
}
 800420a:	bf00      	nop
 800420c:	3730      	adds	r7, #48	; 0x30
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	58024400 	.word	0x58024400
 8004218:	58020000 	.word	0x58020000
 800421c:	58020800 	.word	0x58020800

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	; 0x24
 8004224:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004226:	4bb3      	ldr	r3, [pc, #716]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800422e:	2b18      	cmp	r3, #24
 8004230:	f200 8155 	bhi.w	80044de <HAL_RCC_GetSysClockFreq+0x2be>
 8004234:	a201      	add	r2, pc, #4	; (adr r2, 800423c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423a:	bf00      	nop
 800423c:	080042a1 	.word	0x080042a1
 8004240:	080044df 	.word	0x080044df
 8004244:	080044df 	.word	0x080044df
 8004248:	080044df 	.word	0x080044df
 800424c:	080044df 	.word	0x080044df
 8004250:	080044df 	.word	0x080044df
 8004254:	080044df 	.word	0x080044df
 8004258:	080044df 	.word	0x080044df
 800425c:	080042c7 	.word	0x080042c7
 8004260:	080044df 	.word	0x080044df
 8004264:	080044df 	.word	0x080044df
 8004268:	080044df 	.word	0x080044df
 800426c:	080044df 	.word	0x080044df
 8004270:	080044df 	.word	0x080044df
 8004274:	080044df 	.word	0x080044df
 8004278:	080044df 	.word	0x080044df
 800427c:	080042cd 	.word	0x080042cd
 8004280:	080044df 	.word	0x080044df
 8004284:	080044df 	.word	0x080044df
 8004288:	080044df 	.word	0x080044df
 800428c:	080044df 	.word	0x080044df
 8004290:	080044df 	.word	0x080044df
 8004294:	080044df 	.word	0x080044df
 8004298:	080044df 	.word	0x080044df
 800429c:	080042d3 	.word	0x080042d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042a0:	4b94      	ldr	r3, [pc, #592]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80042ac:	4b91      	ldr	r3, [pc, #580]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	4a90      	ldr	r2, [pc, #576]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80042be:	e111      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80042c0:	4b8d      	ldr	r3, [pc, #564]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80042c2:	61bb      	str	r3, [r7, #24]
      break;
 80042c4:	e10e      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80042c6:	4b8d      	ldr	r3, [pc, #564]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042c8:	61bb      	str	r3, [r7, #24]
      break;
 80042ca:	e10b      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80042cc:	4b8c      	ldr	r3, [pc, #560]	; (8004500 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80042ce:	61bb      	str	r3, [r7, #24]
      break;
 80042d0:	e108      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042d2:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	f003 0303 	and.w	r3, r3, #3
 80042da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80042dc:	4b85      	ldr	r3, [pc, #532]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80042e8:	4b82      	ldr	r3, [pc, #520]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80042f2:	4b80      	ldr	r3, [pc, #512]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f6:	08db      	lsrs	r3, r3, #3
 80042f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80e1 	beq.w	80044d8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b02      	cmp	r3, #2
 800431a:	f000 8083 	beq.w	8004424 <HAL_RCC_GetSysClockFreq+0x204>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b02      	cmp	r3, #2
 8004322:	f200 80a1 	bhi.w	8004468 <HAL_RCC_GetSysClockFreq+0x248>
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0x114>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d056      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004332:	e099      	b.n	8004468 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004334:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d02d      	beq.n	800439c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004340:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	08db      	lsrs	r3, r3, #3
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	4a6b      	ldr	r2, [pc, #428]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
 8004350:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	ee07 3a90 	vmov	s15, r3
 8004358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800436a:	4b62      	ldr	r3, [pc, #392]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004372:	ee07 3a90 	vmov	s15, r3
 8004376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800437a:	ed97 6a02 	vldr	s12, [r7, #8]
 800437e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800438a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800438e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004396:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800439a:	e087      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004508 <HAL_RCC_GetSysClockFreq+0x2e8>
 80043aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ae:	4b51      	ldr	r3, [pc, #324]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043be:	ed97 6a02 	vldr	s12, [r7, #8]
 80043c2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2e4>
 80043c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80043de:	e065      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043ea:	eddf 6a48 	vldr	s13, [pc, #288]	; 800450c <HAL_RCC_GetSysClockFreq+0x2ec>
 80043ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043f2:	4b40      	ldr	r3, [pc, #256]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004402:	ed97 6a02 	vldr	s12, [r7, #8]
 8004406:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800440a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800440e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800441a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004422:	e043      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800442e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004510 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004436:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800443e:	ee07 3a90 	vmov	s15, r3
 8004442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004446:	ed97 6a02 	vldr	s12, [r7, #8]
 800444a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2e4>
 800444e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800445a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800445e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004466:	e021      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	eddf 6a26 	vldr	s13, [pc, #152]	; 800450c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447a:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448a:	ed97 6a02 	vldr	s12, [r7, #8]
 800448e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004504 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800449e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044aa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80044ac:	4b11      	ldr	r3, [pc, #68]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b0:	0a5b      	lsrs	r3, r3, #9
 80044b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b6:	3301      	adds	r3, #1
 80044b8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d0:	ee17 3a90 	vmov	r3, s15
 80044d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80044d6:	e005      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
      break;
 80044dc:	e002      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044e0:	61bb      	str	r3, [r7, #24]
      break;
 80044e2:	bf00      	nop
  }

  return sysclockfreq;
 80044e4:	69bb      	ldr	r3, [r7, #24]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3724      	adds	r7, #36	; 0x24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
 80044f8:	03d09000 	.word	0x03d09000
 80044fc:	003d0900 	.word	0x003d0900
 8004500:	017d7840 	.word	0x017d7840
 8004504:	46000000 	.word	0x46000000
 8004508:	4c742400 	.word	0x4c742400
 800450c:	4a742400 	.word	0x4a742400
 8004510:	4bbebc20 	.word	0x4bbebc20

08004514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800451a:	f7ff fe81 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 800451e:	4602      	mov	r2, r0
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_GetHCLKFreq+0x50>)
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	0a1b      	lsrs	r3, r3, #8
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	490f      	ldr	r1, [pc, #60]	; (8004568 <HAL_RCC_GetHCLKFreq+0x54>)
 800452c:	5ccb      	ldrb	r3, [r1, r3]
 800452e:	f003 031f 	and.w	r3, r3, #31
 8004532:	fa22 f303 	lsr.w	r3, r2, r3
 8004536:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004538:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_GetHCLKFreq+0x50>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	4a09      	ldr	r2, [pc, #36]	; (8004568 <HAL_RCC_GetHCLKFreq+0x54>)
 8004542:	5cd3      	ldrb	r3, [r2, r3]
 8004544:	f003 031f 	and.w	r3, r3, #31
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	fa22 f303 	lsr.w	r3, r2, r3
 800454e:	4a07      	ldr	r2, [pc, #28]	; (800456c <HAL_RCC_GetHCLKFreq+0x58>)
 8004550:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004552:	4a07      	ldr	r2, [pc, #28]	; (8004570 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <HAL_RCC_GetHCLKFreq+0x58>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	58024400 	.word	0x58024400
 8004568:	0801ca28 	.word	0x0801ca28
 800456c:	24000004 	.word	0x24000004
 8004570:	24000000 	.word	0x24000000

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004578:	f7ff ffcc 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b06      	ldr	r3, [pc, #24]	; (8004598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	4904      	ldr	r1, [pc, #16]	; (800459c <HAL_RCC_GetPCLK1Freq+0x28>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	58024400 	.word	0x58024400
 800459c:	0801ca28 	.word	0x0801ca28

080045a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	223f      	movs	r2, #63	; 0x3f
 80045ae:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045b0:	4b1a      	ldr	r3, [pc, #104]	; (800461c <HAL_RCC_GetClockConfig+0x7c>)
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	f003 0207 	and.w	r2, r3, #7
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80045bc:	4b17      	ldr	r3, [pc, #92]	; (800461c <HAL_RCC_GetClockConfig+0x7c>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80045c8:	4b14      	ldr	r3, [pc, #80]	; (800461c <HAL_RCC_GetClockConfig+0x7c>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80045d4:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_RCC_GetClockConfig+0x7c>)
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <HAL_RCC_GetClockConfig+0x7c>)
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_GetClockConfig+0x7c>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80045f8:	4b08      	ldr	r3, [pc, #32]	; (800461c <HAL_RCC_GetClockConfig+0x7c>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_RCC_GetClockConfig+0x80>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	601a      	str	r2, [r3, #0]
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	58024400 	.word	0x58024400
 8004620:	52002000 	.word	0x52002000

08004624 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b0cc      	sub	sp, #304	; 0x130
 800462a:	af00      	add	r7, sp, #0
 800462c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004630:	2300      	movs	r3, #0
 8004632:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004636:	2300      	movs	r3, #0
 8004638:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800463c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004648:	2500      	movs	r5, #0
 800464a:	ea54 0305 	orrs.w	r3, r4, r5
 800464e:	d049      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800465a:	d02f      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800465c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004660:	d828      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004662:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004666:	d01a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004668:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800466c:	d822      	bhi.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004676:	d007      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004678:	e01c      	b.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467a:	4bb8      	ldr	r3, [pc, #736]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	4ab7      	ldr	r2, [pc, #732]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004686:	e01a      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004688:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800468c:	3308      	adds	r3, #8
 800468e:	2102      	movs	r1, #2
 8004690:	4618      	mov	r0, r3
 8004692:	f001 fa11 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800469c:	e00f      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800469e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046a2:	3328      	adds	r3, #40	; 0x28
 80046a4:	2102      	movs	r1, #2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 fab8 	bl	8005c1c <RCCEx_PLL3_Config>
 80046ac:	4603      	mov	r3, r0
 80046ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046b2:	e004      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80046ba:	e000      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80046bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80046c6:	4ba5      	ldr	r3, [pc, #660]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80046ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d4:	4aa1      	ldr	r2, [pc, #644]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046d6:	430b      	orrs	r3, r1
 80046d8:	6513      	str	r3, [r2, #80]	; 0x50
 80046da:	e003      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046dc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046e0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80046f0:	f04f 0900 	mov.w	r9, #0
 80046f4:	ea58 0309 	orrs.w	r3, r8, r9
 80046f8:	d047      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80046fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	2b04      	cmp	r3, #4
 8004702:	d82a      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	08004721 	.word	0x08004721
 8004710:	0800472f 	.word	0x0800472f
 8004714:	08004745 	.word	0x08004745
 8004718:	08004763 	.word	0x08004763
 800471c:	08004763 	.word	0x08004763
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004720:	4b8e      	ldr	r3, [pc, #568]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	4a8d      	ldr	r2, [pc, #564]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800472a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800472c:	e01a      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004732:	3308      	adds	r3, #8
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f001 f9be 	bl	8005ab8 <RCCEx_PLL2_Config>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004742:	e00f      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004748:	3328      	adds	r3, #40	; 0x28
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f001 fa65 	bl	8005c1c <RCCEx_PLL3_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004758:	e004      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004760:	e000      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004764:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800476c:	4b7b      	ldr	r3, [pc, #492]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	f023 0107 	bic.w	r1, r3, #7
 8004774:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477a:	4a78      	ldr	r2, [pc, #480]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800477c:	430b      	orrs	r3, r1
 800477e:	6513      	str	r3, [r2, #80]	; 0x50
 8004780:	e003      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004782:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004786:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800478a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8004796:	f04f 0b00 	mov.w	fp, #0
 800479a:	ea5a 030b 	orrs.w	r3, sl, fp
 800479e:	d04c      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80047a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d030      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80047ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047b0:	d829      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047b2:	2bc0      	cmp	r3, #192	; 0xc0
 80047b4:	d02d      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80047b6:	2bc0      	cmp	r3, #192	; 0xc0
 80047b8:	d825      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047ba:	2b80      	cmp	r3, #128	; 0x80
 80047bc:	d018      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80047be:	2b80      	cmp	r3, #128	; 0x80
 80047c0:	d821      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	d007      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80047ca:	e01c      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047cc:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a62      	ldr	r2, [pc, #392]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047d8:	e01c      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047de:	3308      	adds	r3, #8
 80047e0:	2100      	movs	r1, #0
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f968 	bl	8005ab8 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80047ee:	e011      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047f4:	3328      	adds	r3, #40	; 0x28
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 fa0f 	bl	8005c1c <RCCEx_PLL3_Config>
 80047fe:	4603      	mov	r3, r0
 8004800:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800480c:	e002      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004814:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10a      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800481c:	4b4f      	ldr	r3, [pc, #316]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004820:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	4a4c      	ldr	r2, [pc, #304]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800482c:	430b      	orrs	r3, r1
 800482e:	6513      	str	r3, [r2, #80]	; 0x50
 8004830:	e003      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004836:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800483a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004850:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8004854:	460b      	mov	r3, r1
 8004856:	4313      	orrs	r3, r2
 8004858:	d053      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800485a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800485e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004862:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004866:	d035      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004868:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800486c:	d82e      	bhi.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800486e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004872:	d031      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004874:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004878:	d828      	bhi.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800487a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487e:	d01a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004884:	d822      	bhi.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800488a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800488e:	d007      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004890:	e01c      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004892:	4b32      	ldr	r3, [pc, #200]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004896:	4a31      	ldr	r2, [pc, #196]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800489c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800489e:	e01c      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048a4:	3308      	adds	r3, #8
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f001 f905 	bl	8005ab8 <RCCEx_PLL2_Config>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80048b4:	e011      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048ba:	3328      	adds	r3, #40	; 0x28
 80048bc:	2100      	movs	r1, #0
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f9ac 	bl	8005c1c <RCCEx_PLL3_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048ca:	e006      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80048d2:	e002      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048d4:	bf00      	nop
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80048d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10b      	bne.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80048e2:	4b1e      	ldr	r3, [pc, #120]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80048ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f4:	430b      	orrs	r3, r1
 80048f6:	6593      	str	r3, [r2, #88]	; 0x58
 80048f8:	e003      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004902:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800490e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004912:	2300      	movs	r3, #0
 8004914:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004918:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800491c:	460b      	mov	r3, r1
 800491e:	4313      	orrs	r3, r2
 8004920:	d056      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004922:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800492a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800492e:	d038      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004930:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004934:	d831      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800493a:	d034      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800493c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004940:	d82b      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004946:	d01d      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004948:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800494c:	d825      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004952:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004958:	e01f      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800495a:	bf00      	nop
 800495c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004960:	4ba2      	ldr	r3, [pc, #648]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4aa1      	ldr	r2, [pc, #644]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800496c:	e01c      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800496e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004972:	3308      	adds	r3, #8
 8004974:	2100      	movs	r1, #0
 8004976:	4618      	mov	r0, r3
 8004978:	f001 f89e 	bl	8005ab8 <RCCEx_PLL2_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004982:	e011      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004984:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004988:	3328      	adds	r3, #40	; 0x28
 800498a:	2100      	movs	r1, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f001 f945 	bl	8005c1c <RCCEx_PLL3_Config>
 8004992:	4603      	mov	r3, r0
 8004994:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004998:	e006      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80049a0:	e002      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049a2:	bf00      	nop
 80049a4:	e000      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80049a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10b      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80049b0:	4b8e      	ldr	r3, [pc, #568]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80049b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80049c0:	4a8a      	ldr	r2, [pc, #552]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	6593      	str	r3, [r2, #88]	; 0x58
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049cc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80049d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80049dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80049e6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80049ea:	460b      	mov	r3, r1
 80049ec:	4313      	orrs	r3, r2
 80049ee:	d03a      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80049f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d01f      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80049fa:	2b30      	cmp	r3, #48	; 0x30
 80049fc:	d819      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d00c      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d815      	bhi.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d019      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d111      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0e:	4b77      	ldr	r3, [pc, #476]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	4a76      	ldr	r2, [pc, #472]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a1a:	e011      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a20:	3308      	adds	r3, #8
 8004a22:	2102      	movs	r1, #2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f847 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004a38:	e002      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004a50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	4a65      	ldr	r2, [pc, #404]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a5c:	e003      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a62:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004a72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a7c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8004a80:	460b      	mov	r3, r1
 8004a82:	4313      	orrs	r3, r2
 8004a84:	d051      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a90:	d035      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a96:	d82e      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004a98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a9c:	d031      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004a9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aa2:	d828      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa8:	d01a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aae:	d822      	bhi.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab8:	d007      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004aba:	e01c      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004abc:	4b4b      	ldr	r3, [pc, #300]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	4a4a      	ldr	r2, [pc, #296]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ac8:	e01c      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ace:	3308      	adds	r3, #8
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fff0 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ade:	e011      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ae4:	3328      	adds	r3, #40	; 0x28
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 f897 	bl	8005c1c <RCCEx_PLL3_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004af4:	e006      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004afc:	e002      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004afe:	bf00      	nop
 8004b00:	e000      	b.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b0c:	4b37      	ldr	r3, [pc, #220]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b10:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b1a:	4a34      	ldr	r2, [pc, #208]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6513      	str	r3, [r2, #80]	; 0x50
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004b40:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d056      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b54:	d033      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004b56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b5a:	d82c      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b60:	d02f      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b66:	d826      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b6c:	d02b      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004b6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004b72:	d820      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b78:	d012      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004b7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b7e:	d81a      	bhi.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d022      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d115      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b8e:	3308      	adds	r3, #8
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 ff90 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004b9e:	e015      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ba4:	3328      	adds	r3, #40	; 0x28
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f001 f837 	bl	8005c1c <RCCEx_PLL3_Config>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bb4:	e00a      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004bbc:	e006      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bbe:	bf00      	nop
 8004bc0:	e004      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bc2:	bf00      	nop
 8004bc4:	e002      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bc6:	bf00      	nop
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bcc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10d      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be2:	4a02      	ldr	r2, [pc, #8]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004be4:	430b      	orrs	r3, r1
 8004be6:	6513      	str	r3, [r2, #80]	; 0x50
 8004be8:	e006      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004bea:	bf00      	nop
 8004bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004bf4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004c04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004c0e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d055      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c24:	d033      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c2a:	d82c      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d02f      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d826      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c3c:	d02b      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c42:	d820      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c48:	d012      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004c4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c4e:	d81a      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d022      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c58:	d115      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2101      	movs	r1, #1
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 ff28 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c6e:	e015      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c74:	3328      	adds	r3, #40	; 0x28
 8004c76:	2101      	movs	r1, #1
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 ffcf 	bl	8005c1c <RCCEx_PLL3_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004c84:	e00a      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004c8c:	e006      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10b      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004ca4:	4bb6      	ldr	r3, [pc, #728]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cb4:	4ab2      	ldr	r2, [pc, #712]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8004cba:	e003      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cbc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004cc0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d02a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004ce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d011      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d10a      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fedb 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8004d08:	e004      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004d10:	e000      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8004d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004d1c:	4b98      	ldr	r3, [pc, #608]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d20:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004d24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2a:	4a95      	ldr	r2, [pc, #596]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d30:	e003      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d36:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004d46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004d50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d54:	460b      	mov	r3, r1
 8004d56:	4313      	orrs	r3, r2
 8004d58:	d037      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d64:	d00e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8004d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6a:	d816      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d018      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d74:	d111      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d76:	4b82      	ldr	r3, [pc, #520]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4a81      	ldr	r2, [pc, #516]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d82:	e00f      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d88:	3308      	adds	r3, #8
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fe93 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d98:	e004      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004da0:	e000      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004dac:	4b74      	ldr	r3, [pc, #464]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004db0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dba:	4a71      	ldr	r2, [pc, #452]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6513      	str	r3, [r2, #80]	; 0x50
 8004dc0:	e003      	b.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004dc6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004dca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004dd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004de0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4313      	orrs	r3, r2
 8004de8:	d03a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d81d      	bhi.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e39 	.word	0x08004e39
 8004e00:	08004e0d 	.word	0x08004e0d
 8004e04:	08004e1b 	.word	0x08004e1b
 8004e08:	08004e39 	.word	0x08004e39
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0c:	4b5c      	ldr	r3, [pc, #368]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	4a5b      	ldr	r2, [pc, #364]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e18:	e00f      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e1e:	3308      	adds	r3, #8
 8004e20:	2102      	movs	r1, #2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fe48 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e2e:	e004      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004e36:	e000      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e42:	4b4f      	ldr	r3, [pc, #316]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e46:	f023 0103 	bic.w	r1, r3, #3
 8004e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e50:	4a4b      	ldr	r2, [pc, #300]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e56:	e003      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004e5c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e70:	2300      	movs	r3, #0
 8004e72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e76:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f000 80a0 	beq.w	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e82:	4b40      	ldr	r3, [pc, #256]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a3f      	ldr	r2, [pc, #252]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e8e:	f7fc fa03 	bl	8001298 <HAL_GetTick>
 8004e92:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e96:	e00b      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e98:	f7fc f9fe 	bl	8001298 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b64      	cmp	r3, #100	; 0x64
 8004ea6:	d903      	bls.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004eae:	e005      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eb0:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d0ed      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8004ebc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d17a      	bne.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ec4:	4b2e      	ldr	r3, [pc, #184]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ec6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ecc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ed0:	4053      	eors	r3, r2
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d015      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ee6:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef2:	4b23      	ldr	r3, [pc, #140]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a22      	ldr	r2, [pc, #136]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004efe:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004f00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f12:	d118      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fc f9c0 	bl	8001298 <HAL_GetTick>
 8004f18:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f1c:	e00d      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f1e:	f7fc f9bb 	bl	8001298 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f28:	1ad2      	subs	r2, r2, r3
 8004f2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d903      	bls.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8004f38:	e005      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f3a:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0eb      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f46:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d130      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f52:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5e:	d115      	bne.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f70:	091a      	lsrs	r2, r3, #4
 8004f72:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	4a02      	ldr	r2, [pc, #8]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6113      	str	r3, [r2, #16]
 8004f7c:	e00c      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004f7e:	bf00      	nop
 8004f80:	58024400 	.word	0x58024400
 8004f84:	58024800 	.word	0x58024800
 8004f88:	00ffffcf 	.word	0x00ffffcf
 8004f8c:	4bd4      	ldr	r3, [pc, #848]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	4ad3      	ldr	r2, [pc, #844]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004f92:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f96:	6113      	str	r3, [r2, #16]
 8004f98:	4bd1      	ldr	r3, [pc, #836]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004f9a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fa0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004fa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa8:	4acd      	ldr	r2, [pc, #820]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004faa:	430b      	orrs	r3, r1
 8004fac:	6713      	str	r3, [r2, #112]	; 0x70
 8004fae:	e008      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fb4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8004fb8:	e003      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fbe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	f002 0301 	and.w	r3, r2, #1
 8004fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f000 808b 	beq.w	80050fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fec:	2b28      	cmp	r3, #40	; 0x28
 8004fee:	d86b      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004ff0:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff6:	bf00      	nop
 8004ff8:	080050d1 	.word	0x080050d1
 8004ffc:	080050c9 	.word	0x080050c9
 8005000:	080050c9 	.word	0x080050c9
 8005004:	080050c9 	.word	0x080050c9
 8005008:	080050c9 	.word	0x080050c9
 800500c:	080050c9 	.word	0x080050c9
 8005010:	080050c9 	.word	0x080050c9
 8005014:	080050c9 	.word	0x080050c9
 8005018:	0800509d 	.word	0x0800509d
 800501c:	080050c9 	.word	0x080050c9
 8005020:	080050c9 	.word	0x080050c9
 8005024:	080050c9 	.word	0x080050c9
 8005028:	080050c9 	.word	0x080050c9
 800502c:	080050c9 	.word	0x080050c9
 8005030:	080050c9 	.word	0x080050c9
 8005034:	080050c9 	.word	0x080050c9
 8005038:	080050b3 	.word	0x080050b3
 800503c:	080050c9 	.word	0x080050c9
 8005040:	080050c9 	.word	0x080050c9
 8005044:	080050c9 	.word	0x080050c9
 8005048:	080050c9 	.word	0x080050c9
 800504c:	080050c9 	.word	0x080050c9
 8005050:	080050c9 	.word	0x080050c9
 8005054:	080050c9 	.word	0x080050c9
 8005058:	080050d1 	.word	0x080050d1
 800505c:	080050c9 	.word	0x080050c9
 8005060:	080050c9 	.word	0x080050c9
 8005064:	080050c9 	.word	0x080050c9
 8005068:	080050c9 	.word	0x080050c9
 800506c:	080050c9 	.word	0x080050c9
 8005070:	080050c9 	.word	0x080050c9
 8005074:	080050c9 	.word	0x080050c9
 8005078:	080050d1 	.word	0x080050d1
 800507c:	080050c9 	.word	0x080050c9
 8005080:	080050c9 	.word	0x080050c9
 8005084:	080050c9 	.word	0x080050c9
 8005088:	080050c9 	.word	0x080050c9
 800508c:	080050c9 	.word	0x080050c9
 8005090:	080050c9 	.word	0x080050c9
 8005094:	080050c9 	.word	0x080050c9
 8005098:	080050d1 	.word	0x080050d1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800509c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050a0:	3308      	adds	r3, #8
 80050a2:	2101      	movs	r1, #1
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fd07 	bl	8005ab8 <RCCEx_PLL2_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050b0:	e00f      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050b6:	3328      	adds	r3, #40	; 0x28
 80050b8:	2101      	movs	r1, #1
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 fdae 	bl	8005c1c <RCCEx_PLL3_Config>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80050ce:	e000      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80050d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050da:	4b81      	ldr	r3, [pc, #516]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80050e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050ea:	4a7d      	ldr	r2, [pc, #500]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80050ec:	430b      	orrs	r3, r1
 80050ee:	6553      	str	r3, [r2, #84]	; 0x54
 80050f0:	e003      	b.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f002 0302 	and.w	r3, r2, #2
 8005106:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800510a:	2300      	movs	r3, #0
 800510c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005110:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d042      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800511a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800511e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005120:	2b05      	cmp	r3, #5
 8005122:	d825      	bhi.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005124:	a201      	add	r2, pc, #4	; (adr r2, 800512c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512a:	bf00      	nop
 800512c:	08005179 	.word	0x08005179
 8005130:	08005145 	.word	0x08005145
 8005134:	0800515b 	.word	0x0800515b
 8005138:	08005179 	.word	0x08005179
 800513c:	08005179 	.word	0x08005179
 8005140:	08005179 	.word	0x08005179
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005144:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005148:	3308      	adds	r3, #8
 800514a:	2101      	movs	r1, #1
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fcb3 	bl	8005ab8 <RCCEx_PLL2_Config>
 8005152:	4603      	mov	r3, r0
 8005154:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005158:	e00f      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800515a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800515e:	3328      	adds	r3, #40	; 0x28
 8005160:	2101      	movs	r1, #1
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fd5a 	bl	8005c1c <RCCEx_PLL3_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800516e:	e004      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005176:	e000      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800517a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005182:	4b57      	ldr	r3, [pc, #348]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005186:	f023 0107 	bic.w	r1, r3, #7
 800518a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800518e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005190:	4a53      	ldr	r2, [pc, #332]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005192:	430b      	orrs	r3, r1
 8005194:	6553      	str	r3, [r2, #84]	; 0x54
 8005196:	e003      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800519c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f002 0304 	and.w	r3, r2, #4
 80051ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80051b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d044      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80051c8:	2b05      	cmp	r3, #5
 80051ca:	d825      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80051cc:	a201      	add	r2, pc, #4	; (adr r2, 80051d4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80051ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d2:	bf00      	nop
 80051d4:	08005221 	.word	0x08005221
 80051d8:	080051ed 	.word	0x080051ed
 80051dc:	08005203 	.word	0x08005203
 80051e0:	08005221 	.word	0x08005221
 80051e4:	08005221 	.word	0x08005221
 80051e8:	08005221 	.word	0x08005221
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051f0:	3308      	adds	r3, #8
 80051f2:	2101      	movs	r1, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 fc5f 	bl	8005ab8 <RCCEx_PLL2_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005200:	e00f      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005202:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005206:	3328      	adds	r3, #40	; 0x28
 8005208:	2101      	movs	r1, #1
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fd06 	bl	8005c1c <RCCEx_PLL3_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005216:	e004      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800521e:	e000      	b.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005222:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800522a:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	f023 0107 	bic.w	r1, r3, #7
 8005232:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800523a:	4a29      	ldr	r2, [pc, #164]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800523c:	430b      	orrs	r3, r1
 800523e:	6593      	str	r3, [r2, #88]	; 0x58
 8005240:	e003      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005242:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005246:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800524a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	f002 0320 	and.w	r3, r2, #32
 8005256:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800525a:	2300      	movs	r3, #0
 800525c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005260:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005264:	460b      	mov	r3, r1
 8005266:	4313      	orrs	r3, r2
 8005268:	d057      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800526a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800526e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005272:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005276:	d035      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800527c:	d82c      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d031      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d826      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800528a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800528e:	d02d      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005290:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005294:	d820      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800529a:	d012      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800529c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a0:	d81a      	bhi.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d024      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80052a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052aa:	d115      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052b0:	3308      	adds	r3, #8
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fbff 	bl	8005ab8 <RCCEx_PLL2_Config>
 80052ba:	4603      	mov	r3, r0
 80052bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052c0:	e017      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052c6:	3328      	adds	r3, #40	; 0x28
 80052c8:	2102      	movs	r1, #2
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 fca6 	bl	8005c1c <RCCEx_PLL3_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052d6:	e00c      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80052de:	e008      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80052e0:	58024400 	.word	0x58024400
        break;
 80052e4:	bf00      	nop
 80052e6:	e004      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80052e8:	bf00      	nop
 80052ea:	e002      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80052f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10b      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052fa:	4bc2      	ldr	r3, [pc, #776]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80052fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005302:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530a:	4abe      	ldr	r2, [pc, #760]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800530c:	430b      	orrs	r3, r1
 800530e:	6553      	str	r3, [r2, #84]	; 0x54
 8005310:	e003      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005312:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005316:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800531a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005326:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005330:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005334:	460b      	mov	r3, r1
 8005336:	4313      	orrs	r3, r2
 8005338:	d055      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800533a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800533e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005342:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005346:	d033      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8005348:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800534c:	d82c      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d02f      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005358:	d826      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800535a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800535e:	d02b      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8005360:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005364:	d820      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800536a:	d012      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800536c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005370:	d81a      	bhi.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d022      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8005376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537a:	d115      	bne.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800537c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005380:	3308      	adds	r3, #8
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fb97 	bl	8005ab8 <RCCEx_PLL2_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005390:	e015      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005392:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005396:	3328      	adds	r3, #40	; 0x28
 8005398:	2102      	movs	r1, #2
 800539a:	4618      	mov	r0, r3
 800539c:	f000 fc3e 	bl	8005c1c <RCCEx_PLL3_Config>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80053a6:	e00a      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80053ae:	e006      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80053b0:	bf00      	nop
 80053b2:	e004      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80053b4:	bf00      	nop
 80053b6:	e002      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80053b8:	bf00      	nop
 80053ba:	e000      	b.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80053bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053c6:	4b8f      	ldr	r3, [pc, #572]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80053c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ca:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80053ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80053d6:	4a8b      	ldr	r2, [pc, #556]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80053d8:	430b      	orrs	r3, r1
 80053da:	6593      	str	r3, [r2, #88]	; 0x58
 80053dc:	e003      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053e2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ee:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80053f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053f6:	2300      	movs	r3, #0
 80053f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053fc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005400:	460b      	mov	r3, r1
 8005402:	4313      	orrs	r3, r2
 8005404:	d055      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800540a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800540e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005412:	d033      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005418:	d82c      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	d02f      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005424:	d826      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005426:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800542a:	d02b      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800542c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005430:	d820      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8005432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005436:	d012      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8005438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800543c:	d81a      	bhi.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800543e:	2b00      	cmp	r3, #0
 8005440:	d022      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8005442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005446:	d115      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005448:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800544c:	3308      	adds	r3, #8
 800544e:	2100      	movs	r1, #0
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fb31 	bl	8005ab8 <RCCEx_PLL2_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800545c:	e015      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800545e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005462:	3328      	adds	r3, #40	; 0x28
 8005464:	2102      	movs	r1, #2
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fbd8 	bl	8005c1c <RCCEx_PLL3_Config>
 800546c:	4603      	mov	r3, r0
 800546e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005472:	e00a      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800547a:	e006      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800547c:	bf00      	nop
 800547e:	e004      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005480:	bf00      	nop
 8005482:	e002      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005484:	bf00      	nop
 8005486:	e000      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8005488:	bf00      	nop
    }

    if (ret == HAL_OK)
 800548a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005492:	4b5c      	ldr	r3, [pc, #368]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800549a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800549e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80054a2:	4a58      	ldr	r2, [pc, #352]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6593      	str	r3, [r2, #88]	; 0x58
 80054a8:	e003      	b.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80054b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ba:	f002 0308 	and.w	r3, r2, #8
 80054be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054c2:	2300      	movs	r3, #0
 80054c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054c8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80054cc:	460b      	mov	r3, r1
 80054ce:	4313      	orrs	r3, r2
 80054d0:	d01e      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80054d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054de:	d10c      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054e4:	3328      	adds	r3, #40	; 0x28
 80054e6:	2102      	movs	r1, #2
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 fb97 	bl	8005c1c <RCCEx_PLL3_Config>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054fa:	4b42      	ldr	r3, [pc, #264]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005502:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	4a3e      	ldr	r2, [pc, #248]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800550c:	430b      	orrs	r3, r1
 800550e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005510:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f002 0310 	and.w	r3, r2, #16
 800551c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005526:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	d01e      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800553c:	d10c      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800553e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005542:	3328      	adds	r3, #40	; 0x28
 8005544:	2102      	movs	r1, #2
 8005546:	4618      	mov	r0, r3
 8005548:	f000 fb68 	bl	8005c1c <RCCEx_PLL3_Config>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005558:	4b2a      	ldr	r3, [pc, #168]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800555c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005564:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005568:	4a26      	ldr	r2, [pc, #152]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800556a:	430b      	orrs	r3, r1
 800556c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800556e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005576:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800557a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800557e:	2300      	movs	r3, #0
 8005580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005584:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005588:	460b      	mov	r3, r1
 800558a:	4313      	orrs	r3, r2
 800558c:	d040      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800558e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005592:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800559a:	d022      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800559c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a0:	d81b      	bhi.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80055a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055aa:	d00b      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80055ac:	e015      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055b2:	3308      	adds	r3, #8
 80055b4:	2100      	movs	r1, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fa7e 	bl	8005ab8 <RCCEx_PLL2_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055c2:	e00f      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055c8:	3328      	adds	r3, #40	; 0x28
 80055ca:	2102      	movs	r1, #2
 80055cc:	4618      	mov	r0, r3
 80055ce:	f000 fb25 	bl	8005c1c <RCCEx_PLL3_Config>
 80055d2:	4603      	mov	r3, r0
 80055d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055d8:	e004      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80055e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10d      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055f0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055fc:	4a01      	ldr	r2, [pc, #4]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	6593      	str	r3, [r2, #88]	; 0x58
 8005602:	e005      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005604:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005608:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800560c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005610:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800561c:	67bb      	str	r3, [r7, #120]	; 0x78
 800561e:	2300      	movs	r3, #0
 8005620:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005622:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005626:	460b      	mov	r3, r1
 8005628:	4313      	orrs	r3, r2
 800562a:	d03b      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800562c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005634:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005638:	d01f      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800563a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800563e:	d818      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8005640:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005644:	d003      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800564a:	d007      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800564c:	e011      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564e:	4b64      	ldr	r3, [pc, #400]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	4a63      	ldr	r2, [pc, #396]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800565a:	e00f      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800565c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005660:	3328      	adds	r3, #40	; 0x28
 8005662:	2101      	movs	r1, #1
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fad9 	bl	8005c1c <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8005670:	e004      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005678:	e000      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800567a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005684:	4b56      	ldr	r3, [pc, #344]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800568c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005694:	4a52      	ldr	r2, [pc, #328]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005696:	430b      	orrs	r3, r1
 8005698:	6553      	str	r3, [r2, #84]	; 0x54
 800569a:	e003      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80056a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ac:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80056b0:	673b      	str	r3, [r7, #112]	; 0x70
 80056b2:	2300      	movs	r3, #0
 80056b4:	677b      	str	r3, [r7, #116]	; 0x74
 80056b6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80056ba:	460b      	mov	r3, r1
 80056bc:	4313      	orrs	r3, r2
 80056be:	d031      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80056c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80056ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ce:	d007      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80056d0:	e011      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d2:	4b43      	ldr	r3, [pc, #268]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	4a42      	ldr	r2, [pc, #264]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80056d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056de:	e00e      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056e4:	3308      	adds	r3, #8
 80056e6:	2102      	movs	r1, #2
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f9e5 	bl	8005ab8 <RCCEx_PLL2_Config>
 80056ee:	4603      	mov	r3, r0
 80056f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80056fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005706:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800570a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800570e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	4a32      	ldr	r2, [pc, #200]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005716:	430b      	orrs	r3, r1
 8005718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800571a:	e003      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800571c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005720:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005724:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8005730:	66bb      	str	r3, [r7, #104]	; 0x68
 8005732:	2300      	movs	r3, #0
 8005734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005736:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800573a:	460b      	mov	r3, r1
 800573c:	4313      	orrs	r3, r2
 800573e:	d00c      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005740:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005744:	3328      	adds	r3, #40	; 0x28
 8005746:	2102      	movs	r1, #2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fa67 	bl	8005c1c <RCCEx_PLL3_Config>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800575a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005766:	663b      	str	r3, [r7, #96]	; 0x60
 8005768:	2300      	movs	r3, #0
 800576a:	667b      	str	r3, [r7, #100]	; 0x64
 800576c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005770:	460b      	mov	r3, r1
 8005772:	4313      	orrs	r3, r2
 8005774:	d03a      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005776:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005782:	d018      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8005784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005788:	d811      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800578a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800578e:	d014      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8005790:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005794:	d80b      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d011      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800579a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800579e:	d106      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a0:	4b0f      	ldr	r3, [pc, #60]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a0e      	ldr	r2, [pc, #56]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80057a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80057ac:	e008      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80057b4:	e004      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80057b6:	bf00      	nop
 80057b8:	e002      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80057ba:	bf00      	nop
 80057bc:	e000      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80057be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10d      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d8:	4a01      	ldr	r2, [pc, #4]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	6553      	str	r3, [r2, #84]	; 0x54
 80057de:	e005      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80057e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057e8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80057f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057fa:	2300      	movs	r3, #0
 80057fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005802:	460b      	mov	r3, r1
 8005804:	4313      	orrs	r3, r2
 8005806:	d009      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005808:	4baa      	ldr	r3, [pc, #680]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005810:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005816:	4aa7      	ldr	r2, [pc, #668]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005818:	430b      	orrs	r3, r1
 800581a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800581c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005824:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005828:	653b      	str	r3, [r7, #80]	; 0x50
 800582a:	2300      	movs	r3, #0
 800582c:	657b      	str	r3, [r7, #84]	; 0x54
 800582e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d00a      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005838:	4b9e      	ldr	r3, [pc, #632]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005844:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005848:	4a9a      	ldr	r2, [pc, #616]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800584a:	430b      	orrs	r3, r1
 800584c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800584e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800585a:	64bb      	str	r3, [r7, #72]	; 0x48
 800585c:	2300      	movs	r3, #0
 800585e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005860:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005864:	460b      	mov	r3, r1
 8005866:	4313      	orrs	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800586a:	4b92      	ldr	r3, [pc, #584]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800586c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8005872:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	4a8e      	ldr	r2, [pc, #568]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800587a:	430b      	orrs	r3, r1
 800587c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800587e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005886:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800588a:	643b      	str	r3, [r7, #64]	; 0x40
 800588c:	2300      	movs	r3, #0
 800588e:	647b      	str	r3, [r7, #68]	; 0x44
 8005890:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005894:	460b      	mov	r3, r1
 8005896:	4313      	orrs	r3, r2
 8005898:	d00e      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800589a:	4b86      	ldr	r3, [pc, #536]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	4a85      	ldr	r2, [pc, #532]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80058a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058a4:	6113      	str	r3, [r2, #16]
 80058a6:	4b83      	ldr	r3, [pc, #524]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80058a8:	6919      	ldr	r1, [r3, #16]
 80058aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058b2:	4a80      	ldr	r2, [pc, #512]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80058b4:	430b      	orrs	r3, r1
 80058b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80058c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058c6:	2300      	movs	r3, #0
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d009      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058d4:	4b77      	ldr	r3, [pc, #476]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80058d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80058dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e2:	4a74      	ldr	r2, [pc, #464]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80058e4:	430b      	orrs	r3, r1
 80058e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80058f4:	633b      	str	r3, [r7, #48]	; 0x30
 80058f6:	2300      	movs	r3, #0
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
 80058fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80058fe:	460b      	mov	r3, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	d00a      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005904:	4b6b      	ldr	r3, [pc, #428]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800590c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005914:	4a67      	ldr	r2, [pc, #412]	; (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005916:	430b      	orrs	r3, r1
 8005918:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800591a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	2100      	movs	r1, #0
 8005924:	62b9      	str	r1, [r7, #40]	; 0x28
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800592c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005930:	460b      	mov	r3, r1
 8005932:	4313      	orrs	r3, r2
 8005934:	d011      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005936:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800593a:	3308      	adds	r3, #8
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f8ba 	bl	8005ab8 <RCCEx_PLL2_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800594a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005956:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800595a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	2100      	movs	r1, #0
 8005964:	6239      	str	r1, [r7, #32]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
 800596c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005970:	460b      	mov	r3, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	d011      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005976:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800597a:	3308      	adds	r3, #8
 800597c:	2101      	movs	r1, #1
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f89a 	bl	8005ab8 <RCCEx_PLL2_Config>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800598a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800598e:	2b00      	cmp	r3, #0
 8005990:	d003      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005992:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005996:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800599a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	2100      	movs	r1, #0
 80059a4:	61b9      	str	r1, [r7, #24]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80059b0:	460b      	mov	r3, r1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	d011      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059ba:	3308      	adds	r3, #8
 80059bc:	2102      	movs	r1, #2
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 f87a 	bl	8005ab8 <RCCEx_PLL2_Config>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80059ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80059da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	2100      	movs	r1, #0
 80059e4:	6139      	str	r1, [r7, #16]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	617b      	str	r3, [r7, #20]
 80059ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d011      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059fa:	3328      	adds	r3, #40	; 0x28
 80059fc:	2100      	movs	r1, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f90c 	bl	8005c1c <RCCEx_PLL3_Config>
 8005a04:	4603      	mov	r3, r0
 8005a06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8005a0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a16:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	2100      	movs	r1, #0
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d011      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a3a:	3328      	adds	r3, #40	; 0x28
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f000 f8ec 	bl	8005c1c <RCCEx_PLL3_Config>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005a4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a62:	2100      	movs	r1, #0
 8005a64:	6039      	str	r1, [r7, #0]
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a70:	460b      	mov	r3, r1
 8005a72:	4313      	orrs	r3, r2
 8005a74:	d011      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a7a:	3328      	adds	r3, #40	; 0x28
 8005a7c:	2102      	movs	r1, #2
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 f8cc 	bl	8005c1c <RCCEx_PLL3_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005a8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8005a9a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e000      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ab4:	58024400 	.word	0x58024400

08005ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ac6:	4b53      	ldr	r3, [pc, #332]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d101      	bne.n	8005ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e099      	b.n	8005c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ad6:	4b4f      	ldr	r3, [pc, #316]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a4e      	ldr	r2, [pc, #312]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005adc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae2:	f7fb fbd9 	bl	8001298 <HAL_GetTick>
 8005ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ae8:	e008      	b.n	8005afc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005aea:	f7fb fbd5 	bl	8001298 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e086      	b.n	8005c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005afc:	4b45      	ldr	r3, [pc, #276]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b08:	4b42      	ldr	r3, [pc, #264]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	493f      	ldr	r1, [pc, #252]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	628b      	str	r3, [r1, #40]	; 0x28
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	025b      	lsls	r3, r3, #9
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005b4c:	4931      	ldr	r1, [pc, #196]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b52:	4b30      	ldr	r3, [pc, #192]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	492d      	ldr	r1, [pc, #180]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b64:	4b2b      	ldr	r3, [pc, #172]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	f023 0220 	bic.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	4928      	ldr	r1, [pc, #160]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b76:	4b27      	ldr	r3, [pc, #156]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b82:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b86:	4b24      	ldr	r3, [pc, #144]	; (8005c18 <RCCEx_PLL2_Config+0x160>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	69d2      	ldr	r2, [r2, #28]
 8005b8e:	00d2      	lsls	r2, r2, #3
 8005b90:	4920      	ldr	r1, [pc, #128]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b96:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	f043 0310 	orr.w	r3, r3, #16
 8005ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	4a19      	ldr	r2, [pc, #100]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bb4:	e00f      	b.n	8005bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bbc:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	4a14      	ldr	r2, [pc, #80]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005bc8:	e005      	b.n	8005bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bca:	4b12      	ldr	r3, [pc, #72]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	4a11      	ldr	r2, [pc, #68]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a0e      	ldr	r2, [pc, #56]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be2:	f7fb fb59 	bl	8001298 <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005be8:	e008      	b.n	8005bfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bea:	f7fb fb55 	bl	8001298 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e006      	b.n	8005c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
 8005c18:	ffff0007 	.word	0xffff0007

08005c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c2a:	4b53      	ldr	r3, [pc, #332]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d101      	bne.n	8005c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e099      	b.n	8005d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c3a:	4b4f      	ldr	r3, [pc, #316]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a4e      	ldr	r2, [pc, #312]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c46:	f7fb fb27 	bl	8001298 <HAL_GetTick>
 8005c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c4e:	f7fb fb23 	bl	8001298 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e086      	b.n	8005d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c60:	4b45      	ldr	r3, [pc, #276]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f0      	bne.n	8005c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c6c:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	051b      	lsls	r3, r3, #20
 8005c7a:	493f      	ldr	r1, [pc, #252]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	628b      	str	r3, [r1, #40]	; 0x28
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	025b      	lsls	r3, r3, #9
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	041b      	lsls	r3, r3, #16
 8005c9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	061b      	lsls	r3, r3, #24
 8005cac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005cb0:	4931      	ldr	r1, [pc, #196]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cb6:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	492d      	ldr	r1, [pc, #180]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	4928      	ldr	r1, [pc, #160]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cda:	4b27      	ldr	r3, [pc, #156]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cde:	4a26      	ldr	r2, [pc, #152]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cea:	4b24      	ldr	r3, [pc, #144]	; (8005d7c <RCCEx_PLL3_Config+0x160>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	69d2      	ldr	r2, [r2, #28]
 8005cf2:	00d2      	lsls	r2, r2, #3
 8005cf4:	4920      	ldr	r1, [pc, #128]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	4a19      	ldr	r2, [pc, #100]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d18:	e00f      	b.n	8005d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d106      	bne.n	8005d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d20:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d24:	4a14      	ldr	r2, [pc, #80]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d2c:	e005      	b.n	8005d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d2e:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d46:	f7fb faa7 	bl	8001298 <HAL_GetTick>
 8005d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d4e:	f7fb faa3 	bl	8001298 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e006      	b.n	8005d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	ffff0007 	.word	0xffff0007

08005d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e049      	b.n	8005e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f841 	bl	8005e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 fa00 	bl	80061c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e054      	b.n	8005f06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a26      	ldr	r2, [pc, #152]	; (8005f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d022      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d01d      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a22      	ldr	r2, [pc, #136]	; (8005f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a21      	ldr	r2, [pc, #132]	; (8005f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1f      	ldr	r2, [pc, #124]	; (8005f20 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a1e      	ldr	r2, [pc, #120]	; (8005f24 <HAL_TIM_Base_Start_IT+0xe0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	; (8005f28 <HAL_TIM_Base_Start_IT+0xe4>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x80>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a1b      	ldr	r2, [pc, #108]	; (8005f2c <HAL_TIM_Base_Start_IT+0xe8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d115      	bne.n	8005ef0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <HAL_TIM_Base_Start_IT+0xec>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2b06      	cmp	r3, #6
 8005ed4:	d015      	beq.n	8005f02 <HAL_TIM_Base_Start_IT+0xbe>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005edc:	d011      	beq.n	8005f02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0201 	orr.w	r2, r2, #1
 8005eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	e008      	b.n	8005f02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f042 0201 	orr.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	e000      	b.n	8005f04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3714      	adds	r7, #20
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40010400 	.word	0x40010400
 8005f28:	40001800 	.word	0x40001800
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	00010007 	.word	0x00010007

08005f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d122      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d11b      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f06f 0202 	mvn.w	r2, #2
 8005f60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d003      	beq.n	8005f7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f905 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8005f7c:	e005      	b.n	8005f8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f8f7 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f908 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d122      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d11b      	bne.n	8005fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0204 	mvn.w	r2, #4
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d003      	beq.n	8005fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8db 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8005fd0:	e005      	b.n	8005fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8cd 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 f8de 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0308 	and.w	r3, r3, #8
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d122      	bne.n	8006038 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d11b      	bne.n	8006038 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0208 	mvn.w	r2, #8
 8006008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2204      	movs	r2, #4
 800600e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8b1 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8a3 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8b4 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0310 	and.w	r3, r3, #16
 8006042:	2b10      	cmp	r3, #16
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b10      	cmp	r3, #16
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0210 	mvn.w	r2, #16
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2208      	movs	r2, #8
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f887 	bl	8006186 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f879 	bl	8006172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f88a 	bl	800619a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d10e      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d107      	bne.n	80060b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0201 	mvn.w	r2, #1
 80060b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fa fd7e 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c2:	2b80      	cmp	r3, #128	; 0x80
 80060c4:	d10e      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d0:	2b80      	cmp	r3, #128	; 0x80
 80060d2:	d107      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f914 	bl	800630c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f2:	d10e      	bne.n	8006112 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b80      	cmp	r3, #128	; 0x80
 8006100:	d107      	bne.n	8006112 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800610a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f907 	bl	8006320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	d10e      	bne.n	800613e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612a:	2b40      	cmp	r3, #64	; 0x40
 800612c:	d107      	bne.n	800613e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f838 	bl	80061ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b20      	cmp	r3, #32
 800614a:	d10e      	bne.n	800616a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f003 0320 	and.w	r3, r3, #32
 8006156:	2b20      	cmp	r3, #32
 8006158:	d107      	bne.n	800616a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f06f 0220 	mvn.w	r2, #32
 8006162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8c7 	bl	80062f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800616a:	bf00      	nop
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800617a:	bf00      	nop
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006184:	4770      	bx	lr

08006186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800618e:	bf00      	nop
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a40      	ldr	r2, [pc, #256]	; (80062d8 <TIM_Base_SetConfig+0x114>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d013      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e2:	d00f      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a3d      	ldr	r2, [pc, #244]	; (80062dc <TIM_Base_SetConfig+0x118>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00b      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a3c      	ldr	r2, [pc, #240]	; (80062e0 <TIM_Base_SetConfig+0x11c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d007      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a3b      	ldr	r2, [pc, #236]	; (80062e4 <TIM_Base_SetConfig+0x120>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_Base_SetConfig+0x40>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a3a      	ldr	r2, [pc, #232]	; (80062e8 <TIM_Base_SetConfig+0x124>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d108      	bne.n	8006216 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2f      	ldr	r2, [pc, #188]	; (80062d8 <TIM_Base_SetConfig+0x114>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d01f      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006224:	d01b      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2c      	ldr	r2, [pc, #176]	; (80062dc <TIM_Base_SetConfig+0x118>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d017      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a2b      	ldr	r2, [pc, #172]	; (80062e0 <TIM_Base_SetConfig+0x11c>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d013      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a2a      	ldr	r2, [pc, #168]	; (80062e4 <TIM_Base_SetConfig+0x120>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00f      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a29      	ldr	r2, [pc, #164]	; (80062e8 <TIM_Base_SetConfig+0x124>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00b      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a28      	ldr	r2, [pc, #160]	; (80062ec <TIM_Base_SetConfig+0x128>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d007      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a27      	ldr	r2, [pc, #156]	; (80062f0 <TIM_Base_SetConfig+0x12c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d003      	beq.n	800625e <TIM_Base_SetConfig+0x9a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a26      	ldr	r2, [pc, #152]	; (80062f4 <TIM_Base_SetConfig+0x130>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d108      	bne.n	8006270 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a10      	ldr	r2, [pc, #64]	; (80062d8 <TIM_Base_SetConfig+0x114>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00f      	beq.n	80062bc <TIM_Base_SetConfig+0xf8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a12      	ldr	r2, [pc, #72]	; (80062e8 <TIM_Base_SetConfig+0x124>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00b      	beq.n	80062bc <TIM_Base_SetConfig+0xf8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a11      	ldr	r2, [pc, #68]	; (80062ec <TIM_Base_SetConfig+0x128>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d007      	beq.n	80062bc <TIM_Base_SetConfig+0xf8>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a10      	ldr	r2, [pc, #64]	; (80062f0 <TIM_Base_SetConfig+0x12c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_Base_SetConfig+0xf8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a0f      	ldr	r2, [pc, #60]	; (80062f4 <TIM_Base_SetConfig+0x130>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d103      	bne.n	80062c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	615a      	str	r2, [r3, #20]
}
 80062ca:	bf00      	nop
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
 80062d6:	bf00      	nop
 80062d8:	40010000 	.word	0x40010000
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000800 	.word	0x40000800
 80062e4:	40000c00 	.word	0x40000c00
 80062e8:	40010400 	.word	0x40010400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800

080062f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800633a:	4b88      	ldr	r3, [pc, #544]	; (800655c <MX_LWIP_Init+0x228>)
 800633c:	22c0      	movs	r2, #192	; 0xc0
 800633e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8006340:	4b86      	ldr	r3, [pc, #536]	; (800655c <MX_LWIP_Init+0x228>)
 8006342:	22a8      	movs	r2, #168	; 0xa8
 8006344:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8006346:	4b85      	ldr	r3, [pc, #532]	; (800655c <MX_LWIP_Init+0x228>)
 8006348:	2201      	movs	r2, #1
 800634a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 800634c:	4b83      	ldr	r3, [pc, #524]	; (800655c <MX_LWIP_Init+0x228>)
 800634e:	221e      	movs	r2, #30
 8006350:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8006352:	4b83      	ldr	r3, [pc, #524]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006354:	22ff      	movs	r2, #255	; 0xff
 8006356:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8006358:	4b81      	ldr	r3, [pc, #516]	; (8006560 <MX_LWIP_Init+0x22c>)
 800635a:	22ff      	movs	r2, #255	; 0xff
 800635c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800635e:	4b80      	ldr	r3, [pc, #512]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006360:	22ff      	movs	r2, #255	; 0xff
 8006362:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8006364:	4b7e      	ldr	r3, [pc, #504]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006366:	2200      	movs	r2, #0
 8006368:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800636a:	4b7e      	ldr	r3, [pc, #504]	; (8006564 <MX_LWIP_Init+0x230>)
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8006370:	4b7c      	ldr	r3, [pc, #496]	; (8006564 <MX_LWIP_Init+0x230>)
 8006372:	2200      	movs	r2, #0
 8006374:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8006376:	4b7b      	ldr	r3, [pc, #492]	; (8006564 <MX_LWIP_Init+0x230>)
 8006378:	2200      	movs	r2, #0
 800637a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800637c:	4b79      	ldr	r3, [pc, #484]	; (8006564 <MX_LWIP_Init+0x230>)
 800637e:	2200      	movs	r2, #0
 8006380:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006382:	2100      	movs	r1, #0
 8006384:	2000      	movs	r0, #0
 8006386:	f010 fdeb 	bl	8016f60 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800638a:	4b74      	ldr	r3, [pc, #464]	; (800655c <MX_LWIP_Init+0x228>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	061a      	lsls	r2, r3, #24
 8006390:	4b72      	ldr	r3, [pc, #456]	; (800655c <MX_LWIP_Init+0x228>)
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	431a      	orrs	r2, r3
 8006398:	4b70      	ldr	r3, [pc, #448]	; (800655c <MX_LWIP_Init+0x228>)
 800639a:	789b      	ldrb	r3, [r3, #2]
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	4313      	orrs	r3, r2
 80063a0:	4a6e      	ldr	r2, [pc, #440]	; (800655c <MX_LWIP_Init+0x228>)
 80063a2:	78d2      	ldrb	r2, [r2, #3]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	061a      	lsls	r2, r3, #24
 80063a8:	4b6c      	ldr	r3, [pc, #432]	; (800655c <MX_LWIP_Init+0x228>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	0619      	lsls	r1, r3, #24
 80063ae:	4b6b      	ldr	r3, [pc, #428]	; (800655c <MX_LWIP_Init+0x228>)
 80063b0:	785b      	ldrb	r3, [r3, #1]
 80063b2:	041b      	lsls	r3, r3, #16
 80063b4:	4319      	orrs	r1, r3
 80063b6:	4b69      	ldr	r3, [pc, #420]	; (800655c <MX_LWIP_Init+0x228>)
 80063b8:	789b      	ldrb	r3, [r3, #2]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	430b      	orrs	r3, r1
 80063be:	4967      	ldr	r1, [pc, #412]	; (800655c <MX_LWIP_Init+0x228>)
 80063c0:	78c9      	ldrb	r1, [r1, #3]
 80063c2:	430b      	orrs	r3, r1
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063ca:	431a      	orrs	r2, r3
 80063cc:	4b63      	ldr	r3, [pc, #396]	; (800655c <MX_LWIP_Init+0x228>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	0619      	lsls	r1, r3, #24
 80063d2:	4b62      	ldr	r3, [pc, #392]	; (800655c <MX_LWIP_Init+0x228>)
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	4319      	orrs	r1, r3
 80063da:	4b60      	ldr	r3, [pc, #384]	; (800655c <MX_LWIP_Init+0x228>)
 80063dc:	789b      	ldrb	r3, [r3, #2]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	430b      	orrs	r3, r1
 80063e2:	495e      	ldr	r1, [pc, #376]	; (800655c <MX_LWIP_Init+0x228>)
 80063e4:	78c9      	ldrb	r1, [r1, #3]
 80063e6:	430b      	orrs	r3, r1
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063ee:	431a      	orrs	r2, r3
 80063f0:	4b5a      	ldr	r3, [pc, #360]	; (800655c <MX_LWIP_Init+0x228>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	0619      	lsls	r1, r3, #24
 80063f6:	4b59      	ldr	r3, [pc, #356]	; (800655c <MX_LWIP_Init+0x228>)
 80063f8:	785b      	ldrb	r3, [r3, #1]
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	4319      	orrs	r1, r3
 80063fe:	4b57      	ldr	r3, [pc, #348]	; (800655c <MX_LWIP_Init+0x228>)
 8006400:	789b      	ldrb	r3, [r3, #2]
 8006402:	021b      	lsls	r3, r3, #8
 8006404:	430b      	orrs	r3, r1
 8006406:	4955      	ldr	r1, [pc, #340]	; (800655c <MX_LWIP_Init+0x228>)
 8006408:	78c9      	ldrb	r1, [r1, #3]
 800640a:	430b      	orrs	r3, r1
 800640c:	0e1b      	lsrs	r3, r3, #24
 800640e:	4313      	orrs	r3, r2
 8006410:	4a55      	ldr	r2, [pc, #340]	; (8006568 <MX_LWIP_Init+0x234>)
 8006412:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8006414:	4b52      	ldr	r3, [pc, #328]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	061a      	lsls	r2, r3, #24
 800641a:	4b51      	ldr	r3, [pc, #324]	; (8006560 <MX_LWIP_Init+0x22c>)
 800641c:	785b      	ldrb	r3, [r3, #1]
 800641e:	041b      	lsls	r3, r3, #16
 8006420:	431a      	orrs	r2, r3
 8006422:	4b4f      	ldr	r3, [pc, #316]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006424:	789b      	ldrb	r3, [r3, #2]
 8006426:	021b      	lsls	r3, r3, #8
 8006428:	4313      	orrs	r3, r2
 800642a:	4a4d      	ldr	r2, [pc, #308]	; (8006560 <MX_LWIP_Init+0x22c>)
 800642c:	78d2      	ldrb	r2, [r2, #3]
 800642e:	4313      	orrs	r3, r2
 8006430:	061a      	lsls	r2, r3, #24
 8006432:	4b4b      	ldr	r3, [pc, #300]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	0619      	lsls	r1, r3, #24
 8006438:	4b49      	ldr	r3, [pc, #292]	; (8006560 <MX_LWIP_Init+0x22c>)
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	041b      	lsls	r3, r3, #16
 800643e:	4319      	orrs	r1, r3
 8006440:	4b47      	ldr	r3, [pc, #284]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006442:	789b      	ldrb	r3, [r3, #2]
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	430b      	orrs	r3, r1
 8006448:	4945      	ldr	r1, [pc, #276]	; (8006560 <MX_LWIP_Init+0x22c>)
 800644a:	78c9      	ldrb	r1, [r1, #3]
 800644c:	430b      	orrs	r3, r1
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006454:	431a      	orrs	r2, r3
 8006456:	4b42      	ldr	r3, [pc, #264]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	0619      	lsls	r1, r3, #24
 800645c:	4b40      	ldr	r3, [pc, #256]	; (8006560 <MX_LWIP_Init+0x22c>)
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	041b      	lsls	r3, r3, #16
 8006462:	4319      	orrs	r1, r3
 8006464:	4b3e      	ldr	r3, [pc, #248]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006466:	789b      	ldrb	r3, [r3, #2]
 8006468:	021b      	lsls	r3, r3, #8
 800646a:	430b      	orrs	r3, r1
 800646c:	493c      	ldr	r1, [pc, #240]	; (8006560 <MX_LWIP_Init+0x22c>)
 800646e:	78c9      	ldrb	r1, [r1, #3]
 8006470:	430b      	orrs	r3, r1
 8006472:	0a1b      	lsrs	r3, r3, #8
 8006474:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006478:	431a      	orrs	r2, r3
 800647a:	4b39      	ldr	r3, [pc, #228]	; (8006560 <MX_LWIP_Init+0x22c>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	0619      	lsls	r1, r3, #24
 8006480:	4b37      	ldr	r3, [pc, #220]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	041b      	lsls	r3, r3, #16
 8006486:	4319      	orrs	r1, r3
 8006488:	4b35      	ldr	r3, [pc, #212]	; (8006560 <MX_LWIP_Init+0x22c>)
 800648a:	789b      	ldrb	r3, [r3, #2]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	430b      	orrs	r3, r1
 8006490:	4933      	ldr	r1, [pc, #204]	; (8006560 <MX_LWIP_Init+0x22c>)
 8006492:	78c9      	ldrb	r1, [r1, #3]
 8006494:	430b      	orrs	r3, r1
 8006496:	0e1b      	lsrs	r3, r3, #24
 8006498:	4313      	orrs	r3, r2
 800649a:	4a34      	ldr	r2, [pc, #208]	; (800656c <MX_LWIP_Init+0x238>)
 800649c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800649e:	4b31      	ldr	r3, [pc, #196]	; (8006564 <MX_LWIP_Init+0x230>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	061a      	lsls	r2, r3, #24
 80064a4:	4b2f      	ldr	r3, [pc, #188]	; (8006564 <MX_LWIP_Init+0x230>)
 80064a6:	785b      	ldrb	r3, [r3, #1]
 80064a8:	041b      	lsls	r3, r3, #16
 80064aa:	431a      	orrs	r2, r3
 80064ac:	4b2d      	ldr	r3, [pc, #180]	; (8006564 <MX_LWIP_Init+0x230>)
 80064ae:	789b      	ldrb	r3, [r3, #2]
 80064b0:	021b      	lsls	r3, r3, #8
 80064b2:	4313      	orrs	r3, r2
 80064b4:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <MX_LWIP_Init+0x230>)
 80064b6:	78d2      	ldrb	r2, [r2, #3]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	061a      	lsls	r2, r3, #24
 80064bc:	4b29      	ldr	r3, [pc, #164]	; (8006564 <MX_LWIP_Init+0x230>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	0619      	lsls	r1, r3, #24
 80064c2:	4b28      	ldr	r3, [pc, #160]	; (8006564 <MX_LWIP_Init+0x230>)
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	4319      	orrs	r1, r3
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <MX_LWIP_Init+0x230>)
 80064cc:	789b      	ldrb	r3, [r3, #2]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	430b      	orrs	r3, r1
 80064d2:	4924      	ldr	r1, [pc, #144]	; (8006564 <MX_LWIP_Init+0x230>)
 80064d4:	78c9      	ldrb	r1, [r1, #3]
 80064d6:	430b      	orrs	r3, r1
 80064d8:	021b      	lsls	r3, r3, #8
 80064da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80064de:	431a      	orrs	r2, r3
 80064e0:	4b20      	ldr	r3, [pc, #128]	; (8006564 <MX_LWIP_Init+0x230>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	0619      	lsls	r1, r3, #24
 80064e6:	4b1f      	ldr	r3, [pc, #124]	; (8006564 <MX_LWIP_Init+0x230>)
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	4319      	orrs	r1, r3
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <MX_LWIP_Init+0x230>)
 80064f0:	789b      	ldrb	r3, [r3, #2]
 80064f2:	021b      	lsls	r3, r3, #8
 80064f4:	430b      	orrs	r3, r1
 80064f6:	491b      	ldr	r1, [pc, #108]	; (8006564 <MX_LWIP_Init+0x230>)
 80064f8:	78c9      	ldrb	r1, [r1, #3]
 80064fa:	430b      	orrs	r3, r1
 80064fc:	0a1b      	lsrs	r3, r3, #8
 80064fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006502:	431a      	orrs	r2, r3
 8006504:	4b17      	ldr	r3, [pc, #92]	; (8006564 <MX_LWIP_Init+0x230>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	0619      	lsls	r1, r3, #24
 800650a:	4b16      	ldr	r3, [pc, #88]	; (8006564 <MX_LWIP_Init+0x230>)
 800650c:	785b      	ldrb	r3, [r3, #1]
 800650e:	041b      	lsls	r3, r3, #16
 8006510:	4319      	orrs	r1, r3
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <MX_LWIP_Init+0x230>)
 8006514:	789b      	ldrb	r3, [r3, #2]
 8006516:	021b      	lsls	r3, r3, #8
 8006518:	430b      	orrs	r3, r1
 800651a:	4912      	ldr	r1, [pc, #72]	; (8006564 <MX_LWIP_Init+0x230>)
 800651c:	78c9      	ldrb	r1, [r1, #3]
 800651e:	430b      	orrs	r3, r1
 8006520:	0e1b      	lsrs	r3, r3, #24
 8006522:	4313      	orrs	r3, r2
 8006524:	4a12      	ldr	r2, [pc, #72]	; (8006570 <MX_LWIP_Init+0x23c>)
 8006526:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006528:	4b12      	ldr	r3, [pc, #72]	; (8006574 <MX_LWIP_Init+0x240>)
 800652a:	9302      	str	r3, [sp, #8]
 800652c:	4b12      	ldr	r3, [pc, #72]	; (8006578 <MX_LWIP_Init+0x244>)
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	2300      	movs	r3, #0
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	4b0e      	ldr	r3, [pc, #56]	; (8006570 <MX_LWIP_Init+0x23c>)
 8006536:	4a0d      	ldr	r2, [pc, #52]	; (800656c <MX_LWIP_Init+0x238>)
 8006538:	490b      	ldr	r1, [pc, #44]	; (8006568 <MX_LWIP_Init+0x234>)
 800653a:	4810      	ldr	r0, [pc, #64]	; (800657c <MX_LWIP_Init+0x248>)
 800653c:	f009 f84e 	bl	800f5dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006540:	480e      	ldr	r0, [pc, #56]	; (800657c <MX_LWIP_Init+0x248>)
 8006542:	f009 f9fd 	bl	800f940 <netif_set_default>

  netif_set_down(&gnetif);
 8006546:	480d      	ldr	r0, [pc, #52]	; (800657c <MX_LWIP_Init+0x248>)
 8006548:	f009 fa76 	bl	800fa38 <netif_set_down>
//    /* When the netif link is down this function must be called */
//    netif_set_down(&gnetif);
//  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800654c:	490c      	ldr	r1, [pc, #48]	; (8006580 <MX_LWIP_Init+0x24c>)
 800654e:	480b      	ldr	r0, [pc, #44]	; (800657c <MX_LWIP_Init+0x248>)
 8006550:	f009 fb08 	bl	800fb64 <netif_set_link_callback>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006554:	bf00      	nop
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	24000bac 	.word	0x24000bac
 8006560:	24000bb0 	.word	0x24000bb0
 8006564:	24000bb4 	.word	0x24000bb4
 8006568:	24000ba0 	.word	0x24000ba0
 800656c:	24000ba4 	.word	0x24000ba4
 8006570:	24000ba8 	.word	0x24000ba8
 8006574:	08016e71 	.word	0x08016e71
 8006578:	08006b6d 	.word	0x08006b6d
 800657c:	24000b6c 	.word	0x24000b6c
 8006580:	08006585 	.word	0x08006585

08006584 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <HAL_ETH_RxCpltCallback+0x1c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fe99 	bl	80072dc <osSemaphoreRelease>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	24000bc0 	.word	0x24000bc0

080065b8 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <HAL_ETH_TxCpltCallback+0x1c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fe89 	bl	80072dc <osSemaphoreRelease>
}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	24000bc4 	.word	0x24000bc4

080065d8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7fb ffe9 	bl	80025b8 <HAL_ETH_GetDMAError>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b80      	cmp	r3, #128	; 0x80
 80065ee:	d104      	bne.n	80065fa <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80065f0:	4b04      	ldr	r3, [pc, #16]	; (8006604 <HAL_ETH_ErrorCallback+0x2c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 fe71 	bl	80072dc <osSemaphoreRelease>
  }
}
 80065fa:	bf00      	nop
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	24000bc0 	.word	0x24000bc0

08006608 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006608:	b5b0      	push	{r4, r5, r7, lr}
 800660a:	b0a8      	sub	sp, #160	; 0xa0
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8006622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006626:	2264      	movs	r2, #100	; 0x64
 8006628:	2100      	movs	r1, #0
 800662a:	4618      	mov	r0, r3
 800662c:	f011 fad5 	bl	8017bda <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006630:	4b84      	ldr	r3, [pc, #528]	; (8006844 <low_level_init+0x23c>)
 8006632:	4a85      	ldr	r2, [pc, #532]	; (8006848 <low_level_init+0x240>)
 8006634:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 800663c:	2380      	movs	r3, #128	; 0x80
 800663e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8006642:	23e1      	movs	r3, #225	; 0xe1
 8006644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8006648:	2300      	movs	r3, #0
 800664a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800664e:	2300      	movs	r3, #0
 8006650:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8006654:	2300      	movs	r3, #0
 8006656:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800665a:	4a7a      	ldr	r2, [pc, #488]	; (8006844 <low_level_init+0x23c>)
 800665c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006660:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006662:	4b78      	ldr	r3, [pc, #480]	; (8006844 <low_level_init+0x23c>)
 8006664:	2201      	movs	r2, #1
 8006666:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006668:	4b76      	ldr	r3, [pc, #472]	; (8006844 <low_level_init+0x23c>)
 800666a:	4a78      	ldr	r2, [pc, #480]	; (800684c <low_level_init+0x244>)
 800666c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800666e:	4b75      	ldr	r3, [pc, #468]	; (8006844 <low_level_init+0x23c>)
 8006670:	4a77      	ldr	r2, [pc, #476]	; (8006850 <low_level_init+0x248>)
 8006672:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006674:	4b73      	ldr	r3, [pc, #460]	; (8006844 <low_level_init+0x23c>)
 8006676:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800667a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800667c:	4871      	ldr	r0, [pc, #452]	; (8006844 <low_level_init+0x23c>)
 800667e:	f7fa ffa7 	bl	80015d0 <HAL_ETH_Init>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006688:	2238      	movs	r2, #56	; 0x38
 800668a:	2100      	movs	r1, #0
 800668c:	4871      	ldr	r0, [pc, #452]	; (8006854 <low_level_init+0x24c>)
 800668e:	f011 faa4 	bl	8017bda <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006692:	4b70      	ldr	r3, [pc, #448]	; (8006854 <low_level_init+0x24c>)
 8006694:	2221      	movs	r2, #33	; 0x21
 8006696:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006698:	4b6e      	ldr	r3, [pc, #440]	; (8006854 <low_level_init+0x24c>)
 800669a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800669e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80066a0:	4b6c      	ldr	r3, [pc, #432]	; (8006854 <low_level_init+0x24c>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80066a6:	486c      	ldr	r0, [pc, #432]	; (8006858 <low_level_init+0x250>)
 80066a8:	f008 fe02 	bl	800f2b0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2206      	movs	r2, #6
 80066b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80066b4:	4b63      	ldr	r3, [pc, #396]	; (8006844 <low_level_init+0x23c>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80066c0:	4b60      	ldr	r3, [pc, #384]	; (8006844 <low_level_init+0x23c>)
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	785a      	ldrb	r2, [r3, #1]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80066cc:	4b5d      	ldr	r3, [pc, #372]	; (8006844 <low_level_init+0x23c>)
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	789a      	ldrb	r2, [r3, #2]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80066d8:	4b5a      	ldr	r3, [pc, #360]	; (8006844 <low_level_init+0x23c>)
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	78da      	ldrb	r2, [r3, #3]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80066e4:	4b57      	ldr	r3, [pc, #348]	; (8006844 <low_level_init+0x23c>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	791a      	ldrb	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80066f0:	4b54      	ldr	r3, [pc, #336]	; (8006844 <low_level_init+0x23c>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	795a      	ldrb	r2, [r3, #5]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006702:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800670a:	f043 030a 	orr.w	r3, r3, #10
 800670e:	b2da      	uxtb	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8006716:	2203      	movs	r2, #3
 8006718:	2100      	movs	r1, #0
 800671a:	2001      	movs	r0, #1
 800671c:	f001 fcfc 	bl	8008118 <xQueueGenericCreate>
 8006720:	4603      	mov	r3, r0
 8006722:	4a4e      	ldr	r2, [pc, #312]	; (800685c <low_level_init+0x254>)
 8006724:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8006726:	2203      	movs	r2, #3
 8006728:	2100      	movs	r1, #0
 800672a:	2001      	movs	r0, #1
 800672c:	f001 fcf4 	bl	8008118 <xQueueGenericCreate>
 8006730:	4603      	mov	r3, r0
 8006732:	4a4b      	ldr	r2, [pc, #300]	; (8006860 <low_level_init+0x258>)
 8006734:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006736:	4b4b      	ldr	r3, [pc, #300]	; (8006864 <low_level_init+0x25c>)
 8006738:	f107 0408 	add.w	r4, r7, #8
 800673c:	461d      	mov	r5, r3
 800673e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006742:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800674a:	f107 0308 	add.w	r3, r7, #8
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fc47 	bl	8006fe4 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006756:	4944      	ldr	r1, [pc, #272]	; (8006868 <low_level_init+0x260>)
 8006758:	4844      	ldr	r0, [pc, #272]	; (800686c <low_level_init+0x264>)
 800675a:	f7fa fbea 	bl	8000f32 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800675e:	4843      	ldr	r0, [pc, #268]	; (800686c <low_level_init+0x264>)
 8006760:	f7fa fc19 	bl	8000f96 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006764:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006768:	2b00      	cmp	r3, #0
 800676a:	d164      	bne.n	8006836 <low_level_init+0x22e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800676c:	483f      	ldr	r0, [pc, #252]	; (800686c <low_level_init+0x264>)
 800676e:	f7fa fcbb 	bl	80010e8 <LAN8742_GetLinkState>
 8006772:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006776:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800677a:	2b01      	cmp	r3, #1
 800677c:	dc06      	bgt.n	800678c <low_level_init+0x184>
    {
      netif_set_link_down(netif);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f009 f9c0 	bl	800fb04 <netif_set_link_down>
      netif_set_down(netif);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f009 f957 	bl	800fa38 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800678a:	e056      	b.n	800683a <low_level_init+0x232>
      switch (PHYLinkState)
 800678c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006790:	3b02      	subs	r3, #2
 8006792:	2b03      	cmp	r3, #3
 8006794:	d82a      	bhi.n	80067ec <low_level_init+0x1e4>
 8006796:	a201      	add	r2, pc, #4	; (adr r2, 800679c <low_level_init+0x194>)
 8006798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679c:	080067ad 	.word	0x080067ad
 80067a0:	080067bf 	.word	0x080067bf
 80067a4:	080067cf 	.word	0x080067cf
 80067a8:	080067df 	.word	0x080067df
        duplex = ETH_FULLDUPLEX_MODE;
 80067ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80067b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80067bc:	e01f      	b.n	80067fe <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 80067be:	2300      	movs	r3, #0
 80067c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80067c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80067cc:	e017      	b.n	80067fe <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 80067ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80067d6:	2300      	movs	r3, #0
 80067d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80067dc:	e00f      	b.n	80067fe <low_level_init+0x1f6>
        duplex = ETH_HALFDUPLEX_MODE;
 80067de:	2300      	movs	r3, #0
 80067e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80067e4:	2300      	movs	r3, #0
 80067e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80067ea:	e008      	b.n	80067fe <low_level_init+0x1f6>
        duplex = ETH_FULLDUPLEX_MODE;
 80067ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80067f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80067f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80067f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80067fc:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80067fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006802:	4619      	mov	r1, r3
 8006804:	480f      	ldr	r0, [pc, #60]	; (8006844 <low_level_init+0x23c>)
 8006806:	f7fb fc91 	bl	800212c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800680a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800680e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8006810:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006814:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800681a:	4619      	mov	r1, r3
 800681c:	4809      	ldr	r0, [pc, #36]	; (8006844 <low_level_init+0x23c>)
 800681e:	f7fb fe59 	bl	80024d4 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006822:	4808      	ldr	r0, [pc, #32]	; (8006844 <low_level_init+0x23c>)
 8006824:	f7fa ffba 	bl	800179c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f009 f899 	bl	800f960 <netif_set_up>
    netif_set_link_up(netif);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f009 f934 	bl	800fa9c <netif_set_link_up>
}
 8006834:	e001      	b.n	800683a <low_level_init+0x232>
    Error_Handler();
 8006836:	f7fa f9cf 	bl	8000bd8 <Error_Handler>
}
 800683a:	bf00      	nop
 800683c:	37a0      	adds	r7, #160	; 0xa0
 800683e:	46bd      	mov	sp, r7
 8006840:	bdb0      	pop	{r4, r5, r7, pc}
 8006842:	bf00      	nop
 8006844:	24000bc8 	.word	0x24000bc8
 8006848:	40028000 	.word	0x40028000
 800684c:	30040060 	.word	0x30040060
 8006850:	30040000 	.word	0x30040000
 8006854:	24000c78 	.word	0x24000c78
 8006858:	0801ca38 	.word	0x0801ca38
 800685c:	24000bc0 	.word	0x24000bc0
 8006860:	24000bc4 	.word	0x24000bc4
 8006864:	08018ff0 	.word	0x08018ff0
 8006868:	24000010 	.word	0x24000010
 800686c:	24000cb0 	.word	0x24000cb0

08006870 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b092      	sub	sp, #72	; 0x48
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006882:	2300      	movs	r3, #0
 8006884:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006888:	f107 030c 	add.w	r3, r7, #12
 800688c:	2230      	movs	r2, #48	; 0x30
 800688e:	2100      	movs	r1, #0
 8006890:	4618      	mov	r0, r3
 8006892:	f011 f9a2 	bl	8017bda <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	2230      	movs	r2, #48	; 0x30
 800689c:	2100      	movs	r1, #0
 800689e:	4618      	mov	r0, r3
 80068a0:	f011 f99b 	bl	8017bda <memset>

  for(q = p; q != NULL; q = q->next)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	643b      	str	r3, [r7, #64]	; 0x40
 80068a8:	e045      	b.n	8006936 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80068aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d902      	bls.n	80068b6 <low_level_output+0x46>
      return ERR_IF;
 80068b0:	f06f 030b 	mvn.w	r3, #11
 80068b4:	e065      	b.n	8006982 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80068b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b8:	6859      	ldr	r1, [r3, #4]
 80068ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068bc:	4613      	mov	r3, r2
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	3348      	adds	r3, #72	; 0x48
 80068c6:	443b      	add	r3, r7
 80068c8:	3b3c      	subs	r3, #60	; 0x3c
 80068ca:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80068cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ce:	895b      	ldrh	r3, [r3, #10]
 80068d0:	4619      	mov	r1, r3
 80068d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d4:	4613      	mov	r3, r2
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	3348      	adds	r3, #72	; 0x48
 80068de:	443b      	add	r3, r7
 80068e0:	3b38      	subs	r3, #56	; 0x38
 80068e2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80068e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d011      	beq.n	800690e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80068ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ec:	1e5a      	subs	r2, r3, #1
 80068ee:	f107 000c 	add.w	r0, r7, #12
 80068f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068f4:	460b      	mov	r3, r1
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	440b      	add	r3, r1
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	18c1      	adds	r1, r0, r3
 80068fe:	4613      	mov	r3, r2
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	3348      	adds	r3, #72	; 0x48
 8006908:	443b      	add	r3, r7
 800690a:	3b34      	subs	r3, #52	; 0x34
 800690c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800690e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006918:	4613      	mov	r3, r2
 800691a:	005b      	lsls	r3, r3, #1
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	3348      	adds	r3, #72	; 0x48
 8006922:	443b      	add	r3, r7
 8006924:	3b34      	subs	r3, #52	; 0x34
 8006926:	2200      	movs	r2, #0
 8006928:	601a      	str	r2, [r3, #0]
    }

    i++;
 800692a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800692c:	3301      	adds	r3, #1
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	643b      	str	r3, [r7, #64]	; 0x40
 8006936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1b6      	bne.n	80068aa <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	891b      	ldrh	r3, [r3, #8]
 8006940:	461a      	mov	r2, r3
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <low_level_output+0x11c>)
 8006944:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006946:	4a11      	ldr	r2, [pc, #68]	; (800698c <low_level_output+0x11c>)
 8006948:	f107 030c 	add.w	r3, r7, #12
 800694c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800694e:	4a0f      	ldr	r2, [pc, #60]	; (800698c <low_level_output+0x11c>)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006954:	6838      	ldr	r0, [r7, #0]
 8006956:	f009 fd59 	bl	801040c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800695a:	490c      	ldr	r1, [pc, #48]	; (800698c <low_level_output+0x11c>)
 800695c:	480c      	ldr	r0, [pc, #48]	; (8006990 <low_level_output+0x120>)
 800695e:	f7fb f821 	bl	80019a4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006962:	bf00      	nop
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <low_level_output+0x124>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800696c:	4618      	mov	r0, r3
 800696e:	f000 fc67 	bl	8007240 <osSemaphoreWait>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f5      	bne.n	8006964 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006978:	4805      	ldr	r0, [pc, #20]	; (8006990 <low_level_output+0x120>)
 800697a:	f7fb f992 	bl	8001ca2 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800697e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006982:	4618      	mov	r0, r3
 8006984:	3748      	adds	r7, #72	; 0x48
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	24000c78 	.word	0x24000c78
 8006990:	24000bc8 	.word	0x24000bc8
 8006994:	24000bc4 	.word	0x24000bc4

08006998 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <low_level_input+0x2c>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80069ac:	f107 030c 	add.w	r3, r7, #12
 80069b0:	4619      	mov	r1, r3
 80069b2:	4805      	ldr	r0, [pc, #20]	; (80069c8 <low_level_input+0x30>)
 80069b4:	f7fb f847 	bl	8001a46 <HAL_ETH_ReadData>
  }

  return p;
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	24000bbc 	.word	0x24000bbc
 80069c8:	24000bc8 	.word	0x24000bc8

080069cc <ethernetif_input>:
 * @param netif the lwip network interface structure for this ethernetif
 */
extern struct netif gnetif;

static void ethernetif_input(void const * argument)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b0a2      	sub	sp, #136	; 0x88
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]

	ETH_MACConfigTypeDef MACConf = {0};
 80069d4:	f107 030c 	add.w	r3, r7, #12
 80069d8:	2264      	movs	r2, #100	; 0x64
 80069da:	2100      	movs	r1, #0
 80069dc:	4618      	mov	r0, r3
 80069de:	f011 f8fc 	bl	8017bda <memset>
	int32_t PHYLinkState = 0;
 80069e2:	2300      	movs	r3, #0
 80069e4:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069ec:	2300      	movs	r3, #0
 80069ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069f2:	2300      	movs	r3, #0
 80069f4:	67fb      	str	r3, [r7, #124]	; 0x7c

	struct pbuf *p = NULL;
 80069f6:	2300      	movs	r3, #0
 80069f8:	677b      	str	r3, [r7, #116]	; 0x74
	struct netif *netif = (struct netif *) argument;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	673b      	str	r3, [r7, #112]	; 0x70

  for( ;; )
  {
	  //TIME_WAITING_FOR_INPUT
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 80069fe:	4b57      	ldr	r3, [pc, #348]	; (8006b5c <ethernetif_input+0x190>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f241 3188 	movw	r1, #5000	; 0x1388
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fc1a 	bl	8007240 <osSemaphoreWait>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d115      	bne.n	8006a3e <ethernetif_input+0x72>
    {
      do
      {
        p = low_level_input( netif );
 8006a12:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006a14:	f7ff ffc0 	bl	8006998 <low_level_input>
 8006a18:	6778      	str	r0, [r7, #116]	; 0x74
        if (p != NULL)
 8006a1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <ethernetif_input+0x6a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006a20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006a26:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006a28:	4798      	blx	r3
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <ethernetif_input+0x6a>
          {
            pbuf_free(p);
 8006a30:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006a32:	f009 fc45 	bl	80102c0 <pbuf_free>
          }
        }

      } while(p!=NULL);
 8006a36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ea      	bne.n	8006a12 <ethernetif_input+0x46>
 8006a3c:	e089      	b.n	8006b52 <ethernetif_input+0x186>
    }
    else
    {

	  if (netif_is_link_up(&gnetif))
 8006a3e:	4b48      	ldr	r3, [pc, #288]	; (8006b60 <ethernetif_input+0x194>)
 8006a40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a44:	089b      	lsrs	r3, r3, #2
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <ethernetif_input+0x8c>
	  {
	    /* When the netif is fully configured this function must be called */
	    netif_set_up(&gnetif);
 8006a50:	4843      	ldr	r0, [pc, #268]	; (8006b60 <ethernetif_input+0x194>)
 8006a52:	f008 ff85 	bl	800f960 <netif_set_up>
 8006a56:	e002      	b.n	8006a5e <ethernetif_input+0x92>
	  }
	  else
	  {
	    /* When the netif link is down this function must be called */
	    netif_set_down(&gnetif);
 8006a58:	4841      	ldr	r0, [pc, #260]	; (8006b60 <ethernetif_input+0x194>)
 8006a5a:	f008 ffed 	bl	800fa38 <netif_set_down>
	  }

  	  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006a5e:	4841      	ldr	r0, [pc, #260]	; (8006b64 <ethernetif_input+0x198>)
 8006a60:	f7fa fb42 	bl	80010e8 <LAN8742_GetLinkState>
 8006a64:	67b8      	str	r0, [r7, #120]	; 0x78

  	  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a6c:	089b      	lsrs	r3, r3, #2
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00c      	beq.n	8006a92 <ethernetif_input+0xc6>
 8006a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	dc09      	bgt.n	8006a92 <ethernetif_input+0xc6>
  	  {
  		HAL_ETH_Stop_IT(&heth);
 8006a7e:	483a      	ldr	r0, [pc, #232]	; (8006b68 <ethernetif_input+0x19c>)
 8006a80:	f7fa ff18 	bl	80018b4 <HAL_ETH_Stop_IT>
  		netif_set_down(netif);
 8006a84:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006a86:	f008 ffd7 	bl	800fa38 <netif_set_down>
  		netif_set_link_down(netif);
 8006a8a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006a8c:	f009 f83a 	bl	800fb04 <netif_set_link_down>
 8006a90:	e05f      	b.n	8006b52 <ethernetif_input+0x186>
  	  }
  	  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d158      	bne.n	8006b52 <ethernetif_input+0x186>
 8006aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	dd55      	ble.n	8006b52 <ethernetif_input+0x186>
  	  {
  		switch (PHYLinkState)
 8006aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aa8:	3b02      	subs	r3, #2
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d832      	bhi.n	8006b14 <ethernetif_input+0x148>
 8006aae:	a201      	add	r2, pc, #4	; (adr r2, 8006ab4 <ethernetif_input+0xe8>)
 8006ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab4:	08006ac5 	.word	0x08006ac5
 8006ab8:	08006adb 	.word	0x08006adb
 8006abc:	08006aef 	.word	0x08006aef
 8006ac0:	08006b03 	.word	0x08006b03
  		{
  		case LAN8742_STATUS_100MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 8006ac4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ac8:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 8006aca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ace:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 8006ad8:	e01d      	b.n	8006b16 <ethernetif_input+0x14a>
  		case LAN8742_STATUS_100MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_100M;
 8006ade:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ae2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 8006aec:	e013      	b.n	8006b16 <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_FULLDUPLEX:
  		  duplex = ETH_FULLDUPLEX_MODE;
 8006aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006af2:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 8006afa:	2301      	movs	r3, #1
 8006afc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 8006b00:	e009      	b.n	8006b16 <ethernetif_input+0x14a>
  		case LAN8742_STATUS_10MBITS_HALFDUPLEX:
  		  duplex = ETH_HALFDUPLEX_MODE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	67fb      	str	r3, [r7, #124]	; 0x7c
  		  speed = ETH_SPEED_10M;
 8006b06:	2300      	movs	r3, #0
 8006b08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  		  linkchanged = 1;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  		  break;
 8006b12:	e000      	b.n	8006b16 <ethernetif_input+0x14a>
  		default:
  		  break;
 8006b14:	bf00      	nop
  		}

  		if(linkchanged)
 8006b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d019      	beq.n	8006b52 <ethernetif_input+0x186>
  		{
  		  /* Get MAC Config MAC */
  		  HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006b1e:	f107 030c 	add.w	r3, r7, #12
 8006b22:	4619      	mov	r1, r3
 8006b24:	4810      	ldr	r0, [pc, #64]	; (8006b68 <ethernetif_input+0x19c>)
 8006b26:	f7fb fb01 	bl	800212c <HAL_ETH_GetMACConfig>
  		  MACConf.DuplexMode = duplex;
 8006b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b2c:	627b      	str	r3, [r7, #36]	; 0x24
  		  MACConf.Speed = speed;
 8006b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b32:	623b      	str	r3, [r7, #32]
  		  HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006b34:	f107 030c 	add.w	r3, r7, #12
 8006b38:	4619      	mov	r1, r3
 8006b3a:	480b      	ldr	r0, [pc, #44]	; (8006b68 <ethernetif_input+0x19c>)
 8006b3c:	f7fb fcca 	bl	80024d4 <HAL_ETH_SetMACConfig>
  		  HAL_ETH_Start_IT(&heth);
 8006b40:	4809      	ldr	r0, [pc, #36]	; (8006b68 <ethernetif_input+0x19c>)
 8006b42:	f7fa fe2b 	bl	800179c <HAL_ETH_Start_IT>
  		  netif_set_up(netif);
 8006b46:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006b48:	f008 ff0a 	bl	800f960 <netif_set_up>
  		  netif_set_link_up(netif);
 8006b4c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006b4e:	f008 ffa5 	bl	800fa9c <netif_set_link_up>
  		}
  	  }
    }
	osDelay(1);
 8006b52:	2001      	movs	r0, #1
 8006b54:	f000 fa92 	bl	800707c <osDelay>
    if (osSemaphoreWait(RxPktSemaphore, (uint32_t)5000UL) == osOK)
 8006b58:	e751      	b.n	80069fe <ethernetif_input+0x32>
 8006b5a:	bf00      	nop
 8006b5c:	24000bc0 	.word	0x24000bc0
 8006b60:	24000b6c 	.word	0x24000b6c
 8006b64:	24000cb0 	.word	0x24000cb0
 8006b68:	24000bc8 	.word	0x24000bc8

08006b6c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <ethernetif_init+0x1c>
 8006b7a:	4b0e      	ldr	r3, [pc, #56]	; (8006bb4 <ethernetif_init+0x48>)
 8006b7c:	f240 2243 	movw	r2, #579	; 0x243
 8006b80:	490d      	ldr	r1, [pc, #52]	; (8006bb8 <ethernetif_init+0x4c>)
 8006b82:	480e      	ldr	r0, [pc, #56]	; (8006bbc <ethernetif_init+0x50>)
 8006b84:	f011 f8c6 	bl	8017d14 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2273      	movs	r2, #115	; 0x73
 8006b8c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2274      	movs	r2, #116	; 0x74
 8006b94:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a09      	ldr	r2, [pc, #36]	; (8006bc0 <ethernetif_init+0x54>)
 8006b9c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a08      	ldr	r2, [pc, #32]	; (8006bc4 <ethernetif_init+0x58>)
 8006ba2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fd2f 	bl	8006608 <low_level_init>

  return ERR_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	0801900c 	.word	0x0801900c
 8006bb8:	08019028 	.word	0x08019028
 8006bbc:	08019038 	.word	0x08019038
 8006bc0:	0800cc0d 	.word	0x0800cc0d
 8006bc4:	08006871 	.word	0x08006871

08006bc8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006bd4:	68f9      	ldr	r1, [r7, #12]
 8006bd6:	4809      	ldr	r0, [pc, #36]	; (8006bfc <pbuf_free_custom+0x34>)
 8006bd8:	f008 fc5a 	bl	800f490 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8006bdc:	4b08      	ldr	r3, [pc, #32]	; (8006c00 <pbuf_free_custom+0x38>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d107      	bne.n	8006bf4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <pbuf_free_custom+0x38>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <pbuf_free_custom+0x3c>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fb74 	bl	80072dc <osSemaphoreRelease>
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	0801ca38 	.word	0x0801ca38
 8006c00:	24000bbc 	.word	0x24000bbc
 8006c04:	24000bc0 	.word	0x24000bc0

08006c08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006c0c:	f7fa fb44 	bl	8001298 <HAL_GetTick>
 8006c10:	4603      	mov	r3, r0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08e      	sub	sp, #56	; 0x38
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a4d      	ldr	r2, [pc, #308]	; (8006d6c <HAL_ETH_MspInit+0x154>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	f040 8093 	bne.w	8006d62 <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006c3c:	4b4c      	ldr	r3, [pc, #304]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c42:	4a4b      	ldr	r2, [pc, #300]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006c4c:	4b48      	ldr	r3, [pc, #288]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006c5a:	4b45      	ldr	r3, [pc, #276]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c60:	4a43      	ldr	r2, [pc, #268]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006c6a:	4b41      	ldr	r3, [pc, #260]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006c78:	4b3d      	ldr	r3, [pc, #244]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c7e:	4a3c      	ldr	r2, [pc, #240]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c84:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006c88:	4b39      	ldr	r3, [pc, #228]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006c96:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c9c:	4a34      	ldr	r2, [pc, #208]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ca6:	4b32      	ldr	r3, [pc, #200]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb0:	617b      	str	r3, [r7, #20]
 8006cb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cb4:	4b2e      	ldr	r3, [pc, #184]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cba:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006cbc:	f043 0304 	orr.w	r3, r3, #4
 8006cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cc4:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cca:	f003 0304 	and.w	r3, r3, #4
 8006cce:	613b      	str	r3, [r7, #16]
 8006cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cd2:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cd8:	4a25      	ldr	r2, [pc, #148]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006cda:	f043 0301 	orr.w	r3, r3, #1
 8006cde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <HAL_ETH_MspInit+0x158>)
 8006ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 8006cf0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d02:	230b      	movs	r3, #11
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	4819      	ldr	r0, [pc, #100]	; (8006d74 <HAL_ETH_MspInit+0x15c>)
 8006d0e:	f7fc f9d5 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 8006d12:	2332      	movs	r3, #50	; 0x32
 8006d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d16:	2302      	movs	r3, #2
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d22:	230b      	movs	r3, #11
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4812      	ldr	r0, [pc, #72]	; (8006d78 <HAL_ETH_MspInit+0x160>)
 8006d2e:	f7fc f9c5 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 8006d32:	2386      	movs	r3, #134	; 0x86
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d36:	2302      	movs	r3, #2
 8006d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006d42:	230b      	movs	r3, #11
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	480b      	ldr	r0, [pc, #44]	; (8006d7c <HAL_ETH_MspInit+0x164>)
 8006d4e:	f7fc f9b5 	bl	80030bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006d52:	2200      	movs	r2, #0
 8006d54:	2105      	movs	r1, #5
 8006d56:	203d      	movs	r0, #61	; 0x3d
 8006d58:	f7fa fb82 	bl	8001460 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006d5c:	203d      	movs	r0, #61	; 0x3d
 8006d5e:	f7fa fb99 	bl	8001494 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006d62:	bf00      	nop
 8006d64:	3738      	adds	r7, #56	; 0x38
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40028000 	.word	0x40028000
 8006d70:	58024400 	.word	0x58024400
 8006d74:	58021800 	.word	0x58021800
 8006d78:	58020800 	.word	0x58020800
 8006d7c:	58020000 	.word	0x58020000

08006d80 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006d84:	4802      	ldr	r0, [pc, #8]	; (8006d90 <ETH_PHY_IO_Init+0x10>)
 8006d86:	f7fb fbbf 	bl	8002508 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	24000bc8 	.word	0x24000bc8

08006d94 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  return 0;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	68f9      	ldr	r1, [r7, #12]
 8006db6:	4807      	ldr	r0, [pc, #28]	; (8006dd4 <ETH_PHY_IO_ReadReg+0x30>)
 8006db8:	f7fb f910 	bl	8001fdc <HAL_ETH_ReadPHYRegister>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d002      	beq.n	8006dc8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dc6:	e000      	b.n	8006dca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	24000bc8 	.word	0x24000bc8

08006dd8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	68f9      	ldr	r1, [r7, #12]
 8006dea:	4807      	ldr	r0, [pc, #28]	; (8006e08 <ETH_PHY_IO_WriteReg+0x30>)
 8006dec:	f7fb f94a 	bl	8002084 <HAL_ETH_WritePHYRegister>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dfa:	e000      	b.n	8006dfe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	24000bc8 	.word	0x24000bc8

08006e0c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006e10:	f7fa fa42 	bl	8001298 <HAL_GetTick>
 8006e14:	4603      	mov	r3, r0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006e24:	4812      	ldr	r0, [pc, #72]	; (8006e70 <HAL_ETH_RxAllocateCallback+0x54>)
 8006e26:	f008 fabf 	bl	800f3a8 <memp_malloc_pool>
 8006e2a:	60f8      	str	r0, [r7, #12]
  if (p)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d014      	beq.n	8006e5c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f103 0220 	add.w	r2, r3, #32
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4a0d      	ldr	r2, [pc, #52]	; (8006e74 <HAL_ETH_RxAllocateCallback+0x58>)
 8006e40:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006e4a:	9201      	str	r2, [sp, #4]
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2241      	movs	r2, #65	; 0x41
 8006e52:	2100      	movs	r1, #0
 8006e54:	2000      	movs	r0, #0
 8006e56:	f009 f87b 	bl	800ff50 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006e5a:	e005      	b.n	8006e68 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006e5c:	4b06      	ldr	r3, [pc, #24]	; (8006e78 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]
}
 8006e68:	bf00      	nop
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	0801ca38 	.word	0x0801ca38
 8006e74:	08006bc9 	.word	0x08006bc9
 8006e78:	24000bbc 	.word	0x24000bbc

08006e7c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b08d      	sub	sp, #52	; 0x34
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3b20      	subs	r3, #32
 8006e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	887a      	ldrh	r2, [r7, #2]
 8006eac:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eba:	601a      	str	r2, [r3, #0]
 8006ebc:	e003      	b.n	8006ec6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eca:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ed2:	e009      	b.n	8006ee8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	891a      	ldrh	r2, [r3, #8]
 8006ed8:	887b      	ldrh	r3, [r7, #2]
 8006eda:	4413      	add	r3, r2
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1f2      	bne.n	8006ed4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	623a      	str	r2, [r7, #32]
 8006ef4:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dd1d      	ble.n	8006f38 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	f003 021f 	and.w	r2, r3, #31
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8006f0c:	f3bf 8f4f 	dsb	sy
}
 8006f10:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8006f12:	4a0d      	ldr	r2, [pc, #52]	; (8006f48 <HAL_ETH_RxLinkCallback+0xcc>)
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	3320      	adds	r3, #32
 8006f1e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	3b20      	subs	r3, #32
 8006f24:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dcf2      	bgt.n	8006f12 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8006f2c:	f3bf 8f4f 	dsb	sy
}
 8006f30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006f32:	f3bf 8f6f 	isb	sy
}
 8006f36:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8006f38:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006f3a:	bf00      	nop
 8006f3c:	3734      	adds	r7, #52	; 0x34
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	e000ed00 	.word	0xe000ed00

08006f4c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f009 f9b3 	bl	80102c0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	4603      	mov	r3, r0
 8006f6a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006f74:	2b84      	cmp	r3, #132	; 0x84
 8006f76:	d005      	beq.n	8006f84 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006f78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	3303      	adds	r3, #3
 8006f82:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006f84:	68fb      	ldr	r3, [r7, #12]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b083      	sub	sp, #12
 8006f96:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f98:	f3ef 8305 	mrs	r3, IPSR
 8006f9c:	607b      	str	r3, [r7, #4]
  return(result);
 8006f9e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006fba:	f002 fa83 	bl	80094c4 <vTaskStartScheduler>
  
  return osOK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006fc8:	f7ff ffe3 	bl	8006f92 <inHandlerMode>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006fd2:	f002 fb9b 	bl	800970c <xTaskGetTickCountFromISR>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	e002      	b.n	8006fe0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006fda:	f002 fb87 	bl	80096ec <xTaskGetTickCount>
 8006fde:	4603      	mov	r3, r0
  }
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe6:	b089      	sub	sp, #36	; 0x24
 8006fe8:	af04      	add	r7, sp, #16
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d020      	beq.n	8007038 <osThreadCreate+0x54>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d01c      	beq.n	8007038 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685c      	ldr	r4, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681d      	ldr	r5, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691e      	ldr	r6, [r3, #16]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff ffa6 	bl	8006f62 <makeFreeRtosPriority>
 8007016:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007020:	9202      	str	r2, [sp, #8]
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	9100      	str	r1, [sp, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	4632      	mov	r2, r6
 800702a:	4629      	mov	r1, r5
 800702c:	4620      	mov	r0, r4
 800702e:	f001 ff5d 	bl	8008eec <xTaskCreateStatic>
 8007032:	4603      	mov	r3, r0
 8007034:	60fb      	str	r3, [r7, #12]
 8007036:	e01c      	b.n	8007072 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685c      	ldr	r4, [r3, #4]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007044:	b29e      	uxth	r6, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff ff88 	bl	8006f62 <makeFreeRtosPriority>
 8007052:	4602      	mov	r2, r0
 8007054:	f107 030c 	add.w	r3, r7, #12
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	9200      	str	r2, [sp, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	4632      	mov	r2, r6
 8007060:	4629      	mov	r1, r5
 8007062:	4620      	mov	r0, r4
 8007064:	f001 ff9f 	bl	8008fa6 <xTaskCreate>
 8007068:	4603      	mov	r3, r0
 800706a:	2b01      	cmp	r3, #1
 800706c:	d001      	beq.n	8007072 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800706e:	2300      	movs	r3, #0
 8007070:	e000      	b.n	8007074 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800707c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <osDelay+0x16>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	e000      	b.n	8007094 <osDelay+0x18>
 8007092:	2301      	movs	r3, #1
 8007094:	4618      	mov	r0, r3
 8007096:	f002 f9e1 	bl	800945c <vTaskDelay>
  
  return osOK;
 800709a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	4619      	mov	r1, r3
 80070ba:	2001      	movs	r0, #1
 80070bc:	f001 f8b7 	bl	800822e <xQueueCreateMutexStatic>
 80070c0:	4603      	mov	r3, r0
 80070c2:	e003      	b.n	80070cc <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80070c4:	2001      	movs	r0, #1
 80070c6:	f001 f89a 	bl	80081fe <xQueueCreateMutex>
 80070ca:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d101      	bne.n	80070ec <osMutexWait+0x18>
    return osErrorParameter;
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	e03a      	b.n	8007162 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f6:	d103      	bne.n	8007100 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80070f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e009      	b.n	8007114 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d006      	beq.n	8007114 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d101      	bne.n	8007114 <osMutexWait+0x40>
      ticks = 1;
 8007110:	2301      	movs	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007114:	f7ff ff3d 	bl	8006f92 <inHandlerMode>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d017      	beq.n	800714e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800711e:	f107 0308 	add.w	r3, r7, #8
 8007122:	461a      	mov	r2, r3
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fcae 	bl	8008a88 <xQueueReceiveFromISR>
 800712c:	4603      	mov	r3, r0
 800712e:	2b01      	cmp	r3, #1
 8007130:	d001      	beq.n	8007136 <osMutexWait+0x62>
      return osErrorOS;
 8007132:	23ff      	movs	r3, #255	; 0xff
 8007134:	e015      	b.n	8007162 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <osMutexWait+0x8c>
 800713c:	4b0b      	ldr	r3, [pc, #44]	; (800716c <osMutexWait+0x98>)
 800713e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	f3bf 8f4f 	dsb	sy
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	e008      	b.n	8007160 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800714e:	68f9      	ldr	r1, [r7, #12]
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 fb8d 	bl	8008870 <xQueueSemaphoreTake>
 8007156:	4603      	mov	r3, r0
 8007158:	2b01      	cmp	r3, #1
 800715a:	d001      	beq.n	8007160 <osMutexWait+0x8c>
    return osErrorOS;
 800715c:	23ff      	movs	r3, #255	; 0xff
 800715e:	e000      	b.n	8007162 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	e000ed04 	.word	0xe000ed04

08007170 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800717c:	2300      	movs	r3, #0
 800717e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007180:	f7ff ff07 	bl	8006f92 <inHandlerMode>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d016      	beq.n	80071b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800718a:	f107 0308 	add.w	r3, r7, #8
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 fa00 	bl	8008596 <xQueueGiveFromISR>
 8007196:	4603      	mov	r3, r0
 8007198:	2b01      	cmp	r3, #1
 800719a:	d001      	beq.n	80071a0 <osMutexRelease+0x30>
      return osErrorOS;
 800719c:	23ff      	movs	r3, #255	; 0xff
 800719e:	e017      	b.n	80071d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d013      	beq.n	80071ce <osMutexRelease+0x5e>
 80071a6:	4b0c      	ldr	r3, [pc, #48]	; (80071d8 <osMutexRelease+0x68>)
 80071a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ac:	601a      	str	r2, [r3, #0]
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	e00a      	b.n	80071ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 f850 	bl	8008264 <xQueueGenericSend>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d001      	beq.n	80071ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80071ca:	23ff      	movs	r3, #255	; 0xff
 80071cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80071dc:	b580      	push	{r7, lr}
 80071de:	b086      	sub	sp, #24
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00f      	beq.n	800720e <osSemaphoreCreate+0x32>
    if (count == 1) {
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10a      	bne.n	800720a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2203      	movs	r2, #3
 80071fa:	9200      	str	r2, [sp, #0]
 80071fc:	2200      	movs	r2, #0
 80071fe:	2100      	movs	r1, #0
 8007200:	2001      	movs	r0, #1
 8007202:	f000 ff11 	bl	8008028 <xQueueGenericCreateStatic>
 8007206:	4603      	mov	r3, r0
 8007208:	e016      	b.n	8007238 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800720a:	2300      	movs	r3, #0
 800720c:	e014      	b.n	8007238 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d110      	bne.n	8007236 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007214:	2203      	movs	r2, #3
 8007216:	2100      	movs	r1, #0
 8007218:	2001      	movs	r0, #1
 800721a:	f000 ff7d 	bl	8008118 <xQueueGenericCreate>
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <osSemaphoreCreate+0x56>
 8007226:	2300      	movs	r3, #0
 8007228:	2200      	movs	r2, #0
 800722a:	2100      	movs	r1, #0
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f001 f819 	bl	8008264 <xQueueGenericSend>
      return sema;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	e000      	b.n	8007238 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007236:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800724a:	2300      	movs	r3, #0
 800724c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007254:	2380      	movs	r3, #128	; 0x80
 8007256:	e03a      	b.n	80072ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007258:	2300      	movs	r3, #0
 800725a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007262:	d103      	bne.n	800726c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007264:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007268:	60fb      	str	r3, [r7, #12]
 800726a:	e009      	b.n	8007280 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d006      	beq.n	8007280 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <osSemaphoreWait+0x40>
      ticks = 1;
 800727c:	2301      	movs	r3, #1
 800727e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007280:	f7ff fe87 	bl	8006f92 <inHandlerMode>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d017      	beq.n	80072ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800728a:	f107 0308 	add.w	r3, r7, #8
 800728e:	461a      	mov	r2, r3
 8007290:	2100      	movs	r1, #0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fbf8 	bl	8008a88 <xQueueReceiveFromISR>
 8007298:	4603      	mov	r3, r0
 800729a:	2b01      	cmp	r3, #1
 800729c:	d001      	beq.n	80072a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800729e:	23ff      	movs	r3, #255	; 0xff
 80072a0:	e015      	b.n	80072ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d011      	beq.n	80072cc <osSemaphoreWait+0x8c>
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <osSemaphoreWait+0x98>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	e008      	b.n	80072cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fad7 	bl	8008870 <xQueueSemaphoreTake>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d001      	beq.n	80072cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80072c8:	23ff      	movs	r3, #255	; 0xff
 80072ca:	e000      	b.n	80072ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	bf00      	nop
 80072d8:	e000ed04 	.word	0xe000ed04

080072dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80072ec:	f7ff fe51 	bl	8006f92 <inHandlerMode>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d016      	beq.n	8007324 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80072f6:	f107 0308 	add.w	r3, r7, #8
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f001 f94a 	bl	8008596 <xQueueGiveFromISR>
 8007302:	4603      	mov	r3, r0
 8007304:	2b01      	cmp	r3, #1
 8007306:	d001      	beq.n	800730c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007308:	23ff      	movs	r3, #255	; 0xff
 800730a:	e017      	b.n	800733c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d013      	beq.n	800733a <osSemaphoreRelease+0x5e>
 8007312:	4b0c      	ldr	r3, [pc, #48]	; (8007344 <osSemaphoreRelease+0x68>)
 8007314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	f3bf 8f6f 	isb	sy
 8007322:	e00a      	b.n	800733a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 ff9a 	bl	8008264 <xQueueGenericSend>
 8007330:	4603      	mov	r3, r0
 8007332:	2b01      	cmp	r3, #1
 8007334:	d001      	beq.n	800733a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007336:	23ff      	movs	r3, #255	; 0xff
 8007338:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800733a:	68fb      	ldr	r3, [r7, #12]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	e000ed04 	.word	0xe000ed04

08007348 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007350:	f7ff fe1f 	bl	8006f92 <inHandlerMode>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800735a:	2382      	movs	r3, #130	; 0x82
 800735c:	e003      	b.n	8007366 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fc4e 	bl	8008c00 <vQueueDelete>

  return osOK; 
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800736e:	b590      	push	{r4, r7, lr}
 8007370:	b085      	sub	sp, #20
 8007372:	af02      	add	r7, sp, #8
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d011      	beq.n	80073a4 <osMessageCreate+0x36>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00d      	beq.n	80073a4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	2400      	movs	r4, #0
 800739a:	9400      	str	r4, [sp, #0]
 800739c:	f000 fe44 	bl	8008028 <xQueueGenericCreateStatic>
 80073a0:	4603      	mov	r3, r0
 80073a2:	e008      	b.n	80073b6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	4619      	mov	r1, r3
 80073b0:	f000 feb2 	bl	8008118 <xQueueGenericCreate>
 80073b4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd90      	pop	{r4, r7, pc}
	...

080073c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80073cc:	2300      	movs	r3, #0
 80073ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <osMessagePut+0x1e>
    ticks = 1;
 80073da:	2301      	movs	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80073de:	f7ff fdd8 	bl	8006f92 <inHandlerMode>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d018      	beq.n	800741a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80073e8:	f107 0210 	add.w	r2, r7, #16
 80073ec:	f107 0108 	add.w	r1, r7, #8
 80073f0:	2300      	movs	r3, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f001 f834 	bl	8008460 <xQueueGenericSendFromISR>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d001      	beq.n	8007402 <osMessagePut+0x42>
      return osErrorOS;
 80073fe:	23ff      	movs	r3, #255	; 0xff
 8007400:	e018      	b.n	8007434 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d014      	beq.n	8007432 <osMessagePut+0x72>
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <osMessagePut+0x7c>)
 800740a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	f3bf 8f4f 	dsb	sy
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	e00b      	b.n	8007432 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800741a:	f107 0108 	add.w	r1, r7, #8
 800741e:	2300      	movs	r3, #0
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 ff1e 	bl	8008264 <xQueueGenericSend>
 8007428:	4603      	mov	r3, r0
 800742a:	2b01      	cmp	r3, #1
 800742c:	d001      	beq.n	8007432 <osMessagePut+0x72>
      return osErrorOS;
 800742e:	23ff      	movs	r3, #255	; 0xff
 8007430:	e000      	b.n	8007434 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b08b      	sub	sp, #44	; 0x2c
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007450:	2300      	movs	r3, #0
 8007452:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10a      	bne.n	8007470 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800745a:	2380      	movs	r3, #128	; 0x80
 800745c:	617b      	str	r3, [r7, #20]
    return event;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	461c      	mov	r4, r3
 8007462:	f107 0314 	add.w	r3, r7, #20
 8007466:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800746a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800746e:	e054      	b.n	800751a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007470:	2300      	movs	r3, #0
 8007472:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800747e:	d103      	bne.n	8007488 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	e009      	b.n	800749c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d006      	beq.n	800749c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <osMessageGet+0x5c>
      ticks = 1;
 8007498:	2301      	movs	r3, #1
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800749c:	f7ff fd79 	bl	8006f92 <inHandlerMode>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01c      	beq.n	80074e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80074a6:	f107 0220 	add.w	r2, r7, #32
 80074aa:	f107 0314 	add.w	r3, r7, #20
 80074ae:	3304      	adds	r3, #4
 80074b0:	4619      	mov	r1, r3
 80074b2:	68b8      	ldr	r0, [r7, #8]
 80074b4:	f001 fae8 	bl	8008a88 <xQueueReceiveFromISR>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d102      	bne.n	80074c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80074be:	2310      	movs	r3, #16
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	e001      	b.n	80074c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01d      	beq.n	800750a <osMessageGet+0xca>
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <osMessageGet+0xe4>)
 80074d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	e014      	b.n	800750a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	3304      	adds	r3, #4
 80074e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e8:	4619      	mov	r1, r3
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f001 f8e0 	bl	80086b0 <xQueueReceive>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d102      	bne.n	80074fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80074f6:	2310      	movs	r3, #16
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e006      	b.n	800750a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <osMessageGet+0xc6>
 8007502:	2300      	movs	r3, #0
 8007504:	e000      	b.n	8007508 <osMessageGet+0xc8>
 8007506:	2340      	movs	r3, #64	; 0x40
 8007508:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	461c      	mov	r4, r3
 800750e:	f107 0314 	add.w	r3, r7, #20
 8007512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	372c      	adds	r7, #44	; 0x2c
 800751e:	46bd      	mov	sp, r7
 8007520:	bd90      	pop	{r4, r7, pc}
 8007522:	bf00      	nop
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007530:	f7ff fd2f 	bl	8006f92 <inHandlerMode>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d004      	beq.n	8007544 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fb42 	bl	8008bc4 <uxQueueMessagesWaitingFromISR>
 8007540:	4603      	mov	r3, r0
 8007542:	e003      	b.n	800754c <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f001 fb1f 	bl	8008b88 <uxQueueMessagesWaiting>
 800754a:	4603      	mov	r3, r0
  }
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800755c:	f7ff fd19 	bl	8006f92 <inHandlerMode>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <osMessageDelete+0x16>
    return osErrorISR;
 8007566:	2382      	movs	r3, #130	; 0x82
 8007568:	e003      	b.n	8007572 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fb48 	bl	8008c00 <vQueueDelete>

  return osOK; 
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	; 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007584:	2300      	movs	r3, #0
 8007586:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007588:	f002 f806 	bl	8009598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800758c:	4b5b      	ldr	r3, [pc, #364]	; (80076fc <pvPortMalloc+0x180>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007594:	f000 f920 	bl	80077d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007598:	4b59      	ldr	r3, [pc, #356]	; (8007700 <pvPortMalloc+0x184>)
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4013      	ands	r3, r2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	f040 8093 	bne.w	80076cc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d01d      	beq.n	80075e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075ac:	2208      	movs	r2, #8
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4413      	add	r3, r2
 80075b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d014      	beq.n	80075e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f023 0307 	bic.w	r3, r3, #7
 80075c4:	3308      	adds	r3, #8
 80075c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d06e      	beq.n	80076cc <pvPortMalloc+0x150>
 80075ee:	4b45      	ldr	r3, [pc, #276]	; (8007704 <pvPortMalloc+0x188>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d869      	bhi.n	80076cc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80075f8:	4b43      	ldr	r3, [pc, #268]	; (8007708 <pvPortMalloc+0x18c>)
 80075fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80075fc:	4b42      	ldr	r3, [pc, #264]	; (8007708 <pvPortMalloc+0x18c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007602:	e004      	b.n	800760e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d903      	bls.n	8007620 <pvPortMalloc+0xa4>
 8007618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1f1      	bne.n	8007604 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007620:	4b36      	ldr	r3, [pc, #216]	; (80076fc <pvPortMalloc+0x180>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007626:	429a      	cmp	r2, r3
 8007628:	d050      	beq.n	80076cc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2208      	movs	r2, #8
 8007630:	4413      	add	r3, r2
 8007632:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	1ad2      	subs	r2, r2, r3
 8007644:	2308      	movs	r3, #8
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	429a      	cmp	r2, r3
 800764a:	d91f      	bls.n	800768c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800764c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4413      	add	r3, r2
 8007652:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	f003 0307 	and.w	r3, r3, #7
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <pvPortMalloc+0xf8>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	613b      	str	r3, [r7, #16]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	1ad2      	subs	r2, r2, r3
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007686:	69b8      	ldr	r0, [r7, #24]
 8007688:	f000 f908 	bl	800789c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800768c:	4b1d      	ldr	r3, [pc, #116]	; (8007704 <pvPortMalloc+0x188>)
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	4a1b      	ldr	r2, [pc, #108]	; (8007704 <pvPortMalloc+0x188>)
 8007698:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800769a:	4b1a      	ldr	r3, [pc, #104]	; (8007704 <pvPortMalloc+0x188>)
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	4b1b      	ldr	r3, [pc, #108]	; (800770c <pvPortMalloc+0x190>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d203      	bcs.n	80076ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076a6:	4b17      	ldr	r3, [pc, #92]	; (8007704 <pvPortMalloc+0x188>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a18      	ldr	r2, [pc, #96]	; (800770c <pvPortMalloc+0x190>)
 80076ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	4b13      	ldr	r3, [pc, #76]	; (8007700 <pvPortMalloc+0x184>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	431a      	orrs	r2, r3
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	2200      	movs	r2, #0
 80076c0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076c2:	4b13      	ldr	r3, [pc, #76]	; (8007710 <pvPortMalloc+0x194>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3301      	adds	r3, #1
 80076c8:	4a11      	ldr	r2, [pc, #68]	; (8007710 <pvPortMalloc+0x194>)
 80076ca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076cc:	f001 ff72 	bl	80095b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <pvPortMalloc+0x174>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	60fb      	str	r3, [r7, #12]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <pvPortMalloc+0x172>
	return pvReturn;
 80076f0:	69fb      	ldr	r3, [r7, #28]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3728      	adds	r7, #40	; 0x28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	240084d8 	.word	0x240084d8
 8007700:	240084ec 	.word	0x240084ec
 8007704:	240084dc 	.word	0x240084dc
 8007708:	240084d0 	.word	0x240084d0
 800770c:	240084e0 	.word	0x240084e0
 8007710:	240084e4 	.word	0x240084e4

08007714 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d04d      	beq.n	80077c2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007726:	2308      	movs	r3, #8
 8007728:	425b      	negs	r3, r3
 800772a:	697a      	ldr	r2, [r7, #20]
 800772c:	4413      	add	r3, r2
 800772e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	4b24      	ldr	r3, [pc, #144]	; (80077cc <vPortFree+0xb8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4013      	ands	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d10a      	bne.n	8007758 <vPortFree+0x44>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	60fb      	str	r3, [r7, #12]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d00a      	beq.n	8007776 <vPortFree+0x62>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60bb      	str	r3, [r7, #8]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	685a      	ldr	r2, [r3, #4]
 800777a:	4b14      	ldr	r3, [pc, #80]	; (80077cc <vPortFree+0xb8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4013      	ands	r3, r2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d01e      	beq.n	80077c2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d11a      	bne.n	80077c2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	685a      	ldr	r2, [r3, #4]
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <vPortFree+0xb8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	43db      	mvns	r3, r3
 8007796:	401a      	ands	r2, r3
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800779c:	f001 fefc 	bl	8009598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <vPortFree+0xbc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4413      	add	r3, r2
 80077aa:	4a09      	ldr	r2, [pc, #36]	; (80077d0 <vPortFree+0xbc>)
 80077ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ae:	6938      	ldr	r0, [r7, #16]
 80077b0:	f000 f874 	bl	800789c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077b4:	4b07      	ldr	r3, [pc, #28]	; (80077d4 <vPortFree+0xc0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	4a06      	ldr	r2, [pc, #24]	; (80077d4 <vPortFree+0xc0>)
 80077bc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077be:	f001 fef9 	bl	80095b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077c2:	bf00      	nop
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	240084ec 	.word	0x240084ec
 80077d0:	240084dc 	.word	0x240084dc
 80077d4:	240084e8 	.word	0x240084e8

080077d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077de:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80077e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80077e4:	4b27      	ldr	r3, [pc, #156]	; (8007884 <prvHeapInit+0xac>)
 80077e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00c      	beq.n	800780c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3307      	adds	r3, #7
 80077f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0307 	bic.w	r3, r3, #7
 80077fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	4a1f      	ldr	r2, [pc, #124]	; (8007884 <prvHeapInit+0xac>)
 8007808:	4413      	add	r3, r2
 800780a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007810:	4a1d      	ldr	r2, [pc, #116]	; (8007888 <prvHeapInit+0xb0>)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007816:	4b1c      	ldr	r3, [pc, #112]	; (8007888 <prvHeapInit+0xb0>)
 8007818:	2200      	movs	r2, #0
 800781a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4413      	add	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007824:	2208      	movs	r2, #8
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1a9b      	subs	r3, r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0307 	bic.w	r3, r3, #7
 8007832:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4a15      	ldr	r2, [pc, #84]	; (800788c <prvHeapInit+0xb4>)
 8007838:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800783a:	4b14      	ldr	r3, [pc, #80]	; (800788c <prvHeapInit+0xb4>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2200      	movs	r2, #0
 8007840:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <prvHeapInit+0xb4>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	1ad2      	subs	r2, r2, r3
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007858:	4b0c      	ldr	r3, [pc, #48]	; (800788c <prvHeapInit+0xb4>)
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <prvHeapInit+0xb8>)
 8007866:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4a09      	ldr	r2, [pc, #36]	; (8007894 <prvHeapInit+0xbc>)
 800786e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007870:	4b09      	ldr	r3, [pc, #36]	; (8007898 <prvHeapInit+0xc0>)
 8007872:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007876:	601a      	str	r2, [r3, #0]
}
 8007878:	bf00      	nop
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	24000cd0 	.word	0x24000cd0
 8007888:	240084d0 	.word	0x240084d0
 800788c:	240084d8 	.word	0x240084d8
 8007890:	240084e0 	.word	0x240084e0
 8007894:	240084dc 	.word	0x240084dc
 8007898:	240084ec 	.word	0x240084ec

0800789c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078a4:	4b28      	ldr	r3, [pc, #160]	; (8007948 <prvInsertBlockIntoFreeList+0xac>)
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e002      	b.n	80078b0 <prvInsertBlockIntoFreeList+0x14>
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d8f7      	bhi.n	80078aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	4413      	add	r3, r2
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d108      	bne.n	80078de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	441a      	add	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	441a      	add	r2, r3
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d118      	bne.n	8007924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4b15      	ldr	r3, [pc, #84]	; (800794c <prvInsertBlockIntoFreeList+0xb0>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d00d      	beq.n	800791a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685a      	ldr	r2, [r3, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	441a      	add	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	e008      	b.n	800792c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800791a:	4b0c      	ldr	r3, [pc, #48]	; (800794c <prvInsertBlockIntoFreeList+0xb0>)
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	e003      	b.n	800792c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	429a      	cmp	r2, r3
 8007932:	d002      	beq.n	800793a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800793a:	bf00      	nop
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	240084d0 	.word	0x240084d0
 800794c:	240084d8 	.word	0x240084d8

08007950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f103 0208 	add.w	r2, r3, #8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f103 0208 	add.w	r2, r3, #8
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f103 0208 	add.w	r2, r3, #8
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	683a      	ldr	r2, [r7, #0]
 80079ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	1c5a      	adds	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079f2:	b480      	push	{r7}
 80079f4:	b085      	sub	sp, #20
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a08:	d103      	bne.n	8007a12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	e00c      	b.n	8007a2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3308      	adds	r3, #8
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e002      	b.n	8007a20 <vListInsert+0x2e>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68ba      	ldr	r2, [r7, #8]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d2f6      	bcs.n	8007a1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	601a      	str	r2, [r3, #0]
}
 8007a58:	bf00      	nop
 8007a5a:	3714      	adds	r7, #20
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	6892      	ldr	r2, [r2, #8]
 8007a7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	6852      	ldr	r2, [r2, #4]
 8007a84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d103      	bne.n	8007a98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	1e5a      	subs	r2, r3, #1
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3714      	adds	r7, #20
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab6:	4770      	bx	lr

08007ab8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3b04      	subs	r3, #4
 8007ac8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3b04      	subs	r3, #4
 8007ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	f023 0201 	bic.w	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3b04      	subs	r3, #4
 8007ae6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ae8:	4a0c      	ldr	r2, [pc, #48]	; (8007b1c <pxPortInitialiseStack+0x64>)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3b14      	subs	r3, #20
 8007af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3b04      	subs	r3, #4
 8007afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f06f 0202 	mvn.w	r2, #2
 8007b06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3b20      	subs	r3, #32
 8007b0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	08007b21 	.word	0x08007b21

08007b20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b26:	2300      	movs	r3, #0
 8007b28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b2a:	4b12      	ldr	r3, [pc, #72]	; (8007b74 <prvTaskExitError+0x54>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b32:	d00a      	beq.n	8007b4a <prvTaskExitError+0x2a>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	60fb      	str	r3, [r7, #12]
}
 8007b46:	bf00      	nop
 8007b48:	e7fe      	b.n	8007b48 <prvTaskExitError+0x28>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	60bb      	str	r3, [r7, #8]
}
 8007b5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007b5e:	bf00      	nop
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d0fc      	beq.n	8007b60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007b66:	bf00      	nop
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	24000024 	.word	0x24000024
	...

08007b80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	; (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	4770      	bx	lr
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	24008538 	.word	0x24008538
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop

08007ba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007ba8:	4808      	ldr	r0, [pc, #32]	; (8007bcc <prvPortStartFirstTask+0x24>)
 8007baa:	6800      	ldr	r0, [r0, #0]
 8007bac:	6800      	ldr	r0, [r0, #0]
 8007bae:	f380 8808 	msr	MSP, r0
 8007bb2:	f04f 0000 	mov.w	r0, #0
 8007bb6:	f380 8814 	msr	CONTROL, r0
 8007bba:	b662      	cpsie	i
 8007bbc:	b661      	cpsie	f
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	df00      	svc	0
 8007bc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007bca:	bf00      	nop
 8007bcc:	e000ed08 	.word	0xe000ed08

08007bd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007bd6:	4b46      	ldr	r3, [pc, #280]	; (8007cf0 <xPortStartScheduler+0x120>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a46      	ldr	r2, [pc, #280]	; (8007cf4 <xPortStartScheduler+0x124>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d10a      	bne.n	8007bf6 <xPortStartScheduler+0x26>
	__asm volatile
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	613b      	str	r3, [r7, #16]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bf6:	4b3e      	ldr	r3, [pc, #248]	; (8007cf0 <xPortStartScheduler+0x120>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a3f      	ldr	r2, [pc, #252]	; (8007cf8 <xPortStartScheduler+0x128>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d10a      	bne.n	8007c16 <xPortStartScheduler+0x46>
	__asm volatile
 8007c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	60fb      	str	r3, [r7, #12]
}
 8007c12:	bf00      	nop
 8007c14:	e7fe      	b.n	8007c14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c16:	4b39      	ldr	r3, [pc, #228]	; (8007cfc <xPortStartScheduler+0x12c>)
 8007c18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	22ff      	movs	r2, #255	; 0xff
 8007c26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c38:	b2da      	uxtb	r2, r3
 8007c3a:	4b31      	ldr	r3, [pc, #196]	; (8007d00 <xPortStartScheduler+0x130>)
 8007c3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c3e:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c40:	2207      	movs	r2, #7
 8007c42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c44:	e009      	b.n	8007c5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c46:	4b2f      	ldr	r3, [pc, #188]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	4a2d      	ldr	r2, [pc, #180]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	b2db      	uxtb	r3, r3
 8007c58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c5a:	78fb      	ldrb	r3, [r7, #3]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c62:	2b80      	cmp	r3, #128	; 0x80
 8007c64:	d0ef      	beq.n	8007c46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1c3 0307 	rsb	r3, r3, #7
 8007c6e:	2b04      	cmp	r3, #4
 8007c70:	d00a      	beq.n	8007c88 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	60bb      	str	r3, [r7, #8]
}
 8007c84:	bf00      	nop
 8007c86:	e7fe      	b.n	8007c86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c88:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	021b      	lsls	r3, r3, #8
 8007c8e:	4a1d      	ldr	r2, [pc, #116]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c92:	4b1c      	ldr	r3, [pc, #112]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c9a:	4a1a      	ldr	r2, [pc, #104]	; (8007d04 <xPortStartScheduler+0x134>)
 8007c9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ca6:	4b18      	ldr	r3, [pc, #96]	; (8007d08 <xPortStartScheduler+0x138>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a14      	ldr	r2, [pc, #80]	; (8007d08 <xPortStartScheduler+0x138>)
 8007cb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007cbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007cbe:	f000 f8dd 	bl	8007e7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007cc2:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <xPortStartScheduler+0x13c>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007cc8:	f000 f8fc 	bl	8007ec4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ccc:	4b10      	ldr	r3, [pc, #64]	; (8007d10 <xPortStartScheduler+0x140>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a0f      	ldr	r2, [pc, #60]	; (8007d10 <xPortStartScheduler+0x140>)
 8007cd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007cd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007cd8:	f7ff ff66 	bl	8007ba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007cdc:	f001 fde0 	bl	80098a0 <vTaskSwitchContext>
	prvTaskExitError();
 8007ce0:	f7ff ff1e 	bl	8007b20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	e000ed00 	.word	0xe000ed00
 8007cf4:	410fc271 	.word	0x410fc271
 8007cf8:	410fc270 	.word	0x410fc270
 8007cfc:	e000e400 	.word	0xe000e400
 8007d00:	240084f0 	.word	0x240084f0
 8007d04:	240084f4 	.word	0x240084f4
 8007d08:	e000ed20 	.word	0xe000ed20
 8007d0c:	24000024 	.word	0x24000024
 8007d10:	e000ef34 	.word	0xe000ef34

08007d14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	607b      	str	r3, [r7, #4]
}
 8007d2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d2e:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <vPortEnterCritical+0x58>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	3301      	adds	r3, #1
 8007d34:	4a0d      	ldr	r2, [pc, #52]	; (8007d6c <vPortEnterCritical+0x58>)
 8007d36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <vPortEnterCritical+0x58>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10f      	bne.n	8007d60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d40:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <vPortEnterCritical+0x5c>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	603b      	str	r3, [r7, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <vPortEnterCritical+0x4a>
	}
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	24000024 	.word	0x24000024
 8007d70:	e000ed04 	.word	0xe000ed04

08007d74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d7a:	4b12      	ldr	r3, [pc, #72]	; (8007dc4 <vPortExitCritical+0x50>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10a      	bne.n	8007d98 <vPortExitCritical+0x24>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	607b      	str	r3, [r7, #4]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <vPortExitCritical+0x50>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	4a09      	ldr	r2, [pc, #36]	; (8007dc4 <vPortExitCritical+0x50>)
 8007da0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007da2:	4b08      	ldr	r3, [pc, #32]	; (8007dc4 <vPortExitCritical+0x50>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d105      	bne.n	8007db6 <vPortExitCritical+0x42>
 8007daa:	2300      	movs	r3, #0
 8007dac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007db4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	24000024 	.word	0x24000024
	...

08007dd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007dd0:	f3ef 8009 	mrs	r0, PSP
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	4b15      	ldr	r3, [pc, #84]	; (8007e30 <pxCurrentTCBConst>)
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	f01e 0f10 	tst.w	lr, #16
 8007de0:	bf08      	it	eq
 8007de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	6010      	str	r0, [r2, #0]
 8007dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007df4:	f380 8811 	msr	BASEPRI, r0
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f001 fd4e 	bl	80098a0 <vTaskSwitchContext>
 8007e04:	f04f 0000 	mov.w	r0, #0
 8007e08:	f380 8811 	msr	BASEPRI, r0
 8007e0c:	bc09      	pop	{r0, r3}
 8007e0e:	6819      	ldr	r1, [r3, #0]
 8007e10:	6808      	ldr	r0, [r1, #0]
 8007e12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e16:	f01e 0f10 	tst.w	lr, #16
 8007e1a:	bf08      	it	eq
 8007e1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e20:	f380 8809 	msr	PSP, r0
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	f3af 8000 	nop.w

08007e30 <pxCurrentTCBConst>:
 8007e30:	24008538 	.word	0x24008538
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop

08007e38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	607b      	str	r3, [r7, #4]
}
 8007e50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e52:	f001 fc6d 	bl	8009730 <xTaskIncrementTick>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <SysTick_Handler+0x40>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	2300      	movs	r3, #0
 8007e66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	f383 8811 	msr	BASEPRI, r3
}
 8007e6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e70:	bf00      	nop
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e80:	4b0b      	ldr	r3, [pc, #44]	; (8007eb0 <vPortSetupTimerInterrupt+0x34>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e86:	4b0b      	ldr	r3, [pc, #44]	; (8007eb4 <vPortSetupTimerInterrupt+0x38>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e8c:	4b0a      	ldr	r3, [pc, #40]	; (8007eb8 <vPortSetupTimerInterrupt+0x3c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <vPortSetupTimerInterrupt+0x40>)
 8007e92:	fba2 2303 	umull	r2, r3, r2, r3
 8007e96:	099b      	lsrs	r3, r3, #6
 8007e98:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <vPortSetupTimerInterrupt+0x44>)
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e9e:	4b04      	ldr	r3, [pc, #16]	; (8007eb0 <vPortSetupTimerInterrupt+0x34>)
 8007ea0:	2207      	movs	r2, #7
 8007ea2:	601a      	str	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	e000e010 	.word	0xe000e010
 8007eb4:	e000e018 	.word	0xe000e018
 8007eb8:	24000000 	.word	0x24000000
 8007ebc:	10624dd3 	.word	0x10624dd3
 8007ec0:	e000e014 	.word	0xe000e014

08007ec4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ec4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ed4 <vPortEnableVFP+0x10>
 8007ec8:	6801      	ldr	r1, [r0, #0]
 8007eca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007ece:	6001      	str	r1, [r0, #0]
 8007ed0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ed2:	bf00      	nop
 8007ed4:	e000ed88 	.word	0xe000ed88

08007ed8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007ede:	f3ef 8305 	mrs	r3, IPSR
 8007ee2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d914      	bls.n	8007f14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007eea:	4a17      	ldr	r2, [pc, #92]	; (8007f48 <vPortValidateInterruptPriority+0x70>)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ef4:	4b15      	ldr	r3, [pc, #84]	; (8007f4c <vPortValidateInterruptPriority+0x74>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	7afa      	ldrb	r2, [r7, #11]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d20a      	bcs.n	8007f14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f02:	f383 8811 	msr	BASEPRI, r3
 8007f06:	f3bf 8f6f 	isb	sy
 8007f0a:	f3bf 8f4f 	dsb	sy
 8007f0e:	607b      	str	r3, [r7, #4]
}
 8007f10:	bf00      	nop
 8007f12:	e7fe      	b.n	8007f12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f14:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <vPortValidateInterruptPriority+0x78>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <vPortValidateInterruptPriority+0x7c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d90a      	bls.n	8007f3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	603b      	str	r3, [r7, #0]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <vPortValidateInterruptPriority+0x60>
	}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	e000e3f0 	.word	0xe000e3f0
 8007f4c:	240084f0 	.word	0x240084f0
 8007f50:	e000ed0c 	.word	0xe000ed0c
 8007f54:	240084f4 	.word	0x240084f4

08007f58 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <xQueueGenericReset+0x2a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	60bb      	str	r3, [r7, #8]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007f82:	f7ff fec7 	bl	8007d14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	68f9      	ldr	r1, [r7, #12]
 8007f90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	441a      	add	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	68f9      	ldr	r1, [r7, #12]
 8007fb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	22ff      	movs	r2, #255	; 0xff
 8007fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d114      	bne.n	8008002 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d01a      	beq.n	8008016 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	3310      	adds	r3, #16
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f001 fcf1 	bl	80099cc <xTaskRemoveFromEventList>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d012      	beq.n	8008016 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ff0:	4b0c      	ldr	r3, [pc, #48]	; (8008024 <xQueueGenericReset+0xcc>)
 8007ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	f3bf 8f4f 	dsb	sy
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	e009      	b.n	8008016 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3310      	adds	r3, #16
 8008006:	4618      	mov	r0, r3
 8008008:	f7ff fca2 	bl	8007950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3324      	adds	r3, #36	; 0x24
 8008010:	4618      	mov	r0, r3
 8008012:	f7ff fc9d 	bl	8007950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008016:	f7ff fead 	bl	8007d74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800801a:	2301      	movs	r3, #1
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b08e      	sub	sp, #56	; 0x38
 800802c:	af02      	add	r7, sp, #8
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	627b      	str	r3, [r7, #36]	; 0x24
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d002      	beq.n	800807a <xQueueGenericCreateStatic+0x52>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <xQueueGenericCreateStatic+0x56>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <xQueueGenericCreateStatic+0x58>
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	623b      	str	r3, [r7, #32]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <xQueueGenericCreateStatic+0x7e>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <xQueueGenericCreateStatic+0x82>
 80080a6:	2301      	movs	r3, #1
 80080a8:	e000      	b.n	80080ac <xQueueGenericCreateStatic+0x84>
 80080aa:	2300      	movs	r3, #0
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	61fb      	str	r3, [r7, #28]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080c6:	2348      	movs	r3, #72	; 0x48
 80080c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b48      	cmp	r3, #72	; 0x48
 80080ce:	d00a      	beq.n	80080e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	61bb      	str	r3, [r7, #24]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80080e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80080ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00d      	beq.n	800810e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80080fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	68b9      	ldr	r1, [r7, #8]
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f83f 	bl	800818c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008110:	4618      	mov	r0, r3
 8008112:	3730      	adds	r7, #48	; 0x30
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b08a      	sub	sp, #40	; 0x28
 800811c:	af02      	add	r7, sp, #8
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	4613      	mov	r3, r2
 8008124:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xQueueGenericCreate+0x2a>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	613b      	str	r3, [r7, #16]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	fb02 f303 	mul.w	r3, r2, r3
 800814a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	3348      	adds	r3, #72	; 0x48
 8008150:	4618      	mov	r0, r3
 8008152:	f7ff fa13 	bl	800757c <pvPortMalloc>
 8008156:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d011      	beq.n	8008182 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	3348      	adds	r3, #72	; 0x48
 8008166:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008170:	79fa      	ldrb	r2, [r7, #7]
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	4613      	mov	r3, r2
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	68b9      	ldr	r1, [r7, #8]
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 f805 	bl	800818c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008182:	69bb      	ldr	r3, [r7, #24]
	}
 8008184:	4618      	mov	r0, r3
 8008186:	3720      	adds	r7, #32
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
 8008198:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d103      	bne.n	80081a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081a0:	69bb      	ldr	r3, [r7, #24]
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	e002      	b.n	80081ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	68ba      	ldr	r2, [r7, #8]
 80081b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081ba:	2101      	movs	r1, #1
 80081bc:	69b8      	ldr	r0, [r7, #24]
 80081be:	f7ff fecb 	bl	8007f58 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081c2:	bf00      	nop
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00e      	beq.n	80081f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80081ea:	2300      	movs	r3, #0
 80081ec:	2200      	movs	r2, #0
 80081ee:	2100      	movs	r1, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f837 	bl	8008264 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80081f6:	bf00      	nop
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b086      	sub	sp, #24
 8008202:	af00      	add	r7, sp, #0
 8008204:	4603      	mov	r3, r0
 8008206:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008208:	2301      	movs	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	2300      	movs	r3, #0
 800820e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008210:	79fb      	ldrb	r3, [r7, #7]
 8008212:	461a      	mov	r2, r3
 8008214:	6939      	ldr	r1, [r7, #16]
 8008216:	6978      	ldr	r0, [r7, #20]
 8008218:	f7ff ff7e 	bl	8008118 <xQueueGenericCreate>
 800821c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff ffd3 	bl	80081ca <prvInitialiseMutex>

		return xNewQueue;
 8008224:	68fb      	ldr	r3, [r7, #12]
	}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800822e:	b580      	push	{r7, lr}
 8008230:	b088      	sub	sp, #32
 8008232:	af02      	add	r7, sp, #8
 8008234:	4603      	mov	r3, r0
 8008236:	6039      	str	r1, [r7, #0]
 8008238:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800823a:	2301      	movs	r3, #1
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	2300      	movs	r3, #0
 8008240:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008242:	79fb      	ldrb	r3, [r7, #7]
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	2200      	movs	r2, #0
 800824a:	6939      	ldr	r1, [r7, #16]
 800824c:	6978      	ldr	r0, [r7, #20]
 800824e:	f7ff feeb 	bl	8008028 <xQueueGenericCreateStatic>
 8008252:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f7ff ffb8 	bl	80081ca <prvInitialiseMutex>

		return xNewQueue;
 800825a:	68fb      	ldr	r3, [r7, #12]
	}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08e      	sub	sp, #56	; 0x38
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008272:	2300      	movs	r3, #0
 8008274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <xQueueGenericSend+0x32>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <xQueueGenericSend+0x40>
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <xQueueGenericSend+0x44>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <xQueueGenericSend+0x46>
 80082a8:	2300      	movs	r3, #0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <xQueueGenericSend+0x60>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d103      	bne.n	80082d2 <xQueueGenericSend+0x6e>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <xQueueGenericSend+0x72>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <xQueueGenericSend+0x74>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	623b      	str	r3, [r7, #32]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f2:	f001 fd2b 	bl	8009d4c <xTaskGetSchedulerState>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xQueueGenericSend+0x9e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <xQueueGenericSend+0xa2>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <xQueueGenericSend+0xa4>
 8008306:	2300      	movs	r3, #0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xQueueGenericSend+0xbe>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	61fb      	str	r3, [r7, #28]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008322:	f7ff fcf7 	bl	8007d14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <xQueueGenericSend+0xd4>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d129      	bne.n	800838c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800833e:	f000 fc9a 	bl	8008c76 <prvCopyDataToQueue>
 8008342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d010      	beq.n	800836e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fb3b 	bl	80099cc <xTaskRemoveFromEventList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d013      	beq.n	8008384 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800835c:	4b3f      	ldr	r3, [pc, #252]	; (800845c <xQueueGenericSend+0x1f8>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	e00a      	b.n	8008384 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008374:	4b39      	ldr	r3, [pc, #228]	; (800845c <xQueueGenericSend+0x1f8>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008384:	f7ff fcf6 	bl	8007d74 <vPortExitCritical>
				return pdPASS;
 8008388:	2301      	movs	r3, #1
 800838a:	e063      	b.n	8008454 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008392:	f7ff fcef 	bl	8007d74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008396:	2300      	movs	r3, #0
 8008398:	e05c      	b.n	8008454 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083a0:	f107 0314 	add.w	r3, r7, #20
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 fb73 	bl	8009a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083aa:	2301      	movs	r3, #1
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ae:	f7ff fce1 	bl	8007d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b2:	f001 f8f1 	bl	8009598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083b6:	f7ff fcad 	bl	8007d14 <vPortEnterCritical>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c6:	d103      	bne.n	80083d0 <xQueueGenericSend+0x16c>
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083dc:	d103      	bne.n	80083e6 <xQueueGenericSend+0x182>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e6:	f7ff fcc5 	bl	8007d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083ea:	1d3a      	adds	r2, r7, #4
 80083ec:	f107 0314 	add.w	r3, r7, #20
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 fb62 	bl	8009abc <xTaskCheckForTimeOut>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d124      	bne.n	8008448 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008400:	f000 fd31 	bl	8008e66 <prvIsQueueFull>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d018      	beq.n	800843c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	3310      	adds	r3, #16
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f001 fab6 	bl	8009984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841a:	f000 fcbc 	bl	8008d96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800841e:	f001 f8c9 	bl	80095b4 <xTaskResumeAll>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	f47f af7c 	bne.w	8008322 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <xQueueGenericSend+0x1f8>)
 800842c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	e772      	b.n	8008322 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800843c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800843e:	f000 fcaa 	bl	8008d96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008442:	f001 f8b7 	bl	80095b4 <xTaskResumeAll>
 8008446:	e76c      	b.n	8008322 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844a:	f000 fca4 	bl	8008d96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800844e:	f001 f8b1 	bl	80095b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008454:	4618      	mov	r0, r3
 8008456:	3738      	adds	r7, #56	; 0x38
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b090      	sub	sp, #64	; 0x40
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <xQueueGenericSendFromISR+0x3c>
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <xQueueGenericSendFromISR+0x40>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <xQueueGenericSendFromISR+0x42>
 80084a0:	2300      	movs	r3, #0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d103      	bne.n	80084ca <xQueueGenericSendFromISR+0x6a>
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <xQueueGenericSendFromISR+0x6e>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <xQueueGenericSendFromISR+0x70>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	623b      	str	r3, [r7, #32]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084ea:	f7ff fcf5 	bl	8007ed8 <vPortValidateInterruptPriority>
	__asm volatile
 80084ee:	f3ef 8211 	mrs	r2, BASEPRI
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	61fa      	str	r2, [r7, #28]
 8008504:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8008506:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	429a      	cmp	r2, r3
 8008514:	d302      	bcc.n	800851c <xQueueGenericSendFromISR+0xbc>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d12f      	bne.n	800857c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008532:	f000 fba0 	bl	8008c76 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008536:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800853a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800853e:	d112      	bne.n	8008566 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	d016      	beq.n	8008576 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	3324      	adds	r3, #36	; 0x24
 800854c:	4618      	mov	r0, r3
 800854e:	f001 fa3d 	bl	80099cc <xTaskRemoveFromEventList>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	e007      	b.n	8008576 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800856a:	3301      	adds	r3, #1
 800856c:	b2db      	uxtb	r3, r3
 800856e:	b25a      	sxtb	r2, r3
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008576:	2301      	movs	r3, #1
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800857a:	e001      	b.n	8008580 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800857c:	2300      	movs	r3, #0
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	617b      	str	r3, [r7, #20]
	__asm volatile
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f383 8811 	msr	BASEPRI, r3
}
 800858a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800858e:	4618      	mov	r0, r3
 8008590:	3740      	adds	r7, #64	; 0x40
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b08e      	sub	sp, #56	; 0x38
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80085a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	623b      	str	r3, [r7, #32]
}
 80085bc:	bf00      	nop
 80085be:	e7fe      	b.n	80085be <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <xQueueGiveFromISR+0x48>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	61fb      	str	r3, [r7, #28]
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <xQueueGiveFromISR+0x58>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <xQueueGiveFromISR+0x5c>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <xQueueGiveFromISR+0x5e>
 80085f2:	2300      	movs	r3, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10a      	bne.n	800860e <xQueueGiveFromISR+0x78>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	61bb      	str	r3, [r7, #24]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800860e:	f7ff fc63 	bl	8007ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8008612:	f3ef 8211 	mrs	r2, BASEPRI
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	617a      	str	r2, [r7, #20]
 8008628:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800862a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800862c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800862e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008638:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800863a:	429a      	cmp	r2, r3
 800863c:	d22b      	bcs.n	8008696 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008650:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008658:	d112      	bne.n	8008680 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865e:	2b00      	cmp	r3, #0
 8008660:	d016      	beq.n	8008690 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	3324      	adds	r3, #36	; 0x24
 8008666:	4618      	mov	r0, r3
 8008668:	f001 f9b0 	bl	80099cc <xTaskRemoveFromEventList>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00e      	beq.n	8008690 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00b      	beq.n	8008690 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	2201      	movs	r2, #1
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e007      	b.n	8008690 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008684:	3301      	adds	r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	b25a      	sxtb	r2, r3
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008690:	2301      	movs	r3, #1
 8008692:	637b      	str	r3, [r7, #52]	; 0x34
 8008694:	e001      	b.n	800869a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008696:	2300      	movs	r3, #0
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f383 8811 	msr	BASEPRI, r3
}
 80086a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3738      	adds	r7, #56	; 0x38
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08c      	sub	sp, #48	; 0x30
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086bc:	2300      	movs	r3, #0
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <xQueueReceive+0x30>
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	623b      	str	r3, [r7, #32]
}
 80086dc:	bf00      	nop
 80086de:	e7fe      	b.n	80086de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d103      	bne.n	80086ee <xQueueReceive+0x3e>
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <xQueueReceive+0x42>
 80086ee:	2301      	movs	r3, #1
 80086f0:	e000      	b.n	80086f4 <xQueueReceive+0x44>
 80086f2:	2300      	movs	r3, #0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <xQueueReceive+0x5e>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	61fb      	str	r3, [r7, #28]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800870e:	f001 fb1d 	bl	8009d4c <xTaskGetSchedulerState>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <xQueueReceive+0x6e>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <xQueueReceive+0x72>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <xQueueReceive+0x74>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <xQueueReceive+0x8e>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	61bb      	str	r3, [r7, #24]
}
 800873a:	bf00      	nop
 800873c:	e7fe      	b.n	800873c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800873e:	f7ff fae9 	bl	8007d14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	2b00      	cmp	r3, #0
 800874c:	d01f      	beq.n	800878e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800874e:	68b9      	ldr	r1, [r7, #8]
 8008750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008752:	f000 fafa 	bl	8008d4a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008758:	1e5a      	subs	r2, r3, #1
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00f      	beq.n	8008786 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	3310      	adds	r3, #16
 800876a:	4618      	mov	r0, r3
 800876c:	f001 f92e 	bl	80099cc <xTaskRemoveFromEventList>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d007      	beq.n	8008786 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008776:	4b3d      	ldr	r3, [pc, #244]	; (800886c <xQueueReceive+0x1bc>)
 8008778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800877c:	601a      	str	r2, [r3, #0]
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008786:	f7ff faf5 	bl	8007d74 <vPortExitCritical>
				return pdPASS;
 800878a:	2301      	movs	r3, #1
 800878c:	e069      	b.n	8008862 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008794:	f7ff faee 	bl	8007d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008798:	2300      	movs	r3, #0
 800879a:	e062      	b.n	8008862 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800879c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087a2:	f107 0310 	add.w	r3, r7, #16
 80087a6:	4618      	mov	r0, r3
 80087a8:	f001 f972 	bl	8009a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087b0:	f7ff fae0 	bl	8007d74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087b4:	f000 fef0 	bl	8009598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087b8:	f7ff faac 	bl	8007d14 <vPortEnterCritical>
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087c2:	b25b      	sxtb	r3, r3
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087c8:	d103      	bne.n	80087d2 <xQueueReceive+0x122>
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087d8:	b25b      	sxtb	r3, r3
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087de:	d103      	bne.n	80087e8 <xQueueReceive+0x138>
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087e8:	f7ff fac4 	bl	8007d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087ec:	1d3a      	adds	r2, r7, #4
 80087ee:	f107 0310 	add.w	r3, r7, #16
 80087f2:	4611      	mov	r1, r2
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f961 	bl	8009abc <xTaskCheckForTimeOut>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d123      	bne.n	8008848 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008802:	f000 fb1a 	bl	8008e3a <prvIsQueueEmpty>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d017      	beq.n	800883c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	3324      	adds	r3, #36	; 0x24
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	4611      	mov	r1, r2
 8008814:	4618      	mov	r0, r3
 8008816:	f001 f8b5 	bl	8009984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800881a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800881c:	f000 fabb 	bl	8008d96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008820:	f000 fec8 	bl	80095b4 <xTaskResumeAll>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d189      	bne.n	800873e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <xQueueReceive+0x1bc>)
 800882c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	e780      	b.n	800873e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800883c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800883e:	f000 faaa 	bl	8008d96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008842:	f000 feb7 	bl	80095b4 <xTaskResumeAll>
 8008846:	e77a      	b.n	800873e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800884a:	f000 faa4 	bl	8008d96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800884e:	f000 feb1 	bl	80095b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008854:	f000 faf1 	bl	8008e3a <prvIsQueueEmpty>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	f43f af6f 	beq.w	800873e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008860:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008862:	4618      	mov	r0, r3
 8008864:	3730      	adds	r7, #48	; 0x30
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08e      	sub	sp, #56	; 0x38
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800887a:	2300      	movs	r3, #0
 800887c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	2b00      	cmp	r3, #0
 800888a:	d10a      	bne.n	80088a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	623b      	str	r3, [r7, #32]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	61fb      	str	r3, [r7, #28]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088c0:	f001 fa44 	bl	8009d4c <xTaskGetSchedulerState>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d102      	bne.n	80088d0 <xQueueSemaphoreTake+0x60>
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <xQueueSemaphoreTake+0x64>
 80088d0:	2301      	movs	r3, #1
 80088d2:	e000      	b.n	80088d6 <xQueueSemaphoreTake+0x66>
 80088d4:	2300      	movs	r3, #0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10a      	bne.n	80088f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80088da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088de:	f383 8811 	msr	BASEPRI, r3
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	61bb      	str	r3, [r7, #24]
}
 80088ec:	bf00      	nop
 80088ee:	e7fe      	b.n	80088ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088f0:	f7ff fa10 	bl	8007d14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80088fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d024      	beq.n	800894a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	1e5a      	subs	r2, r3, #1
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d104      	bne.n	800891a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008910:	f001 fbc4 	bl	800a09c <pvTaskIncrementMutexHeldCount>
 8008914:	4602      	mov	r2, r0
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00f      	beq.n	8008942 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008924:	3310      	adds	r3, #16
 8008926:	4618      	mov	r0, r3
 8008928:	f001 f850 	bl	80099cc <xTaskRemoveFromEventList>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d007      	beq.n	8008942 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008932:	4b54      	ldr	r3, [pc, #336]	; (8008a84 <xQueueSemaphoreTake+0x214>)
 8008934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	f3bf 8f4f 	dsb	sy
 800893e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008942:	f7ff fa17 	bl	8007d74 <vPortExitCritical>
				return pdPASS;
 8008946:	2301      	movs	r3, #1
 8008948:	e097      	b.n	8008a7a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d111      	bne.n	8008974 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	617b      	str	r3, [r7, #20]
}
 8008968:	bf00      	nop
 800896a:	e7fe      	b.n	800896a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800896c:	f7ff fa02 	bl	8007d74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008970:	2300      	movs	r3, #0
 8008972:	e082      	b.n	8008a7a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008976:	2b00      	cmp	r3, #0
 8008978:	d106      	bne.n	8008988 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800897a:	f107 030c 	add.w	r3, r7, #12
 800897e:	4618      	mov	r0, r3
 8008980:	f001 f886 	bl	8009a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008988:	f7ff f9f4 	bl	8007d74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800898c:	f000 fe04 	bl	8009598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008990:	f7ff f9c0 	bl	8007d14 <vPortEnterCritical>
 8008994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800899a:	b25b      	sxtb	r3, r3
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089a0:	d103      	bne.n	80089aa <xQueueSemaphoreTake+0x13a>
 80089a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089b0:	b25b      	sxtb	r3, r3
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089b6:	d103      	bne.n	80089c0 <xQueueSemaphoreTake+0x150>
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089c0:	f7ff f9d8 	bl	8007d74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089c4:	463a      	mov	r2, r7
 80089c6:	f107 030c 	add.w	r3, r7, #12
 80089ca:	4611      	mov	r1, r2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f001 f875 	bl	8009abc <xTaskCheckForTimeOut>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d132      	bne.n	8008a3e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089da:	f000 fa2e 	bl	8008e3a <prvIsQueueEmpty>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d026      	beq.n	8008a32 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d109      	bne.n	8008a00 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80089ec:	f7ff f992 	bl	8007d14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 f9c7 	bl	8009d88 <xTaskPriorityInherit>
 80089fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80089fc:	f7ff f9ba 	bl	8007d74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a02:	3324      	adds	r3, #36	; 0x24
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	4611      	mov	r1, r2
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 ffbb 	bl	8009984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a10:	f000 f9c1 	bl	8008d96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a14:	f000 fdce 	bl	80095b4 <xTaskResumeAll>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f47f af68 	bne.w	80088f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008a20:	4b18      	ldr	r3, [pc, #96]	; (8008a84 <xQueueSemaphoreTake+0x214>)
 8008a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	e75e      	b.n	80088f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008a32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a34:	f000 f9af 	bl	8008d96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a38:	f000 fdbc 	bl	80095b4 <xTaskResumeAll>
 8008a3c:	e758      	b.n	80088f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a40:	f000 f9a9 	bl	8008d96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a44:	f000 fdb6 	bl	80095b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a4a:	f000 f9f6 	bl	8008e3a <prvIsQueueEmpty>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f43f af4d 	beq.w	80088f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00d      	beq.n	8008a78 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008a5c:	f7ff f95a 	bl	8007d14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a62:	f000 f8f0 	bl	8008c46 <prvGetDisinheritPriorityAfterTimeout>
 8008a66:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fa86 	bl	8009f80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008a74:	f7ff f97e 	bl	8007d74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3738      	adds	r7, #56	; 0x38
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08e      	sub	sp, #56	; 0x38
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	623b      	str	r3, [r7, #32]
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d103      	bne.n	8008ac2 <xQueueReceiveFromISR+0x3a>
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d101      	bne.n	8008ac6 <xQueueReceiveFromISR+0x3e>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <xQueueReceiveFromISR+0x40>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	61fb      	str	r3, [r7, #28]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ae2:	f7ff f9f9 	bl	8007ed8 <vPortValidateInterruptPriority>
	__asm volatile
 8008ae6:	f3ef 8211 	mrs	r2, BASEPRI
 8008aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	61ba      	str	r2, [r7, #24]
 8008afc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008afe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d02f      	beq.n	8008b6e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b1c:	f000 f915 	bl	8008d4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	1e5a      	subs	r2, r3, #1
 8008b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008b28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b30:	d112      	bne.n	8008b58 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d016      	beq.n	8008b68 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3c:	3310      	adds	r3, #16
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 ff44 	bl	80099cc <xTaskRemoveFromEventList>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00e      	beq.n	8008b68 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
 8008b56:	e007      	b.n	8008b68 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	b25a      	sxtb	r2, r3
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b6c:	e001      	b.n	8008b72 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	637b      	str	r3, [r7, #52]	; 0x34
 8008b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f383 8811 	msr	BASEPRI, r3
}
 8008b7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3738      	adds	r7, #56	; 0x38
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	60bb      	str	r3, [r7, #8]
}
 8008ba8:	bf00      	nop
 8008baa:	e7fe      	b.n	8008baa <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008bac:	f7ff f8b2 	bl	8007d14 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008bb6:	f7ff f8dd 	bl	8007d74 <vPortExitCritical>

	return uxReturn;
 8008bba:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10a      	bne.n	8008bec <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8008bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	60fb      	str	r3, [r7, #12]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008bf2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d10a      	bne.n	8008c28 <vQueueDelete+0x28>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60bb      	str	r3, [r7, #8]
}
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 f935 	bl	8008e98 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f7fe fd6b 	bl	8007714 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008c3e:	bf00      	nop
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d006      	beq.n	8008c64 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f1c3 0307 	rsb	r3, r3, #7
 8008c60:	60fb      	str	r3, [r7, #12]
 8008c62:	e001      	b.n	8008c68 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c68:	68fb      	ldr	r3, [r7, #12]
	}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	b086      	sub	sp, #24
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	60f8      	str	r0, [r7, #12]
 8008c7e:	60b9      	str	r1, [r7, #8]
 8008c80:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c82:	2300      	movs	r3, #0
 8008c84:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10d      	bne.n	8008cb0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d14d      	bne.n	8008d38 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 f8e7 	bl	8009e74 <xTaskPriorityDisinherit>
 8008ca6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
 8008cae:	e043      	b.n	8008d38 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d119      	bne.n	8008cea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6858      	ldr	r0, [r3, #4]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	68b9      	ldr	r1, [r7, #8]
 8008cc2:	f00e ff62 	bl	8017b8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	441a      	add	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d32b      	bcc.n	8008d38 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	605a      	str	r2, [r3, #4]
 8008ce8:	e026      	b.n	8008d38 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	68d8      	ldr	r0, [r3, #12]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	f00e ff48 	bl	8017b8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68da      	ldr	r2, [r3, #12]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	425b      	negs	r3, r3
 8008d04:	441a      	add	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d207      	bcs.n	8008d26 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689a      	ldr	r2, [r3, #8]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1e:	425b      	negs	r3, r3
 8008d20:	441a      	add	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d105      	bne.n	8008d38 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	3b01      	subs	r3, #1
 8008d36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d40:	697b      	ldr	r3, [r7, #20]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d018      	beq.n	8008d8e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68da      	ldr	r2, [r3, #12]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d64:	441a      	add	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d303      	bcc.n	8008d7e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	68d9      	ldr	r1, [r3, #12]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d86:	461a      	mov	r2, r3
 8008d88:	6838      	ldr	r0, [r7, #0]
 8008d8a:	f00e fefe 	bl	8017b8a <memcpy>
	}
}
 8008d8e:	bf00      	nop
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b084      	sub	sp, #16
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d9e:	f7fe ffb9 	bl	8007d14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008da8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008daa:	e011      	b.n	8008dd0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d012      	beq.n	8008dda <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	3324      	adds	r3, #36	; 0x24
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 fe07 	bl	80099cc <xTaskRemoveFromEventList>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008dc4:	f000 fedc 	bl	8009b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	dce9      	bgt.n	8008dac <prvUnlockQueue+0x16>
 8008dd8:	e000      	b.n	8008ddc <prvUnlockQueue+0x46>
					break;
 8008dda:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	22ff      	movs	r2, #255	; 0xff
 8008de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008de4:	f7fe ffc6 	bl	8007d74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008de8:	f7fe ff94 	bl	8007d14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008df2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008df4:	e011      	b.n	8008e1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d012      	beq.n	8008e24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	3310      	adds	r3, #16
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fde2 	bl	80099cc <xTaskRemoveFromEventList>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e0e:	f000 feb7 	bl	8009b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	dce9      	bgt.n	8008df6 <prvUnlockQueue+0x60>
 8008e22:	e000      	b.n	8008e26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	22ff      	movs	r2, #255	; 0xff
 8008e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e2e:	f7fe ffa1 	bl	8007d74 <vPortExitCritical>
}
 8008e32:	bf00      	nop
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e42:	f7fe ff67 	bl	8007d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d102      	bne.n	8008e54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	60fb      	str	r3, [r7, #12]
 8008e52:	e001      	b.n	8008e58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e58:	f7fe ff8c 	bl	8007d74 <vPortExitCritical>

	return xReturn;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e6e:	f7fe ff51 	bl	8007d14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d102      	bne.n	8008e84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	e001      	b.n	8008e88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e88:	f7fe ff74 	bl	8007d74 <vPortExitCritical>

	return xReturn;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
	...

08008e98 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	e016      	b.n	8008ed4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ea6:	4a10      	ldr	r2, [pc, #64]	; (8008ee8 <vQueueUnregisterQueue+0x50>)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	00db      	lsls	r3, r3, #3
 8008eac:	4413      	add	r3, r2
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d10b      	bne.n	8008ece <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008eb6:	4a0c      	ldr	r2, [pc, #48]	; (8008ee8 <vQueueUnregisterQueue+0x50>)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008ec0:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <vQueueUnregisterQueue+0x50>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	00db      	lsls	r3, r3, #3
 8008ec6:	4413      	add	r3, r2
 8008ec8:	2200      	movs	r2, #0
 8008eca:	605a      	str	r2, [r3, #4]
				break;
 8008ecc:	e006      	b.n	8008edc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b07      	cmp	r3, #7
 8008ed8:	d9e5      	bls.n	8008ea6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008eda:	bf00      	nop
 8008edc:	bf00      	nop
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	240084f8 	.word	0x240084f8

08008eec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08e      	sub	sp, #56	; 0x38
 8008ef0:	af04      	add	r7, sp, #16
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
 8008ef8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	623b      	str	r3, [r7, #32]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	61fb      	str	r3, [r7, #28]
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f32:	23b4      	movs	r3, #180	; 0xb4
 8008f34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	2bb4      	cmp	r3, #180	; 0xb4
 8008f3a:	d00a      	beq.n	8008f52 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	61bb      	str	r3, [r7, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	e7fe      	b.n	8008f50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01e      	beq.n	8008f98 <xTaskCreateStatic+0xac>
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01b      	beq.n	8008f98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f72:	2300      	movs	r3, #0
 8008f74:	9303      	str	r3, [sp, #12]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9302      	str	r3, [sp, #8]
 8008f7a:	f107 0314 	add.w	r3, r7, #20
 8008f7e:	9301      	str	r3, [sp, #4]
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	f000 f850 	bl	8009030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f92:	f000 f8eb 	bl	800916c <prvAddNewTaskToReadyList>
 8008f96:	e001      	b.n	8008f9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f9c:	697b      	ldr	r3, [r7, #20]
	}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3728      	adds	r7, #40	; 0x28
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b08c      	sub	sp, #48	; 0x30
 8008faa:	af04      	add	r7, sp, #16
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	603b      	str	r3, [r7, #0]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fb6:	88fb      	ldrh	r3, [r7, #6]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fade 	bl	800757c <pvPortMalloc>
 8008fc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fc8:	20b4      	movs	r0, #180	; 0xb4
 8008fca:	f7fe fad7 	bl	800757c <pvPortMalloc>
 8008fce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	697a      	ldr	r2, [r7, #20]
 8008fda:	631a      	str	r2, [r3, #48]	; 0x30
 8008fdc:	e005      	b.n	8008fea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008fde:	6978      	ldr	r0, [r7, #20]
 8008fe0:	f7fe fb98 	bl	8007714 <vPortFree>
 8008fe4:	e001      	b.n	8008fea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d017      	beq.n	8009020 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008ff8:	88fa      	ldrh	r2, [r7, #6]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	9302      	str	r3, [sp, #8]
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	9301      	str	r3, [sp, #4]
 8009006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	68b9      	ldr	r1, [r7, #8]
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f80e 	bl	8009030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009014:	69f8      	ldr	r0, [r7, #28]
 8009016:	f000 f8a9 	bl	800916c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800901a:	2301      	movs	r3, #1
 800901c:	61bb      	str	r3, [r7, #24]
 800901e:	e002      	b.n	8009026 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009024:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009026:	69bb      	ldr	r3, [r7, #24]
	}
 8009028:	4618      	mov	r0, r3
 800902a:	3720      	adds	r7, #32
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b088      	sub	sp, #32
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
 800903c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009042:	6879      	ldr	r1, [r7, #4]
 8009044:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009048:	440b      	add	r3, r1
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	f023 0307 	bic.w	r3, r3, #7
 8009056:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00a      	beq.n	8009078 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	617b      	str	r3, [r7, #20]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d01f      	beq.n	80090be <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800907e:	2300      	movs	r3, #0
 8009080:	61fb      	str	r3, [r7, #28]
 8009082:	e012      	b.n	80090aa <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	4413      	add	r3, r2
 800908a:	7819      	ldrb	r1, [r3, #0]
 800908c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	4413      	add	r3, r2
 8009092:	3334      	adds	r3, #52	; 0x34
 8009094:	460a      	mov	r2, r1
 8009096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d006      	beq.n	80090b2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	3301      	adds	r3, #1
 80090a8:	61fb      	str	r3, [r7, #28]
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	2b0f      	cmp	r3, #15
 80090ae:	d9e9      	bls.n	8009084 <prvInitialiseNewTask+0x54>
 80090b0:	e000      	b.n	80090b4 <prvInitialiseNewTask+0x84>
			{
				break;
 80090b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	2200      	movs	r2, #0
 80090b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090bc:	e003      	b.n	80090c6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	2200      	movs	r2, #0
 80090c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	2b06      	cmp	r3, #6
 80090ca:	d901      	bls.n	80090d0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090cc:	2306      	movs	r3, #6
 80090ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	2200      	movs	r2, #0
 80090e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e4:	3304      	adds	r3, #4
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe fc52 	bl	8007990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ee:	3318      	adds	r3, #24
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fc4d 	bl	8007990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	f1c3 0207 	rsb	r2, r3, #7
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	2200      	movs	r2, #0
 8009110:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009116:	2200      	movs	r2, #0
 8009118:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	334c      	adds	r3, #76	; 0x4c
 8009120:	2260      	movs	r2, #96	; 0x60
 8009122:	2100      	movs	r1, #0
 8009124:	4618      	mov	r0, r3
 8009126:	f00e fd58 	bl	8017bda <memset>
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	4a0c      	ldr	r2, [pc, #48]	; (8009160 <prvInitialiseNewTask+0x130>)
 800912e:	651a      	str	r2, [r3, #80]	; 0x50
 8009130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009132:	4a0c      	ldr	r2, [pc, #48]	; (8009164 <prvInitialiseNewTask+0x134>)
 8009134:	655a      	str	r2, [r3, #84]	; 0x54
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	4a0b      	ldr	r2, [pc, #44]	; (8009168 <prvInitialiseNewTask+0x138>)
 800913a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	68f9      	ldr	r1, [r7, #12]
 8009140:	69b8      	ldr	r0, [r7, #24]
 8009142:	f7fe fcb9 	bl	8007ab8 <pxPortInitialiseStack>
 8009146:	4602      	mov	r2, r0
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009156:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009158:	bf00      	nop
 800915a:	3720      	adds	r7, #32
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	0801cb94 	.word	0x0801cb94
 8009164:	0801cbb4 	.word	0x0801cbb4
 8009168:	0801cb74 	.word	0x0801cb74

0800916c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009174:	f7fe fdce 	bl	8007d14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009178:	4b2a      	ldr	r3, [pc, #168]	; (8009224 <prvAddNewTaskToReadyList+0xb8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3301      	adds	r3, #1
 800917e:	4a29      	ldr	r2, [pc, #164]	; (8009224 <prvAddNewTaskToReadyList+0xb8>)
 8009180:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009182:	4b29      	ldr	r3, [pc, #164]	; (8009228 <prvAddNewTaskToReadyList+0xbc>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d109      	bne.n	800919e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800918a:	4a27      	ldr	r2, [pc, #156]	; (8009228 <prvAddNewTaskToReadyList+0xbc>)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009190:	4b24      	ldr	r3, [pc, #144]	; (8009224 <prvAddNewTaskToReadyList+0xb8>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2b01      	cmp	r3, #1
 8009196:	d110      	bne.n	80091ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009198:	f000 fd16 	bl	8009bc8 <prvInitialiseTaskLists>
 800919c:	e00d      	b.n	80091ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800919e:	4b23      	ldr	r3, [pc, #140]	; (800922c <prvAddNewTaskToReadyList+0xc0>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d109      	bne.n	80091ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091a6:	4b20      	ldr	r3, [pc, #128]	; (8009228 <prvAddNewTaskToReadyList+0xbc>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d802      	bhi.n	80091ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091b4:	4a1c      	ldr	r2, [pc, #112]	; (8009228 <prvAddNewTaskToReadyList+0xbc>)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091ba:	4b1d      	ldr	r3, [pc, #116]	; (8009230 <prvAddNewTaskToReadyList+0xc4>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3301      	adds	r3, #1
 80091c0:	4a1b      	ldr	r2, [pc, #108]	; (8009230 <prvAddNewTaskToReadyList+0xc4>)
 80091c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	2201      	movs	r2, #1
 80091ca:	409a      	lsls	r2, r3
 80091cc:	4b19      	ldr	r3, [pc, #100]	; (8009234 <prvAddNewTaskToReadyList+0xc8>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	4a18      	ldr	r2, [pc, #96]	; (8009234 <prvAddNewTaskToReadyList+0xc8>)
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091da:	4613      	mov	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4a15      	ldr	r2, [pc, #84]	; (8009238 <prvAddNewTaskToReadyList+0xcc>)
 80091e4:	441a      	add	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3304      	adds	r3, #4
 80091ea:	4619      	mov	r1, r3
 80091ec:	4610      	mov	r0, r2
 80091ee:	f7fe fbdc 	bl	80079aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80091f2:	f7fe fdbf 	bl	8007d74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80091f6:	4b0d      	ldr	r3, [pc, #52]	; (800922c <prvAddNewTaskToReadyList+0xc0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d00e      	beq.n	800921c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80091fe:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <prvAddNewTaskToReadyList+0xbc>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009208:	429a      	cmp	r2, r3
 800920a:	d207      	bcs.n	800921c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800920c:	4b0b      	ldr	r3, [pc, #44]	; (800923c <prvAddNewTaskToReadyList+0xd0>)
 800920e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	24008638 	.word	0x24008638
 8009228:	24008538 	.word	0x24008538
 800922c:	24008644 	.word	0x24008644
 8009230:	24008654 	.word	0x24008654
 8009234:	24008640 	.word	0x24008640
 8009238:	2400853c 	.word	0x2400853c
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009248:	f7fe fd64 	bl	8007d14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d102      	bne.n	8009258 <vTaskDelete+0x18>
 8009252:	4b39      	ldr	r3, [pc, #228]	; (8009338 <vTaskDelete+0xf8>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	e000      	b.n	800925a <vTaskDelete+0x1a>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	3304      	adds	r3, #4
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fbff 	bl	8007a64 <uxListRemove>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d115      	bne.n	8009298 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009270:	4932      	ldr	r1, [pc, #200]	; (800933c <vTaskDelete+0xfc>)
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	440b      	add	r3, r1
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10a      	bne.n	8009298 <vTaskDelete+0x58>
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	2201      	movs	r2, #1
 8009288:	fa02 f303 	lsl.w	r3, r2, r3
 800928c:	43da      	mvns	r2, r3
 800928e:	4b2c      	ldr	r3, [pc, #176]	; (8009340 <vTaskDelete+0x100>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4013      	ands	r3, r2
 8009294:	4a2a      	ldr	r2, [pc, #168]	; (8009340 <vTaskDelete+0x100>)
 8009296:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d004      	beq.n	80092aa <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3318      	adds	r3, #24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7fe fbdd 	bl	8007a64 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80092aa:	4b26      	ldr	r3, [pc, #152]	; (8009344 <vTaskDelete+0x104>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3301      	adds	r3, #1
 80092b0:	4a24      	ldr	r2, [pc, #144]	; (8009344 <vTaskDelete+0x104>)
 80092b2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80092b4:	4b20      	ldr	r3, [pc, #128]	; (8009338 <vTaskDelete+0xf8>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d10b      	bne.n	80092d6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3304      	adds	r3, #4
 80092c2:	4619      	mov	r1, r3
 80092c4:	4820      	ldr	r0, [pc, #128]	; (8009348 <vTaskDelete+0x108>)
 80092c6:	f7fe fb70 	bl	80079aa <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80092ca:	4b20      	ldr	r3, [pc, #128]	; (800934c <vTaskDelete+0x10c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	4a1e      	ldr	r2, [pc, #120]	; (800934c <vTaskDelete+0x10c>)
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	e009      	b.n	80092ea <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80092d6:	4b1e      	ldr	r3, [pc, #120]	; (8009350 <vTaskDelete+0x110>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3b01      	subs	r3, #1
 80092dc:	4a1c      	ldr	r2, [pc, #112]	; (8009350 <vTaskDelete+0x110>)
 80092de:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fcdf 	bl	8009ca4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80092e6:	f000 fd11 	bl	8009d0c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80092ea:	f7fe fd43 	bl	8007d74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80092ee:	4b19      	ldr	r3, [pc, #100]	; (8009354 <vTaskDelete+0x114>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01b      	beq.n	800932e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80092f6:	4b10      	ldr	r3, [pc, #64]	; (8009338 <vTaskDelete+0xf8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d116      	bne.n	800932e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009300:	4b15      	ldr	r3, [pc, #84]	; (8009358 <vTaskDelete+0x118>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00a      	beq.n	800931e <vTaskDelete+0xde>
	__asm volatile
 8009308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930c:	f383 8811 	msr	BASEPRI, r3
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	f3bf 8f4f 	dsb	sy
 8009318:	60bb      	str	r3, [r7, #8]
}
 800931a:	bf00      	nop
 800931c:	e7fe      	b.n	800931c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800931e:	4b0f      	ldr	r3, [pc, #60]	; (800935c <vTaskDelete+0x11c>)
 8009320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009324:	601a      	str	r2, [r3, #0]
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800932e:	bf00      	nop
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	24008538 	.word	0x24008538
 800933c:	2400853c 	.word	0x2400853c
 8009340:	24008640 	.word	0x24008640
 8009344:	24008654 	.word	0x24008654
 8009348:	2400860c 	.word	0x2400860c
 800934c:	24008620 	.word	0x24008620
 8009350:	24008638 	.word	0x24008638
 8009354:	24008644 	.word	0x24008644
 8009358:	24008660 	.word	0x24008660
 800935c:	e000ed04 	.word	0xe000ed04

08009360 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009360:	b580      	push	{r7, lr}
 8009362:	b08a      	sub	sp, #40	; 0x28
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800936a:	2300      	movs	r3, #0
 800936c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <vTaskDelayUntil+0x2a>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	617b      	str	r3, [r7, #20]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10a      	bne.n	80093a6 <vTaskDelayUntil+0x46>
	__asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	613b      	str	r3, [r7, #16]
}
 80093a2:	bf00      	nop
 80093a4:	e7fe      	b.n	80093a4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80093a6:	4b2a      	ldr	r3, [pc, #168]	; (8009450 <vTaskDelayUntil+0xf0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <vTaskDelayUntil+0x64>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	60fb      	str	r3, [r7, #12]
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80093c4:	f000 f8e8 	bl	8009598 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80093c8:	4b22      	ldr	r3, [pc, #136]	; (8009454 <vTaskDelayUntil+0xf4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	683a      	ldr	r2, [r7, #0]
 80093d4:	4413      	add	r3, r2
 80093d6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	6a3a      	ldr	r2, [r7, #32]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d20b      	bcs.n	80093fa <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	69fa      	ldr	r2, [r7, #28]
 80093e8:	429a      	cmp	r2, r3
 80093ea:	d211      	bcs.n	8009410 <vTaskDelayUntil+0xb0>
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d90d      	bls.n	8009410 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80093f4:	2301      	movs	r3, #1
 80093f6:	627b      	str	r3, [r7, #36]	; 0x24
 80093f8:	e00a      	b.n	8009410 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	429a      	cmp	r2, r3
 8009402:	d303      	bcc.n	800940c <vTaskDelayUntil+0xac>
 8009404:	69fa      	ldr	r2, [r7, #28]
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	429a      	cmp	r2, r3
 800940a:	d901      	bls.n	8009410 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	2b00      	cmp	r3, #0
 800941a:	d006      	beq.n	800942a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	2100      	movs	r1, #0
 8009424:	4618      	mov	r0, r3
 8009426:	f000 fe4d 	bl	800a0c4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800942a:	f000 f8c3 	bl	80095b4 <xTaskResumeAll>
 800942e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d107      	bne.n	8009446 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009436:	4b08      	ldr	r3, [pc, #32]	; (8009458 <vTaskDelayUntil+0xf8>)
 8009438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009446:	bf00      	nop
 8009448:	3728      	adds	r7, #40	; 0x28
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}
 800944e:	bf00      	nop
 8009450:	24008660 	.word	0x24008660
 8009454:	2400863c 	.word	0x2400863c
 8009458:	e000ed04 	.word	0xe000ed04

0800945c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d017      	beq.n	800949e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800946e:	4b13      	ldr	r3, [pc, #76]	; (80094bc <vTaskDelay+0x60>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <vTaskDelay+0x30>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60bb      	str	r3, [r7, #8]
}
 8009488:	bf00      	nop
 800948a:	e7fe      	b.n	800948a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800948c:	f000 f884 	bl	8009598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009490:	2100      	movs	r1, #0
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f000 fe16 	bl	800a0c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009498:	f000 f88c 	bl	80095b4 <xTaskResumeAll>
 800949c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d107      	bne.n	80094b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094a4:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <vTaskDelay+0x64>)
 80094a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094b4:	bf00      	nop
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	24008660 	.word	0x24008660
 80094c0:	e000ed04 	.word	0xe000ed04

080094c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b08a      	sub	sp, #40	; 0x28
 80094c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094ce:	2300      	movs	r3, #0
 80094d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094d2:	463a      	mov	r2, r7
 80094d4:	1d39      	adds	r1, r7, #4
 80094d6:	f107 0308 	add.w	r3, r7, #8
 80094da:	4618      	mov	r0, r3
 80094dc:	f7f7 f8ae 	bl	800063c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	9202      	str	r2, [sp, #8]
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	2300      	movs	r3, #0
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	2300      	movs	r3, #0
 80094f0:	460a      	mov	r2, r1
 80094f2:	4921      	ldr	r1, [pc, #132]	; (8009578 <vTaskStartScheduler+0xb4>)
 80094f4:	4821      	ldr	r0, [pc, #132]	; (800957c <vTaskStartScheduler+0xb8>)
 80094f6:	f7ff fcf9 	bl	8008eec <xTaskCreateStatic>
 80094fa:	4603      	mov	r3, r0
 80094fc:	4a20      	ldr	r2, [pc, #128]	; (8009580 <vTaskStartScheduler+0xbc>)
 80094fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009500:	4b1f      	ldr	r3, [pc, #124]	; (8009580 <vTaskStartScheduler+0xbc>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d002      	beq.n	800950e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e001      	b.n	8009512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d11b      	bne.n	8009550 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	613b      	str	r3, [r7, #16]
}
 800952a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800952c:	4b15      	ldr	r3, [pc, #84]	; (8009584 <vTaskStartScheduler+0xc0>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	334c      	adds	r3, #76	; 0x4c
 8009532:	4a15      	ldr	r2, [pc, #84]	; (8009588 <vTaskStartScheduler+0xc4>)
 8009534:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009536:	4b15      	ldr	r3, [pc, #84]	; (800958c <vTaskStartScheduler+0xc8>)
 8009538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800953c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800953e:	4b14      	ldr	r3, [pc, #80]	; (8009590 <vTaskStartScheduler+0xcc>)
 8009540:	2201      	movs	r2, #1
 8009542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009544:	4b13      	ldr	r3, [pc, #76]	; (8009594 <vTaskStartScheduler+0xd0>)
 8009546:	2200      	movs	r2, #0
 8009548:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800954a:	f7fe fb41 	bl	8007bd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800954e:	e00e      	b.n	800956e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009556:	d10a      	bne.n	800956e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955c:	f383 8811 	msr	BASEPRI, r3
 8009560:	f3bf 8f6f 	isb	sy
 8009564:	f3bf 8f4f 	dsb	sy
 8009568:	60fb      	str	r3, [r7, #12]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <vTaskStartScheduler+0xa8>
}
 800956e:	bf00      	nop
 8009570:	3718      	adds	r7, #24
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}
 8009576:	bf00      	nop
 8009578:	08019060 	.word	0x08019060
 800957c:	08009b99 	.word	0x08009b99
 8009580:	2400865c 	.word	0x2400865c
 8009584:	24008538 	.word	0x24008538
 8009588:	24000034 	.word	0x24000034
 800958c:	24008658 	.word	0x24008658
 8009590:	24008644 	.word	0x24008644
 8009594:	2400863c 	.word	0x2400863c

08009598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800959c:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <vTaskSuspendAll+0x18>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	3301      	adds	r3, #1
 80095a2:	4a03      	ldr	r2, [pc, #12]	; (80095b0 <vTaskSuspendAll+0x18>)
 80095a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	24008660 	.word	0x24008660

080095b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095be:	2300      	movs	r3, #0
 80095c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095c2:	4b41      	ldr	r3, [pc, #260]	; (80096c8 <xTaskResumeAll+0x114>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d10a      	bne.n	80095e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	603b      	str	r3, [r7, #0]
}
 80095dc:	bf00      	nop
 80095de:	e7fe      	b.n	80095de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095e0:	f7fe fb98 	bl	8007d14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095e4:	4b38      	ldr	r3, [pc, #224]	; (80096c8 <xTaskResumeAll+0x114>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	4a37      	ldr	r2, [pc, #220]	; (80096c8 <xTaskResumeAll+0x114>)
 80095ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ee:	4b36      	ldr	r3, [pc, #216]	; (80096c8 <xTaskResumeAll+0x114>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d161      	bne.n	80096ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095f6:	4b35      	ldr	r3, [pc, #212]	; (80096cc <xTaskResumeAll+0x118>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d05d      	beq.n	80096ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095fe:	e02e      	b.n	800965e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009600:	4b33      	ldr	r3, [pc, #204]	; (80096d0 <xTaskResumeAll+0x11c>)
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	3318      	adds	r3, #24
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fa29 	bl	8007a64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3304      	adds	r3, #4
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe fa24 	bl	8007a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	2201      	movs	r2, #1
 8009622:	409a      	lsls	r2, r3
 8009624:	4b2b      	ldr	r3, [pc, #172]	; (80096d4 <xTaskResumeAll+0x120>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4313      	orrs	r3, r2
 800962a:	4a2a      	ldr	r2, [pc, #168]	; (80096d4 <xTaskResumeAll+0x120>)
 800962c:	6013      	str	r3, [r2, #0]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009632:	4613      	mov	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4413      	add	r3, r2
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4a27      	ldr	r2, [pc, #156]	; (80096d8 <xTaskResumeAll+0x124>)
 800963c:	441a      	add	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fe f9b0 	bl	80079aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800964e:	4b23      	ldr	r3, [pc, #140]	; (80096dc <xTaskResumeAll+0x128>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009654:	429a      	cmp	r2, r3
 8009656:	d302      	bcc.n	800965e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009658:	4b21      	ldr	r3, [pc, #132]	; (80096e0 <xTaskResumeAll+0x12c>)
 800965a:	2201      	movs	r2, #1
 800965c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800965e:	4b1c      	ldr	r3, [pc, #112]	; (80096d0 <xTaskResumeAll+0x11c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d1cc      	bne.n	8009600 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800966c:	f000 fb4e 	bl	8009d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009670:	4b1c      	ldr	r3, [pc, #112]	; (80096e4 <xTaskResumeAll+0x130>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d010      	beq.n	800969e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800967c:	f000 f858 	bl	8009730 <xTaskIncrementTick>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009686:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <xTaskResumeAll+0x12c>)
 8009688:	2201      	movs	r2, #1
 800968a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3b01      	subs	r3, #1
 8009690:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1f1      	bne.n	800967c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009698:	4b12      	ldr	r3, [pc, #72]	; (80096e4 <xTaskResumeAll+0x130>)
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800969e:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <xTaskResumeAll+0x12c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096aa:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <xTaskResumeAll+0x134>)
 80096ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	f3bf 8f4f 	dsb	sy
 80096b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096ba:	f7fe fb5b 	bl	8007d74 <vPortExitCritical>

	return xAlreadyYielded;
 80096be:	68bb      	ldr	r3, [r7, #8]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	24008660 	.word	0x24008660
 80096cc:	24008638 	.word	0x24008638
 80096d0:	240085f8 	.word	0x240085f8
 80096d4:	24008640 	.word	0x24008640
 80096d8:	2400853c 	.word	0x2400853c
 80096dc:	24008538 	.word	0x24008538
 80096e0:	2400864c 	.word	0x2400864c
 80096e4:	24008648 	.word	0x24008648
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096f2:	4b05      	ldr	r3, [pc, #20]	; (8009708 <xTaskGetTickCount+0x1c>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096f8:	687b      	ldr	r3, [r7, #4]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	2400863c 	.word	0x2400863c

0800970c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009712:	f7fe fbe1 	bl	8007ed8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009716:	2300      	movs	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800971a:	4b04      	ldr	r3, [pc, #16]	; (800972c <xTaskGetTickCountFromISR+0x20>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009720:	683b      	ldr	r3, [r7, #0]
}
 8009722:	4618      	mov	r0, r3
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	2400863c 	.word	0x2400863c

08009730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009736:	2300      	movs	r3, #0
 8009738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800973a:	4b4e      	ldr	r3, [pc, #312]	; (8009874 <xTaskIncrementTick+0x144>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 808e 	bne.w	8009860 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009744:	4b4c      	ldr	r3, [pc, #304]	; (8009878 <xTaskIncrementTick+0x148>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3301      	adds	r3, #1
 800974a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800974c:	4a4a      	ldr	r2, [pc, #296]	; (8009878 <xTaskIncrementTick+0x148>)
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d120      	bne.n	800979a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009758:	4b48      	ldr	r3, [pc, #288]	; (800987c <xTaskIncrementTick+0x14c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00a      	beq.n	8009778 <xTaskIncrementTick+0x48>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	603b      	str	r3, [r7, #0]
}
 8009774:	bf00      	nop
 8009776:	e7fe      	b.n	8009776 <xTaskIncrementTick+0x46>
 8009778:	4b40      	ldr	r3, [pc, #256]	; (800987c <xTaskIncrementTick+0x14c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60fb      	str	r3, [r7, #12]
 800977e:	4b40      	ldr	r3, [pc, #256]	; (8009880 <xTaskIncrementTick+0x150>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a3e      	ldr	r2, [pc, #248]	; (800987c <xTaskIncrementTick+0x14c>)
 8009784:	6013      	str	r3, [r2, #0]
 8009786:	4a3e      	ldr	r2, [pc, #248]	; (8009880 <xTaskIncrementTick+0x150>)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	4b3d      	ldr	r3, [pc, #244]	; (8009884 <xTaskIncrementTick+0x154>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3301      	adds	r3, #1
 8009792:	4a3c      	ldr	r2, [pc, #240]	; (8009884 <xTaskIncrementTick+0x154>)
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	f000 fab9 	bl	8009d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800979a:	4b3b      	ldr	r3, [pc, #236]	; (8009888 <xTaskIncrementTick+0x158>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d348      	bcc.n	8009836 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097a4:	4b35      	ldr	r3, [pc, #212]	; (800987c <xTaskIncrementTick+0x14c>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d104      	bne.n	80097b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097ae:	4b36      	ldr	r3, [pc, #216]	; (8009888 <xTaskIncrementTick+0x158>)
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097b4:	601a      	str	r2, [r3, #0]
					break;
 80097b6:	e03e      	b.n	8009836 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b8:	4b30      	ldr	r3, [pc, #192]	; (800987c <xTaskIncrementTick+0x14c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d203      	bcs.n	80097d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097d0:	4a2d      	ldr	r2, [pc, #180]	; (8009888 <xTaskIncrementTick+0x158>)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097d6:	e02e      	b.n	8009836 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	3304      	adds	r3, #4
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fe f941 	bl	8007a64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	3318      	adds	r3, #24
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe f938 	bl	8007a64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f8:	2201      	movs	r2, #1
 80097fa:	409a      	lsls	r2, r3
 80097fc:	4b23      	ldr	r3, [pc, #140]	; (800988c <xTaskIncrementTick+0x15c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4313      	orrs	r3, r2
 8009802:	4a22      	ldr	r2, [pc, #136]	; (800988c <xTaskIncrementTick+0x15c>)
 8009804:	6013      	str	r3, [r2, #0]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980a:	4613      	mov	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4413      	add	r3, r2
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	4a1f      	ldr	r2, [pc, #124]	; (8009890 <xTaskIncrementTick+0x160>)
 8009814:	441a      	add	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	3304      	adds	r3, #4
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f7fe f8c4 	bl	80079aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009826:	4b1b      	ldr	r3, [pc, #108]	; (8009894 <xTaskIncrementTick+0x164>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	429a      	cmp	r2, r3
 800982e:	d3b9      	bcc.n	80097a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009830:	2301      	movs	r3, #1
 8009832:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009834:	e7b6      	b.n	80097a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009836:	4b17      	ldr	r3, [pc, #92]	; (8009894 <xTaskIncrementTick+0x164>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800983c:	4914      	ldr	r1, [pc, #80]	; (8009890 <xTaskIncrementTick+0x160>)
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	440b      	add	r3, r1
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d901      	bls.n	8009852 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800984e:	2301      	movs	r3, #1
 8009850:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <xTaskIncrementTick+0x168>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d007      	beq.n	800986a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800985a:	2301      	movs	r3, #1
 800985c:	617b      	str	r3, [r7, #20]
 800985e:	e004      	b.n	800986a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009860:	4b0e      	ldr	r3, [pc, #56]	; (800989c <xTaskIncrementTick+0x16c>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	3301      	adds	r3, #1
 8009866:	4a0d      	ldr	r2, [pc, #52]	; (800989c <xTaskIncrementTick+0x16c>)
 8009868:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800986a:	697b      	ldr	r3, [r7, #20]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	24008660 	.word	0x24008660
 8009878:	2400863c 	.word	0x2400863c
 800987c:	240085f0 	.word	0x240085f0
 8009880:	240085f4 	.word	0x240085f4
 8009884:	24008650 	.word	0x24008650
 8009888:	24008658 	.word	0x24008658
 800988c:	24008640 	.word	0x24008640
 8009890:	2400853c 	.word	0x2400853c
 8009894:	24008538 	.word	0x24008538
 8009898:	2400864c 	.word	0x2400864c
 800989c:	24008648 	.word	0x24008648

080098a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098a6:	4b31      	ldr	r3, [pc, #196]	; (800996c <vTaskSwitchContext+0xcc>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098ae:	4b30      	ldr	r3, [pc, #192]	; (8009970 <vTaskSwitchContext+0xd0>)
 80098b0:	2201      	movs	r2, #1
 80098b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098b4:	e055      	b.n	8009962 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80098b6:	4b2e      	ldr	r3, [pc, #184]	; (8009970 <vTaskSwitchContext+0xd0>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80098bc:	4b2d      	ldr	r3, [pc, #180]	; (8009974 <vTaskSwitchContext+0xd4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	4b2c      	ldr	r3, [pc, #176]	; (8009974 <vTaskSwitchContext+0xd4>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d808      	bhi.n	80098de <vTaskSwitchContext+0x3e>
 80098cc:	4b29      	ldr	r3, [pc, #164]	; (8009974 <vTaskSwitchContext+0xd4>)
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	4b28      	ldr	r3, [pc, #160]	; (8009974 <vTaskSwitchContext+0xd4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3334      	adds	r3, #52	; 0x34
 80098d6:	4619      	mov	r1, r3
 80098d8:	4610      	mov	r0, r2
 80098da:	f7f6 fea3 	bl	8000624 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098de:	4b26      	ldr	r3, [pc, #152]	; (8009978 <vTaskSwitchContext+0xd8>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	fab3 f383 	clz	r3, r3
 80098ea:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80098ec:	7afb      	ldrb	r3, [r7, #11]
 80098ee:	f1c3 031f 	rsb	r3, r3, #31
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	4921      	ldr	r1, [pc, #132]	; (800997c <vTaskSwitchContext+0xdc>)
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	4613      	mov	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	440b      	add	r3, r1
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d10a      	bne.n	800991e <vTaskSwitchContext+0x7e>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	607b      	str	r3, [r7, #4]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <vTaskSwitchContext+0x7c>
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a14      	ldr	r2, [pc, #80]	; (800997c <vTaskSwitchContext+0xdc>)
 800992a:	4413      	add	r3, r2
 800992c:	613b      	str	r3, [r7, #16]
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	3308      	adds	r3, #8
 8009940:	429a      	cmp	r2, r3
 8009942:	d104      	bne.n	800994e <vTaskSwitchContext+0xae>
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	685a      	ldr	r2, [r3, #4]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	605a      	str	r2, [r3, #4]
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	4a07      	ldr	r2, [pc, #28]	; (8009974 <vTaskSwitchContext+0xd4>)
 8009956:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <vTaskSwitchContext+0xd4>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	334c      	adds	r3, #76	; 0x4c
 800995e:	4a08      	ldr	r2, [pc, #32]	; (8009980 <vTaskSwitchContext+0xe0>)
 8009960:	6013      	str	r3, [r2, #0]
}
 8009962:	bf00      	nop
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	24008660 	.word	0x24008660
 8009970:	2400864c 	.word	0x2400864c
 8009974:	24008538 	.word	0x24008538
 8009978:	24008640 	.word	0x24008640
 800997c:	2400853c 	.word	0x2400853c
 8009980:	24000034 	.word	0x24000034

08009984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d10a      	bne.n	80099aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009998:	f383 8811 	msr	BASEPRI, r3
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	60fb      	str	r3, [r7, #12]
}
 80099a6:	bf00      	nop
 80099a8:	e7fe      	b.n	80099a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099aa:	4b07      	ldr	r3, [pc, #28]	; (80099c8 <vTaskPlaceOnEventList+0x44>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	3318      	adds	r3, #24
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7fe f81d 	bl	80079f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099b8:	2101      	movs	r1, #1
 80099ba:	6838      	ldr	r0, [r7, #0]
 80099bc:	f000 fb82 	bl	800a0c4 <prvAddCurrentTaskToDelayedList>
}
 80099c0:	bf00      	nop
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	24008538 	.word	0x24008538

080099cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	60fb      	str	r3, [r7, #12]
}
 80099f4:	bf00      	nop
 80099f6:	e7fe      	b.n	80099f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	3318      	adds	r3, #24
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7fe f831 	bl	8007a64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a02:	4b1d      	ldr	r3, [pc, #116]	; (8009a78 <xTaskRemoveFromEventList+0xac>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d11c      	bne.n	8009a44 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	3304      	adds	r3, #4
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7fe f828 	bl	8007a64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	2201      	movs	r2, #1
 8009a1a:	409a      	lsls	r2, r3
 8009a1c:	4b17      	ldr	r3, [pc, #92]	; (8009a7c <xTaskRemoveFromEventList+0xb0>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4313      	orrs	r3, r2
 8009a22:	4a16      	ldr	r2, [pc, #88]	; (8009a7c <xTaskRemoveFromEventList+0xb0>)
 8009a24:	6013      	str	r3, [r2, #0]
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	4413      	add	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4a13      	ldr	r2, [pc, #76]	; (8009a80 <xTaskRemoveFromEventList+0xb4>)
 8009a34:	441a      	add	r2, r3
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	f7fd ffb4 	bl	80079aa <vListInsertEnd>
 8009a42:	e005      	b.n	8009a50 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3318      	adds	r3, #24
 8009a48:	4619      	mov	r1, r3
 8009a4a:	480e      	ldr	r0, [pc, #56]	; (8009a84 <xTaskRemoveFromEventList+0xb8>)
 8009a4c:	f7fd ffad 	bl	80079aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a54:	4b0c      	ldr	r3, [pc, #48]	; (8009a88 <xTaskRemoveFromEventList+0xbc>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d905      	bls.n	8009a6a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a62:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <xTaskRemoveFromEventList+0xc0>)
 8009a64:	2201      	movs	r2, #1
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	e001      	b.n	8009a6e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a6e:	697b      	ldr	r3, [r7, #20]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	24008660 	.word	0x24008660
 8009a7c:	24008640 	.word	0x24008640
 8009a80:	2400853c 	.word	0x2400853c
 8009a84:	240085f8 	.word	0x240085f8
 8009a88:	24008538 	.word	0x24008538
 8009a8c:	2400864c 	.word	0x2400864c

08009a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a98:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <vTaskInternalSetTimeOutState+0x24>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <vTaskInternalSetTimeOutState+0x28>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	605a      	str	r2, [r3, #4]
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr
 8009ab4:	24008650 	.word	0x24008650
 8009ab8:	2400863c 	.word	0x2400863c

08009abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	613b      	str	r3, [r7, #16]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10a      	bne.n	8009afe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	60fb      	str	r3, [r7, #12]
}
 8009afa:	bf00      	nop
 8009afc:	e7fe      	b.n	8009afc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009afe:	f7fe f909 	bl	8007d14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b02:	4b1d      	ldr	r3, [pc, #116]	; (8009b78 <xTaskCheckForTimeOut+0xbc>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b1a:	d102      	bne.n	8009b22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	e023      	b.n	8009b6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <xTaskCheckForTimeOut+0xc0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d007      	beq.n	8009b3e <xTaskCheckForTimeOut+0x82>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d302      	bcc.n	8009b3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	61fb      	str	r3, [r7, #28]
 8009b3c:	e015      	b.n	8009b6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d20b      	bcs.n	8009b60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff ff9b 	bl	8009a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	61fb      	str	r3, [r7, #28]
 8009b5e:	e004      	b.n	8009b6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	2200      	movs	r2, #0
 8009b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b66:	2301      	movs	r3, #1
 8009b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b6a:	f7fe f903 	bl	8007d74 <vPortExitCritical>

	return xReturn;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3720      	adds	r7, #32
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	2400863c 	.word	0x2400863c
 8009b7c:	24008650 	.word	0x24008650

08009b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b80:	b480      	push	{r7}
 8009b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b84:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <vTaskMissedYield+0x14>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	601a      	str	r2, [r3, #0]
}
 8009b8a:	bf00      	nop
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	2400864c 	.word	0x2400864c

08009b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ba0:	f000 f852 	bl	8009c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ba4:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <prvIdleTask+0x28>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d9f9      	bls.n	8009ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <prvIdleTask+0x2c>)
 8009bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bbc:	e7f0      	b.n	8009ba0 <prvIdleTask+0x8>
 8009bbe:	bf00      	nop
 8009bc0:	2400853c 	.word	0x2400853c
 8009bc4:	e000ed04 	.word	0xe000ed04

08009bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bce:	2300      	movs	r3, #0
 8009bd0:	607b      	str	r3, [r7, #4]
 8009bd2:	e00c      	b.n	8009bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4a12      	ldr	r2, [pc, #72]	; (8009c28 <prvInitialiseTaskLists+0x60>)
 8009be0:	4413      	add	r3, r2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fd feb4 	bl	8007950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	3301      	adds	r3, #1
 8009bec:	607b      	str	r3, [r7, #4]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b06      	cmp	r3, #6
 8009bf2:	d9ef      	bls.n	8009bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bf4:	480d      	ldr	r0, [pc, #52]	; (8009c2c <prvInitialiseTaskLists+0x64>)
 8009bf6:	f7fd feab 	bl	8007950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bfa:	480d      	ldr	r0, [pc, #52]	; (8009c30 <prvInitialiseTaskLists+0x68>)
 8009bfc:	f7fd fea8 	bl	8007950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c00:	480c      	ldr	r0, [pc, #48]	; (8009c34 <prvInitialiseTaskLists+0x6c>)
 8009c02:	f7fd fea5 	bl	8007950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c06:	480c      	ldr	r0, [pc, #48]	; (8009c38 <prvInitialiseTaskLists+0x70>)
 8009c08:	f7fd fea2 	bl	8007950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c0c:	480b      	ldr	r0, [pc, #44]	; (8009c3c <prvInitialiseTaskLists+0x74>)
 8009c0e:	f7fd fe9f 	bl	8007950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c12:	4b0b      	ldr	r3, [pc, #44]	; (8009c40 <prvInitialiseTaskLists+0x78>)
 8009c14:	4a05      	ldr	r2, [pc, #20]	; (8009c2c <prvInitialiseTaskLists+0x64>)
 8009c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c18:	4b0a      	ldr	r3, [pc, #40]	; (8009c44 <prvInitialiseTaskLists+0x7c>)
 8009c1a:	4a05      	ldr	r2, [pc, #20]	; (8009c30 <prvInitialiseTaskLists+0x68>)
 8009c1c:	601a      	str	r2, [r3, #0]
}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	2400853c 	.word	0x2400853c
 8009c2c:	240085c8 	.word	0x240085c8
 8009c30:	240085dc 	.word	0x240085dc
 8009c34:	240085f8 	.word	0x240085f8
 8009c38:	2400860c 	.word	0x2400860c
 8009c3c:	24008624 	.word	0x24008624
 8009c40:	240085f0 	.word	0x240085f0
 8009c44:	240085f4 	.word	0x240085f4

08009c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c4e:	e019      	b.n	8009c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c50:	f7fe f860 	bl	8007d14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c54:	4b10      	ldr	r3, [pc, #64]	; (8009c98 <prvCheckTasksWaitingTermination+0x50>)
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7fd feff 	bl	8007a64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c66:	4b0d      	ldr	r3, [pc, #52]	; (8009c9c <prvCheckTasksWaitingTermination+0x54>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3b01      	subs	r3, #1
 8009c6c:	4a0b      	ldr	r2, [pc, #44]	; (8009c9c <prvCheckTasksWaitingTermination+0x54>)
 8009c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c70:	4b0b      	ldr	r3, [pc, #44]	; (8009ca0 <prvCheckTasksWaitingTermination+0x58>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	4a0a      	ldr	r2, [pc, #40]	; (8009ca0 <prvCheckTasksWaitingTermination+0x58>)
 8009c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c7a:	f7fe f87b 	bl	8007d74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f810 	bl	8009ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c84:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <prvCheckTasksWaitingTermination+0x58>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e1      	bne.n	8009c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c8c:	bf00      	nop
 8009c8e:	bf00      	nop
 8009c90:	3708      	adds	r7, #8
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	2400860c 	.word	0x2400860c
 8009c9c:	24008638 	.word	0x24008638
 8009ca0:	24008620 	.word	0x24008620

08009ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	334c      	adds	r3, #76	; 0x4c
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f00e f893 	bl	8017ddc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d108      	bne.n	8009cd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	f7fd fd25 	bl	8007714 <vPortFree>
				vPortFree( pxTCB );
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7fd fd22 	bl	8007714 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cd0:	e018      	b.n	8009d04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d103      	bne.n	8009ce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fd fd19 	bl	8007714 <vPortFree>
	}
 8009ce2:	e00f      	b.n	8009d04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d00a      	beq.n	8009d04 <prvDeleteTCB+0x60>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	60fb      	str	r3, [r7, #12]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <prvDeleteTCB+0x5e>
	}
 8009d04:	bf00      	nop
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d12:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <prvResetNextTaskUnblockTime+0x38>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <prvResetNextTaskUnblockTime+0x3c>)
 8009d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d24:	e008      	b.n	8009d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d26:	4b07      	ldr	r3, [pc, #28]	; (8009d44 <prvResetNextTaskUnblockTime+0x38>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	4a04      	ldr	r2, [pc, #16]	; (8009d48 <prvResetNextTaskUnblockTime+0x3c>)
 8009d36:	6013      	str	r3, [r2, #0]
}
 8009d38:	bf00      	nop
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr
 8009d44:	240085f0 	.word	0x240085f0
 8009d48:	24008658 	.word	0x24008658

08009d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d52:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <xTaskGetSchedulerState+0x34>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d102      	bne.n	8009d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	607b      	str	r3, [r7, #4]
 8009d5e:	e008      	b.n	8009d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d60:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <xTaskGetSchedulerState+0x38>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d102      	bne.n	8009d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d68:	2302      	movs	r3, #2
 8009d6a:	607b      	str	r3, [r7, #4]
 8009d6c:	e001      	b.n	8009d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d72:	687b      	ldr	r3, [r7, #4]
	}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr
 8009d80:	24008644 	.word	0x24008644
 8009d84:	24008660 	.word	0x24008660

08009d88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d05e      	beq.n	8009e5c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da2:	4b31      	ldr	r3, [pc, #196]	; (8009e68 <xTaskPriorityInherit+0xe0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d24e      	bcs.n	8009e4a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	db06      	blt.n	8009dc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db4:	4b2c      	ldr	r3, [pc, #176]	; (8009e68 <xTaskPriorityInherit+0xe0>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dba:	f1c3 0207 	rsb	r2, r3, #7
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6959      	ldr	r1, [r3, #20]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4a26      	ldr	r2, [pc, #152]	; (8009e6c <xTaskPriorityInherit+0xe4>)
 8009dd4:	4413      	add	r3, r2
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	d12f      	bne.n	8009e3a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fd fe40 	bl	8007a64 <uxListRemove>
 8009de4:	4603      	mov	r3, r0
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10a      	bne.n	8009e00 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dee:	2201      	movs	r2, #1
 8009df0:	fa02 f303 	lsl.w	r3, r2, r3
 8009df4:	43da      	mvns	r2, r3
 8009df6:	4b1e      	ldr	r3, [pc, #120]	; (8009e70 <xTaskPriorityInherit+0xe8>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <xTaskPriorityInherit+0xe8>)
 8009dfe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e00:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <xTaskPriorityInherit+0xe0>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0e:	2201      	movs	r2, #1
 8009e10:	409a      	lsls	r2, r3
 8009e12:	4b17      	ldr	r3, [pc, #92]	; (8009e70 <xTaskPriorityInherit+0xe8>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	4a15      	ldr	r2, [pc, #84]	; (8009e70 <xTaskPriorityInherit+0xe8>)
 8009e1a:	6013      	str	r3, [r2, #0]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e20:	4613      	mov	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	4413      	add	r3, r2
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4a10      	ldr	r2, [pc, #64]	; (8009e6c <xTaskPriorityInherit+0xe4>)
 8009e2a:	441a      	add	r2, r3
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	3304      	adds	r3, #4
 8009e30:	4619      	mov	r1, r3
 8009e32:	4610      	mov	r0, r2
 8009e34:	f7fd fdb9 	bl	80079aa <vListInsertEnd>
 8009e38:	e004      	b.n	8009e44 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e3a:	4b0b      	ldr	r3, [pc, #44]	; (8009e68 <xTaskPriorityInherit+0xe0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e44:	2301      	movs	r3, #1
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	e008      	b.n	8009e5c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e4e:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <xTaskPriorityInherit+0xe0>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d201      	bcs.n	8009e5c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
	}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	24008538 	.word	0x24008538
 8009e6c:	2400853c 	.word	0x2400853c
 8009e70:	24008640 	.word	0x24008640

08009e74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e80:	2300      	movs	r3, #0
 8009e82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d06e      	beq.n	8009f68 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e8a:	4b3a      	ldr	r3, [pc, #232]	; (8009f74 <xTaskPriorityDisinherit+0x100>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d00a      	beq.n	8009eaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	60fb      	str	r3, [r7, #12]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	60bb      	str	r3, [r7, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ecc:	1e5a      	subs	r2, r3, #1
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d044      	beq.n	8009f68 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d140      	bne.n	8009f68 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	3304      	adds	r3, #4
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fd fdba 	bl	8007a64 <uxListRemove>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d115      	bne.n	8009f22 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efa:	491f      	ldr	r1, [pc, #124]	; (8009f78 <xTaskPriorityDisinherit+0x104>)
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	440b      	add	r3, r1
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10a      	bne.n	8009f22 <xTaskPriorityDisinherit+0xae>
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	2201      	movs	r2, #1
 8009f12:	fa02 f303 	lsl.w	r3, r2, r3
 8009f16:	43da      	mvns	r2, r3
 8009f18:	4b18      	ldr	r3, [pc, #96]	; (8009f7c <xTaskPriorityDisinherit+0x108>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	4a17      	ldr	r2, [pc, #92]	; (8009f7c <xTaskPriorityDisinherit+0x108>)
 8009f20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2e:	f1c3 0207 	rsb	r2, r3, #7
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	409a      	lsls	r2, r3
 8009f3e:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <xTaskPriorityDisinherit+0x108>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	4a0d      	ldr	r2, [pc, #52]	; (8009f7c <xTaskPriorityDisinherit+0x108>)
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	4413      	add	r3, r2
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4a08      	ldr	r2, [pc, #32]	; (8009f78 <xTaskPriorityDisinherit+0x104>)
 8009f56:	441a      	add	r2, r3
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	3304      	adds	r3, #4
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	4610      	mov	r0, r2
 8009f60:	f7fd fd23 	bl	80079aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f64:	2301      	movs	r3, #1
 8009f66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f68:	697b      	ldr	r3, [r7, #20]
	}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3718      	adds	r7, #24
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	24008538 	.word	0x24008538
 8009f78:	2400853c 	.word	0x2400853c
 8009f7c:	24008640 	.word	0x24008640

08009f80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d077      	beq.n	800a088 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10a      	bne.n	8009fb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	f383 8811 	msr	BASEPRI, r3
 8009fa8:	f3bf 8f6f 	isb	sy
 8009fac:	f3bf 8f4f 	dsb	sy
 8009fb0:	60fb      	str	r3, [r7, #12]
}
 8009fb2:	bf00      	nop
 8009fb4:	e7fe      	b.n	8009fb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d902      	bls.n	8009fc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	61fb      	str	r3, [r7, #28]
 8009fc4:	e002      	b.n	8009fcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d058      	beq.n	800a088 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fda:	697a      	ldr	r2, [r7, #20]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d153      	bne.n	800a088 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009fe0:	4b2b      	ldr	r3, [pc, #172]	; (800a090 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	69ba      	ldr	r2, [r7, #24]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d10a      	bne.n	800a000 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	60bb      	str	r3, [r7, #8]
}
 8009ffc:	bf00      	nop
 8009ffe:	e7fe      	b.n	8009ffe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	69fa      	ldr	r2, [r7, #28]
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	db04      	blt.n	800a01e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a014:	69fb      	ldr	r3, [r7, #28]
 800a016:	f1c3 0207 	rsb	r2, r3, #7
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	6959      	ldr	r1, [r3, #20]
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4a19      	ldr	r2, [pc, #100]	; (800a094 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a02e:	4413      	add	r3, r2
 800a030:	4299      	cmp	r1, r3
 800a032:	d129      	bne.n	800a088 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	3304      	adds	r3, #4
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fd fd13 	bl	8007a64 <uxListRemove>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a048:	2201      	movs	r2, #1
 800a04a:	fa02 f303 	lsl.w	r3, r2, r3
 800a04e:	43da      	mvns	r2, r3
 800a050:	4b11      	ldr	r3, [pc, #68]	; (800a098 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4013      	ands	r3, r2
 800a056:	4a10      	ldr	r2, [pc, #64]	; (800a098 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a058:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05e:	2201      	movs	r2, #1
 800a060:	409a      	lsls	r2, r3
 800a062:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4313      	orrs	r3, r2
 800a068:	4a0b      	ldr	r2, [pc, #44]	; (800a098 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a06a:	6013      	str	r3, [r2, #0]
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a070:	4613      	mov	r3, r2
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4a06      	ldr	r2, [pc, #24]	; (800a094 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a07a:	441a      	add	r2, r3
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f7fd fc91 	bl	80079aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a088:	bf00      	nop
 800a08a:	3720      	adds	r7, #32
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	24008538 	.word	0x24008538
 800a094:	2400853c 	.word	0x2400853c
 800a098:	24008640 	.word	0x24008640

0800a09c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0a0:	4b07      	ldr	r3, [pc, #28]	; (800a0c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a0a8:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0ae:	3201      	adds	r2, #1
 800a0b0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a0b2:	4b03      	ldr	r3, [pc, #12]	; (800a0c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
	}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	24008538 	.word	0x24008538

0800a0c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a0ce:	4b29      	ldr	r3, [pc, #164]	; (800a174 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0d4:	4b28      	ldr	r3, [pc, #160]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fd fcc2 	bl	8007a64 <uxListRemove>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10b      	bne.n	800a0fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0e6:	4b24      	ldr	r3, [pc, #144]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f2:	43da      	mvns	r2, r3
 800a0f4:	4b21      	ldr	r3, [pc, #132]	; (800a17c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	4a20      	ldr	r2, [pc, #128]	; (800a17c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a104:	d10a      	bne.n	800a11c <prvAddCurrentTaskToDelayedList+0x58>
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a10c:	4b1a      	ldr	r3, [pc, #104]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	3304      	adds	r3, #4
 800a112:	4619      	mov	r1, r3
 800a114:	481a      	ldr	r0, [pc, #104]	; (800a180 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a116:	f7fd fc48 	bl	80079aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a11a:	e026      	b.n	800a16a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4413      	add	r3, r2
 800a122:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a124:	4b14      	ldr	r3, [pc, #80]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68ba      	ldr	r2, [r7, #8]
 800a12a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a12c:	68ba      	ldr	r2, [r7, #8]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	429a      	cmp	r2, r3
 800a132:	d209      	bcs.n	800a148 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a134:	4b13      	ldr	r3, [pc, #76]	; (800a184 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f7fd fc56 	bl	80079f2 <vListInsert>
}
 800a146:	e010      	b.n	800a16a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a148:	4b0f      	ldr	r3, [pc, #60]	; (800a188 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3304      	adds	r3, #4
 800a152:	4619      	mov	r1, r3
 800a154:	4610      	mov	r0, r2
 800a156:	f7fd fc4c 	bl	80079f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a15a:	4b0c      	ldr	r3, [pc, #48]	; (800a18c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	429a      	cmp	r2, r3
 800a162:	d202      	bcs.n	800a16a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a164:	4a09      	ldr	r2, [pc, #36]	; (800a18c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	6013      	str	r3, [r2, #0]
}
 800a16a:	bf00      	nop
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	2400863c 	.word	0x2400863c
 800a178:	24008538 	.word	0x24008538
 800a17c:	24008640 	.word	0x24008640
 800a180:	24008624 	.word	0x24008624
 800a184:	240085f4 	.word	0x240085f4
 800a188:	240085f0 	.word	0x240085f0
 800a18c:	24008658 	.word	0x24008658

0800a190 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	330c      	adds	r3, #12
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	6839      	ldr	r1, [r7, #0]
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f00c fec5 	bl	8016f34 <tcpip_send_msg_wait_sem>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d103      	bne.n	800a1be <netconn_apimsg+0x2e>
    return apimsg->err;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a1bc:	e001      	b.n	800a1c2 <netconn_apimsg+0x32>
  }
  return err;
 800a1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
	...

0800a1cc <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	; 0x30
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	603a      	str	r2, [r7, #0]
 800a1d6:	71fb      	strb	r3, [r7, #7]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800a1dc:	79fb      	ldrb	r3, [r7, #7]
 800a1de:	6839      	ldr	r1, [r7, #0]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f001 f927 	bl	800b434 <netconn_alloc>
 800a1e6:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800a1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d054      	beq.n	800a298 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800a1ee:	79bb      	ldrb	r3, [r7, #6]
 800a1f0:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800a1f6:	f107 0308 	add.w	r3, r7, #8
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	4829      	ldr	r0, [pc, #164]	; (800a2a4 <netconn_new_with_proto_and_callback+0xd8>)
 800a1fe:	f7ff ffc7 	bl	800a190 <netconn_apimsg>
 800a202:	4603      	mov	r3, r0
 800a204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800a208:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d043      	beq.n	800a298 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800a210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d005      	beq.n	800a224 <netconn_new_with_proto_and_callback+0x58>
 800a218:	4b23      	ldr	r3, [pc, #140]	; (800a2a8 <netconn_new_with_proto_and_callback+0xdc>)
 800a21a:	22a3      	movs	r2, #163	; 0xa3
 800a21c:	4923      	ldr	r1, [pc, #140]	; (800a2ac <netconn_new_with_proto_and_callback+0xe0>)
 800a21e:	4824      	ldr	r0, [pc, #144]	; (800a2b0 <netconn_new_with_proto_and_callback+0xe4>)
 800a220:	f00d fd78 	bl	8017d14 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	3310      	adds	r3, #16
 800a228:	4618      	mov	r0, r3
 800a22a:	f006 fb8c 	bl	8010946 <sys_mbox_valid>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d105      	bne.n	800a240 <netconn_new_with_proto_and_callback+0x74>
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <netconn_new_with_proto_and_callback+0xdc>)
 800a236:	22a4      	movs	r2, #164	; 0xa4
 800a238:	491e      	ldr	r1, [pc, #120]	; (800a2b4 <netconn_new_with_proto_and_callback+0xe8>)
 800a23a:	481d      	ldr	r0, [pc, #116]	; (800a2b0 <netconn_new_with_proto_and_callback+0xe4>)
 800a23c:	f00d fd6a 	bl	8017d14 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	3314      	adds	r3, #20
 800a244:	4618      	mov	r0, r3
 800a246:	f006 fb7e 	bl	8010946 <sys_mbox_valid>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d005      	beq.n	800a25c <netconn_new_with_proto_and_callback+0x90>
 800a250:	4b15      	ldr	r3, [pc, #84]	; (800a2a8 <netconn_new_with_proto_and_callback+0xdc>)
 800a252:	22a6      	movs	r2, #166	; 0xa6
 800a254:	4918      	ldr	r1, [pc, #96]	; (800a2b8 <netconn_new_with_proto_and_callback+0xec>)
 800a256:	4816      	ldr	r0, [pc, #88]	; (800a2b0 <netconn_new_with_proto_and_callback+0xe4>)
 800a258:	f00d fd5c 	bl	8017d14 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800a25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25e:	330c      	adds	r3, #12
 800a260:	4618      	mov	r0, r3
 800a262:	f006 fc01 	bl	8010a68 <sys_sem_valid>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d105      	bne.n	800a278 <netconn_new_with_proto_and_callback+0xac>
 800a26c:	4b0e      	ldr	r3, [pc, #56]	; (800a2a8 <netconn_new_with_proto_and_callback+0xdc>)
 800a26e:	22a9      	movs	r2, #169	; 0xa9
 800a270:	4912      	ldr	r1, [pc, #72]	; (800a2bc <netconn_new_with_proto_and_callback+0xf0>)
 800a272:	480f      	ldr	r0, [pc, #60]	; (800a2b0 <netconn_new_with_proto_and_callback+0xe4>)
 800a274:	f00d fd4e 	bl	8017d14 <iprintf>
      sys_sem_free(&conn->op_completed);
 800a278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27a:	330c      	adds	r3, #12
 800a27c:	4618      	mov	r0, r3
 800a27e:	f006 fbe6 	bl	8010a4e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	3310      	adds	r3, #16
 800a286:	4618      	mov	r0, r3
 800a288:	f006 fad6 	bl	8010838 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800a28c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a28e:	2007      	movs	r0, #7
 800a290:	f005 f922 	bl	800f4d8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800a294:	2300      	movs	r3, #0
 800a296:	e000      	b.n	800a29a <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800a298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3730      	adds	r7, #48	; 0x30
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800b409 	.word	0x0800b409
 800a2a8:	08019068 	.word	0x08019068
 800a2ac:	080190e0 	.word	0x080190e0
 800a2b0:	08019104 	.word	0x08019104
 800a2b4:	0801912c 	.word	0x0801912c
 800a2b8:	08019144 	.word	0x08019144
 800a2bc:	08019168 	.word	0x08019168

0800a2c0 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b08c      	sub	sp, #48	; 0x30
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e014      	b.n	800a2fc <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800a2d6:	2329      	movs	r3, #41	; 0x29
 800a2d8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800a2da:	f107 030c 	add.w	r3, r7, #12
 800a2de:	4619      	mov	r1, r3
 800a2e0:	4808      	ldr	r0, [pc, #32]	; (800a304 <netconn_prepare_delete+0x44>)
 800a2e2:	f7ff ff55 	bl	800a190 <netconn_apimsg>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800a2ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <netconn_prepare_delete+0x3a>
    return err;
 800a2f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a2f8:	e000      	b.n	800a2fc <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3730      	adds	r7, #48	; 0x30
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	0800b975 	.word	0x0800b975

0800a308 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <netconn_delete+0x12>
    return ERR_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	e00d      	b.n	800a336 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f7ff ffd0 	bl	800a2c0 <netconn_prepare_delete>
 800a320:	4603      	mov	r3, r0
 800a322:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800a324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <netconn_delete+0x2a>
    netconn_free(conn);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 f8ef 	bl	800b510 <netconn_free>
  }
  return err;
 800a332:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b08e      	sub	sp, #56	; 0x38
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	4613      	mov	r3, r2
 800a34c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d109      	bne.n	800a368 <netconn_bind+0x28>
 800a354:	4b11      	ldr	r3, [pc, #68]	; (800a39c <netconn_bind+0x5c>)
 800a356:	f44f 729c 	mov.w	r2, #312	; 0x138
 800a35a:	4911      	ldr	r1, [pc, #68]	; (800a3a0 <netconn_bind+0x60>)
 800a35c:	4811      	ldr	r0, [pc, #68]	; (800a3a4 <netconn_bind+0x64>)
 800a35e:	f00d fcd9 	bl	8017d14 <iprintf>
 800a362:	f06f 030f 	mvn.w	r3, #15
 800a366:	e015      	b.n	800a394 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d101      	bne.n	800a372 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800a36e:	4b0e      	ldr	r3, [pc, #56]	; (800a3a8 <netconn_bind+0x68>)
 800a370:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800a37a:	88fb      	ldrh	r3, [r7, #6]
 800a37c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800a37e:	f107 0314 	add.w	r3, r7, #20
 800a382:	4619      	mov	r1, r3
 800a384:	4809      	ldr	r0, [pc, #36]	; (800a3ac <netconn_bind+0x6c>)
 800a386:	f7ff ff03 	bl	800a190 <netconn_apimsg>
 800a38a:	4603      	mov	r3, r0
 800a38c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800a390:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a394:	4618      	mov	r0, r3
 800a396:	3738      	adds	r7, #56	; 0x38
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	08019068 	.word	0x08019068
 800a3a0:	080191e4 	.word	0x080191e4
 800a3a4:	08019104 	.word	0x08019104
 800a3a8:	0801ca58 	.word	0x0801ca58
 800a3ac:	0800bb3d 	.word	0x0800bb3d

0800a3b0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08c      	sub	sp, #48	; 0x30
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d109      	bne.n	800a3d6 <netconn_listen_with_backlog+0x26>
 800a3c2:	4b0d      	ldr	r3, [pc, #52]	; (800a3f8 <netconn_listen_with_backlog+0x48>)
 800a3c4:	f240 12bb 	movw	r2, #443	; 0x1bb
 800a3c8:	490c      	ldr	r1, [pc, #48]	; (800a3fc <netconn_listen_with_backlog+0x4c>)
 800a3ca:	480d      	ldr	r0, [pc, #52]	; (800a400 <netconn_listen_with_backlog+0x50>)
 800a3cc:	f00d fca2 	bl	8017d14 <iprintf>
 800a3d0:	f06f 030f 	mvn.w	r3, #15
 800a3d4:	e00c      	b.n	800a3f0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800a3da:	f107 030c 	add.w	r3, r7, #12
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4808      	ldr	r0, [pc, #32]	; (800a404 <netconn_listen_with_backlog+0x54>)
 800a3e2:	f7ff fed5 	bl	800a190 <netconn_apimsg>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800a3ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3730      	adds	r7, #48	; 0x30
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	08019068 	.word	0x08019068
 800a3fc:	08019264 	.word	0x08019264
 800a400:	08019104 	.word	0x08019104
 800a404:	0800bbb1 	.word	0x0800bbb1

0800a408 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d109      	bne.n	800a42c <netconn_accept+0x24>
 800a418:	4b3d      	ldr	r3, [pc, #244]	; (800a510 <netconn_accept+0x108>)
 800a41a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a41e:	493d      	ldr	r1, [pc, #244]	; (800a514 <netconn_accept+0x10c>)
 800a420:	483d      	ldr	r0, [pc, #244]	; (800a518 <netconn_accept+0x110>)
 800a422:	f00d fc77 	bl	8017d14 <iprintf>
 800a426:	f06f 030f 	mvn.w	r3, #15
 800a42a:	e06c      	b.n	800a506 <netconn_accept+0xfe>
  *new_conn = NULL;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2200      	movs	r2, #0
 800a430:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d109      	bne.n	800a44c <netconn_accept+0x44>
 800a438:	4b35      	ldr	r3, [pc, #212]	; (800a510 <netconn_accept+0x108>)
 800a43a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800a43e:	4937      	ldr	r1, [pc, #220]	; (800a51c <netconn_accept+0x114>)
 800a440:	4835      	ldr	r0, [pc, #212]	; (800a518 <netconn_accept+0x110>)
 800a442:	f00d fc67 	bl	8017d14 <iprintf>
 800a446:	f06f 030f 	mvn.w	r3, #15
 800a44a:	e05c      	b.n	800a506 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fb6c 	bl	800ab2a <netconn_err>
 800a452:	4603      	mov	r3, r0
 800a454:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800a456:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800a45e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a462:	e050      	b.n	800a506 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	3314      	adds	r3, #20
 800a468:	4618      	mov	r0, r3
 800a46a:	f006 fa6c 	bl	8010946 <sys_mbox_valid>
 800a46e:	4603      	mov	r3, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	d005      	beq.n	800a480 <netconn_accept+0x78>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	7f1b      	ldrb	r3, [r3, #28]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800a480:	f06f 030e 	mvn.w	r3, #14
 800a484:	e03f      	b.n	800a506 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	7f1b      	ldrb	r3, [r3, #28]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00e      	beq.n	800a4b0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3314      	adds	r3, #20
 800a496:	f107 020c 	add.w	r2, r7, #12
 800a49a:	4611      	mov	r1, r2
 800a49c:	4618      	mov	r0, r3
 800a49e:	f006 fa36 	bl	801090e <sys_arch_mbox_tryfetch>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a4a8:	d10a      	bne.n	800a4c0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800a4aa:	f06f 0306 	mvn.w	r3, #6
 800a4ae:	e02a      	b.n	800a506 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3314      	adds	r3, #20
 800a4b4:	f107 010c 	add.w	r1, r7, #12
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f006 f9e8 	bl	8010890 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <netconn_accept+0xcc>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f107 0213 	add.w	r2, r7, #19
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 fb75 	bl	800abcc <lwip_netconn_is_err_msg>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d002      	beq.n	800a4ee <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800a4e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a4ec:	e00b      	b.n	800a506 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800a4f4:	f06f 030e 	mvn.w	r3, #14
 800a4f8:	e005      	b.n	800a506 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a504:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	08019068 	.word	0x08019068
 800a514:	08019284 	.word	0x08019284
 800a518:	08019104 	.word	0x08019104
 800a51c:	080192a4 	.word	0x080192a4

0800a520 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800a52e:	2300      	movs	r3, #0
 800a530:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d109      	bne.n	800a54c <netconn_recv_data+0x2c>
 800a538:	4b58      	ldr	r3, [pc, #352]	; (800a69c <netconn_recv_data+0x17c>)
 800a53a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800a53e:	4958      	ldr	r1, [pc, #352]	; (800a6a0 <netconn_recv_data+0x180>)
 800a540:	4858      	ldr	r0, [pc, #352]	; (800a6a4 <netconn_recv_data+0x184>)
 800a542:	f00d fbe7 	bl	8017d14 <iprintf>
 800a546:	f06f 030f 	mvn.w	r3, #15
 800a54a:	e0a2      	b.n	800a692 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d109      	bne.n	800a56c <netconn_recv_data+0x4c>
 800a558:	4b50      	ldr	r3, [pc, #320]	; (800a69c <netconn_recv_data+0x17c>)
 800a55a:	f240 224a 	movw	r2, #586	; 0x24a
 800a55e:	4952      	ldr	r1, [pc, #328]	; (800a6a8 <netconn_recv_data+0x188>)
 800a560:	4850      	ldr	r0, [pc, #320]	; (800a6a4 <netconn_recv_data+0x184>)
 800a562:	f00d fbd7 	bl	8017d14 <iprintf>
 800a566:	f06f 030f 	mvn.w	r3, #15
 800a56a:	e092      	b.n	800a692 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3310      	adds	r3, #16
 800a570:	4618      	mov	r0, r3
 800a572:	f006 f9e8 	bl	8010946 <sys_mbox_valid>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10e      	bne.n	800a59a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 fad4 	bl	800ab2a <netconn_err>
 800a582:	4603      	mov	r3, r0
 800a584:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800a586:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800a58e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800a592:	e07e      	b.n	800a692 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800a594:	f06f 030a 	mvn.w	r3, #10
 800a598:	e07b      	b.n	800a692 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	7f1b      	ldrb	r3, [r3, #28]
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10f      	bne.n	800a5c6 <netconn_recv_data+0xa6>
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	f003 0304 	and.w	r3, r3, #4
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10a      	bne.n	800a5c6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	7f1b      	ldrb	r3, [r3, #28]
 800a5b4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d104      	bne.n	800a5c6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d023      	beq.n	800a60e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3310      	adds	r3, #16
 800a5ca:	f107 0218 	add.w	r2, r7, #24
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f006 f99c 	bl	801090e <sys_arch_mbox_tryfetch>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5dc:	d11f      	bne.n	800a61e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 faa3 	bl	800ab2a <netconn_err>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800a5e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800a5f0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800a5f4:	e04d      	b.n	800a692 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	7f1b      	ldrb	r3, [r3, #28]
 800a5fa:	f003 0301 	and.w	r3, r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d002      	beq.n	800a608 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800a602:	f06f 030a 	mvn.w	r3, #10
 800a606:	e044      	b.n	800a692 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800a608:	f06f 0306 	mvn.w	r3, #6
 800a60c:	e041      	b.n	800a692 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3310      	adds	r3, #16
 800a612:	f107 0118 	add.w	r1, r7, #24
 800a616:	2200      	movs	r2, #0
 800a618:	4618      	mov	r0, r3
 800a61a:	f006 f939 	bl	8010890 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a626:	2b10      	cmp	r3, #16
 800a628:	d117      	bne.n	800a65a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	f107 0217 	add.w	r2, r7, #23
 800a630:	4611      	mov	r1, r2
 800a632:	4618      	mov	r0, r3
 800a634:	f000 faca 	bl	800abcc <lwip_netconn_is_err_msg>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d009      	beq.n	800a652 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800a63e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a642:	f113 0f0f 	cmn.w	r3, #15
 800a646:	d101      	bne.n	800a64c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800a648:	2300      	movs	r3, #0
 800a64a:	e022      	b.n	800a692 <netconn_recv_data+0x172>
      }
      return err;
 800a64c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a650:	e01f      	b.n	800a692 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	891b      	ldrh	r3, [r3, #8]
 800a656:	83fb      	strh	r3, [r7, #30]
 800a658:	e00d      	b.n	800a676 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d106      	bne.n	800a66e <netconn_recv_data+0x14e>
 800a660:	4b0e      	ldr	r3, [pc, #56]	; (800a69c <netconn_recv_data+0x17c>)
 800a662:	f240 2291 	movw	r2, #657	; 0x291
 800a666:	4911      	ldr	r1, [pc, #68]	; (800a6ac <netconn_recv_data+0x18c>)
 800a668:	480e      	ldr	r0, [pc, #56]	; (800a6a4 <netconn_recv_data+0x184>)
 800a66a:	f00d fb53 	bl	8017d14 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	891b      	ldrh	r3, [r3, #8]
 800a674:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <netconn_recv_data+0x16a>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a682:	8bfa      	ldrh	r2, [r7, #30]
 800a684:	2101      	movs	r1, #1
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800a68a:	69ba      	ldr	r2, [r7, #24]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	08019068 	.word	0x08019068
 800a6a0:	080192c4 	.word	0x080192c4
 800a6a4:	08019104 	.word	0x08019104
 800a6a8:	080192e4 	.word	0x080192e4
 800a6ac:	08019300 	.word	0x08019300

0800a6b0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d005      	beq.n	800a6ce <netconn_tcp_recvd_msg+0x1e>
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	781b      	ldrb	r3, [r3, #0]
 800a6c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6ca:	2b10      	cmp	r3, #16
 800a6cc:	d009      	beq.n	800a6e2 <netconn_tcp_recvd_msg+0x32>
 800a6ce:	4b0c      	ldr	r3, [pc, #48]	; (800a700 <netconn_tcp_recvd_msg+0x50>)
 800a6d0:	f240 22a7 	movw	r2, #679	; 0x2a7
 800a6d4:	490b      	ldr	r1, [pc, #44]	; (800a704 <netconn_tcp_recvd_msg+0x54>)
 800a6d6:	480c      	ldr	r0, [pc, #48]	; (800a708 <netconn_tcp_recvd_msg+0x58>)
 800a6d8:	f00d fb1c 	bl	8017d14 <iprintf>
 800a6dc:	f06f 030f 	mvn.w	r3, #15
 800a6e0:	e00a      	b.n	800a6f8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800a6ee:	6879      	ldr	r1, [r7, #4]
 800a6f0:	4806      	ldr	r0, [pc, #24]	; (800a70c <netconn_tcp_recvd_msg+0x5c>)
 800a6f2:	f7ff fd4d 	bl	800a190 <netconn_apimsg>
 800a6f6:	4603      	mov	r3, r0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	08019068 	.word	0x08019068
 800a704:	0801930c 	.word	0x0801930c
 800a708:	08019104 	.word	0x08019104
 800a70c:	0800bce1 	.word	0x0800bce1

0800a710 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b090      	sub	sp, #64	; 0x40
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	4613      	mov	r3, r2
 800a71c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3310      	adds	r3, #16
 800a722:	4618      	mov	r0, r3
 800a724:	f006 f90f 	bl	8010946 <sys_mbox_valid>
 800a728:	4603      	mov	r3, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800a72e:	f06f 030a 	mvn.w	r3, #10
 800a732:	e06d      	b.n	800a810 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	7f1b      	ldrb	r3, [r3, #28]
 800a738:	b25b      	sxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	da07      	bge.n	800a74e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	7f1b      	ldrb	r3, [r3, #28]
 800a742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a746:	b2da      	uxtb	r2, r3
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800a74c:	e039      	b.n	800a7c2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800a74e:	79fb      	ldrb	r3, [r7, #7]
 800a750:	461a      	mov	r2, r3
 800a752:	68b9      	ldr	r1, [r7, #8]
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f7ff fee3 	bl	800a520 <netconn_recv_data>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800a760:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800a768:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a76c:	e050      	b.n	800a810 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	f003 0308 	and.w	r3, r3, #8
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10e      	bne.n	800a79c <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800a77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a780:	2b00      	cmp	r3, #0
 800a782:	d002      	beq.n	800a78a <netconn_recv_data_tcp+0x7a>
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	891b      	ldrh	r3, [r3, #8]
 800a788:	e000      	b.n	800a78c <netconn_recv_data_tcp+0x7c>
 800a78a:	2301      	movs	r3, #1
 800a78c:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800a78e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a790:	f107 0214 	add.w	r2, r7, #20
 800a794:	4619      	mov	r1, r3
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f7ff ff8a 	bl	800a6b0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d134      	bne.n	800a80c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	f003 0310 	and.w	r3, r3, #16
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d009      	beq.n	800a7c0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	7f1b      	ldrb	r3, [r3, #28]
 800a7b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800a7ba:	f06f 0306 	mvn.w	r3, #6
 800a7be:	e027      	b.n	800a810 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800a7c0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d005      	beq.n	800a7d6 <netconn_recv_data_tcp+0xc6>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	2101      	movs	r1, #1
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10f      	bne.n	800a7fe <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 f9a3 	bl	800ab2a <netconn_err>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800a7ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <netconn_recv_data_tcp+0xe8>
          return err;
 800a7f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a7f6:	e00b      	b.n	800a810 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800a7f8:	f06f 030d 	mvn.w	r3, #13
 800a7fc:	e008      	b.n	800a810 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800a7fe:	2101      	movs	r1, #1
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f000 f955 	bl	800aab0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800a806:	f06f 030e 	mvn.w	r3, #14
 800a80a:	e001      	b.n	800a810 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800a80c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a810:	4618      	mov	r0, r3
 800a812:	3740      	adds	r7, #64	; 0x40
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800a822:	2300      	movs	r3, #0
 800a824:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d109      	bne.n	800a840 <netconn_recv+0x28>
 800a82c:	4b32      	ldr	r3, [pc, #200]	; (800a8f8 <netconn_recv+0xe0>)
 800a82e:	f240 3263 	movw	r2, #867	; 0x363
 800a832:	4932      	ldr	r1, [pc, #200]	; (800a8fc <netconn_recv+0xe4>)
 800a834:	4832      	ldr	r0, [pc, #200]	; (800a900 <netconn_recv+0xe8>)
 800a836:	f00d fa6d 	bl	8017d14 <iprintf>
 800a83a:	f06f 030f 	mvn.w	r3, #15
 800a83e:	e056      	b.n	800a8ee <netconn_recv+0xd6>
  *new_buf = NULL;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d109      	bne.n	800a860 <netconn_recv+0x48>
 800a84c:	4b2a      	ldr	r3, [pc, #168]	; (800a8f8 <netconn_recv+0xe0>)
 800a84e:	f240 3265 	movw	r2, #869	; 0x365
 800a852:	492c      	ldr	r1, [pc, #176]	; (800a904 <netconn_recv+0xec>)
 800a854:	482a      	ldr	r0, [pc, #168]	; (800a900 <netconn_recv+0xe8>)
 800a856:	f00d fa5d 	bl	8017d14 <iprintf>
 800a85a:	f06f 030f 	mvn.w	r3, #15
 800a85e:	e046      	b.n	800a8ee <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a868:	2b10      	cmp	r3, #16
 800a86a:	d13a      	bne.n	800a8e2 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800a86c:	2300      	movs	r3, #0
 800a86e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a870:	2006      	movs	r0, #6
 800a872:	f004 fdbb 	bl	800f3ec <memp_malloc>
 800a876:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d102      	bne.n	800a884 <netconn_recv+0x6c>
      return ERR_MEM;
 800a87e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a882:	e034      	b.n	800a8ee <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800a884:	f107 030c 	add.w	r3, r7, #12
 800a888:	2200      	movs	r2, #0
 800a88a:	4619      	mov	r1, r3
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff ff3f 	bl	800a710 <netconn_recv_data_tcp>
 800a892:	4603      	mov	r3, r0
 800a894:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a896:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d006      	beq.n	800a8ac <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800a89e:	6979      	ldr	r1, [r7, #20]
 800a8a0:	2006      	movs	r0, #6
 800a8a2:	f004 fe19 	bl	800f4d8 <memp_free>
      return err;
 800a8a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8aa:	e020      	b.n	800a8ee <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <netconn_recv+0xa8>
 800a8b2:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <netconn_recv+0xe0>)
 800a8b4:	f240 3279 	movw	r2, #889	; 0x379
 800a8b8:	4913      	ldr	r1, [pc, #76]	; (800a908 <netconn_recv+0xf0>)
 800a8ba:	4811      	ldr	r0, [pc, #68]	; (800a900 <netconn_recv+0xe8>)
 800a8bc:	f00d fa2a 	bl	8017d14 <iprintf>

    buf->p = p;
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	697a      	ldr	r2, [r7, #20]
 800a8dc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	e005      	b.n	800a8ee <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff fe1a 	bl	800a520 <netconn_recv_data>
 800a8ec:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	08019068 	.word	0x08019068
 800a8fc:	080192c4 	.word	0x080192c4
 800a900:	08019104 	.word	0x08019104
 800a904:	080192e4 	.word	0x080192e4
 800a908:	0801935c 	.word	0x0801935c

0800a90c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af02      	add	r7, sp, #8
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
 800a918:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800a922:	78fa      	ldrb	r2, [r7, #3]
 800a924:	f107 0110 	add.w	r1, r7, #16
 800a928:	6a3b      	ldr	r3, [r7, #32]
 800a92a:	9300      	str	r3, [sp, #0]
 800a92c:	4613      	mov	r3, r2
 800a92e:	2201      	movs	r2, #1
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f805 	bl	800a940 <netconn_write_vectors_partly>
 800a936:	4603      	mov	r3, r0
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3718      	adds	r7, #24
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b092      	sub	sp, #72	; 0x48
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	4611      	mov	r1, r2
 800a94c:	461a      	mov	r2, r3
 800a94e:	460b      	mov	r3, r1
 800a950:	80fb      	strh	r3, [r7, #6]
 800a952:	4613      	mov	r3, r2
 800a954:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d109      	bne.n	800a970 <netconn_write_vectors_partly+0x30>
 800a95c:	4b4e      	ldr	r3, [pc, #312]	; (800aa98 <netconn_write_vectors_partly+0x158>)
 800a95e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800a962:	494e      	ldr	r1, [pc, #312]	; (800aa9c <netconn_write_vectors_partly+0x15c>)
 800a964:	484e      	ldr	r0, [pc, #312]	; (800aaa0 <netconn_write_vectors_partly+0x160>)
 800a966:	f00d f9d5 	bl	8017d14 <iprintf>
 800a96a:	f06f 030f 	mvn.w	r3, #15
 800a96e:	e08e      	b.n	800aa8e <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a978:	2b10      	cmp	r3, #16
 800a97a:	d009      	beq.n	800a990 <netconn_write_vectors_partly+0x50>
 800a97c:	4b46      	ldr	r3, [pc, #280]	; (800aa98 <netconn_write_vectors_partly+0x158>)
 800a97e:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800a982:	4948      	ldr	r1, [pc, #288]	; (800aaa4 <netconn_write_vectors_partly+0x164>)
 800a984:	4846      	ldr	r0, [pc, #280]	; (800aaa0 <netconn_write_vectors_partly+0x160>)
 800a986:	f00d f9c5 	bl	8017d14 <iprintf>
 800a98a:	f06f 0305 	mvn.w	r3, #5
 800a98e:	e07e      	b.n	800aa8e <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	7f1b      	ldrb	r3, [r3, #28]
 800a994:	f003 0302 	and.w	r3, r3, #2
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d104      	bne.n	800a9a6 <netconn_write_vectors_partly+0x66>
 800a99c:	797b      	ldrb	r3, [r7, #5]
 800a99e:	f003 0304 	and.w	r3, r3, #4
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <netconn_write_vectors_partly+0x6a>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e000      	b.n	800a9ac <netconn_write_vectors_partly+0x6c>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800a9b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <netconn_write_vectors_partly+0x84>
 800a9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d102      	bne.n	800a9c4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800a9be:	f06f 0305 	mvn.w	r3, #5
 800a9c2:	e064      	b.n	800aa8e <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a9cc:	e015      	b.n	800a9fa <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800a9ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9da:	4413      	add	r3, r2
 800a9dc:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800a9de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e0:	00db      	lsls	r3, r3, #3
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a9ea:	429a      	cmp	r2, r3
 800a9ec:	d202      	bcs.n	800a9f4 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800a9ee:	f06f 0305 	mvn.w	r3, #5
 800a9f2:	e04c      	b.n	800aa8e <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800a9f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	643b      	str	r3, [r7, #64]	; 0x40
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	dbe5      	blt.n	800a9ce <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800aa02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d101      	bne.n	800aa0c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e040      	b.n	800aa8e <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800aa0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	da0a      	bge.n	800aa28 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800aa12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d102      	bne.n	800aa1e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800aa18:	f06f 0305 	mvn.w	r3, #5
 800aa1c:	e037      	b.n	800aa8e <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800aa1e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800aa22:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800aa24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa26:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800aa30:	88fb      	ldrh	r3, [r7, #6]
 800aa32:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800aa38:	797b      	ldrb	r3, [r7, #5]
 800aa3a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800aa3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa40:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800aa46:	f107 0314 	add.w	r3, r7, #20
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	4816      	ldr	r0, [pc, #88]	; (800aaa8 <netconn_write_vectors_partly+0x168>)
 800aa4e:	f7ff fb9f 	bl	800a190 <netconn_apimsg>
 800aa52:	4603      	mov	r3, r0
 800aa54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800aa58:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d114      	bne.n	800aa8a <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800aa60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800aa66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa6a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800aa6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10a      	bne.n	800aa8a <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800aa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d006      	beq.n	800aa8a <netconn_write_vectors_partly+0x14a>
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <netconn_write_vectors_partly+0x158>)
 800aa7e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800aa82:	490a      	ldr	r1, [pc, #40]	; (800aaac <netconn_write_vectors_partly+0x16c>)
 800aa84:	4806      	ldr	r0, [pc, #24]	; (800aaa0 <netconn_write_vectors_partly+0x160>)
 800aa86:	f00d f945 	bl	8017d14 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800aa8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3748      	adds	r7, #72	; 0x48
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	08019068 	.word	0x08019068
 800aa9c:	08019384 	.word	0x08019384
 800aaa0:	08019104 	.word	0x08019104
 800aaa4:	080193a0 	.word	0x080193a0
 800aaa8:	0800c0e9 	.word	0x0800c0e9
 800aaac:	080193c4 	.word	0x080193c4

0800aab0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08c      	sub	sp, #48	; 0x30
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d109      	bne.n	800aad6 <netconn_close_shutdown+0x26>
 800aac2:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <netconn_close_shutdown+0x50>)
 800aac4:	f240 4247 	movw	r2, #1095	; 0x447
 800aac8:	490e      	ldr	r1, [pc, #56]	; (800ab04 <netconn_close_shutdown+0x54>)
 800aaca:	480f      	ldr	r0, [pc, #60]	; (800ab08 <netconn_close_shutdown+0x58>)
 800aacc:	f00d f922 	bl	8017d14 <iprintf>
 800aad0:	f06f 030f 	mvn.w	r3, #15
 800aad4:	e010      	b.n	800aaf8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800aada:	78fb      	ldrb	r3, [r7, #3]
 800aadc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800aade:	2329      	movs	r3, #41	; 0x29
 800aae0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800aae2:	f107 030c 	add.w	r3, r7, #12
 800aae6:	4619      	mov	r1, r3
 800aae8:	4808      	ldr	r0, [pc, #32]	; (800ab0c <netconn_close_shutdown+0x5c>)
 800aaea:	f7ff fb51 	bl	800a190 <netconn_apimsg>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800aaf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3730      	adds	r7, #48	; 0x30
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	08019068 	.word	0x08019068
 800ab04:	080193e8 	.word	0x080193e8
 800ab08:	08019104 	.word	0x08019104
 800ab0c:	0800c201 	.word	0x0800c201

0800ab10 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800ab18:	2103      	movs	r1, #3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f7ff ffc8 	bl	800aab0 <netconn_close_shutdown>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b084      	sub	sp, #16
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <netconn_err+0x12>
    return ERR_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e00d      	b.n	800ab58 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800ab3c:	f006 f81e 	bl	8010b7c <sys_arch_protect>
 800ab40:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	7a1b      	ldrb	r3, [r3, #8]
 800ab46:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f006 f822 	bl	8010b98 <sys_arch_unprotect>
  return err;
 800ab54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800ab6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab6e:	f113 0f0d 	cmn.w	r3, #13
 800ab72:	d009      	beq.n	800ab88 <lwip_netconn_err_to_msg+0x28>
 800ab74:	f113 0f0d 	cmn.w	r3, #13
 800ab78:	dc0c      	bgt.n	800ab94 <lwip_netconn_err_to_msg+0x34>
 800ab7a:	f113 0f0f 	cmn.w	r3, #15
 800ab7e:	d007      	beq.n	800ab90 <lwip_netconn_err_to_msg+0x30>
 800ab80:	f113 0f0e 	cmn.w	r3, #14
 800ab84:	d002      	beq.n	800ab8c <lwip_netconn_err_to_msg+0x2c>
 800ab86:	e005      	b.n	800ab94 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800ab88:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <lwip_netconn_err_to_msg+0x54>)
 800ab8a:	e00e      	b.n	800abaa <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800ab8c:	4b0a      	ldr	r3, [pc, #40]	; (800abb8 <lwip_netconn_err_to_msg+0x58>)
 800ab8e:	e00c      	b.n	800abaa <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800ab90:	4b0a      	ldr	r3, [pc, #40]	; (800abbc <lwip_netconn_err_to_msg+0x5c>)
 800ab92:	e00a      	b.n	800abaa <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ab94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <lwip_netconn_err_to_msg+0x48>
 800ab9c:	4b08      	ldr	r3, [pc, #32]	; (800abc0 <lwip_netconn_err_to_msg+0x60>)
 800ab9e:	227d      	movs	r2, #125	; 0x7d
 800aba0:	4908      	ldr	r1, [pc, #32]	; (800abc4 <lwip_netconn_err_to_msg+0x64>)
 800aba2:	4809      	ldr	r0, [pc, #36]	; (800abc8 <lwip_netconn_err_to_msg+0x68>)
 800aba4:	f00d f8b6 	bl	8017d14 <iprintf>
      return NULL;
 800aba8:	2300      	movs	r3, #0
  }
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3708      	adds	r7, #8
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	0801ca44 	.word	0x0801ca44
 800abb8:	0801ca45 	.word	0x0801ca45
 800abbc:	0801ca46 	.word	0x0801ca46
 800abc0:	08019404 	.word	0x08019404
 800abc4:	0801947c 	.word	0x0801947c
 800abc8:	0801948c 	.word	0x0801948c

0800abcc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d105      	bne.n	800abe8 <lwip_netconn_is_err_msg+0x1c>
 800abdc:	4b12      	ldr	r3, [pc, #72]	; (800ac28 <lwip_netconn_is_err_msg+0x5c>)
 800abde:	2285      	movs	r2, #133	; 0x85
 800abe0:	4912      	ldr	r1, [pc, #72]	; (800ac2c <lwip_netconn_is_err_msg+0x60>)
 800abe2:	4813      	ldr	r0, [pc, #76]	; (800ac30 <lwip_netconn_is_err_msg+0x64>)
 800abe4:	f00d f896 	bl	8017d14 <iprintf>

  if (msg == &netconn_aborted) {
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	4a12      	ldr	r2, [pc, #72]	; (800ac34 <lwip_netconn_is_err_msg+0x68>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d104      	bne.n	800abfa <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	22f3      	movs	r2, #243	; 0xf3
 800abf4:	701a      	strb	r2, [r3, #0]
    return 1;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e012      	b.n	800ac20 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4a0e      	ldr	r2, [pc, #56]	; (800ac38 <lwip_netconn_is_err_msg+0x6c>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d104      	bne.n	800ac0c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	22f2      	movs	r2, #242	; 0xf2
 800ac06:	701a      	strb	r2, [r3, #0]
    return 1;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e009      	b.n	800ac20 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a0b      	ldr	r2, [pc, #44]	; (800ac3c <lwip_netconn_is_err_msg+0x70>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d104      	bne.n	800ac1e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	22f1      	movs	r2, #241	; 0xf1
 800ac18:	701a      	strb	r2, [r3, #0]
    return 1;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	e000      	b.n	800ac20 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ac1e:	2300      	movs	r3, #0
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3708      	adds	r7, #8
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	08019404 	.word	0x08019404
 800ac2c:	080194b4 	.word	0x080194b4
 800ac30:	0801948c 	.word	0x0801948c
 800ac34:	0801ca44 	.word	0x0801ca44
 800ac38:	0801ca45 	.word	0x0801ca45
 800ac3c:	0801ca46 	.word	0x0801ca46

0800ac40 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d105      	bne.n	800ac60 <recv_udp+0x20>
 800ac54:	4b34      	ldr	r3, [pc, #208]	; (800ad28 <recv_udp+0xe8>)
 800ac56:	22e5      	movs	r2, #229	; 0xe5
 800ac58:	4934      	ldr	r1, [pc, #208]	; (800ad2c <recv_udp+0xec>)
 800ac5a:	4835      	ldr	r0, [pc, #212]	; (800ad30 <recv_udp+0xf0>)
 800ac5c:	f00d f85a 	bl	8017d14 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d105      	bne.n	800ac72 <recv_udp+0x32>
 800ac66:	4b30      	ldr	r3, [pc, #192]	; (800ad28 <recv_udp+0xe8>)
 800ac68:	22e6      	movs	r2, #230	; 0xe6
 800ac6a:	4932      	ldr	r1, [pc, #200]	; (800ad34 <recv_udp+0xf4>)
 800ac6c:	4830      	ldr	r0, [pc, #192]	; (800ad30 <recv_udp+0xf0>)
 800ac6e:	f00d f851 	bl	8017d14 <iprintf>
  conn = (struct netconn *)arg;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ac76:	69fb      	ldr	r3, [r7, #28]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d103      	bne.n	800ac84 <recv_udp+0x44>
    pbuf_free(p);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f005 fb1f 	bl	80102c0 <pbuf_free>
    return;
 800ac82:	e04d      	b.n	800ad20 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d005      	beq.n	800ac9a <recv_udp+0x5a>
 800ac8e:	4b26      	ldr	r3, [pc, #152]	; (800ad28 <recv_udp+0xe8>)
 800ac90:	22ee      	movs	r2, #238	; 0xee
 800ac92:	4929      	ldr	r1, [pc, #164]	; (800ad38 <recv_udp+0xf8>)
 800ac94:	4826      	ldr	r0, [pc, #152]	; (800ad30 <recv_udp+0xf0>)
 800ac96:	f00d f83d 	bl	8017d14 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	3310      	adds	r3, #16
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f005 fe51 	bl	8010946 <sys_mbox_valid>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d103      	bne.n	800acb2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f005 fb08 	bl	80102c0 <pbuf_free>
    return;
 800acb0:	e036      	b.n	800ad20 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800acb2:	2006      	movs	r0, #6
 800acb4:	f004 fb9a 	bl	800f3ec <memp_malloc>
 800acb8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d103      	bne.n	800acc8 <recv_udp+0x88>
    pbuf_free(p);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f005 fafd 	bl	80102c0 <pbuf_free>
    return;
 800acc6:	e02b      	b.n	800ad20 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d002      	beq.n	800ace0 <recv_udp+0xa0>
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	e000      	b.n	800ace2 <recv_udp+0xa2>
 800ace0:	2300      	movs	r3, #0
 800ace2:	69ba      	ldr	r2, [r7, #24]
 800ace4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800acea:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	891b      	ldrh	r3, [r3, #8]
 800acf0:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	3310      	adds	r3, #16
 800acf6:	69b9      	ldr	r1, [r7, #24]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f005 fdaf 	bl	801085c <sys_mbox_trypost>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d003      	beq.n	800ad0c <recv_udp+0xcc>
    netbuf_delete(buf);
 800ad04:	69b8      	ldr	r0, [r7, #24]
 800ad06:	f004 fc11 	bl	800f52c <netbuf_delete>
    return;
 800ad0a:	e009      	b.n	800ad20 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <recv_udp+0xe0>
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	8afa      	ldrh	r2, [r7, #22]
 800ad1a:	2100      	movs	r1, #0
 800ad1c:	69f8      	ldr	r0, [r7, #28]
 800ad1e:	4798      	blx	r3
  }
}
 800ad20:	3720      	adds	r7, #32
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	08019404 	.word	0x08019404
 800ad2c:	080194c0 	.word	0x080194c0
 800ad30:	0801948c 	.word	0x0801948c
 800ad34:	080194e4 	.word	0x080194e4
 800ad38:	08019504 	.word	0x08019504

0800ad3c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d106      	bne.n	800ad5e <recv_tcp+0x22>
 800ad50:	4b36      	ldr	r3, [pc, #216]	; (800ae2c <recv_tcp+0xf0>)
 800ad52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ad56:	4936      	ldr	r1, [pc, #216]	; (800ae30 <recv_tcp+0xf4>)
 800ad58:	4836      	ldr	r0, [pc, #216]	; (800ae34 <recv_tcp+0xf8>)
 800ad5a:	f00c ffdb 	bl	8017d14 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d106      	bne.n	800ad72 <recv_tcp+0x36>
 800ad64:	4b31      	ldr	r3, [pc, #196]	; (800ae2c <recv_tcp+0xf0>)
 800ad66:	f240 122d 	movw	r2, #301	; 0x12d
 800ad6a:	4933      	ldr	r1, [pc, #204]	; (800ae38 <recv_tcp+0xfc>)
 800ad6c:	4831      	ldr	r0, [pc, #196]	; (800ae34 <recv_tcp+0xf8>)
 800ad6e:	f00c ffd1 	bl	8017d14 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800ad72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d006      	beq.n	800ad88 <recv_tcp+0x4c>
 800ad7a:	4b2c      	ldr	r3, [pc, #176]	; (800ae2c <recv_tcp+0xf0>)
 800ad7c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800ad80:	492e      	ldr	r1, [pc, #184]	; (800ae3c <recv_tcp+0x100>)
 800ad82:	482c      	ldr	r0, [pc, #176]	; (800ae34 <recv_tcp+0xf8>)
 800ad84:	f00c ffc6 	bl	8017d14 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d102      	bne.n	800ad98 <recv_tcp+0x5c>
    return ERR_VAL;
 800ad92:	f06f 0305 	mvn.w	r3, #5
 800ad96:	e045      	b.n	800ae24 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d006      	beq.n	800adb0 <recv_tcp+0x74>
 800ada2:	4b22      	ldr	r3, [pc, #136]	; (800ae2c <recv_tcp+0xf0>)
 800ada4:	f240 1235 	movw	r2, #309	; 0x135
 800ada8:	4925      	ldr	r1, [pc, #148]	; (800ae40 <recv_tcp+0x104>)
 800adaa:	4822      	ldr	r0, [pc, #136]	; (800ae34 <recv_tcp+0xf8>)
 800adac:	f00c ffb2 	bl	8017d14 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	3310      	adds	r3, #16
 800adb4:	4618      	mov	r0, r3
 800adb6:	f005 fdc6 	bl	8010946 <sys_mbox_valid>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10d      	bne.n	800addc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d008      	beq.n	800add8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	891b      	ldrh	r3, [r3, #8]
 800adca:	4619      	mov	r1, r3
 800adcc:	68b8      	ldr	r0, [r7, #8]
 800adce:	f006 fc11 	bl	80115f4 <tcp_recved>
      pbuf_free(p);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f005 fa74 	bl	80102c0 <pbuf_free>
    }
    return ERR_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	e023      	b.n	800ae24 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d005      	beq.n	800adee <recv_tcp+0xb2>
    msg = p;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	891b      	ldrh	r3, [r3, #8]
 800adea:	83fb      	strh	r3, [r7, #30]
 800adec:	e003      	b.n	800adf6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800adee:	4b15      	ldr	r3, [pc, #84]	; (800ae44 <recv_tcp+0x108>)
 800adf0:	61bb      	str	r3, [r7, #24]
    len = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	3310      	adds	r3, #16
 800adfa:	69b9      	ldr	r1, [r7, #24]
 800adfc:	4618      	mov	r0, r3
 800adfe:	f005 fd2d 	bl	801085c <sys_mbox_trypost>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d002      	beq.n	800ae0e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800ae08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ae0c:	e00a      	b.n	800ae24 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <recv_tcp+0xe6>
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	8bfa      	ldrh	r2, [r7, #30]
 800ae1c:	2100      	movs	r1, #0
 800ae1e:	6978      	ldr	r0, [r7, #20]
 800ae20:	4798      	blx	r3
  }

  return ERR_OK;
 800ae22:	2300      	movs	r3, #0
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3720      	adds	r7, #32
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	08019404 	.word	0x08019404
 800ae30:	08019524 	.word	0x08019524
 800ae34:	0801948c 	.word	0x0801948c
 800ae38:	08019548 	.word	0x08019548
 800ae3c:	08019568 	.word	0x08019568
 800ae40:	08019580 	.word	0x08019580
 800ae44:	0801ca46 	.word	0x0801ca46

0800ae48 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <poll_tcp+0x22>
 800ae5c:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <poll_tcp+0xc0>)
 800ae5e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800ae62:	492a      	ldr	r1, [pc, #168]	; (800af0c <poll_tcp+0xc4>)
 800ae64:	482a      	ldr	r0, [pc, #168]	; (800af10 <poll_tcp+0xc8>)
 800ae66:	f00c ff55 	bl	8017d14 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	785b      	ldrb	r3, [r3, #1]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d104      	bne.n	800ae7c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ae72:	2101      	movs	r1, #1
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 ff69 	bl	800bd4c <lwip_netconn_do_writemore>
 800ae7a:	e016      	b.n	800aeaa <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	785b      	ldrb	r3, [r3, #1]
 800ae80:	2b04      	cmp	r3, #4
 800ae82:	d112      	bne.n	800aeaa <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	6a1b      	ldr	r3, [r3, #32]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <poll_tcp+0x5a>
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6a1b      	ldr	r3, [r3, #32]
 800ae90:	7a5b      	ldrb	r3, [r3, #9]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	7a5a      	ldrb	r2, [r3, #9]
 800ae9c:	3a01      	subs	r2, #1
 800ae9e:	b2d2      	uxtb	r2, r2
 800aea0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800aea2:	2101      	movs	r1, #1
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 fbfb 	bl	800b6a0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	7f1b      	ldrb	r3, [r3, #28]
 800aeae:	f003 0310 	and.w	r3, r3, #16
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d022      	beq.n	800aefc <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d01e      	beq.n	800aefc <poll_tcp+0xb4>
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aec6:	f640 3269 	movw	r2, #2921	; 0xb69
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d916      	bls.n	800aefc <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800aed6:	2b07      	cmp	r3, #7
 800aed8:	d810      	bhi.n	800aefc <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	7f1b      	ldrb	r3, [r3, #28]
 800aede:	f023 0310 	bic.w	r3, r3, #16
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d005      	beq.n	800aefc <poll_tcp+0xb4>
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	2200      	movs	r2, #0
 800aef6:	2102      	movs	r1, #2
 800aef8:	68f8      	ldr	r0, [r7, #12]
 800aefa:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800aefc:	2300      	movs	r3, #0
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	08019404 	.word	0x08019404
 800af0c:	080195a0 	.word	0x080195a0
 800af10:	0801948c 	.word	0x0801948c

0800af14 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	60f8      	str	r0, [r7, #12]
 800af1c:	60b9      	str	r1, [r7, #8]
 800af1e:	4613      	mov	r3, r2
 800af20:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d106      	bne.n	800af3a <sent_tcp+0x26>
 800af2c:	4b21      	ldr	r3, [pc, #132]	; (800afb4 <sent_tcp+0xa0>)
 800af2e:	f240 1293 	movw	r2, #403	; 0x193
 800af32:	4921      	ldr	r1, [pc, #132]	; (800afb8 <sent_tcp+0xa4>)
 800af34:	4821      	ldr	r0, [pc, #132]	; (800afbc <sent_tcp+0xa8>)
 800af36:	f00c feed 	bl	8017d14 <iprintf>

  if (conn) {
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d033      	beq.n	800afa8 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	785b      	ldrb	r3, [r3, #1]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d104      	bne.n	800af52 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800af48:	2101      	movs	r1, #1
 800af4a:	6978      	ldr	r0, [r7, #20]
 800af4c:	f000 fefe 	bl	800bd4c <lwip_netconn_do_writemore>
 800af50:	e007      	b.n	800af62 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	785b      	ldrb	r3, [r3, #1]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d103      	bne.n	800af62 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800af5a:	2101      	movs	r1, #1
 800af5c:	6978      	ldr	r0, [r7, #20]
 800af5e:	f000 fb9f 	bl	800b6a0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d01e      	beq.n	800afa8 <sent_tcp+0x94>
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af72:	f640 3269 	movw	r2, #2921	; 0xb69
 800af76:	4293      	cmp	r3, r2
 800af78:	d916      	bls.n	800afa8 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800af82:	2b07      	cmp	r3, #7
 800af84:	d810      	bhi.n	800afa8 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	7f1b      	ldrb	r3, [r3, #28]
 800af8a:	f023 0310 	bic.w	r3, r3, #16
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d005      	beq.n	800afa8 <sent_tcp+0x94>
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa0:	88fa      	ldrh	r2, [r7, #6]
 800afa2:	2102      	movs	r1, #2
 800afa4:	6978      	ldr	r0, [r7, #20]
 800afa6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3718      	adds	r7, #24
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	08019404 	.word	0x08019404
 800afb8:	080195a0 	.word	0x080195a0
 800afbc:	0801948c 	.word	0x0801948c

0800afc0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d106      	bne.n	800afe4 <err_tcp+0x24>
 800afd6:	4b5f      	ldr	r3, [pc, #380]	; (800b154 <err_tcp+0x194>)
 800afd8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800afdc:	495e      	ldr	r1, [pc, #376]	; (800b158 <err_tcp+0x198>)
 800afde:	485f      	ldr	r0, [pc, #380]	; (800b15c <err_tcp+0x19c>)
 800afe0:	f00c fe98 	bl	8017d14 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800afe4:	f005 fdca 	bl	8010b7c <sys_arch_protect>
 800afe8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	2200      	movs	r2, #0
 800afee:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	7f1b      	ldrb	r3, [r3, #28]
 800affa:	f043 0301 	orr.w	r3, r3, #1
 800affe:	b2da      	uxtb	r2, r3
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	785b      	ldrb	r3, [r3, #1]
 800b008:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	2200      	movs	r2, #0
 800b00e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800b010:	69b8      	ldr	r0, [r7, #24]
 800b012:	f005 fdc1 	bl	8010b98 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d005      	beq.n	800b02a <err_tcp+0x6a>
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b022:	2200      	movs	r2, #0
 800b024:	2104      	movs	r1, #4
 800b026:	69f8      	ldr	r0, [r7, #28]
 800b028:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d005      	beq.n	800b03e <err_tcp+0x7e>
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b036:	2200      	movs	r2, #0
 800b038:	2100      	movs	r1, #0
 800b03a:	69f8      	ldr	r0, [r7, #28]
 800b03c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	2b00      	cmp	r3, #0
 800b044:	d005      	beq.n	800b052 <err_tcp+0x92>
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	2200      	movs	r2, #0
 800b04c:	2102      	movs	r1, #2
 800b04e:	69f8      	ldr	r0, [r7, #28]
 800b050:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800b052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b056:	4618      	mov	r0, r3
 800b058:	f7ff fd82 	bl	800ab60 <lwip_netconn_err_to_msg>
 800b05c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	3310      	adds	r3, #16
 800b062:	4618      	mov	r0, r3
 800b064:	f005 fc6f 	bl	8010946 <sys_mbox_valid>
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d005      	beq.n	800b07a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	3310      	adds	r3, #16
 800b072:	6939      	ldr	r1, [r7, #16]
 800b074:	4618      	mov	r0, r3
 800b076:	f005 fbf1 	bl	801085c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	3314      	adds	r3, #20
 800b07e:	4618      	mov	r0, r3
 800b080:	f005 fc61 	bl	8010946 <sys_mbox_valid>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d005      	beq.n	800b096 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	3314      	adds	r3, #20
 800b08e:	6939      	ldr	r1, [r7, #16]
 800b090:	4618      	mov	r0, r3
 800b092:	f005 fbe3 	bl	801085c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d005      	beq.n	800b0a8 <err_tcp+0xe8>
 800b09c:	7dfb      	ldrb	r3, [r7, #23]
 800b09e:	2b04      	cmp	r3, #4
 800b0a0:	d002      	beq.n	800b0a8 <err_tcp+0xe8>
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	2b03      	cmp	r3, #3
 800b0a6:	d143      	bne.n	800b130 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800b0a8:	69fb      	ldr	r3, [r7, #28]
 800b0aa:	7f1b      	ldrb	r3, [r3, #28]
 800b0ac:	f003 0304 	and.w	r3, r3, #4
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	bf14      	ite	ne
 800b0b4:	2301      	movne	r3, #1
 800b0b6:	2300      	moveq	r3, #0
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	7f1b      	ldrb	r3, [r3, #28]
 800b0c0:	f023 0304 	bic.w	r3, r3, #4
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	69fb      	ldr	r3, [r7, #28]
 800b0c8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d13b      	bne.n	800b148 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d106      	bne.n	800b0e6 <err_tcp+0x126>
 800b0d8:	4b1e      	ldr	r3, [pc, #120]	; (800b154 <err_tcp+0x194>)
 800b0da:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b0de:	4920      	ldr	r1, [pc, #128]	; (800b160 <err_tcp+0x1a0>)
 800b0e0:	481e      	ldr	r0, [pc, #120]	; (800b15c <err_tcp+0x19c>)
 800b0e2:	f00c fe17 	bl	8017d14 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800b0e6:	7dfb      	ldrb	r3, [r7, #23]
 800b0e8:	2b04      	cmp	r3, #4
 800b0ea:	d104      	bne.n	800b0f6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	6a1b      	ldr	r3, [r3, #32]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	711a      	strb	r2, [r3, #4]
 800b0f4:	e003      	b.n	800b0fe <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	78fa      	ldrb	r2, [r7, #3]
 800b0fc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	6a1b      	ldr	r3, [r3, #32]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800b108:	68b8      	ldr	r0, [r7, #8]
 800b10a:	f005 fcad 	bl	8010a68 <sys_sem_valid>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d106      	bne.n	800b122 <err_tcp+0x162>
 800b114:	4b0f      	ldr	r3, [pc, #60]	; (800b154 <err_tcp+0x194>)
 800b116:	f240 12ef 	movw	r2, #495	; 0x1ef
 800b11a:	4912      	ldr	r1, [pc, #72]	; (800b164 <err_tcp+0x1a4>)
 800b11c:	480f      	ldr	r0, [pc, #60]	; (800b15c <err_tcp+0x19c>)
 800b11e:	f00c fdf9 	bl	8017d14 <iprintf>
      conn->current_msg = NULL;
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	2200      	movs	r2, #0
 800b126:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800b128:	68b8      	ldr	r0, [r7, #8]
 800b12a:	f005 fc83 	bl	8010a34 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800b12e:	e00b      	b.n	800b148 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	6a1b      	ldr	r3, [r3, #32]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d008      	beq.n	800b14a <err_tcp+0x18a>
 800b138:	4b06      	ldr	r3, [pc, #24]	; (800b154 <err_tcp+0x194>)
 800b13a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b13e:	490a      	ldr	r1, [pc, #40]	; (800b168 <err_tcp+0x1a8>)
 800b140:	4806      	ldr	r0, [pc, #24]	; (800b15c <err_tcp+0x19c>)
 800b142:	f00c fde7 	bl	8017d14 <iprintf>
  }
}
 800b146:	e000      	b.n	800b14a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800b148:	bf00      	nop
}
 800b14a:	bf00      	nop
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	08019404 	.word	0x08019404
 800b158:	080195a0 	.word	0x080195a0
 800b15c:	0801948c 	.word	0x0801948c
 800b160:	080195b0 	.word	0x080195b0
 800b164:	080195cc 	.word	0x080195cc
 800b168:	080195e8 	.word	0x080195e8

0800b16c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800b17a:	6879      	ldr	r1, [r7, #4]
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f007 f903 	bl	8012388 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800b182:	490a      	ldr	r1, [pc, #40]	; (800b1ac <setup_tcp+0x40>)
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f007 f911 	bl	80123ac <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800b18a:	4909      	ldr	r1, [pc, #36]	; (800b1b0 <setup_tcp+0x44>)
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f007 f92f 	bl	80123f0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800b192:	2202      	movs	r2, #2
 800b194:	4907      	ldr	r1, [pc, #28]	; (800b1b4 <setup_tcp+0x48>)
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f007 f986 	bl	80124a8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800b19c:	4906      	ldr	r1, [pc, #24]	; (800b1b8 <setup_tcp+0x4c>)
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f007 f948 	bl	8012434 <tcp_err>
}
 800b1a4:	bf00      	nop
 800b1a6:	3710      	adds	r7, #16
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	0800ad3d 	.word	0x0800ad3d
 800b1b0:	0800af15 	.word	0x0800af15
 800b1b4:	0800ae49 	.word	0x0800ae49
 800b1b8:	0800afc1 	.word	0x0800afc1

0800b1bc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800b1bc:	b590      	push	{r4, r7, lr}
 800b1be:	b089      	sub	sp, #36	; 0x24
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	60b9      	str	r1, [r7, #8]
 800b1c6:	4613      	mov	r3, r2
 800b1c8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d102      	bne.n	800b1da <accept_function+0x1e>
    return ERR_VAL;
 800b1d4:	f06f 0305 	mvn.w	r3, #5
 800b1d8:	e0a1      	b.n	800b31e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	3314      	adds	r3, #20
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f005 fbb1 	bl	8010946 <sys_mbox_valid>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d102      	bne.n	800b1f0 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800b1ea:	f06f 0305 	mvn.w	r3, #5
 800b1ee:	e096      	b.n	800b31e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d11b      	bne.n	800b22e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	f103 0414 	add.w	r4, r3, #20
 800b1fc:	f06f 000c 	mvn.w	r0, #12
 800b200:	f7ff fcae 	bl	800ab60 <lwip_netconn_err_to_msg>
 800b204:	4603      	mov	r3, r0
 800b206:	4619      	mov	r1, r3
 800b208:	4620      	mov	r0, r4
 800b20a:	f005 fb27 	bl	801085c <sys_mbox_trypost>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d109      	bne.n	800b228 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b214:	69fb      	ldr	r3, [r7, #28]
 800b216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d005      	beq.n	800b228 <accept_function+0x6c>
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	2200      	movs	r2, #0
 800b222:	2100      	movs	r1, #0
 800b224:	69f8      	ldr	r0, [r7, #28]
 800b226:	4798      	blx	r3
    }
    return ERR_VAL;
 800b228:	f06f 0305 	mvn.w	r3, #5
 800b22c:	e077      	b.n	800b31e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800b22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <accept_function+0x88>
 800b236:	4b3c      	ldr	r3, [pc, #240]	; (800b328 <accept_function+0x16c>)
 800b238:	f240 222a 	movw	r2, #554	; 0x22a
 800b23c:	493b      	ldr	r1, [pc, #236]	; (800b32c <accept_function+0x170>)
 800b23e:	483c      	ldr	r0, [pc, #240]	; (800b330 <accept_function+0x174>)
 800b240:	f00c fd68 	bl	8017d14 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	781a      	ldrb	r2, [r3, #0]
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24c:	4619      	mov	r1, r3
 800b24e:	4610      	mov	r0, r2
 800b250:	f000 f8f0 	bl	800b434 <netconn_alloc>
 800b254:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d11b      	bne.n	800b294 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	f103 0414 	add.w	r4, r3, #20
 800b262:	f06f 000c 	mvn.w	r0, #12
 800b266:	f7ff fc7b 	bl	800ab60 <lwip_netconn_err_to_msg>
 800b26a:	4603      	mov	r3, r0
 800b26c:	4619      	mov	r1, r3
 800b26e:	4620      	mov	r0, r4
 800b270:	f005 faf4 	bl	801085c <sys_mbox_trypost>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d109      	bne.n	800b28e <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d005      	beq.n	800b28e <accept_function+0xd2>
 800b282:	69fb      	ldr	r3, [r7, #28]
 800b284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b286:	2200      	movs	r2, #0
 800b288:	2100      	movs	r1, #0
 800b28a:	69f8      	ldr	r0, [r7, #28]
 800b28c:	4798      	blx	r3
    }
    return ERR_MEM;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b292:	e044      	b.n	800b31e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800b29a:	69b8      	ldr	r0, [r7, #24]
 800b29c:	f7ff ff66 	bl	800b16c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	3314      	adds	r3, #20
 800b2a4:	69b9      	ldr	r1, [r7, #24]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f005 fad8 	bl	801085c <sys_mbox_trypost>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d02a      	beq.n	800b308 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	6978      	ldr	r0, [r7, #20]
 800b2bc:	f007 f864 	bl	8012388 <tcp_arg>
    tcp_recv(pcb, NULL);
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	6978      	ldr	r0, [r7, #20]
 800b2c4:	f007 f872 	bl	80123ac <tcp_recv>
    tcp_sent(pcb, NULL);
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	6978      	ldr	r0, [r7, #20]
 800b2cc:	f007 f890 	bl	80123f0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2100      	movs	r1, #0
 800b2d4:	6978      	ldr	r0, [r7, #20]
 800b2d6:	f007 f8e7 	bl	80124a8 <tcp_poll>
    tcp_err(pcb, NULL);
 800b2da:	2100      	movs	r1, #0
 800b2dc:	6978      	ldr	r0, [r7, #20]
 800b2de:	f007 f8a9 	bl	8012434 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800b2e8:	69bb      	ldr	r3, [r7, #24]
 800b2ea:	3310      	adds	r3, #16
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f005 faa3 	bl	8010838 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	3310      	adds	r3, #16
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f005 fb36 	bl	8010968 <sys_mbox_set_invalid>
    netconn_free(newconn);
 800b2fc:	69b8      	ldr	r0, [r7, #24]
 800b2fe:	f000 f907 	bl	800b510 <netconn_free>
    return ERR_MEM;
 800b302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b306:	e00a      	b.n	800b31e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d005      	beq.n	800b31c <accept_function+0x160>
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b314:	2200      	movs	r2, #0
 800b316:	2100      	movs	r1, #0
 800b318:	69f8      	ldr	r0, [r7, #28]
 800b31a:	4798      	blx	r3
  }

  return ERR_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3724      	adds	r7, #36	; 0x24
 800b322:	46bd      	mov	sp, r7
 800b324:	bd90      	pop	{r4, r7, pc}
 800b326:	bf00      	nop
 800b328:	08019404 	.word	0x08019404
 800b32c:	08019604 	.word	0x08019604
 800b330:	0801948c 	.word	0x0801948c

0800b334 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800b334:	b590      	push	{r4, r7, lr}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800b33c:	2300      	movs	r3, #0
 800b33e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d006      	beq.n	800b358 <pcb_new+0x24>
 800b34a:	4b2b      	ldr	r3, [pc, #172]	; (800b3f8 <pcb_new+0xc4>)
 800b34c:	f240 2265 	movw	r2, #613	; 0x265
 800b350:	492a      	ldr	r1, [pc, #168]	; (800b3fc <pcb_new+0xc8>)
 800b352:	482b      	ldr	r0, [pc, #172]	; (800b400 <pcb_new+0xcc>)
 800b354:	f00c fcde 	bl	8017d14 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b362:	2b10      	cmp	r3, #16
 800b364:	d022      	beq.n	800b3ac <pcb_new+0x78>
 800b366:	2b20      	cmp	r3, #32
 800b368:	d133      	bne.n	800b3d2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681c      	ldr	r4, [r3, #0]
 800b36e:	7bfb      	ldrb	r3, [r7, #15]
 800b370:	4618      	mov	r0, r3
 800b372:	f00c faa0 	bl	80178b6 <udp_new_ip_type>
 800b376:	4603      	mov	r3, r0
 800b378:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d02a      	beq.n	800b3da <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	2b22      	cmp	r3, #34	; 0x22
 800b38c:	d104      	bne.n	800b398 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	2201      	movs	r2, #1
 800b396:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6858      	ldr	r0, [r3, #4]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	4917      	ldr	r1, [pc, #92]	; (800b404 <pcb_new+0xd0>)
 800b3a6:	f00c fa0d 	bl	80177c4 <udp_recv>
      }
      break;
 800b3aa:	e016      	b.n	800b3da <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681c      	ldr	r4, [r3, #0]
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f006 ffda 	bl	801236c <tcp_new_ip_type>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d00b      	beq.n	800b3de <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff fece 	bl	800b16c <setup_tcp>
      }
      break;
 800b3d0:	e005      	b.n	800b3de <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	22fa      	movs	r2, #250	; 0xfa
 800b3d6:	711a      	strb	r2, [r3, #4]
      return;
 800b3d8:	e00a      	b.n	800b3f0 <pcb_new+0xbc>
      break;
 800b3da:	bf00      	nop
 800b3dc:	e000      	b.n	800b3e0 <pcb_new+0xac>
      break;
 800b3de:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d102      	bne.n	800b3f0 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	22ff      	movs	r2, #255	; 0xff
 800b3ee:	711a      	strb	r2, [r3, #4]
  }
}
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd90      	pop	{r4, r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	08019404 	.word	0x08019404
 800b3fc:	0801962c 	.word	0x0801962c
 800b400:	0801948c 	.word	0x0801948c
 800b404:	0800ac41 	.word	0x0800ac41

0800b408 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800b424:	68f8      	ldr	r0, [r7, #12]
 800b426:	f7ff ff85 	bl	800b334 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800b42a:	bf00      	nop
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b086      	sub	sp, #24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	4603      	mov	r3, r0
 800b43c:	6039      	str	r1, [r7, #0]
 800b43e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800b444:	2007      	movs	r0, #7
 800b446:	f003 ffd1 	bl	800f3ec <memp_malloc>
 800b44a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <netconn_alloc+0x22>
    return NULL;
 800b452:	2300      	movs	r3, #0
 800b454:	e052      	b.n	800b4fc <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	79fa      	ldrb	r2, [r7, #7]
 800b460:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	2200      	movs	r2, #0
 800b466:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b46e:	2b10      	cmp	r3, #16
 800b470:	d004      	beq.n	800b47c <netconn_alloc+0x48>
 800b472:	2b20      	cmp	r3, #32
 800b474:	d105      	bne.n	800b482 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800b476:	2306      	movs	r3, #6
 800b478:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800b47a:	e00a      	b.n	800b492 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800b47c:	2306      	movs	r3, #6
 800b47e:	617b      	str	r3, [r7, #20]
      break;
 800b480:	e007      	b.n	800b492 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800b482:	4b20      	ldr	r3, [pc, #128]	; (800b504 <netconn_alloc+0xd0>)
 800b484:	f240 22e5 	movw	r2, #741	; 0x2e5
 800b488:	491f      	ldr	r1, [pc, #124]	; (800b508 <netconn_alloc+0xd4>)
 800b48a:	4820      	ldr	r0, [pc, #128]	; (800b50c <netconn_alloc+0xd8>)
 800b48c:	f00c fc42 	bl	8017d14 <iprintf>
      goto free_and_return;
 800b490:	e02f      	b.n	800b4f2 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3310      	adds	r3, #16
 800b496:	6979      	ldr	r1, [r7, #20]
 800b498:	4618      	mov	r0, r3
 800b49a:	f005 f9ab 	bl	80107f4 <sys_mbox_new>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d125      	bne.n	800b4f0 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	330c      	adds	r3, #12
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f005 fa69 	bl	8010982 <sys_sem_new>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d005      	beq.n	800b4c2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	3310      	adds	r3, #16
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f005 f9bc 	bl	8010838 <sys_mbox_free>
    goto free_and_return;
 800b4c0:	e017      	b.n	800b4f2 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3314      	adds	r3, #20
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f005 fa4e 	bl	8010968 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4d8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	683a      	ldr	r2, [r7, #0]
 800b4de:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	7cfa      	ldrb	r2, [r7, #19]
 800b4ea:	771a      	strb	r2, [r3, #28]
  return conn;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	e005      	b.n	800b4fc <netconn_alloc+0xc8>
    goto free_and_return;
 800b4f0:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800b4f2:	68f9      	ldr	r1, [r7, #12]
 800b4f4:	2007      	movs	r0, #7
 800b4f6:	f003 ffef 	bl	800f4d8 <memp_free>
  return NULL;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	08019404 	.word	0x08019404
 800b508:	0801964c 	.word	0x0801964c
 800b50c:	0801948c 	.word	0x0801948c

0800b510 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	685b      	ldr	r3, [r3, #4]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d006      	beq.n	800b52e <netconn_free+0x1e>
 800b520:	4b1b      	ldr	r3, [pc, #108]	; (800b590 <netconn_free+0x80>)
 800b522:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b526:	491b      	ldr	r1, [pc, #108]	; (800b594 <netconn_free+0x84>)
 800b528:	481b      	ldr	r0, [pc, #108]	; (800b598 <netconn_free+0x88>)
 800b52a:	f00c fbf3 	bl	8017d14 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3310      	adds	r3, #16
 800b532:	4618      	mov	r0, r3
 800b534:	f005 fa07 	bl	8010946 <sys_mbox_valid>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d006      	beq.n	800b54c <netconn_free+0x3c>
 800b53e:	4b14      	ldr	r3, [pc, #80]	; (800b590 <netconn_free+0x80>)
 800b540:	f240 3223 	movw	r2, #803	; 0x323
 800b544:	4915      	ldr	r1, [pc, #84]	; (800b59c <netconn_free+0x8c>)
 800b546:	4814      	ldr	r0, [pc, #80]	; (800b598 <netconn_free+0x88>)
 800b548:	f00c fbe4 	bl	8017d14 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	3314      	adds	r3, #20
 800b550:	4618      	mov	r0, r3
 800b552:	f005 f9f8 	bl	8010946 <sys_mbox_valid>
 800b556:	4603      	mov	r3, r0
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d006      	beq.n	800b56a <netconn_free+0x5a>
 800b55c:	4b0c      	ldr	r3, [pc, #48]	; (800b590 <netconn_free+0x80>)
 800b55e:	f240 3226 	movw	r2, #806	; 0x326
 800b562:	490f      	ldr	r1, [pc, #60]	; (800b5a0 <netconn_free+0x90>)
 800b564:	480c      	ldr	r0, [pc, #48]	; (800b598 <netconn_free+0x88>)
 800b566:	f00c fbd5 	bl	8017d14 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	330c      	adds	r3, #12
 800b56e:	4618      	mov	r0, r3
 800b570:	f005 fa6d 	bl	8010a4e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	330c      	adds	r3, #12
 800b578:	4618      	mov	r0, r3
 800b57a:	f005 fa86 	bl	8010a8a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800b57e:	6879      	ldr	r1, [r7, #4]
 800b580:	2007      	movs	r0, #7
 800b582:	f003 ffa9 	bl	800f4d8 <memp_free>
}
 800b586:	bf00      	nop
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	08019404 	.word	0x08019404
 800b594:	08019674 	.word	0x08019674
 800b598:	0801948c 	.word	0x0801948c
 800b59c:	080196a4 	.word	0x080196a4
 800b5a0:	080196e0 	.word	0x080196e0

0800b5a4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b086      	sub	sp, #24
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	3310      	adds	r3, #16
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f005 f9c8 	bl	8010946 <sys_mbox_valid>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d02f      	beq.n	800b61c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b5bc:	e018      	b.n	800b5f0 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5c6:	2b10      	cmp	r3, #16
 800b5c8:	d10e      	bne.n	800b5e8 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f107 020f 	add.w	r2, r7, #15
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff fafa 	bl	800abcc <lwip_netconn_is_err_msg>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d108      	bne.n	800b5f0 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f004 fe6d 	bl	80102c0 <pbuf_free>
 800b5e6:	e003      	b.n	800b5f0 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f003 ff9e 	bl	800f52c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	3310      	adds	r3, #16
 800b5f4:	f107 0210 	add.w	r2, r7, #16
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f005 f987 	bl	801090e <sys_arch_mbox_tryfetch>
 800b600:	4603      	mov	r3, r0
 800b602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b606:	d1da      	bne.n	800b5be <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3310      	adds	r3, #16
 800b60c:	4618      	mov	r0, r3
 800b60e:	f005 f913 	bl	8010838 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	3310      	adds	r3, #16
 800b616:	4618      	mov	r0, r3
 800b618:	f005 f9a6 	bl	8010968 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	3314      	adds	r3, #20
 800b620:	4618      	mov	r0, r3
 800b622:	f005 f990 	bl	8010946 <sys_mbox_valid>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d034      	beq.n	800b696 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b62c:	e01d      	b.n	800b66a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	f107 020e 	add.w	r2, r7, #14
 800b634:	4611      	mov	r1, r2
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff fac8 	bl	800abcc <lwip_netconn_is_err_msg>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d113      	bne.n	800b66a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800b646:	6978      	ldr	r0, [r7, #20]
 800b648:	f7ff ffac 	bl	800b5a4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d007      	beq.n	800b664 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	4618      	mov	r0, r3
 800b65a:	f005 fe03 	bl	8011264 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	2200      	movs	r2, #0
 800b662:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800b664:	6978      	ldr	r0, [r7, #20]
 800b666:	f7ff ff53 	bl	800b510 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3314      	adds	r3, #20
 800b66e:	f107 0210 	add.w	r2, r7, #16
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f005 f94a 	bl	801090e <sys_arch_mbox_tryfetch>
 800b67a:	4603      	mov	r3, r0
 800b67c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b680:	d1d5      	bne.n	800b62e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	3314      	adds	r3, #20
 800b686:	4618      	mov	r0, r3
 800b688:	f005 f8d6 	bl	8010838 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	3314      	adds	r3, #20
 800b690:	4618      	mov	r0, r3
 800b692:	f005 f969 	bl	8010968 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800b696:	bf00      	nop
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	460b      	mov	r3, r1
 800b6aa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d106      	bne.n	800b6c4 <lwip_netconn_do_close_internal+0x24>
 800b6b6:	4b87      	ldr	r3, [pc, #540]	; (800b8d4 <lwip_netconn_do_close_internal+0x234>)
 800b6b8:	f240 32a2 	movw	r2, #930	; 0x3a2
 800b6bc:	4986      	ldr	r1, [pc, #536]	; (800b8d8 <lwip_netconn_do_close_internal+0x238>)
 800b6be:	4887      	ldr	r0, [pc, #540]	; (800b8dc <lwip_netconn_do_close_internal+0x23c>)
 800b6c0:	f00c fb28 	bl	8017d14 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b6cc:	2b10      	cmp	r3, #16
 800b6ce:	d006      	beq.n	800b6de <lwip_netconn_do_close_internal+0x3e>
 800b6d0:	4b80      	ldr	r3, [pc, #512]	; (800b8d4 <lwip_netconn_do_close_internal+0x234>)
 800b6d2:	f240 32a3 	movw	r2, #931	; 0x3a3
 800b6d6:	4982      	ldr	r1, [pc, #520]	; (800b8e0 <lwip_netconn_do_close_internal+0x240>)
 800b6d8:	4880      	ldr	r0, [pc, #512]	; (800b8dc <lwip_netconn_do_close_internal+0x23c>)
 800b6da:	f00c fb1b 	bl	8017d14 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	785b      	ldrb	r3, [r3, #1]
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d006      	beq.n	800b6f4 <lwip_netconn_do_close_internal+0x54>
 800b6e6:	4b7b      	ldr	r3, [pc, #492]	; (800b8d4 <lwip_netconn_do_close_internal+0x234>)
 800b6e8:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800b6ec:	497d      	ldr	r1, [pc, #500]	; (800b8e4 <lwip_netconn_do_close_internal+0x244>)
 800b6ee:	487b      	ldr	r0, [pc, #492]	; (800b8dc <lwip_netconn_do_close_internal+0x23c>)
 800b6f0:	f00c fb10 	bl	8017d14 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d106      	bne.n	800b70a <lwip_netconn_do_close_internal+0x6a>
 800b6fc:	4b75      	ldr	r3, [pc, #468]	; (800b8d4 <lwip_netconn_do_close_internal+0x234>)
 800b6fe:	f240 32a5 	movw	r2, #933	; 0x3a5
 800b702:	4979      	ldr	r1, [pc, #484]	; (800b8e8 <lwip_netconn_do_close_internal+0x248>)
 800b704:	4875      	ldr	r0, [pc, #468]	; (800b8dc <lwip_netconn_do_close_internal+0x23c>)
 800b706:	f00c fb05 	bl	8017d14 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d106      	bne.n	800b720 <lwip_netconn_do_close_internal+0x80>
 800b712:	4b70      	ldr	r3, [pc, #448]	; (800b8d4 <lwip_netconn_do_close_internal+0x234>)
 800b714:	f240 32a6 	movw	r2, #934	; 0x3a6
 800b718:	4974      	ldr	r1, [pc, #464]	; (800b8ec <lwip_netconn_do_close_internal+0x24c>)
 800b71a:	4870      	ldr	r0, [pc, #448]	; (800b8dc <lwip_netconn_do_close_internal+0x23c>)
 800b71c:	f00c fafa 	bl	8017d14 <iprintf>

  tpcb = conn->pcb.tcp;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6a1b      	ldr	r3, [r3, #32]
 800b72a:	7a1b      	ldrb	r3, [r3, #8]
 800b72c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	f003 0301 	and.w	r3, r3, #1
 800b734:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	f003 0302 	and.w	r3, r3, #2
 800b73c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	2b03      	cmp	r3, #3
 800b742:	d102      	bne.n	800b74a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800b744:	2301      	movs	r3, #1
 800b746:	75bb      	strb	r3, [r7, #22]
 800b748:	e01f      	b.n	800b78a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800b74a:	7bbb      	ldrb	r3, [r7, #14]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00e      	beq.n	800b76e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800b754:	2b05      	cmp	r3, #5
 800b756:	d007      	beq.n	800b768 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800b75c:	2b06      	cmp	r3, #6
 800b75e:	d003      	beq.n	800b768 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800b764:	2b08      	cmp	r3, #8
 800b766:	d102      	bne.n	800b76e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800b768:	2301      	movs	r3, #1
 800b76a:	75bb      	strb	r3, [r7, #22]
 800b76c:	e00d      	b.n	800b78a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800b76e:	7b7b      	ldrb	r3, [r7, #13]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d008      	beq.n	800b786 <lwip_netconn_do_close_internal+0xe6>
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	8b5b      	ldrh	r3, [r3, #26]
 800b778:	f003 0310 	and.w	r3, r3, #16
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800b780:	2301      	movs	r3, #1
 800b782:	75bb      	strb	r3, [r7, #22]
 800b784:	e001      	b.n	800b78a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800b786:	2300      	movs	r3, #0
 800b788:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800b78a:	7dbb      	ldrb	r3, [r7, #22]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800b790:	2100      	movs	r1, #0
 800b792:	6938      	ldr	r0, [r7, #16]
 800b794:	f006 fdf8 	bl	8012388 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	7d1b      	ldrb	r3, [r3, #20]
 800b79c:	2b01      	cmp	r3, #1
 800b79e:	d104      	bne.n	800b7aa <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	6938      	ldr	r0, [r7, #16]
 800b7a4:	f006 fe68 	bl	8012478 <tcp_accept>
 800b7a8:	e01d      	b.n	800b7e6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d007      	beq.n	800b7c0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	6938      	ldr	r0, [r7, #16]
 800b7b4:	f006 fdfa 	bl	80123ac <tcp_recv>
      tcp_accept(tpcb, NULL);
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	6938      	ldr	r0, [r7, #16]
 800b7bc:	f006 fe5c 	bl	8012478 <tcp_accept>
    }
    if (shut_tx) {
 800b7c0:	7b7b      	ldrb	r3, [r7, #13]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d003      	beq.n	800b7ce <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	6938      	ldr	r0, [r7, #16]
 800b7ca:	f006 fe11 	bl	80123f0 <tcp_sent>
    }
    if (shut_close) {
 800b7ce:	7dbb      	ldrb	r3, [r7, #22]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d008      	beq.n	800b7e6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	2100      	movs	r1, #0
 800b7d8:	6938      	ldr	r0, [r7, #16]
 800b7da:	f006 fe65 	bl	80124a8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800b7de:	2100      	movs	r1, #0
 800b7e0:	6938      	ldr	r0, [r7, #16]
 800b7e2:	f006 fe27 	bl	8012434 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800b7e6:	7dbb      	ldrb	r3, [r7, #22]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800b7ec:	6938      	ldr	r0, [r7, #16]
 800b7ee:	f005 fbf3 	bl	8010fd8 <tcp_close>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75fb      	strb	r3, [r7, #23]
 800b7f6:	e007      	b.n	800b808 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800b7f8:	7bbb      	ldrb	r3, [r7, #14]
 800b7fa:	7b7a      	ldrb	r2, [r7, #13]
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	6938      	ldr	r0, [r7, #16]
 800b800:	f005 fc16 	bl	8011030 <tcp_shutdown>
 800b804:	4603      	mov	r3, r0
 800b806:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800b808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800b810:	2301      	movs	r3, #1
 800b812:	757b      	strb	r3, [r7, #21]
 800b814:	e016      	b.n	800b844 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800b816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b81e:	d10f      	bne.n	800b840 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6a1b      	ldr	r3, [r3, #32]
 800b824:	7a5b      	ldrb	r3, [r3, #9]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d10c      	bne.n	800b844 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800b82a:	2301      	movs	r3, #1
 800b82c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800b82e:	7dbb      	ldrb	r3, [r7, #22]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800b834:	6938      	ldr	r0, [r7, #16]
 800b836:	f005 fd15 	bl	8011264 <tcp_abort>
          err = ERR_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	75fb      	strb	r3, [r7, #23]
 800b83e:	e001      	b.n	800b844 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800b840:	2301      	movs	r3, #1
 800b842:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800b844:	7d7b      	ldrb	r3, [r7, #21]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d052      	beq.n	800b8f0 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	330c      	adds	r3, #12
 800b852:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	7dfa      	ldrb	r2, [r7, #23]
 800b85a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800b868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d129      	bne.n	800b8c4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800b870:	7dbb      	ldrb	r3, [r7, #22]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00c      	beq.n	800b890 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2200      	movs	r2, #0
 800b87a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b880:	2b00      	cmp	r3, #0
 800b882:	d005      	beq.n	800b890 <lwip_netconn_do_close_internal+0x1f0>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b888:	2200      	movs	r2, #0
 800b88a:	2104      	movs	r1, #4
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	4798      	blx	r3
      }
      if (shut_rx) {
 800b890:	7bbb      	ldrb	r3, [r7, #14]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d009      	beq.n	800b8aa <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d005      	beq.n	800b8aa <lwip_netconn_do_close_internal+0x20a>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	4798      	blx	r3
      }
      if (shut_tx) {
 800b8aa:	7b7b      	ldrb	r3, [r7, #13]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d009      	beq.n	800b8c4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <lwip_netconn_do_close_internal+0x224>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2102      	movs	r1, #2
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b8c4:	78fb      	ldrb	r3, [r7, #3]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d002      	beq.n	800b8d0 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800b8ca:	68b8      	ldr	r0, [r7, #8]
 800b8cc:	f005 f8b2 	bl	8010a34 <sys_sem_signal>
    }
    return ERR_OK;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	e03c      	b.n	800b94e <lwip_netconn_do_close_internal+0x2ae>
 800b8d4:	08019404 	.word	0x08019404
 800b8d8:	0801971c 	.word	0x0801971c
 800b8dc:	0801948c 	.word	0x0801948c
 800b8e0:	0801972c 	.word	0x0801972c
 800b8e4:	0801974c 	.word	0x0801974c
 800b8e8:	08019770 	.word	0x08019770
 800b8ec:	080195b0 	.word	0x080195b0
  }
  if (!close_finished) {
 800b8f0:	7d7b      	ldrb	r3, [r7, #21]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d11e      	bne.n	800b934 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	7d1b      	ldrb	r3, [r3, #20]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d106      	bne.n	800b90c <lwip_netconn_do_close_internal+0x26c>
 800b8fe:	4b16      	ldr	r3, [pc, #88]	; (800b958 <lwip_netconn_do_close_internal+0x2b8>)
 800b900:	f240 4241 	movw	r2, #1089	; 0x441
 800b904:	4915      	ldr	r1, [pc, #84]	; (800b95c <lwip_netconn_do_close_internal+0x2bc>)
 800b906:	4816      	ldr	r0, [pc, #88]	; (800b960 <lwip_netconn_do_close_internal+0x2c0>)
 800b908:	f00c fa04 	bl	8017d14 <iprintf>
    if (shut_tx) {
 800b90c:	7b7b      	ldrb	r3, [r7, #13]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800b912:	4914      	ldr	r1, [pc, #80]	; (800b964 <lwip_netconn_do_close_internal+0x2c4>)
 800b914:	6938      	ldr	r0, [r7, #16]
 800b916:	f006 fd6b 	bl	80123f0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800b91a:	2201      	movs	r2, #1
 800b91c:	4912      	ldr	r1, [pc, #72]	; (800b968 <lwip_netconn_do_close_internal+0x2c8>)
 800b91e:	6938      	ldr	r0, [r7, #16]
 800b920:	f006 fdc2 	bl	80124a8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800b924:	4911      	ldr	r1, [pc, #68]	; (800b96c <lwip_netconn_do_close_internal+0x2cc>)
 800b926:	6938      	ldr	r0, [r7, #16]
 800b928:	f006 fd84 	bl	8012434 <tcp_err>
    tcp_arg(tpcb, conn);
 800b92c:	6879      	ldr	r1, [r7, #4]
 800b92e:	6938      	ldr	r0, [r7, #16]
 800b930:	f006 fd2a 	bl	8012388 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800b934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d106      	bne.n	800b94a <lwip_netconn_do_close_internal+0x2aa>
 800b93c:	4b06      	ldr	r3, [pc, #24]	; (800b958 <lwip_netconn_do_close_internal+0x2b8>)
 800b93e:	f240 424d 	movw	r2, #1101	; 0x44d
 800b942:	490b      	ldr	r1, [pc, #44]	; (800b970 <lwip_netconn_do_close_internal+0x2d0>)
 800b944:	4806      	ldr	r0, [pc, #24]	; (800b960 <lwip_netconn_do_close_internal+0x2c0>)
 800b946:	f00c f9e5 	bl	8017d14 <iprintf>
  return err;
 800b94a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	08019404 	.word	0x08019404
 800b95c:	08019784 	.word	0x08019784
 800b960:	0801948c 	.word	0x0801948c
 800b964:	0800af15 	.word	0x0800af15
 800b968:	0800ae49 	.word	0x0800ae49
 800b96c:	0800afc1 	.word	0x0800afc1
 800b970:	080197a8 	.word	0x080197a8

0800b974 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	785b      	ldrb	r3, [r3, #1]
 800b986:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00d      	beq.n	800b9aa <lwip_netconn_do_delconn+0x36>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	781b      	ldrb	r3, [r3, #0]
 800b994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b998:	2b10      	cmp	r3, #16
 800b99a:	d006      	beq.n	800b9aa <lwip_netconn_do_delconn+0x36>
 800b99c:	4b60      	ldr	r3, [pc, #384]	; (800bb20 <lwip_netconn_do_delconn+0x1ac>)
 800b99e:	f240 425e 	movw	r2, #1118	; 0x45e
 800b9a2:	4960      	ldr	r1, [pc, #384]	; (800bb24 <lwip_netconn_do_delconn+0x1b0>)
 800b9a4:	4860      	ldr	r0, [pc, #384]	; (800bb28 <lwip_netconn_do_delconn+0x1b4>)
 800b9a6:	f00c f9b5 	bl	8017d14 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800b9aa:	7afb      	ldrb	r3, [r7, #11]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d005      	beq.n	800b9bc <lwip_netconn_do_delconn+0x48>
 800b9b0:	7afb      	ldrb	r3, [r7, #11]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d002      	beq.n	800b9bc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800b9b6:	7afb      	ldrb	r3, [r7, #11]
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d109      	bne.n	800b9d0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
 800b9be:	2b03      	cmp	r3, #3
 800b9c0:	d10a      	bne.n	800b9d8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	7f1b      	ldrb	r3, [r3, #28]
 800b9c8:	f003 0304 	and.w	r3, r3, #4
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d103      	bne.n	800b9d8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	22fb      	movs	r2, #251	; 0xfb
 800b9d4:	711a      	strb	r2, [r3, #4]
 800b9d6:	e097      	b.n	800bb08 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800b9d8:	7afb      	ldrb	r3, [r7, #11]
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d10d      	bne.n	800b9fa <lwip_netconn_do_delconn+0x86>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	7f1b      	ldrb	r3, [r3, #28]
 800b9e4:	f003 0304 	and.w	r3, r3, #4
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d106      	bne.n	800b9fa <lwip_netconn_do_delconn+0x86>
 800b9ec:	4b4c      	ldr	r3, [pc, #304]	; (800bb20 <lwip_netconn_do_delconn+0x1ac>)
 800b9ee:	f240 427a 	movw	r2, #1146	; 0x47a
 800b9f2:	494e      	ldr	r1, [pc, #312]	; (800bb2c <lwip_netconn_do_delconn+0x1b8>)
 800b9f4:	484c      	ldr	r0, [pc, #304]	; (800bb28 <lwip_netconn_do_delconn+0x1b4>)
 800b9f6:	f00c f98d 	bl	8017d14 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fdcd 	bl	800b5a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d05f      	beq.n	800bad4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba1e:	2b10      	cmp	r3, #16
 800ba20:	d00d      	beq.n	800ba3e <lwip_netconn_do_delconn+0xca>
 800ba22:	2b20      	cmp	r3, #32
 800ba24:	d151      	bne.n	800baca <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	685b      	ldr	r3, [r3, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f00b fee4 	bl	8017804 <udp_remove>
          break;
 800ba3c:	e046      	b.n	800bacc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d006      	beq.n	800ba56 <lwip_netconn_do_delconn+0xe2>
 800ba48:	4b35      	ldr	r3, [pc, #212]	; (800bb20 <lwip_netconn_do_delconn+0x1ac>)
 800ba4a:	f240 4294 	movw	r2, #1172	; 0x494
 800ba4e:	4938      	ldr	r1, [pc, #224]	; (800bb30 <lwip_netconn_do_delconn+0x1bc>)
 800ba50:	4835      	ldr	r0, [pc, #212]	; (800bb28 <lwip_netconn_do_delconn+0x1b4>)
 800ba52:	f00c f95f 	bl	8017d14 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	2203      	movs	r2, #3
 800ba62:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fe14 	bl	800b6a0 <lwip_netconn_do_close_internal>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d04b      	beq.n	800bb16 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	d006      	beq.n	800ba96 <lwip_netconn_do_delconn+0x122>
 800ba88:	4b25      	ldr	r3, [pc, #148]	; (800bb20 <lwip_netconn_do_delconn+0x1ac>)
 800ba8a:	f240 429a 	movw	r2, #1178	; 0x49a
 800ba8e:	4929      	ldr	r1, [pc, #164]	; (800bb34 <lwip_netconn_do_delconn+0x1c0>)
 800ba90:	4825      	ldr	r0, [pc, #148]	; (800bb28 <lwip_netconn_do_delconn+0x1b4>)
 800ba92:	f00c f93f 	bl	8017d14 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ba96:	4828      	ldr	r0, [pc, #160]	; (800bb38 <lwip_netconn_do_delconn+0x1c4>)
 800ba98:	f005 f83d 	bl	8010b16 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	330c      	adds	r3, #12
 800baa2:	2100      	movs	r1, #0
 800baa4:	4618      	mov	r0, r3
 800baa6:	f004 ff94 	bl	80109d2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800baaa:	4823      	ldr	r0, [pc, #140]	; (800bb38 <lwip_netconn_do_delconn+0x1c4>)
 800baac:	f005 f824 	bl	8010af8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	785b      	ldrb	r3, [r3, #1]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d02d      	beq.n	800bb16 <lwip_netconn_do_delconn+0x1a2>
 800baba:	4b19      	ldr	r3, [pc, #100]	; (800bb20 <lwip_netconn_do_delconn+0x1ac>)
 800babc:	f240 429e 	movw	r2, #1182	; 0x49e
 800bac0:	491c      	ldr	r1, [pc, #112]	; (800bb34 <lwip_netconn_do_delconn+0x1c0>)
 800bac2:	4819      	ldr	r0, [pc, #100]	; (800bb28 <lwip_netconn_do_delconn+0x1b4>)
 800bac4:	f00c f926 	bl	8017d14 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800bac8:	e025      	b.n	800bb16 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800baca:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	2200      	movs	r2, #0
 800bad2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bada:	2b00      	cmp	r3, #0
 800badc:	d007      	beq.n	800baee <lwip_netconn_do_delconn+0x17a>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	6810      	ldr	r0, [r2, #0]
 800bae8:	2200      	movs	r2, #0
 800baea:	2100      	movs	r1, #0
 800baec:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d007      	beq.n	800bb08 <lwip_netconn_do_delconn+0x194>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	6810      	ldr	r0, [r2, #0]
 800bb02:	2200      	movs	r2, #0
 800bb04:	2102      	movs	r1, #2
 800bb06:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	330c      	adds	r3, #12
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f004 ffaa 	bl	8010a68 <sys_sem_valid>
 800bb14:	e000      	b.n	800bb18 <lwip_netconn_do_delconn+0x1a4>
          return;
 800bb16:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800bb18:	3710      	adds	r7, #16
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	08019404 	.word	0x08019404
 800bb24:	080197b8 	.word	0x080197b8
 800bb28:	0801948c 	.word	0x0801948c
 800bb2c:	080197cc 	.word	0x080197cc
 800bb30:	080197ec 	.word	0x080197ec
 800bb34:	08019808 	.word	0x08019808
 800bb38:	2400f284 	.word	0x2400f284

0800bb3c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	685b      	ldr	r3, [r3, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d025      	beq.n	800bb9e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb5c:	2b10      	cmp	r3, #16
 800bb5e:	d00e      	beq.n	800bb7e <lwip_netconn_do_bind+0x42>
 800bb60:	2b20      	cmp	r3, #32
 800bb62:	d119      	bne.n	800bb98 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	6858      	ldr	r0, [r3, #4]
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	6899      	ldr	r1, [r3, #8]
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	899b      	ldrh	r3, [r3, #12]
 800bb72:	461a      	mov	r2, r3
 800bb74:	f00b fd9e 	bl	80176b4 <udp_bind>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73fb      	strb	r3, [r7, #15]
        break;
 800bb7c:	e011      	b.n	800bba2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6858      	ldr	r0, [r3, #4]
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	6899      	ldr	r1, [r3, #8]
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	899b      	ldrh	r3, [r3, #12]
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	f005 fb75 	bl	801127c <tcp_bind>
 800bb92:	4603      	mov	r3, r0
 800bb94:	73fb      	strb	r3, [r7, #15]
        break;
 800bb96:	e004      	b.n	800bba2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800bb98:	23fa      	movs	r3, #250	; 0xfa
 800bb9a:	73fb      	strb	r3, [r7, #15]
        break;
 800bb9c:	e001      	b.n	800bba2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800bb9e:	23fa      	movs	r3, #250	; 0xfa
 800bba0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	7bfa      	ldrb	r2, [r7, #15]
 800bba6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bba8:	bf00      	nop
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d07f      	beq.n	800bcc6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbd0:	2b10      	cmp	r3, #16
 800bbd2:	d175      	bne.n	800bcc0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	785b      	ldrb	r3, [r3, #1]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d165      	bne.n	800bcaa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	7d1b      	ldrb	r3, [r3, #20]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d002      	beq.n	800bbf0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800bbea:	23fa      	movs	r3, #250	; 0xfa
 800bbec:	72fb      	strb	r3, [r7, #11]
 800bbee:	e06c      	b.n	800bcca <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800bbf0:	23ff      	movs	r3, #255	; 0xff
 800bbf2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f107 020b 	add.w	r2, r7, #11
 800bbfe:	7cf9      	ldrb	r1, [r7, #19]
 800bc00:	4618      	mov	r0, r3
 800bc02:	f005 fbf3 	bl	80113ec <tcp_listen_with_backlog_and_err>
 800bc06:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d05d      	beq.n	800bcca <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3310      	adds	r3, #16
 800bc14:	4618      	mov	r0, r3
 800bc16:	f004 fe96 	bl	8010946 <sys_mbox_valid>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00b      	beq.n	800bc38 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	3310      	adds	r3, #16
 800bc26:	4618      	mov	r0, r3
 800bc28:	f004 fe06 	bl	8010838 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3310      	adds	r3, #16
 800bc32:	4618      	mov	r0, r3
 800bc34:	f004 fe98 	bl	8010968 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3314      	adds	r3, #20
 800bc42:	4618      	mov	r0, r3
 800bc44:	f004 fe7f 	bl	8010946 <sys_mbox_valid>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d108      	bne.n	800bc60 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3314      	adds	r3, #20
 800bc54:	2106      	movs	r1, #6
 800bc56:	4618      	mov	r0, r3
 800bc58:	f004 fdcc 	bl	80107f4 <sys_mbox_new>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800bc60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d118      	bne.n	800bc9a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4619      	mov	r1, r3
 800bc84:	4610      	mov	r0, r2
 800bc86:	f006 fb7f 	bl	8012388 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	4912      	ldr	r1, [pc, #72]	; (800bcdc <lwip_netconn_do_listen+0x12c>)
 800bc92:	4618      	mov	r0, r3
 800bc94:	f006 fbf0 	bl	8012478 <tcp_accept>
 800bc98:	e017      	b.n	800bcca <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f005 f99c 	bl	8010fd8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2200      	movs	r2, #0
 800bca6:	605a      	str	r2, [r3, #4]
 800bca8:	e00f      	b.n	800bcca <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	785b      	ldrb	r3, [r3, #1]
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d102      	bne.n	800bcba <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	72fb      	strb	r3, [r7, #11]
 800bcb8:	e007      	b.n	800bcca <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800bcba:	23f5      	movs	r3, #245	; 0xf5
 800bcbc:	72fb      	strb	r3, [r7, #11]
 800bcbe:	e004      	b.n	800bcca <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800bcc0:	23f0      	movs	r3, #240	; 0xf0
 800bcc2:	72fb      	strb	r3, [r7, #11]
 800bcc4:	e001      	b.n	800bcca <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800bcc6:	23f5      	movs	r3, #245	; 0xf5
 800bcc8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800bcca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800bcce:	697b      	ldr	r3, [r7, #20]
 800bcd0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800bcd2:	bf00      	nop
 800bcd4:	3718      	adds	r7, #24
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	0800b1bd 	.word	0x0800b1bd

0800bce0 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d022      	beq.n	800bd42 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bd06:	2b10      	cmp	r3, #16
 800bd08:	d11b      	bne.n	800bd42 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd16:	d202      	bcs.n	800bd1e <lwip_netconn_do_recv+0x3e>
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	e001      	b.n	800bd22 <lwip_netconn_do_recv+0x42>
 800bd1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd22:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	89fa      	ldrh	r2, [r7, #14]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f005 fc60 	bl	80115f4 <tcp_recved>
        remaining -= recved;
 800bd34:	89fb      	ldrh	r3, [r7, #14]
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1e6      	bne.n	800bd10 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800bd42:	bf00      	nop
 800bd44:	3718      	adds	r7, #24
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b088      	sub	sp, #32
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	460b      	mov	r3, r1
 800bd56:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d106      	bne.n	800bd70 <lwip_netconn_do_writemore+0x24>
 800bd62:	4b96      	ldr	r3, [pc, #600]	; (800bfbc <lwip_netconn_do_writemore+0x270>)
 800bd64:	f240 6273 	movw	r2, #1651	; 0x673
 800bd68:	4995      	ldr	r1, [pc, #596]	; (800bfc0 <lwip_netconn_do_writemore+0x274>)
 800bd6a:	4896      	ldr	r0, [pc, #600]	; (800bfc4 <lwip_netconn_do_writemore+0x278>)
 800bd6c:	f00b ffd2 	bl	8017d14 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	785b      	ldrb	r3, [r3, #1]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d006      	beq.n	800bd86 <lwip_netconn_do_writemore+0x3a>
 800bd78:	4b90      	ldr	r3, [pc, #576]	; (800bfbc <lwip_netconn_do_writemore+0x270>)
 800bd7a:	f240 6274 	movw	r2, #1652	; 0x674
 800bd7e:	4992      	ldr	r1, [pc, #584]	; (800bfc8 <lwip_netconn_do_writemore+0x27c>)
 800bd80:	4890      	ldr	r0, [pc, #576]	; (800bfc4 <lwip_netconn_do_writemore+0x278>)
 800bd82:	f00b ffc7 	bl	8017d14 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a1b      	ldr	r3, [r3, #32]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <lwip_netconn_do_writemore+0x50>
 800bd8e:	4b8b      	ldr	r3, [pc, #556]	; (800bfbc <lwip_netconn_do_writemore+0x270>)
 800bd90:	f240 6275 	movw	r2, #1653	; 0x675
 800bd94:	498d      	ldr	r1, [pc, #564]	; (800bfcc <lwip_netconn_do_writemore+0x280>)
 800bd96:	488b      	ldr	r0, [pc, #556]	; (800bfc4 <lwip_netconn_do_writemore+0x278>)
 800bd98:	f00b ffbc 	bl	8017d14 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d106      	bne.n	800bdb2 <lwip_netconn_do_writemore+0x66>
 800bda4:	4b85      	ldr	r3, [pc, #532]	; (800bfbc <lwip_netconn_do_writemore+0x270>)
 800bda6:	f240 6276 	movw	r2, #1654	; 0x676
 800bdaa:	4989      	ldr	r1, [pc, #548]	; (800bfd0 <lwip_netconn_do_writemore+0x284>)
 800bdac:	4885      	ldr	r0, [pc, #532]	; (800bfc4 <lwip_netconn_do_writemore+0x278>)
 800bdae:	f00b ffb1 	bl	8017d14 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	699a      	ldr	r2, [r3, #24]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a1b      	ldr	r3, [r3, #32]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	429a      	cmp	r2, r3
 800bdc0:	d306      	bcc.n	800bdd0 <lwip_netconn_do_writemore+0x84>
 800bdc2:	4b7e      	ldr	r3, [pc, #504]	; (800bfbc <lwip_netconn_do_writemore+0x270>)
 800bdc4:	f240 6277 	movw	r2, #1655	; 0x677
 800bdc8:	4982      	ldr	r1, [pc, #520]	; (800bfd4 <lwip_netconn_do_writemore+0x288>)
 800bdca:	487e      	ldr	r0, [pc, #504]	; (800bfc4 <lwip_netconn_do_writemore+0x278>)
 800bdcc:	f00b ffa2 	bl	8017d14 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a1b      	ldr	r3, [r3, #32]
 800bdd4:	899b      	ldrh	r3, [r3, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d106      	bne.n	800bde8 <lwip_netconn_do_writemore+0x9c>
 800bdda:	4b78      	ldr	r3, [pc, #480]	; (800bfbc <lwip_netconn_do_writemore+0x270>)
 800bddc:	f240 6279 	movw	r2, #1657	; 0x679
 800bde0:	497d      	ldr	r1, [pc, #500]	; (800bfd8 <lwip_netconn_do_writemore+0x28c>)
 800bde2:	4878      	ldr	r0, [pc, #480]	; (800bfc4 <lwip_netconn_do_writemore+0x278>)
 800bde4:	f00b ff96 	bl	8017d14 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a1b      	ldr	r3, [r3, #32]
 800bdec:	7f1b      	ldrb	r3, [r3, #28]
 800bdee:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	7f1b      	ldrb	r3, [r3, #28]
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d104      	bne.n	800be06 <lwip_netconn_do_writemore+0xba>
 800bdfc:	7ebb      	ldrb	r3, [r7, #26]
 800bdfe:	f003 0304 	and.w	r3, r3, #4
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <lwip_netconn_do_writemore+0xbe>
 800be06:	2301      	movs	r3, #1
 800be08:	e000      	b.n	800be0c <lwip_netconn_do_writemore+0xc0>
 800be0a:	2300      	movs	r3, #0
 800be0c:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	681a      	ldr	r2, [r3, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	4413      	add	r3, r2
 800be1e:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6a1b      	ldr	r3, [r3, #32]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6a1b      	ldr	r3, [r3, #32]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	1ad3      	subs	r3, r2, r3
 800be30:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be38:	d307      	bcc.n	800be4a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800be3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be3e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800be40:	7ebb      	ldrb	r3, [r7, #26]
 800be42:	f043 0302 	orr.w	r3, r3, #2
 800be46:	76bb      	strb	r3, [r7, #26]
 800be48:	e001      	b.n	800be4e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800be56:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800be58:	89fa      	ldrh	r2, [r7, #14]
 800be5a:	8bbb      	ldrh	r3, [r7, #28]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d216      	bcs.n	800be8e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800be60:	89fb      	ldrh	r3, [r7, #14]
 800be62:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800be64:	7e3b      	ldrb	r3, [r7, #24]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d00d      	beq.n	800be86 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800be6a:	8bbb      	ldrh	r3, [r7, #28]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10e      	bne.n	800be8e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6a1b      	ldr	r3, [r3, #32]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d102      	bne.n	800be80 <lwip_netconn_do_writemore+0x134>
 800be7a:	f06f 0306 	mvn.w	r3, #6
 800be7e:	e000      	b.n	800be82 <lwip_netconn_do_writemore+0x136>
 800be80:	2300      	movs	r3, #0
 800be82:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800be84:	e07d      	b.n	800bf82 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800be86:	7ebb      	ldrb	r3, [r7, #26]
 800be88:	f043 0302 	orr.w	r3, r3, #2
 800be8c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	691a      	ldr	r2, [r3, #16]
 800be94:	8bbb      	ldrh	r3, [r7, #28]
 800be96:	441a      	add	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6a1b      	ldr	r3, [r3, #32]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d906      	bls.n	800beb2 <lwip_netconn_do_writemore+0x166>
 800bea4:	4b45      	ldr	r3, [pc, #276]	; (800bfbc <lwip_netconn_do_writemore+0x270>)
 800bea6:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800beaa:	494c      	ldr	r1, [pc, #304]	; (800bfdc <lwip_netconn_do_writemore+0x290>)
 800beac:	4845      	ldr	r0, [pc, #276]	; (800bfc4 <lwip_netconn_do_writemore+0x278>)
 800beae:	f00b ff31 	bl	8017d14 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800beb2:	8bbb      	ldrh	r3, [r7, #28]
 800beb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beb8:	4293      	cmp	r3, r2
 800beba:	d103      	bne.n	800bec4 <lwip_netconn_do_writemore+0x178>
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bec2:	d209      	bcs.n	800bed8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800bec8:	8bba      	ldrh	r2, [r7, #28]
 800beca:	429a      	cmp	r2, r3
 800becc:	d10b      	bne.n	800bee6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	899b      	ldrh	r3, [r3, #12]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d906      	bls.n	800bee6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800bed8:	2301      	movs	r3, #1
 800beda:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800bedc:	7ebb      	ldrb	r3, [r7, #26]
 800bede:	f043 0302 	orr.w	r3, r3, #2
 800bee2:	76bb      	strb	r3, [r7, #26]
 800bee4:	e001      	b.n	800beea <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6858      	ldr	r0, [r3, #4]
 800beee:	7ebb      	ldrb	r3, [r7, #26]
 800bef0:	8bba      	ldrh	r2, [r7, #28]
 800bef2:	6979      	ldr	r1, [r7, #20]
 800bef4:	f009 f98a 	bl	801520c <tcp_write>
 800bef8:	4603      	mov	r3, r0
 800befa:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800befc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d12c      	bne.n	800bf5e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	6999      	ldr	r1, [r3, #24]
 800bf0a:	8bba      	ldrh	r2, [r7, #28]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	440a      	add	r2, r1
 800bf12:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	6919      	ldr	r1, [r3, #16]
 800bf1a:	8bba      	ldrh	r2, [r7, #28]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	440a      	add	r2, r1
 800bf22:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6a1b      	ldr	r3, [r3, #32]
 800bf28:	691a      	ldr	r2, [r3, #16]
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d113      	bne.n	800bf5e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	899a      	ldrh	r2, [r3, #12]
 800bf3c:	3a01      	subs	r2, #1
 800bf3e:	b292      	uxth	r2, r2
 800bf40:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a1b      	ldr	r3, [r3, #32]
 800bf46:	899b      	ldrh	r3, [r3, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d008      	beq.n	800bf5e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	689a      	ldr	r2, [r3, #8]
 800bf52:	3208      	adds	r2, #8
 800bf54:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800bf5e:	7e7b      	ldrb	r3, [r7, #25]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d004      	beq.n	800bf6e <lwip_netconn_do_writemore+0x222>
 800bf64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f43f af50 	beq.w	800be0e <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800bf6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d004      	beq.n	800bf80 <lwip_netconn_do_writemore+0x234>
 800bf76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf7e:	d147      	bne.n	800c010 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800bf80:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800bf82:	7e3b      	ldrb	r3, [r7, #24]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d02b      	beq.n	800bfe0 <lwip_netconn_do_writemore+0x294>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6a1b      	ldr	r3, [r3, #32]
 800bf8c:	699a      	ldr	r2, [r3, #24]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a1b      	ldr	r3, [r3, #32]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d223      	bcs.n	800bfe0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d005      	beq.n	800bfac <lwip_netconn_do_writemore+0x260>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2103      	movs	r1, #3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	7f1b      	ldrb	r3, [r3, #28]
 800bfb0:	f043 0310 	orr.w	r3, r3, #16
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	771a      	strb	r2, [r3, #28]
 800bfba:	e029      	b.n	800c010 <lwip_netconn_do_writemore+0x2c4>
 800bfbc:	08019404 	.word	0x08019404
 800bfc0:	080195a0 	.word	0x080195a0
 800bfc4:	0801948c 	.word	0x0801948c
 800bfc8:	080198a8 	.word	0x080198a8
 800bfcc:	080195b0 	.word	0x080195b0
 800bfd0:	080198c8 	.word	0x080198c8
 800bfd4:	080198e0 	.word	0x080198e0
 800bfd8:	08019920 	.word	0x08019920
 800bfdc:	08019948 	.word	0x08019948
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bfe8:	f640 3269 	movw	r2, #2921	; 0xb69
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d905      	bls.n	800bffc <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800bff8:	2b07      	cmp	r3, #7
 800bffa:	d909      	bls.n	800c010 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	2b00      	cmp	r3, #0
 800c002:	d005      	beq.n	800c010 <lwip_netconn_do_writemore+0x2c4>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c008:	2200      	movs	r2, #0
 800c00a:	2103      	movs	r1, #3
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800c010:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11d      	bne.n	800c054 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a1b      	ldr	r3, [r3, #32]
 800c01c:	699a      	ldr	r2, [r3, #24]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	695b      	ldr	r3, [r3, #20]
 800c024:	429a      	cmp	r2, r3
 800c026:	d002      	beq.n	800c02e <lwip_netconn_do_writemore+0x2e2>
 800c028:	7e3b      	ldrb	r3, [r7, #24]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800c02e:	2301      	movs	r3, #1
 800c030:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	4618      	mov	r0, r3
 800c038:	f009 fed2 	bl	8015de0 <tcp_output>
 800c03c:	4603      	mov	r3, r0
 800c03e:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800c040:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800c044:	f113 0f04 	cmn.w	r3, #4
 800c048:	d12c      	bne.n	800c0a4 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c04a:	7b3b      	ldrb	r3, [r7, #12]
 800c04c:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c04e:	2301      	movs	r3, #1
 800c050:	76fb      	strb	r3, [r7, #27]
 800c052:	e027      	b.n	800c0a4 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800c054:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c05c:	d120      	bne.n	800c0a0 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	4618      	mov	r0, r3
 800c064:	f009 febc 	bl	8015de0 <tcp_output>
 800c068:	4603      	mov	r3, r0
 800c06a:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800c06c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800c070:	f113 0f04 	cmn.w	r3, #4
 800c074:	d104      	bne.n	800c080 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800c076:	7b7b      	ldrb	r3, [r7, #13]
 800c078:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c07a:	2301      	movs	r3, #1
 800c07c:	76fb      	strb	r3, [r7, #27]
 800c07e:	e011      	b.n	800c0a4 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800c080:	7e3b      	ldrb	r3, [r7, #24]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00e      	beq.n	800c0a4 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d102      	bne.n	800c096 <lwip_netconn_do_writemore+0x34a>
 800c090:	f06f 0306 	mvn.w	r3, #6
 800c094:	e000      	b.n	800c098 <lwip_netconn_do_writemore+0x34c>
 800c096:	2300      	movs	r3, #0
 800c098:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800c09a:	2301      	movs	r3, #1
 800c09c:	76fb      	strb	r3, [r7, #27]
 800c09e:	e001      	b.n	800c0a4 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800c0a4:	7efb      	ldrb	r3, [r7, #27]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d015      	beq.n	800c0d6 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	330c      	adds	r3, #12
 800c0b2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a1b      	ldr	r3, [r3, #32]
 800c0b8:	7ffa      	ldrb	r2, [r7, #31]
 800c0ba:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800c0c8:	78fb      	ldrb	r3, [r7, #3]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d006      	beq.n	800c0dc <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800c0ce:	68b8      	ldr	r0, [r7, #8]
 800c0d0:	f004 fcb0 	bl	8010a34 <sys_sem_signal>
 800c0d4:	e002      	b.n	800c0dc <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800c0d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0da:	e000      	b.n	800c0de <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop

0800c0e8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fe fd16 	bl	800ab2a <netconn_err>
 800c0fe:	4603      	mov	r3, r0
 800c100:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d166      	bne.n	800c1d8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c114:	2b10      	cmp	r3, #16
 800c116:	d15d      	bne.n	800c1d4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	785b      	ldrb	r3, [r3, #1]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800c122:	23fb      	movs	r3, #251	; 0xfb
 800c124:	73fb      	strb	r3, [r7, #15]
 800c126:	e057      	b.n	800c1d8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d04d      	beq.n	800c1ce <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2201      	movs	r2, #1
 800c138:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d006      	beq.n	800c152 <lwip_netconn_do_write+0x6a>
 800c144:	4b28      	ldr	r3, [pc, #160]	; (800c1e8 <lwip_netconn_do_write+0x100>)
 800c146:	f240 7223 	movw	r2, #1827	; 0x723
 800c14a:	4928      	ldr	r1, [pc, #160]	; (800c1ec <lwip_netconn_do_write+0x104>)
 800c14c:	4828      	ldr	r0, [pc, #160]	; (800c1f0 <lwip_netconn_do_write+0x108>)
 800c14e:	f00b fde1 	bl	8017d14 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	695b      	ldr	r3, [r3, #20]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d106      	bne.n	800c168 <lwip_netconn_do_write+0x80>
 800c15a:	4b23      	ldr	r3, [pc, #140]	; (800c1e8 <lwip_netconn_do_write+0x100>)
 800c15c:	f240 7224 	movw	r2, #1828	; 0x724
 800c160:	4924      	ldr	r1, [pc, #144]	; (800c1f4 <lwip_netconn_do_write+0x10c>)
 800c162:	4823      	ldr	r0, [pc, #140]	; (800c1f0 <lwip_netconn_do_write+0x108>)
 800c164:	f00b fdd6 	bl	8017d14 <iprintf>
        msg->conn->current_msg = msg;
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2100      	movs	r1, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff fde8 	bl	800bd4c <lwip_netconn_do_writemore>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d02e      	beq.n	800c1e0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	785b      	ldrb	r3, [r3, #1]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d006      	beq.n	800c19a <lwip_netconn_do_write+0xb2>
 800c18c:	4b16      	ldr	r3, [pc, #88]	; (800c1e8 <lwip_netconn_do_write+0x100>)
 800c18e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800c192:	4919      	ldr	r1, [pc, #100]	; (800c1f8 <lwip_netconn_do_write+0x110>)
 800c194:	4816      	ldr	r0, [pc, #88]	; (800c1f0 <lwip_netconn_do_write+0x108>)
 800c196:	f00b fdbd 	bl	8017d14 <iprintf>
          UNLOCK_TCPIP_CORE();
 800c19a:	4818      	ldr	r0, [pc, #96]	; (800c1fc <lwip_netconn_do_write+0x114>)
 800c19c:	f004 fcbb 	bl	8010b16 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	330c      	adds	r3, #12
 800c1a6:	2100      	movs	r1, #0
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f004 fc12 	bl	80109d2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800c1ae:	4813      	ldr	r0, [pc, #76]	; (800c1fc <lwip_netconn_do_write+0x114>)
 800c1b0:	f004 fca2 	bl	8010af8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	785b      	ldrb	r3, [r3, #1]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d110      	bne.n	800c1e0 <lwip_netconn_do_write+0xf8>
 800c1be:	4b0a      	ldr	r3, [pc, #40]	; (800c1e8 <lwip_netconn_do_write+0x100>)
 800c1c0:	f240 722c 	movw	r2, #1836	; 0x72c
 800c1c4:	490c      	ldr	r1, [pc, #48]	; (800c1f8 <lwip_netconn_do_write+0x110>)
 800c1c6:	480a      	ldr	r0, [pc, #40]	; (800c1f0 <lwip_netconn_do_write+0x108>)
 800c1c8:	f00b fda4 	bl	8017d14 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800c1cc:	e008      	b.n	800c1e0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800c1ce:	23f5      	movs	r3, #245	; 0xf5
 800c1d0:	73fb      	strb	r3, [r7, #15]
 800c1d2:	e001      	b.n	800c1d8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800c1d4:	23fa      	movs	r3, #250	; 0xfa
 800c1d6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	7bfa      	ldrb	r2, [r7, #15]
 800c1dc:	711a      	strb	r2, [r3, #4]
 800c1de:	e000      	b.n	800c1e2 <lwip_netconn_do_write+0xfa>
        return;
 800c1e0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}
 800c1e8:	08019404 	.word	0x08019404
 800c1ec:	080197ec 	.word	0x080197ec
 800c1f0:	0801948c 	.word	0x0801948c
 800c1f4:	08019974 	.word	0x08019974
 800c1f8:	08019808 	.word	0x08019808
 800c1fc:	2400f284 	.word	0x2400f284

0800c200 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	785b      	ldrb	r3, [r3, #1]
 800c212:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d069      	beq.n	800c2f2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800c228:	2b10      	cmp	r3, #16
 800c22a:	d162      	bne.n	800c2f2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800c230:	2b03      	cmp	r3, #3
 800c232:	d002      	beq.n	800c23a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800c234:	7afb      	ldrb	r3, [r7, #11]
 800c236:	2b02      	cmp	r3, #2
 800c238:	d05b      	beq.n	800c2f2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800c23a:	7afb      	ldrb	r3, [r7, #11]
 800c23c:	2b03      	cmp	r3, #3
 800c23e:	d103      	bne.n	800c248 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	22f5      	movs	r2, #245	; 0xf5
 800c244:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c246:	e059      	b.n	800c2fc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800c248:	7afb      	ldrb	r3, [r7, #11]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d103      	bne.n	800c256 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	22fb      	movs	r2, #251	; 0xfb
 800c252:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800c254:	e052      	b.n	800c2fc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	7a1b      	ldrb	r3, [r3, #8]
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d004      	beq.n	800c26c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff f99c 	bl	800b5a4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	6a1b      	ldr	r3, [r3, #32]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d006      	beq.n	800c284 <lwip_netconn_do_close+0x84>
 800c276:	4b23      	ldr	r3, [pc, #140]	; (800c304 <lwip_netconn_do_close+0x104>)
 800c278:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800c27c:	4922      	ldr	r1, [pc, #136]	; (800c308 <lwip_netconn_do_close+0x108>)
 800c27e:	4823      	ldr	r0, [pc, #140]	; (800c30c <lwip_netconn_do_close+0x10c>)
 800c280:	f00b fd48 	bl	8017d14 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	2204      	movs	r2, #4
 800c28a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2100      	movs	r1, #0
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff fa00 	bl	800b6a0 <lwip_netconn_do_close_internal>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d029      	beq.n	800c2fa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	785b      	ldrb	r3, [r3, #1]
 800c2ac:	2b04      	cmp	r3, #4
 800c2ae:	d006      	beq.n	800c2be <lwip_netconn_do_close+0xbe>
 800c2b0:	4b14      	ldr	r3, [pc, #80]	; (800c304 <lwip_netconn_do_close+0x104>)
 800c2b2:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800c2b6:	4916      	ldr	r1, [pc, #88]	; (800c310 <lwip_netconn_do_close+0x110>)
 800c2b8:	4814      	ldr	r0, [pc, #80]	; (800c30c <lwip_netconn_do_close+0x10c>)
 800c2ba:	f00b fd2b 	bl	8017d14 <iprintf>
        UNLOCK_TCPIP_CORE();
 800c2be:	4815      	ldr	r0, [pc, #84]	; (800c314 <lwip_netconn_do_close+0x114>)
 800c2c0:	f004 fc29 	bl	8010b16 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	330c      	adds	r3, #12
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f004 fb80 	bl	80109d2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800c2d2:	4810      	ldr	r0, [pc, #64]	; (800c314 <lwip_netconn_do_close+0x114>)
 800c2d4:	f004 fc10 	bl	8010af8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	785b      	ldrb	r3, [r3, #1]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00b      	beq.n	800c2fa <lwip_netconn_do_close+0xfa>
 800c2e2:	4b08      	ldr	r3, [pc, #32]	; (800c304 <lwip_netconn_do_close+0x104>)
 800c2e4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800c2e8:	4909      	ldr	r1, [pc, #36]	; (800c310 <lwip_netconn_do_close+0x110>)
 800c2ea:	4808      	ldr	r0, [pc, #32]	; (800c30c <lwip_netconn_do_close+0x10c>)
 800c2ec:	f00b fd12 	bl	8017d14 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800c2f0:	e003      	b.n	800c2fa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	22f5      	movs	r2, #245	; 0xf5
 800c2f6:	711a      	strb	r2, [r3, #4]
 800c2f8:	e000      	b.n	800c2fc <lwip_netconn_do_close+0xfc>
      return;
 800c2fa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	08019404 	.word	0x08019404
 800c308:	080197ec 	.word	0x080197ec
 800c30c:	0801948c 	.word	0x0801948c
 800c310:	08019808 	.word	0x08019808
 800c314:	2400f284 	.word	0x2400f284

0800c318 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	4603      	mov	r3, r0
 800c320:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c322:	88fb      	ldrh	r3, [r7, #6]
 800c324:	021b      	lsls	r3, r3, #8
 800c326:	b21a      	sxth	r2, r3
 800c328:	88fb      	ldrh	r3, [r7, #6]
 800c32a:	0a1b      	lsrs	r3, r3, #8
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	b21b      	sxth	r3, r3
 800c330:	4313      	orrs	r3, r2
 800c332:	b21b      	sxth	r3, r3
 800c334:	b29b      	uxth	r3, r3
}
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c342:	b480      	push	{r7}
 800c344:	b083      	sub	sp, #12
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	061a      	lsls	r2, r3, #24
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	021b      	lsls	r3, r3, #8
 800c352:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c356:	431a      	orrs	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	0a1b      	lsrs	r3, r3, #8
 800c35c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c360:	431a      	orrs	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	0e1b      	lsrs	r3, r3, #24
 800c366:	4313      	orrs	r3, r2
}
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c37c:	4915      	ldr	r1, [pc, #84]	; (800c3d4 <etharp_free_entry+0x60>)
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	4613      	mov	r3, r2
 800c382:	005b      	lsls	r3, r3, #1
 800c384:	4413      	add	r3, r2
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	440b      	add	r3, r1
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d013      	beq.n	800c3b8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c390:	4910      	ldr	r1, [pc, #64]	; (800c3d4 <etharp_free_entry+0x60>)
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	4613      	mov	r3, r2
 800c396:	005b      	lsls	r3, r3, #1
 800c398:	4413      	add	r3, r2
 800c39a:	00db      	lsls	r3, r3, #3
 800c39c:	440b      	add	r3, r1
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f003 ff8d 	bl	80102c0 <pbuf_free>
    arp_table[i].q = NULL;
 800c3a6:	490b      	ldr	r1, [pc, #44]	; (800c3d4 <etharp_free_entry+0x60>)
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	4413      	add	r3, r2
 800c3b0:	00db      	lsls	r3, r3, #3
 800c3b2:	440b      	add	r3, r1
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c3b8:	4906      	ldr	r1, [pc, #24]	; (800c3d4 <etharp_free_entry+0x60>)
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	4413      	add	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	440b      	add	r3, r1
 800c3c6:	3314      	adds	r3, #20
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c3cc:	bf00      	nop
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	24008664 	.word	0x24008664

0800c3d8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c3de:	2300      	movs	r3, #0
 800c3e0:	607b      	str	r3, [r7, #4]
 800c3e2:	e096      	b.n	800c512 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c3e4:	494f      	ldr	r1, [pc, #316]	; (800c524 <etharp_tmr+0x14c>)
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	005b      	lsls	r3, r3, #1
 800c3ec:	4413      	add	r3, r2
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	440b      	add	r3, r1
 800c3f2:	3314      	adds	r3, #20
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c3f8:	78fb      	ldrb	r3, [r7, #3]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 8086 	beq.w	800c50c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c400:	4948      	ldr	r1, [pc, #288]	; (800c524 <etharp_tmr+0x14c>)
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	4613      	mov	r3, r2
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	4413      	add	r3, r2
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	440b      	add	r3, r1
 800c40e:	3312      	adds	r3, #18
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	3301      	adds	r3, #1
 800c414:	b298      	uxth	r0, r3
 800c416:	4943      	ldr	r1, [pc, #268]	; (800c524 <etharp_tmr+0x14c>)
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	4613      	mov	r3, r2
 800c41c:	005b      	lsls	r3, r3, #1
 800c41e:	4413      	add	r3, r2
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	440b      	add	r3, r1
 800c424:	3312      	adds	r3, #18
 800c426:	4602      	mov	r2, r0
 800c428:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c42a:	493e      	ldr	r1, [pc, #248]	; (800c524 <etharp_tmr+0x14c>)
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	4613      	mov	r3, r2
 800c430:	005b      	lsls	r3, r3, #1
 800c432:	4413      	add	r3, r2
 800c434:	00db      	lsls	r3, r3, #3
 800c436:	440b      	add	r3, r1
 800c438:	3312      	adds	r3, #18
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c440:	d215      	bcs.n	800c46e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c442:	4938      	ldr	r1, [pc, #224]	; (800c524 <etharp_tmr+0x14c>)
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	4613      	mov	r3, r2
 800c448:	005b      	lsls	r3, r3, #1
 800c44a:	4413      	add	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	440b      	add	r3, r1
 800c450:	3314      	adds	r3, #20
 800c452:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c454:	2b01      	cmp	r3, #1
 800c456:	d10e      	bne.n	800c476 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c458:	4932      	ldr	r1, [pc, #200]	; (800c524 <etharp_tmr+0x14c>)
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	4613      	mov	r3, r2
 800c45e:	005b      	lsls	r3, r3, #1
 800c460:	4413      	add	r3, r2
 800c462:	00db      	lsls	r3, r3, #3
 800c464:	440b      	add	r3, r1
 800c466:	3312      	adds	r3, #18
 800c468:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c46a:	2b04      	cmp	r3, #4
 800c46c:	d903      	bls.n	800c476 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f7ff ff80 	bl	800c374 <etharp_free_entry>
 800c474:	e04a      	b.n	800c50c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c476:	492b      	ldr	r1, [pc, #172]	; (800c524 <etharp_tmr+0x14c>)
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	4613      	mov	r3, r2
 800c47c:	005b      	lsls	r3, r3, #1
 800c47e:	4413      	add	r3, r2
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	440b      	add	r3, r1
 800c484:	3314      	adds	r3, #20
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d10a      	bne.n	800c4a2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c48c:	4925      	ldr	r1, [pc, #148]	; (800c524 <etharp_tmr+0x14c>)
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	4613      	mov	r3, r2
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	4413      	add	r3, r2
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	440b      	add	r3, r1
 800c49a:	3314      	adds	r3, #20
 800c49c:	2204      	movs	r2, #4
 800c49e:	701a      	strb	r2, [r3, #0]
 800c4a0:	e034      	b.n	800c50c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c4a2:	4920      	ldr	r1, [pc, #128]	; (800c524 <etharp_tmr+0x14c>)
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	4613      	mov	r3, r2
 800c4a8:	005b      	lsls	r3, r3, #1
 800c4aa:	4413      	add	r3, r2
 800c4ac:	00db      	lsls	r3, r3, #3
 800c4ae:	440b      	add	r3, r1
 800c4b0:	3314      	adds	r3, #20
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	2b04      	cmp	r3, #4
 800c4b6:	d10a      	bne.n	800c4ce <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c4b8:	491a      	ldr	r1, [pc, #104]	; (800c524 <etharp_tmr+0x14c>)
 800c4ba:	687a      	ldr	r2, [r7, #4]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	4413      	add	r3, r2
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	440b      	add	r3, r1
 800c4c6:	3314      	adds	r3, #20
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	701a      	strb	r2, [r3, #0]
 800c4cc:	e01e      	b.n	800c50c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c4ce:	4915      	ldr	r1, [pc, #84]	; (800c524 <etharp_tmr+0x14c>)
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	4613      	mov	r3, r2
 800c4d4:	005b      	lsls	r3, r3, #1
 800c4d6:	4413      	add	r3, r2
 800c4d8:	00db      	lsls	r3, r3, #3
 800c4da:	440b      	add	r3, r1
 800c4dc:	3314      	adds	r3, #20
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d113      	bne.n	800c50c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c4e4:	490f      	ldr	r1, [pc, #60]	; (800c524 <etharp_tmr+0x14c>)
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	4613      	mov	r3, r2
 800c4ea:	005b      	lsls	r3, r3, #1
 800c4ec:	4413      	add	r3, r2
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	440b      	add	r3, r1
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	6818      	ldr	r0, [r3, #0]
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	4413      	add	r3, r2
 800c4fe:	00db      	lsls	r3, r3, #3
 800c500:	4a08      	ldr	r2, [pc, #32]	; (800c524 <etharp_tmr+0x14c>)
 800c502:	4413      	add	r3, r2
 800c504:	3304      	adds	r3, #4
 800c506:	4619      	mov	r1, r3
 800c508:	f000 fe6e 	bl	800d1e8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	3301      	adds	r3, #1
 800c510:	607b      	str	r3, [r7, #4]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b09      	cmp	r3, #9
 800c516:	f77f af65 	ble.w	800c3e4 <etharp_tmr+0xc>
      }
    }
  }
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	24008664 	.word	0x24008664

0800c528 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b08a      	sub	sp, #40	; 0x28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	460b      	mov	r3, r1
 800c532:	607a      	str	r2, [r7, #4]
 800c534:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c536:	230a      	movs	r3, #10
 800c538:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c53a:	230a      	movs	r3, #10
 800c53c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c53e:	230a      	movs	r3, #10
 800c540:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c546:	230a      	movs	r3, #10
 800c548:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	83bb      	strh	r3, [r7, #28]
 800c54e:	2300      	movs	r3, #0
 800c550:	837b      	strh	r3, [r7, #26]
 800c552:	2300      	movs	r3, #0
 800c554:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c556:	2300      	movs	r3, #0
 800c558:	843b      	strh	r3, [r7, #32]
 800c55a:	e0ae      	b.n	800c6ba <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c55c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c560:	49a6      	ldr	r1, [pc, #664]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c562:	4613      	mov	r3, r2
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	4413      	add	r3, r2
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	440b      	add	r3, r1
 800c56c:	3314      	adds	r3, #20
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c572:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c576:	2b0a      	cmp	r3, #10
 800c578:	d105      	bne.n	800c586 <etharp_find_entry+0x5e>
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c580:	8c3b      	ldrh	r3, [r7, #32]
 800c582:	847b      	strh	r3, [r7, #34]	; 0x22
 800c584:	e095      	b.n	800c6b2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c586:	7dfb      	ldrb	r3, [r7, #23]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 8092 	beq.w	800c6b2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d009      	beq.n	800c5a8 <etharp_find_entry+0x80>
 800c594:	7dfb      	ldrb	r3, [r7, #23]
 800c596:	2b01      	cmp	r3, #1
 800c598:	d806      	bhi.n	800c5a8 <etharp_find_entry+0x80>
 800c59a:	4b99      	ldr	r3, [pc, #612]	; (800c800 <etharp_find_entry+0x2d8>)
 800c59c:	f240 1223 	movw	r2, #291	; 0x123
 800c5a0:	4998      	ldr	r1, [pc, #608]	; (800c804 <etharp_find_entry+0x2dc>)
 800c5a2:	4899      	ldr	r0, [pc, #612]	; (800c808 <etharp_find_entry+0x2e0>)
 800c5a4:	f00b fbb6 	bl	8017d14 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d020      	beq.n	800c5f0 <etharp_find_entry+0xc8>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6819      	ldr	r1, [r3, #0]
 800c5b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5b6:	4891      	ldr	r0, [pc, #580]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	4413      	add	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	4403      	add	r3, r0
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4299      	cmp	r1, r3
 800c5c8:	d112      	bne.n	800c5f0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00c      	beq.n	800c5ea <etharp_find_entry+0xc2>
 800c5d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5d4:	4989      	ldr	r1, [pc, #548]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	4413      	add	r3, r2
 800c5dc:	00db      	lsls	r3, r3, #3
 800c5de:	440b      	add	r3, r1
 800c5e0:	3308      	adds	r3, #8
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d102      	bne.n	800c5f0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c5ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5ee:	e100      	b.n	800c7f2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c5f0:	7dfb      	ldrb	r3, [r7, #23]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d140      	bne.n	800c678 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c5f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5fa:	4980      	ldr	r1, [pc, #512]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c5fc:	4613      	mov	r3, r2
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	4413      	add	r3, r2
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	440b      	add	r3, r1
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01a      	beq.n	800c642 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c60c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c610:	497a      	ldr	r1, [pc, #488]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c612:	4613      	mov	r3, r2
 800c614:	005b      	lsls	r3, r3, #1
 800c616:	4413      	add	r3, r2
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	440b      	add	r3, r1
 800c61c:	3312      	adds	r3, #18
 800c61e:	881b      	ldrh	r3, [r3, #0]
 800c620:	8bba      	ldrh	r2, [r7, #28]
 800c622:	429a      	cmp	r2, r3
 800c624:	d845      	bhi.n	800c6b2 <etharp_find_entry+0x18a>
            old_queue = i;
 800c626:	8c3b      	ldrh	r3, [r7, #32]
 800c628:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c62a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c62e:	4973      	ldr	r1, [pc, #460]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c630:	4613      	mov	r3, r2
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	4413      	add	r3, r2
 800c636:	00db      	lsls	r3, r3, #3
 800c638:	440b      	add	r3, r1
 800c63a:	3312      	adds	r3, #18
 800c63c:	881b      	ldrh	r3, [r3, #0]
 800c63e:	83bb      	strh	r3, [r7, #28]
 800c640:	e037      	b.n	800c6b2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c642:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c646:	496d      	ldr	r1, [pc, #436]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c648:	4613      	mov	r3, r2
 800c64a:	005b      	lsls	r3, r3, #1
 800c64c:	4413      	add	r3, r2
 800c64e:	00db      	lsls	r3, r3, #3
 800c650:	440b      	add	r3, r1
 800c652:	3312      	adds	r3, #18
 800c654:	881b      	ldrh	r3, [r3, #0]
 800c656:	8b7a      	ldrh	r2, [r7, #26]
 800c658:	429a      	cmp	r2, r3
 800c65a:	d82a      	bhi.n	800c6b2 <etharp_find_entry+0x18a>
            old_pending = i;
 800c65c:	8c3b      	ldrh	r3, [r7, #32]
 800c65e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c660:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c664:	4965      	ldr	r1, [pc, #404]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c666:	4613      	mov	r3, r2
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	4413      	add	r3, r2
 800c66c:	00db      	lsls	r3, r3, #3
 800c66e:	440b      	add	r3, r1
 800c670:	3312      	adds	r3, #18
 800c672:	881b      	ldrh	r3, [r3, #0]
 800c674:	837b      	strh	r3, [r7, #26]
 800c676:	e01c      	b.n	800c6b2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c678:	7dfb      	ldrb	r3, [r7, #23]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d919      	bls.n	800c6b2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c67e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c682:	495e      	ldr	r1, [pc, #376]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c684:	4613      	mov	r3, r2
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	4413      	add	r3, r2
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	440b      	add	r3, r1
 800c68e:	3312      	adds	r3, #18
 800c690:	881b      	ldrh	r3, [r3, #0]
 800c692:	8b3a      	ldrh	r2, [r7, #24]
 800c694:	429a      	cmp	r2, r3
 800c696:	d80c      	bhi.n	800c6b2 <etharp_find_entry+0x18a>
            old_stable = i;
 800c698:	8c3b      	ldrh	r3, [r7, #32]
 800c69a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c69c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6a0:	4956      	ldr	r1, [pc, #344]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	4413      	add	r3, r2
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	440b      	add	r3, r1
 800c6ac:	3312      	adds	r3, #18
 800c6ae:	881b      	ldrh	r3, [r3, #0]
 800c6b0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6b2:	8c3b      	ldrh	r3, [r7, #32]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	843b      	strh	r3, [r7, #32]
 800c6ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c6be:	2b09      	cmp	r3, #9
 800c6c0:	f77f af4c 	ble.w	800c55c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c6c4:	7afb      	ldrb	r3, [r7, #11]
 800c6c6:	f003 0302 	and.w	r3, r3, #2
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d108      	bne.n	800c6e0 <etharp_find_entry+0x1b8>
 800c6ce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6d2:	2b0a      	cmp	r3, #10
 800c6d4:	d107      	bne.n	800c6e6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c6d6:	7afb      	ldrb	r3, [r7, #11]
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d102      	bne.n	800c6e6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e4:	e085      	b.n	800c7f2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c6e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6ea:	2b09      	cmp	r3, #9
 800c6ec:	dc02      	bgt.n	800c6f4 <etharp_find_entry+0x1cc>
    i = empty;
 800c6ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6f0:	843b      	strh	r3, [r7, #32]
 800c6f2:	e039      	b.n	800c768 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c6f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c6f8:	2b09      	cmp	r3, #9
 800c6fa:	dc14      	bgt.n	800c726 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c6fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6fe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c700:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c704:	493d      	ldr	r1, [pc, #244]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c706:	4613      	mov	r3, r2
 800c708:	005b      	lsls	r3, r3, #1
 800c70a:	4413      	add	r3, r2
 800c70c:	00db      	lsls	r3, r3, #3
 800c70e:	440b      	add	r3, r1
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d018      	beq.n	800c748 <etharp_find_entry+0x220>
 800c716:	4b3a      	ldr	r3, [pc, #232]	; (800c800 <etharp_find_entry+0x2d8>)
 800c718:	f240 126d 	movw	r2, #365	; 0x16d
 800c71c:	493b      	ldr	r1, [pc, #236]	; (800c80c <etharp_find_entry+0x2e4>)
 800c71e:	483a      	ldr	r0, [pc, #232]	; (800c808 <etharp_find_entry+0x2e0>)
 800c720:	f00b faf8 	bl	8017d14 <iprintf>
 800c724:	e010      	b.n	800c748 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c726:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c72a:	2b09      	cmp	r3, #9
 800c72c:	dc02      	bgt.n	800c734 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c72e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c730:	843b      	strh	r3, [r7, #32]
 800c732:	e009      	b.n	800c748 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c734:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c738:	2b09      	cmp	r3, #9
 800c73a:	dc02      	bgt.n	800c742 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c73c:	8bfb      	ldrh	r3, [r7, #30]
 800c73e:	843b      	strh	r3, [r7, #32]
 800c740:	e002      	b.n	800c748 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c746:	e054      	b.n	800c7f2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c748:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c74c:	2b09      	cmp	r3, #9
 800c74e:	dd06      	ble.n	800c75e <etharp_find_entry+0x236>
 800c750:	4b2b      	ldr	r3, [pc, #172]	; (800c800 <etharp_find_entry+0x2d8>)
 800c752:	f240 127f 	movw	r2, #383	; 0x17f
 800c756:	492e      	ldr	r1, [pc, #184]	; (800c810 <etharp_find_entry+0x2e8>)
 800c758:	482b      	ldr	r0, [pc, #172]	; (800c808 <etharp_find_entry+0x2e0>)
 800c75a:	f00b fadb 	bl	8017d14 <iprintf>
    etharp_free_entry(i);
 800c75e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff fe06 	bl	800c374 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c768:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c76c:	2b09      	cmp	r3, #9
 800c76e:	dd06      	ble.n	800c77e <etharp_find_entry+0x256>
 800c770:	4b23      	ldr	r3, [pc, #140]	; (800c800 <etharp_find_entry+0x2d8>)
 800c772:	f240 1283 	movw	r2, #387	; 0x183
 800c776:	4926      	ldr	r1, [pc, #152]	; (800c810 <etharp_find_entry+0x2e8>)
 800c778:	4823      	ldr	r0, [pc, #140]	; (800c808 <etharp_find_entry+0x2e0>)
 800c77a:	f00b facb 	bl	8017d14 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c77e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c782:	491e      	ldr	r1, [pc, #120]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	3314      	adds	r3, #20
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d006      	beq.n	800c7a4 <etharp_find_entry+0x27c>
 800c796:	4b1a      	ldr	r3, [pc, #104]	; (800c800 <etharp_find_entry+0x2d8>)
 800c798:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c79c:	491d      	ldr	r1, [pc, #116]	; (800c814 <etharp_find_entry+0x2ec>)
 800c79e:	481a      	ldr	r0, [pc, #104]	; (800c808 <etharp_find_entry+0x2e0>)
 800c7a0:	f00b fab8 	bl	8017d14 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00b      	beq.n	800c7c2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c7aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6819      	ldr	r1, [r3, #0]
 800c7b2:	4812      	ldr	r0, [pc, #72]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	4413      	add	r3, r2
 800c7ba:	00db      	lsls	r3, r3, #3
 800c7bc:	4403      	add	r3, r0
 800c7be:	3304      	adds	r3, #4
 800c7c0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c7c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7c6:	490d      	ldr	r1, [pc, #52]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	005b      	lsls	r3, r3, #1
 800c7cc:	4413      	add	r3, r2
 800c7ce:	00db      	lsls	r3, r3, #3
 800c7d0:	440b      	add	r3, r1
 800c7d2:	3312      	adds	r3, #18
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c7d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c7dc:	4907      	ldr	r1, [pc, #28]	; (800c7fc <etharp_find_entry+0x2d4>)
 800c7de:	4613      	mov	r3, r2
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	4413      	add	r3, r2
 800c7e4:	00db      	lsls	r3, r3, #3
 800c7e6:	440b      	add	r3, r1
 800c7e8:	3308      	adds	r3, #8
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c7ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3728      	adds	r7, #40	; 0x28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	24008664 	.word	0x24008664
 800c800:	080199a0 	.word	0x080199a0
 800c804:	08019a20 	.word	0x08019a20
 800c808:	08019a60 	.word	0x08019a60
 800c80c:	08019a88 	.word	0x08019a88
 800c810:	08019aa0 	.word	0x08019aa0
 800c814:	08019ab4 	.word	0x08019ab4

0800c818 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b088      	sub	sp, #32
 800c81c:	af02      	add	r7, sp, #8
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c82c:	2b06      	cmp	r3, #6
 800c82e:	d006      	beq.n	800c83e <etharp_update_arp_entry+0x26>
 800c830:	4b48      	ldr	r3, [pc, #288]	; (800c954 <etharp_update_arp_entry+0x13c>)
 800c832:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c836:	4948      	ldr	r1, [pc, #288]	; (800c958 <etharp_update_arp_entry+0x140>)
 800c838:	4848      	ldr	r0, [pc, #288]	; (800c95c <etharp_update_arp_entry+0x144>)
 800c83a:	f00b fa6b 	bl	8017d14 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d012      	beq.n	800c86a <etharp_update_arp_entry+0x52>
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d00e      	beq.n	800c86a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68f9      	ldr	r1, [r7, #12]
 800c852:	4618      	mov	r0, r3
 800c854:	f001 face 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 800c858:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d105      	bne.n	800c86a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c866:	2be0      	cmp	r3, #224	; 0xe0
 800c868:	d102      	bne.n	800c870 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c86a:	f06f 030f 	mvn.w	r3, #15
 800c86e:	e06c      	b.n	800c94a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	4619      	mov	r1, r3
 800c876:	68b8      	ldr	r0, [r7, #8]
 800c878:	f7ff fe56 	bl	800c528 <etharp_find_entry>
 800c87c:	4603      	mov	r3, r0
 800c87e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c880:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c884:	2b00      	cmp	r3, #0
 800c886:	da02      	bge.n	800c88e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c888:	8afb      	ldrh	r3, [r7, #22]
 800c88a:	b25b      	sxtb	r3, r3
 800c88c:	e05d      	b.n	800c94a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c88e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c892:	4933      	ldr	r1, [pc, #204]	; (800c960 <etharp_update_arp_entry+0x148>)
 800c894:	4613      	mov	r3, r2
 800c896:	005b      	lsls	r3, r3, #1
 800c898:	4413      	add	r3, r2
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	440b      	add	r3, r1
 800c89e:	3314      	adds	r3, #20
 800c8a0:	2202      	movs	r2, #2
 800c8a2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c8a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8a8:	492d      	ldr	r1, [pc, #180]	; (800c960 <etharp_update_arp_entry+0x148>)
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	4413      	add	r3, r2
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	440b      	add	r3, r1
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	68fa      	ldr	r2, [r7, #12]
 800c8b8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c8ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	4413      	add	r3, r2
 800c8c4:	00db      	lsls	r3, r3, #3
 800c8c6:	3308      	adds	r3, #8
 800c8c8:	4a25      	ldr	r2, [pc, #148]	; (800c960 <etharp_update_arp_entry+0x148>)
 800c8ca:	4413      	add	r3, r2
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	2206      	movs	r2, #6
 800c8d0:	6879      	ldr	r1, [r7, #4]
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f00b f959 	bl	8017b8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c8d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8dc:	4920      	ldr	r1, [pc, #128]	; (800c960 <etharp_update_arp_entry+0x148>)
 800c8de:	4613      	mov	r3, r2
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	4413      	add	r3, r2
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	440b      	add	r3, r1
 800c8e8:	3312      	adds	r3, #18
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c8ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8f2:	491b      	ldr	r1, [pc, #108]	; (800c960 <etharp_update_arp_entry+0x148>)
 800c8f4:	4613      	mov	r3, r2
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	4413      	add	r3, r2
 800c8fa:	00db      	lsls	r3, r3, #3
 800c8fc:	440b      	add	r3, r1
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d021      	beq.n	800c948 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c904:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c908:	4915      	ldr	r1, [pc, #84]	; (800c960 <etharp_update_arp_entry+0x148>)
 800c90a:	4613      	mov	r3, r2
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	4413      	add	r3, r2
 800c910:	00db      	lsls	r3, r3, #3
 800c912:	440b      	add	r3, r1
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c918:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c91c:	4910      	ldr	r1, [pc, #64]	; (800c960 <etharp_update_arp_entry+0x148>)
 800c91e:	4613      	mov	r3, r2
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	4413      	add	r3, r2
 800c924:	00db      	lsls	r3, r3, #3
 800c926:	440b      	add	r3, r1
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6939      	ldr	r1, [r7, #16]
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f000 fcf3 	bl	800d328 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c942:	6938      	ldr	r0, [r7, #16]
 800c944:	f003 fcbc 	bl	80102c0 <pbuf_free>
  }
  return ERR_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3718      	adds	r7, #24
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	080199a0 	.word	0x080199a0
 800c958:	08019ae0 	.word	0x08019ae0
 800c95c:	08019a60 	.word	0x08019a60
 800c960:	24008664 	.word	0x24008664

0800c964 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b084      	sub	sp, #16
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c96c:	2300      	movs	r3, #0
 800c96e:	60fb      	str	r3, [r7, #12]
 800c970:	e01e      	b.n	800c9b0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c972:	4913      	ldr	r1, [pc, #76]	; (800c9c0 <etharp_cleanup_netif+0x5c>)
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	4613      	mov	r3, r2
 800c978:	005b      	lsls	r3, r3, #1
 800c97a:	4413      	add	r3, r2
 800c97c:	00db      	lsls	r3, r3, #3
 800c97e:	440b      	add	r3, r1
 800c980:	3314      	adds	r3, #20
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c986:	7afb      	ldrb	r3, [r7, #11]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d00e      	beq.n	800c9aa <etharp_cleanup_netif+0x46>
 800c98c:	490c      	ldr	r1, [pc, #48]	; (800c9c0 <etharp_cleanup_netif+0x5c>)
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	4613      	mov	r3, r2
 800c992:	005b      	lsls	r3, r3, #1
 800c994:	4413      	add	r3, r2
 800c996:	00db      	lsls	r3, r3, #3
 800c998:	440b      	add	r3, r1
 800c99a:	3308      	adds	r3, #8
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d102      	bne.n	800c9aa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c9a4:	68f8      	ldr	r0, [r7, #12]
 800c9a6:	f7ff fce5 	bl	800c374 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b09      	cmp	r3, #9
 800c9b4:	dddd      	ble.n	800c972 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c9b6:	bf00      	nop
 800c9b8:	bf00      	nop
 800c9ba:	3710      	adds	r7, #16
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	24008664 	.word	0x24008664

0800c9c4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c9c4:	b5b0      	push	{r4, r5, r7, lr}
 800c9c6:	b08a      	sub	sp, #40	; 0x28
 800c9c8:	af04      	add	r7, sp, #16
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d107      	bne.n	800c9e4 <etharp_input+0x20>
 800c9d4:	4b3d      	ldr	r3, [pc, #244]	; (800cacc <etharp_input+0x108>)
 800c9d6:	f240 228a 	movw	r2, #650	; 0x28a
 800c9da:	493d      	ldr	r1, [pc, #244]	; (800cad0 <etharp_input+0x10c>)
 800c9dc:	483d      	ldr	r0, [pc, #244]	; (800cad4 <etharp_input+0x110>)
 800c9de:	f00b f999 	bl	8017d14 <iprintf>
 800c9e2:	e06f      	b.n	800cac4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	881b      	ldrh	r3, [r3, #0]
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9f4:	d10c      	bne.n	800ca10 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9fa:	2b06      	cmp	r3, #6
 800c9fc:	d108      	bne.n	800ca10 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ca02:	2b04      	cmp	r3, #4
 800ca04:	d104      	bne.n	800ca10 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	885b      	ldrh	r3, [r3, #2]
 800ca0a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ca0c:	2b08      	cmp	r3, #8
 800ca0e:	d003      	beq.n	800ca18 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f003 fc55 	bl	80102c0 <pbuf_free>
    return;
 800ca16:	e055      	b.n	800cac4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	330e      	adds	r3, #14
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	3318      	adds	r3, #24
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d102      	bne.n	800ca38 <etharp_input+0x74>
    for_us = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	75fb      	strb	r3, [r7, #23]
 800ca36:	e009      	b.n	800ca4c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	bf0c      	ite	eq
 800ca44:	2301      	moveq	r3, #1
 800ca46:	2300      	movne	r3, #0
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	f103 0208 	add.w	r2, r3, #8
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <etharp_input+0x98>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e000      	b.n	800ca5e <etharp_input+0x9a>
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	f107 010c 	add.w	r1, r7, #12
 800ca62:	6838      	ldr	r0, [r7, #0]
 800ca64:	f7ff fed8 	bl	800c818 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	88db      	ldrh	r3, [r3, #6]
 800ca6c:	b29b      	uxth	r3, r3
 800ca6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca72:	d003      	beq.n	800ca7c <etharp_input+0xb8>
 800ca74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca78:	d01e      	beq.n	800cab8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ca7a:	e020      	b.n	800cabe <etharp_input+0xfa>
      if (for_us) {
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d01c      	beq.n	800cabc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ca98:	693a      	ldr	r2, [r7, #16]
 800ca9a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ca9c:	2102      	movs	r1, #2
 800ca9e:	9103      	str	r1, [sp, #12]
 800caa0:	f107 010c 	add.w	r1, r7, #12
 800caa4:	9102      	str	r1, [sp, #8]
 800caa6:	9201      	str	r2, [sp, #4]
 800caa8:	9300      	str	r3, [sp, #0]
 800caaa:	462b      	mov	r3, r5
 800caac:	4622      	mov	r2, r4
 800caae:	4601      	mov	r1, r0
 800cab0:	6838      	ldr	r0, [r7, #0]
 800cab2:	f000 faeb 	bl	800d08c <etharp_raw>
      break;
 800cab6:	e001      	b.n	800cabc <etharp_input+0xf8>
      break;
 800cab8:	bf00      	nop
 800caba:	e000      	b.n	800cabe <etharp_input+0xfa>
      break;
 800cabc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f003 fbfe 	bl	80102c0 <pbuf_free>
}
 800cac4:	3718      	adds	r7, #24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bdb0      	pop	{r4, r5, r7, pc}
 800caca:	bf00      	nop
 800cacc:	080199a0 	.word	0x080199a0
 800cad0:	08019b38 	.word	0x08019b38
 800cad4:	08019a60 	.word	0x08019a60

0800cad8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b086      	sub	sp, #24
 800cadc:	af02      	add	r7, sp, #8
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	4613      	mov	r3, r2
 800cae4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cae6:	79fa      	ldrb	r2, [r7, #7]
 800cae8:	4944      	ldr	r1, [pc, #272]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800caea:	4613      	mov	r3, r2
 800caec:	005b      	lsls	r3, r3, #1
 800caee:	4413      	add	r3, r2
 800caf0:	00db      	lsls	r3, r3, #3
 800caf2:	440b      	add	r3, r1
 800caf4:	3314      	adds	r3, #20
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d806      	bhi.n	800cb0a <etharp_output_to_arp_index+0x32>
 800cafc:	4b40      	ldr	r3, [pc, #256]	; (800cc00 <etharp_output_to_arp_index+0x128>)
 800cafe:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cb02:	4940      	ldr	r1, [pc, #256]	; (800cc04 <etharp_output_to_arp_index+0x12c>)
 800cb04:	4840      	ldr	r0, [pc, #256]	; (800cc08 <etharp_output_to_arp_index+0x130>)
 800cb06:	f00b f905 	bl	8017d14 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cb0a:	79fa      	ldrb	r2, [r7, #7]
 800cb0c:	493b      	ldr	r1, [pc, #236]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cb0e:	4613      	mov	r3, r2
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	4413      	add	r3, r2
 800cb14:	00db      	lsls	r3, r3, #3
 800cb16:	440b      	add	r3, r1
 800cb18:	3314      	adds	r3, #20
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	d153      	bne.n	800cbc8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cb20:	79fa      	ldrb	r2, [r7, #7]
 800cb22:	4936      	ldr	r1, [pc, #216]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cb24:	4613      	mov	r3, r2
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	4413      	add	r3, r2
 800cb2a:	00db      	lsls	r3, r3, #3
 800cb2c:	440b      	add	r3, r1
 800cb2e:	3312      	adds	r3, #18
 800cb30:	881b      	ldrh	r3, [r3, #0]
 800cb32:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cb36:	d919      	bls.n	800cb6c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cb38:	79fa      	ldrb	r2, [r7, #7]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	4413      	add	r3, r2
 800cb40:	00db      	lsls	r3, r3, #3
 800cb42:	4a2e      	ldr	r2, [pc, #184]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cb44:	4413      	add	r3, r2
 800cb46:	3304      	adds	r3, #4
 800cb48:	4619      	mov	r1, r3
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f000 fb4c 	bl	800d1e8 <etharp_request>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d138      	bne.n	800cbc8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb56:	79fa      	ldrb	r2, [r7, #7]
 800cb58:	4928      	ldr	r1, [pc, #160]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	4413      	add	r3, r2
 800cb60:	00db      	lsls	r3, r3, #3
 800cb62:	440b      	add	r3, r1
 800cb64:	3314      	adds	r3, #20
 800cb66:	2203      	movs	r2, #3
 800cb68:	701a      	strb	r2, [r3, #0]
 800cb6a:	e02d      	b.n	800cbc8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cb6c:	79fa      	ldrb	r2, [r7, #7]
 800cb6e:	4923      	ldr	r1, [pc, #140]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cb70:	4613      	mov	r3, r2
 800cb72:	005b      	lsls	r3, r3, #1
 800cb74:	4413      	add	r3, r2
 800cb76:	00db      	lsls	r3, r3, #3
 800cb78:	440b      	add	r3, r1
 800cb7a:	3312      	adds	r3, #18
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cb82:	d321      	bcc.n	800cbc8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cb84:	79fa      	ldrb	r2, [r7, #7]
 800cb86:	4613      	mov	r3, r2
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	4413      	add	r3, r2
 800cb8c:	00db      	lsls	r3, r3, #3
 800cb8e:	4a1b      	ldr	r2, [pc, #108]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cb90:	4413      	add	r3, r2
 800cb92:	1d19      	adds	r1, r3, #4
 800cb94:	79fa      	ldrb	r2, [r7, #7]
 800cb96:	4613      	mov	r3, r2
 800cb98:	005b      	lsls	r3, r3, #1
 800cb9a:	4413      	add	r3, r2
 800cb9c:	00db      	lsls	r3, r3, #3
 800cb9e:	3308      	adds	r3, #8
 800cba0:	4a16      	ldr	r2, [pc, #88]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cba2:	4413      	add	r3, r2
 800cba4:	3304      	adds	r3, #4
 800cba6:	461a      	mov	r2, r3
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f000 fafb 	bl	800d1a4 <etharp_request_dst>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d109      	bne.n	800cbc8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cbb4:	79fa      	ldrb	r2, [r7, #7]
 800cbb6:	4911      	ldr	r1, [pc, #68]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cbb8:	4613      	mov	r3, r2
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	4413      	add	r3, r2
 800cbbe:	00db      	lsls	r3, r3, #3
 800cbc0:	440b      	add	r3, r1
 800cbc2:	3314      	adds	r3, #20
 800cbc4:	2203      	movs	r2, #3
 800cbc6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cbce:	79fa      	ldrb	r2, [r7, #7]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	4413      	add	r3, r2
 800cbd6:	00db      	lsls	r3, r3, #3
 800cbd8:	3308      	adds	r3, #8
 800cbda:	4a08      	ldr	r2, [pc, #32]	; (800cbfc <etharp_output_to_arp_index+0x124>)
 800cbdc:	4413      	add	r3, r2
 800cbde:	3304      	adds	r3, #4
 800cbe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbe4:	9200      	str	r2, [sp, #0]
 800cbe6:	460a      	mov	r2, r1
 800cbe8:	68b9      	ldr	r1, [r7, #8]
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f000 fb9c 	bl	800d328 <ethernet_output>
 800cbf0:	4603      	mov	r3, r0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	24008664 	.word	0x24008664
 800cc00:	080199a0 	.word	0x080199a0
 800cc04:	08019b58 	.word	0x08019b58
 800cc08:	08019a60 	.word	0x08019a60

0800cc0c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b08a      	sub	sp, #40	; 0x28
 800cc10:	af02      	add	r7, sp, #8
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <etharp_output+0x24>
 800cc22:	4b73      	ldr	r3, [pc, #460]	; (800cdf0 <etharp_output+0x1e4>)
 800cc24:	f240 321e 	movw	r2, #798	; 0x31e
 800cc28:	4972      	ldr	r1, [pc, #456]	; (800cdf4 <etharp_output+0x1e8>)
 800cc2a:	4873      	ldr	r0, [pc, #460]	; (800cdf8 <etharp_output+0x1ec>)
 800cc2c:	f00b f872 	bl	8017d14 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d106      	bne.n	800cc44 <etharp_output+0x38>
 800cc36:	4b6e      	ldr	r3, [pc, #440]	; (800cdf0 <etharp_output+0x1e4>)
 800cc38:	f240 321f 	movw	r2, #799	; 0x31f
 800cc3c:	496f      	ldr	r1, [pc, #444]	; (800cdfc <etharp_output+0x1f0>)
 800cc3e:	486e      	ldr	r0, [pc, #440]	; (800cdf8 <etharp_output+0x1ec>)
 800cc40:	f00b f868 	bl	8017d14 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d106      	bne.n	800cc58 <etharp_output+0x4c>
 800cc4a:	4b69      	ldr	r3, [pc, #420]	; (800cdf0 <etharp_output+0x1e4>)
 800cc4c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc50:	496b      	ldr	r1, [pc, #428]	; (800ce00 <etharp_output+0x1f4>)
 800cc52:	4869      	ldr	r0, [pc, #420]	; (800cdf8 <etharp_output+0x1ec>)
 800cc54:	f00b f85e 	bl	8017d14 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68f9      	ldr	r1, [r7, #12]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f001 f8c8 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 800cc64:	4603      	mov	r3, r0
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cc6a:	4b66      	ldr	r3, [pc, #408]	; (800ce04 <etharp_output+0x1f8>)
 800cc6c:	61fb      	str	r3, [r7, #28]
 800cc6e:	e0af      	b.n	800cdd0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc78:	2be0      	cmp	r3, #224	; 0xe0
 800cc7a:	d118      	bne.n	800ccae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cc80:	2300      	movs	r3, #0
 800cc82:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cc84:	235e      	movs	r3, #94	; 0x5e
 800cc86:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc92:	b2db      	uxtb	r3, r3
 800cc94:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	3302      	adds	r3, #2
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	3303      	adds	r3, #3
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cca6:	f107 0310 	add.w	r3, r7, #16
 800ccaa:	61fb      	str	r3, [r7, #28]
 800ccac:	e090      	b.n	800cdd0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	405a      	eors	r2, r3
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	3308      	adds	r3, #8
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d012      	beq.n	800ccec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cccc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ccd0:	4293      	cmp	r3, r2
 800ccd2:	d00b      	beq.n	800ccec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	330c      	adds	r3, #12
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d003      	beq.n	800cce6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	330c      	adds	r3, #12
 800cce2:	61bb      	str	r3, [r7, #24]
 800cce4:	e002      	b.n	800ccec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cce6:	f06f 0303 	mvn.w	r3, #3
 800ccea:	e07d      	b.n	800cde8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ccec:	4b46      	ldr	r3, [pc, #280]	; (800ce08 <etharp_output+0x1fc>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4a46      	ldr	r2, [pc, #280]	; (800ce0c <etharp_output+0x200>)
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	005b      	lsls	r3, r3, #1
 800ccf8:	440b      	add	r3, r1
 800ccfa:	00db      	lsls	r3, r3, #3
 800ccfc:	4413      	add	r3, r2
 800ccfe:	3314      	adds	r3, #20
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d925      	bls.n	800cd52 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd06:	4b40      	ldr	r3, [pc, #256]	; (800ce08 <etharp_output+0x1fc>)
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4a3f      	ldr	r2, [pc, #252]	; (800ce0c <etharp_output+0x200>)
 800cd0e:	460b      	mov	r3, r1
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	440b      	add	r3, r1
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	4413      	add	r3, r2
 800cd18:	3308      	adds	r3, #8
 800cd1a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	429a      	cmp	r2, r3
 800cd20:	d117      	bne.n	800cd52 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	4b38      	ldr	r3, [pc, #224]	; (800ce08 <etharp_output+0x1fc>)
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	4937      	ldr	r1, [pc, #220]	; (800ce0c <etharp_output+0x200>)
 800cd2e:	4603      	mov	r3, r0
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4403      	add	r3, r0
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	440b      	add	r3, r1
 800cd38:	3304      	adds	r3, #4
 800cd3a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d108      	bne.n	800cd52 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800cd40:	4b31      	ldr	r3, [pc, #196]	; (800ce08 <etharp_output+0x1fc>)
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	461a      	mov	r2, r3
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff fec5 	bl	800cad8 <etharp_output_to_arp_index>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	e04a      	b.n	800cde8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd52:	2300      	movs	r3, #0
 800cd54:	75fb      	strb	r3, [r7, #23]
 800cd56:	e031      	b.n	800cdbc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd58:	7dfa      	ldrb	r2, [r7, #23]
 800cd5a:	492c      	ldr	r1, [pc, #176]	; (800ce0c <etharp_output+0x200>)
 800cd5c:	4613      	mov	r3, r2
 800cd5e:	005b      	lsls	r3, r3, #1
 800cd60:	4413      	add	r3, r2
 800cd62:	00db      	lsls	r3, r3, #3
 800cd64:	440b      	add	r3, r1
 800cd66:	3314      	adds	r3, #20
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	d923      	bls.n	800cdb6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cd6e:	7dfa      	ldrb	r2, [r7, #23]
 800cd70:	4926      	ldr	r1, [pc, #152]	; (800ce0c <etharp_output+0x200>)
 800cd72:	4613      	mov	r3, r2
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	4413      	add	r3, r2
 800cd78:	00db      	lsls	r3, r3, #3
 800cd7a:	440b      	add	r3, r1
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d117      	bne.n	800cdb6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	6819      	ldr	r1, [r3, #0]
 800cd8a:	7dfa      	ldrb	r2, [r7, #23]
 800cd8c:	481f      	ldr	r0, [pc, #124]	; (800ce0c <etharp_output+0x200>)
 800cd8e:	4613      	mov	r3, r2
 800cd90:	005b      	lsls	r3, r3, #1
 800cd92:	4413      	add	r3, r2
 800cd94:	00db      	lsls	r3, r3, #3
 800cd96:	4403      	add	r3, r0
 800cd98:	3304      	adds	r3, #4
 800cd9a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cd9c:	4299      	cmp	r1, r3
 800cd9e:	d10a      	bne.n	800cdb6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cda0:	4a19      	ldr	r2, [pc, #100]	; (800ce08 <etharp_output+0x1fc>)
 800cda2:	7dfb      	ldrb	r3, [r7, #23]
 800cda4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cda6:	7dfb      	ldrb	r3, [r7, #23]
 800cda8:	461a      	mov	r2, r3
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f7ff fe93 	bl	800cad8 <etharp_output_to_arp_index>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	e018      	b.n	800cde8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	75fb      	strb	r3, [r7, #23]
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	2b09      	cmp	r3, #9
 800cdc0:	d9ca      	bls.n	800cd58 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cdc2:	68ba      	ldr	r2, [r7, #8]
 800cdc4:	69b9      	ldr	r1, [r7, #24]
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f000 f822 	bl	800ce10 <etharp_query>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	e00b      	b.n	800cde8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cdd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	68b9      	ldr	r1, [r7, #8]
 800cde0:	68f8      	ldr	r0, [r7, #12]
 800cde2:	f000 faa1 	bl	800d328 <ethernet_output>
 800cde6:	4603      	mov	r3, r0
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3720      	adds	r7, #32
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	080199a0 	.word	0x080199a0
 800cdf4:	08019b38 	.word	0x08019b38
 800cdf8:	08019a60 	.word	0x08019a60
 800cdfc:	08019b88 	.word	0x08019b88
 800ce00:	08019b28 	.word	0x08019b28
 800ce04:	0801ca48 	.word	0x0801ca48
 800ce08:	24008754 	.word	0x24008754
 800ce0c:	24008664 	.word	0x24008664

0800ce10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b08c      	sub	sp, #48	; 0x30
 800ce14:	af02      	add	r7, sp, #8
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3326      	adds	r3, #38	; 0x26
 800ce20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ce22:	23ff      	movs	r3, #255	; 0xff
 800ce24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	68f9      	ldr	r1, [r7, #12]
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 ffde 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10c      	bne.n	800ce58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce3e:	68bb      	ldr	r3, [r7, #8]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce46:	2be0      	cmp	r3, #224	; 0xe0
 800ce48:	d006      	beq.n	800ce58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d003      	beq.n	800ce58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d102      	bne.n	800ce5e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce58:	f06f 030f 	mvn.w	r3, #15
 800ce5c:	e101      	b.n	800d062 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ce5e:	68fa      	ldr	r2, [r7, #12]
 800ce60:	2101      	movs	r1, #1
 800ce62:	68b8      	ldr	r0, [r7, #8]
 800ce64:	f7ff fb60 	bl	800c528 <etharp_find_entry>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ce6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	da02      	bge.n	800ce7a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ce74:	8a7b      	ldrh	r3, [r7, #18]
 800ce76:	b25b      	sxtb	r3, r3
 800ce78:	e0f3      	b.n	800d062 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ce7a:	8a7b      	ldrh	r3, [r7, #18]
 800ce7c:	2b7e      	cmp	r3, #126	; 0x7e
 800ce7e:	d906      	bls.n	800ce8e <etharp_query+0x7e>
 800ce80:	4b7a      	ldr	r3, [pc, #488]	; (800d06c <etharp_query+0x25c>)
 800ce82:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ce86:	497a      	ldr	r1, [pc, #488]	; (800d070 <etharp_query+0x260>)
 800ce88:	487a      	ldr	r0, [pc, #488]	; (800d074 <etharp_query+0x264>)
 800ce8a:	f00a ff43 	bl	8017d14 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ce8e:	8a7b      	ldrh	r3, [r7, #18]
 800ce90:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce92:	7c7a      	ldrb	r2, [r7, #17]
 800ce94:	4978      	ldr	r1, [pc, #480]	; (800d078 <etharp_query+0x268>)
 800ce96:	4613      	mov	r3, r2
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	4413      	add	r3, r2
 800ce9c:	00db      	lsls	r3, r3, #3
 800ce9e:	440b      	add	r3, r1
 800cea0:	3314      	adds	r3, #20
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d115      	bne.n	800ced4 <etharp_query+0xc4>
    is_new_entry = 1;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ceac:	7c7a      	ldrb	r2, [r7, #17]
 800ceae:	4972      	ldr	r1, [pc, #456]	; (800d078 <etharp_query+0x268>)
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	4413      	add	r3, r2
 800ceb6:	00db      	lsls	r3, r3, #3
 800ceb8:	440b      	add	r3, r1
 800ceba:	3314      	adds	r3, #20
 800cebc:	2201      	movs	r2, #1
 800cebe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cec0:	7c7a      	ldrb	r2, [r7, #17]
 800cec2:	496d      	ldr	r1, [pc, #436]	; (800d078 <etharp_query+0x268>)
 800cec4:	4613      	mov	r3, r2
 800cec6:	005b      	lsls	r3, r3, #1
 800cec8:	4413      	add	r3, r2
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	440b      	add	r3, r1
 800cece:	3308      	adds	r3, #8
 800ced0:	68fa      	ldr	r2, [r7, #12]
 800ced2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ced4:	7c7a      	ldrb	r2, [r7, #17]
 800ced6:	4968      	ldr	r1, [pc, #416]	; (800d078 <etharp_query+0x268>)
 800ced8:	4613      	mov	r3, r2
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	4413      	add	r3, r2
 800cede:	00db      	lsls	r3, r3, #3
 800cee0:	440b      	add	r3, r1
 800cee2:	3314      	adds	r3, #20
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d011      	beq.n	800cf0e <etharp_query+0xfe>
 800ceea:	7c7a      	ldrb	r2, [r7, #17]
 800ceec:	4962      	ldr	r1, [pc, #392]	; (800d078 <etharp_query+0x268>)
 800ceee:	4613      	mov	r3, r2
 800cef0:	005b      	lsls	r3, r3, #1
 800cef2:	4413      	add	r3, r2
 800cef4:	00db      	lsls	r3, r3, #3
 800cef6:	440b      	add	r3, r1
 800cef8:	3314      	adds	r3, #20
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d806      	bhi.n	800cf0e <etharp_query+0xfe>
 800cf00:	4b5a      	ldr	r3, [pc, #360]	; (800d06c <etharp_query+0x25c>)
 800cf02:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cf06:	495d      	ldr	r1, [pc, #372]	; (800d07c <etharp_query+0x26c>)
 800cf08:	485a      	ldr	r0, [pc, #360]	; (800d074 <etharp_query+0x264>)
 800cf0a:	f00a ff03 	bl	8017d14 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d102      	bne.n	800cf1a <etharp_query+0x10a>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10c      	bne.n	800cf34 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cf1a:	68b9      	ldr	r1, [r7, #8]
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	f000 f963 	bl	800d1e8 <etharp_request>
 800cf22:	4603      	mov	r3, r0
 800cf24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d102      	bne.n	800cf34 <etharp_query+0x124>
      return result;
 800cf2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf32:	e096      	b.n	800d062 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d106      	bne.n	800cf48 <etharp_query+0x138>
 800cf3a:	4b4c      	ldr	r3, [pc, #304]	; (800d06c <etharp_query+0x25c>)
 800cf3c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cf40:	494f      	ldr	r1, [pc, #316]	; (800d080 <etharp_query+0x270>)
 800cf42:	484c      	ldr	r0, [pc, #304]	; (800d074 <etharp_query+0x264>)
 800cf44:	f00a fee6 	bl	8017d14 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cf48:	7c7a      	ldrb	r2, [r7, #17]
 800cf4a:	494b      	ldr	r1, [pc, #300]	; (800d078 <etharp_query+0x268>)
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	005b      	lsls	r3, r3, #1
 800cf50:	4413      	add	r3, r2
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	440b      	add	r3, r1
 800cf56:	3314      	adds	r3, #20
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d917      	bls.n	800cf8e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cf5e:	4a49      	ldr	r2, [pc, #292]	; (800d084 <etharp_query+0x274>)
 800cf60:	7c7b      	ldrb	r3, [r7, #17]
 800cf62:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf64:	7c7a      	ldrb	r2, [r7, #17]
 800cf66:	4613      	mov	r3, r2
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	00db      	lsls	r3, r3, #3
 800cf6e:	3308      	adds	r3, #8
 800cf70:	4a41      	ldr	r2, [pc, #260]	; (800d078 <etharp_query+0x268>)
 800cf72:	4413      	add	r3, r2
 800cf74:	3304      	adds	r3, #4
 800cf76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf7a:	9200      	str	r2, [sp, #0]
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 f9d1 	bl	800d328 <ethernet_output>
 800cf86:	4603      	mov	r3, r0
 800cf88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf8c:	e067      	b.n	800d05e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cf8e:	7c7a      	ldrb	r2, [r7, #17]
 800cf90:	4939      	ldr	r1, [pc, #228]	; (800d078 <etharp_query+0x268>)
 800cf92:	4613      	mov	r3, r2
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	4413      	add	r3, r2
 800cf98:	00db      	lsls	r3, r3, #3
 800cf9a:	440b      	add	r3, r1
 800cf9c:	3314      	adds	r3, #20
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d15c      	bne.n	800d05e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfac:	e01c      	b.n	800cfe8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cfae:	69fb      	ldr	r3, [r7, #28]
 800cfb0:	895a      	ldrh	r2, [r3, #10]
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	891b      	ldrh	r3, [r3, #8]
 800cfb6:	429a      	cmp	r2, r3
 800cfb8:	d10a      	bne.n	800cfd0 <etharp_query+0x1c0>
 800cfba:	69fb      	ldr	r3, [r7, #28]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d006      	beq.n	800cfd0 <etharp_query+0x1c0>
 800cfc2:	4b2a      	ldr	r3, [pc, #168]	; (800d06c <etharp_query+0x25c>)
 800cfc4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cfc8:	492f      	ldr	r1, [pc, #188]	; (800d088 <etharp_query+0x278>)
 800cfca:	482a      	ldr	r0, [pc, #168]	; (800d074 <etharp_query+0x264>)
 800cfcc:	f00a fea2 	bl	8017d14 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	7b1b      	ldrb	r3, [r3, #12]
 800cfd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <etharp_query+0x1d2>
        copy_needed = 1;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	61bb      	str	r3, [r7, #24]
        break;
 800cfe0:	e005      	b.n	800cfee <etharp_query+0x1de>
      }
      p = p->next;
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1df      	bne.n	800cfae <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d007      	beq.n	800d004 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cff4:	687a      	ldr	r2, [r7, #4]
 800cff6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cffa:	200e      	movs	r0, #14
 800cffc:	f003 fbc8 	bl	8010790 <pbuf_clone>
 800d000:	61f8      	str	r0, [r7, #28]
 800d002:	e004      	b.n	800d00e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d008:	69f8      	ldr	r0, [r7, #28]
 800d00a:	f003 f9ff 	bl	801040c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d021      	beq.n	800d058 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d014:	7c7a      	ldrb	r2, [r7, #17]
 800d016:	4918      	ldr	r1, [pc, #96]	; (800d078 <etharp_query+0x268>)
 800d018:	4613      	mov	r3, r2
 800d01a:	005b      	lsls	r3, r3, #1
 800d01c:	4413      	add	r3, r2
 800d01e:	00db      	lsls	r3, r3, #3
 800d020:	440b      	add	r3, r1
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d00a      	beq.n	800d03e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d028:	7c7a      	ldrb	r2, [r7, #17]
 800d02a:	4913      	ldr	r1, [pc, #76]	; (800d078 <etharp_query+0x268>)
 800d02c:	4613      	mov	r3, r2
 800d02e:	005b      	lsls	r3, r3, #1
 800d030:	4413      	add	r3, r2
 800d032:	00db      	lsls	r3, r3, #3
 800d034:	440b      	add	r3, r1
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4618      	mov	r0, r3
 800d03a:	f003 f941 	bl	80102c0 <pbuf_free>
      }
      arp_table[i].q = p;
 800d03e:	7c7a      	ldrb	r2, [r7, #17]
 800d040:	490d      	ldr	r1, [pc, #52]	; (800d078 <etharp_query+0x268>)
 800d042:	4613      	mov	r3, r2
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	4413      	add	r3, r2
 800d048:	00db      	lsls	r3, r3, #3
 800d04a:	440b      	add	r3, r1
 800d04c:	69fa      	ldr	r2, [r7, #28]
 800d04e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d056:	e002      	b.n	800d05e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d058:	23ff      	movs	r3, #255	; 0xff
 800d05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d05e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d062:	4618      	mov	r0, r3
 800d064:	3728      	adds	r7, #40	; 0x28
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	080199a0 	.word	0x080199a0
 800d070:	08019b94 	.word	0x08019b94
 800d074:	08019a60 	.word	0x08019a60
 800d078:	24008664 	.word	0x24008664
 800d07c:	08019ba4 	.word	0x08019ba4
 800d080:	08019b88 	.word	0x08019b88
 800d084:	24008754 	.word	0x24008754
 800d088:	08019bcc 	.word	0x08019bcc

0800d08c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b08a      	sub	sp, #40	; 0x28
 800d090:	af02      	add	r7, sp, #8
 800d092:	60f8      	str	r0, [r7, #12]
 800d094:	60b9      	str	r1, [r7, #8]
 800d096:	607a      	str	r2, [r7, #4]
 800d098:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d09a:	2300      	movs	r3, #0
 800d09c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d106      	bne.n	800d0b2 <etharp_raw+0x26>
 800d0a4:	4b3a      	ldr	r3, [pc, #232]	; (800d190 <etharp_raw+0x104>)
 800d0a6:	f240 4257 	movw	r2, #1111	; 0x457
 800d0aa:	493a      	ldr	r1, [pc, #232]	; (800d194 <etharp_raw+0x108>)
 800d0ac:	483a      	ldr	r0, [pc, #232]	; (800d198 <etharp_raw+0x10c>)
 800d0ae:	f00a fe31 	bl	8017d14 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d0b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0b6:	211c      	movs	r1, #28
 800d0b8:	200e      	movs	r0, #14
 800d0ba:	f002 fe1d 	bl	800fcf8 <pbuf_alloc>
 800d0be:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d102      	bne.n	800d0cc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d0c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0ca:	e05d      	b.n	800d188 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	895b      	ldrh	r3, [r3, #10]
 800d0d0:	2b1b      	cmp	r3, #27
 800d0d2:	d806      	bhi.n	800d0e2 <etharp_raw+0x56>
 800d0d4:	4b2e      	ldr	r3, [pc, #184]	; (800d190 <etharp_raw+0x104>)
 800d0d6:	f240 4262 	movw	r2, #1122	; 0x462
 800d0da:	4930      	ldr	r1, [pc, #192]	; (800d19c <etharp_raw+0x110>)
 800d0dc:	482e      	ldr	r0, [pc, #184]	; (800d198 <etharp_raw+0x10c>)
 800d0de:	f00a fe19 	bl	8017d14 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	685b      	ldr	r3, [r3, #4]
 800d0e6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d0e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff f914 	bl	800c318 <lwip_htons>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0fe:	2b06      	cmp	r3, #6
 800d100:	d006      	beq.n	800d110 <etharp_raw+0x84>
 800d102:	4b23      	ldr	r3, [pc, #140]	; (800d190 <etharp_raw+0x104>)
 800d104:	f240 4269 	movw	r2, #1129	; 0x469
 800d108:	4925      	ldr	r1, [pc, #148]	; (800d1a0 <etharp_raw+0x114>)
 800d10a:	4823      	ldr	r0, [pc, #140]	; (800d198 <etharp_raw+0x10c>)
 800d10c:	f00a fe02 	bl	8017d14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	3308      	adds	r3, #8
 800d114:	2206      	movs	r2, #6
 800d116:	6839      	ldr	r1, [r7, #0]
 800d118:	4618      	mov	r0, r3
 800d11a:	f00a fd36 	bl	8017b8a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3312      	adds	r3, #18
 800d122:	2206      	movs	r2, #6
 800d124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d126:	4618      	mov	r0, r3
 800d128:	f00a fd2f 	bl	8017b8a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	330e      	adds	r3, #14
 800d130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d132:	6812      	ldr	r2, [r2, #0]
 800d134:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	3318      	adds	r3, #24
 800d13a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d13c:	6812      	ldr	r2, [r2, #0]
 800d13e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2200      	movs	r2, #0
 800d144:	701a      	strb	r2, [r3, #0]
 800d146:	2200      	movs	r2, #0
 800d148:	f042 0201 	orr.w	r2, r2, #1
 800d14c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2200      	movs	r2, #0
 800d152:	f042 0208 	orr.w	r2, r2, #8
 800d156:	709a      	strb	r2, [r3, #2]
 800d158:	2200      	movs	r2, #0
 800d15a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	2206      	movs	r2, #6
 800d160:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	2204      	movs	r2, #4
 800d166:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d168:	f640 0306 	movw	r3, #2054	; 0x806
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	69b9      	ldr	r1, [r7, #24]
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f000 f8d7 	bl	800d328 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d17a:	69b8      	ldr	r0, [r7, #24]
 800d17c:	f003 f8a0 	bl	80102c0 <pbuf_free>
  p = NULL;
 800d180:	2300      	movs	r3, #0
 800d182:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d184:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3720      	adds	r7, #32
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	080199a0 	.word	0x080199a0
 800d194:	08019b38 	.word	0x08019b38
 800d198:	08019a60 	.word	0x08019a60
 800d19c:	08019be8 	.word	0x08019be8
 800d1a0:	08019c1c 	.word	0x08019c1c

0800d1a4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af04      	add	r7, sp, #16
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	9203      	str	r2, [sp, #12]
 800d1c4:	68ba      	ldr	r2, [r7, #8]
 800d1c6:	9202      	str	r2, [sp, #8]
 800d1c8:	4a06      	ldr	r2, [pc, #24]	; (800d1e4 <etharp_request_dst+0x40>)
 800d1ca:	9201      	str	r2, [sp, #4]
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff ff5a 	bl	800d08c <etharp_raw>
 800d1d8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	0801ca50 	.word	0x0801ca50

0800d1e8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d1f2:	4a05      	ldr	r2, [pc, #20]	; (800d208 <etharp_request+0x20>)
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7ff ffd4 	bl	800d1a4 <etharp_request_dst>
 800d1fc:	4603      	mov	r3, r0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3708      	adds	r7, #8
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	0801ca48 	.word	0x0801ca48

0800d20c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b086      	sub	sp, #24
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d216:	230e      	movs	r3, #14
 800d218:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	895b      	ldrh	r3, [r3, #10]
 800d21e:	2b0e      	cmp	r3, #14
 800d220:	d96e      	bls.n	800d300 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	7bdb      	ldrb	r3, [r3, #15]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d106      	bne.n	800d238 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d230:	3301      	adds	r3, #1
 800d232:	b2da      	uxtb	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	7b1a      	ldrb	r2, [r3, #12]
 800d242:	7b5b      	ldrb	r3, [r3, #13]
 800d244:	021b      	lsls	r3, r3, #8
 800d246:	4313      	orrs	r3, r2
 800d248:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	f003 0301 	and.w	r3, r3, #1
 800d252:	2b00      	cmp	r3, #0
 800d254:	d023      	beq.n	800d29e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	781b      	ldrb	r3, [r3, #0]
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d10f      	bne.n	800d27e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	785b      	ldrb	r3, [r3, #1]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d11b      	bne.n	800d29e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d26a:	2b5e      	cmp	r3, #94	; 0x5e
 800d26c:	d117      	bne.n	800d29e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	7b5b      	ldrb	r3, [r3, #13]
 800d272:	f043 0310 	orr.w	r3, r3, #16
 800d276:	b2da      	uxtb	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	735a      	strb	r2, [r3, #13]
 800d27c:	e00f      	b.n	800d29e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	2206      	movs	r2, #6
 800d282:	4928      	ldr	r1, [pc, #160]	; (800d324 <ethernet_input+0x118>)
 800d284:	4618      	mov	r0, r3
 800d286:	f00a fc70 	bl	8017b6a <memcmp>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d106      	bne.n	800d29e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	7b5b      	ldrb	r3, [r3, #13]
 800d294:	f043 0308 	orr.w	r3, r3, #8
 800d298:	b2da      	uxtb	r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d29e:	89fb      	ldrh	r3, [r7, #14]
 800d2a0:	2b08      	cmp	r3, #8
 800d2a2:	d003      	beq.n	800d2ac <ethernet_input+0xa0>
 800d2a4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800d2a8:	d014      	beq.n	800d2d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d2aa:	e032      	b.n	800d312 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2b2:	f003 0308 	and.w	r3, r3, #8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d024      	beq.n	800d304 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d2ba:	8afb      	ldrh	r3, [r7, #22]
 800d2bc:	4619      	mov	r1, r3
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f002 ff78 	bl	80101b4 <pbuf_remove_header>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d11e      	bne.n	800d308 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fb95 	bl	800d9fc <ip4_input>
      break;
 800d2d2:	e013      	b.n	800d2fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d2da:	f003 0308 	and.w	r3, r3, #8
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d014      	beq.n	800d30c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d2e2:	8afb      	ldrh	r3, [r7, #22]
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f002 ff64 	bl	80101b4 <pbuf_remove_header>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d10e      	bne.n	800d310 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff fb65 	bl	800c9c4 <etharp_input>
      break;
 800d2fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e00c      	b.n	800d31a <ethernet_input+0x10e>
    goto free_and_return;
 800d300:	bf00      	nop
 800d302:	e006      	b.n	800d312 <ethernet_input+0x106>
        goto free_and_return;
 800d304:	bf00      	nop
 800d306:	e004      	b.n	800d312 <ethernet_input+0x106>
        goto free_and_return;
 800d308:	bf00      	nop
 800d30a:	e002      	b.n	800d312 <ethernet_input+0x106>
        goto free_and_return;
 800d30c:	bf00      	nop
 800d30e:	e000      	b.n	800d312 <ethernet_input+0x106>
        goto free_and_return;
 800d310:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f002 ffd4 	bl	80102c0 <pbuf_free>
  return ERR_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3718      	adds	r7, #24
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	0801ca48 	.word	0x0801ca48

0800d328 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d328:	b580      	push	{r7, lr}
 800d32a:	b086      	sub	sp, #24
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
 800d334:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d336:	8c3b      	ldrh	r3, [r7, #32]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7fe ffed 	bl	800c318 <lwip_htons>
 800d33e:	4603      	mov	r3, r0
 800d340:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d342:	210e      	movs	r1, #14
 800d344:	68b8      	ldr	r0, [r7, #8]
 800d346:	f002 ff25 	bl	8010194 <pbuf_add_header>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d125      	bne.n	800d39c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	8afa      	ldrh	r2, [r7, #22]
 800d35a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	2206      	movs	r2, #6
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	4618      	mov	r0, r3
 800d364:	f00a fc11 	bl	8017b8a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	3306      	adds	r3, #6
 800d36c:	2206      	movs	r2, #6
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	4618      	mov	r0, r3
 800d372:	f00a fc0a 	bl	8017b8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d37c:	2b06      	cmp	r3, #6
 800d37e:	d006      	beq.n	800d38e <ethernet_output+0x66>
 800d380:	4b0a      	ldr	r3, [pc, #40]	; (800d3ac <ethernet_output+0x84>)
 800d382:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d386:	490a      	ldr	r1, [pc, #40]	; (800d3b0 <ethernet_output+0x88>)
 800d388:	480a      	ldr	r0, [pc, #40]	; (800d3b4 <ethernet_output+0x8c>)
 800d38a:	f00a fcc3 	bl	8017d14 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	68b9      	ldr	r1, [r7, #8]
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	4798      	blx	r3
 800d398:	4603      	mov	r3, r0
 800d39a:	e002      	b.n	800d3a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d39c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d39e:	f06f 0301 	mvn.w	r3, #1
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3718      	adds	r7, #24
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	08019c60 	.word	0x08019c60
 800d3b0:	08019cdc 	.word	0x08019cdc
 800d3b4:	08019d10 	.word	0x08019d10

0800d3b8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08e      	sub	sp, #56	; 0x38
 800d3bc:	af04      	add	r7, sp, #16
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d3c2:	4b87      	ldr	r3, [pc, #540]	; (800d5e0 <icmp_input+0x228>)
 800d3c4:	689b      	ldr	r3, [r3, #8]
 800d3c6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	f003 030f 	and.w	r3, r3, #15
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d3d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d3da:	2b13      	cmp	r3, #19
 800d3dc:	f240 80e8 	bls.w	800d5b0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	895b      	ldrh	r3, [r3, #10]
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	f240 80e5 	bls.w	800d5b4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d3f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	f000 80d2 	beq.w	800d5a2 <icmp_input+0x1ea>
 800d3fe:	2b08      	cmp	r3, #8
 800d400:	f040 80d2 	bne.w	800d5a8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d404:	4b77      	ldr	r3, [pc, #476]	; (800d5e4 <icmp_input+0x22c>)
 800d406:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d408:	4b75      	ldr	r3, [pc, #468]	; (800d5e0 <icmp_input+0x228>)
 800d40a:	695b      	ldr	r3, [r3, #20]
 800d40c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d410:	2be0      	cmp	r3, #224	; 0xe0
 800d412:	f000 80d6 	beq.w	800d5c2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d416:	4b72      	ldr	r3, [pc, #456]	; (800d5e0 <icmp_input+0x228>)
 800d418:	695b      	ldr	r3, [r3, #20]
 800d41a:	4a71      	ldr	r2, [pc, #452]	; (800d5e0 <icmp_input+0x228>)
 800d41c:	6812      	ldr	r2, [r2, #0]
 800d41e:	4611      	mov	r1, r2
 800d420:	4618      	mov	r0, r3
 800d422:	f000 fce7 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f040 80cc 	bne.w	800d5c6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	891b      	ldrh	r3, [r3, #8]
 800d432:	2b07      	cmp	r3, #7
 800d434:	f240 80c0 	bls.w	800d5b8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f9e0 	bl	800d7fe <inet_chksum_pbuf>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d003      	beq.n	800d44c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f002 ff3b 	bl	80102c0 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800d44a:	e0c5      	b.n	800d5d8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d44c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d44e:	330e      	adds	r3, #14
 800d450:	4619      	mov	r1, r3
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f002 fe9e 	bl	8010194 <pbuf_add_header>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d04b      	beq.n	800d4f6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	891a      	ldrh	r2, [r3, #8]
 800d462:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d464:	4413      	add	r3, r2
 800d466:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	891b      	ldrh	r3, [r3, #8]
 800d46c:	8b7a      	ldrh	r2, [r7, #26]
 800d46e:	429a      	cmp	r2, r3
 800d470:	f0c0 80ab 	bcc.w	800d5ca <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d474:	8b7b      	ldrh	r3, [r7, #26]
 800d476:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d47a:	4619      	mov	r1, r3
 800d47c:	200e      	movs	r0, #14
 800d47e:	f002 fc3b 	bl	800fcf8 <pbuf_alloc>
 800d482:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	2b00      	cmp	r3, #0
 800d488:	f000 80a1 	beq.w	800d5ce <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	895b      	ldrh	r3, [r3, #10]
 800d490:	461a      	mov	r2, r3
 800d492:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d494:	3308      	adds	r3, #8
 800d496:	429a      	cmp	r2, r3
 800d498:	d203      	bcs.n	800d4a2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d49a:	6978      	ldr	r0, [r7, #20]
 800d49c:	f002 ff10 	bl	80102c0 <pbuf_free>
          goto icmperr;
 800d4a0:	e096      	b.n	800d5d0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d4a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f00a fb6d 	bl	8017b8a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d4b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4b2:	4619      	mov	r1, r3
 800d4b4:	6978      	ldr	r0, [r7, #20]
 800d4b6:	f002 fe7d 	bl	80101b4 <pbuf_remove_header>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d009      	beq.n	800d4d4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d4c0:	4b49      	ldr	r3, [pc, #292]	; (800d5e8 <icmp_input+0x230>)
 800d4c2:	22b6      	movs	r2, #182	; 0xb6
 800d4c4:	4949      	ldr	r1, [pc, #292]	; (800d5ec <icmp_input+0x234>)
 800d4c6:	484a      	ldr	r0, [pc, #296]	; (800d5f0 <icmp_input+0x238>)
 800d4c8:	f00a fc24 	bl	8017d14 <iprintf>
          pbuf_free(r);
 800d4cc:	6978      	ldr	r0, [r7, #20]
 800d4ce:	f002 fef7 	bl	80102c0 <pbuf_free>
          goto icmperr;
 800d4d2:	e07d      	b.n	800d5d0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	6978      	ldr	r0, [r7, #20]
 800d4d8:	f003 f816 	bl	8010508 <pbuf_copy>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d4e2:	6978      	ldr	r0, [r7, #20]
 800d4e4:	f002 feec 	bl	80102c0 <pbuf_free>
          goto icmperr;
 800d4e8:	e072      	b.n	800d5d0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f002 fee8 	bl	80102c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	607b      	str	r3, [r7, #4]
 800d4f4:	e00f      	b.n	800d516 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d4f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d4f8:	330e      	adds	r3, #14
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f002 fe59 	bl	80101b4 <pbuf_remove_header>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d508:	4b37      	ldr	r3, [pc, #220]	; (800d5e8 <icmp_input+0x230>)
 800d50a:	22c7      	movs	r2, #199	; 0xc7
 800d50c:	4939      	ldr	r1, [pc, #228]	; (800d5f4 <icmp_input+0x23c>)
 800d50e:	4838      	ldr	r0, [pc, #224]	; (800d5f0 <icmp_input+0x238>)
 800d510:	f00a fc00 	bl	8017d14 <iprintf>
          goto icmperr;
 800d514:	e05c      	b.n	800d5d0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d51c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d51e:	4619      	mov	r1, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f002 fe37 	bl	8010194 <pbuf_add_header>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d13c      	bne.n	800d5a6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d532:	69fb      	ldr	r3, [r7, #28]
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d53a:	4b29      	ldr	r3, [pc, #164]	; (800d5e0 <icmp_input+0x228>)
 800d53c:	691a      	ldr	r2, [r3, #16]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	2200      	movs	r2, #0
 800d546:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	885b      	ldrh	r3, [r3, #2]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d552:	4293      	cmp	r3, r2
 800d554:	d907      	bls.n	800d566 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	885b      	ldrh	r3, [r3, #2]
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	3309      	adds	r3, #9
 800d55e:	b29a      	uxth	r2, r3
 800d560:	693b      	ldr	r3, [r7, #16]
 800d562:	805a      	strh	r2, [r3, #2]
 800d564:	e006      	b.n	800d574 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	885b      	ldrh	r3, [r3, #2]
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	3308      	adds	r3, #8
 800d56e:	b29a      	uxth	r2, r3
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	22ff      	movs	r2, #255	; 0xff
 800d578:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2200      	movs	r2, #0
 800d57e:	729a      	strb	r2, [r3, #10]
 800d580:	2200      	movs	r2, #0
 800d582:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	9302      	str	r3, [sp, #8]
 800d588:	2301      	movs	r3, #1
 800d58a:	9301      	str	r3, [sp, #4]
 800d58c:	2300      	movs	r3, #0
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	23ff      	movs	r3, #255	; 0xff
 800d592:	2200      	movs	r2, #0
 800d594:	69f9      	ldr	r1, [r7, #28]
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 fb54 	bl	800dc44 <ip4_output_if>
 800d59c:	4603      	mov	r3, r0
 800d59e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d5a0:	e001      	b.n	800d5a6 <icmp_input+0x1ee>
      break;
 800d5a2:	bf00      	nop
 800d5a4:	e000      	b.n	800d5a8 <icmp_input+0x1f0>
      break;
 800d5a6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f002 fe89 	bl	80102c0 <pbuf_free>
  return;
 800d5ae:	e013      	b.n	800d5d8 <icmp_input+0x220>
    goto lenerr;
 800d5b0:	bf00      	nop
 800d5b2:	e002      	b.n	800d5ba <icmp_input+0x202>
    goto lenerr;
 800d5b4:	bf00      	nop
 800d5b6:	e000      	b.n	800d5ba <icmp_input+0x202>
        goto lenerr;
 800d5b8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f002 fe80 	bl	80102c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d5c0:	e00a      	b.n	800d5d8 <icmp_input+0x220>
        goto icmperr;
 800d5c2:	bf00      	nop
 800d5c4:	e004      	b.n	800d5d0 <icmp_input+0x218>
        goto icmperr;
 800d5c6:	bf00      	nop
 800d5c8:	e002      	b.n	800d5d0 <icmp_input+0x218>
          goto icmperr;
 800d5ca:	bf00      	nop
 800d5cc:	e000      	b.n	800d5d0 <icmp_input+0x218>
          goto icmperr;
 800d5ce:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f002 fe75 	bl	80102c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d5d6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d5d8:	3728      	adds	r7, #40	; 0x28
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	24008758 	.word	0x24008758
 800d5e4:	2400876c 	.word	0x2400876c
 800d5e8:	08019d38 	.word	0x08019d38
 800d5ec:	08019db4 	.word	0x08019db4
 800d5f0:	08019dec 	.word	0x08019dec
 800d5f4:	08019e14 	.word	0x08019e14

0800d5f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	460b      	mov	r3, r1
 800d602:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d604:	78fb      	ldrb	r3, [r7, #3]
 800d606:	461a      	mov	r2, r3
 800d608:	2103      	movs	r1, #3
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 f814 	bl	800d638 <icmp_send_response>
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	460b      	mov	r3, r1
 800d622:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d624:	78fb      	ldrb	r3, [r7, #3]
 800d626:	461a      	mov	r2, r3
 800d628:	210b      	movs	r1, #11
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f804 	bl	800d638 <icmp_send_response>
}
 800d630:	bf00      	nop
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b08c      	sub	sp, #48	; 0x30
 800d63c:	af04      	add	r7, sp, #16
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	70fb      	strb	r3, [r7, #3]
 800d644:	4613      	mov	r3, r2
 800d646:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d648:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d64c:	2124      	movs	r1, #36	; 0x24
 800d64e:	2022      	movs	r0, #34	; 0x22
 800d650:	f002 fb52 	bl	800fcf8 <pbuf_alloc>
 800d654:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d056      	beq.n	800d70a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	895b      	ldrh	r3, [r3, #10]
 800d660:	2b23      	cmp	r3, #35	; 0x23
 800d662:	d806      	bhi.n	800d672 <icmp_send_response+0x3a>
 800d664:	4b2b      	ldr	r3, [pc, #172]	; (800d714 <icmp_send_response+0xdc>)
 800d666:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d66a:	492b      	ldr	r1, [pc, #172]	; (800d718 <icmp_send_response+0xe0>)
 800d66c:	482b      	ldr	r0, [pc, #172]	; (800d71c <icmp_send_response+0xe4>)
 800d66e:	f00a fb51 	bl	8017d14 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	685b      	ldr	r3, [r3, #4]
 800d67c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	78fa      	ldrb	r2, [r7, #3]
 800d682:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	78ba      	ldrb	r2, [r7, #2]
 800d688:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	2200      	movs	r2, #0
 800d68e:	711a      	strb	r2, [r3, #4]
 800d690:	2200      	movs	r2, #0
 800d692:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	2200      	movs	r2, #0
 800d698:	719a      	strb	r2, [r3, #6]
 800d69a:	2200      	movs	r2, #0
 800d69c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	685b      	ldr	r3, [r3, #4]
 800d6a2:	f103 0008 	add.w	r0, r3, #8
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	221c      	movs	r2, #28
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	f00a fa6c 	bl	8017b8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d6b8:	f107 030c 	add.w	r3, r7, #12
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 f903 	bl	800d8c8 <ip4_route>
 800d6c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d01b      	beq.n	800d702 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	709a      	strb	r2, [r3, #2]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800d6d4:	69fb      	ldr	r3, [r7, #28]
 800d6d6:	895b      	ldrh	r3, [r3, #10]
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6978      	ldr	r0, [r7, #20]
 800d6dc:	f000 f87d 	bl	800d7da <inet_chksum>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d6e8:	f107 020c 	add.w	r2, r7, #12
 800d6ec:	693b      	ldr	r3, [r7, #16]
 800d6ee:	9302      	str	r3, [sp, #8]
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	9301      	str	r3, [sp, #4]
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	23ff      	movs	r3, #255	; 0xff
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	69f8      	ldr	r0, [r7, #28]
 800d6fe:	f000 faa1 	bl	800dc44 <ip4_output_if>
  }
  pbuf_free(q);
 800d702:	69f8      	ldr	r0, [r7, #28]
 800d704:	f002 fddc 	bl	80102c0 <pbuf_free>
 800d708:	e000      	b.n	800d70c <icmp_send_response+0xd4>
    return;
 800d70a:	bf00      	nop
}
 800d70c:	3720      	adds	r7, #32
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	08019d38 	.word	0x08019d38
 800d718:	08019e48 	.word	0x08019e48
 800d71c:	08019dec 	.word	0x08019dec

0800d720 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d720:	b480      	push	{r7}
 800d722:	b089      	sub	sp, #36	; 0x24
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d72e:	2300      	movs	r3, #0
 800d730:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d732:	2300      	movs	r3, #0
 800d734:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	f003 0301 	and.w	r3, r3, #1
 800d73c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00d      	beq.n	800d760 <lwip_standard_chksum+0x40>
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	2b00      	cmp	r3, #0
 800d748:	dd0a      	ble.n	800d760 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d74a:	69fa      	ldr	r2, [r7, #28]
 800d74c:	1c53      	adds	r3, r2, #1
 800d74e:	61fb      	str	r3, [r7, #28]
 800d750:	f107 030e 	add.w	r3, r7, #14
 800d754:	3301      	adds	r3, #1
 800d756:	7812      	ldrb	r2, [r2, #0]
 800d758:	701a      	strb	r2, [r3, #0]
    len--;
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	3b01      	subs	r3, #1
 800d75e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d764:	e00a      	b.n	800d77c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	1c9a      	adds	r2, r3, #2
 800d76a:	61ba      	str	r2, [r7, #24]
 800d76c:	881b      	ldrh	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	4413      	add	r3, r2
 800d774:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	3b02      	subs	r3, #2
 800d77a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	dcf1      	bgt.n	800d766 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dd04      	ble.n	800d792 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d788:	f107 030e 	add.w	r3, r7, #14
 800d78c:	69ba      	ldr	r2, [r7, #24]
 800d78e:	7812      	ldrb	r2, [r2, #0]
 800d790:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d792:	89fb      	ldrh	r3, [r7, #14]
 800d794:	461a      	mov	r2, r3
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	4413      	add	r3, r2
 800d79a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	0c1a      	lsrs	r2, r3, #16
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	4413      	add	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	0c1a      	lsrs	r2, r3, #16
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	4413      	add	r3, r2
 800d7b2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d007      	beq.n	800d7ca <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	0a1b      	lsrs	r3, r3, #8
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	b29b      	uxth	r3, r3
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3724      	adds	r7, #36	; 0x24
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b082      	sub	sp, #8
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d7e6:	887b      	ldrh	r3, [r7, #2]
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f7ff ff98 	bl	800d720 <lwip_standard_chksum>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	43db      	mvns	r3, r3
 800d7f4:	b29b      	uxth	r3, r3
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b086      	sub	sp, #24
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d80a:	2300      	movs	r3, #0
 800d80c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	613b      	str	r3, [r7, #16]
 800d812:	e02b      	b.n	800d86c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	895b      	ldrh	r3, [r3, #10]
 800d81c:	4619      	mov	r1, r3
 800d81e:	4610      	mov	r0, r2
 800d820:	f7ff ff7e 	bl	800d720 <lwip_standard_chksum>
 800d824:	4603      	mov	r3, r0
 800d826:	461a      	mov	r2, r3
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	4413      	add	r3, r2
 800d82c:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	0c1a      	lsrs	r2, r3, #16
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	b29b      	uxth	r3, r3
 800d836:	4413      	add	r3, r2
 800d838:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	895b      	ldrh	r3, [r3, #10]
 800d83e:	f003 0301 	and.w	r3, r3, #1
 800d842:	b29b      	uxth	r3, r3
 800d844:	2b00      	cmp	r3, #0
 800d846:	d00e      	beq.n	800d866 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	bf0c      	ite	eq
 800d84e:	2301      	moveq	r3, #1
 800d850:	2300      	movne	r3, #0
 800d852:	b2db      	uxtb	r3, r3
 800d854:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	021b      	lsls	r3, r3, #8
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	0a1b      	lsrs	r3, r3, #8
 800d860:	b2db      	uxtb	r3, r3
 800d862:	4313      	orrs	r3, r2
 800d864:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	613b      	str	r3, [r7, #16]
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d1d0      	bne.n	800d814 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d007      	beq.n	800d888 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	021b      	lsls	r3, r3, #8
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	0a1b      	lsrs	r3, r3, #8
 800d882:	b2db      	uxtb	r3, r3
 800d884:	4313      	orrs	r3, r2
 800d886:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	43db      	mvns	r3, r3
 800d88e:	b29b      	uxth	r3, r3
}
 800d890:	4618      	mov	r0, r3
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d8a2:	f003 f8ff 	bl	8010aa4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d8a6:	f001 f9e9 	bl	800ec7c <mem_init>
  memp_init();
 800d8aa:	f001 fd31 	bl	800f310 <memp_init>
  pbuf_init();
  netif_init();
 800d8ae:	f001 fe8d 	bl	800f5cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d8b2:	f009 fd3d 	bl	8017330 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d8b6:	f003 f97f 	bl	8010bb8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d8ba:	f009 fc7f 	bl	80171bc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d8be:	bf00      	nop
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
	...

0800d8c8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d8d0:	4b33      	ldr	r3, [pc, #204]	; (800d9a0 <ip4_route+0xd8>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	60fb      	str	r3, [r7, #12]
 800d8d6:	e036      	b.n	800d946 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8de:	f003 0301 	and.w	r3, r3, #1
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d02b      	beq.n	800d940 <ip4_route+0x78>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8ee:	089b      	lsrs	r3, r3, #2
 800d8f0:	f003 0301 	and.w	r3, r3, #1
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d022      	beq.n	800d940 <ip4_route+0x78>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d01d      	beq.n	800d940 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	3304      	adds	r3, #4
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	405a      	eors	r2, r3
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	3308      	adds	r3, #8
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	4013      	ands	r3, r2
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	e038      	b.n	800d992 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d926:	f003 0302 	and.w	r3, r3, #2
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d108      	bne.n	800d940 <ip4_route+0x78>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	330c      	adds	r3, #12
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d101      	bne.n	800d940 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	e028      	b.n	800d992 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1c5      	bne.n	800d8d8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d94c:	4b15      	ldr	r3, [pc, #84]	; (800d9a4 <ip4_route+0xdc>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d01a      	beq.n	800d98a <ip4_route+0xc2>
 800d954:	4b13      	ldr	r3, [pc, #76]	; (800d9a4 <ip4_route+0xdc>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d95c:	f003 0301 	and.w	r3, r3, #1
 800d960:	2b00      	cmp	r3, #0
 800d962:	d012      	beq.n	800d98a <ip4_route+0xc2>
 800d964:	4b0f      	ldr	r3, [pc, #60]	; (800d9a4 <ip4_route+0xdc>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d96c:	f003 0304 	and.w	r3, r3, #4
 800d970:	2b00      	cmp	r3, #0
 800d972:	d00a      	beq.n	800d98a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d974:	4b0b      	ldr	r3, [pc, #44]	; (800d9a4 <ip4_route+0xdc>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	3304      	adds	r3, #4
 800d97a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d004      	beq.n	800d98a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	b2db      	uxtb	r3, r3
 800d986:	2b7f      	cmp	r3, #127	; 0x7f
 800d988:	d101      	bne.n	800d98e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d98a:	2300      	movs	r3, #0
 800d98c:	e001      	b.n	800d992 <ip4_route+0xca>
  }

  return netif_default;
 800d98e:	4b05      	ldr	r3, [pc, #20]	; (800d9a4 <ip4_route+0xdc>)
 800d990:	681b      	ldr	r3, [r3, #0]
}
 800d992:	4618      	mov	r0, r3
 800d994:	3714      	adds	r7, #20
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	2400f218 	.word	0x2400f218
 800d9a4:	2400f21c 	.word	0x2400f21c

0800d9a8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b082      	sub	sp, #8
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d016      	beq.n	800d9ee <ip4_input_accept+0x46>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3304      	adds	r3, #4
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d011      	beq.n	800d9ee <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d9ca:	4b0b      	ldr	r3, [pc, #44]	; (800d9f8 <ip4_input_accept+0x50>)
 800d9cc:	695a      	ldr	r2, [r3, #20]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	3304      	adds	r3, #4
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d008      	beq.n	800d9ea <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d9d8:	4b07      	ldr	r3, [pc, #28]	; (800d9f8 <ip4_input_accept+0x50>)
 800d9da:	695b      	ldr	r3, [r3, #20]
 800d9dc:	6879      	ldr	r1, [r7, #4]
 800d9de:	4618      	mov	r0, r3
 800d9e0:	f000 fa08 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 800d9e4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d001      	beq.n	800d9ee <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e000      	b.n	800d9f0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3708      	adds	r7, #8
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	24008758 	.word	0x24008758

0800d9fc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	781b      	ldrb	r3, [r3, #0]
 800da10:	091b      	lsrs	r3, r3, #4
 800da12:	b2db      	uxtb	r3, r3
 800da14:	2b04      	cmp	r3, #4
 800da16:	d004      	beq.n	800da22 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f002 fc51 	bl	80102c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800da1e:	2300      	movs	r3, #0
 800da20:	e107      	b.n	800dc32 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	f003 030f 	and.w	r3, r3, #15
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	885b      	ldrh	r3, [r3, #2]
 800da36:	b29b      	uxth	r3, r3
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fe fc6d 	bl	800c318 <lwip_htons>
 800da3e:	4603      	mov	r3, r0
 800da40:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	891b      	ldrh	r3, [r3, #8]
 800da46:	89ba      	ldrh	r2, [r7, #12]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d204      	bcs.n	800da56 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800da4c:	89bb      	ldrh	r3, [r7, #12]
 800da4e:	4619      	mov	r1, r3
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f002 fab1 	bl	800ffb8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	895b      	ldrh	r3, [r3, #10]
 800da5a:	89fa      	ldrh	r2, [r7, #14]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d807      	bhi.n	800da70 <ip4_input+0x74>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	891b      	ldrh	r3, [r3, #8]
 800da64:	89ba      	ldrh	r2, [r7, #12]
 800da66:	429a      	cmp	r2, r3
 800da68:	d802      	bhi.n	800da70 <ip4_input+0x74>
 800da6a:	89fb      	ldrh	r3, [r7, #14]
 800da6c:	2b13      	cmp	r3, #19
 800da6e:	d804      	bhi.n	800da7a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f002 fc25 	bl	80102c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800da76:	2300      	movs	r3, #0
 800da78:	e0db      	b.n	800dc32 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800da7a:	697b      	ldr	r3, [r7, #20]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	4a6f      	ldr	r2, [pc, #444]	; (800dc3c <ip4_input+0x240>)
 800da80:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	4a6d      	ldr	r2, [pc, #436]	; (800dc3c <ip4_input+0x240>)
 800da88:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da8a:	4b6c      	ldr	r3, [pc, #432]	; (800dc3c <ip4_input+0x240>)
 800da8c:	695b      	ldr	r3, [r3, #20]
 800da8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da92:	2be0      	cmp	r3, #224	; 0xe0
 800da94:	d112      	bne.n	800dabc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d007      	beq.n	800dab6 <ip4_input+0xba>
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	3304      	adds	r3, #4
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <ip4_input+0xba>
      netif = inp;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	613b      	str	r3, [r7, #16]
 800dab4:	e02a      	b.n	800db0c <ip4_input+0x110>
    } else {
      netif = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	613b      	str	r3, [r7, #16]
 800daba:	e027      	b.n	800db0c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dabc:	6838      	ldr	r0, [r7, #0]
 800dabe:	f7ff ff73 	bl	800d9a8 <ip4_input_accept>
 800dac2:	4603      	mov	r3, r0
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d002      	beq.n	800dace <ip4_input+0xd2>
      netif = inp;
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	613b      	str	r3, [r7, #16]
 800dacc:	e01e      	b.n	800db0c <ip4_input+0x110>
    } else {
      netif = NULL;
 800dace:	2300      	movs	r3, #0
 800dad0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dad2:	4b5a      	ldr	r3, [pc, #360]	; (800dc3c <ip4_input+0x240>)
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b7f      	cmp	r3, #127	; 0x7f
 800dada:	d017      	beq.n	800db0c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dadc:	4b58      	ldr	r3, [pc, #352]	; (800dc40 <ip4_input+0x244>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	613b      	str	r3, [r7, #16]
 800dae2:	e00e      	b.n	800db02 <ip4_input+0x106>
          if (netif == inp) {
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d006      	beq.n	800dafa <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800daec:	6938      	ldr	r0, [r7, #16]
 800daee:	f7ff ff5b 	bl	800d9a8 <ip4_input_accept>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d108      	bne.n	800db0a <ip4_input+0x10e>
 800daf8:	e000      	b.n	800dafc <ip4_input+0x100>
            continue;
 800dafa:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	613b      	str	r3, [r7, #16]
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1ed      	bne.n	800dae4 <ip4_input+0xe8>
 800db08:	e000      	b.n	800db0c <ip4_input+0x110>
            break;
 800db0a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db0c:	4b4b      	ldr	r3, [pc, #300]	; (800dc3c <ip4_input+0x240>)
 800db0e:	691b      	ldr	r3, [r3, #16]
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	4618      	mov	r0, r3
 800db14:	f000 f96e 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d105      	bne.n	800db2a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800db1e:	4b47      	ldr	r3, [pc, #284]	; (800dc3c <ip4_input+0x240>)
 800db20:	691b      	ldr	r3, [r3, #16]
 800db22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800db26:	2be0      	cmp	r3, #224	; 0xe0
 800db28:	d104      	bne.n	800db34 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f002 fbc8 	bl	80102c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	e07e      	b.n	800dc32 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d104      	bne.n	800db44 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f002 fbc0 	bl	80102c0 <pbuf_free>
    return ERR_OK;
 800db40:	2300      	movs	r3, #0
 800db42:	e076      	b.n	800dc32 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800db44:	697b      	ldr	r3, [r7, #20]
 800db46:	88db      	ldrh	r3, [r3, #6]
 800db48:	b29b      	uxth	r3, r3
 800db4a:	461a      	mov	r2, r3
 800db4c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800db50:	4013      	ands	r3, r2
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00b      	beq.n	800db6e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fc92 	bl	800e480 <ip4_reass>
 800db5c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d101      	bne.n	800db68 <ip4_input+0x16c>
      return ERR_OK;
 800db64:	2300      	movs	r3, #0
 800db66:	e064      	b.n	800dc32 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800db6e:	4a33      	ldr	r2, [pc, #204]	; (800dc3c <ip4_input+0x240>)
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800db74:	4a31      	ldr	r2, [pc, #196]	; (800dc3c <ip4_input+0x240>)
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800db7a:	4a30      	ldr	r2, [pc, #192]	; (800dc3c <ip4_input+0x240>)
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	f003 030f 	and.w	r3, r3, #15
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	009b      	lsls	r3, r3, #2
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	b29a      	uxth	r2, r3
 800db90:	4b2a      	ldr	r3, [pc, #168]	; (800dc3c <ip4_input+0x240>)
 800db92:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800db94:	89fb      	ldrh	r3, [r7, #14]
 800db96:	4619      	mov	r1, r3
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f002 fb0b 	bl	80101b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	7a5b      	ldrb	r3, [r3, #9]
 800dba2:	2b11      	cmp	r3, #17
 800dba4:	d006      	beq.n	800dbb4 <ip4_input+0x1b8>
 800dba6:	2b11      	cmp	r3, #17
 800dba8:	dc13      	bgt.n	800dbd2 <ip4_input+0x1d6>
 800dbaa:	2b01      	cmp	r3, #1
 800dbac:	d00c      	beq.n	800dbc8 <ip4_input+0x1cc>
 800dbae:	2b06      	cmp	r3, #6
 800dbb0:	d005      	beq.n	800dbbe <ip4_input+0x1c2>
 800dbb2:	e00e      	b.n	800dbd2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f009 fc68 	bl	801748c <udp_input>
        break;
 800dbbc:	e026      	b.n	800dc0c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f004 fe69 	bl	8012898 <tcp_input>
        break;
 800dbc6:	e021      	b.n	800dc0c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800dbc8:	6839      	ldr	r1, [r7, #0]
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f7ff fbf4 	bl	800d3b8 <icmp_input>
        break;
 800dbd0:	e01c      	b.n	800dc0c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dbd2:	4b1a      	ldr	r3, [pc, #104]	; (800dc3c <ip4_input+0x240>)
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	6939      	ldr	r1, [r7, #16]
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f000 f90b 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d10f      	bne.n	800dc04 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dbe4:	4b15      	ldr	r3, [pc, #84]	; (800dc3c <ip4_input+0x240>)
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dbec:	2be0      	cmp	r3, #224	; 0xe0
 800dbee:	d009      	beq.n	800dc04 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dbf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f002 fb4f 	bl	801029a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800dbfc:	2102      	movs	r1, #2
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff fcfa 	bl	800d5f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f002 fb5b 	bl	80102c0 <pbuf_free>
        break;
 800dc0a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800dc0c:	4b0b      	ldr	r3, [pc, #44]	; (800dc3c <ip4_input+0x240>)
 800dc0e:	2200      	movs	r2, #0
 800dc10:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800dc12:	4b0a      	ldr	r3, [pc, #40]	; (800dc3c <ip4_input+0x240>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800dc18:	4b08      	ldr	r3, [pc, #32]	; (800dc3c <ip4_input+0x240>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800dc1e:	4b07      	ldr	r3, [pc, #28]	; (800dc3c <ip4_input+0x240>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800dc24:	4b05      	ldr	r3, [pc, #20]	; (800dc3c <ip4_input+0x240>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800dc2a:	4b04      	ldr	r3, [pc, #16]	; (800dc3c <ip4_input+0x240>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3718      	adds	r7, #24
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	24008758 	.word	0x24008758
 800dc40:	2400f218 	.word	0x2400f218

0800dc44 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b08a      	sub	sp, #40	; 0x28
 800dc48:	af04      	add	r7, sp, #16
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	60b9      	str	r1, [r7, #8]
 800dc4e:	607a      	str	r2, [r7, #4]
 800dc50:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d009      	beq.n	800dc70 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d003      	beq.n	800dc6a <ip4_output_if+0x26>
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d102      	bne.n	800dc70 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800dc70:	78fa      	ldrb	r2, [r7, #3]
 800dc72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc74:	9302      	str	r3, [sp, #8]
 800dc76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	4613      	mov	r3, r2
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	6979      	ldr	r1, [r7, #20]
 800dc88:	68f8      	ldr	r0, [r7, #12]
 800dc8a:	f000 f805 	bl	800dc98 <ip4_output_if_src>
 800dc8e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3718      	adds	r7, #24
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	60b9      	str	r1, [r7, #8]
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	7b9b      	ldrb	r3, [r3, #14]
 800dcaa:	2b01      	cmp	r3, #1
 800dcac:	d006      	beq.n	800dcbc <ip4_output_if_src+0x24>
 800dcae:	4b4b      	ldr	r3, [pc, #300]	; (800dddc <ip4_output_if_src+0x144>)
 800dcb0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800dcb4:	494a      	ldr	r1, [pc, #296]	; (800dde0 <ip4_output_if_src+0x148>)
 800dcb6:	484b      	ldr	r0, [pc, #300]	; (800dde4 <ip4_output_if_src+0x14c>)
 800dcb8:	f00a f82c 	bl	8017d14 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d060      	beq.n	800dd84 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800dcc2:	2314      	movs	r3, #20
 800dcc4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800dcc6:	2114      	movs	r1, #20
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f002 fa63 	bl	8010194 <pbuf_add_header>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d002      	beq.n	800dcda <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dcd4:	f06f 0301 	mvn.w	r3, #1
 800dcd8:	e07c      	b.n	800ddd4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	895b      	ldrh	r3, [r3, #10]
 800dce4:	2b13      	cmp	r3, #19
 800dce6:	d806      	bhi.n	800dcf6 <ip4_output_if_src+0x5e>
 800dce8:	4b3c      	ldr	r3, [pc, #240]	; (800dddc <ip4_output_if_src+0x144>)
 800dcea:	f44f 7262 	mov.w	r2, #904	; 0x388
 800dcee:	493e      	ldr	r1, [pc, #248]	; (800dde8 <ip4_output_if_src+0x150>)
 800dcf0:	483c      	ldr	r0, [pc, #240]	; (800dde4 <ip4_output_if_src+0x14c>)
 800dcf2:	f00a f80f 	bl	8017d14 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	78fa      	ldrb	r2, [r7, #3]
 800dcfa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800dd02:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800dd0c:	8b7b      	ldrh	r3, [r7, #26]
 800dd0e:	089b      	lsrs	r3, r3, #2
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd18:	b2da      	uxtb	r2, r3
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dd24:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	891b      	ldrh	r3, [r3, #8]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fe faf4 	bl	800c318 <lwip_htons>
 800dd30:	4603      	mov	r3, r0
 800dd32:	461a      	mov	r2, r3
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	719a      	strb	r2, [r3, #6]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800dd42:	4b2a      	ldr	r3, [pc, #168]	; (800ddec <ip4_output_if_src+0x154>)
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f7fe fae6 	bl	800c318 <lwip_htons>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	461a      	mov	r2, r3
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dd54:	4b25      	ldr	r3, [pc, #148]	; (800ddec <ip4_output_if_src+0x154>)
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	3301      	adds	r3, #1
 800dd5a:	b29a      	uxth	r2, r3
 800dd5c:	4b23      	ldr	r3, [pc, #140]	; (800ddec <ip4_output_if_src+0x154>)
 800dd5e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d104      	bne.n	800dd70 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dd66:	4b22      	ldr	r3, [pc, #136]	; (800ddf0 <ip4_output_if_src+0x158>)
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	69fb      	ldr	r3, [r7, #28]
 800dd6c:	60da      	str	r2, [r3, #12]
 800dd6e:	e003      	b.n	800dd78 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	729a      	strb	r2, [r3, #10]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	72da      	strb	r2, [r3, #11]
 800dd82:	e00f      	b.n	800dda4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	895b      	ldrh	r3, [r3, #10]
 800dd88:	2b13      	cmp	r3, #19
 800dd8a:	d802      	bhi.n	800dd92 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dd8c:	f06f 0301 	mvn.w	r3, #1
 800dd90:	e020      	b.n	800ddd4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dd98:	69fb      	ldr	r3, [r7, #28]
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dd9e:	f107 0314 	add.w	r3, r7, #20
 800dda2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800dda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00c      	beq.n	800ddc6 <ip4_output_if_src+0x12e>
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	891a      	ldrh	r2, [r3, #8]
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d906      	bls.n	800ddc6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f000 fd53 	bl	800e868 <ip4_frag>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	e006      	b.n	800ddd4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	695b      	ldr	r3, [r3, #20]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	68f9      	ldr	r1, [r7, #12]
 800ddce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddd0:	4798      	blx	r3
 800ddd2:	4603      	mov	r3, r0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3720      	adds	r7, #32
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	08019e74 	.word	0x08019e74
 800dde0:	08019ef0 	.word	0x08019ef0
 800dde4:	08019efc 	.word	0x08019efc
 800dde8:	08019f24 	.word	0x08019f24
 800ddec:	24008770 	.word	0x24008770
 800ddf0:	0801ca58 	.word	0x0801ca58

0800ddf4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b085      	sub	sp, #20
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
 800ddfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de08:	d002      	beq.n	800de10 <ip4_addr_isbroadcast_u32+0x1c>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d101      	bne.n	800de14 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800de10:	2301      	movs	r3, #1
 800de12:	e02a      	b.n	800de6a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de1a:	f003 0302 	and.w	r3, r3, #2
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d101      	bne.n	800de26 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800de22:	2300      	movs	r3, #0
 800de24:	e021      	b.n	800de6a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	3304      	adds	r3, #4
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d101      	bne.n	800de36 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800de32:	2300      	movs	r3, #0
 800de34:	e019      	b.n	800de6a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	3304      	adds	r3, #4
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	405a      	eors	r2, r3
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	3308      	adds	r3, #8
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4013      	ands	r3, r2
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10d      	bne.n	800de68 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	3308      	adds	r3, #8
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	43da      	mvns	r2, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	3308      	adds	r3, #8
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800de60:	429a      	cmp	r2, r3
 800de62:	d101      	bne.n	800de68 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800de64:	2301      	movs	r3, #1
 800de66:	e000      	b.n	800de6a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800de68:	2300      	movs	r3, #0
  }
}
 800de6a:	4618      	mov	r0, r3
 800de6c:	3714      	adds	r7, #20
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr
	...

0800de78 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800de7e:	2300      	movs	r3, #0
 800de80:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <ip_reass_tmr+0x54>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800de88:	e018      	b.n	800debc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	7fdb      	ldrb	r3, [r3, #31]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00b      	beq.n	800deaa <ip_reass_tmr+0x32>
      r->timer--;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	7fdb      	ldrb	r3, [r3, #31]
 800de96:	3b01      	subs	r3, #1
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	60fb      	str	r3, [r7, #12]
 800dea8:	e008      	b.n	800debc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800deb4:	68b9      	ldr	r1, [r7, #8]
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f80a 	bl	800ded0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1e3      	bne.n	800de8a <ip_reass_tmr+0x12>
    }
  }
}
 800dec2:	bf00      	nop
 800dec4:	bf00      	nop
 800dec6:	3710      	adds	r7, #16
 800dec8:	46bd      	mov	sp, r7
 800deca:	bd80      	pop	{r7, pc}
 800decc:	24008774 	.word	0x24008774

0800ded0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b088      	sub	sp, #32
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800deda:	2300      	movs	r3, #0
 800dedc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dede:	683a      	ldr	r2, [r7, #0]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d105      	bne.n	800def2 <ip_reass_free_complete_datagram+0x22>
 800dee6:	4b45      	ldr	r3, [pc, #276]	; (800dffc <ip_reass_free_complete_datagram+0x12c>)
 800dee8:	22ab      	movs	r2, #171	; 0xab
 800deea:	4945      	ldr	r1, [pc, #276]	; (800e000 <ip_reass_free_complete_datagram+0x130>)
 800deec:	4845      	ldr	r0, [pc, #276]	; (800e004 <ip_reass_free_complete_datagram+0x134>)
 800deee:	f009 ff11 	bl	8017d14 <iprintf>
  if (prev != NULL) {
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d00a      	beq.n	800df0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	429a      	cmp	r2, r3
 800df00:	d005      	beq.n	800df0e <ip_reass_free_complete_datagram+0x3e>
 800df02:	4b3e      	ldr	r3, [pc, #248]	; (800dffc <ip_reass_free_complete_datagram+0x12c>)
 800df04:	22ad      	movs	r2, #173	; 0xad
 800df06:	4940      	ldr	r1, [pc, #256]	; (800e008 <ip_reass_free_complete_datagram+0x138>)
 800df08:	483e      	ldr	r0, [pc, #248]	; (800e004 <ip_reass_free_complete_datagram+0x134>)
 800df0a:	f009 ff03 	bl	8017d14 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	889b      	ldrh	r3, [r3, #4]
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d12a      	bne.n	800df76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	681a      	ldr	r2, [r3, #0]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	6858      	ldr	r0, [r3, #4]
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	3308      	adds	r3, #8
 800df36:	2214      	movs	r2, #20
 800df38:	4619      	mov	r1, r3
 800df3a:	f009 fe26 	bl	8017b8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800df3e:	2101      	movs	r1, #1
 800df40:	69b8      	ldr	r0, [r7, #24]
 800df42:	f7ff fb69 	bl	800d618 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800df46:	69b8      	ldr	r0, [r7, #24]
 800df48:	f002 fa48 	bl	80103dc <pbuf_clen>
 800df4c:	4603      	mov	r3, r0
 800df4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df50:	8bfa      	ldrh	r2, [r7, #30]
 800df52:	8a7b      	ldrh	r3, [r7, #18]
 800df54:	4413      	add	r3, r2
 800df56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df5a:	db05      	blt.n	800df68 <ip_reass_free_complete_datagram+0x98>
 800df5c:	4b27      	ldr	r3, [pc, #156]	; (800dffc <ip_reass_free_complete_datagram+0x12c>)
 800df5e:	22bc      	movs	r2, #188	; 0xbc
 800df60:	492a      	ldr	r1, [pc, #168]	; (800e00c <ip_reass_free_complete_datagram+0x13c>)
 800df62:	4828      	ldr	r0, [pc, #160]	; (800e004 <ip_reass_free_complete_datagram+0x134>)
 800df64:	f009 fed6 	bl	8017d14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800df68:	8bfa      	ldrh	r2, [r7, #30]
 800df6a:	8a7b      	ldrh	r3, [r7, #18]
 800df6c:	4413      	add	r3, r2
 800df6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800df70:	69b8      	ldr	r0, [r7, #24]
 800df72:	f002 f9a5 	bl	80102c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800df7c:	e01f      	b.n	800dfbe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800df7e:	69bb      	ldr	r3, [r7, #24]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	617b      	str	r3, [r7, #20]
    pcur = p;
 800df84:	69bb      	ldr	r3, [r7, #24]
 800df86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	f002 fa24 	bl	80103dc <pbuf_clen>
 800df94:	4603      	mov	r3, r0
 800df96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800df98:	8bfa      	ldrh	r2, [r7, #30]
 800df9a:	8a7b      	ldrh	r3, [r7, #18]
 800df9c:	4413      	add	r3, r2
 800df9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfa2:	db05      	blt.n	800dfb0 <ip_reass_free_complete_datagram+0xe0>
 800dfa4:	4b15      	ldr	r3, [pc, #84]	; (800dffc <ip_reass_free_complete_datagram+0x12c>)
 800dfa6:	22cc      	movs	r2, #204	; 0xcc
 800dfa8:	4918      	ldr	r1, [pc, #96]	; (800e00c <ip_reass_free_complete_datagram+0x13c>)
 800dfaa:	4816      	ldr	r0, [pc, #88]	; (800e004 <ip_reass_free_complete_datagram+0x134>)
 800dfac:	f009 feb2 	bl	8017d14 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dfb0:	8bfa      	ldrh	r2, [r7, #30]
 800dfb2:	8a7b      	ldrh	r3, [r7, #18]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dfb8:	68f8      	ldr	r0, [r7, #12]
 800dfba:	f002 f981 	bl	80102c0 <pbuf_free>
  while (p != NULL) {
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1dc      	bne.n	800df7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f8c2 	bl	800e150 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dfcc:	4b10      	ldr	r3, [pc, #64]	; (800e010 <ip_reass_free_complete_datagram+0x140>)
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	8bfa      	ldrh	r2, [r7, #30]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d905      	bls.n	800dfe2 <ip_reass_free_complete_datagram+0x112>
 800dfd6:	4b09      	ldr	r3, [pc, #36]	; (800dffc <ip_reass_free_complete_datagram+0x12c>)
 800dfd8:	22d2      	movs	r2, #210	; 0xd2
 800dfda:	490e      	ldr	r1, [pc, #56]	; (800e014 <ip_reass_free_complete_datagram+0x144>)
 800dfdc:	4809      	ldr	r0, [pc, #36]	; (800e004 <ip_reass_free_complete_datagram+0x134>)
 800dfde:	f009 fe99 	bl	8017d14 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dfe2:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <ip_reass_free_complete_datagram+0x140>)
 800dfe4:	881a      	ldrh	r2, [r3, #0]
 800dfe6:	8bfb      	ldrh	r3, [r7, #30]
 800dfe8:	1ad3      	subs	r3, r2, r3
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	4b08      	ldr	r3, [pc, #32]	; (800e010 <ip_reass_free_complete_datagram+0x140>)
 800dfee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dff0:	8bfb      	ldrh	r3, [r7, #30]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3720      	adds	r7, #32
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	08019f54 	.word	0x08019f54
 800e000:	08019fd4 	.word	0x08019fd4
 800e004:	08019fe0 	.word	0x08019fe0
 800e008:	0801a008 	.word	0x0801a008
 800e00c:	0801a01c 	.word	0x0801a01c
 800e010:	24008778 	.word	0x24008778
 800e014:	0801a03c 	.word	0x0801a03c

0800e018 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b08a      	sub	sp, #40	; 0x28
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e022:	2300      	movs	r3, #0
 800e024:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e026:	2300      	movs	r3, #0
 800e028:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e02e:	2300      	movs	r3, #0
 800e030:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e032:	2300      	movs	r3, #0
 800e034:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e036:	4b28      	ldr	r3, [pc, #160]	; (800e0d8 <ip_reass_remove_oldest_datagram+0xc0>)
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e03c:	e030      	b.n	800e0a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	695a      	ldr	r2, [r3, #20]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	68db      	ldr	r3, [r3, #12]
 800e046:	429a      	cmp	r2, r3
 800e048:	d10c      	bne.n	800e064 <ip_reass_remove_oldest_datagram+0x4c>
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	699a      	ldr	r2, [r3, #24]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	429a      	cmp	r2, r3
 800e054:	d106      	bne.n	800e064 <ip_reass_remove_oldest_datagram+0x4c>
 800e056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e058:	899a      	ldrh	r2, [r3, #12]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	889b      	ldrh	r3, [r3, #4]
 800e05e:	b29b      	uxth	r3, r3
 800e060:	429a      	cmp	r2, r3
 800e062:	d014      	beq.n	800e08e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	3301      	adds	r3, #1
 800e068:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d104      	bne.n	800e07a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	61bb      	str	r3, [r7, #24]
 800e078:	e009      	b.n	800e08e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07c:	7fda      	ldrb	r2, [r3, #31]
 800e07e:	6a3b      	ldr	r3, [r7, #32]
 800e080:	7fdb      	ldrb	r3, [r3, #31]
 800e082:	429a      	cmp	r2, r3
 800e084:	d803      	bhi.n	800e08e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e088:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d001      	beq.n	800e09a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e098:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1cb      	bne.n	800e03e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e0a6:	6a3b      	ldr	r3, [r7, #32]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d008      	beq.n	800e0be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e0ac:	69b9      	ldr	r1, [r7, #24]
 800e0ae:	6a38      	ldr	r0, [r7, #32]
 800e0b0:	f7ff ff0e 	bl	800ded0 <ip_reass_free_complete_datagram>
 800e0b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e0be:	697a      	ldr	r2, [r7, #20]
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	da02      	bge.n	800e0cc <ip_reass_remove_oldest_datagram+0xb4>
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	dcac      	bgt.n	800e026 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e0cc:	697b      	ldr	r3, [r7, #20]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3728      	adds	r7, #40	; 0x28
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	24008774 	.word	0x24008774

0800e0dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e0e6:	2004      	movs	r0, #4
 800e0e8:	f001 f980 	bl	800f3ec <memp_malloc>
 800e0ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d110      	bne.n	800e116 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7ff ff8e 	bl	800e018 <ip_reass_remove_oldest_datagram>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	4293      	cmp	r3, r2
 800e102:	dc03      	bgt.n	800e10c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e104:	2004      	movs	r0, #4
 800e106:	f001 f971 	bl	800f3ec <memp_malloc>
 800e10a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e112:	2300      	movs	r3, #0
 800e114:	e016      	b.n	800e144 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e116:	2220      	movs	r2, #32
 800e118:	2100      	movs	r1, #0
 800e11a:	68f8      	ldr	r0, [r7, #12]
 800e11c:	f009 fd5d 	bl	8017bda <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	220f      	movs	r2, #15
 800e124:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e126:	4b09      	ldr	r3, [pc, #36]	; (800e14c <ip_reass_enqueue_new_datagram+0x70>)
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e12e:	4a07      	ldr	r2, [pc, #28]	; (800e14c <ip_reass_enqueue_new_datagram+0x70>)
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	3308      	adds	r3, #8
 800e138:	2214      	movs	r2, #20
 800e13a:	6879      	ldr	r1, [r7, #4]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f009 fd24 	bl	8017b8a <memcpy>
  return ipr;
 800e142:	68fb      	ldr	r3, [r7, #12]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3710      	adds	r7, #16
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	24008774 	.word	0x24008774

0800e150 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e15a:	4b10      	ldr	r3, [pc, #64]	; (800e19c <ip_reass_dequeue_datagram+0x4c>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d104      	bne.n	800e16e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4a0c      	ldr	r2, [pc, #48]	; (800e19c <ip_reass_dequeue_datagram+0x4c>)
 800e16a:	6013      	str	r3, [r2, #0]
 800e16c:	e00d      	b.n	800e18a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d106      	bne.n	800e182 <ip_reass_dequeue_datagram+0x32>
 800e174:	4b0a      	ldr	r3, [pc, #40]	; (800e1a0 <ip_reass_dequeue_datagram+0x50>)
 800e176:	f240 1245 	movw	r2, #325	; 0x145
 800e17a:	490a      	ldr	r1, [pc, #40]	; (800e1a4 <ip_reass_dequeue_datagram+0x54>)
 800e17c:	480a      	ldr	r0, [pc, #40]	; (800e1a8 <ip_reass_dequeue_datagram+0x58>)
 800e17e:	f009 fdc9 	bl	8017d14 <iprintf>
    prev->next = ipr->next;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e18a:	6879      	ldr	r1, [r7, #4]
 800e18c:	2004      	movs	r0, #4
 800e18e:	f001 f9a3 	bl	800f4d8 <memp_free>
}
 800e192:	bf00      	nop
 800e194:	3708      	adds	r7, #8
 800e196:	46bd      	mov	sp, r7
 800e198:	bd80      	pop	{r7, pc}
 800e19a:	bf00      	nop
 800e19c:	24008774 	.word	0x24008774
 800e1a0:	08019f54 	.word	0x08019f54
 800e1a4:	0801a060 	.word	0x0801a060
 800e1a8:	08019fe0 	.word	0x08019fe0

0800e1ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b08c      	sub	sp, #48	; 0x30
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	885b      	ldrh	r3, [r3, #2]
 800e1ca:	b29b      	uxth	r3, r3
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7fe f8a3 	bl	800c318 <lwip_htons>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	f003 030f 	and.w	r3, r3, #15
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e1e4:	7e7b      	ldrb	r3, [r7, #25]
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	8b7a      	ldrh	r2, [r7, #26]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d202      	bcs.n	800e1f4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e1ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1f2:	e135      	b.n	800e460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e1f4:	7e7b      	ldrb	r3, [r7, #25]
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	8b7a      	ldrh	r2, [r7, #26]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e1fe:	69fb      	ldr	r3, [r7, #28]
 800e200:	88db      	ldrh	r3, [r3, #6]
 800e202:	b29b      	uxth	r3, r3
 800e204:	4618      	mov	r0, r3
 800e206:	f7fe f887 	bl	800c318 <lwip_htons>
 800e20a:	4603      	mov	r3, r0
 800e20c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e210:	b29b      	uxth	r3, r3
 800e212:	00db      	lsls	r3, r3, #3
 800e214:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e216:	68bb      	ldr	r3, [r7, #8]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	2200      	movs	r2, #0
 800e220:	701a      	strb	r2, [r3, #0]
 800e222:	2200      	movs	r2, #0
 800e224:	705a      	strb	r2, [r3, #1]
 800e226:	2200      	movs	r2, #0
 800e228:	709a      	strb	r2, [r3, #2]
 800e22a:	2200      	movs	r2, #0
 800e22c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e22e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e230:	8afa      	ldrh	r2, [r7, #22]
 800e232:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e234:	8afa      	ldrh	r2, [r7, #22]
 800e236:	8b7b      	ldrh	r3, [r7, #26]
 800e238:	4413      	add	r3, r2
 800e23a:	b29a      	uxth	r2, r3
 800e23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	88db      	ldrh	r3, [r3, #6]
 800e244:	b29b      	uxth	r3, r3
 800e246:	8afa      	ldrh	r2, [r7, #22]
 800e248:	429a      	cmp	r2, r3
 800e24a:	d902      	bls.n	800e252 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e250:	e106      	b.n	800e460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	627b      	str	r3, [r7, #36]	; 0x24
 800e258:	e068      	b.n	800e32c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	889b      	ldrh	r3, [r3, #4]
 800e264:	b29a      	uxth	r2, r3
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	889b      	ldrh	r3, [r3, #4]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d235      	bcs.n	800e2dc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e274:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d020      	beq.n	800e2be <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27e:	889b      	ldrh	r3, [r3, #4]
 800e280:	b29a      	uxth	r2, r3
 800e282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e284:	88db      	ldrh	r3, [r3, #6]
 800e286:	b29b      	uxth	r3, r3
 800e288:	429a      	cmp	r2, r3
 800e28a:	d307      	bcc.n	800e29c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28e:	88db      	ldrh	r3, [r3, #6]
 800e290:	b29a      	uxth	r2, r3
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	889b      	ldrh	r3, [r3, #4]
 800e296:	b29b      	uxth	r3, r3
 800e298:	429a      	cmp	r2, r3
 800e29a:	d902      	bls.n	800e2a2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2a0:	e0de      	b.n	800e460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	88db      	ldrh	r3, [r3, #6]
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	889b      	ldrh	r3, [r3, #4]
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d03d      	beq.n	800e334 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e2bc:	e03a      	b.n	800e334 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c0:	88db      	ldrh	r3, [r3, #6]
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	889b      	ldrh	r3, [r3, #4]
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d902      	bls.n	800e2d4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2d2:	e0c5      	b.n	800e460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	605a      	str	r2, [r3, #4]
      break;
 800e2da:	e02b      	b.n	800e334 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2de:	889b      	ldrh	r3, [r3, #4]
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	889b      	ldrh	r3, [r3, #4]
 800e2e6:	b29b      	uxth	r3, r3
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d102      	bne.n	800e2f2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e2ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e2f0:	e0b6      	b.n	800e460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	889b      	ldrh	r3, [r3, #4]
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	88db      	ldrh	r3, [r3, #6]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	429a      	cmp	r2, r3
 800e300:	d202      	bcs.n	800e308 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e306:	e0ab      	b.n	800e460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d009      	beq.n	800e322 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e310:	88db      	ldrh	r3, [r3, #6]
 800e312:	b29a      	uxth	r2, r3
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	889b      	ldrh	r3, [r3, #4]
 800e318:	b29b      	uxth	r3, r3
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d001      	beq.n	800e322 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e31e:	2300      	movs	r3, #0
 800e320:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e322:	693b      	ldr	r3, [r7, #16]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e328:	693b      	ldr	r3, [r7, #16]
 800e32a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d193      	bne.n	800e25a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e332:	e000      	b.n	800e336 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e334:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d12d      	bne.n	800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d01c      	beq.n	800e37c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	88db      	ldrh	r3, [r3, #6]
 800e346:	b29a      	uxth	r2, r3
 800e348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e34a:	889b      	ldrh	r3, [r3, #4]
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	429a      	cmp	r2, r3
 800e350:	d906      	bls.n	800e360 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e352:	4b45      	ldr	r3, [pc, #276]	; (800e468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e354:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e358:	4944      	ldr	r1, [pc, #272]	; (800e46c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e35a:	4845      	ldr	r0, [pc, #276]	; (800e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e35c:	f009 fcda 	bl	8017d14 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e362:	68ba      	ldr	r2, [r7, #8]
 800e364:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e368:	88db      	ldrh	r3, [r3, #6]
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36e:	889b      	ldrh	r3, [r3, #4]
 800e370:	b29b      	uxth	r3, r3
 800e372:	429a      	cmp	r2, r3
 800e374:	d010      	beq.n	800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e376:	2300      	movs	r3, #0
 800e378:	623b      	str	r3, [r7, #32]
 800e37a:	e00d      	b.n	800e398 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d006      	beq.n	800e392 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e384:	4b38      	ldr	r3, [pc, #224]	; (800e468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e386:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e38a:	493a      	ldr	r1, [pc, #232]	; (800e474 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e38c:	4838      	ldr	r0, [pc, #224]	; (800e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e38e:	f009 fcc1 	bl	8017d14 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	68ba      	ldr	r2, [r7, #8]
 800e396:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d105      	bne.n	800e3aa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	7f9b      	ldrb	r3, [r3, #30]
 800e3a2:	f003 0301 	and.w	r3, r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d059      	beq.n	800e45e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e3aa:	6a3b      	ldr	r3, [r7, #32]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d04f      	beq.n	800e450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d006      	beq.n	800e3c6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	889b      	ldrh	r3, [r3, #4]
 800e3c0:	b29b      	uxth	r3, r3
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d002      	beq.n	800e3cc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	623b      	str	r3, [r7, #32]
 800e3ca:	e041      	b.n	800e450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ce:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e3d6:	e012      	b.n	800e3fe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e0:	88db      	ldrh	r3, [r3, #6]
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e6:	889b      	ldrh	r3, [r3, #4]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d002      	beq.n	800e3f4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	623b      	str	r3, [r7, #32]
            break;
 800e3f2:	e007      	b.n	800e404 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1e9      	bne.n	800e3d8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e404:	6a3b      	ldr	r3, [r7, #32]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d022      	beq.n	800e450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d106      	bne.n	800e420 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e412:	4b15      	ldr	r3, [pc, #84]	; (800e468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e414:	f240 12df 	movw	r2, #479	; 0x1df
 800e418:	4917      	ldr	r1, [pc, #92]	; (800e478 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e41a:	4815      	ldr	r0, [pc, #84]	; (800e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e41c:	f009 fc7a 	bl	8017d14 <iprintf>
          LWIP_ASSERT("sanity check",
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	685b      	ldr	r3, [r3, #4]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e428:	429a      	cmp	r2, r3
 800e42a:	d106      	bne.n	800e43a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e42c:	4b0e      	ldr	r3, [pc, #56]	; (800e468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e42e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e432:	4911      	ldr	r1, [pc, #68]	; (800e478 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e434:	480e      	ldr	r0, [pc, #56]	; (800e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e436:	f009 fc6d 	bl	8017d14 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d006      	beq.n	800e450 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e442:	4b09      	ldr	r3, [pc, #36]	; (800e468 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e444:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e448:	490c      	ldr	r1, [pc, #48]	; (800e47c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e44a:	4809      	ldr	r0, [pc, #36]	; (800e470 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e44c:	f009 fc62 	bl	8017d14 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e450:	6a3b      	ldr	r3, [r7, #32]
 800e452:	2b00      	cmp	r3, #0
 800e454:	bf14      	ite	ne
 800e456:	2301      	movne	r3, #1
 800e458:	2300      	moveq	r3, #0
 800e45a:	b2db      	uxtb	r3, r3
 800e45c:	e000      	b.n	800e460 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e45e:	2300      	movs	r3, #0
}
 800e460:	4618      	mov	r0, r3
 800e462:	3730      	adds	r7, #48	; 0x30
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	08019f54 	.word	0x08019f54
 800e46c:	0801a07c 	.word	0x0801a07c
 800e470:	08019fe0 	.word	0x08019fe0
 800e474:	0801a09c 	.word	0x0801a09c
 800e478:	0801a0d4 	.word	0x0801a0d4
 800e47c:	0801a0e4 	.word	0x0801a0e4

0800e480 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b08e      	sub	sp, #56	; 0x38
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	f003 030f 	and.w	r3, r3, #15
 800e496:	b2db      	uxtb	r3, r3
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b14      	cmp	r3, #20
 800e49e:	f040 8171 	bne.w	800e784 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	88db      	ldrh	r3, [r3, #6]
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f7fd ff35 	bl	800c318 <lwip_htons>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	00db      	lsls	r3, r3, #3
 800e4b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4bc:	885b      	ldrh	r3, [r3, #2]
 800e4be:	b29b      	uxth	r3, r3
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7fd ff29 	bl	800c318 <lwip_htons>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4cc:	781b      	ldrb	r3, [r3, #0]
 800e4ce:	f003 030f 	and.w	r3, r3, #15
 800e4d2:	b2db      	uxtb	r3, r3
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e4da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4de:	b29b      	uxth	r3, r3
 800e4e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	f0c0 8150 	bcc.w	800e788 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e4e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f001 ff71 	bl	80103dc <pbuf_clen>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e4fe:	4b8c      	ldr	r3, [pc, #560]	; (800e730 <ip4_reass+0x2b0>)
 800e500:	881b      	ldrh	r3, [r3, #0]
 800e502:	461a      	mov	r2, r3
 800e504:	8c3b      	ldrh	r3, [r7, #32]
 800e506:	4413      	add	r3, r2
 800e508:	2b0a      	cmp	r3, #10
 800e50a:	dd10      	ble.n	800e52e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e50c:	8c3b      	ldrh	r3, [r7, #32]
 800e50e:	4619      	mov	r1, r3
 800e510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e512:	f7ff fd81 	bl	800e018 <ip_reass_remove_oldest_datagram>
 800e516:	4603      	mov	r3, r0
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 8137 	beq.w	800e78c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e51e:	4b84      	ldr	r3, [pc, #528]	; (800e730 <ip4_reass+0x2b0>)
 800e520:	881b      	ldrh	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	8c3b      	ldrh	r3, [r7, #32]
 800e526:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e528:	2b0a      	cmp	r3, #10
 800e52a:	f300 812f 	bgt.w	800e78c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e52e:	4b81      	ldr	r3, [pc, #516]	; (800e734 <ip4_reass+0x2b4>)
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	633b      	str	r3, [r7, #48]	; 0x30
 800e534:	e015      	b.n	800e562 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e538:	695a      	ldr	r2, [r3, #20]
 800e53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d10c      	bne.n	800e55c <ip4_reass+0xdc>
 800e542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e544:	699a      	ldr	r2, [r3, #24]
 800e546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e548:	691b      	ldr	r3, [r3, #16]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d106      	bne.n	800e55c <ip4_reass+0xdc>
 800e54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e550:	899a      	ldrh	r2, [r3, #12]
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	889b      	ldrh	r3, [r3, #4]
 800e556:	b29b      	uxth	r3, r3
 800e558:	429a      	cmp	r2, r3
 800e55a:	d006      	beq.n	800e56a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	633b      	str	r3, [r7, #48]	; 0x30
 800e562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1e6      	bne.n	800e536 <ip4_reass+0xb6>
 800e568:	e000      	b.n	800e56c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e56a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d109      	bne.n	800e586 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e572:	8c3b      	ldrh	r3, [r7, #32]
 800e574:	4619      	mov	r1, r3
 800e576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e578:	f7ff fdb0 	bl	800e0dc <ip_reass_enqueue_new_datagram>
 800e57c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e580:	2b00      	cmp	r3, #0
 800e582:	d11c      	bne.n	800e5be <ip4_reass+0x13e>
      goto nullreturn;
 800e584:	e105      	b.n	800e792 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e588:	88db      	ldrh	r3, [r3, #6]
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fd fec3 	bl	800c318 <lwip_htons>
 800e592:	4603      	mov	r3, r0
 800e594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d110      	bne.n	800e5be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e59e:	89db      	ldrh	r3, [r3, #14]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7fd feb9 	bl	800c318 <lwip_htons>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d006      	beq.n	800e5be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b2:	3308      	adds	r3, #8
 800e5b4:	2214      	movs	r2, #20
 800e5b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f009 fae6 	bl	8017b8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c0:	88db      	ldrh	r3, [r3, #6]
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	f003 0320 	and.w	r3, r3, #32
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	bf0c      	ite	eq
 800e5cc:	2301      	moveq	r3, #1
 800e5ce:	2300      	movne	r3, #0
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00e      	beq.n	800e5f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e5da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e5dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e5de:	4413      	add	r3, r2
 800e5e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e5e2:	8b7a      	ldrh	r2, [r7, #26]
 800e5e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	f0c0 80a0 	bcc.w	800e72c <ip4_reass+0x2ac>
 800e5ec:	8b7b      	ldrh	r3, [r7, #26]
 800e5ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	f200 809a 	bhi.w	800e72c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e5f8:	69fa      	ldr	r2, [r7, #28]
 800e5fa:	6879      	ldr	r1, [r7, #4]
 800e5fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5fe:	f7ff fdd5 	bl	800e1ac <ip_reass_chain_frag_into_datagram_and_validate>
 800e602:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e60a:	f000 809b 	beq.w	800e744 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e60e:	4b48      	ldr	r3, [pc, #288]	; (800e730 <ip4_reass+0x2b0>)
 800e610:	881a      	ldrh	r2, [r3, #0]
 800e612:	8c3b      	ldrh	r3, [r7, #32]
 800e614:	4413      	add	r3, r2
 800e616:	b29a      	uxth	r2, r3
 800e618:	4b45      	ldr	r3, [pc, #276]	; (800e730 <ip4_reass+0x2b0>)
 800e61a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00d      	beq.n	800e63e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e622:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e626:	4413      	add	r3, r2
 800e628:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	8a7a      	ldrh	r2, [r7, #18]
 800e62e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e632:	7f9b      	ldrb	r3, [r3, #30]
 800e634:	f043 0301 	orr.w	r3, r3, #1
 800e638:	b2da      	uxtb	r2, r3
 800e63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e63c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d171      	bne.n	800e728 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e646:	8b9b      	ldrh	r3, [r3, #28]
 800e648:	3314      	adds	r3, #20
 800e64a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e64e:	685b      	ldr	r3, [r3, #4]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	685b      	ldr	r3, [r3, #4]
 800e65c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e660:	3308      	adds	r3, #8
 800e662:	2214      	movs	r2, #20
 800e664:	4619      	mov	r1, r3
 800e666:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e668:	f009 fa8f 	bl	8017b8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e66c:	8a3b      	ldrh	r3, [r7, #16]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fd fe52 	bl	800c318 <lwip_htons>
 800e674:	4603      	mov	r3, r0
 800e676:	461a      	mov	r2, r3
 800e678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e67e:	2200      	movs	r2, #0
 800e680:	719a      	strb	r2, [r3, #6]
 800e682:	2200      	movs	r2, #0
 800e684:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e688:	2200      	movs	r2, #0
 800e68a:	729a      	strb	r2, [r3, #10]
 800e68c:	2200      	movs	r2, #0
 800e68e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	685b      	ldr	r3, [r3, #4]
 800e694:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e696:	e00d      	b.n	800e6b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e69e:	2114      	movs	r1, #20
 800e6a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e6a2:	f001 fd87 	bl	80101b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e6a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f001 fed7 	bl	801045c <pbuf_cat>
      r = iprh->next_pbuf;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1ee      	bne.n	800e698 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e6ba:	4b1e      	ldr	r3, [pc, #120]	; (800e734 <ip4_reass+0x2b4>)
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d102      	bne.n	800e6ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6c8:	e010      	b.n	800e6ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e6ca:	4b1a      	ldr	r3, [pc, #104]	; (800e734 <ip4_reass+0x2b4>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6d0:	e007      	b.n	800e6e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d006      	beq.n	800e6ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d1f4      	bne.n	800e6d2 <ip4_reass+0x252>
 800e6e8:	e000      	b.n	800e6ec <ip4_reass+0x26c>
          break;
 800e6ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e6ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6f0:	f7ff fd2e 	bl	800e150 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	f001 fe71 	bl	80103dc <pbuf_clen>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e6fe:	4b0c      	ldr	r3, [pc, #48]	; (800e730 <ip4_reass+0x2b0>)
 800e700:	881b      	ldrh	r3, [r3, #0]
 800e702:	8c3a      	ldrh	r2, [r7, #32]
 800e704:	429a      	cmp	r2, r3
 800e706:	d906      	bls.n	800e716 <ip4_reass+0x296>
 800e708:	4b0b      	ldr	r3, [pc, #44]	; (800e738 <ip4_reass+0x2b8>)
 800e70a:	f240 229b 	movw	r2, #667	; 0x29b
 800e70e:	490b      	ldr	r1, [pc, #44]	; (800e73c <ip4_reass+0x2bc>)
 800e710:	480b      	ldr	r0, [pc, #44]	; (800e740 <ip4_reass+0x2c0>)
 800e712:	f009 faff 	bl	8017d14 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e716:	4b06      	ldr	r3, [pc, #24]	; (800e730 <ip4_reass+0x2b0>)
 800e718:	881a      	ldrh	r2, [r3, #0]
 800e71a:	8c3b      	ldrh	r3, [r7, #32]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	b29a      	uxth	r2, r3
 800e720:	4b03      	ldr	r3, [pc, #12]	; (800e730 <ip4_reass+0x2b0>)
 800e722:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	e038      	b.n	800e79a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e728:	2300      	movs	r3, #0
 800e72a:	e036      	b.n	800e79a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e72c:	bf00      	nop
 800e72e:	e00a      	b.n	800e746 <ip4_reass+0x2c6>
 800e730:	24008778 	.word	0x24008778
 800e734:	24008774 	.word	0x24008774
 800e738:	08019f54 	.word	0x08019f54
 800e73c:	0801a108 	.word	0x0801a108
 800e740:	08019fe0 	.word	0x08019fe0
    goto nullreturn_ipr;
 800e744:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d106      	bne.n	800e75a <ip4_reass+0x2da>
 800e74c:	4b15      	ldr	r3, [pc, #84]	; (800e7a4 <ip4_reass+0x324>)
 800e74e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e752:	4915      	ldr	r1, [pc, #84]	; (800e7a8 <ip4_reass+0x328>)
 800e754:	4815      	ldr	r0, [pc, #84]	; (800e7ac <ip4_reass+0x32c>)
 800e756:	f009 fadd 	bl	8017d14 <iprintf>
  if (ipr->p == NULL) {
 800e75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d116      	bne.n	800e790 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e762:	4b13      	ldr	r3, [pc, #76]	; (800e7b0 <ip4_reass+0x330>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e768:	429a      	cmp	r2, r3
 800e76a:	d006      	beq.n	800e77a <ip4_reass+0x2fa>
 800e76c:	4b0d      	ldr	r3, [pc, #52]	; (800e7a4 <ip4_reass+0x324>)
 800e76e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e772:	4910      	ldr	r1, [pc, #64]	; (800e7b4 <ip4_reass+0x334>)
 800e774:	480d      	ldr	r0, [pc, #52]	; (800e7ac <ip4_reass+0x32c>)
 800e776:	f009 facd 	bl	8017d14 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e77a:	2100      	movs	r1, #0
 800e77c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e77e:	f7ff fce7 	bl	800e150 <ip_reass_dequeue_datagram>
 800e782:	e006      	b.n	800e792 <ip4_reass+0x312>
    goto nullreturn;
 800e784:	bf00      	nop
 800e786:	e004      	b.n	800e792 <ip4_reass+0x312>
    goto nullreturn;
 800e788:	bf00      	nop
 800e78a:	e002      	b.n	800e792 <ip4_reass+0x312>
      goto nullreturn;
 800e78c:	bf00      	nop
 800e78e:	e000      	b.n	800e792 <ip4_reass+0x312>
  }

nullreturn:
 800e790:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f001 fd94 	bl	80102c0 <pbuf_free>
  return NULL;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3738      	adds	r7, #56	; 0x38
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	08019f54 	.word	0x08019f54
 800e7a8:	0801a124 	.word	0x0801a124
 800e7ac:	08019fe0 	.word	0x08019fe0
 800e7b0:	24008774 	.word	0x24008774
 800e7b4:	0801a130 	.word	0x0801a130

0800e7b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e7bc:	2005      	movs	r0, #5
 800e7be:	f000 fe15 	bl	800f3ec <memp_malloc>
 800e7c2:	4603      	mov	r3, r0
}
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d106      	bne.n	800e7e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e7d6:	4b07      	ldr	r3, [pc, #28]	; (800e7f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e7d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e7dc:	4906      	ldr	r1, [pc, #24]	; (800e7f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e7de:	4807      	ldr	r0, [pc, #28]	; (800e7fc <ip_frag_free_pbuf_custom_ref+0x34>)
 800e7e0:	f009 fa98 	bl	8017d14 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e7e4:	6879      	ldr	r1, [r7, #4]
 800e7e6:	2005      	movs	r0, #5
 800e7e8:	f000 fe76 	bl	800f4d8 <memp_free>
}
 800e7ec:	bf00      	nop
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	08019f54 	.word	0x08019f54
 800e7f8:	0801a150 	.word	0x0801a150
 800e7fc:	08019fe0 	.word	0x08019fe0

0800e800 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b084      	sub	sp, #16
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d106      	bne.n	800e820 <ipfrag_free_pbuf_custom+0x20>
 800e812:	4b11      	ldr	r3, [pc, #68]	; (800e858 <ipfrag_free_pbuf_custom+0x58>)
 800e814:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e818:	4910      	ldr	r1, [pc, #64]	; (800e85c <ipfrag_free_pbuf_custom+0x5c>)
 800e81a:	4811      	ldr	r0, [pc, #68]	; (800e860 <ipfrag_free_pbuf_custom+0x60>)
 800e81c:	f009 fa7a 	bl	8017d14 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	429a      	cmp	r2, r3
 800e826:	d006      	beq.n	800e836 <ipfrag_free_pbuf_custom+0x36>
 800e828:	4b0b      	ldr	r3, [pc, #44]	; (800e858 <ipfrag_free_pbuf_custom+0x58>)
 800e82a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e82e:	490d      	ldr	r1, [pc, #52]	; (800e864 <ipfrag_free_pbuf_custom+0x64>)
 800e830:	480b      	ldr	r0, [pc, #44]	; (800e860 <ipfrag_free_pbuf_custom+0x60>)
 800e832:	f009 fa6f 	bl	8017d14 <iprintf>
  if (pcr->original != NULL) {
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	695b      	ldr	r3, [r3, #20]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d004      	beq.n	800e848 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	695b      	ldr	r3, [r3, #20]
 800e842:	4618      	mov	r0, r3
 800e844:	f001 fd3c 	bl	80102c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f7ff ffbd 	bl	800e7c8 <ip_frag_free_pbuf_custom_ref>
}
 800e84e:	bf00      	nop
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	08019f54 	.word	0x08019f54
 800e85c:	0801a15c 	.word	0x0801a15c
 800e860:	08019fe0 	.word	0x08019fe0
 800e864:	0801a168 	.word	0x0801a168

0800e868 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b094      	sub	sp, #80	; 0x50
 800e86c:	af02      	add	r7, sp, #8
 800e86e:	60f8      	str	r0, [r7, #12]
 800e870:	60b9      	str	r1, [r7, #8]
 800e872:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e874:	2300      	movs	r3, #0
 800e876:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e87e:	3b14      	subs	r3, #20
 800e880:	2b00      	cmp	r3, #0
 800e882:	da00      	bge.n	800e886 <ip4_frag+0x1e>
 800e884:	3307      	adds	r3, #7
 800e886:	10db      	asrs	r3, r3, #3
 800e888:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e88a:	2314      	movs	r3, #20
 800e88c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e896:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	f003 030f 	and.w	r3, r3, #15
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	009b      	lsls	r3, r3, #2
 800e8a4:	b2db      	uxtb	r3, r3
 800e8a6:	2b14      	cmp	r3, #20
 800e8a8:	d002      	beq.n	800e8b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e8aa:	f06f 0305 	mvn.w	r3, #5
 800e8ae:	e110      	b.n	800ead2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	895b      	ldrh	r3, [r3, #10]
 800e8b4:	2b13      	cmp	r3, #19
 800e8b6:	d809      	bhi.n	800e8cc <ip4_frag+0x64>
 800e8b8:	4b88      	ldr	r3, [pc, #544]	; (800eadc <ip4_frag+0x274>)
 800e8ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e8be:	4988      	ldr	r1, [pc, #544]	; (800eae0 <ip4_frag+0x278>)
 800e8c0:	4888      	ldr	r0, [pc, #544]	; (800eae4 <ip4_frag+0x27c>)
 800e8c2:	f009 fa27 	bl	8017d14 <iprintf>
 800e8c6:	f06f 0305 	mvn.w	r3, #5
 800e8ca:	e102      	b.n	800ead2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ce:	88db      	ldrh	r3, [r3, #6]
 800e8d0:	b29b      	uxth	r3, r3
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fd fd20 	bl	800c318 <lwip_htons>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e8dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e8e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e8e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e8ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	891b      	ldrh	r3, [r3, #8]
 800e8f2:	3b14      	subs	r3, #20
 800e8f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e8f8:	e0e1      	b.n	800eabe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e8fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e8fc:	00db      	lsls	r3, r3, #3
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e904:	4293      	cmp	r3, r2
 800e906:	bf28      	it	cs
 800e908:	4613      	movcs	r3, r2
 800e90a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e90c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e910:	2114      	movs	r1, #20
 800e912:	200e      	movs	r0, #14
 800e914:	f001 f9f0 	bl	800fcf8 <pbuf_alloc>
 800e918:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	f000 80d5 	beq.w	800eacc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e924:	895b      	ldrh	r3, [r3, #10]
 800e926:	2b13      	cmp	r3, #19
 800e928:	d806      	bhi.n	800e938 <ip4_frag+0xd0>
 800e92a:	4b6c      	ldr	r3, [pc, #432]	; (800eadc <ip4_frag+0x274>)
 800e92c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e930:	496d      	ldr	r1, [pc, #436]	; (800eae8 <ip4_frag+0x280>)
 800e932:	486c      	ldr	r0, [pc, #432]	; (800eae4 <ip4_frag+0x27c>)
 800e934:	f009 f9ee 	bl	8017d14 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	2214      	movs	r2, #20
 800e93e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e940:	4618      	mov	r0, r3
 800e942:	f009 f922 	bl	8017b8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e94c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e94e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e952:	e064      	b.n	800ea1e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	895a      	ldrh	r2, [r3, #10]
 800e958:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e95a:	1ad3      	subs	r3, r2, r3
 800e95c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	895b      	ldrh	r3, [r3, #10]
 800e962:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e964:	429a      	cmp	r2, r3
 800e966:	d906      	bls.n	800e976 <ip4_frag+0x10e>
 800e968:	4b5c      	ldr	r3, [pc, #368]	; (800eadc <ip4_frag+0x274>)
 800e96a:	f240 322d 	movw	r2, #813	; 0x32d
 800e96e:	495f      	ldr	r1, [pc, #380]	; (800eaec <ip4_frag+0x284>)
 800e970:	485c      	ldr	r0, [pc, #368]	; (800eae4 <ip4_frag+0x27c>)
 800e972:	f009 f9cf 	bl	8017d14 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e976:	8bfa      	ldrh	r2, [r7, #30]
 800e978:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e97c:	4293      	cmp	r3, r2
 800e97e:	bf28      	it	cs
 800e980:	4613      	movcs	r3, r2
 800e982:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e986:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <ip4_frag+0x132>
        poff = 0;
 800e98e:	2300      	movs	r3, #0
 800e990:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	60fb      	str	r3, [r7, #12]
        continue;
 800e998:	e041      	b.n	800ea1e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e99a:	f7ff ff0d 	bl	800e7b8 <ip_frag_alloc_pbuf_custom_ref>
 800e99e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e9a0:	69bb      	ldr	r3, [r7, #24]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d103      	bne.n	800e9ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e9a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9a8:	f001 fc8a 	bl	80102c0 <pbuf_free>
        goto memerr;
 800e9ac:	e08f      	b.n	800eace <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e9ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e9b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e9bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e9c0:	9201      	str	r2, [sp, #4]
 800e9c2:	9300      	str	r3, [sp, #0]
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2241      	movs	r2, #65	; 0x41
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	f001 fac1 	bl	800ff50 <pbuf_alloced_custom>
 800e9ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e9d6:	69b8      	ldr	r0, [r7, #24]
 800e9d8:	f7ff fef6 	bl	800e7c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e9dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9de:	f001 fc6f 	bl	80102c0 <pbuf_free>
        goto memerr;
 800e9e2:	e074      	b.n	800eace <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f001 fd11 	bl	801040c <pbuf_ref>
      pcr->original = p;
 800e9ea:	69bb      	ldr	r3, [r7, #24]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	4a3f      	ldr	r2, [pc, #252]	; (800eaf0 <ip4_frag+0x288>)
 800e9f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e9f6:	6979      	ldr	r1, [r7, #20]
 800e9f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9fa:	f001 fd2f 	bl	801045c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e9fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ea02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ea06:	1ad3      	subs	r3, r2, r3
 800ea08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ea0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d004      	beq.n	800ea1e <ip4_frag+0x1b6>
        poff = 0;
 800ea14:	2300      	movs	r3, #0
 800ea16:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ea1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d196      	bne.n	800e954 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ea26:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ea28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ea2c:	4413      	add	r3, r2
 800ea2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea34:	f1a3 0213 	sub.w	r2, r3, #19
 800ea38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	bfcc      	ite	gt
 800ea40:	2301      	movgt	r3, #1
 800ea42:	2300      	movle	r3, #0
 800ea44:	b2db      	uxtb	r3, r3
 800ea46:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ea48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ea4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea50:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ea52:	6a3b      	ldr	r3, [r7, #32]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d002      	beq.n	800ea5e <ip4_frag+0x1f6>
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d003      	beq.n	800ea66 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ea5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ea64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ea66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fd fc55 	bl	800c318 <lwip_htons>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	461a      	mov	r2, r3
 800ea72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea74:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ea76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea78:	3314      	adds	r3, #20
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fd fc4b 	bl	800c318 <lwip_htons>
 800ea82:	4603      	mov	r3, r0
 800ea84:	461a      	mov	r2, r3
 800ea86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea88:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	729a      	strb	r2, [r3, #10]
 800ea90:	2200      	movs	r2, #0
 800ea92:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	695b      	ldr	r3, [r3, #20]
 800ea98:	687a      	ldr	r2, [r7, #4]
 800ea9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea9c:	68b8      	ldr	r0, [r7, #8]
 800ea9e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eaa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaa2:	f001 fc0d 	bl	80102c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eaa6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eaaa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800eab2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eab6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eab8:	4413      	add	r3, r2
 800eaba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800eabe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	f47f af19 	bne.w	800e8fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800eac8:	2300      	movs	r3, #0
 800eaca:	e002      	b.n	800ead2 <ip4_frag+0x26a>
      goto memerr;
 800eacc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800eace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3748      	adds	r7, #72	; 0x48
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	08019f54 	.word	0x08019f54
 800eae0:	0801a174 	.word	0x0801a174
 800eae4:	08019fe0 	.word	0x08019fe0
 800eae8:	0801a190 	.word	0x0801a190
 800eaec:	0801a1b0 	.word	0x0801a1b0
 800eaf0:	0800e801 	.word	0x0800e801

0800eaf4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b083      	sub	sp, #12
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800eafc:	4b04      	ldr	r3, [pc, #16]	; (800eb10 <ptr_to_mem+0x1c>)
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	4413      	add	r3, r2
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	370c      	adds	r7, #12
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0e:	4770      	bx	lr
 800eb10:	2400877c 	.word	0x2400877c

0800eb14 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800eb1c:	4b04      	ldr	r3, [pc, #16]	; (800eb30 <mem_to_ptr+0x1c>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	1ad3      	subs	r3, r2, r3
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	370c      	adds	r7, #12
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2e:	4770      	bx	lr
 800eb30:	2400877c 	.word	0x2400877c

0800eb34 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800eb34:	b590      	push	{r4, r7, lr}
 800eb36:	b085      	sub	sp, #20
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800eb3c:	4b45      	ldr	r3, [pc, #276]	; (800ec54 <plug_holes+0x120>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d206      	bcs.n	800eb54 <plug_holes+0x20>
 800eb46:	4b44      	ldr	r3, [pc, #272]	; (800ec58 <plug_holes+0x124>)
 800eb48:	f240 12df 	movw	r2, #479	; 0x1df
 800eb4c:	4943      	ldr	r1, [pc, #268]	; (800ec5c <plug_holes+0x128>)
 800eb4e:	4844      	ldr	r0, [pc, #272]	; (800ec60 <plug_holes+0x12c>)
 800eb50:	f009 f8e0 	bl	8017d14 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800eb54:	4b43      	ldr	r3, [pc, #268]	; (800ec64 <plug_holes+0x130>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	687a      	ldr	r2, [r7, #4]
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	d306      	bcc.n	800eb6c <plug_holes+0x38>
 800eb5e:	4b3e      	ldr	r3, [pc, #248]	; (800ec58 <plug_holes+0x124>)
 800eb60:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eb64:	4940      	ldr	r1, [pc, #256]	; (800ec68 <plug_holes+0x134>)
 800eb66:	483e      	ldr	r0, [pc, #248]	; (800ec60 <plug_holes+0x12c>)
 800eb68:	f009 f8d4 	bl	8017d14 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	7a1b      	ldrb	r3, [r3, #8]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d006      	beq.n	800eb82 <plug_holes+0x4e>
 800eb74:	4b38      	ldr	r3, [pc, #224]	; (800ec58 <plug_holes+0x124>)
 800eb76:	f240 12e1 	movw	r2, #481	; 0x1e1
 800eb7a:	493c      	ldr	r1, [pc, #240]	; (800ec6c <plug_holes+0x138>)
 800eb7c:	4838      	ldr	r0, [pc, #224]	; (800ec60 <plug_holes+0x12c>)
 800eb7e:	f009 f8c9 	bl	8017d14 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4a3a      	ldr	r2, [pc, #232]	; (800ec70 <plug_holes+0x13c>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d906      	bls.n	800eb9a <plug_holes+0x66>
 800eb8c:	4b32      	ldr	r3, [pc, #200]	; (800ec58 <plug_holes+0x124>)
 800eb8e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800eb92:	4938      	ldr	r1, [pc, #224]	; (800ec74 <plug_holes+0x140>)
 800eb94:	4832      	ldr	r0, [pc, #200]	; (800ec60 <plug_holes+0x12c>)
 800eb96:	f009 f8bd 	bl	8017d14 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7ff ffa8 	bl	800eaf4 <ptr_to_mem>
 800eba4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d024      	beq.n	800ebf8 <plug_holes+0xc4>
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	7a1b      	ldrb	r3, [r3, #8]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d120      	bne.n	800ebf8 <plug_holes+0xc4>
 800ebb6:	4b2b      	ldr	r3, [pc, #172]	; (800ec64 <plug_holes+0x130>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d01b      	beq.n	800ebf8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ebc0:	4b2d      	ldr	r3, [pc, #180]	; (800ec78 <plug_holes+0x144>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68fa      	ldr	r2, [r7, #12]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d102      	bne.n	800ebd0 <plug_holes+0x9c>
      lfree = mem;
 800ebca:	4a2b      	ldr	r2, [pc, #172]	; (800ec78 <plug_holes+0x144>)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a24      	ldr	r2, [pc, #144]	; (800ec70 <plug_holes+0x13c>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d00a      	beq.n	800ebf8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff ff84 	bl	800eaf4 <ptr_to_mem>
 800ebec:	4604      	mov	r4, r0
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7ff ff90 	bl	800eb14 <mem_to_ptr>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff ff79 	bl	800eaf4 <ptr_to_mem>
 800ec02:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d01f      	beq.n	800ec4c <plug_holes+0x118>
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	7a1b      	ldrb	r3, [r3, #8]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d11b      	bne.n	800ec4c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ec14:	4b18      	ldr	r3, [pc, #96]	; (800ec78 <plug_holes+0x144>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d102      	bne.n	800ec24 <plug_holes+0xf0>
      lfree = pmem;
 800ec1e:	4a16      	ldr	r2, [pc, #88]	; (800ec78 <plug_holes+0x144>)
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a0f      	ldr	r2, [pc, #60]	; (800ec70 <plug_holes+0x13c>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d00a      	beq.n	800ec4c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff ff5a 	bl	800eaf4 <ptr_to_mem>
 800ec40:	4604      	mov	r4, r0
 800ec42:	68b8      	ldr	r0, [r7, #8]
 800ec44:	f7ff ff66 	bl	800eb14 <mem_to_ptr>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	6063      	str	r3, [r4, #4]
    }
  }
}
 800ec4c:	bf00      	nop
 800ec4e:	3714      	adds	r7, #20
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd90      	pop	{r4, r7, pc}
 800ec54:	2400877c 	.word	0x2400877c
 800ec58:	0801a1c0 	.word	0x0801a1c0
 800ec5c:	0801a238 	.word	0x0801a238
 800ec60:	0801a250 	.word	0x0801a250
 800ec64:	24008780 	.word	0x24008780
 800ec68:	0801a278 	.word	0x0801a278
 800ec6c:	0801a294 	.word	0x0801a294
 800ec70:	0001ffe8 	.word	0x0001ffe8
 800ec74:	0801a2b0 	.word	0x0801a2b0
 800ec78:	24008788 	.word	0x24008788

0800ec7c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ec82:	4b1b      	ldr	r3, [pc, #108]	; (800ecf0 <mem_init+0x74>)
 800ec84:	4a1b      	ldr	r2, [pc, #108]	; (800ecf4 <mem_init+0x78>)
 800ec86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ec88:	4b19      	ldr	r3, [pc, #100]	; (800ecf0 <mem_init+0x74>)
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	4a19      	ldr	r2, [pc, #100]	; (800ecf8 <mem_init+0x7c>)
 800ec92:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800eca0:	4815      	ldr	r0, [pc, #84]	; (800ecf8 <mem_init+0x7c>)
 800eca2:	f7ff ff27 	bl	800eaf4 <ptr_to_mem>
 800eca6:	4603      	mov	r3, r0
 800eca8:	4a14      	ldr	r2, [pc, #80]	; (800ecfc <mem_init+0x80>)
 800ecaa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ecac:	4b13      	ldr	r3, [pc, #76]	; (800ecfc <mem_init+0x80>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ecb4:	4b11      	ldr	r3, [pc, #68]	; (800ecfc <mem_init+0x80>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a0f      	ldr	r2, [pc, #60]	; (800ecf8 <mem_init+0x7c>)
 800ecba:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ecbc:	4b0f      	ldr	r3, [pc, #60]	; (800ecfc <mem_init+0x80>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	4a0d      	ldr	r2, [pc, #52]	; (800ecf8 <mem_init+0x7c>)
 800ecc2:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ecc4:	4b0a      	ldr	r3, [pc, #40]	; (800ecf0 <mem_init+0x74>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	4a0d      	ldr	r2, [pc, #52]	; (800ed00 <mem_init+0x84>)
 800ecca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800eccc:	480d      	ldr	r0, [pc, #52]	; (800ed04 <mem_init+0x88>)
 800ecce:	f001 fef7 	bl	8010ac0 <sys_mutex_new>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d006      	beq.n	800ece6 <mem_init+0x6a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ecd8:	4b0b      	ldr	r3, [pc, #44]	; (800ed08 <mem_init+0x8c>)
 800ecda:	f240 221f 	movw	r2, #543	; 0x21f
 800ecde:	490b      	ldr	r1, [pc, #44]	; (800ed0c <mem_init+0x90>)
 800ece0:	480b      	ldr	r0, [pc, #44]	; (800ed10 <mem_init+0x94>)
 800ece2:	f009 f817 	bl	8017d14 <iprintf>
  }
}
 800ece6:	bf00      	nop
 800ece8:	3708      	adds	r7, #8
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}
 800ecee:	bf00      	nop
 800ecf0:	2400877c 	.word	0x2400877c
 800ecf4:	30020000 	.word	0x30020000
 800ecf8:	0001ffe8 	.word	0x0001ffe8
 800ecfc:	24008780 	.word	0x24008780
 800ed00:	24008788 	.word	0x24008788
 800ed04:	24008784 	.word	0x24008784
 800ed08:	0801a1c0 	.word	0x0801a1c0
 800ed0c:	0801a2dc 	.word	0x0801a2dc
 800ed10:	0801a250 	.word	0x0801a250

0800ed14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7ff fef9 	bl	800eb14 <mem_to_ptr>
 800ed22:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7ff fee3 	bl	800eaf4 <ptr_to_mem>
 800ed2e:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	4618      	mov	r0, r3
 800ed36:	f7ff fedd 	bl	800eaf4 <ptr_to_mem>
 800ed3a:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a11      	ldr	r2, [pc, #68]	; (800ed88 <mem_link_valid+0x74>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d818      	bhi.n	800ed78 <mem_link_valid+0x64>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	685b      	ldr	r3, [r3, #4]
 800ed4a:	4a0f      	ldr	r2, [pc, #60]	; (800ed88 <mem_link_valid+0x74>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	d813      	bhi.n	800ed78 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d004      	beq.n	800ed64 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	697a      	ldr	r2, [r7, #20]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d109      	bne.n	800ed78 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed64:	4b09      	ldr	r3, [pc, #36]	; (800ed8c <mem_link_valid+0x78>)
 800ed66:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d006      	beq.n	800ed7c <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	685b      	ldr	r3, [r3, #4]
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d001      	beq.n	800ed7c <mem_link_valid+0x68>
    return 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e000      	b.n	800ed7e <mem_link_valid+0x6a>
  }
  return 1;
 800ed7c:	2301      	movs	r3, #1
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3718      	adds	r7, #24
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	0001ffe8 	.word	0x0001ffe8
 800ed8c:	24008780 	.word	0x24008780

0800ed90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b088      	sub	sp, #32
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d070      	beq.n	800ee80 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f003 0303 	and.w	r3, r3, #3
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00d      	beq.n	800edc4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800eda8:	4b37      	ldr	r3, [pc, #220]	; (800ee88 <mem_free+0xf8>)
 800edaa:	f240 2273 	movw	r2, #627	; 0x273
 800edae:	4937      	ldr	r1, [pc, #220]	; (800ee8c <mem_free+0xfc>)
 800edb0:	4837      	ldr	r0, [pc, #220]	; (800ee90 <mem_free+0x100>)
 800edb2:	f008 ffaf 	bl	8017d14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800edb6:	f001 fee1 	bl	8010b7c <sys_arch_protect>
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	68f8      	ldr	r0, [r7, #12]
 800edbe:	f001 feeb 	bl	8010b98 <sys_arch_unprotect>
    return;
 800edc2:	e05e      	b.n	800ee82 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	3b0c      	subs	r3, #12
 800edc8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800edca:	4b32      	ldr	r3, [pc, #200]	; (800ee94 <mem_free+0x104>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69fa      	ldr	r2, [r7, #28]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d306      	bcc.n	800ede2 <mem_free+0x52>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f103 020c 	add.w	r2, r3, #12
 800edda:	4b2f      	ldr	r3, [pc, #188]	; (800ee98 <mem_free+0x108>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d90d      	bls.n	800edfe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ede2:	4b29      	ldr	r3, [pc, #164]	; (800ee88 <mem_free+0xf8>)
 800ede4:	f240 227f 	movw	r2, #639	; 0x27f
 800ede8:	492c      	ldr	r1, [pc, #176]	; (800ee9c <mem_free+0x10c>)
 800edea:	4829      	ldr	r0, [pc, #164]	; (800ee90 <mem_free+0x100>)
 800edec:	f008 ff92 	bl	8017d14 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800edf0:	f001 fec4 	bl	8010b7c <sys_arch_protect>
 800edf4:	6138      	str	r0, [r7, #16]
 800edf6:	6938      	ldr	r0, [r7, #16]
 800edf8:	f001 fece 	bl	8010b98 <sys_arch_unprotect>
    return;
 800edfc:	e041      	b.n	800ee82 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800edfe:	4828      	ldr	r0, [pc, #160]	; (800eea0 <mem_free+0x110>)
 800ee00:	f001 fe7a 	bl	8010af8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	7a1b      	ldrb	r3, [r3, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d110      	bne.n	800ee2e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ee0c:	4b1e      	ldr	r3, [pc, #120]	; (800ee88 <mem_free+0xf8>)
 800ee0e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ee12:	4924      	ldr	r1, [pc, #144]	; (800eea4 <mem_free+0x114>)
 800ee14:	481e      	ldr	r0, [pc, #120]	; (800ee90 <mem_free+0x100>)
 800ee16:	f008 ff7d 	bl	8017d14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ee1a:	4821      	ldr	r0, [pc, #132]	; (800eea0 <mem_free+0x110>)
 800ee1c:	f001 fe7b 	bl	8010b16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee20:	f001 feac 	bl	8010b7c <sys_arch_protect>
 800ee24:	6178      	str	r0, [r7, #20]
 800ee26:	6978      	ldr	r0, [r7, #20]
 800ee28:	f001 feb6 	bl	8010b98 <sys_arch_unprotect>
    return;
 800ee2c:	e029      	b.n	800ee82 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ee2e:	69f8      	ldr	r0, [r7, #28]
 800ee30:	f7ff ff70 	bl	800ed14 <mem_link_valid>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d110      	bne.n	800ee5c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ee3a:	4b13      	ldr	r3, [pc, #76]	; (800ee88 <mem_free+0xf8>)
 800ee3c:	f240 2295 	movw	r2, #661	; 0x295
 800ee40:	4919      	ldr	r1, [pc, #100]	; (800eea8 <mem_free+0x118>)
 800ee42:	4813      	ldr	r0, [pc, #76]	; (800ee90 <mem_free+0x100>)
 800ee44:	f008 ff66 	bl	8017d14 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ee48:	4815      	ldr	r0, [pc, #84]	; (800eea0 <mem_free+0x110>)
 800ee4a:	f001 fe64 	bl	8010b16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ee4e:	f001 fe95 	bl	8010b7c <sys_arch_protect>
 800ee52:	61b8      	str	r0, [r7, #24]
 800ee54:	69b8      	ldr	r0, [r7, #24]
 800ee56:	f001 fe9f 	bl	8010b98 <sys_arch_unprotect>
    return;
 800ee5a:	e012      	b.n	800ee82 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	2200      	movs	r2, #0
 800ee60:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800ee62:	4b12      	ldr	r3, [pc, #72]	; (800eeac <mem_free+0x11c>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	69fa      	ldr	r2, [r7, #28]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d202      	bcs.n	800ee72 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ee6c:	4a0f      	ldr	r2, [pc, #60]	; (800eeac <mem_free+0x11c>)
 800ee6e:	69fb      	ldr	r3, [r7, #28]
 800ee70:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ee72:	69f8      	ldr	r0, [r7, #28]
 800ee74:	f7ff fe5e 	bl	800eb34 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ee78:	4809      	ldr	r0, [pc, #36]	; (800eea0 <mem_free+0x110>)
 800ee7a:	f001 fe4c 	bl	8010b16 <sys_mutex_unlock>
 800ee7e:	e000      	b.n	800ee82 <mem_free+0xf2>
    return;
 800ee80:	bf00      	nop
}
 800ee82:	3720      	adds	r7, #32
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801a1c0 	.word	0x0801a1c0
 800ee8c:	0801a2f8 	.word	0x0801a2f8
 800ee90:	0801a250 	.word	0x0801a250
 800ee94:	2400877c 	.word	0x2400877c
 800ee98:	24008780 	.word	0x24008780
 800ee9c:	0801a31c 	.word	0x0801a31c
 800eea0:	24008784 	.word	0x24008784
 800eea4:	0801a338 	.word	0x0801a338
 800eea8:	0801a360 	.word	0x0801a360
 800eeac:	24008788 	.word	0x24008788

0800eeb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08a      	sub	sp, #40	; 0x28
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	3303      	adds	r3, #3
 800eebe:	f023 0303 	bic.w	r3, r3, #3
 800eec2:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	2b0b      	cmp	r3, #11
 800eec8:	d801      	bhi.n	800eece <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800eeca:	230c      	movs	r3, #12
 800eecc:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	4a6e      	ldr	r2, [pc, #440]	; (800f08c <mem_trim+0x1dc>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d803      	bhi.n	800eede <mem_trim+0x2e>
 800eed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d201      	bcs.n	800eee2 <mem_trim+0x32>
    return NULL;
 800eede:	2300      	movs	r3, #0
 800eee0:	e0d0      	b.n	800f084 <mem_trim+0x1d4>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800eee2:	4b6b      	ldr	r3, [pc, #428]	; (800f090 <mem_trim+0x1e0>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	687a      	ldr	r2, [r7, #4]
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d304      	bcc.n	800eef6 <mem_trim+0x46>
 800eeec:	4b69      	ldr	r3, [pc, #420]	; (800f094 <mem_trim+0x1e4>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d306      	bcc.n	800ef04 <mem_trim+0x54>
 800eef6:	4b68      	ldr	r3, [pc, #416]	; (800f098 <mem_trim+0x1e8>)
 800eef8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800eefc:	4967      	ldr	r1, [pc, #412]	; (800f09c <mem_trim+0x1ec>)
 800eefe:	4868      	ldr	r0, [pc, #416]	; (800f0a0 <mem_trim+0x1f0>)
 800ef00:	f008 ff08 	bl	8017d14 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ef04:	4b62      	ldr	r3, [pc, #392]	; (800f090 <mem_trim+0x1e0>)
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	429a      	cmp	r2, r3
 800ef0c:	d304      	bcc.n	800ef18 <mem_trim+0x68>
 800ef0e:	4b61      	ldr	r3, [pc, #388]	; (800f094 <mem_trim+0x1e4>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	d307      	bcc.n	800ef28 <mem_trim+0x78>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ef18:	f001 fe30 	bl	8010b7c <sys_arch_protect>
 800ef1c:	60b8      	str	r0, [r7, #8]
 800ef1e:	68b8      	ldr	r0, [r7, #8]
 800ef20:	f001 fe3a 	bl	8010b98 <sys_arch_unprotect>
    return rmem;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	e0ad      	b.n	800f084 <mem_trim+0x1d4>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	3b0c      	subs	r3, #12
 800ef2c:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ef2e:	6a38      	ldr	r0, [r7, #32]
 800ef30:	f7ff fdf0 	bl	800eb14 <mem_to_ptr>
 800ef34:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	1ad3      	subs	r3, r2, r3
 800ef3e:	3b0c      	subs	r3, #12
 800ef40:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ef42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d906      	bls.n	800ef58 <mem_trim+0xa8>
 800ef4a:	4b53      	ldr	r3, [pc, #332]	; (800f098 <mem_trim+0x1e8>)
 800ef4c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ef50:	4954      	ldr	r1, [pc, #336]	; (800f0a4 <mem_trim+0x1f4>)
 800ef52:	4853      	ldr	r0, [pc, #332]	; (800f0a0 <mem_trim+0x1f0>)
 800ef54:	f008 fede 	bl	8017d14 <iprintf>
  if (newsize > size) {
 800ef58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d901      	bls.n	800ef64 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800ef60:	2300      	movs	r3, #0
 800ef62:	e08f      	b.n	800f084 <mem_trim+0x1d4>
  }
  if (newsize == size) {
 800ef64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef66:	69bb      	ldr	r3, [r7, #24]
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d101      	bne.n	800ef70 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	e089      	b.n	800f084 <mem_trim+0x1d4>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ef70:	484d      	ldr	r0, [pc, #308]	; (800f0a8 <mem_trim+0x1f8>)
 800ef72:	f001 fdc1 	bl	8010af8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ef76:	6a3b      	ldr	r3, [r7, #32]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7ff fdba 	bl	800eaf4 <ptr_to_mem>
 800ef80:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	7a1b      	ldrb	r3, [r3, #8]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d13c      	bne.n	800f004 <mem_trim+0x154>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a3f      	ldr	r2, [pc, #252]	; (800f08c <mem_trim+0x1dc>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d106      	bne.n	800efa2 <mem_trim+0xf2>
 800ef94:	4b40      	ldr	r3, [pc, #256]	; (800f098 <mem_trim+0x1e8>)
 800ef96:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ef9a:	4944      	ldr	r1, [pc, #272]	; (800f0ac <mem_trim+0x1fc>)
 800ef9c:	4840      	ldr	r0, [pc, #256]	; (800f0a0 <mem_trim+0x1f0>)
 800ef9e:	f008 feb9 	bl	8017d14 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800efa8:	69fa      	ldr	r2, [r7, #28]
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	4413      	add	r3, r2
 800efae:	330c      	adds	r3, #12
 800efb0:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800efb2:	4b3f      	ldr	r3, [pc, #252]	; (800f0b0 <mem_trim+0x200>)
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	697a      	ldr	r2, [r7, #20]
 800efb8:	429a      	cmp	r2, r3
 800efba:	d105      	bne.n	800efc8 <mem_trim+0x118>
      lfree = ptr_to_mem(ptr2);
 800efbc:	6938      	ldr	r0, [r7, #16]
 800efbe:	f7ff fd99 	bl	800eaf4 <ptr_to_mem>
 800efc2:	4603      	mov	r3, r0
 800efc4:	4a3a      	ldr	r2, [pc, #232]	; (800f0b0 <mem_trim+0x200>)
 800efc6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800efc8:	6938      	ldr	r0, [r7, #16]
 800efca:	f7ff fd93 	bl	800eaf4 <ptr_to_mem>
 800efce:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	2200      	movs	r2, #0
 800efd4:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	69fa      	ldr	r2, [r7, #28]
 800efe0:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800efe2:	6a3b      	ldr	r3, [r7, #32]
 800efe4:	693a      	ldr	r2, [r7, #16]
 800efe6:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4a27      	ldr	r2, [pc, #156]	; (800f08c <mem_trim+0x1dc>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d044      	beq.n	800f07c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff fd7c 	bl	800eaf4 <ptr_to_mem>
 800effc:	4602      	mov	r2, r0
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	6053      	str	r3, [r2, #4]
 800f002:	e03b      	b.n	800f07c <mem_trim+0x1cc>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f006:	3318      	adds	r3, #24
 800f008:	69ba      	ldr	r2, [r7, #24]
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d336      	bcc.n	800f07c <mem_trim+0x1cc>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f00e:	69fa      	ldr	r2, [r7, #28]
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	4413      	add	r3, r2
 800f014:	330c      	adds	r3, #12
 800f016:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f018:	6a3b      	ldr	r3, [r7, #32]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4a1b      	ldr	r2, [pc, #108]	; (800f08c <mem_trim+0x1dc>)
 800f01e:	4293      	cmp	r3, r2
 800f020:	d106      	bne.n	800f030 <mem_trim+0x180>
 800f022:	4b1d      	ldr	r3, [pc, #116]	; (800f098 <mem_trim+0x1e8>)
 800f024:	f240 3216 	movw	r2, #790	; 0x316
 800f028:	4920      	ldr	r1, [pc, #128]	; (800f0ac <mem_trim+0x1fc>)
 800f02a:	481d      	ldr	r0, [pc, #116]	; (800f0a0 <mem_trim+0x1f0>)
 800f02c:	f008 fe72 	bl	8017d14 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f030:	6938      	ldr	r0, [r7, #16]
 800f032:	f7ff fd5f 	bl	800eaf4 <ptr_to_mem>
 800f036:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 800f038:	4b1d      	ldr	r3, [pc, #116]	; (800f0b0 <mem_trim+0x200>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	697a      	ldr	r2, [r7, #20]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d202      	bcs.n	800f048 <mem_trim+0x198>
      lfree = mem2;
 800f042:	4a1b      	ldr	r2, [pc, #108]	; (800f0b0 <mem_trim+0x200>)
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2200      	movs	r2, #0
 800f04c:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	681a      	ldr	r2, [r3, #0]
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	69fa      	ldr	r2, [r7, #28]
 800f05a:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 800f05c:	6a3b      	ldr	r3, [r7, #32]
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4a09      	ldr	r2, [pc, #36]	; (800f08c <mem_trim+0x1dc>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d007      	beq.n	800f07c <mem_trim+0x1cc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff fd3f 	bl	800eaf4 <ptr_to_mem>
 800f076:	4602      	mov	r2, r0
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	6053      	str	r3, [r2, #4]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f07c:	480a      	ldr	r0, [pc, #40]	; (800f0a8 <mem_trim+0x1f8>)
 800f07e:	f001 fd4a 	bl	8010b16 <sys_mutex_unlock>
  return rmem;
 800f082:	687b      	ldr	r3, [r7, #4]
}
 800f084:	4618      	mov	r0, r3
 800f086:	3728      	adds	r7, #40	; 0x28
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	0001ffe8 	.word	0x0001ffe8
 800f090:	2400877c 	.word	0x2400877c
 800f094:	24008780 	.word	0x24008780
 800f098:	0801a1c0 	.word	0x0801a1c0
 800f09c:	0801a394 	.word	0x0801a394
 800f0a0:	0801a250 	.word	0x0801a250
 800f0a4:	0801a3ac 	.word	0x0801a3ac
 800f0a8:	24008784 	.word	0x24008784
 800f0ac:	0801a3cc 	.word	0x0801a3cc
 800f0b0:	24008788 	.word	0x24008788

0800f0b4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b088      	sub	sp, #32
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d101      	bne.n	800f0c6 <mem_malloc+0x12>
    return NULL;
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	e0d9      	b.n	800f27a <mem_malloc+0x1c6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	3303      	adds	r3, #3
 800f0ca:	f023 0303 	bic.w	r3, r3, #3
 800f0ce:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 800f0d0:	69bb      	ldr	r3, [r7, #24]
 800f0d2:	2b0b      	cmp	r3, #11
 800f0d4:	d801      	bhi.n	800f0da <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f0d6:	230c      	movs	r3, #12
 800f0d8:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f0da:	69bb      	ldr	r3, [r7, #24]
 800f0dc:	4a69      	ldr	r2, [pc, #420]	; (800f284 <mem_malloc+0x1d0>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d803      	bhi.n	800f0ea <mem_malloc+0x36>
 800f0e2:	69ba      	ldr	r2, [r7, #24]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d201      	bcs.n	800f0ee <mem_malloc+0x3a>
    return NULL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	e0c5      	b.n	800f27a <mem_malloc+0x1c6>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f0ee:	4866      	ldr	r0, [pc, #408]	; (800f288 <mem_malloc+0x1d4>)
 800f0f0:	f001 fd02 	bl	8010af8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f0f4:	4b65      	ldr	r3, [pc, #404]	; (800f28c <mem_malloc+0x1d8>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff fd0b 	bl	800eb14 <mem_to_ptr>
 800f0fe:	61f8      	str	r0, [r7, #28]
 800f100:	e0b0      	b.n	800f264 <mem_malloc+0x1b0>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f102:	69f8      	ldr	r0, [r7, #28]
 800f104:	f7ff fcf6 	bl	800eaf4 <ptr_to_mem>
 800f108:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f10a:	693b      	ldr	r3, [r7, #16]
 800f10c:	7a1b      	ldrb	r3, [r3, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	f040 80a2 	bne.w	800f258 <mem_malloc+0x1a4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	69fb      	ldr	r3, [r7, #28]
 800f11a:	1ad3      	subs	r3, r2, r3
 800f11c:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 800f11e:	69ba      	ldr	r2, [r7, #24]
 800f120:	429a      	cmp	r2, r3
 800f122:	f200 8099 	bhi.w	800f258 <mem_malloc+0x1a4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	69fb      	ldr	r3, [r7, #28]
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	f1a3 020c 	sub.w	r2, r3, #12
 800f132:	69bb      	ldr	r3, [r7, #24]
 800f134:	3318      	adds	r3, #24
 800f136:	429a      	cmp	r2, r3
 800f138:	d331      	bcc.n	800f19e <mem_malloc+0xea>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f13a:	69fa      	ldr	r2, [r7, #28]
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	4413      	add	r3, r2
 800f140:	330c      	adds	r3, #12
 800f142:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	4a4f      	ldr	r2, [pc, #316]	; (800f284 <mem_malloc+0x1d0>)
 800f148:	4293      	cmp	r3, r2
 800f14a:	d106      	bne.n	800f15a <mem_malloc+0xa6>
 800f14c:	4b50      	ldr	r3, [pc, #320]	; (800f290 <mem_malloc+0x1dc>)
 800f14e:	f240 3287 	movw	r2, #903	; 0x387
 800f152:	4950      	ldr	r1, [pc, #320]	; (800f294 <mem_malloc+0x1e0>)
 800f154:	4850      	ldr	r0, [pc, #320]	; (800f298 <mem_malloc+0x1e4>)
 800f156:	f008 fddd 	bl	8017d14 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f7ff fcca 	bl	800eaf4 <ptr_to_mem>
 800f160:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	2200      	movs	r2, #0
 800f166:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	681a      	ldr	r2, [r3, #0]
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	69fa      	ldr	r2, [r7, #28]
 800f174:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 800f17c:	693b      	ldr	r3, [r7, #16]
 800f17e:	2201      	movs	r2, #1
 800f180:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a3f      	ldr	r2, [pc, #252]	; (800f284 <mem_malloc+0x1d0>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d00b      	beq.n	800f1a4 <mem_malloc+0xf0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	4618      	mov	r0, r3
 800f192:	f7ff fcaf 	bl	800eaf4 <ptr_to_mem>
 800f196:	4602      	mov	r2, r0
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6053      	str	r3, [r2, #4]
 800f19c:	e002      	b.n	800f1a4 <mem_malloc+0xf0>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f1a4:	4b39      	ldr	r3, [pc, #228]	; (800f28c <mem_malloc+0x1d8>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	693a      	ldr	r2, [r7, #16]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d127      	bne.n	800f1fe <mem_malloc+0x14a>
          struct mem *cur = lfree;
 800f1ae:	4b37      	ldr	r3, [pc, #220]	; (800f28c <mem_malloc+0x1d8>)
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f1b4:	e005      	b.n	800f1c2 <mem_malloc+0x10e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff fc9a 	bl	800eaf4 <ptr_to_mem>
 800f1c0:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	7a1b      	ldrb	r3, [r3, #8]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d004      	beq.n	800f1d4 <mem_malloc+0x120>
 800f1ca:	4b34      	ldr	r3, [pc, #208]	; (800f29c <mem_malloc+0x1e8>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	697a      	ldr	r2, [r7, #20]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d1f0      	bne.n	800f1b6 <mem_malloc+0x102>
          }
          lfree = cur;
 800f1d4:	4a2d      	ldr	r2, [pc, #180]	; (800f28c <mem_malloc+0x1d8>)
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f1da:	4b2c      	ldr	r3, [pc, #176]	; (800f28c <mem_malloc+0x1d8>)
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	4b2f      	ldr	r3, [pc, #188]	; (800f29c <mem_malloc+0x1e8>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d00b      	beq.n	800f1fe <mem_malloc+0x14a>
 800f1e6:	4b29      	ldr	r3, [pc, #164]	; (800f28c <mem_malloc+0x1d8>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	7a1b      	ldrb	r3, [r3, #8]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d006      	beq.n	800f1fe <mem_malloc+0x14a>
 800f1f0:	4b27      	ldr	r3, [pc, #156]	; (800f290 <mem_malloc+0x1dc>)
 800f1f2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f1f6:	492a      	ldr	r1, [pc, #168]	; (800f2a0 <mem_malloc+0x1ec>)
 800f1f8:	4827      	ldr	r0, [pc, #156]	; (800f298 <mem_malloc+0x1e4>)
 800f1fa:	f008 fd8b 	bl	8017d14 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f1fe:	4822      	ldr	r0, [pc, #136]	; (800f288 <mem_malloc+0x1d4>)
 800f200:	f001 fc89 	bl	8010b16 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f204:	693a      	ldr	r2, [r7, #16]
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	4413      	add	r3, r2
 800f20a:	330c      	adds	r3, #12
 800f20c:	4a23      	ldr	r2, [pc, #140]	; (800f29c <mem_malloc+0x1e8>)
 800f20e:	6812      	ldr	r2, [r2, #0]
 800f210:	4293      	cmp	r3, r2
 800f212:	d906      	bls.n	800f222 <mem_malloc+0x16e>
 800f214:	4b1e      	ldr	r3, [pc, #120]	; (800f290 <mem_malloc+0x1dc>)
 800f216:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f21a:	4922      	ldr	r1, [pc, #136]	; (800f2a4 <mem_malloc+0x1f0>)
 800f21c:	481e      	ldr	r0, [pc, #120]	; (800f298 <mem_malloc+0x1e4>)
 800f21e:	f008 fd79 	bl	8017d14 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	f003 0303 	and.w	r3, r3, #3
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d006      	beq.n	800f23a <mem_malloc+0x186>
 800f22c:	4b18      	ldr	r3, [pc, #96]	; (800f290 <mem_malloc+0x1dc>)
 800f22e:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f232:	491d      	ldr	r1, [pc, #116]	; (800f2a8 <mem_malloc+0x1f4>)
 800f234:	4818      	ldr	r0, [pc, #96]	; (800f298 <mem_malloc+0x1e4>)
 800f236:	f008 fd6d 	bl	8017d14 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	f003 0303 	and.w	r3, r3, #3
 800f240:	2b00      	cmp	r3, #0
 800f242:	d006      	beq.n	800f252 <mem_malloc+0x19e>
 800f244:	4b12      	ldr	r3, [pc, #72]	; (800f290 <mem_malloc+0x1dc>)
 800f246:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f24a:	4918      	ldr	r1, [pc, #96]	; (800f2ac <mem_malloc+0x1f8>)
 800f24c:	4812      	ldr	r0, [pc, #72]	; (800f298 <mem_malloc+0x1e4>)
 800f24e:	f008 fd61 	bl	8017d14 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	330c      	adds	r3, #12
 800f256:	e010      	b.n	800f27a <mem_malloc+0x1c6>
         ptr = ptr_to_mem(ptr)->next) {
 800f258:	69f8      	ldr	r0, [r7, #28]
 800f25a:	f7ff fc4b 	bl	800eaf4 <ptr_to_mem>
 800f25e:	4603      	mov	r3, r0
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f264:	69ba      	ldr	r2, [r7, #24]
 800f266:	4b07      	ldr	r3, [pc, #28]	; (800f284 <mem_malloc+0x1d0>)
 800f268:	1a9b      	subs	r3, r3, r2
 800f26a:	69fa      	ldr	r2, [r7, #28]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	f4ff af48 	bcc.w	800f102 <mem_malloc+0x4e>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f272:	4805      	ldr	r0, [pc, #20]	; (800f288 <mem_malloc+0x1d4>)
 800f274:	f001 fc4f 	bl	8010b16 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3720      	adds	r7, #32
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	0001ffe8 	.word	0x0001ffe8
 800f288:	24008784 	.word	0x24008784
 800f28c:	24008788 	.word	0x24008788
 800f290:	0801a1c0 	.word	0x0801a1c0
 800f294:	0801a3cc 	.word	0x0801a3cc
 800f298:	0801a250 	.word	0x0801a250
 800f29c:	24008780 	.word	0x24008780
 800f2a0:	0801a3e0 	.word	0x0801a3e0
 800f2a4:	0801a3fc 	.word	0x0801a3fc
 800f2a8:	0801a42c 	.word	0x0801a42c
 800f2ac:	0801a45c 	.word	0x0801a45c

0800f2b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	3303      	adds	r3, #3
 800f2c6:	f023 0303 	bic.w	r3, r3, #3
 800f2ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	60fb      	str	r3, [r7, #12]
 800f2d0:	e011      	b.n	800f2f6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	689b      	ldr	r3, [r3, #8]
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	689b      	ldr	r3, [r3, #8]
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	68bb      	ldr	r3, [r7, #8]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	60fb      	str	r3, [r7, #12]
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	885b      	ldrh	r3, [r3, #2]
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	4293      	cmp	r3, r2
 800f300:	dbe7      	blt.n	800f2d2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f302:	bf00      	nop
 800f304:	bf00      	nop
 800f306:	3714      	adds	r7, #20
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f316:	2300      	movs	r3, #0
 800f318:	80fb      	strh	r3, [r7, #6]
 800f31a:	e009      	b.n	800f330 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f31c:	88fb      	ldrh	r3, [r7, #6]
 800f31e:	4a08      	ldr	r2, [pc, #32]	; (800f340 <memp_init+0x30>)
 800f320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f324:	4618      	mov	r0, r3
 800f326:	f7ff ffc3 	bl	800f2b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f32a:	88fb      	ldrh	r3, [r7, #6]
 800f32c:	3301      	adds	r3, #1
 800f32e:	80fb      	strh	r3, [r7, #6]
 800f330:	88fb      	ldrh	r3, [r7, #6]
 800f332:	2b0c      	cmp	r3, #12
 800f334:	d9f2      	bls.n	800f31c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f336:	bf00      	nop
 800f338:	bf00      	nop
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	0801caf8 	.word	0x0801caf8

0800f344 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f34c:	f001 fc16 	bl	8010b7c <sys_arch_protect>
 800f350:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f35a:	68bb      	ldr	r3, [r7, #8]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d015      	beq.n	800f38c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	6812      	ldr	r2, [r2, #0]
 800f368:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	f003 0303 	and.w	r3, r3, #3
 800f370:	2b00      	cmp	r3, #0
 800f372:	d006      	beq.n	800f382 <do_memp_malloc_pool+0x3e>
 800f374:	4b09      	ldr	r3, [pc, #36]	; (800f39c <do_memp_malloc_pool+0x58>)
 800f376:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f37a:	4909      	ldr	r1, [pc, #36]	; (800f3a0 <do_memp_malloc_pool+0x5c>)
 800f37c:	4809      	ldr	r0, [pc, #36]	; (800f3a4 <do_memp_malloc_pool+0x60>)
 800f37e:	f008 fcc9 	bl	8017d14 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f382:	68f8      	ldr	r0, [r7, #12]
 800f384:	f001 fc08 	bl	8010b98 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	e003      	b.n	800f394 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f001 fc03 	bl	8010b98 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f392:	2300      	movs	r3, #0
}
 800f394:	4618      	mov	r0, r3
 800f396:	3710      	adds	r7, #16
 800f398:	46bd      	mov	sp, r7
 800f39a:	bd80      	pop	{r7, pc}
 800f39c:	0801a480 	.word	0x0801a480
 800f3a0:	0801a4f8 	.word	0x0801a4f8
 800f3a4:	0801a51c 	.word	0x0801a51c

0800f3a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d106      	bne.n	800f3c4 <memp_malloc_pool+0x1c>
 800f3b6:	4b0a      	ldr	r3, [pc, #40]	; (800f3e0 <memp_malloc_pool+0x38>)
 800f3b8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f3bc:	4909      	ldr	r1, [pc, #36]	; (800f3e4 <memp_malloc_pool+0x3c>)
 800f3be:	480a      	ldr	r0, [pc, #40]	; (800f3e8 <memp_malloc_pool+0x40>)
 800f3c0:	f008 fca8 	bl	8017d14 <iprintf>
  if (desc == NULL) {
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d101      	bne.n	800f3ce <memp_malloc_pool+0x26>
    return NULL;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	e003      	b.n	800f3d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff ffb8 	bl	800f344 <do_memp_malloc_pool>
 800f3d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3708      	adds	r7, #8
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	0801a480 	.word	0x0801a480
 800f3e4:	0801a544 	.word	0x0801a544
 800f3e8:	0801a51c 	.word	0x0801a51c

0800f3ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	4603      	mov	r3, r0
 800f3f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	2b0c      	cmp	r3, #12
 800f3fa:	d908      	bls.n	800f40e <memp_malloc+0x22>
 800f3fc:	4b0a      	ldr	r3, [pc, #40]	; (800f428 <memp_malloc+0x3c>)
 800f3fe:	f240 1257 	movw	r2, #343	; 0x157
 800f402:	490a      	ldr	r1, [pc, #40]	; (800f42c <memp_malloc+0x40>)
 800f404:	480a      	ldr	r0, [pc, #40]	; (800f430 <memp_malloc+0x44>)
 800f406:	f008 fc85 	bl	8017d14 <iprintf>
 800f40a:	2300      	movs	r3, #0
 800f40c:	e008      	b.n	800f420 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f40e:	79fb      	ldrb	r3, [r7, #7]
 800f410:	4a08      	ldr	r2, [pc, #32]	; (800f434 <memp_malloc+0x48>)
 800f412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f416:	4618      	mov	r0, r3
 800f418:	f7ff ff94 	bl	800f344 <do_memp_malloc_pool>
 800f41c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f41e:	68fb      	ldr	r3, [r7, #12]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}
 800f428:	0801a480 	.word	0x0801a480
 800f42c:	0801a558 	.word	0x0801a558
 800f430:	0801a51c 	.word	0x0801a51c
 800f434:	0801caf8 	.word	0x0801caf8

0800f438 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	f003 0303 	and.w	r3, r3, #3
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d006      	beq.n	800f45a <do_memp_free_pool+0x22>
 800f44c:	4b0d      	ldr	r3, [pc, #52]	; (800f484 <do_memp_free_pool+0x4c>)
 800f44e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f452:	490d      	ldr	r1, [pc, #52]	; (800f488 <do_memp_free_pool+0x50>)
 800f454:	480d      	ldr	r0, [pc, #52]	; (800f48c <do_memp_free_pool+0x54>)
 800f456:	f008 fc5d 	bl	8017d14 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f45e:	f001 fb8d 	bl	8010b7c <sys_arch_protect>
 800f462:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	689b      	ldr	r3, [r3, #8]
 800f468:	681a      	ldr	r2, [r3, #0]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	689b      	ldr	r3, [r3, #8]
 800f472:	68fa      	ldr	r2, [r7, #12]
 800f474:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f476:	68b8      	ldr	r0, [r7, #8]
 800f478:	f001 fb8e 	bl	8010b98 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f47c:	bf00      	nop
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	0801a480 	.word	0x0801a480
 800f488:	0801a578 	.word	0x0801a578
 800f48c:	0801a51c 	.word	0x0801a51c

0800f490 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d106      	bne.n	800f4ae <memp_free_pool+0x1e>
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	; (800f4cc <memp_free_pool+0x3c>)
 800f4a2:	f240 1295 	movw	r2, #405	; 0x195
 800f4a6:	490a      	ldr	r1, [pc, #40]	; (800f4d0 <memp_free_pool+0x40>)
 800f4a8:	480a      	ldr	r0, [pc, #40]	; (800f4d4 <memp_free_pool+0x44>)
 800f4aa:	f008 fc33 	bl	8017d14 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d007      	beq.n	800f4c4 <memp_free_pool+0x34>
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d004      	beq.n	800f4c4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f4ba:	6839      	ldr	r1, [r7, #0]
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7ff ffbb 	bl	800f438 <do_memp_free_pool>
 800f4c2:	e000      	b.n	800f4c6 <memp_free_pool+0x36>
    return;
 800f4c4:	bf00      	nop
}
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	0801a480 	.word	0x0801a480
 800f4d0:	0801a544 	.word	0x0801a544
 800f4d4:	0801a51c 	.word	0x0801a51c

0800f4d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	4603      	mov	r3, r0
 800f4e0:	6039      	str	r1, [r7, #0]
 800f4e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f4e4:	79fb      	ldrb	r3, [r7, #7]
 800f4e6:	2b0c      	cmp	r3, #12
 800f4e8:	d907      	bls.n	800f4fa <memp_free+0x22>
 800f4ea:	4b0c      	ldr	r3, [pc, #48]	; (800f51c <memp_free+0x44>)
 800f4ec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f4f0:	490b      	ldr	r1, [pc, #44]	; (800f520 <memp_free+0x48>)
 800f4f2:	480c      	ldr	r0, [pc, #48]	; (800f524 <memp_free+0x4c>)
 800f4f4:	f008 fc0e 	bl	8017d14 <iprintf>
 800f4f8:	e00c      	b.n	800f514 <memp_free+0x3c>

  if (mem == NULL) {
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d008      	beq.n	800f512 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	4a09      	ldr	r2, [pc, #36]	; (800f528 <memp_free+0x50>)
 800f504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7ff ff94 	bl	800f438 <do_memp_free_pool>
 800f510:	e000      	b.n	800f514 <memp_free+0x3c>
    return;
 800f512:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	0801a480 	.word	0x0801a480
 800f520:	0801a598 	.word	0x0801a598
 800f524:	0801a51c 	.word	0x0801a51c
 800f528:	0801caf8 	.word	0x0801caf8

0800f52c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b082      	sub	sp, #8
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d013      	beq.n	800f562 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d00b      	beq.n	800f55a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	4618      	mov	r0, r3
 800f548:	f000 feba 	bl	80102c0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	605a      	str	r2, [r3, #4]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	685a      	ldr	r2, [r3, #4]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800f55a:	6879      	ldr	r1, [r7, #4]
 800f55c:	2006      	movs	r0, #6
 800f55e:	f7ff ffbb 	bl	800f4d8 <memp_free>
  }
}
 800f562:	bf00      	nop
 800f564:	3708      	adds	r7, #8
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
	...

0800f56c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d108      	bne.n	800f58c <netbuf_next+0x20>
 800f57a:	4b11      	ldr	r3, [pc, #68]	; (800f5c0 <netbuf_next+0x54>)
 800f57c:	22e0      	movs	r2, #224	; 0xe0
 800f57e:	4911      	ldr	r1, [pc, #68]	; (800f5c4 <netbuf_next+0x58>)
 800f580:	4811      	ldr	r0, [pc, #68]	; (800f5c8 <netbuf_next+0x5c>)
 800f582:	f008 fbc7 	bl	8017d14 <iprintf>
 800f586:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f58a:	e014      	b.n	800f5b6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	685b      	ldr	r3, [r3, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d102      	bne.n	800f59c <netbuf_next+0x30>
    return -1;
 800f596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f59a:	e00c      	b.n	800f5b6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	685b      	ldr	r3, [r3, #4]
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d101      	bne.n	800f5b4 <netbuf_next+0x48>
    return 1;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e000      	b.n	800f5b6 <netbuf_next+0x4a>
  }
  return 0;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	0801a5b4 	.word	0x0801a5b4
 800f5c4:	0801a758 	.word	0x0801a758
 800f5c8:	0801a648 	.word	0x0801a648

0800f5cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f5d0:	bf00      	nop
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr
	...

0800f5dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b086      	sub	sp, #24
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	60f8      	str	r0, [r7, #12]
 800f5e4:	60b9      	str	r1, [r7, #8]
 800f5e6:	607a      	str	r2, [r7, #4]
 800f5e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d108      	bne.n	800f602 <netif_add+0x26>
 800f5f0:	4b57      	ldr	r3, [pc, #348]	; (800f750 <netif_add+0x174>)
 800f5f2:	f240 1227 	movw	r2, #295	; 0x127
 800f5f6:	4957      	ldr	r1, [pc, #348]	; (800f754 <netif_add+0x178>)
 800f5f8:	4857      	ldr	r0, [pc, #348]	; (800f758 <netif_add+0x17c>)
 800f5fa:	f008 fb8b 	bl	8017d14 <iprintf>
 800f5fe:	2300      	movs	r3, #0
 800f600:	e0a2      	b.n	800f748 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	2b00      	cmp	r3, #0
 800f606:	d108      	bne.n	800f61a <netif_add+0x3e>
 800f608:	4b51      	ldr	r3, [pc, #324]	; (800f750 <netif_add+0x174>)
 800f60a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f60e:	4953      	ldr	r1, [pc, #332]	; (800f75c <netif_add+0x180>)
 800f610:	4851      	ldr	r0, [pc, #324]	; (800f758 <netif_add+0x17c>)
 800f612:	f008 fb7f 	bl	8017d14 <iprintf>
 800f616:	2300      	movs	r3, #0
 800f618:	e096      	b.n	800f748 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f620:	4b4f      	ldr	r3, [pc, #316]	; (800f760 <netif_add+0x184>)
 800f622:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2b00      	cmp	r3, #0
 800f628:	d101      	bne.n	800f62e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f62a:	4b4d      	ldr	r3, [pc, #308]	; (800f760 <netif_add+0x184>)
 800f62c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d101      	bne.n	800f638 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f634:	4b4a      	ldr	r3, [pc, #296]	; (800f760 <netif_add+0x184>)
 800f636:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2200      	movs	r2, #0
 800f642:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	2200      	movs	r2, #0
 800f648:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	4a45      	ldr	r2, [pc, #276]	; (800f764 <netif_add+0x188>)
 800f64e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2200      	movs	r2, #0
 800f654:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2200      	movs	r2, #0
 800f65a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2200      	movs	r2, #0
 800f662:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6a3a      	ldr	r2, [r7, #32]
 800f668:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f66a:	4b3f      	ldr	r3, [pc, #252]	; (800f768 <netif_add+0x18c>)
 800f66c:	781a      	ldrb	r2, [r3, #0]
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f678:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	68b9      	ldr	r1, [r7, #8]
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f000 f913 	bl	800f8ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f688:	68f8      	ldr	r0, [r7, #12]
 800f68a:	4798      	blx	r3
 800f68c:	4603      	mov	r3, r0
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <netif_add+0xba>
    return NULL;
 800f692:	2300      	movs	r3, #0
 800f694:	e058      	b.n	800f748 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f69c:	2bff      	cmp	r3, #255	; 0xff
 800f69e:	d103      	bne.n	800f6a8 <netif_add+0xcc>
        netif->num = 0;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f6ac:	4b2f      	ldr	r3, [pc, #188]	; (800f76c <netif_add+0x190>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	617b      	str	r3, [r7, #20]
 800f6b2:	e02b      	b.n	800f70c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f6b4:	697a      	ldr	r2, [r7, #20]
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d106      	bne.n	800f6ca <netif_add+0xee>
 800f6bc:	4b24      	ldr	r3, [pc, #144]	; (800f750 <netif_add+0x174>)
 800f6be:	f240 128b 	movw	r2, #395	; 0x18b
 800f6c2:	492b      	ldr	r1, [pc, #172]	; (800f770 <netif_add+0x194>)
 800f6c4:	4824      	ldr	r0, [pc, #144]	; (800f758 <netif_add+0x17c>)
 800f6c6:	f008 fb25 	bl	8017d14 <iprintf>
        num_netifs++;
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	3301      	adds	r3, #1
 800f6ce:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	2bff      	cmp	r3, #255	; 0xff
 800f6d4:	dd06      	ble.n	800f6e4 <netif_add+0x108>
 800f6d6:	4b1e      	ldr	r3, [pc, #120]	; (800f750 <netif_add+0x174>)
 800f6d8:	f240 128d 	movw	r2, #397	; 0x18d
 800f6dc:	4925      	ldr	r1, [pc, #148]	; (800f774 <netif_add+0x198>)
 800f6de:	481e      	ldr	r0, [pc, #120]	; (800f758 <netif_add+0x17c>)
 800f6e0:	f008 fb18 	bl	8017d14 <iprintf>
        if (netif2->num == netif->num) {
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d108      	bne.n	800f706 <netif_add+0x12a>
          netif->num++;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	b2da      	uxtb	r2, r3
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f704:	e005      	b.n	800f712 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	617b      	str	r3, [r7, #20]
 800f70c:	697b      	ldr	r3, [r7, #20]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d1d0      	bne.n	800f6b4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1be      	bne.n	800f696 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f71e:	2bfe      	cmp	r3, #254	; 0xfe
 800f720:	d103      	bne.n	800f72a <netif_add+0x14e>
    netif_num = 0;
 800f722:	4b11      	ldr	r3, [pc, #68]	; (800f768 <netif_add+0x18c>)
 800f724:	2200      	movs	r2, #0
 800f726:	701a      	strb	r2, [r3, #0]
 800f728:	e006      	b.n	800f738 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f730:	3301      	adds	r3, #1
 800f732:	b2da      	uxtb	r2, r3
 800f734:	4b0c      	ldr	r3, [pc, #48]	; (800f768 <netif_add+0x18c>)
 800f736:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f738:	4b0c      	ldr	r3, [pc, #48]	; (800f76c <netif_add+0x190>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f740:	4a0a      	ldr	r2, [pc, #40]	; (800f76c <netif_add+0x190>)
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f746:	68fb      	ldr	r3, [r7, #12]
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3718      	adds	r7, #24
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	0801a790 	.word	0x0801a790
 800f754:	0801a868 	.word	0x0801a868
 800f758:	0801a824 	.word	0x0801a824
 800f75c:	0801a884 	.word	0x0801a884
 800f760:	0801ca58 	.word	0x0801ca58
 800f764:	0800fb87 	.word	0x0800fb87
 800f768:	2400f220 	.word	0x2400f220
 800f76c:	2400f218 	.word	0x2400f218
 800f770:	0801a8a8 	.word	0x0801a8a8
 800f774:	0801a8bc 	.word	0x0801a8bc

0800f778 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f782:	6839      	ldr	r1, [r7, #0]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f003 f835 	bl	80127f4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f78a:	6839      	ldr	r1, [r7, #0]
 800f78c:	6878      	ldr	r0, [r7, #4]
 800f78e:	f008 f89f 	bl	80178d0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f792:	bf00      	nop
 800f794:	3708      	adds	r7, #8
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
	...

0800f79c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b086      	sub	sp, #24
 800f7a0:	af00      	add	r7, sp, #0
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	60b9      	str	r1, [r7, #8]
 800f7a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d106      	bne.n	800f7bc <netif_do_set_ipaddr+0x20>
 800f7ae:	4b1d      	ldr	r3, [pc, #116]	; (800f824 <netif_do_set_ipaddr+0x88>)
 800f7b0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f7b4:	491c      	ldr	r1, [pc, #112]	; (800f828 <netif_do_set_ipaddr+0x8c>)
 800f7b6:	481d      	ldr	r0, [pc, #116]	; (800f82c <netif_do_set_ipaddr+0x90>)
 800f7b8:	f008 faac 	bl	8017d14 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d106      	bne.n	800f7d0 <netif_do_set_ipaddr+0x34>
 800f7c2:	4b18      	ldr	r3, [pc, #96]	; (800f824 <netif_do_set_ipaddr+0x88>)
 800f7c4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f7c8:	4917      	ldr	r1, [pc, #92]	; (800f828 <netif_do_set_ipaddr+0x8c>)
 800f7ca:	4818      	ldr	r0, [pc, #96]	; (800f82c <netif_do_set_ipaddr+0x90>)
 800f7cc:	f008 faa2 	bl	8017d14 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	681a      	ldr	r2, [r3, #0]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	3304      	adds	r3, #4
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d01c      	beq.n	800f818 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	681a      	ldr	r2, [r3, #0]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f7ee:	f107 0314 	add.w	r3, r7, #20
 800f7f2:	4619      	mov	r1, r3
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f7ff ffbf 	bl	800f778 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d002      	beq.n	800f806 <netif_do_set_ipaddr+0x6a>
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	e000      	b.n	800f808 <netif_do_set_ipaddr+0x6c>
 800f806:	2300      	movs	r3, #0
 800f808:	68fa      	ldr	r2, [r7, #12]
 800f80a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f80c:	2101      	movs	r1, #1
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f000 f8d2 	bl	800f9b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f814:	2301      	movs	r3, #1
 800f816:	e000      	b.n	800f81a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3718      	adds	r7, #24
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	0801a790 	.word	0x0801a790
 800f828:	0801a8ec 	.word	0x0801a8ec
 800f82c:	0801a824 	.word	0x0801a824

0800f830 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	3308      	adds	r3, #8
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	d00a      	beq.n	800f860 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d002      	beq.n	800f856 <netif_do_set_netmask+0x26>
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	e000      	b.n	800f858 <netif_do_set_netmask+0x28>
 800f856:	2300      	movs	r3, #0
 800f858:	68fa      	ldr	r2, [r7, #12]
 800f85a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f85c:	2301      	movs	r3, #1
 800f85e:	e000      	b.n	800f862 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3714      	adds	r7, #20
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f86e:	b480      	push	{r7}
 800f870:	b085      	sub	sp, #20
 800f872:	af00      	add	r7, sp, #0
 800f874:	60f8      	str	r0, [r7, #12]
 800f876:	60b9      	str	r1, [r7, #8]
 800f878:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	330c      	adds	r3, #12
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	429a      	cmp	r2, r3
 800f886:	d00a      	beq.n	800f89e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d002      	beq.n	800f894 <netif_do_set_gw+0x26>
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	e000      	b.n	800f896 <netif_do_set_gw+0x28>
 800f894:	2300      	movs	r3, #0
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f89a:	2301      	movs	r3, #1
 800f89c:	e000      	b.n	800f8a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3714      	adds	r7, #20
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b088      	sub	sp, #32
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f8c8:	4b1c      	ldr	r3, [pc, #112]	; (800f93c <netif_set_addr+0x90>)
 800f8ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d101      	bne.n	800f8d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f8d2:	4b1a      	ldr	r3, [pc, #104]	; (800f93c <netif_set_addr+0x90>)
 800f8d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d101      	bne.n	800f8e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f8dc:	4b17      	ldr	r3, [pc, #92]	; (800f93c <netif_set_addr+0x90>)
 800f8de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d003      	beq.n	800f8ee <netif_set_addr+0x42>
 800f8e6:	68bb      	ldr	r3, [r7, #8]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d101      	bne.n	800f8f2 <netif_set_addr+0x46>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	e000      	b.n	800f8f4 <netif_set_addr+0x48>
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d006      	beq.n	800f90a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f8fc:	f107 0310 	add.w	r3, r7, #16
 800f900:	461a      	mov	r2, r3
 800f902:	68b9      	ldr	r1, [r7, #8]
 800f904:	68f8      	ldr	r0, [r7, #12]
 800f906:	f7ff ff49 	bl	800f79c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f90a:	69fa      	ldr	r2, [r7, #28]
 800f90c:	6879      	ldr	r1, [r7, #4]
 800f90e:	68f8      	ldr	r0, [r7, #12]
 800f910:	f7ff ff8e 	bl	800f830 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f914:	69ba      	ldr	r2, [r7, #24]
 800f916:	6839      	ldr	r1, [r7, #0]
 800f918:	68f8      	ldr	r0, [r7, #12]
 800f91a:	f7ff ffa8 	bl	800f86e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d106      	bne.n	800f932 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f924:	f107 0310 	add.w	r3, r7, #16
 800f928:	461a      	mov	r2, r3
 800f92a:	68b9      	ldr	r1, [r7, #8]
 800f92c:	68f8      	ldr	r0, [r7, #12]
 800f92e:	f7ff ff35 	bl	800f79c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f932:	bf00      	nop
 800f934:	3720      	adds	r7, #32
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	0801ca58 	.word	0x0801ca58

0800f940 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f948:	4a04      	ldr	r2, [pc, #16]	; (800f95c <netif_set_default+0x1c>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f94e:	bf00      	nop
 800f950:	370c      	adds	r7, #12
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	2400f21c 	.word	0x2400f21c

0800f960 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d107      	bne.n	800f97e <netif_set_up+0x1e>
 800f96e:	4b0f      	ldr	r3, [pc, #60]	; (800f9ac <netif_set_up+0x4c>)
 800f970:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f974:	490e      	ldr	r1, [pc, #56]	; (800f9b0 <netif_set_up+0x50>)
 800f976:	480f      	ldr	r0, [pc, #60]	; (800f9b4 <netif_set_up+0x54>)
 800f978:	f008 f9cc 	bl	8017d14 <iprintf>
 800f97c:	e013      	b.n	800f9a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f984:	f003 0301 	and.w	r3, r3, #1
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d10c      	bne.n	800f9a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f992:	f043 0301 	orr.w	r3, r3, #1
 800f996:	b2da      	uxtb	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f99e:	2103      	movs	r1, #3
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f809 	bl	800f9b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	0801a790 	.word	0x0801a790
 800f9b0:	0801a95c 	.word	0x0801a95c
 800f9b4:	0801a824 	.word	0x0801a824

0800f9b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d106      	bne.n	800f9d8 <netif_issue_reports+0x20>
 800f9ca:	4b18      	ldr	r3, [pc, #96]	; (800fa2c <netif_issue_reports+0x74>)
 800f9cc:	f240 326d 	movw	r2, #877	; 0x36d
 800f9d0:	4917      	ldr	r1, [pc, #92]	; (800fa30 <netif_issue_reports+0x78>)
 800f9d2:	4818      	ldr	r0, [pc, #96]	; (800fa34 <netif_issue_reports+0x7c>)
 800f9d4:	f008 f99e 	bl	8017d14 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9de:	f003 0304 	and.w	r3, r3, #4
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d01e      	beq.n	800fa24 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d017      	beq.n	800fa24 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f9f4:	78fb      	ldrb	r3, [r7, #3]
 800f9f6:	f003 0301 	and.w	r3, r3, #1
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d013      	beq.n	800fa26 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3304      	adds	r3, #4
 800fa02:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d00e      	beq.n	800fa26 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa0e:	f003 0308 	and.w	r3, r3, #8
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d007      	beq.n	800fa26 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	3304      	adds	r3, #4
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f7fd fbe3 	bl	800d1e8 <etharp_request>
 800fa22:	e000      	b.n	800fa26 <netif_issue_reports+0x6e>
    return;
 800fa24:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fa26:	3708      	adds	r7, #8
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}
 800fa2c:	0801a790 	.word	0x0801a790
 800fa30:	0801a978 	.word	0x0801a978
 800fa34:	0801a824 	.word	0x0801a824

0800fa38 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d107      	bne.n	800fa56 <netif_set_down+0x1e>
 800fa46:	4b12      	ldr	r3, [pc, #72]	; (800fa90 <netif_set_down+0x58>)
 800fa48:	f240 329b 	movw	r2, #923	; 0x39b
 800fa4c:	4911      	ldr	r1, [pc, #68]	; (800fa94 <netif_set_down+0x5c>)
 800fa4e:	4812      	ldr	r0, [pc, #72]	; (800fa98 <netif_set_down+0x60>)
 800fa50:	f008 f960 	bl	8017d14 <iprintf>
 800fa54:	e019      	b.n	800fa8a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa5c:	f003 0301 	and.w	r3, r3, #1
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d012      	beq.n	800fa8a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa6a:	f023 0301 	bic.w	r3, r3, #1
 800fa6e:	b2da      	uxtb	r2, r3
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa7c:	f003 0308 	and.w	r3, r3, #8
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7fc ff6d 	bl	800c964 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	0801a790 	.word	0x0801a790
 800fa94:	0801a99c 	.word	0x0801a99c
 800fa98:	0801a824 	.word	0x0801a824

0800fa9c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b082      	sub	sp, #8
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d107      	bne.n	800faba <netif_set_link_up+0x1e>
 800faaa:	4b13      	ldr	r3, [pc, #76]	; (800faf8 <netif_set_link_up+0x5c>)
 800faac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fab0:	4912      	ldr	r1, [pc, #72]	; (800fafc <netif_set_link_up+0x60>)
 800fab2:	4813      	ldr	r0, [pc, #76]	; (800fb00 <netif_set_link_up+0x64>)
 800fab4:	f008 f92e 	bl	8017d14 <iprintf>
 800fab8:	e01b      	b.n	800faf2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fac0:	f003 0304 	and.w	r3, r3, #4
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d114      	bne.n	800faf2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800face:	f043 0304 	orr.w	r3, r3, #4
 800fad2:	b2da      	uxtb	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fada:	2103      	movs	r1, #3
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f7ff ff6b 	bl	800f9b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	69db      	ldr	r3, [r3, #28]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <netif_set_link_up+0x56>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	69db      	ldr	r3, [r3, #28]
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	0801a790 	.word	0x0801a790
 800fafc:	0801a9bc 	.word	0x0801a9bc
 800fb00:	0801a824 	.word	0x0801a824

0800fb04 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d107      	bne.n	800fb22 <netif_set_link_down+0x1e>
 800fb12:	4b11      	ldr	r3, [pc, #68]	; (800fb58 <netif_set_link_down+0x54>)
 800fb14:	f240 4206 	movw	r2, #1030	; 0x406
 800fb18:	4910      	ldr	r1, [pc, #64]	; (800fb5c <netif_set_link_down+0x58>)
 800fb1a:	4811      	ldr	r0, [pc, #68]	; (800fb60 <netif_set_link_down+0x5c>)
 800fb1c:	f008 f8fa 	bl	8017d14 <iprintf>
 800fb20:	e017      	b.n	800fb52 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb28:	f003 0304 	and.w	r3, r3, #4
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d010      	beq.n	800fb52 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb36:	f023 0304 	bic.w	r3, r3, #4
 800fb3a:	b2da      	uxtb	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	69db      	ldr	r3, [r3, #28]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d003      	beq.n	800fb52 <netif_set_link_down+0x4e>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	69db      	ldr	r3, [r3, #28]
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	0801a790 	.word	0x0801a790
 800fb5c:	0801a9e0 	.word	0x0801a9e0
 800fb60:	0801a824 	.word	0x0801a824

0800fb64 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d002      	beq.n	800fb7a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	683a      	ldr	r2, [r7, #0]
 800fb78:	61da      	str	r2, [r3, #28]
  }
}
 800fb7a:	bf00      	nop
 800fb7c:	370c      	adds	r7, #12
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr

0800fb86 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fb86:	b480      	push	{r7}
 800fb88:	b085      	sub	sp, #20
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	60f8      	str	r0, [r7, #12]
 800fb8e:	60b9      	str	r1, [r7, #8]
 800fb90:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fb92:	f06f 030b 	mvn.w	r3, #11
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3714      	adds	r7, #20
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr
	...

0800fba4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b085      	sub	sp, #20
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	4603      	mov	r3, r0
 800fbac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fbae:	79fb      	ldrb	r3, [r7, #7]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d013      	beq.n	800fbdc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fbb4:	4b0d      	ldr	r3, [pc, #52]	; (800fbec <netif_get_by_index+0x48>)
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	60fb      	str	r3, [r7, #12]
 800fbba:	e00c      	b.n	800fbd6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	b2db      	uxtb	r3, r3
 800fbc6:	79fa      	ldrb	r2, [r7, #7]
 800fbc8:	429a      	cmp	r2, r3
 800fbca:	d101      	bne.n	800fbd0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	e006      	b.n	800fbde <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	60fb      	str	r3, [r7, #12]
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d1ef      	bne.n	800fbbc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fbdc:	2300      	movs	r3, #0
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3714      	adds	r7, #20
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	2400f218 	.word	0x2400f218

0800fbf0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b082      	sub	sp, #8
 800fbf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fbf6:	f000 ffc1 	bl	8010b7c <sys_arch_protect>
 800fbfa:	6038      	str	r0, [r7, #0]
 800fbfc:	4b0d      	ldr	r3, [pc, #52]	; (800fc34 <pbuf_free_ooseq+0x44>)
 800fbfe:	2200      	movs	r2, #0
 800fc00:	701a      	strb	r2, [r3, #0]
 800fc02:	6838      	ldr	r0, [r7, #0]
 800fc04:	f000 ffc8 	bl	8010b98 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fc08:	4b0b      	ldr	r3, [pc, #44]	; (800fc38 <pbuf_free_ooseq+0x48>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	607b      	str	r3, [r7, #4]
 800fc0e:	e00a      	b.n	800fc26 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d003      	beq.n	800fc20 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	f002 fe29 	bl	8012870 <tcp_free_ooseq>
      return;
 800fc1e:	e005      	b.n	800fc2c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	607b      	str	r3, [r7, #4]
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d1f1      	bne.n	800fc10 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fc2c:	3708      	adds	r7, #8
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	2400f221 	.word	0x2400f221
 800fc38:	2400f234 	.word	0x2400f234

0800fc3c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fc44:	f7ff ffd4 	bl	800fbf0 <pbuf_free_ooseq>
}
 800fc48:	bf00      	nop
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}

0800fc50 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b082      	sub	sp, #8
 800fc54:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fc56:	f000 ff91 	bl	8010b7c <sys_arch_protect>
 800fc5a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fc5c:	4b0f      	ldr	r3, [pc, #60]	; (800fc9c <pbuf_pool_is_empty+0x4c>)
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fc62:	4b0e      	ldr	r3, [pc, #56]	; (800fc9c <pbuf_pool_is_empty+0x4c>)
 800fc64:	2201      	movs	r2, #1
 800fc66:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f000 ff95 	bl	8010b98 <sys_arch_unprotect>

  if (!queued) {
 800fc6e:	78fb      	ldrb	r3, [r7, #3]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d10f      	bne.n	800fc94 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fc74:	2100      	movs	r1, #0
 800fc76:	480a      	ldr	r0, [pc, #40]	; (800fca0 <pbuf_pool_is_empty+0x50>)
 800fc78:	f007 f91c 	bl	8016eb4 <tcpip_try_callback>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d008      	beq.n	800fc94 <pbuf_pool_is_empty+0x44>
 800fc82:	f000 ff7b 	bl	8010b7c <sys_arch_protect>
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	4b04      	ldr	r3, [pc, #16]	; (800fc9c <pbuf_pool_is_empty+0x4c>)
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	701a      	strb	r2, [r3, #0]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 ff82 	bl	8010b98 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fc94:	bf00      	nop
 800fc96:	3708      	adds	r7, #8
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	2400f221 	.word	0x2400f221
 800fca0:	0800fc3d 	.word	0x0800fc3d

0800fca4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b085      	sub	sp, #20
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4611      	mov	r1, r2
 800fcb0:	461a      	mov	r2, r3
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	80fb      	strh	r3, [r7, #6]
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	68ba      	ldr	r2, [r7, #8]
 800fcc4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	88fa      	ldrh	r2, [r7, #6]
 800fcca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	88ba      	ldrh	r2, [r7, #4]
 800fcd0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fcd2:	8b3b      	ldrh	r3, [r7, #24]
 800fcd4:	b2da      	uxtb	r2, r3
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	7f3a      	ldrb	r2, [r7, #28]
 800fcde:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2201      	movs	r2, #1
 800fce4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	2200      	movs	r2, #0
 800fcea:	73da      	strb	r2, [r3, #15]
}
 800fcec:	bf00      	nop
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b08c      	sub	sp, #48	; 0x30
 800fcfc:	af02      	add	r7, sp, #8
 800fcfe:	4603      	mov	r3, r0
 800fd00:	71fb      	strb	r3, [r7, #7]
 800fd02:	460b      	mov	r3, r1
 800fd04:	80bb      	strh	r3, [r7, #4]
 800fd06:	4613      	mov	r3, r2
 800fd08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fd0a:	79fb      	ldrb	r3, [r7, #7]
 800fd0c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800fd0e:	887b      	ldrh	r3, [r7, #2]
 800fd10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fd14:	f000 8082 	beq.w	800fe1c <pbuf_alloc+0x124>
 800fd18:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800fd1c:	f300 80c9 	bgt.w	800feb2 <pbuf_alloc+0x1ba>
 800fd20:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fd24:	d010      	beq.n	800fd48 <pbuf_alloc+0x50>
 800fd26:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800fd2a:	f300 80c2 	bgt.w	800feb2 <pbuf_alloc+0x1ba>
 800fd2e:	2b01      	cmp	r3, #1
 800fd30:	d002      	beq.n	800fd38 <pbuf_alloc+0x40>
 800fd32:	2b41      	cmp	r3, #65	; 0x41
 800fd34:	f040 80bd 	bne.w	800feb2 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800fd38:	887a      	ldrh	r2, [r7, #2]
 800fd3a:	88bb      	ldrh	r3, [r7, #4]
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	2000      	movs	r0, #0
 800fd40:	f000 f8d2 	bl	800fee8 <pbuf_alloc_reference>
 800fd44:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800fd46:	e0be      	b.n	800fec6 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800fd48:	2300      	movs	r3, #0
 800fd4a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800fd50:	88bb      	ldrh	r3, [r7, #4]
 800fd52:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800fd54:	200c      	movs	r0, #12
 800fd56:	f7ff fb49 	bl	800f3ec <memp_malloc>
 800fd5a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d109      	bne.n	800fd76 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800fd62:	f7ff ff75 	bl	800fc50 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d002      	beq.n	800fd72 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800fd6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd6e:	f000 faa7 	bl	80102c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800fd72:	2300      	movs	r3, #0
 800fd74:	e0a8      	b.n	800fec8 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800fd76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd78:	3303      	adds	r3, #3
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	f023 0303 	bic.w	r3, r3, #3
 800fd80:	b29a      	uxth	r2, r3
 800fd82:	f240 53ec 	movw	r3, #1516	; 0x5ec
 800fd86:	1a9b      	subs	r3, r3, r2
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	8b7a      	ldrh	r2, [r7, #26]
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	bf28      	it	cs
 800fd90:	4613      	movcs	r3, r2
 800fd92:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800fd94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fd96:	3310      	adds	r3, #16
 800fd98:	693a      	ldr	r2, [r7, #16]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	3303      	adds	r3, #3
 800fd9e:	f023 0303 	bic.w	r3, r3, #3
 800fda2:	4618      	mov	r0, r3
 800fda4:	89f9      	ldrh	r1, [r7, #14]
 800fda6:	8b7a      	ldrh	r2, [r7, #26]
 800fda8:	2300      	movs	r3, #0
 800fdaa:	9301      	str	r3, [sp, #4]
 800fdac:	887b      	ldrh	r3, [r7, #2]
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	4601      	mov	r1, r0
 800fdb4:	6938      	ldr	r0, [r7, #16]
 800fdb6:	f7ff ff75 	bl	800fca4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800fdba:	693b      	ldr	r3, [r7, #16]
 800fdbc:	685b      	ldr	r3, [r3, #4]
 800fdbe:	f003 0303 	and.w	r3, r3, #3
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d006      	beq.n	800fdd4 <pbuf_alloc+0xdc>
 800fdc6:	4b42      	ldr	r3, [pc, #264]	; (800fed0 <pbuf_alloc+0x1d8>)
 800fdc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fdcc:	4941      	ldr	r1, [pc, #260]	; (800fed4 <pbuf_alloc+0x1dc>)
 800fdce:	4842      	ldr	r0, [pc, #264]	; (800fed8 <pbuf_alloc+0x1e0>)
 800fdd0:	f007 ffa0 	bl	8017d14 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800fdd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fdd6:	3303      	adds	r3, #3
 800fdd8:	f023 0303 	bic.w	r3, r3, #3
 800fddc:	f240 52ec 	movw	r2, #1516	; 0x5ec
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d106      	bne.n	800fdf2 <pbuf_alloc+0xfa>
 800fde4:	4b3a      	ldr	r3, [pc, #232]	; (800fed0 <pbuf_alloc+0x1d8>)
 800fde6:	f44f 7281 	mov.w	r2, #258	; 0x102
 800fdea:	493c      	ldr	r1, [pc, #240]	; (800fedc <pbuf_alloc+0x1e4>)
 800fdec:	483a      	ldr	r0, [pc, #232]	; (800fed8 <pbuf_alloc+0x1e0>)
 800fdee:	f007 ff91 	bl	8017d14 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800fdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d102      	bne.n	800fdfe <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	627b      	str	r3, [r7, #36]	; 0x24
 800fdfc:	e002      	b.n	800fe04 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800fdfe:	69fb      	ldr	r3, [r7, #28]
 800fe00:	693a      	ldr	r2, [r7, #16]
 800fe02:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fe08:	8b7a      	ldrh	r2, [r7, #26]
 800fe0a:	89fb      	ldrh	r3, [r7, #14]
 800fe0c:	1ad3      	subs	r3, r2, r3
 800fe0e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800fe14:	8b7b      	ldrh	r3, [r7, #26]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d19c      	bne.n	800fd54 <pbuf_alloc+0x5c>
      break;
 800fe1a:	e054      	b.n	800fec6 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800fe1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe1e:	3303      	adds	r3, #3
 800fe20:	b29b      	uxth	r3, r3
 800fe22:	f023 0303 	bic.w	r3, r3, #3
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	88bb      	ldrh	r3, [r7, #4]
 800fe2a:	3303      	adds	r3, #3
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	f023 0303 	bic.w	r3, r3, #3
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	4413      	add	r3, r2
 800fe36:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800fe38:	8b3b      	ldrh	r3, [r7, #24]
 800fe3a:	3310      	adds	r3, #16
 800fe3c:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fe3e:	8b3a      	ldrh	r2, [r7, #24]
 800fe40:	88bb      	ldrh	r3, [r7, #4]
 800fe42:	3303      	adds	r3, #3
 800fe44:	f023 0303 	bic.w	r3, r3, #3
 800fe48:	429a      	cmp	r2, r3
 800fe4a:	d306      	bcc.n	800fe5a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800fe4c:	88bb      	ldrh	r3, [r7, #4]
 800fe4e:	3303      	adds	r3, #3
 800fe50:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800fe54:	697a      	ldr	r2, [r7, #20]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d201      	bcs.n	800fe5e <pbuf_alloc+0x166>
        return NULL;
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	e034      	b.n	800fec8 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800fe5e:	6978      	ldr	r0, [r7, #20]
 800fe60:	f7ff f928 	bl	800f0b4 <mem_malloc>
 800fe64:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800fe66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d101      	bne.n	800fe70 <pbuf_alloc+0x178>
        return NULL;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	e02b      	b.n	800fec8 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800fe70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe72:	3310      	adds	r3, #16
 800fe74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fe76:	4413      	add	r3, r2
 800fe78:	3303      	adds	r3, #3
 800fe7a:	f023 0303 	bic.w	r3, r3, #3
 800fe7e:	4618      	mov	r0, r3
 800fe80:	88b9      	ldrh	r1, [r7, #4]
 800fe82:	88ba      	ldrh	r2, [r7, #4]
 800fe84:	2300      	movs	r3, #0
 800fe86:	9301      	str	r3, [sp, #4]
 800fe88:	887b      	ldrh	r3, [r7, #2]
 800fe8a:	9300      	str	r3, [sp, #0]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	4601      	mov	r1, r0
 800fe90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe92:	f7ff ff07 	bl	800fca4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800fe96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	f003 0303 	and.w	r3, r3, #3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d010      	beq.n	800fec4 <pbuf_alloc+0x1cc>
 800fea2:	4b0b      	ldr	r3, [pc, #44]	; (800fed0 <pbuf_alloc+0x1d8>)
 800fea4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800fea8:	490d      	ldr	r1, [pc, #52]	; (800fee0 <pbuf_alloc+0x1e8>)
 800feaa:	480b      	ldr	r0, [pc, #44]	; (800fed8 <pbuf_alloc+0x1e0>)
 800feac:	f007 ff32 	bl	8017d14 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800feb0:	e008      	b.n	800fec4 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800feb2:	4b07      	ldr	r3, [pc, #28]	; (800fed0 <pbuf_alloc+0x1d8>)
 800feb4:	f240 1227 	movw	r2, #295	; 0x127
 800feb8:	490a      	ldr	r1, [pc, #40]	; (800fee4 <pbuf_alloc+0x1ec>)
 800feba:	4807      	ldr	r0, [pc, #28]	; (800fed8 <pbuf_alloc+0x1e0>)
 800febc:	f007 ff2a 	bl	8017d14 <iprintf>
      return NULL;
 800fec0:	2300      	movs	r3, #0
 800fec2:	e001      	b.n	800fec8 <pbuf_alloc+0x1d0>
      break;
 800fec4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800fec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fec8:	4618      	mov	r0, r3
 800feca:	3728      	adds	r7, #40	; 0x28
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	0801aa04 	.word	0x0801aa04
 800fed4:	0801aa7c 	.word	0x0801aa7c
 800fed8:	0801aaac 	.word	0x0801aaac
 800fedc:	0801aad4 	.word	0x0801aad4
 800fee0:	0801ab08 	.word	0x0801ab08
 800fee4:	0801ab34 	.word	0x0801ab34

0800fee8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b086      	sub	sp, #24
 800feec:	af02      	add	r7, sp, #8
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	460b      	mov	r3, r1
 800fef2:	807b      	strh	r3, [r7, #2]
 800fef4:	4613      	mov	r3, r2
 800fef6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800fef8:	883b      	ldrh	r3, [r7, #0]
 800fefa:	2b41      	cmp	r3, #65	; 0x41
 800fefc:	d009      	beq.n	800ff12 <pbuf_alloc_reference+0x2a>
 800fefe:	883b      	ldrh	r3, [r7, #0]
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d006      	beq.n	800ff12 <pbuf_alloc_reference+0x2a>
 800ff04:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <pbuf_alloc_reference+0x5c>)
 800ff06:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ff0a:	490f      	ldr	r1, [pc, #60]	; (800ff48 <pbuf_alloc_reference+0x60>)
 800ff0c:	480f      	ldr	r0, [pc, #60]	; (800ff4c <pbuf_alloc_reference+0x64>)
 800ff0e:	f007 ff01 	bl	8017d14 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ff12:	200b      	movs	r0, #11
 800ff14:	f7ff fa6a 	bl	800f3ec <memp_malloc>
 800ff18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d101      	bne.n	800ff24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	e00b      	b.n	800ff3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ff24:	8879      	ldrh	r1, [r7, #2]
 800ff26:	887a      	ldrh	r2, [r7, #2]
 800ff28:	2300      	movs	r3, #0
 800ff2a:	9301      	str	r3, [sp, #4]
 800ff2c:	883b      	ldrh	r3, [r7, #0]
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	460b      	mov	r3, r1
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	68f8      	ldr	r0, [r7, #12]
 800ff36:	f7ff feb5 	bl	800fca4 <pbuf_init_alloced_pbuf>
  return p;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	0801aa04 	.word	0x0801aa04
 800ff48:	0801ab50 	.word	0x0801ab50
 800ff4c:	0801aaac 	.word	0x0801aaac

0800ff50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b088      	sub	sp, #32
 800ff54:	af02      	add	r7, sp, #8
 800ff56:	607b      	str	r3, [r7, #4]
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	81bb      	strh	r3, [r7, #12]
 800ff60:	4613      	mov	r3, r2
 800ff62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ff64:	7bfb      	ldrb	r3, [r7, #15]
 800ff66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ff68:	8a7b      	ldrh	r3, [r7, #18]
 800ff6a:	3303      	adds	r3, #3
 800ff6c:	f023 0203 	bic.w	r2, r3, #3
 800ff70:	89bb      	ldrh	r3, [r7, #12]
 800ff72:	441a      	add	r2, r3
 800ff74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d901      	bls.n	800ff7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e018      	b.n	800ffb0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d007      	beq.n	800ff94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ff84:	8a7b      	ldrh	r3, [r7, #18]
 800ff86:	3303      	adds	r3, #3
 800ff88:	f023 0303 	bic.w	r3, r3, #3
 800ff8c:	6a3a      	ldr	r2, [r7, #32]
 800ff8e:	4413      	add	r3, r2
 800ff90:	617b      	str	r3, [r7, #20]
 800ff92:	e001      	b.n	800ff98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ff94:	2300      	movs	r3, #0
 800ff96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	89b9      	ldrh	r1, [r7, #12]
 800ff9c:	89ba      	ldrh	r2, [r7, #12]
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	9301      	str	r3, [sp, #4]
 800ffa2:	897b      	ldrh	r3, [r7, #10]
 800ffa4:	9300      	str	r3, [sp, #0]
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	6979      	ldr	r1, [r7, #20]
 800ffaa:	f7ff fe7b 	bl	800fca4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ffae:	687b      	ldr	r3, [r7, #4]
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3718      	adds	r7, #24
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b084      	sub	sp, #16
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d106      	bne.n	800ffd8 <pbuf_realloc+0x20>
 800ffca:	4b39      	ldr	r3, [pc, #228]	; (80100b0 <pbuf_realloc+0xf8>)
 800ffcc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ffd0:	4938      	ldr	r1, [pc, #224]	; (80100b4 <pbuf_realloc+0xfc>)
 800ffd2:	4839      	ldr	r0, [pc, #228]	; (80100b8 <pbuf_realloc+0x100>)
 800ffd4:	f007 fe9e 	bl	8017d14 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	891b      	ldrh	r3, [r3, #8]
 800ffdc:	887a      	ldrh	r2, [r7, #2]
 800ffde:	429a      	cmp	r2, r3
 800ffe0:	d261      	bcs.n	80100a6 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	891a      	ldrh	r2, [r3, #8]
 800ffe6:	887b      	ldrh	r3, [r7, #2]
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ffec:	887b      	ldrh	r3, [r7, #2]
 800ffee:	817b      	strh	r3, [r7, #10]
  q = p;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800fff4:	e018      	b.n	8010028 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	895b      	ldrh	r3, [r3, #10]
 800fffa:	897a      	ldrh	r2, [r7, #10]
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	891a      	ldrh	r2, [r3, #8]
 8010004:	893b      	ldrh	r3, [r7, #8]
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	b29a      	uxth	r2, r3
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d106      	bne.n	8010028 <pbuf_realloc+0x70>
 801001a:	4b25      	ldr	r3, [pc, #148]	; (80100b0 <pbuf_realloc+0xf8>)
 801001c:	f240 12af 	movw	r2, #431	; 0x1af
 8010020:	4926      	ldr	r1, [pc, #152]	; (80100bc <pbuf_realloc+0x104>)
 8010022:	4825      	ldr	r0, [pc, #148]	; (80100b8 <pbuf_realloc+0x100>)
 8010024:	f007 fe76 	bl	8017d14 <iprintf>
  while (rem_len > q->len) {
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	895b      	ldrh	r3, [r3, #10]
 801002c:	897a      	ldrh	r2, [r7, #10]
 801002e:	429a      	cmp	r2, r3
 8010030:	d8e1      	bhi.n	800fff6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	7b1b      	ldrb	r3, [r3, #12]
 8010036:	f003 030f 	and.w	r3, r3, #15
 801003a:	2b00      	cmp	r3, #0
 801003c:	d11f      	bne.n	801007e <pbuf_realloc+0xc6>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	895b      	ldrh	r3, [r3, #10]
 8010042:	897a      	ldrh	r2, [r7, #10]
 8010044:	429a      	cmp	r2, r3
 8010046:	d01a      	beq.n	801007e <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	7b5b      	ldrb	r3, [r3, #13]
 801004c:	f003 0302 	and.w	r3, r3, #2
 8010050:	2b00      	cmp	r3, #0
 8010052:	d114      	bne.n	801007e <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	685a      	ldr	r2, [r3, #4]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	1ad2      	subs	r2, r2, r3
 801005c:	897b      	ldrh	r3, [r7, #10]
 801005e:	4413      	add	r3, r2
 8010060:	4619      	mov	r1, r3
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7fe ff24 	bl	800eeb0 <mem_trim>
 8010068:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d106      	bne.n	801007e <pbuf_realloc+0xc6>
 8010070:	4b0f      	ldr	r3, [pc, #60]	; (80100b0 <pbuf_realloc+0xf8>)
 8010072:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010076:	4912      	ldr	r1, [pc, #72]	; (80100c0 <pbuf_realloc+0x108>)
 8010078:	480f      	ldr	r0, [pc, #60]	; (80100b8 <pbuf_realloc+0x100>)
 801007a:	f007 fe4b 	bl	8017d14 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	897a      	ldrh	r2, [r7, #10]
 8010082:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	895a      	ldrh	r2, [r3, #10]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d004      	beq.n	801009e <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4618      	mov	r0, r3
 801009a:	f000 f911 	bl	80102c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	2200      	movs	r2, #0
 80100a2:	601a      	str	r2, [r3, #0]
 80100a4:	e000      	b.n	80100a8 <pbuf_realloc+0xf0>
    return;
 80100a6:	bf00      	nop

}
 80100a8:	3710      	adds	r7, #16
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	0801aa04 	.word	0x0801aa04
 80100b4:	0801ab64 	.word	0x0801ab64
 80100b8:	0801aaac 	.word	0x0801aaac
 80100bc:	0801ab7c 	.word	0x0801ab7c
 80100c0:	0801ab94 	.word	0x0801ab94

080100c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	4613      	mov	r3, r2
 80100d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d106      	bne.n	80100e6 <pbuf_add_header_impl+0x22>
 80100d8:	4b2b      	ldr	r3, [pc, #172]	; (8010188 <pbuf_add_header_impl+0xc4>)
 80100da:	f240 12df 	movw	r2, #479	; 0x1df
 80100de:	492b      	ldr	r1, [pc, #172]	; (801018c <pbuf_add_header_impl+0xc8>)
 80100e0:	482b      	ldr	r0, [pc, #172]	; (8010190 <pbuf_add_header_impl+0xcc>)
 80100e2:	f007 fe17 	bl	8017d14 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d003      	beq.n	80100f4 <pbuf_add_header_impl+0x30>
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100f2:	d301      	bcc.n	80100f8 <pbuf_add_header_impl+0x34>
    return 1;
 80100f4:	2301      	movs	r3, #1
 80100f6:	e043      	b.n	8010180 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d101      	bne.n	8010102 <pbuf_add_header_impl+0x3e>
    return 0;
 80100fe:	2300      	movs	r3, #0
 8010100:	e03e      	b.n	8010180 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	891a      	ldrh	r2, [r3, #8]
 801010a:	8a7b      	ldrh	r3, [r7, #18]
 801010c:	4413      	add	r3, r2
 801010e:	b29b      	uxth	r3, r3
 8010110:	8a7a      	ldrh	r2, [r7, #18]
 8010112:	429a      	cmp	r2, r3
 8010114:	d901      	bls.n	801011a <pbuf_add_header_impl+0x56>
    return 1;
 8010116:	2301      	movs	r3, #1
 8010118:	e032      	b.n	8010180 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	7b1b      	ldrb	r3, [r3, #12]
 801011e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010120:	8a3b      	ldrh	r3, [r7, #16]
 8010122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00c      	beq.n	8010144 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	685a      	ldr	r2, [r3, #4]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	425b      	negs	r3, r3
 8010132:	4413      	add	r3, r2
 8010134:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	3310      	adds	r3, #16
 801013a:	697a      	ldr	r2, [r7, #20]
 801013c:	429a      	cmp	r2, r3
 801013e:	d20d      	bcs.n	801015c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010140:	2301      	movs	r3, #1
 8010142:	e01d      	b.n	8010180 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010144:	79fb      	ldrb	r3, [r7, #7]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d006      	beq.n	8010158 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	685a      	ldr	r2, [r3, #4]
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	425b      	negs	r3, r3
 8010152:	4413      	add	r3, r2
 8010154:	617b      	str	r3, [r7, #20]
 8010156:	e001      	b.n	801015c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010158:	2301      	movs	r3, #1
 801015a:	e011      	b.n	8010180 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	697a      	ldr	r2, [r7, #20]
 8010160:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	895a      	ldrh	r2, [r3, #10]
 8010166:	8a7b      	ldrh	r3, [r7, #18]
 8010168:	4413      	add	r3, r2
 801016a:	b29a      	uxth	r2, r3
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	891a      	ldrh	r2, [r3, #8]
 8010174:	8a7b      	ldrh	r3, [r7, #18]
 8010176:	4413      	add	r3, r2
 8010178:	b29a      	uxth	r2, r3
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	811a      	strh	r2, [r3, #8]


  return 0;
 801017e:	2300      	movs	r3, #0
}
 8010180:	4618      	mov	r0, r3
 8010182:	3718      	adds	r7, #24
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}
 8010188:	0801aa04 	.word	0x0801aa04
 801018c:	0801abb0 	.word	0x0801abb0
 8010190:	0801aaac 	.word	0x0801aaac

08010194 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b082      	sub	sp, #8
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801019e:	2200      	movs	r2, #0
 80101a0:	6839      	ldr	r1, [r7, #0]
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f7ff ff8e 	bl	80100c4 <pbuf_add_header_impl>
 80101a8:	4603      	mov	r3, r0
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
	...

080101b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80101b4:	b580      	push	{r7, lr}
 80101b6:	b084      	sub	sp, #16
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d106      	bne.n	80101d2 <pbuf_remove_header+0x1e>
 80101c4:	4b20      	ldr	r3, [pc, #128]	; (8010248 <pbuf_remove_header+0x94>)
 80101c6:	f240 224b 	movw	r2, #587	; 0x24b
 80101ca:	4920      	ldr	r1, [pc, #128]	; (801024c <pbuf_remove_header+0x98>)
 80101cc:	4820      	ldr	r0, [pc, #128]	; (8010250 <pbuf_remove_header+0x9c>)
 80101ce:	f007 fda1 	bl	8017d14 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d003      	beq.n	80101e0 <pbuf_remove_header+0x2c>
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101de:	d301      	bcc.n	80101e4 <pbuf_remove_header+0x30>
    return 1;
 80101e0:	2301      	movs	r3, #1
 80101e2:	e02c      	b.n	801023e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80101e4:	683b      	ldr	r3, [r7, #0]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d101      	bne.n	80101ee <pbuf_remove_header+0x3a>
    return 0;
 80101ea:	2300      	movs	r3, #0
 80101ec:	e027      	b.n	801023e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	895b      	ldrh	r3, [r3, #10]
 80101f6:	89fa      	ldrh	r2, [r7, #14]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d908      	bls.n	801020e <pbuf_remove_header+0x5a>
 80101fc:	4b12      	ldr	r3, [pc, #72]	; (8010248 <pbuf_remove_header+0x94>)
 80101fe:	f240 2255 	movw	r2, #597	; 0x255
 8010202:	4914      	ldr	r1, [pc, #80]	; (8010254 <pbuf_remove_header+0xa0>)
 8010204:	4812      	ldr	r0, [pc, #72]	; (8010250 <pbuf_remove_header+0x9c>)
 8010206:	f007 fd85 	bl	8017d14 <iprintf>
 801020a:	2301      	movs	r3, #1
 801020c:	e017      	b.n	801023e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685a      	ldr	r2, [r3, #4]
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	441a      	add	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	895a      	ldrh	r2, [r3, #10]
 8010224:	89fb      	ldrh	r3, [r7, #14]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	b29a      	uxth	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	891a      	ldrh	r2, [r3, #8]
 8010232:	89fb      	ldrh	r3, [r7, #14]
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801023c:	2300      	movs	r3, #0
}
 801023e:	4618      	mov	r0, r3
 8010240:	3710      	adds	r7, #16
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	0801aa04 	.word	0x0801aa04
 801024c:	0801abb0 	.word	0x0801abb0
 8010250:	0801aaac 	.word	0x0801aaac
 8010254:	0801abbc 	.word	0x0801abbc

08010258 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010258:	b580      	push	{r7, lr}
 801025a:	b082      	sub	sp, #8
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
 8010260:	460b      	mov	r3, r1
 8010262:	807b      	strh	r3, [r7, #2]
 8010264:	4613      	mov	r3, r2
 8010266:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010268:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801026c:	2b00      	cmp	r3, #0
 801026e:	da08      	bge.n	8010282 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010270:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010274:	425b      	negs	r3, r3
 8010276:	4619      	mov	r1, r3
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f7ff ff9b 	bl	80101b4 <pbuf_remove_header>
 801027e:	4603      	mov	r3, r0
 8010280:	e007      	b.n	8010292 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010282:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010286:	787a      	ldrb	r2, [r7, #1]
 8010288:	4619      	mov	r1, r3
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f7ff ff1a 	bl	80100c4 <pbuf_add_header_impl>
 8010290:	4603      	mov	r3, r0
  }
}
 8010292:	4618      	mov	r0, r3
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801029a:	b580      	push	{r7, lr}
 801029c:	b082      	sub	sp, #8
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
 80102a2:	460b      	mov	r3, r1
 80102a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80102a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80102aa:	2201      	movs	r2, #1
 80102ac:	4619      	mov	r1, r3
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7ff ffd2 	bl	8010258 <pbuf_header_impl>
 80102b4:	4603      	mov	r3, r0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
	...

080102c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b088      	sub	sp, #32
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d10b      	bne.n	80102e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d106      	bne.n	80102e2 <pbuf_free+0x22>
 80102d4:	4b3b      	ldr	r3, [pc, #236]	; (80103c4 <pbuf_free+0x104>)
 80102d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80102da:	493b      	ldr	r1, [pc, #236]	; (80103c8 <pbuf_free+0x108>)
 80102dc:	483b      	ldr	r0, [pc, #236]	; (80103cc <pbuf_free+0x10c>)
 80102de:	f007 fd19 	bl	8017d14 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80102e2:	2300      	movs	r3, #0
 80102e4:	e069      	b.n	80103ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80102e6:	2300      	movs	r3, #0
 80102e8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80102ea:	e062      	b.n	80103b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80102ec:	f000 fc46 	bl	8010b7c <sys_arch_protect>
 80102f0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	7b9b      	ldrb	r3, [r3, #14]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d106      	bne.n	8010308 <pbuf_free+0x48>
 80102fa:	4b32      	ldr	r3, [pc, #200]	; (80103c4 <pbuf_free+0x104>)
 80102fc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010300:	4933      	ldr	r1, [pc, #204]	; (80103d0 <pbuf_free+0x110>)
 8010302:	4832      	ldr	r0, [pc, #200]	; (80103cc <pbuf_free+0x10c>)
 8010304:	f007 fd06 	bl	8017d14 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	7b9b      	ldrb	r3, [r3, #14]
 801030c:	3b01      	subs	r3, #1
 801030e:	b2da      	uxtb	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	739a      	strb	r2, [r3, #14]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	7b9b      	ldrb	r3, [r3, #14]
 8010318:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801031a:	69b8      	ldr	r0, [r7, #24]
 801031c:	f000 fc3c 	bl	8010b98 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010320:	7dfb      	ldrb	r3, [r7, #23]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d143      	bne.n	80103ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	7b1b      	ldrb	r3, [r3, #12]
 8010330:	f003 030f 	and.w	r3, r3, #15
 8010334:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	7b5b      	ldrb	r3, [r3, #13]
 801033a:	f003 0302 	and.w	r3, r3, #2
 801033e:	2b00      	cmp	r3, #0
 8010340:	d011      	beq.n	8010366 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <pbuf_free+0x9c>
 801034e:	4b1d      	ldr	r3, [pc, #116]	; (80103c4 <pbuf_free+0x104>)
 8010350:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010354:	491f      	ldr	r1, [pc, #124]	; (80103d4 <pbuf_free+0x114>)
 8010356:	481d      	ldr	r0, [pc, #116]	; (80103cc <pbuf_free+0x10c>)
 8010358:	f007 fcdc 	bl	8017d14 <iprintf>
        pc->custom_free_function(p);
 801035c:	68bb      	ldr	r3, [r7, #8]
 801035e:	691b      	ldr	r3, [r3, #16]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	4798      	blx	r3
 8010364:	e01d      	b.n	80103a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010366:	7bfb      	ldrb	r3, [r7, #15]
 8010368:	2b02      	cmp	r3, #2
 801036a:	d104      	bne.n	8010376 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 801036c:	6879      	ldr	r1, [r7, #4]
 801036e:	200c      	movs	r0, #12
 8010370:	f7ff f8b2 	bl	800f4d8 <memp_free>
 8010374:	e015      	b.n	80103a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010376:	7bfb      	ldrb	r3, [r7, #15]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d104      	bne.n	8010386 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 801037c:	6879      	ldr	r1, [r7, #4]
 801037e:	200b      	movs	r0, #11
 8010380:	f7ff f8aa 	bl	800f4d8 <memp_free>
 8010384:	e00d      	b.n	80103a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010386:	7bfb      	ldrb	r3, [r7, #15]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d103      	bne.n	8010394 <pbuf_free+0xd4>
          mem_free(p);
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7fe fcff 	bl	800ed90 <mem_free>
 8010392:	e006      	b.n	80103a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010394:	4b0b      	ldr	r3, [pc, #44]	; (80103c4 <pbuf_free+0x104>)
 8010396:	f240 320f 	movw	r2, #783	; 0x30f
 801039a:	490f      	ldr	r1, [pc, #60]	; (80103d8 <pbuf_free+0x118>)
 801039c:	480b      	ldr	r0, [pc, #44]	; (80103cc <pbuf_free+0x10c>)
 801039e:	f007 fcb9 	bl	8017d14 <iprintf>
        }
      }
      count++;
 80103a2:	7ffb      	ldrb	r3, [r7, #31]
 80103a4:	3301      	adds	r3, #1
 80103a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	607b      	str	r3, [r7, #4]
 80103ac:	e001      	b.n	80103b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80103ae:	2300      	movs	r3, #0
 80103b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d199      	bne.n	80102ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80103b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80103ba:	4618      	mov	r0, r3
 80103bc:	3720      	adds	r7, #32
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}
 80103c2:	bf00      	nop
 80103c4:	0801aa04 	.word	0x0801aa04
 80103c8:	0801abb0 	.word	0x0801abb0
 80103cc:	0801aaac 	.word	0x0801aaac
 80103d0:	0801abdc 	.word	0x0801abdc
 80103d4:	0801abf4 	.word	0x0801abf4
 80103d8:	0801ac18 	.word	0x0801ac18

080103dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80103dc:	b480      	push	{r7}
 80103de:	b085      	sub	sp, #20
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80103e4:	2300      	movs	r3, #0
 80103e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80103e8:	e005      	b.n	80103f6 <pbuf_clen+0x1a>
    ++len;
 80103ea:	89fb      	ldrh	r3, [r7, #14]
 80103ec:	3301      	adds	r3, #1
 80103ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1f6      	bne.n	80103ea <pbuf_clen+0xe>
  }
  return len;
 80103fc:	89fb      	ldrh	r3, [r7, #14]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3714      	adds	r7, #20
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr
	...

0801040c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d016      	beq.n	8010448 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801041a:	f000 fbaf 	bl	8010b7c <sys_arch_protect>
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	7b9b      	ldrb	r3, [r3, #14]
 8010424:	3301      	adds	r3, #1
 8010426:	b2da      	uxtb	r2, r3
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	739a      	strb	r2, [r3, #14]
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f000 fbb3 	bl	8010b98 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	7b9b      	ldrb	r3, [r3, #14]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d106      	bne.n	8010448 <pbuf_ref+0x3c>
 801043a:	4b05      	ldr	r3, [pc, #20]	; (8010450 <pbuf_ref+0x44>)
 801043c:	f240 3242 	movw	r2, #834	; 0x342
 8010440:	4904      	ldr	r1, [pc, #16]	; (8010454 <pbuf_ref+0x48>)
 8010442:	4805      	ldr	r0, [pc, #20]	; (8010458 <pbuf_ref+0x4c>)
 8010444:	f007 fc66 	bl	8017d14 <iprintf>
  }
}
 8010448:	bf00      	nop
 801044a:	3710      	adds	r7, #16
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}
 8010450:	0801aa04 	.word	0x0801aa04
 8010454:	0801ac2c 	.word	0x0801ac2c
 8010458:	0801aaac 	.word	0x0801aaac

0801045c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d002      	beq.n	8010472 <pbuf_cat+0x16>
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d107      	bne.n	8010482 <pbuf_cat+0x26>
 8010472:	4b20      	ldr	r3, [pc, #128]	; (80104f4 <pbuf_cat+0x98>)
 8010474:	f240 3259 	movw	r2, #857	; 0x359
 8010478:	491f      	ldr	r1, [pc, #124]	; (80104f8 <pbuf_cat+0x9c>)
 801047a:	4820      	ldr	r0, [pc, #128]	; (80104fc <pbuf_cat+0xa0>)
 801047c:	f007 fc4a 	bl	8017d14 <iprintf>
 8010480:	e034      	b.n	80104ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	60fb      	str	r3, [r7, #12]
 8010486:	e00a      	b.n	801049e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	891a      	ldrh	r2, [r3, #8]
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	891b      	ldrh	r3, [r3, #8]
 8010490:	4413      	add	r3, r2
 8010492:	b29a      	uxth	r2, r3
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	60fb      	str	r3, [r7, #12]
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d1f0      	bne.n	8010488 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	891a      	ldrh	r2, [r3, #8]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	895b      	ldrh	r3, [r3, #10]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d006      	beq.n	80104c0 <pbuf_cat+0x64>
 80104b2:	4b10      	ldr	r3, [pc, #64]	; (80104f4 <pbuf_cat+0x98>)
 80104b4:	f240 3262 	movw	r2, #866	; 0x362
 80104b8:	4911      	ldr	r1, [pc, #68]	; (8010500 <pbuf_cat+0xa4>)
 80104ba:	4810      	ldr	r0, [pc, #64]	; (80104fc <pbuf_cat+0xa0>)
 80104bc:	f007 fc2a 	bl	8017d14 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d006      	beq.n	80104d6 <pbuf_cat+0x7a>
 80104c8:	4b0a      	ldr	r3, [pc, #40]	; (80104f4 <pbuf_cat+0x98>)
 80104ca:	f240 3263 	movw	r2, #867	; 0x363
 80104ce:	490d      	ldr	r1, [pc, #52]	; (8010504 <pbuf_cat+0xa8>)
 80104d0:	480a      	ldr	r0, [pc, #40]	; (80104fc <pbuf_cat+0xa0>)
 80104d2:	f007 fc1f 	bl	8017d14 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	891a      	ldrh	r2, [r3, #8]
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	891b      	ldrh	r3, [r3, #8]
 80104de:	4413      	add	r3, r2
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	683a      	ldr	r2, [r7, #0]
 80104ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	0801aa04 	.word	0x0801aa04
 80104f8:	0801ac40 	.word	0x0801ac40
 80104fc:	0801aaac 	.word	0x0801aaac
 8010500:	0801ac78 	.word	0x0801ac78
 8010504:	0801aca8 	.word	0x0801aca8

08010508 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b086      	sub	sp, #24
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010512:	2300      	movs	r3, #0
 8010514:	617b      	str	r3, [r7, #20]
 8010516:	2300      	movs	r3, #0
 8010518:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d008      	beq.n	8010532 <pbuf_copy+0x2a>
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d005      	beq.n	8010532 <pbuf_copy+0x2a>
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	891a      	ldrh	r2, [r3, #8]
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	891b      	ldrh	r3, [r3, #8]
 801052e:	429a      	cmp	r2, r3
 8010530:	d209      	bcs.n	8010546 <pbuf_copy+0x3e>
 8010532:	4b57      	ldr	r3, [pc, #348]	; (8010690 <pbuf_copy+0x188>)
 8010534:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010538:	4956      	ldr	r1, [pc, #344]	; (8010694 <pbuf_copy+0x18c>)
 801053a:	4857      	ldr	r0, [pc, #348]	; (8010698 <pbuf_copy+0x190>)
 801053c:	f007 fbea 	bl	8017d14 <iprintf>
 8010540:	f06f 030f 	mvn.w	r3, #15
 8010544:	e09f      	b.n	8010686 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	895b      	ldrh	r3, [r3, #10]
 801054a:	461a      	mov	r2, r3
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	1ad2      	subs	r2, r2, r3
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	895b      	ldrh	r3, [r3, #10]
 8010554:	4619      	mov	r1, r3
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	1acb      	subs	r3, r1, r3
 801055a:	429a      	cmp	r2, r3
 801055c:	d306      	bcc.n	801056c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	895b      	ldrh	r3, [r3, #10]
 8010562:	461a      	mov	r2, r3
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	1ad3      	subs	r3, r2, r3
 8010568:	60fb      	str	r3, [r7, #12]
 801056a:	e005      	b.n	8010578 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	895b      	ldrh	r3, [r3, #10]
 8010570:	461a      	mov	r2, r3
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	1ad3      	subs	r3, r2, r3
 8010576:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	685a      	ldr	r2, [r3, #4]
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	18d0      	adds	r0, r2, r3
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	685a      	ldr	r2, [r3, #4]
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	4413      	add	r3, r2
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	4619      	mov	r1, r3
 801058c:	f007 fafd 	bl	8017b8a <memcpy>
    offset_to += len;
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	4413      	add	r3, r2
 8010596:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010598:	693a      	ldr	r2, [r7, #16]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	4413      	add	r3, r2
 801059e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	895b      	ldrh	r3, [r3, #10]
 80105a4:	461a      	mov	r2, r3
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d906      	bls.n	80105ba <pbuf_copy+0xb2>
 80105ac:	4b38      	ldr	r3, [pc, #224]	; (8010690 <pbuf_copy+0x188>)
 80105ae:	f240 32d9 	movw	r2, #985	; 0x3d9
 80105b2:	493a      	ldr	r1, [pc, #232]	; (801069c <pbuf_copy+0x194>)
 80105b4:	4838      	ldr	r0, [pc, #224]	; (8010698 <pbuf_copy+0x190>)
 80105b6:	f007 fbad 	bl	8017d14 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80105ba:	683b      	ldr	r3, [r7, #0]
 80105bc:	895b      	ldrh	r3, [r3, #10]
 80105be:	461a      	mov	r2, r3
 80105c0:	693b      	ldr	r3, [r7, #16]
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d906      	bls.n	80105d4 <pbuf_copy+0xcc>
 80105c6:	4b32      	ldr	r3, [pc, #200]	; (8010690 <pbuf_copy+0x188>)
 80105c8:	f240 32da 	movw	r2, #986	; 0x3da
 80105cc:	4934      	ldr	r1, [pc, #208]	; (80106a0 <pbuf_copy+0x198>)
 80105ce:	4832      	ldr	r0, [pc, #200]	; (8010698 <pbuf_copy+0x190>)
 80105d0:	f007 fba0 	bl	8017d14 <iprintf>
    if (offset_from >= p_from->len) {
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	895b      	ldrh	r3, [r3, #10]
 80105d8:	461a      	mov	r2, r3
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	4293      	cmp	r3, r2
 80105de:	d304      	bcc.n	80105ea <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80105e0:	2300      	movs	r3, #0
 80105e2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	895b      	ldrh	r3, [r3, #10]
 80105ee:	461a      	mov	r2, r3
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	4293      	cmp	r3, r2
 80105f4:	d114      	bne.n	8010620 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d10c      	bne.n	8010620 <pbuf_copy+0x118>
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d009      	beq.n	8010620 <pbuf_copy+0x118>
 801060c:	4b20      	ldr	r3, [pc, #128]	; (8010690 <pbuf_copy+0x188>)
 801060e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010612:	4924      	ldr	r1, [pc, #144]	; (80106a4 <pbuf_copy+0x19c>)
 8010614:	4820      	ldr	r0, [pc, #128]	; (8010698 <pbuf_copy+0x190>)
 8010616:	f007 fb7d 	bl	8017d14 <iprintf>
 801061a:	f06f 030f 	mvn.w	r3, #15
 801061e:	e032      	b.n	8010686 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d013      	beq.n	801064e <pbuf_copy+0x146>
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	895a      	ldrh	r2, [r3, #10]
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	891b      	ldrh	r3, [r3, #8]
 801062e:	429a      	cmp	r2, r3
 8010630:	d10d      	bne.n	801064e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d009      	beq.n	801064e <pbuf_copy+0x146>
 801063a:	4b15      	ldr	r3, [pc, #84]	; (8010690 <pbuf_copy+0x188>)
 801063c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010640:	4919      	ldr	r1, [pc, #100]	; (80106a8 <pbuf_copy+0x1a0>)
 8010642:	4815      	ldr	r0, [pc, #84]	; (8010698 <pbuf_copy+0x190>)
 8010644:	f007 fb66 	bl	8017d14 <iprintf>
 8010648:	f06f 0305 	mvn.w	r3, #5
 801064c:	e01b      	b.n	8010686 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d013      	beq.n	801067c <pbuf_copy+0x174>
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	895a      	ldrh	r2, [r3, #10]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	891b      	ldrh	r3, [r3, #8]
 801065c:	429a      	cmp	r2, r3
 801065e:	d10d      	bne.n	801067c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d009      	beq.n	801067c <pbuf_copy+0x174>
 8010668:	4b09      	ldr	r3, [pc, #36]	; (8010690 <pbuf_copy+0x188>)
 801066a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801066e:	490e      	ldr	r1, [pc, #56]	; (80106a8 <pbuf_copy+0x1a0>)
 8010670:	4809      	ldr	r0, [pc, #36]	; (8010698 <pbuf_copy+0x190>)
 8010672:	f007 fb4f 	bl	8017d14 <iprintf>
 8010676:	f06f 0305 	mvn.w	r3, #5
 801067a:	e004      	b.n	8010686 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	2b00      	cmp	r3, #0
 8010680:	f47f af61 	bne.w	8010546 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010684:	2300      	movs	r3, #0
}
 8010686:	4618      	mov	r0, r3
 8010688:	3718      	adds	r7, #24
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
 801068e:	bf00      	nop
 8010690:	0801aa04 	.word	0x0801aa04
 8010694:	0801acf4 	.word	0x0801acf4
 8010698:	0801aaac 	.word	0x0801aaac
 801069c:	0801ad24 	.word	0x0801ad24
 80106a0:	0801ad3c 	.word	0x0801ad3c
 80106a4:	0801ad58 	.word	0x0801ad58
 80106a8:	0801ad68 	.word	0x0801ad68

080106ac <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b088      	sub	sp, #32
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	4611      	mov	r1, r2
 80106b8:	461a      	mov	r2, r3
 80106ba:	460b      	mov	r3, r1
 80106bc:	80fb      	strh	r3, [r7, #6]
 80106be:	4613      	mov	r3, r2
 80106c0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80106c2:	2300      	movs	r3, #0
 80106c4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80106c6:	2300      	movs	r3, #0
 80106c8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d108      	bne.n	80106e2 <pbuf_copy_partial+0x36>
 80106d0:	4b2b      	ldr	r3, [pc, #172]	; (8010780 <pbuf_copy_partial+0xd4>)
 80106d2:	f240 420a 	movw	r2, #1034	; 0x40a
 80106d6:	492b      	ldr	r1, [pc, #172]	; (8010784 <pbuf_copy_partial+0xd8>)
 80106d8:	482b      	ldr	r0, [pc, #172]	; (8010788 <pbuf_copy_partial+0xdc>)
 80106da:	f007 fb1b 	bl	8017d14 <iprintf>
 80106de:	2300      	movs	r3, #0
 80106e0:	e04a      	b.n	8010778 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d108      	bne.n	80106fa <pbuf_copy_partial+0x4e>
 80106e8:	4b25      	ldr	r3, [pc, #148]	; (8010780 <pbuf_copy_partial+0xd4>)
 80106ea:	f240 420b 	movw	r2, #1035	; 0x40b
 80106ee:	4927      	ldr	r1, [pc, #156]	; (801078c <pbuf_copy_partial+0xe0>)
 80106f0:	4825      	ldr	r0, [pc, #148]	; (8010788 <pbuf_copy_partial+0xdc>)
 80106f2:	f007 fb0f 	bl	8017d14 <iprintf>
 80106f6:	2300      	movs	r3, #0
 80106f8:	e03e      	b.n	8010778 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	61fb      	str	r3, [r7, #28]
 80106fe:	e034      	b.n	801076a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010700:	88bb      	ldrh	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00a      	beq.n	801071c <pbuf_copy_partial+0x70>
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	895b      	ldrh	r3, [r3, #10]
 801070a:	88ba      	ldrh	r2, [r7, #4]
 801070c:	429a      	cmp	r2, r3
 801070e:	d305      	bcc.n	801071c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010710:	69fb      	ldr	r3, [r7, #28]
 8010712:	895b      	ldrh	r3, [r3, #10]
 8010714:	88ba      	ldrh	r2, [r7, #4]
 8010716:	1ad3      	subs	r3, r2, r3
 8010718:	80bb      	strh	r3, [r7, #4]
 801071a:	e023      	b.n	8010764 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801071c:	69fb      	ldr	r3, [r7, #28]
 801071e:	895a      	ldrh	r2, [r3, #10]
 8010720:	88bb      	ldrh	r3, [r7, #4]
 8010722:	1ad3      	subs	r3, r2, r3
 8010724:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010726:	8b3a      	ldrh	r2, [r7, #24]
 8010728:	88fb      	ldrh	r3, [r7, #6]
 801072a:	429a      	cmp	r2, r3
 801072c:	d901      	bls.n	8010732 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801072e:	88fb      	ldrh	r3, [r7, #6]
 8010730:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010732:	8b7b      	ldrh	r3, [r7, #26]
 8010734:	68ba      	ldr	r2, [r7, #8]
 8010736:	18d0      	adds	r0, r2, r3
 8010738:	69fb      	ldr	r3, [r7, #28]
 801073a:	685a      	ldr	r2, [r3, #4]
 801073c:	88bb      	ldrh	r3, [r7, #4]
 801073e:	4413      	add	r3, r2
 8010740:	8b3a      	ldrh	r2, [r7, #24]
 8010742:	4619      	mov	r1, r3
 8010744:	f007 fa21 	bl	8017b8a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010748:	8afa      	ldrh	r2, [r7, #22]
 801074a:	8b3b      	ldrh	r3, [r7, #24]
 801074c:	4413      	add	r3, r2
 801074e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010750:	8b7a      	ldrh	r2, [r7, #26]
 8010752:	8b3b      	ldrh	r3, [r7, #24]
 8010754:	4413      	add	r3, r2
 8010756:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010758:	88fa      	ldrh	r2, [r7, #6]
 801075a:	8b3b      	ldrh	r3, [r7, #24]
 801075c:	1ad3      	subs	r3, r2, r3
 801075e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010760:	2300      	movs	r3, #0
 8010762:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	61fb      	str	r3, [r7, #28]
 801076a:	88fb      	ldrh	r3, [r7, #6]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d002      	beq.n	8010776 <pbuf_copy_partial+0xca>
 8010770:	69fb      	ldr	r3, [r7, #28]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1c4      	bne.n	8010700 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010776:	8afb      	ldrh	r3, [r7, #22]
}
 8010778:	4618      	mov	r0, r3
 801077a:	3720      	adds	r7, #32
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	0801aa04 	.word	0x0801aa04
 8010784:	0801ad94 	.word	0x0801ad94
 8010788:	0801aaac 	.word	0x0801aaac
 801078c:	0801adb4 	.word	0x0801adb4

08010790 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b084      	sub	sp, #16
 8010794:	af00      	add	r7, sp, #0
 8010796:	4603      	mov	r3, r0
 8010798:	603a      	str	r2, [r7, #0]
 801079a:	71fb      	strb	r3, [r7, #7]
 801079c:	460b      	mov	r3, r1
 801079e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	8919      	ldrh	r1, [r3, #8]
 80107a4:	88ba      	ldrh	r2, [r7, #4]
 80107a6:	79fb      	ldrb	r3, [r7, #7]
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7ff faa5 	bl	800fcf8 <pbuf_alloc>
 80107ae:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d101      	bne.n	80107ba <pbuf_clone+0x2a>
    return NULL;
 80107b6:	2300      	movs	r3, #0
 80107b8:	e011      	b.n	80107de <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80107ba:	6839      	ldr	r1, [r7, #0]
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f7ff fea3 	bl	8010508 <pbuf_copy>
 80107c2:	4603      	mov	r3, r0
 80107c4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80107c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d006      	beq.n	80107dc <pbuf_clone+0x4c>
 80107ce:	4b06      	ldr	r3, [pc, #24]	; (80107e8 <pbuf_clone+0x58>)
 80107d0:	f240 5224 	movw	r2, #1316	; 0x524
 80107d4:	4905      	ldr	r1, [pc, #20]	; (80107ec <pbuf_clone+0x5c>)
 80107d6:	4806      	ldr	r0, [pc, #24]	; (80107f0 <pbuf_clone+0x60>)
 80107d8:	f007 fa9c 	bl	8017d14 <iprintf>
  return q;
 80107dc:	68fb      	ldr	r3, [r7, #12]
}
 80107de:	4618      	mov	r0, r3
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	0801aa04 	.word	0x0801aa04
 80107ec:	0801aec0 	.word	0x0801aec0
 80107f0:	0801aaac 	.word	0x0801aaac

080107f4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b086      	sub	sp, #24
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	60bb      	str	r3, [r7, #8]
 8010802:	2304      	movs	r3, #4
 8010804:	60fb      	str	r3, [r7, #12]
 8010806:	2300      	movs	r3, #0
 8010808:	613b      	str	r3, [r7, #16]
 801080a:	2300      	movs	r3, #0
 801080c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801080e:	f107 0308 	add.w	r3, r7, #8
 8010812:	2100      	movs	r1, #0
 8010814:	4618      	mov	r0, r3
 8010816:	f7f6 fdaa 	bl	800736e <osMessageCreate>
 801081a:	4602      	mov	r2, r0
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d102      	bne.n	801082e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8010828:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801082c:	e000      	b.n	8010830 <sys_mbox_new+0x3c>

  return ERR_OK;
 801082e:	2300      	movs	r3, #0
}
 8010830:	4618      	mov	r0, r3
 8010832:	3718      	adds	r7, #24
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4618      	mov	r0, r3
 8010846:	f7f6 fe6f 	bl	8007528 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	4618      	mov	r0, r3
 8010850:	f7f6 fe80 	bl	8007554 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8010854:	bf00      	nop
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	2200      	movs	r2, #0
 801086e:	4618      	mov	r0, r3
 8010870:	f7f6 fda6 	bl	80073c0 <osMessagePut>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d102      	bne.n	8010880 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801087a:	2300      	movs	r3, #0
 801087c:	73fb      	strb	r3, [r7, #15]
 801087e:	e001      	b.n	8010884 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8010880:	23ff      	movs	r3, #255	; 0xff
 8010882:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8010884:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010888:	4618      	mov	r0, r3
 801088a:	3710      	adds	r7, #16
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	b08c      	sub	sp, #48	; 0x30
 8010894:	af00      	add	r7, sp, #0
 8010896:	61f8      	str	r0, [r7, #28]
 8010898:	61b9      	str	r1, [r7, #24]
 801089a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801089c:	f7f6 fb92 	bl	8006fc4 <osKernelSysTick>
 80108a0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d017      	beq.n	80108d8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80108a8:	69fb      	ldr	r3, [r7, #28]
 80108aa:	6819      	ldr	r1, [r3, #0]
 80108ac:	f107 0320 	add.w	r3, r7, #32
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7f6 fdc4 	bl	8007440 <osMessageGet>

    if(event.status == osEventMessage)
 80108b8:	6a3b      	ldr	r3, [r7, #32]
 80108ba:	2b10      	cmp	r3, #16
 80108bc:	d109      	bne.n	80108d2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80108be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c0:	461a      	mov	r2, r3
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80108c6:	f7f6 fb7d 	bl	8006fc4 <osKernelSysTick>
 80108ca:	4602      	mov	r2, r0
 80108cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ce:	1ad3      	subs	r3, r2, r3
 80108d0:	e019      	b.n	8010906 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80108d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108d6:	e016      	b.n	8010906 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	6819      	ldr	r1, [r3, #0]
 80108dc:	463b      	mov	r3, r7
 80108de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7f6 fdac 	bl	8007440 <osMessageGet>
 80108e8:	f107 0320 	add.w	r3, r7, #32
 80108ec:	463a      	mov	r2, r7
 80108ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80108f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	461a      	mov	r2, r3
 80108f8:	69bb      	ldr	r3, [r7, #24]
 80108fa:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80108fc:	f7f6 fb62 	bl	8006fc4 <osKernelSysTick>
 8010900:	4602      	mov	r2, r0
 8010902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010904:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010906:	4618      	mov	r0, r3
 8010908:	3730      	adds	r7, #48	; 0x30
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}

0801090e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801090e:	b580      	push	{r7, lr}
 8010910:	b086      	sub	sp, #24
 8010912:	af00      	add	r7, sp, #0
 8010914:	6078      	str	r0, [r7, #4]
 8010916:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	6819      	ldr	r1, [r3, #0]
 801091c:	f107 030c 	add.w	r3, r7, #12
 8010920:	2200      	movs	r2, #0
 8010922:	4618      	mov	r0, r3
 8010924:	f7f6 fd8c 	bl	8007440 <osMessageGet>

  if(event.status == osEventMessage)
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2b10      	cmp	r3, #16
 801092c:	d105      	bne.n	801093a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	461a      	mov	r2, r3
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8010936:	2300      	movs	r3, #0
 8010938:	e001      	b.n	801093e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801093a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801093e:	4618      	mov	r0, r3
 8010940:	3718      	adds	r7, #24
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8010946:	b480      	push	{r7}
 8010948:	b083      	sub	sp, #12
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <sys_mbox_valid+0x14>
    return 0;
 8010956:	2300      	movs	r3, #0
 8010958:	e000      	b.n	801095c <sys_mbox_valid+0x16>
  else
    return 1;
 801095a:	2301      	movs	r3, #1
}
 801095c:	4618      	mov	r0, r3
 801095e:	370c      	adds	r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr

08010968 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8010968:	b480      	push	{r7}
 801096a:	b083      	sub	sp, #12
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	2200      	movs	r2, #0
 8010974:	601a      	str	r2, [r3, #0]
}
 8010976:	bf00      	nop
 8010978:	370c      	adds	r7, #12
 801097a:	46bd      	mov	sp, r7
 801097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010980:	4770      	bx	lr

08010982 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b084      	sub	sp, #16
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
 801098a:	460b      	mov	r3, r1
 801098c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801098e:	2300      	movs	r3, #0
 8010990:	60bb      	str	r3, [r7, #8]
 8010992:	2300      	movs	r3, #0
 8010994:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8010996:	f107 0308 	add.w	r3, r7, #8
 801099a:	2101      	movs	r1, #1
 801099c:	4618      	mov	r0, r3
 801099e:	f7f6 fc1d 	bl	80071dc <osSemaphoreCreate>
 80109a2:	4602      	mov	r2, r0
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d102      	bne.n	80109b6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80109b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80109b4:	e009      	b.n	80109ca <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 80109b6:	78fb      	ldrb	r3, [r7, #3]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d105      	bne.n	80109c8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2100      	movs	r1, #0
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7f6 fc3c 	bl	8007240 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3710      	adds	r7, #16
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}

080109d2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80109d2:	b580      	push	{r7, lr}
 80109d4:	b084      	sub	sp, #16
 80109d6:	af00      	add	r7, sp, #0
 80109d8:	6078      	str	r0, [r7, #4]
 80109da:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 80109dc:	f7f6 faf2 	bl	8006fc4 <osKernelSysTick>
 80109e0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d011      	beq.n	8010a0c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	6839      	ldr	r1, [r7, #0]
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7f6 fc26 	bl	8007240 <osSemaphoreWait>
 80109f4:	4603      	mov	r3, r0
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d105      	bne.n	8010a06 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 80109fa:	f7f6 fae3 	bl	8006fc4 <osKernelSysTick>
 80109fe:	4602      	mov	r2, r0
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	1ad3      	subs	r3, r2, r3
 8010a04:	e012      	b.n	8010a2c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8010a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a0a:	e00f      	b.n	8010a2c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8010a0c:	bf00      	nop
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7f6 fc12 	bl	8007240 <osSemaphoreWait>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d1f5      	bne.n	8010a0e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8010a22:	f7f6 facf 	bl	8006fc4 <osKernelSysTick>
 8010a26:	4602      	mov	r2, r0
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	3710      	adds	r7, #16
 8010a30:	46bd      	mov	sp, r7
 8010a32:	bd80      	pop	{r7, pc}

08010a34 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b082      	sub	sp, #8
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7f6 fc4b 	bl	80072dc <osSemaphoreRelease>
}
 8010a46:	bf00      	nop
 8010a48:	3708      	adds	r7, #8
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b082      	sub	sp, #8
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7f6 fc74 	bl	8007348 <osSemaphoreDelete>
}
 8010a60:	bf00      	nop
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b083      	sub	sp, #12
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d101      	bne.n	8010a7c <sys_sem_valid+0x14>
    return 0;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	e000      	b.n	8010a7e <sys_sem_valid+0x16>
  else
    return 1;
 8010a7c:	2301      	movs	r3, #1
}
 8010a7e:	4618      	mov	r0, r3
 8010a80:	370c      	adds	r7, #12
 8010a82:	46bd      	mov	sp, r7
 8010a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a88:	4770      	bx	lr

08010a8a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8010a8a:	b480      	push	{r7}
 8010a8c:	b083      	sub	sp, #12
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2200      	movs	r2, #0
 8010a96:	601a      	str	r2, [r3, #0]
}
 8010a98:	bf00      	nop
 8010a9a:	370c      	adds	r7, #12
 8010a9c:	46bd      	mov	sp, r7
 8010a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa2:	4770      	bx	lr

08010aa4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8010aa8:	4803      	ldr	r0, [pc, #12]	; (8010ab8 <sys_init+0x14>)
 8010aaa:	f7f6 fafb 	bl	80070a4 <osMutexCreate>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	4a02      	ldr	r2, [pc, #8]	; (8010abc <sys_init+0x18>)
 8010ab2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8010ab4:	bf00      	nop
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	0801cb2c 	.word	0x0801cb2c
 8010abc:	2400f224 	.word	0x2400f224

08010ac0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b084      	sub	sp, #16
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8010ac8:	2300      	movs	r3, #0
 8010aca:	60bb      	str	r3, [r7, #8]
 8010acc:	2300      	movs	r3, #0
 8010ace:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8010ad0:	f107 0308 	add.w	r3, r7, #8
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7f6 fae5 	bl	80070a4 <osMutexCreate>
 8010ada:	4602      	mov	r2, r0
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d102      	bne.n	8010aee <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8010ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010aec:	e000      	b.n	8010af0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3710      	adds	r7, #16
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b082      	sub	sp, #8
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f6 fae3 	bl	80070d4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8010b0e:	bf00      	nop
 8010b10:	3708      	adds	r7, #8
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd80      	pop	{r7, pc}

08010b16 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8010b16:	b580      	push	{r7, lr}
 8010b18:	b082      	sub	sp, #8
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7f6 fb24 	bl	8007170 <osMutexRelease>
}
 8010b28:	bf00      	nop
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b08c      	sub	sp, #48	; 0x30
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	607a      	str	r2, [r7, #4]
 8010b3c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8010b3e:	f107 0314 	add.w	r3, r7, #20
 8010b42:	2200      	movs	r2, #0
 8010b44:	601a      	str	r2, [r3, #0]
 8010b46:	605a      	str	r2, [r3, #4]
 8010b48:	609a      	str	r2, [r3, #8]
 8010b4a:	60da      	str	r2, [r3, #12]
 8010b4c:	611a      	str	r2, [r3, #16]
 8010b4e:	615a      	str	r2, [r3, #20]
 8010b50:	619a      	str	r2, [r3, #24]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	617b      	str	r3, [r7, #20]
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	61bb      	str	r3, [r7, #24]
 8010b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b5c:	b21b      	sxth	r3, r3
 8010b5e:	83bb      	strh	r3, [r7, #28]
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8010b64:	f107 0314 	add.w	r3, r7, #20
 8010b68:	6879      	ldr	r1, [r7, #4]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7f6 fa3a 	bl	8006fe4 <osThreadCreate>
 8010b70:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3730      	adds	r7, #48	; 0x30
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}
	...

08010b7c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8010b80:	4b04      	ldr	r3, [pc, #16]	; (8010b94 <sys_arch_protect+0x18>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010b88:	4618      	mov	r0, r3
 8010b8a:	f7f6 faa3 	bl	80070d4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8010b8e:	2301      	movs	r3, #1
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	bd80      	pop	{r7, pc}
 8010b94:	2400f224 	.word	0x2400f224

08010b98 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b082      	sub	sp, #8
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8010ba0:	4b04      	ldr	r3, [pc, #16]	; (8010bb4 <sys_arch_unprotect+0x1c>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7f6 fae3 	bl	8007170 <osMutexRelease>
}
 8010baa:	bf00      	nop
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	2400f224 	.word	0x2400f224

08010bb8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010bbc:	f007 f8c2 	bl	8017d44 <rand>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	4b01      	ldr	r3, [pc, #4]	; (8010bd8 <tcp_init+0x20>)
 8010bd2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010bd4:	bf00      	nop
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	24000028 	.word	0x24000028

08010bdc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	7d1b      	ldrb	r3, [r3, #20]
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d105      	bne.n	8010bf8 <tcp_free+0x1c>
 8010bec:	4b06      	ldr	r3, [pc, #24]	; (8010c08 <tcp_free+0x2c>)
 8010bee:	22d4      	movs	r2, #212	; 0xd4
 8010bf0:	4906      	ldr	r1, [pc, #24]	; (8010c0c <tcp_free+0x30>)
 8010bf2:	4807      	ldr	r0, [pc, #28]	; (8010c10 <tcp_free+0x34>)
 8010bf4:	f007 f88e 	bl	8017d14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010bf8:	6879      	ldr	r1, [r7, #4]
 8010bfa:	2001      	movs	r0, #1
 8010bfc:	f7fe fc6c 	bl	800f4d8 <memp_free>
}
 8010c00:	bf00      	nop
 8010c02:	3708      	adds	r7, #8
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	0801af4c 	.word	0x0801af4c
 8010c0c:	0801afc4 	.word	0x0801afc4
 8010c10:	0801afd8 	.word	0x0801afd8

08010c14 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b082      	sub	sp, #8
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	7d1b      	ldrb	r3, [r3, #20]
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	d105      	bne.n	8010c30 <tcp_free_listen+0x1c>
 8010c24:	4b06      	ldr	r3, [pc, #24]	; (8010c40 <tcp_free_listen+0x2c>)
 8010c26:	22df      	movs	r2, #223	; 0xdf
 8010c28:	4906      	ldr	r1, [pc, #24]	; (8010c44 <tcp_free_listen+0x30>)
 8010c2a:	4807      	ldr	r0, [pc, #28]	; (8010c48 <tcp_free_listen+0x34>)
 8010c2c:	f007 f872 	bl	8017d14 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010c30:	6879      	ldr	r1, [r7, #4]
 8010c32:	2002      	movs	r0, #2
 8010c34:	f7fe fc50 	bl	800f4d8 <memp_free>
}
 8010c38:	bf00      	nop
 8010c3a:	3708      	adds	r7, #8
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	0801af4c 	.word	0x0801af4c
 8010c44:	0801b000 	.word	0x0801b000
 8010c48:	0801afd8 	.word	0x0801afd8

08010c4c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010c50:	f001 f8a8 	bl	8011da4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010c54:	4b07      	ldr	r3, [pc, #28]	; (8010c74 <tcp_tmr+0x28>)
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	3301      	adds	r3, #1
 8010c5a:	b2da      	uxtb	r2, r3
 8010c5c:	4b05      	ldr	r3, [pc, #20]	; (8010c74 <tcp_tmr+0x28>)
 8010c5e:	701a      	strb	r2, [r3, #0]
 8010c60:	4b04      	ldr	r3, [pc, #16]	; (8010c74 <tcp_tmr+0x28>)
 8010c62:	781b      	ldrb	r3, [r3, #0]
 8010c64:	f003 0301 	and.w	r3, r3, #1
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d001      	beq.n	8010c70 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010c6c:	f000 fd5a 	bl	8011724 <tcp_slowtmr>
  }
}
 8010c70:	bf00      	nop
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	2400f23d 	.word	0x2400f23d

08010c78 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b084      	sub	sp, #16
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d105      	bne.n	8010c94 <tcp_remove_listener+0x1c>
 8010c88:	4b0d      	ldr	r3, [pc, #52]	; (8010cc0 <tcp_remove_listener+0x48>)
 8010c8a:	22ff      	movs	r2, #255	; 0xff
 8010c8c:	490d      	ldr	r1, [pc, #52]	; (8010cc4 <tcp_remove_listener+0x4c>)
 8010c8e:	480e      	ldr	r0, [pc, #56]	; (8010cc8 <tcp_remove_listener+0x50>)
 8010c90:	f007 f840 	bl	8017d14 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	60fb      	str	r3, [r7, #12]
 8010c98:	e00a      	b.n	8010cb0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d102      	bne.n	8010caa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	68db      	ldr	r3, [r3, #12]
 8010cae:	60fb      	str	r3, [r7, #12]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d1f1      	bne.n	8010c9a <tcp_remove_listener+0x22>
    }
  }
}
 8010cb6:	bf00      	nop
 8010cb8:	bf00      	nop
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	0801af4c 	.word	0x0801af4c
 8010cc4:	0801b01c 	.word	0x0801b01c
 8010cc8:	0801afd8 	.word	0x0801afd8

08010ccc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d106      	bne.n	8010ce8 <tcp_listen_closed+0x1c>
 8010cda:	4b14      	ldr	r3, [pc, #80]	; (8010d2c <tcp_listen_closed+0x60>)
 8010cdc:	f240 1211 	movw	r2, #273	; 0x111
 8010ce0:	4913      	ldr	r1, [pc, #76]	; (8010d30 <tcp_listen_closed+0x64>)
 8010ce2:	4814      	ldr	r0, [pc, #80]	; (8010d34 <tcp_listen_closed+0x68>)
 8010ce4:	f007 f816 	bl	8017d14 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	7d1b      	ldrb	r3, [r3, #20]
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	d006      	beq.n	8010cfe <tcp_listen_closed+0x32>
 8010cf0:	4b0e      	ldr	r3, [pc, #56]	; (8010d2c <tcp_listen_closed+0x60>)
 8010cf2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010cf6:	4910      	ldr	r1, [pc, #64]	; (8010d38 <tcp_listen_closed+0x6c>)
 8010cf8:	480e      	ldr	r0, [pc, #56]	; (8010d34 <tcp_listen_closed+0x68>)
 8010cfa:	f007 f80b 	bl	8017d14 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010cfe:	2301      	movs	r3, #1
 8010d00:	60fb      	str	r3, [r7, #12]
 8010d02:	e00b      	b.n	8010d1c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010d04:	4a0d      	ldr	r2, [pc, #52]	; (8010d3c <tcp_listen_closed+0x70>)
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	6879      	ldr	r1, [r7, #4]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff ffb1 	bl	8010c78 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	3301      	adds	r3, #1
 8010d1a:	60fb      	str	r3, [r7, #12]
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	2b03      	cmp	r3, #3
 8010d20:	d9f0      	bls.n	8010d04 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010d22:	bf00      	nop
 8010d24:	bf00      	nop
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	0801af4c 	.word	0x0801af4c
 8010d30:	0801b044 	.word	0x0801b044
 8010d34:	0801afd8 	.word	0x0801afd8
 8010d38:	0801b050 	.word	0x0801b050
 8010d3c:	0801cb4c 	.word	0x0801cb4c

08010d40 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010d40:	b5b0      	push	{r4, r5, r7, lr}
 8010d42:	b088      	sub	sp, #32
 8010d44:	af04      	add	r7, sp, #16
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	460b      	mov	r3, r1
 8010d4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d106      	bne.n	8010d60 <tcp_close_shutdown+0x20>
 8010d52:	4b63      	ldr	r3, [pc, #396]	; (8010ee0 <tcp_close_shutdown+0x1a0>)
 8010d54:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010d58:	4962      	ldr	r1, [pc, #392]	; (8010ee4 <tcp_close_shutdown+0x1a4>)
 8010d5a:	4863      	ldr	r0, [pc, #396]	; (8010ee8 <tcp_close_shutdown+0x1a8>)
 8010d5c:	f006 ffda 	bl	8017d14 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010d60:	78fb      	ldrb	r3, [r7, #3]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d067      	beq.n	8010e36 <tcp_close_shutdown+0xf6>
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	7d1b      	ldrb	r3, [r3, #20]
 8010d6a:	2b04      	cmp	r3, #4
 8010d6c:	d003      	beq.n	8010d76 <tcp_close_shutdown+0x36>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	7d1b      	ldrb	r3, [r3, #20]
 8010d72:	2b07      	cmp	r3, #7
 8010d74:	d15f      	bne.n	8010e36 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d105      	bne.n	8010d8a <tcp_close_shutdown+0x4a>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010d82:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010d86:	4293      	cmp	r3, r2
 8010d88:	d055      	beq.n	8010e36 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	8b5b      	ldrh	r3, [r3, #26]
 8010d8e:	f003 0310 	and.w	r3, r3, #16
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d106      	bne.n	8010da4 <tcp_close_shutdown+0x64>
 8010d96:	4b52      	ldr	r3, [pc, #328]	; (8010ee0 <tcp_close_shutdown+0x1a0>)
 8010d98:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010d9c:	4953      	ldr	r1, [pc, #332]	; (8010eec <tcp_close_shutdown+0x1ac>)
 8010d9e:	4852      	ldr	r0, [pc, #328]	; (8010ee8 <tcp_close_shutdown+0x1a8>)
 8010da0:	f006 ffb8 	bl	8017d14 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010dac:	687d      	ldr	r5, [r7, #4]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	3304      	adds	r3, #4
 8010db2:	687a      	ldr	r2, [r7, #4]
 8010db4:	8ad2      	ldrh	r2, [r2, #22]
 8010db6:	6879      	ldr	r1, [r7, #4]
 8010db8:	8b09      	ldrh	r1, [r1, #24]
 8010dba:	9102      	str	r1, [sp, #8]
 8010dbc:	9201      	str	r2, [sp, #4]
 8010dbe:	9300      	str	r3, [sp, #0]
 8010dc0:	462b      	mov	r3, r5
 8010dc2:	4622      	mov	r2, r4
 8010dc4:	4601      	mov	r1, r0
 8010dc6:	6878      	ldr	r0, [r7, #4]
 8010dc8:	f005 fdbe 	bl	8016948 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010dcc:	6878      	ldr	r0, [r7, #4]
 8010dce:	f001 fb9b 	bl	8012508 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010dd2:	4b47      	ldr	r3, [pc, #284]	; (8010ef0 <tcp_close_shutdown+0x1b0>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d105      	bne.n	8010de8 <tcp_close_shutdown+0xa8>
 8010ddc:	4b44      	ldr	r3, [pc, #272]	; (8010ef0 <tcp_close_shutdown+0x1b0>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	4a43      	ldr	r2, [pc, #268]	; (8010ef0 <tcp_close_shutdown+0x1b0>)
 8010de4:	6013      	str	r3, [r2, #0]
 8010de6:	e013      	b.n	8010e10 <tcp_close_shutdown+0xd0>
 8010de8:	4b41      	ldr	r3, [pc, #260]	; (8010ef0 <tcp_close_shutdown+0x1b0>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	60fb      	str	r3, [r7, #12]
 8010dee:	e00c      	b.n	8010e0a <tcp_close_shutdown+0xca>
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d104      	bne.n	8010e04 <tcp_close_shutdown+0xc4>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	68da      	ldr	r2, [r3, #12]
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	60da      	str	r2, [r3, #12]
 8010e02:	e005      	b.n	8010e10 <tcp_close_shutdown+0xd0>
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	60fb      	str	r3, [r7, #12]
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d1ef      	bne.n	8010df0 <tcp_close_shutdown+0xb0>
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	60da      	str	r2, [r3, #12]
 8010e16:	4b37      	ldr	r3, [pc, #220]	; (8010ef4 <tcp_close_shutdown+0x1b4>)
 8010e18:	2201      	movs	r2, #1
 8010e1a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010e1c:	4b36      	ldr	r3, [pc, #216]	; (8010ef8 <tcp_close_shutdown+0x1b8>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d102      	bne.n	8010e2c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010e26:	f004 f833 	bl	8014e90 <tcp_trigger_input_pcb_close>
 8010e2a:	e002      	b.n	8010e32 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7ff fed5 	bl	8010bdc <tcp_free>
      }
      return ERR_OK;
 8010e32:	2300      	movs	r3, #0
 8010e34:	e050      	b.n	8010ed8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	7d1b      	ldrb	r3, [r3, #20]
 8010e3a:	2b02      	cmp	r3, #2
 8010e3c:	d03b      	beq.n	8010eb6 <tcp_close_shutdown+0x176>
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	dc44      	bgt.n	8010ecc <tcp_close_shutdown+0x18c>
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d002      	beq.n	8010e4c <tcp_close_shutdown+0x10c>
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d02a      	beq.n	8010ea0 <tcp_close_shutdown+0x160>
 8010e4a:	e03f      	b.n	8010ecc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	8adb      	ldrh	r3, [r3, #22]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d021      	beq.n	8010e98 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010e54:	4b29      	ldr	r3, [pc, #164]	; (8010efc <tcp_close_shutdown+0x1bc>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d105      	bne.n	8010e6a <tcp_close_shutdown+0x12a>
 8010e5e:	4b27      	ldr	r3, [pc, #156]	; (8010efc <tcp_close_shutdown+0x1bc>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	4a25      	ldr	r2, [pc, #148]	; (8010efc <tcp_close_shutdown+0x1bc>)
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	e013      	b.n	8010e92 <tcp_close_shutdown+0x152>
 8010e6a:	4b24      	ldr	r3, [pc, #144]	; (8010efc <tcp_close_shutdown+0x1bc>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	60bb      	str	r3, [r7, #8]
 8010e70:	e00c      	b.n	8010e8c <tcp_close_shutdown+0x14c>
 8010e72:	68bb      	ldr	r3, [r7, #8]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d104      	bne.n	8010e86 <tcp_close_shutdown+0x146>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	68da      	ldr	r2, [r3, #12]
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	60da      	str	r2, [r3, #12]
 8010e84:	e005      	b.n	8010e92 <tcp_close_shutdown+0x152>
 8010e86:	68bb      	ldr	r3, [r7, #8]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	60bb      	str	r3, [r7, #8]
 8010e8c:	68bb      	ldr	r3, [r7, #8]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1ef      	bne.n	8010e72 <tcp_close_shutdown+0x132>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	2200      	movs	r2, #0
 8010e96:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff fe9f 	bl	8010bdc <tcp_free>
      break;
 8010e9e:	e01a      	b.n	8010ed6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7ff ff13 	bl	8010ccc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010ea6:	6879      	ldr	r1, [r7, #4]
 8010ea8:	4815      	ldr	r0, [pc, #84]	; (8010f00 <tcp_close_shutdown+0x1c0>)
 8010eaa:	f001 fb7d 	bl	80125a8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7ff feb0 	bl	8010c14 <tcp_free_listen>
      break;
 8010eb4:	e00f      	b.n	8010ed6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010eb6:	6879      	ldr	r1, [r7, #4]
 8010eb8:	480d      	ldr	r0, [pc, #52]	; (8010ef0 <tcp_close_shutdown+0x1b0>)
 8010eba:	f001 fb75 	bl	80125a8 <tcp_pcb_remove>
 8010ebe:	4b0d      	ldr	r3, [pc, #52]	; (8010ef4 <tcp_close_shutdown+0x1b4>)
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f7ff fe89 	bl	8010bdc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010eca:	e004      	b.n	8010ed6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f000 f819 	bl	8010f04 <tcp_close_shutdown_fin>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	e000      	b.n	8010ed8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8010ed6:	2300      	movs	r3, #0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3710      	adds	r7, #16
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bdb0      	pop	{r4, r5, r7, pc}
 8010ee0:	0801af4c 	.word	0x0801af4c
 8010ee4:	0801b068 	.word	0x0801b068
 8010ee8:	0801afd8 	.word	0x0801afd8
 8010eec:	0801b088 	.word	0x0801b088
 8010ef0:	2400f234 	.word	0x2400f234
 8010ef4:	2400f23c 	.word	0x2400f23c
 8010ef8:	2400f274 	.word	0x2400f274
 8010efc:	2400f22c 	.word	0x2400f22c
 8010f00:	2400f230 	.word	0x2400f230

08010f04 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d106      	bne.n	8010f20 <tcp_close_shutdown_fin+0x1c>
 8010f12:	4b2e      	ldr	r3, [pc, #184]	; (8010fcc <tcp_close_shutdown_fin+0xc8>)
 8010f14:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010f18:	492d      	ldr	r1, [pc, #180]	; (8010fd0 <tcp_close_shutdown_fin+0xcc>)
 8010f1a:	482e      	ldr	r0, [pc, #184]	; (8010fd4 <tcp_close_shutdown_fin+0xd0>)
 8010f1c:	f006 fefa 	bl	8017d14 <iprintf>

  switch (pcb->state) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	7d1b      	ldrb	r3, [r3, #20]
 8010f24:	2b07      	cmp	r3, #7
 8010f26:	d020      	beq.n	8010f6a <tcp_close_shutdown_fin+0x66>
 8010f28:	2b07      	cmp	r3, #7
 8010f2a:	dc2b      	bgt.n	8010f84 <tcp_close_shutdown_fin+0x80>
 8010f2c:	2b03      	cmp	r3, #3
 8010f2e:	d002      	beq.n	8010f36 <tcp_close_shutdown_fin+0x32>
 8010f30:	2b04      	cmp	r3, #4
 8010f32:	d00d      	beq.n	8010f50 <tcp_close_shutdown_fin+0x4c>
 8010f34:	e026      	b.n	8010f84 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010f36:	6878      	ldr	r0, [r7, #4]
 8010f38:	f004 fe14 	bl	8015b64 <tcp_send_fin>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d11f      	bne.n	8010f88 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2205      	movs	r2, #5
 8010f4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f4e:	e01b      	b.n	8010f88 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f004 fe07 	bl	8015b64 <tcp_send_fin>
 8010f56:	4603      	mov	r3, r0
 8010f58:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d114      	bne.n	8010f8c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2205      	movs	r2, #5
 8010f66:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f68:	e010      	b.n	8010f8c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010f6a:	6878      	ldr	r0, [r7, #4]
 8010f6c:	f004 fdfa 	bl	8015b64 <tcp_send_fin>
 8010f70:	4603      	mov	r3, r0
 8010f72:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d109      	bne.n	8010f90 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2209      	movs	r2, #9
 8010f80:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010f82:	e005      	b.n	8010f90 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010f84:	2300      	movs	r3, #0
 8010f86:	e01c      	b.n	8010fc2 <tcp_close_shutdown_fin+0xbe>
      break;
 8010f88:	bf00      	nop
 8010f8a:	e002      	b.n	8010f92 <tcp_close_shutdown_fin+0x8e>
      break;
 8010f8c:	bf00      	nop
 8010f8e:	e000      	b.n	8010f92 <tcp_close_shutdown_fin+0x8e>
      break;
 8010f90:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d103      	bne.n	8010fa2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f004 ff20 	bl	8015de0 <tcp_output>
 8010fa0:	e00d      	b.n	8010fbe <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010faa:	d108      	bne.n	8010fbe <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	8b5b      	ldrh	r3, [r3, #26]
 8010fb0:	f043 0308 	orr.w	r3, r3, #8
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e001      	b.n	8010fc2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3710      	adds	r7, #16
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
 8010fca:	bf00      	nop
 8010fcc:	0801af4c 	.word	0x0801af4c
 8010fd0:	0801b044 	.word	0x0801b044
 8010fd4:	0801afd8 	.word	0x0801afd8

08010fd8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d109      	bne.n	8010ffa <tcp_close+0x22>
 8010fe6:	4b0f      	ldr	r3, [pc, #60]	; (8011024 <tcp_close+0x4c>)
 8010fe8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010fec:	490e      	ldr	r1, [pc, #56]	; (8011028 <tcp_close+0x50>)
 8010fee:	480f      	ldr	r0, [pc, #60]	; (801102c <tcp_close+0x54>)
 8010ff0:	f006 fe90 	bl	8017d14 <iprintf>
 8010ff4:	f06f 030f 	mvn.w	r3, #15
 8010ff8:	e00f      	b.n	801101a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	7d1b      	ldrb	r3, [r3, #20]
 8010ffe:	2b01      	cmp	r3, #1
 8011000:	d006      	beq.n	8011010 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	8b5b      	ldrh	r3, [r3, #26]
 8011006:	f043 0310 	orr.w	r3, r3, #16
 801100a:	b29a      	uxth	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011010:	2101      	movs	r1, #1
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff fe94 	bl	8010d40 <tcp_close_shutdown>
 8011018:	4603      	mov	r3, r0
}
 801101a:	4618      	mov	r0, r3
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	0801af4c 	.word	0x0801af4c
 8011028:	0801b0a4 	.word	0x0801b0a4
 801102c:	0801afd8 	.word	0x0801afd8

08011030 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011030:	b580      	push	{r7, lr}
 8011032:	b084      	sub	sp, #16
 8011034:	af00      	add	r7, sp, #0
 8011036:	60f8      	str	r0, [r7, #12]
 8011038:	60b9      	str	r1, [r7, #8]
 801103a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d109      	bne.n	8011056 <tcp_shutdown+0x26>
 8011042:	4b26      	ldr	r3, [pc, #152]	; (80110dc <tcp_shutdown+0xac>)
 8011044:	f240 2207 	movw	r2, #519	; 0x207
 8011048:	4925      	ldr	r1, [pc, #148]	; (80110e0 <tcp_shutdown+0xb0>)
 801104a:	4826      	ldr	r0, [pc, #152]	; (80110e4 <tcp_shutdown+0xb4>)
 801104c:	f006 fe62 	bl	8017d14 <iprintf>
 8011050:	f06f 030f 	mvn.w	r3, #15
 8011054:	e03d      	b.n	80110d2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	7d1b      	ldrb	r3, [r3, #20]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d102      	bne.n	8011064 <tcp_shutdown+0x34>
    return ERR_CONN;
 801105e:	f06f 030a 	mvn.w	r3, #10
 8011062:	e036      	b.n	80110d2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d01b      	beq.n	80110a2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	8b5b      	ldrh	r3, [r3, #26]
 801106e:	f043 0310 	orr.w	r3, r3, #16
 8011072:	b29a      	uxth	r2, r3
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d005      	beq.n	801108a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801107e:	2101      	movs	r1, #1
 8011080:	68f8      	ldr	r0, [r7, #12]
 8011082:	f7ff fe5d 	bl	8010d40 <tcp_close_shutdown>
 8011086:	4603      	mov	r3, r0
 8011088:	e023      	b.n	80110d2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801108e:	2b00      	cmp	r3, #0
 8011090:	d007      	beq.n	80110a2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011096:	4618      	mov	r0, r3
 8011098:	f7ff f912 	bl	80102c0 <pbuf_free>
      pcb->refused_data = NULL;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	2200      	movs	r2, #0
 80110a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d013      	beq.n	80110d0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	7d1b      	ldrb	r3, [r3, #20]
 80110ac:	2b04      	cmp	r3, #4
 80110ae:	dc02      	bgt.n	80110b6 <tcp_shutdown+0x86>
 80110b0:	2b03      	cmp	r3, #3
 80110b2:	da02      	bge.n	80110ba <tcp_shutdown+0x8a>
 80110b4:	e009      	b.n	80110ca <tcp_shutdown+0x9a>
 80110b6:	2b07      	cmp	r3, #7
 80110b8:	d107      	bne.n	80110ca <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80110ba:	68bb      	ldr	r3, [r7, #8]
 80110bc:	b2db      	uxtb	r3, r3
 80110be:	4619      	mov	r1, r3
 80110c0:	68f8      	ldr	r0, [r7, #12]
 80110c2:	f7ff fe3d 	bl	8010d40 <tcp_close_shutdown>
 80110c6:	4603      	mov	r3, r0
 80110c8:	e003      	b.n	80110d2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80110ca:	f06f 030a 	mvn.w	r3, #10
 80110ce:	e000      	b.n	80110d2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80110d0:	2300      	movs	r3, #0
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	3710      	adds	r7, #16
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	0801af4c 	.word	0x0801af4c
 80110e0:	0801b0bc 	.word	0x0801b0bc
 80110e4:	0801afd8 	.word	0x0801afd8

080110e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b08e      	sub	sp, #56	; 0x38
 80110ec:	af04      	add	r7, sp, #16
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d107      	bne.n	8011108 <tcp_abandon+0x20>
 80110f8:	4b52      	ldr	r3, [pc, #328]	; (8011244 <tcp_abandon+0x15c>)
 80110fa:	f240 223d 	movw	r2, #573	; 0x23d
 80110fe:	4952      	ldr	r1, [pc, #328]	; (8011248 <tcp_abandon+0x160>)
 8011100:	4852      	ldr	r0, [pc, #328]	; (801124c <tcp_abandon+0x164>)
 8011102:	f006 fe07 	bl	8017d14 <iprintf>
 8011106:	e099      	b.n	801123c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	7d1b      	ldrb	r3, [r3, #20]
 801110c:	2b01      	cmp	r3, #1
 801110e:	d106      	bne.n	801111e <tcp_abandon+0x36>
 8011110:	4b4c      	ldr	r3, [pc, #304]	; (8011244 <tcp_abandon+0x15c>)
 8011112:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011116:	494e      	ldr	r1, [pc, #312]	; (8011250 <tcp_abandon+0x168>)
 8011118:	484c      	ldr	r0, [pc, #304]	; (801124c <tcp_abandon+0x164>)
 801111a:	f006 fdfb 	bl	8017d14 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	7d1b      	ldrb	r3, [r3, #20]
 8011122:	2b0a      	cmp	r3, #10
 8011124:	d107      	bne.n	8011136 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011126:	6879      	ldr	r1, [r7, #4]
 8011128:	484a      	ldr	r0, [pc, #296]	; (8011254 <tcp_abandon+0x16c>)
 801112a:	f001 fa3d 	bl	80125a8 <tcp_pcb_remove>
    tcp_free(pcb);
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7ff fd54 	bl	8010bdc <tcp_free>
 8011134:	e082      	b.n	801123c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011136:	2300      	movs	r3, #0
 8011138:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011142:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011148:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011150:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	691b      	ldr	r3, [r3, #16]
 8011156:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	7d1b      	ldrb	r3, [r3, #20]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d126      	bne.n	80111ae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	8adb      	ldrh	r3, [r3, #22]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d02e      	beq.n	80111c6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011168:	4b3b      	ldr	r3, [pc, #236]	; (8011258 <tcp_abandon+0x170>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	429a      	cmp	r2, r3
 8011170:	d105      	bne.n	801117e <tcp_abandon+0x96>
 8011172:	4b39      	ldr	r3, [pc, #228]	; (8011258 <tcp_abandon+0x170>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	68db      	ldr	r3, [r3, #12]
 8011178:	4a37      	ldr	r2, [pc, #220]	; (8011258 <tcp_abandon+0x170>)
 801117a:	6013      	str	r3, [r2, #0]
 801117c:	e013      	b.n	80111a6 <tcp_abandon+0xbe>
 801117e:	4b36      	ldr	r3, [pc, #216]	; (8011258 <tcp_abandon+0x170>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	61fb      	str	r3, [r7, #28]
 8011184:	e00c      	b.n	80111a0 <tcp_abandon+0xb8>
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	687a      	ldr	r2, [r7, #4]
 801118c:	429a      	cmp	r2, r3
 801118e:	d104      	bne.n	801119a <tcp_abandon+0xb2>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	68da      	ldr	r2, [r3, #12]
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	60da      	str	r2, [r3, #12]
 8011198:	e005      	b.n	80111a6 <tcp_abandon+0xbe>
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	68db      	ldr	r3, [r3, #12]
 801119e:	61fb      	str	r3, [r7, #28]
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d1ef      	bne.n	8011186 <tcp_abandon+0x9e>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	60da      	str	r2, [r3, #12]
 80111ac:	e00b      	b.n	80111c6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	8adb      	ldrh	r3, [r3, #22]
 80111b6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80111b8:	6879      	ldr	r1, [r7, #4]
 80111ba:	4828      	ldr	r0, [pc, #160]	; (801125c <tcp_abandon+0x174>)
 80111bc:	f001 f9f4 	bl	80125a8 <tcp_pcb_remove>
 80111c0:	4b27      	ldr	r3, [pc, #156]	; (8011260 <tcp_abandon+0x178>)
 80111c2:	2201      	movs	r2, #1
 80111c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d004      	beq.n	80111d8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111d2:	4618      	mov	r0, r3
 80111d4:	f000 fec8 	bl	8011f68 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d004      	beq.n	80111ea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111e4:	4618      	mov	r0, r3
 80111e6:	f000 febf 	bl	8011f68 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d004      	beq.n	80111fc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80111f6:	4618      	mov	r0, r3
 80111f8:	f000 feb6 	bl	8011f68 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80111fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d00e      	beq.n	8011220 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	3304      	adds	r3, #4
 8011208:	687a      	ldr	r2, [r7, #4]
 801120a:	8b12      	ldrh	r2, [r2, #24]
 801120c:	9202      	str	r2, [sp, #8]
 801120e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011210:	9201      	str	r2, [sp, #4]
 8011212:	9300      	str	r3, [sp, #0]
 8011214:	460b      	mov	r3, r1
 8011216:	697a      	ldr	r2, [r7, #20]
 8011218:	69b9      	ldr	r1, [r7, #24]
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f005 fb94 	bl	8016948 <tcp_rst>
    }
    last_state = pcb->state;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7d1b      	ldrb	r3, [r3, #20]
 8011224:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7ff fcd8 	bl	8010bdc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d004      	beq.n	801123c <tcp_abandon+0x154>
 8011232:	693b      	ldr	r3, [r7, #16]
 8011234:	f06f 010c 	mvn.w	r1, #12
 8011238:	68f8      	ldr	r0, [r7, #12]
 801123a:	4798      	blx	r3
  }
}
 801123c:	3728      	adds	r7, #40	; 0x28
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	0801af4c 	.word	0x0801af4c
 8011248:	0801b0d8 	.word	0x0801b0d8
 801124c:	0801afd8 	.word	0x0801afd8
 8011250:	0801b0f4 	.word	0x0801b0f4
 8011254:	2400f238 	.word	0x2400f238
 8011258:	2400f22c 	.word	0x2400f22c
 801125c:	2400f234 	.word	0x2400f234
 8011260:	2400f23c 	.word	0x2400f23c

08011264 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 801126c:	2101      	movs	r1, #1
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f7ff ff3a 	bl	80110e8 <tcp_abandon>
}
 8011274:	bf00      	nop
 8011276:	3708      	adds	r7, #8
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b088      	sub	sp, #32
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	4613      	mov	r3, r2
 8011288:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801128a:	2304      	movs	r3, #4
 801128c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	2b00      	cmp	r3, #0
 8011292:	d101      	bne.n	8011298 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011294:	4b3e      	ldr	r3, [pc, #248]	; (8011390 <tcp_bind+0x114>)
 8011296:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d109      	bne.n	80112b2 <tcp_bind+0x36>
 801129e:	4b3d      	ldr	r3, [pc, #244]	; (8011394 <tcp_bind+0x118>)
 80112a0:	f240 22a9 	movw	r2, #681	; 0x2a9
 80112a4:	493c      	ldr	r1, [pc, #240]	; (8011398 <tcp_bind+0x11c>)
 80112a6:	483d      	ldr	r0, [pc, #244]	; (801139c <tcp_bind+0x120>)
 80112a8:	f006 fd34 	bl	8017d14 <iprintf>
 80112ac:	f06f 030f 	mvn.w	r3, #15
 80112b0:	e06a      	b.n	8011388 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	7d1b      	ldrb	r3, [r3, #20]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d009      	beq.n	80112ce <tcp_bind+0x52>
 80112ba:	4b36      	ldr	r3, [pc, #216]	; (8011394 <tcp_bind+0x118>)
 80112bc:	f240 22ab 	movw	r2, #683	; 0x2ab
 80112c0:	4937      	ldr	r1, [pc, #220]	; (80113a0 <tcp_bind+0x124>)
 80112c2:	4836      	ldr	r0, [pc, #216]	; (801139c <tcp_bind+0x120>)
 80112c4:	f006 fd26 	bl	8017d14 <iprintf>
 80112c8:	f06f 0305 	mvn.w	r3, #5
 80112cc:	e05c      	b.n	8011388 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80112ce:	88fb      	ldrh	r3, [r7, #6]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d109      	bne.n	80112e8 <tcp_bind+0x6c>
    port = tcp_new_port();
 80112d4:	f000 f9e0 	bl	8011698 <tcp_new_port>
 80112d8:	4603      	mov	r3, r0
 80112da:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80112dc:	88fb      	ldrh	r3, [r7, #6]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d135      	bne.n	801134e <tcp_bind+0xd2>
      return ERR_BUF;
 80112e2:	f06f 0301 	mvn.w	r3, #1
 80112e6:	e04f      	b.n	8011388 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80112e8:	2300      	movs	r3, #0
 80112ea:	61fb      	str	r3, [r7, #28]
 80112ec:	e02b      	b.n	8011346 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80112ee:	4a2d      	ldr	r2, [pc, #180]	; (80113a4 <tcp_bind+0x128>)
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	61bb      	str	r3, [r7, #24]
 80112fa:	e01e      	b.n	801133a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	8adb      	ldrh	r3, [r3, #22]
 8011300:	88fa      	ldrh	r2, [r7, #6]
 8011302:	429a      	cmp	r2, r3
 8011304:	d116      	bne.n	8011334 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011306:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011308:	2b00      	cmp	r3, #0
 801130a:	d010      	beq.n	801132e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d00c      	beq.n	801132e <tcp_bind+0xb2>
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d009      	beq.n	801132e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d005      	beq.n	801132e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8011322:	69bb      	ldr	r3, [r7, #24]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801132a:	429a      	cmp	r2, r3
 801132c:	d102      	bne.n	8011334 <tcp_bind+0xb8>
              return ERR_USE;
 801132e:	f06f 0307 	mvn.w	r3, #7
 8011332:	e029      	b.n	8011388 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011334:	69bb      	ldr	r3, [r7, #24]
 8011336:	68db      	ldr	r3, [r3, #12]
 8011338:	61bb      	str	r3, [r7, #24]
 801133a:	69bb      	ldr	r3, [r7, #24]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d1dd      	bne.n	80112fc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	3301      	adds	r3, #1
 8011344:	61fb      	str	r3, [r7, #28]
 8011346:	69fa      	ldr	r2, [r7, #28]
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	429a      	cmp	r2, r3
 801134c:	dbcf      	blt.n	80112ee <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801134e:	68bb      	ldr	r3, [r7, #8]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00c      	beq.n	801136e <tcp_bind+0xf2>
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d008      	beq.n	801136e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d002      	beq.n	8011368 <tcp_bind+0xec>
 8011362:	68bb      	ldr	r3, [r7, #8]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	e000      	b.n	801136a <tcp_bind+0xee>
 8011368:	2300      	movs	r3, #0
 801136a:	68fa      	ldr	r2, [r7, #12]
 801136c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	88fa      	ldrh	r2, [r7, #6]
 8011372:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8011374:	4b0c      	ldr	r3, [pc, #48]	; (80113a8 <tcp_bind+0x12c>)
 8011376:	681a      	ldr	r2, [r3, #0]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	60da      	str	r2, [r3, #12]
 801137c:	4a0a      	ldr	r2, [pc, #40]	; (80113a8 <tcp_bind+0x12c>)
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6013      	str	r3, [r2, #0]
 8011382:	f005 fe5b 	bl	801703c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3720      	adds	r7, #32
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	0801ca58 	.word	0x0801ca58
 8011394:	0801af4c 	.word	0x0801af4c
 8011398:	0801b128 	.word	0x0801b128
 801139c:	0801afd8 	.word	0x0801afd8
 80113a0:	0801b140 	.word	0x0801b140
 80113a4:	0801cb4c 	.word	0x0801cb4c
 80113a8:	2400f22c 	.word	0x2400f22c

080113ac <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b084      	sub	sp, #16
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	60f8      	str	r0, [r7, #12]
 80113b4:	60b9      	str	r1, [r7, #8]
 80113b6:	4613      	mov	r3, r2
 80113b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d106      	bne.n	80113ce <tcp_accept_null+0x22>
 80113c0:	4b07      	ldr	r3, [pc, #28]	; (80113e0 <tcp_accept_null+0x34>)
 80113c2:	f240 320f 	movw	r2, #783	; 0x30f
 80113c6:	4907      	ldr	r1, [pc, #28]	; (80113e4 <tcp_accept_null+0x38>)
 80113c8:	4807      	ldr	r0, [pc, #28]	; (80113e8 <tcp_accept_null+0x3c>)
 80113ca:	f006 fca3 	bl	8017d14 <iprintf>

  tcp_abort(pcb);
 80113ce:	68b8      	ldr	r0, [r7, #8]
 80113d0:	f7ff ff48 	bl	8011264 <tcp_abort>

  return ERR_ABRT;
 80113d4:	f06f 030c 	mvn.w	r3, #12
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3710      	adds	r7, #16
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	0801af4c 	.word	0x0801af4c
 80113e4:	0801b168 	.word	0x0801b168
 80113e8:	0801afd8 	.word	0x0801afd8

080113ec <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b088      	sub	sp, #32
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	60f8      	str	r0, [r7, #12]
 80113f4:	460b      	mov	r3, r1
 80113f6:	607a      	str	r2, [r7, #4]
 80113f8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80113fa:	2300      	movs	r3, #0
 80113fc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d109      	bne.n	8011418 <tcp_listen_with_backlog_and_err+0x2c>
 8011404:	4b47      	ldr	r3, [pc, #284]	; (8011524 <tcp_listen_with_backlog_and_err+0x138>)
 8011406:	f240 3259 	movw	r2, #857	; 0x359
 801140a:	4947      	ldr	r1, [pc, #284]	; (8011528 <tcp_listen_with_backlog_and_err+0x13c>)
 801140c:	4847      	ldr	r0, [pc, #284]	; (801152c <tcp_listen_with_backlog_and_err+0x140>)
 801140e:	f006 fc81 	bl	8017d14 <iprintf>
 8011412:	23f0      	movs	r3, #240	; 0xf0
 8011414:	76fb      	strb	r3, [r7, #27]
 8011416:	e079      	b.n	801150c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	7d1b      	ldrb	r3, [r3, #20]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d009      	beq.n	8011434 <tcp_listen_with_backlog_and_err+0x48>
 8011420:	4b40      	ldr	r3, [pc, #256]	; (8011524 <tcp_listen_with_backlog_and_err+0x138>)
 8011422:	f240 325a 	movw	r2, #858	; 0x35a
 8011426:	4942      	ldr	r1, [pc, #264]	; (8011530 <tcp_listen_with_backlog_and_err+0x144>)
 8011428:	4840      	ldr	r0, [pc, #256]	; (801152c <tcp_listen_with_backlog_and_err+0x140>)
 801142a:	f006 fc73 	bl	8017d14 <iprintf>
 801142e:	23f1      	movs	r3, #241	; 0xf1
 8011430:	76fb      	strb	r3, [r7, #27]
 8011432:	e06b      	b.n	801150c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	7d1b      	ldrb	r3, [r3, #20]
 8011438:	2b01      	cmp	r3, #1
 801143a:	d104      	bne.n	8011446 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8011440:	23f7      	movs	r3, #247	; 0xf7
 8011442:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011444:	e062      	b.n	801150c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011446:	2002      	movs	r0, #2
 8011448:	f7fd ffd0 	bl	800f3ec <memp_malloc>
 801144c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801144e:	69fb      	ldr	r3, [r7, #28]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d102      	bne.n	801145a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8011454:	23ff      	movs	r3, #255	; 0xff
 8011456:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011458:	e058      	b.n	801150c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	691a      	ldr	r2, [r3, #16]
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	8ada      	ldrh	r2, [r3, #22]
 8011466:	69fb      	ldr	r3, [r7, #28]
 8011468:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	2201      	movs	r2, #1
 801146e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	7d5a      	ldrb	r2, [r3, #21]
 8011474:	69fb      	ldr	r3, [r7, #28]
 8011476:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	7a5a      	ldrb	r2, [r3, #9]
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	2200      	movs	r2, #0
 8011484:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	7ada      	ldrb	r2, [r3, #11]
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	7a9a      	ldrb	r2, [r3, #10]
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	8adb      	ldrh	r3, [r3, #22]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d021      	beq.n	80114ea <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80114a6:	4b23      	ldr	r3, [pc, #140]	; (8011534 <tcp_listen_with_backlog_and_err+0x148>)
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d105      	bne.n	80114bc <tcp_listen_with_backlog_and_err+0xd0>
 80114b0:	4b20      	ldr	r3, [pc, #128]	; (8011534 <tcp_listen_with_backlog_and_err+0x148>)
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	4a1f      	ldr	r2, [pc, #124]	; (8011534 <tcp_listen_with_backlog_and_err+0x148>)
 80114b8:	6013      	str	r3, [r2, #0]
 80114ba:	e013      	b.n	80114e4 <tcp_listen_with_backlog_and_err+0xf8>
 80114bc:	4b1d      	ldr	r3, [pc, #116]	; (8011534 <tcp_listen_with_backlog_and_err+0x148>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	617b      	str	r3, [r7, #20]
 80114c2:	e00c      	b.n	80114de <tcp_listen_with_backlog_and_err+0xf2>
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	68fa      	ldr	r2, [r7, #12]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	d104      	bne.n	80114d8 <tcp_listen_with_backlog_and_err+0xec>
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	68da      	ldr	r2, [r3, #12]
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	60da      	str	r2, [r3, #12]
 80114d6:	e005      	b.n	80114e4 <tcp_listen_with_backlog_and_err+0xf8>
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	617b      	str	r3, [r7, #20]
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d1ef      	bne.n	80114c4 <tcp_listen_with_backlog_and_err+0xd8>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	2200      	movs	r2, #0
 80114e8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80114ea:	68f8      	ldr	r0, [r7, #12]
 80114ec:	f7ff fb76 	bl	8010bdc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	4a11      	ldr	r2, [pc, #68]	; (8011538 <tcp_listen_with_backlog_and_err+0x14c>)
 80114f4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80114f6:	4b11      	ldr	r3, [pc, #68]	; (801153c <tcp_listen_with_backlog_and_err+0x150>)
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	60da      	str	r2, [r3, #12]
 80114fe:	4a0f      	ldr	r2, [pc, #60]	; (801153c <tcp_listen_with_backlog_and_err+0x150>)
 8011500:	69fb      	ldr	r3, [r7, #28]
 8011502:	6013      	str	r3, [r2, #0]
 8011504:	f005 fd9a 	bl	801703c <tcp_timer_needed>
  res = ERR_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d002      	beq.n	8011518 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	7efa      	ldrb	r2, [r7, #27]
 8011516:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8011518:	69fb      	ldr	r3, [r7, #28]
}
 801151a:	4618      	mov	r0, r3
 801151c:	3720      	adds	r7, #32
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	0801af4c 	.word	0x0801af4c
 8011528:	0801b188 	.word	0x0801b188
 801152c:	0801afd8 	.word	0x0801afd8
 8011530:	0801b1b8 	.word	0x0801b1b8
 8011534:	2400f22c 	.word	0x2400f22c
 8011538:	080113ad 	.word	0x080113ad
 801153c:	2400f230 	.word	0x2400f230

08011540 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d106      	bne.n	801155c <tcp_update_rcv_ann_wnd+0x1c>
 801154e:	4b25      	ldr	r3, [pc, #148]	; (80115e4 <tcp_update_rcv_ann_wnd+0xa4>)
 8011550:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011554:	4924      	ldr	r1, [pc, #144]	; (80115e8 <tcp_update_rcv_ann_wnd+0xa8>)
 8011556:	4825      	ldr	r0, [pc, #148]	; (80115ec <tcp_update_rcv_ann_wnd+0xac>)
 8011558:	f006 fbdc 	bl	8017d14 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011560:	687a      	ldr	r2, [r7, #4]
 8011562:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011564:	4413      	add	r3, r2
 8011566:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011570:	f640 3168 	movw	r1, #2920	; 0xb68
 8011574:	428a      	cmp	r2, r1
 8011576:	bf28      	it	cs
 8011578:	460a      	movcs	r2, r1
 801157a:	b292      	uxth	r2, r2
 801157c:	4413      	add	r3, r2
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	2b00      	cmp	r3, #0
 8011584:	db08      	blt.n	8011598 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011592:	68fa      	ldr	r2, [r7, #12]
 8011594:	1ad3      	subs	r3, r2, r3
 8011596:	e020      	b.n	80115da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	dd03      	ble.n	80115ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80115ac:	e014      	b.n	80115d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b6:	1ad3      	subs	r3, r2, r3
 80115b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80115ba:	68bb      	ldr	r3, [r7, #8]
 80115bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115c0:	d306      	bcc.n	80115d0 <tcp_update_rcv_ann_wnd+0x90>
 80115c2:	4b08      	ldr	r3, [pc, #32]	; (80115e4 <tcp_update_rcv_ann_wnd+0xa4>)
 80115c4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80115c8:	4909      	ldr	r1, [pc, #36]	; (80115f0 <tcp_update_rcv_ann_wnd+0xb0>)
 80115ca:	4808      	ldr	r0, [pc, #32]	; (80115ec <tcp_update_rcv_ann_wnd+0xac>)
 80115cc:	f006 fba2 	bl	8017d14 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	b29a      	uxth	r2, r3
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80115d8:	2300      	movs	r3, #0
  }
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	0801af4c 	.word	0x0801af4c
 80115e8:	0801b1f0 	.word	0x0801b1f0
 80115ec:	0801afd8 	.word	0x0801afd8
 80115f0:	0801b214 	.word	0x0801b214

080115f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	460b      	mov	r3, r1
 80115fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d107      	bne.n	8011616 <tcp_recved+0x22>
 8011606:	4b20      	ldr	r3, [pc, #128]	; (8011688 <tcp_recved+0x94>)
 8011608:	f240 32cf 	movw	r2, #975	; 0x3cf
 801160c:	491f      	ldr	r1, [pc, #124]	; (801168c <tcp_recved+0x98>)
 801160e:	4820      	ldr	r0, [pc, #128]	; (8011690 <tcp_recved+0x9c>)
 8011610:	f006 fb80 	bl	8017d14 <iprintf>
 8011614:	e034      	b.n	8011680 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	7d1b      	ldrb	r3, [r3, #20]
 801161a:	2b01      	cmp	r3, #1
 801161c:	d106      	bne.n	801162c <tcp_recved+0x38>
 801161e:	4b1a      	ldr	r3, [pc, #104]	; (8011688 <tcp_recved+0x94>)
 8011620:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011624:	491b      	ldr	r1, [pc, #108]	; (8011694 <tcp_recved+0xa0>)
 8011626:	481a      	ldr	r0, [pc, #104]	; (8011690 <tcp_recved+0x9c>)
 8011628:	f006 fb74 	bl	8017d14 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011630:	887b      	ldrh	r3, [r7, #2]
 8011632:	4413      	add	r3, r2
 8011634:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011636:	89fb      	ldrh	r3, [r7, #14]
 8011638:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801163c:	4293      	cmp	r3, r2
 801163e:	d804      	bhi.n	801164a <tcp_recved+0x56>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011644:	89fa      	ldrh	r2, [r7, #14]
 8011646:	429a      	cmp	r2, r3
 8011648:	d204      	bcs.n	8011654 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011650:	851a      	strh	r2, [r3, #40]	; 0x28
 8011652:	e002      	b.n	801165a <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	89fa      	ldrh	r2, [r7, #14]
 8011658:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801165a:	6878      	ldr	r0, [r7, #4]
 801165c:	f7ff ff70 	bl	8011540 <tcp_update_rcv_ann_wnd>
 8011660:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011668:	4293      	cmp	r3, r2
 801166a:	d909      	bls.n	8011680 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	8b5b      	ldrh	r3, [r3, #26]
 8011670:	f043 0302 	orr.w	r3, r3, #2
 8011674:	b29a      	uxth	r2, r3
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f004 fbb0 	bl	8015de0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011680:	3710      	adds	r7, #16
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	0801af4c 	.word	0x0801af4c
 801168c:	0801b230 	.word	0x0801b230
 8011690:	0801afd8 	.word	0x0801afd8
 8011694:	0801b248 	.word	0x0801b248

08011698 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801169e:	2300      	movs	r3, #0
 80116a0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80116a2:	4b1e      	ldr	r3, [pc, #120]	; (801171c <tcp_new_port+0x84>)
 80116a4:	881b      	ldrh	r3, [r3, #0]
 80116a6:	3301      	adds	r3, #1
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	4b1c      	ldr	r3, [pc, #112]	; (801171c <tcp_new_port+0x84>)
 80116ac:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80116ae:	4b1b      	ldr	r3, [pc, #108]	; (801171c <tcp_new_port+0x84>)
 80116b0:	881b      	ldrh	r3, [r3, #0]
 80116b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d103      	bne.n	80116c2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80116ba:	4b18      	ldr	r3, [pc, #96]	; (801171c <tcp_new_port+0x84>)
 80116bc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80116c0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80116c2:	2300      	movs	r3, #0
 80116c4:	71fb      	strb	r3, [r7, #7]
 80116c6:	e01e      	b.n	8011706 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80116c8:	79fb      	ldrb	r3, [r7, #7]
 80116ca:	4a15      	ldr	r2, [pc, #84]	; (8011720 <tcp_new_port+0x88>)
 80116cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	603b      	str	r3, [r7, #0]
 80116d4:	e011      	b.n	80116fa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	8ada      	ldrh	r2, [r3, #22]
 80116da:	4b10      	ldr	r3, [pc, #64]	; (801171c <tcp_new_port+0x84>)
 80116dc:	881b      	ldrh	r3, [r3, #0]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d108      	bne.n	80116f4 <tcp_new_port+0x5c>
        n++;
 80116e2:	88bb      	ldrh	r3, [r7, #4]
 80116e4:	3301      	adds	r3, #1
 80116e6:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80116e8:	88bb      	ldrh	r3, [r7, #4]
 80116ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80116ee:	d3d8      	bcc.n	80116a2 <tcp_new_port+0xa>
          return 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	e00d      	b.n	8011710 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	68db      	ldr	r3, [r3, #12]
 80116f8:	603b      	str	r3, [r7, #0]
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d1ea      	bne.n	80116d6 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011700:	79fb      	ldrb	r3, [r7, #7]
 8011702:	3301      	adds	r3, #1
 8011704:	71fb      	strb	r3, [r7, #7]
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	2b03      	cmp	r3, #3
 801170a:	d9dd      	bls.n	80116c8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801170c:	4b03      	ldr	r3, [pc, #12]	; (801171c <tcp_new_port+0x84>)
 801170e:	881b      	ldrh	r3, [r3, #0]
}
 8011710:	4618      	mov	r0, r3
 8011712:	370c      	adds	r7, #12
 8011714:	46bd      	mov	sp, r7
 8011716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171a:	4770      	bx	lr
 801171c:	24000028 	.word	0x24000028
 8011720:	0801cb4c 	.word	0x0801cb4c

08011724 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011724:	b5b0      	push	{r4, r5, r7, lr}
 8011726:	b090      	sub	sp, #64	; 0x40
 8011728:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801172a:	2300      	movs	r3, #0
 801172c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011730:	4b94      	ldr	r3, [pc, #592]	; (8011984 <tcp_slowtmr+0x260>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	3301      	adds	r3, #1
 8011736:	4a93      	ldr	r2, [pc, #588]	; (8011984 <tcp_slowtmr+0x260>)
 8011738:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801173a:	4b93      	ldr	r3, [pc, #588]	; (8011988 <tcp_slowtmr+0x264>)
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	3301      	adds	r3, #1
 8011740:	b2da      	uxtb	r2, r3
 8011742:	4b91      	ldr	r3, [pc, #580]	; (8011988 <tcp_slowtmr+0x264>)
 8011744:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011746:	2300      	movs	r3, #0
 8011748:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801174a:	4b90      	ldr	r3, [pc, #576]	; (801198c <tcp_slowtmr+0x268>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011750:	e29d      	b.n	8011c8e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011754:	7d1b      	ldrb	r3, [r3, #20]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d106      	bne.n	8011768 <tcp_slowtmr+0x44>
 801175a:	4b8d      	ldr	r3, [pc, #564]	; (8011990 <tcp_slowtmr+0x26c>)
 801175c:	f240 42be 	movw	r2, #1214	; 0x4be
 8011760:	498c      	ldr	r1, [pc, #560]	; (8011994 <tcp_slowtmr+0x270>)
 8011762:	488d      	ldr	r0, [pc, #564]	; (8011998 <tcp_slowtmr+0x274>)
 8011764:	f006 fad6 	bl	8017d14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176a:	7d1b      	ldrb	r3, [r3, #20]
 801176c:	2b01      	cmp	r3, #1
 801176e:	d106      	bne.n	801177e <tcp_slowtmr+0x5a>
 8011770:	4b87      	ldr	r3, [pc, #540]	; (8011990 <tcp_slowtmr+0x26c>)
 8011772:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011776:	4989      	ldr	r1, [pc, #548]	; (801199c <tcp_slowtmr+0x278>)
 8011778:	4887      	ldr	r0, [pc, #540]	; (8011998 <tcp_slowtmr+0x274>)
 801177a:	f006 facb 	bl	8017d14 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801177e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011780:	7d1b      	ldrb	r3, [r3, #20]
 8011782:	2b0a      	cmp	r3, #10
 8011784:	d106      	bne.n	8011794 <tcp_slowtmr+0x70>
 8011786:	4b82      	ldr	r3, [pc, #520]	; (8011990 <tcp_slowtmr+0x26c>)
 8011788:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801178c:	4984      	ldr	r1, [pc, #528]	; (80119a0 <tcp_slowtmr+0x27c>)
 801178e:	4882      	ldr	r0, [pc, #520]	; (8011998 <tcp_slowtmr+0x274>)
 8011790:	f006 fac0 	bl	8017d14 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011796:	7f9a      	ldrb	r2, [r3, #30]
 8011798:	4b7b      	ldr	r3, [pc, #492]	; (8011988 <tcp_slowtmr+0x264>)
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	429a      	cmp	r2, r3
 801179e:	d105      	bne.n	80117ac <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80117a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80117a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80117aa:	e270      	b.n	8011c8e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80117ac:	4b76      	ldr	r3, [pc, #472]	; (8011988 <tcp_slowtmr+0x264>)
 80117ae:	781a      	ldrb	r2, [r3, #0]
 80117b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80117b4:	2300      	movs	r3, #0
 80117b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80117ba:	2300      	movs	r3, #0
 80117bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	7d1b      	ldrb	r3, [r3, #20]
 80117c4:	2b02      	cmp	r3, #2
 80117c6:	d10a      	bne.n	80117de <tcp_slowtmr+0xba>
 80117c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117ce:	2b05      	cmp	r3, #5
 80117d0:	d905      	bls.n	80117de <tcp_slowtmr+0xba>
      ++pcb_remove;
 80117d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117d6:	3301      	adds	r3, #1
 80117d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117dc:	e11e      	b.n	8011a1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80117de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117e4:	2b0b      	cmp	r3, #11
 80117e6:	d905      	bls.n	80117f4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80117e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117ec:	3301      	adds	r3, #1
 80117ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117f2:	e113      	b.n	8011a1c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80117f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d075      	beq.n	80118ea <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80117fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011802:	2b00      	cmp	r3, #0
 8011804:	d006      	beq.n	8011814 <tcp_slowtmr+0xf0>
 8011806:	4b62      	ldr	r3, [pc, #392]	; (8011990 <tcp_slowtmr+0x26c>)
 8011808:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801180c:	4965      	ldr	r1, [pc, #404]	; (80119a4 <tcp_slowtmr+0x280>)
 801180e:	4862      	ldr	r0, [pc, #392]	; (8011998 <tcp_slowtmr+0x274>)
 8011810:	f006 fa80 	bl	8017d14 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011818:	2b00      	cmp	r3, #0
 801181a:	d106      	bne.n	801182a <tcp_slowtmr+0x106>
 801181c:	4b5c      	ldr	r3, [pc, #368]	; (8011990 <tcp_slowtmr+0x26c>)
 801181e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011822:	4961      	ldr	r1, [pc, #388]	; (80119a8 <tcp_slowtmr+0x284>)
 8011824:	485c      	ldr	r0, [pc, #368]	; (8011998 <tcp_slowtmr+0x274>)
 8011826:	f006 fa75 	bl	8017d14 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011830:	2b0b      	cmp	r3, #11
 8011832:	d905      	bls.n	8011840 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011838:	3301      	adds	r3, #1
 801183a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801183e:	e0ed      	b.n	8011a1c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011842:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011846:	3b01      	subs	r3, #1
 8011848:	4a58      	ldr	r2, [pc, #352]	; (80119ac <tcp_slowtmr+0x288>)
 801184a:	5cd3      	ldrb	r3, [r2, r3]
 801184c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801184e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011850:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011854:	7c7a      	ldrb	r2, [r7, #17]
 8011856:	429a      	cmp	r2, r3
 8011858:	d907      	bls.n	801186a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011860:	3301      	adds	r3, #1
 8011862:	b2da      	uxtb	r2, r3
 8011864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011866:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801186a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011870:	7c7a      	ldrb	r2, [r7, #17]
 8011872:	429a      	cmp	r2, r3
 8011874:	f200 80d2 	bhi.w	8011a1c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011878:	2301      	movs	r3, #1
 801187a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801187c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011882:	2b00      	cmp	r3, #0
 8011884:	d108      	bne.n	8011898 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011888:	f005 f952 	bl	8016b30 <tcp_zero_window_probe>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d014      	beq.n	80118bc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011892:	2300      	movs	r3, #0
 8011894:	623b      	str	r3, [r7, #32]
 8011896:	e011      	b.n	80118bc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801189e:	4619      	mov	r1, r3
 80118a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118a2:	f004 f817 	bl	80158d4 <tcp_split_unsent_seg>
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d107      	bne.n	80118bc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80118ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118ae:	f004 fa97 	bl	8015de0 <tcp_output>
 80118b2:	4603      	mov	r3, r0
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d101      	bne.n	80118bc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80118bc:	6a3b      	ldr	r3, [r7, #32]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	f000 80ac 	beq.w	8011a1c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80118c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c6:	2200      	movs	r2, #0
 80118c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80118cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118d2:	2b06      	cmp	r3, #6
 80118d4:	f200 80a2 	bhi.w	8011a1c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80118d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118de:	3301      	adds	r3, #1
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118e4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80118e8:	e098      	b.n	8011a1c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80118ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	db0f      	blt.n	8011914 <tcp_slowtmr+0x1f0>
 80118f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80118fe:	4293      	cmp	r3, r2
 8011900:	d008      	beq.n	8011914 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011904:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011908:	b29b      	uxth	r3, r3
 801190a:	3301      	adds	r3, #1
 801190c:	b29b      	uxth	r3, r3
 801190e:	b21a      	sxth	r2, r3
 8011910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011912:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011916:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011920:	429a      	cmp	r2, r3
 8011922:	db7b      	blt.n	8011a1c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011926:	f004 fd4d 	bl	80163c4 <tcp_rexmit_rto_prepare>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d007      	beq.n	8011940 <tcp_slowtmr+0x21c>
 8011930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011934:	2b00      	cmp	r3, #0
 8011936:	d171      	bne.n	8011a1c <tcp_slowtmr+0x2f8>
 8011938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801193a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801193c:	2b00      	cmp	r3, #0
 801193e:	d06d      	beq.n	8011a1c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011942:	7d1b      	ldrb	r3, [r3, #20]
 8011944:	2b02      	cmp	r3, #2
 8011946:	d03a      	beq.n	80119be <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801194e:	2b0c      	cmp	r3, #12
 8011950:	bf28      	it	cs
 8011952:	230c      	movcs	r3, #12
 8011954:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011958:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801195c:	10db      	asrs	r3, r3, #3
 801195e:	b21b      	sxth	r3, r3
 8011960:	461a      	mov	r2, r3
 8011962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011964:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011968:	4413      	add	r3, r2
 801196a:	7efa      	ldrb	r2, [r7, #27]
 801196c:	4910      	ldr	r1, [pc, #64]	; (80119b0 <tcp_slowtmr+0x28c>)
 801196e:	5c8a      	ldrb	r2, [r1, r2]
 8011970:	4093      	lsls	r3, r2
 8011972:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801197a:	4293      	cmp	r3, r2
 801197c:	dc1a      	bgt.n	80119b4 <tcp_slowtmr+0x290>
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	b21a      	sxth	r2, r3
 8011982:	e019      	b.n	80119b8 <tcp_slowtmr+0x294>
 8011984:	2400f228 	.word	0x2400f228
 8011988:	2400f23e 	.word	0x2400f23e
 801198c:	2400f234 	.word	0x2400f234
 8011990:	0801af4c 	.word	0x0801af4c
 8011994:	0801b2d8 	.word	0x0801b2d8
 8011998:	0801afd8 	.word	0x0801afd8
 801199c:	0801b304 	.word	0x0801b304
 80119a0:	0801b330 	.word	0x0801b330
 80119a4:	0801b360 	.word	0x0801b360
 80119a8:	0801b394 	.word	0x0801b394
 80119ac:	0801cb44 	.word	0x0801cb44
 80119b0:	0801cb34 	.word	0x0801cb34
 80119b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80119b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	2200      	movs	r2, #0
 80119c2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80119c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80119ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119d0:	4293      	cmp	r3, r2
 80119d2:	bf28      	it	cs
 80119d4:	4613      	movcs	r3, r2
 80119d6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80119d8:	8a7b      	ldrh	r3, [r7, #18]
 80119da:	085b      	lsrs	r3, r3, #1
 80119dc:	b29a      	uxth	r2, r3
 80119de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80119e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80119ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119ee:	005b      	lsls	r3, r3, #1
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d206      	bcs.n	8011a04 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80119f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119fa:	005b      	lsls	r3, r3, #1
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8011a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a06:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8011a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8011a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a10:	2200      	movs	r2, #0
 8011a12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8011a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a18:	f004 fd44 	bl	80164a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1e:	7d1b      	ldrb	r3, [r3, #20]
 8011a20:	2b06      	cmp	r3, #6
 8011a22:	d111      	bne.n	8011a48 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a26:	8b5b      	ldrh	r3, [r3, #26]
 8011a28:	f003 0310 	and.w	r3, r3, #16
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d00b      	beq.n	8011a48 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a30:	4b9c      	ldr	r3, [pc, #624]	; (8011ca4 <tcp_slowtmr+0x580>)
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a36:	6a1b      	ldr	r3, [r3, #32]
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	2b28      	cmp	r3, #40	; 0x28
 8011a3c:	d904      	bls.n	8011a48 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a42:	3301      	adds	r3, #1
 8011a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a4a:	7a5b      	ldrb	r3, [r3, #9]
 8011a4c:	f003 0308 	and.w	r3, r3, #8
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d04a      	beq.n	8011aea <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8011a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a56:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a58:	2b04      	cmp	r3, #4
 8011a5a:	d003      	beq.n	8011a64 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a5e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011a60:	2b07      	cmp	r3, #7
 8011a62:	d142      	bne.n	8011aea <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a64:	4b8f      	ldr	r3, [pc, #572]	; (8011ca4 <tcp_slowtmr+0x580>)
 8011a66:	681a      	ldr	r2, [r3, #0]
 8011a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a6a:	6a1b      	ldr	r3, [r3, #32]
 8011a6c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a70:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011a74:	4b8c      	ldr	r3, [pc, #560]	; (8011ca8 <tcp_slowtmr+0x584>)
 8011a76:	440b      	add	r3, r1
 8011a78:	498c      	ldr	r1, [pc, #560]	; (8011cac <tcp_slowtmr+0x588>)
 8011a7a:	fba1 1303 	umull	r1, r3, r1, r3
 8011a7e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d90a      	bls.n	8011a9a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a88:	3301      	adds	r3, #1
 8011a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011a8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a92:	3301      	adds	r3, #1
 8011a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011a98:	e027      	b.n	8011aea <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a9a:	4b82      	ldr	r3, [pc, #520]	; (8011ca4 <tcp_slowtmr+0x580>)
 8011a9c:	681a      	ldr	r2, [r3, #0]
 8011a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa0:	6a1b      	ldr	r3, [r3, #32]
 8011aa2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	4b7f      	ldr	r3, [pc, #508]	; (8011cb0 <tcp_slowtmr+0x58c>)
 8011ab4:	fb00 f303 	mul.w	r3, r0, r3
 8011ab8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011aba:	497c      	ldr	r1, [pc, #496]	; (8011cac <tcp_slowtmr+0x588>)
 8011abc:	fba1 1303 	umull	r1, r3, r1, r3
 8011ac0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d911      	bls.n	8011aea <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8011ac6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ac8:	f004 fff2 	bl	8016ab0 <tcp_keepalive>
 8011acc:	4603      	mov	r3, r0
 8011ace:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011ad2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d107      	bne.n	8011aea <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011adc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011ae0:	3301      	adds	r3, #1
 8011ae2:	b2da      	uxtb	r2, r3
 8011ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d011      	beq.n	8011b16 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011af2:	4b6c      	ldr	r3, [pc, #432]	; (8011ca4 <tcp_slowtmr+0x580>)
 8011af4:	681a      	ldr	r2, [r3, #0]
 8011af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af8:	6a1b      	ldr	r3, [r3, #32]
 8011afa:	1ad2      	subs	r2, r2, r3
 8011afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011afe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011b02:	4619      	mov	r1, r3
 8011b04:	460b      	mov	r3, r1
 8011b06:	005b      	lsls	r3, r3, #1
 8011b08:	440b      	add	r3, r1
 8011b0a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d302      	bcc.n	8011b16 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b12:	f000 fead 	bl	8012870 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b18:	7d1b      	ldrb	r3, [r3, #20]
 8011b1a:	2b03      	cmp	r3, #3
 8011b1c:	d10b      	bne.n	8011b36 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b1e:	4b61      	ldr	r3, [pc, #388]	; (8011ca4 <tcp_slowtmr+0x580>)
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b24:	6a1b      	ldr	r3, [r3, #32]
 8011b26:	1ad3      	subs	r3, r2, r3
 8011b28:	2b28      	cmp	r3, #40	; 0x28
 8011b2a:	d904      	bls.n	8011b36 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b30:	3301      	adds	r3, #1
 8011b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b38:	7d1b      	ldrb	r3, [r3, #20]
 8011b3a:	2b09      	cmp	r3, #9
 8011b3c:	d10b      	bne.n	8011b56 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011b3e:	4b59      	ldr	r3, [pc, #356]	; (8011ca4 <tcp_slowtmr+0x580>)
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b44:	6a1b      	ldr	r3, [r3, #32]
 8011b46:	1ad3      	subs	r3, r2, r3
 8011b48:	2bf0      	cmp	r3, #240	; 0xf0
 8011b4a:	d904      	bls.n	8011b56 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b50:	3301      	adds	r3, #1
 8011b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d060      	beq.n	8011c20 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b64:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011b66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b68:	f000 fcce 	bl	8012508 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d010      	beq.n	8011b94 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011b72:	4b50      	ldr	r3, [pc, #320]	; (8011cb4 <tcp_slowtmr+0x590>)
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b78:	429a      	cmp	r2, r3
 8011b7a:	d106      	bne.n	8011b8a <tcp_slowtmr+0x466>
 8011b7c:	4b4e      	ldr	r3, [pc, #312]	; (8011cb8 <tcp_slowtmr+0x594>)
 8011b7e:	f240 526d 	movw	r2, #1389	; 0x56d
 8011b82:	494e      	ldr	r1, [pc, #312]	; (8011cbc <tcp_slowtmr+0x598>)
 8011b84:	484e      	ldr	r0, [pc, #312]	; (8011cc0 <tcp_slowtmr+0x59c>)
 8011b86:	f006 f8c5 	bl	8017d14 <iprintf>
        prev->next = pcb->next;
 8011b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8c:	68da      	ldr	r2, [r3, #12]
 8011b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b90:	60da      	str	r2, [r3, #12]
 8011b92:	e00f      	b.n	8011bb4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011b94:	4b47      	ldr	r3, [pc, #284]	; (8011cb4 <tcp_slowtmr+0x590>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d006      	beq.n	8011bac <tcp_slowtmr+0x488>
 8011b9e:	4b46      	ldr	r3, [pc, #280]	; (8011cb8 <tcp_slowtmr+0x594>)
 8011ba0:	f240 5271 	movw	r2, #1393	; 0x571
 8011ba4:	4947      	ldr	r1, [pc, #284]	; (8011cc4 <tcp_slowtmr+0x5a0>)
 8011ba6:	4846      	ldr	r0, [pc, #280]	; (8011cc0 <tcp_slowtmr+0x59c>)
 8011ba8:	f006 f8b4 	bl	8017d14 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	68db      	ldr	r3, [r3, #12]
 8011bb0:	4a40      	ldr	r2, [pc, #256]	; (8011cb4 <tcp_slowtmr+0x590>)
 8011bb2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011bb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d013      	beq.n	8011be4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bbe:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011bc4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc8:	3304      	adds	r3, #4
 8011bca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bcc:	8ad2      	ldrh	r2, [r2, #22]
 8011bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bd0:	8b09      	ldrh	r1, [r1, #24]
 8011bd2:	9102      	str	r1, [sp, #8]
 8011bd4:	9201      	str	r2, [sp, #4]
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	462b      	mov	r3, r5
 8011bda:	4622      	mov	r2, r4
 8011bdc:	4601      	mov	r1, r0
 8011bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011be0:	f004 feb2 	bl	8016948 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be6:	691b      	ldr	r3, [r3, #16]
 8011be8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bec:	7d1b      	ldrb	r3, [r3, #20]
 8011bee:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bf6:	68db      	ldr	r3, [r3, #12]
 8011bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011bfa:	6838      	ldr	r0, [r7, #0]
 8011bfc:	f7fe ffee 	bl	8010bdc <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011c00:	4b31      	ldr	r3, [pc, #196]	; (8011cc8 <tcp_slowtmr+0x5a4>)
 8011c02:	2200      	movs	r2, #0
 8011c04:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d004      	beq.n	8011c16 <tcp_slowtmr+0x4f2>
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f06f 010c 	mvn.w	r1, #12
 8011c12:	68b8      	ldr	r0, [r7, #8]
 8011c14:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011c16:	4b2c      	ldr	r3, [pc, #176]	; (8011cc8 <tcp_slowtmr+0x5a4>)
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d037      	beq.n	8011c8e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8011c1e:	e592      	b.n	8011746 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c2c:	7f1b      	ldrb	r3, [r3, #28]
 8011c2e:	3301      	adds	r3, #1
 8011c30:	b2da      	uxtb	r2, r3
 8011c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c34:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c38:	7f1a      	ldrb	r2, [r3, #28]
 8011c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3c:	7f5b      	ldrb	r3, [r3, #29]
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d325      	bcc.n	8011c8e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8011c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c44:	2200      	movs	r2, #0
 8011c46:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011c48:	4b1f      	ldr	r3, [pc, #124]	; (8011cc8 <tcp_slowtmr+0x5a4>)
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d00b      	beq.n	8011c70 <tcp_slowtmr+0x54c>
 8011c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c60:	6912      	ldr	r2, [r2, #16]
 8011c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c64:	4610      	mov	r0, r2
 8011c66:	4798      	blx	r3
 8011c68:	4603      	mov	r3, r0
 8011c6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011c6e:	e002      	b.n	8011c76 <tcp_slowtmr+0x552>
 8011c70:	2300      	movs	r3, #0
 8011c72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011c76:	4b14      	ldr	r3, [pc, #80]	; (8011cc8 <tcp_slowtmr+0x5a4>)
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d000      	beq.n	8011c80 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011c7e:	e562      	b.n	8011746 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011c80:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d102      	bne.n	8011c8e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c8a:	f004 f8a9 	bl	8015de0 <tcp_output>
  while (pcb != NULL) {
 8011c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f47f ad5e 	bne.w	8011752 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011c96:	2300      	movs	r3, #0
 8011c98:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011c9a:	4b0c      	ldr	r3, [pc, #48]	; (8011ccc <tcp_slowtmr+0x5a8>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011ca0:	e069      	b.n	8011d76 <tcp_slowtmr+0x652>
 8011ca2:	bf00      	nop
 8011ca4:	2400f228 	.word	0x2400f228
 8011ca8:	000a4cb8 	.word	0x000a4cb8
 8011cac:	10624dd3 	.word	0x10624dd3
 8011cb0:	000124f8 	.word	0x000124f8
 8011cb4:	2400f234 	.word	0x2400f234
 8011cb8:	0801af4c 	.word	0x0801af4c
 8011cbc:	0801b3cc 	.word	0x0801b3cc
 8011cc0:	0801afd8 	.word	0x0801afd8
 8011cc4:	0801b3f8 	.word	0x0801b3f8
 8011cc8:	2400f23c 	.word	0x2400f23c
 8011ccc:	2400f238 	.word	0x2400f238
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cd2:	7d1b      	ldrb	r3, [r3, #20]
 8011cd4:	2b0a      	cmp	r3, #10
 8011cd6:	d006      	beq.n	8011ce6 <tcp_slowtmr+0x5c2>
 8011cd8:	4b2b      	ldr	r3, [pc, #172]	; (8011d88 <tcp_slowtmr+0x664>)
 8011cda:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011cde:	492b      	ldr	r1, [pc, #172]	; (8011d8c <tcp_slowtmr+0x668>)
 8011ce0:	482b      	ldr	r0, [pc, #172]	; (8011d90 <tcp_slowtmr+0x66c>)
 8011ce2:	f006 f817 	bl	8017d14 <iprintf>
    pcb_remove = 0;
 8011ce6:	2300      	movs	r3, #0
 8011ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011cec:	4b29      	ldr	r3, [pc, #164]	; (8011d94 <tcp_slowtmr+0x670>)
 8011cee:	681a      	ldr	r2, [r3, #0]
 8011cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cf2:	6a1b      	ldr	r3, [r3, #32]
 8011cf4:	1ad3      	subs	r3, r2, r3
 8011cf6:	2bf0      	cmp	r3, #240	; 0xf0
 8011cf8:	d904      	bls.n	8011d04 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cfe:	3301      	adds	r3, #1
 8011d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d02f      	beq.n	8011d6c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d0e:	f000 fbfb 	bl	8012508 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d010      	beq.n	8011d3a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011d18:	4b1f      	ldr	r3, [pc, #124]	; (8011d98 <tcp_slowtmr+0x674>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d106      	bne.n	8011d30 <tcp_slowtmr+0x60c>
 8011d22:	4b19      	ldr	r3, [pc, #100]	; (8011d88 <tcp_slowtmr+0x664>)
 8011d24:	f240 52af 	movw	r2, #1455	; 0x5af
 8011d28:	491c      	ldr	r1, [pc, #112]	; (8011d9c <tcp_slowtmr+0x678>)
 8011d2a:	4819      	ldr	r0, [pc, #100]	; (8011d90 <tcp_slowtmr+0x66c>)
 8011d2c:	f005 fff2 	bl	8017d14 <iprintf>
        prev->next = pcb->next;
 8011d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d32:	68da      	ldr	r2, [r3, #12]
 8011d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d36:	60da      	str	r2, [r3, #12]
 8011d38:	e00f      	b.n	8011d5a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011d3a:	4b17      	ldr	r3, [pc, #92]	; (8011d98 <tcp_slowtmr+0x674>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d006      	beq.n	8011d52 <tcp_slowtmr+0x62e>
 8011d44:	4b10      	ldr	r3, [pc, #64]	; (8011d88 <tcp_slowtmr+0x664>)
 8011d46:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011d4a:	4915      	ldr	r1, [pc, #84]	; (8011da0 <tcp_slowtmr+0x67c>)
 8011d4c:	4810      	ldr	r0, [pc, #64]	; (8011d90 <tcp_slowtmr+0x66c>)
 8011d4e:	f005 ffe1 	bl	8017d14 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d54:	68db      	ldr	r3, [r3, #12]
 8011d56:	4a10      	ldr	r2, [pc, #64]	; (8011d98 <tcp_slowtmr+0x674>)
 8011d58:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d60:	68db      	ldr	r3, [r3, #12]
 8011d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d64:	69f8      	ldr	r0, [r7, #28]
 8011d66:	f7fe ff39 	bl	8010bdc <tcp_free>
 8011d6a:	e004      	b.n	8011d76 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d72:	68db      	ldr	r3, [r3, #12]
 8011d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d1a9      	bne.n	8011cd0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011d7c:	bf00      	nop
 8011d7e:	bf00      	nop
 8011d80:	3730      	adds	r7, #48	; 0x30
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bdb0      	pop	{r4, r5, r7, pc}
 8011d86:	bf00      	nop
 8011d88:	0801af4c 	.word	0x0801af4c
 8011d8c:	0801b424 	.word	0x0801b424
 8011d90:	0801afd8 	.word	0x0801afd8
 8011d94:	2400f228 	.word	0x2400f228
 8011d98:	2400f238 	.word	0x2400f238
 8011d9c:	0801b454 	.word	0x0801b454
 8011da0:	0801b47c 	.word	0x0801b47c

08011da4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011daa:	4b2d      	ldr	r3, [pc, #180]	; (8011e60 <tcp_fasttmr+0xbc>)
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	3301      	adds	r3, #1
 8011db0:	b2da      	uxtb	r2, r3
 8011db2:	4b2b      	ldr	r3, [pc, #172]	; (8011e60 <tcp_fasttmr+0xbc>)
 8011db4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011db6:	4b2b      	ldr	r3, [pc, #172]	; (8011e64 <tcp_fasttmr+0xc0>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011dbc:	e048      	b.n	8011e50 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	7f9a      	ldrb	r2, [r3, #30]
 8011dc2:	4b27      	ldr	r3, [pc, #156]	; (8011e60 <tcp_fasttmr+0xbc>)
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d03f      	beq.n	8011e4a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011dca:	4b25      	ldr	r3, [pc, #148]	; (8011e60 <tcp_fasttmr+0xbc>)
 8011dcc:	781a      	ldrb	r2, [r3, #0]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	8b5b      	ldrh	r3, [r3, #26]
 8011dd6:	f003 0301 	and.w	r3, r3, #1
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d010      	beq.n	8011e00 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	8b5b      	ldrh	r3, [r3, #26]
 8011de2:	f043 0302 	orr.w	r3, r3, #2
 8011de6:	b29a      	uxth	r2, r3
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f003 fff7 	bl	8015de0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	8b5b      	ldrh	r3, [r3, #26]
 8011df6:	f023 0303 	bic.w	r3, r3, #3
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	8b5b      	ldrh	r3, [r3, #26]
 8011e04:	f003 0308 	and.w	r3, r3, #8
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d009      	beq.n	8011e20 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	8b5b      	ldrh	r3, [r3, #26]
 8011e10:	f023 0308 	bic.w	r3, r3, #8
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7ff f872 	bl	8010f04 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	68db      	ldr	r3, [r3, #12]
 8011e24:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d00a      	beq.n	8011e44 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011e2e:	4b0e      	ldr	r3, [pc, #56]	; (8011e68 <tcp_fasttmr+0xc4>)
 8011e30:	2200      	movs	r2, #0
 8011e32:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011e34:	6878      	ldr	r0, [r7, #4]
 8011e36:	f000 f819 	bl	8011e6c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011e3a:	4b0b      	ldr	r3, [pc, #44]	; (8011e68 <tcp_fasttmr+0xc4>)
 8011e3c:	781b      	ldrb	r3, [r3, #0]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d000      	beq.n	8011e44 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011e42:	e7b8      	b.n	8011db6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	607b      	str	r3, [r7, #4]
 8011e48:	e002      	b.n	8011e50 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1b3      	bne.n	8011dbe <tcp_fasttmr+0x1a>
    }
  }
}
 8011e56:	bf00      	nop
 8011e58:	bf00      	nop
 8011e5a:	3708      	adds	r7, #8
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	2400f23e 	.word	0x2400f23e
 8011e64:	2400f234 	.word	0x2400f234
 8011e68:	2400f23c 	.word	0x2400f23c

08011e6c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011e6c:	b590      	push	{r4, r7, lr}
 8011e6e:	b085      	sub	sp, #20
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d109      	bne.n	8011e8e <tcp_process_refused_data+0x22>
 8011e7a:	4b38      	ldr	r3, [pc, #224]	; (8011f5c <tcp_process_refused_data+0xf0>)
 8011e7c:	f240 6209 	movw	r2, #1545	; 0x609
 8011e80:	4937      	ldr	r1, [pc, #220]	; (8011f60 <tcp_process_refused_data+0xf4>)
 8011e82:	4838      	ldr	r0, [pc, #224]	; (8011f64 <tcp_process_refused_data+0xf8>)
 8011e84:	f005 ff46 	bl	8017d14 <iprintf>
 8011e88:	f06f 030f 	mvn.w	r3, #15
 8011e8c:	e061      	b.n	8011f52 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e92:	7b5b      	ldrb	r3, [r3, #13]
 8011e94:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e9a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00b      	beq.n	8011ec4 <tcp_process_refused_data+0x58>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6918      	ldr	r0, [r3, #16]
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	6879      	ldr	r1, [r7, #4]
 8011ebc:	47a0      	blx	r4
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	73fb      	strb	r3, [r7, #15]
 8011ec2:	e007      	b.n	8011ed4 <tcp_process_refused_data+0x68>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	68ba      	ldr	r2, [r7, #8]
 8011ec8:	6879      	ldr	r1, [r7, #4]
 8011eca:	2000      	movs	r0, #0
 8011ecc:	f000 f8a6 	bl	801201c <tcp_recv_null>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d12b      	bne.n	8011f34 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011edc:	7bbb      	ldrb	r3, [r7, #14]
 8011ede:	f003 0320 	and.w	r3, r3, #32
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d034      	beq.n	8011f50 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011eea:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011eee:	4293      	cmp	r3, r2
 8011ef0:	d005      	beq.n	8011efe <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ef6:	3301      	adds	r3, #1
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d00b      	beq.n	8011f20 <tcp_process_refused_data+0xb4>
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6918      	ldr	r0, [r3, #16]
 8011f12:	2300      	movs	r3, #0
 8011f14:	2200      	movs	r2, #0
 8011f16:	6879      	ldr	r1, [r7, #4]
 8011f18:	47a0      	blx	r4
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	73fb      	strb	r3, [r7, #15]
 8011f1e:	e001      	b.n	8011f24 <tcp_process_refused_data+0xb8>
 8011f20:	2300      	movs	r3, #0
 8011f22:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f28:	f113 0f0d 	cmn.w	r3, #13
 8011f2c:	d110      	bne.n	8011f50 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8011f2e:	f06f 030c 	mvn.w	r3, #12
 8011f32:	e00e      	b.n	8011f52 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8011f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f38:	f113 0f0d 	cmn.w	r3, #13
 8011f3c:	d102      	bne.n	8011f44 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011f3e:	f06f 030c 	mvn.w	r3, #12
 8011f42:	e006      	b.n	8011f52 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	68ba      	ldr	r2, [r7, #8]
 8011f48:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011f4a:	f06f 0304 	mvn.w	r3, #4
 8011f4e:	e000      	b.n	8011f52 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8011f50:	2300      	movs	r3, #0
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	3714      	adds	r7, #20
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd90      	pop	{r4, r7, pc}
 8011f5a:	bf00      	nop
 8011f5c:	0801af4c 	.word	0x0801af4c
 8011f60:	0801b4a4 	.word	0x0801b4a4
 8011f64:	0801afd8 	.word	0x0801afd8

08011f68 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b084      	sub	sp, #16
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011f70:	e007      	b.n	8011f82 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f000 f80a 	bl	8011f92 <tcp_seg_free>
    seg = next;
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d1f4      	bne.n	8011f72 <tcp_segs_free+0xa>
  }
}
 8011f88:	bf00      	nop
 8011f8a:	bf00      	nop
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}

08011f92 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011f92:	b580      	push	{r7, lr}
 8011f94:	b082      	sub	sp, #8
 8011f96:	af00      	add	r7, sp, #0
 8011f98:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00c      	beq.n	8011fba <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	685b      	ldr	r3, [r3, #4]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d004      	beq.n	8011fb2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7fe f987 	bl	80102c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011fb2:	6879      	ldr	r1, [r7, #4]
 8011fb4:	2003      	movs	r0, #3
 8011fb6:	f7fd fa8f 	bl	800f4d8 <memp_free>
  }
}
 8011fba:	bf00      	nop
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
	...

08011fc4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d106      	bne.n	8011fe0 <tcp_seg_copy+0x1c>
 8011fd2:	4b0f      	ldr	r3, [pc, #60]	; (8012010 <tcp_seg_copy+0x4c>)
 8011fd4:	f240 6282 	movw	r2, #1666	; 0x682
 8011fd8:	490e      	ldr	r1, [pc, #56]	; (8012014 <tcp_seg_copy+0x50>)
 8011fda:	480f      	ldr	r0, [pc, #60]	; (8012018 <tcp_seg_copy+0x54>)
 8011fdc:	f005 fe9a 	bl	8017d14 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011fe0:	2003      	movs	r0, #3
 8011fe2:	f7fd fa03 	bl	800f3ec <memp_malloc>
 8011fe6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d101      	bne.n	8011ff2 <tcp_seg_copy+0x2e>
    return NULL;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	e00a      	b.n	8012008 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011ff2:	2210      	movs	r2, #16
 8011ff4:	6879      	ldr	r1, [r7, #4]
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f005 fdc7 	bl	8017b8a <memcpy>
  pbuf_ref(cseg->p);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	685b      	ldr	r3, [r3, #4]
 8012000:	4618      	mov	r0, r3
 8012002:	f7fe fa03 	bl	801040c <pbuf_ref>
  return cseg;
 8012006:	68fb      	ldr	r3, [r7, #12]
}
 8012008:	4618      	mov	r0, r3
 801200a:	3710      	adds	r7, #16
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	0801af4c 	.word	0x0801af4c
 8012014:	0801b4e8 	.word	0x0801b4e8
 8012018:	0801afd8 	.word	0x0801afd8

0801201c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	af00      	add	r7, sp, #0
 8012022:	60f8      	str	r0, [r7, #12]
 8012024:	60b9      	str	r1, [r7, #8]
 8012026:	607a      	str	r2, [r7, #4]
 8012028:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d109      	bne.n	8012044 <tcp_recv_null+0x28>
 8012030:	4b12      	ldr	r3, [pc, #72]	; (801207c <tcp_recv_null+0x60>)
 8012032:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012036:	4912      	ldr	r1, [pc, #72]	; (8012080 <tcp_recv_null+0x64>)
 8012038:	4812      	ldr	r0, [pc, #72]	; (8012084 <tcp_recv_null+0x68>)
 801203a:	f005 fe6b 	bl	8017d14 <iprintf>
 801203e:	f06f 030f 	mvn.w	r3, #15
 8012042:	e016      	b.n	8012072 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d009      	beq.n	801205e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	891b      	ldrh	r3, [r3, #8]
 801204e:	4619      	mov	r1, r3
 8012050:	68b8      	ldr	r0, [r7, #8]
 8012052:	f7ff facf 	bl	80115f4 <tcp_recved>
    pbuf_free(p);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7fe f932 	bl	80102c0 <pbuf_free>
 801205c:	e008      	b.n	8012070 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801205e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d104      	bne.n	8012070 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012066:	68b8      	ldr	r0, [r7, #8]
 8012068:	f7fe ffb6 	bl	8010fd8 <tcp_close>
 801206c:	4603      	mov	r3, r0
 801206e:	e000      	b.n	8012072 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	0801af4c 	.word	0x0801af4c
 8012080:	0801b504 	.word	0x0801b504
 8012084:	0801afd8 	.word	0x0801afd8

08012088 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b086      	sub	sp, #24
 801208c:	af00      	add	r7, sp, #0
 801208e:	4603      	mov	r3, r0
 8012090:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012096:	2b00      	cmp	r3, #0
 8012098:	db01      	blt.n	801209e <tcp_kill_prio+0x16>
 801209a:	79fb      	ldrb	r3, [r7, #7]
 801209c:	e000      	b.n	80120a0 <tcp_kill_prio+0x18>
 801209e:	237f      	movs	r3, #127	; 0x7f
 80120a0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80120a2:	7afb      	ldrb	r3, [r7, #11]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d034      	beq.n	8012112 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80120a8:	7afb      	ldrb	r3, [r7, #11]
 80120aa:	3b01      	subs	r3, #1
 80120ac:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80120ae:	2300      	movs	r3, #0
 80120b0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80120b2:	2300      	movs	r3, #0
 80120b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120b6:	4b19      	ldr	r3, [pc, #100]	; (801211c <tcp_kill_prio+0x94>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	617b      	str	r3, [r7, #20]
 80120bc:	e01f      	b.n	80120fe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	7d5b      	ldrb	r3, [r3, #21]
 80120c2:	7afa      	ldrb	r2, [r7, #11]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d80c      	bhi.n	80120e2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120c8:	697b      	ldr	r3, [r7, #20]
 80120ca:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80120cc:	7afa      	ldrb	r2, [r7, #11]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d112      	bne.n	80120f8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120d2:	4b13      	ldr	r3, [pc, #76]	; (8012120 <tcp_kill_prio+0x98>)
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	6a1b      	ldr	r3, [r3, #32]
 80120da:	1ad3      	subs	r3, r2, r3
 80120dc:	68fa      	ldr	r2, [r7, #12]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d80a      	bhi.n	80120f8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80120e2:	4b0f      	ldr	r3, [pc, #60]	; (8012120 <tcp_kill_prio+0x98>)
 80120e4:	681a      	ldr	r2, [r3, #0]
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	6a1b      	ldr	r3, [r3, #32]
 80120ea:	1ad3      	subs	r3, r2, r3
 80120ec:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80120ee:	697b      	ldr	r3, [r7, #20]
 80120f0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	7d5b      	ldrb	r3, [r3, #21]
 80120f6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	68db      	ldr	r3, [r3, #12]
 80120fc:	617b      	str	r3, [r7, #20]
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d1dc      	bne.n	80120be <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d004      	beq.n	8012114 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801210a:	6938      	ldr	r0, [r7, #16]
 801210c:	f7ff f8aa 	bl	8011264 <tcp_abort>
 8012110:	e000      	b.n	8012114 <tcp_kill_prio+0x8c>
    return;
 8012112:	bf00      	nop
  }
}
 8012114:	3718      	adds	r7, #24
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	2400f234 	.word	0x2400f234
 8012120:	2400f228 	.word	0x2400f228

08012124 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b086      	sub	sp, #24
 8012128:	af00      	add	r7, sp, #0
 801212a:	4603      	mov	r3, r0
 801212c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801212e:	79fb      	ldrb	r3, [r7, #7]
 8012130:	2b08      	cmp	r3, #8
 8012132:	d009      	beq.n	8012148 <tcp_kill_state+0x24>
 8012134:	79fb      	ldrb	r3, [r7, #7]
 8012136:	2b09      	cmp	r3, #9
 8012138:	d006      	beq.n	8012148 <tcp_kill_state+0x24>
 801213a:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <tcp_kill_state+0x80>)
 801213c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012140:	4919      	ldr	r1, [pc, #100]	; (80121a8 <tcp_kill_state+0x84>)
 8012142:	481a      	ldr	r0, [pc, #104]	; (80121ac <tcp_kill_state+0x88>)
 8012144:	f005 fde6 	bl	8017d14 <iprintf>

  inactivity = 0;
 8012148:	2300      	movs	r3, #0
 801214a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801214c:	2300      	movs	r3, #0
 801214e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012150:	4b17      	ldr	r3, [pc, #92]	; (80121b0 <tcp_kill_state+0x8c>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	617b      	str	r3, [r7, #20]
 8012156:	e017      	b.n	8012188 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	7d1b      	ldrb	r3, [r3, #20]
 801215c:	79fa      	ldrb	r2, [r7, #7]
 801215e:	429a      	cmp	r2, r3
 8012160:	d10f      	bne.n	8012182 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012162:	4b14      	ldr	r3, [pc, #80]	; (80121b4 <tcp_kill_state+0x90>)
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	6a1b      	ldr	r3, [r3, #32]
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	68fa      	ldr	r2, [r7, #12]
 801216e:	429a      	cmp	r2, r3
 8012170:	d807      	bhi.n	8012182 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012172:	4b10      	ldr	r3, [pc, #64]	; (80121b4 <tcp_kill_state+0x90>)
 8012174:	681a      	ldr	r2, [r3, #0]
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	6a1b      	ldr	r3, [r3, #32]
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	68db      	ldr	r3, [r3, #12]
 8012186:	617b      	str	r3, [r7, #20]
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d1e4      	bne.n	8012158 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d003      	beq.n	801219c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012194:	2100      	movs	r1, #0
 8012196:	6938      	ldr	r0, [r7, #16]
 8012198:	f7fe ffa6 	bl	80110e8 <tcp_abandon>
  }
}
 801219c:	bf00      	nop
 801219e:	3718      	adds	r7, #24
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	0801af4c 	.word	0x0801af4c
 80121a8:	0801b520 	.word	0x0801b520
 80121ac:	0801afd8 	.word	0x0801afd8
 80121b0:	2400f234 	.word	0x2400f234
 80121b4:	2400f228 	.word	0x2400f228

080121b8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80121c2:	2300      	movs	r3, #0
 80121c4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121c6:	4b12      	ldr	r3, [pc, #72]	; (8012210 <tcp_kill_timewait+0x58>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	60fb      	str	r3, [r7, #12]
 80121cc:	e012      	b.n	80121f4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80121ce:	4b11      	ldr	r3, [pc, #68]	; (8012214 <tcp_kill_timewait+0x5c>)
 80121d0:	681a      	ldr	r2, [r3, #0]
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6a1b      	ldr	r3, [r3, #32]
 80121d6:	1ad3      	subs	r3, r2, r3
 80121d8:	687a      	ldr	r2, [r7, #4]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d807      	bhi.n	80121ee <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80121de:	4b0d      	ldr	r3, [pc, #52]	; (8012214 <tcp_kill_timewait+0x5c>)
 80121e0:	681a      	ldr	r2, [r3, #0]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	6a1b      	ldr	r3, [r3, #32]
 80121e6:	1ad3      	subs	r3, r2, r3
 80121e8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	60fb      	str	r3, [r7, #12]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d1e9      	bne.n	80121ce <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d002      	beq.n	8012206 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012200:	68b8      	ldr	r0, [r7, #8]
 8012202:	f7ff f82f 	bl	8011264 <tcp_abort>
  }
}
 8012206:	bf00      	nop
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	2400f238 	.word	0x2400f238
 8012214:	2400f228 	.word	0x2400f228

08012218 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801221e:	4b10      	ldr	r3, [pc, #64]	; (8012260 <tcp_handle_closepend+0x48>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012224:	e014      	b.n	8012250 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	68db      	ldr	r3, [r3, #12]
 801222a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	8b5b      	ldrh	r3, [r3, #26]
 8012230:	f003 0308 	and.w	r3, r3, #8
 8012234:	2b00      	cmp	r3, #0
 8012236:	d009      	beq.n	801224c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	8b5b      	ldrh	r3, [r3, #26]
 801223c:	f023 0308 	bic.w	r3, r3, #8
 8012240:	b29a      	uxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f7fe fe5c 	bl	8010f04 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d1e7      	bne.n	8012226 <tcp_handle_closepend+0xe>
  }
}
 8012256:	bf00      	nop
 8012258:	bf00      	nop
 801225a:	3708      	adds	r7, #8
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	2400f234 	.word	0x2400f234

08012264 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	4603      	mov	r3, r0
 801226c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801226e:	2001      	movs	r0, #1
 8012270:	f7fd f8bc 	bl	800f3ec <memp_malloc>
 8012274:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d126      	bne.n	80122ca <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801227c:	f7ff ffcc 	bl	8012218 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012280:	f7ff ff9a 	bl	80121b8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012284:	2001      	movs	r0, #1
 8012286:	f7fd f8b1 	bl	800f3ec <memp_malloc>
 801228a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d11b      	bne.n	80122ca <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012292:	2009      	movs	r0, #9
 8012294:	f7ff ff46 	bl	8012124 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012298:	2001      	movs	r0, #1
 801229a:	f7fd f8a7 	bl	800f3ec <memp_malloc>
 801229e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d111      	bne.n	80122ca <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80122a6:	2008      	movs	r0, #8
 80122a8:	f7ff ff3c 	bl	8012124 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122ac:	2001      	movs	r0, #1
 80122ae:	f7fd f89d 	bl	800f3ec <memp_malloc>
 80122b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d107      	bne.n	80122ca <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80122ba:	79fb      	ldrb	r3, [r7, #7]
 80122bc:	4618      	mov	r0, r3
 80122be:	f7ff fee3 	bl	8012088 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122c2:	2001      	movs	r0, #1
 80122c4:	f7fd f892 	bl	800f3ec <memp_malloc>
 80122c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d03f      	beq.n	8012350 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80122d0:	229c      	movs	r2, #156	; 0x9c
 80122d2:	2100      	movs	r1, #0
 80122d4:	68f8      	ldr	r0, [r7, #12]
 80122d6:	f005 fc80 	bl	8017bda <memset>
    pcb->prio = prio;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	79fa      	ldrb	r2, [r7, #7]
 80122de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80122e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80122f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	22ff      	movs	r2, #255	; 0xff
 80122fe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012306:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	2206      	movs	r2, #6
 801230c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	2206      	movs	r2, #6
 8012314:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801231c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	2201      	movs	r2, #1
 8012322:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012326:	4b0d      	ldr	r3, [pc, #52]	; (801235c <tcp_alloc+0xf8>)
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801232e:	4b0c      	ldr	r3, [pc, #48]	; (8012360 <tcp_alloc+0xfc>)
 8012330:	781a      	ldrb	r2, [r3, #0]
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801233c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	4a08      	ldr	r2, [pc, #32]	; (8012364 <tcp_alloc+0x100>)
 8012344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	4a07      	ldr	r2, [pc, #28]	; (8012368 <tcp_alloc+0x104>)
 801234c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012350:	68fb      	ldr	r3, [r7, #12]
}
 8012352:	4618      	mov	r0, r3
 8012354:	3710      	adds	r7, #16
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	2400f228 	.word	0x2400f228
 8012360:	2400f23e 	.word	0x2400f23e
 8012364:	0801201d 	.word	0x0801201d
 8012368:	006ddd00 	.word	0x006ddd00

0801236c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	4603      	mov	r3, r0
 8012374:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012376:	2040      	movs	r0, #64	; 0x40
 8012378:	f7ff ff74 	bl	8012264 <tcp_alloc>
 801237c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801237e:	68fb      	ldr	r3, [r7, #12]
}
 8012380:	4618      	mov	r0, r3
 8012382:	3710      	adds	r7, #16
 8012384:	46bd      	mov	sp, r7
 8012386:	bd80      	pop	{r7, pc}

08012388 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012388:	b480      	push	{r7}
 801238a:	b083      	sub	sp, #12
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d002      	beq.n	801239e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	683a      	ldr	r2, [r7, #0]
 801239c:	611a      	str	r2, [r3, #16]
  }
}
 801239e:	bf00      	nop
 80123a0:	370c      	adds	r7, #12
 80123a2:	46bd      	mov	sp, r7
 80123a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a8:	4770      	bx	lr
	...

080123ac <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b082      	sub	sp, #8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
 80123b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00e      	beq.n	80123da <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	7d1b      	ldrb	r3, [r3, #20]
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d106      	bne.n	80123d2 <tcp_recv+0x26>
 80123c4:	4b07      	ldr	r3, [pc, #28]	; (80123e4 <tcp_recv+0x38>)
 80123c6:	f240 72df 	movw	r2, #2015	; 0x7df
 80123ca:	4907      	ldr	r1, [pc, #28]	; (80123e8 <tcp_recv+0x3c>)
 80123cc:	4807      	ldr	r0, [pc, #28]	; (80123ec <tcp_recv+0x40>)
 80123ce:	f005 fca1 	bl	8017d14 <iprintf>
    pcb->recv = recv;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	683a      	ldr	r2, [r7, #0]
 80123d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80123da:	bf00      	nop
 80123dc:	3708      	adds	r7, #8
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	0801af4c 	.word	0x0801af4c
 80123e8:	0801b530 	.word	0x0801b530
 80123ec:	0801afd8 	.word	0x0801afd8

080123f0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d00e      	beq.n	801241e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	7d1b      	ldrb	r3, [r3, #20]
 8012404:	2b01      	cmp	r3, #1
 8012406:	d106      	bne.n	8012416 <tcp_sent+0x26>
 8012408:	4b07      	ldr	r3, [pc, #28]	; (8012428 <tcp_sent+0x38>)
 801240a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801240e:	4907      	ldr	r1, [pc, #28]	; (801242c <tcp_sent+0x3c>)
 8012410:	4807      	ldr	r0, [pc, #28]	; (8012430 <tcp_sent+0x40>)
 8012412:	f005 fc7f 	bl	8017d14 <iprintf>
    pcb->sent = sent;
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	683a      	ldr	r2, [r7, #0]
 801241a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801241e:	bf00      	nop
 8012420:	3708      	adds	r7, #8
 8012422:	46bd      	mov	sp, r7
 8012424:	bd80      	pop	{r7, pc}
 8012426:	bf00      	nop
 8012428:	0801af4c 	.word	0x0801af4c
 801242c:	0801b558 	.word	0x0801b558
 8012430:	0801afd8 	.word	0x0801afd8

08012434 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
 801243c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00e      	beq.n	8012462 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	7d1b      	ldrb	r3, [r3, #20]
 8012448:	2b01      	cmp	r3, #1
 801244a:	d106      	bne.n	801245a <tcp_err+0x26>
 801244c:	4b07      	ldr	r3, [pc, #28]	; (801246c <tcp_err+0x38>)
 801244e:	f640 020d 	movw	r2, #2061	; 0x80d
 8012452:	4907      	ldr	r1, [pc, #28]	; (8012470 <tcp_err+0x3c>)
 8012454:	4807      	ldr	r0, [pc, #28]	; (8012474 <tcp_err+0x40>)
 8012456:	f005 fc5d 	bl	8017d14 <iprintf>
    pcb->errf = err;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	683a      	ldr	r2, [r7, #0]
 801245e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8012462:	bf00      	nop
 8012464:	3708      	adds	r7, #8
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	0801af4c 	.word	0x0801af4c
 8012470:	0801b580 	.word	0x0801b580
 8012474:	0801afd8 	.word	0x0801afd8

08012478 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012478:	b480      	push	{r7}
 801247a:	b085      	sub	sp, #20
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d008      	beq.n	801249a <tcp_accept+0x22>
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	7d1b      	ldrb	r3, [r3, #20]
 801248c:	2b01      	cmp	r3, #1
 801248e:	d104      	bne.n	801249a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	683a      	ldr	r2, [r7, #0]
 8012498:	619a      	str	r2, [r3, #24]
  }
}
 801249a:	bf00      	nop
 801249c:	3714      	adds	r7, #20
 801249e:	46bd      	mov	sp, r7
 80124a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a4:	4770      	bx	lr
	...

080124a8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	4613      	mov	r3, r2
 80124b4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d107      	bne.n	80124cc <tcp_poll+0x24>
 80124bc:	4b0e      	ldr	r3, [pc, #56]	; (80124f8 <tcp_poll+0x50>)
 80124be:	f640 023d 	movw	r2, #2109	; 0x83d
 80124c2:	490e      	ldr	r1, [pc, #56]	; (80124fc <tcp_poll+0x54>)
 80124c4:	480e      	ldr	r0, [pc, #56]	; (8012500 <tcp_poll+0x58>)
 80124c6:	f005 fc25 	bl	8017d14 <iprintf>
 80124ca:	e011      	b.n	80124f0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	7d1b      	ldrb	r3, [r3, #20]
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	d106      	bne.n	80124e2 <tcp_poll+0x3a>
 80124d4:	4b08      	ldr	r3, [pc, #32]	; (80124f8 <tcp_poll+0x50>)
 80124d6:	f640 023e 	movw	r2, #2110	; 0x83e
 80124da:	490a      	ldr	r1, [pc, #40]	; (8012504 <tcp_poll+0x5c>)
 80124dc:	4808      	ldr	r0, [pc, #32]	; (8012500 <tcp_poll+0x58>)
 80124de:	f005 fc19 	bl	8017d14 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	68ba      	ldr	r2, [r7, #8]
 80124e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	79fa      	ldrb	r2, [r7, #7]
 80124ee:	775a      	strb	r2, [r3, #29]
}
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	0801af4c 	.word	0x0801af4c
 80124fc:	0801b5a8 	.word	0x0801b5a8
 8012500:	0801afd8 	.word	0x0801afd8
 8012504:	0801b5c0 	.word	0x0801b5c0

08012508 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d107      	bne.n	8012526 <tcp_pcb_purge+0x1e>
 8012516:	4b21      	ldr	r3, [pc, #132]	; (801259c <tcp_pcb_purge+0x94>)
 8012518:	f640 0251 	movw	r2, #2129	; 0x851
 801251c:	4920      	ldr	r1, [pc, #128]	; (80125a0 <tcp_pcb_purge+0x98>)
 801251e:	4821      	ldr	r0, [pc, #132]	; (80125a4 <tcp_pcb_purge+0x9c>)
 8012520:	f005 fbf8 	bl	8017d14 <iprintf>
 8012524:	e037      	b.n	8012596 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	7d1b      	ldrb	r3, [r3, #20]
 801252a:	2b00      	cmp	r3, #0
 801252c:	d033      	beq.n	8012596 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012532:	2b0a      	cmp	r3, #10
 8012534:	d02f      	beq.n	8012596 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801253a:	2b01      	cmp	r3, #1
 801253c:	d02b      	beq.n	8012596 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012542:	2b00      	cmp	r3, #0
 8012544:	d007      	beq.n	8012556 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801254a:	4618      	mov	r0, r3
 801254c:	f7fd feb8 	bl	80102c0 <pbuf_free>
      pcb->refused_data = NULL;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	2200      	movs	r2, #0
 8012554:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801255a:	2b00      	cmp	r3, #0
 801255c:	d002      	beq.n	8012564 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801255e:	6878      	ldr	r0, [r7, #4]
 8012560:	f000 f986 	bl	8012870 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801256a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012570:	4618      	mov	r0, r3
 8012572:	f7ff fcf9 	bl	8011f68 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801257a:	4618      	mov	r0, r3
 801257c:	f7ff fcf4 	bl	8011f68 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2200      	movs	r2, #0
 8012584:	66da      	str	r2, [r3, #108]	; 0x6c
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	2200      	movs	r2, #0
 8012592:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012596:	3708      	adds	r7, #8
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}
 801259c:	0801af4c 	.word	0x0801af4c
 80125a0:	0801b5e0 	.word	0x0801b5e0
 80125a4:	0801afd8 	.word	0x0801afd8

080125a8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
 80125b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80125b2:	683b      	ldr	r3, [r7, #0]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d106      	bne.n	80125c6 <tcp_pcb_remove+0x1e>
 80125b8:	4b3e      	ldr	r3, [pc, #248]	; (80126b4 <tcp_pcb_remove+0x10c>)
 80125ba:	f640 0283 	movw	r2, #2179	; 0x883
 80125be:	493e      	ldr	r1, [pc, #248]	; (80126b8 <tcp_pcb_remove+0x110>)
 80125c0:	483e      	ldr	r0, [pc, #248]	; (80126bc <tcp_pcb_remove+0x114>)
 80125c2:	f005 fba7 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d106      	bne.n	80125da <tcp_pcb_remove+0x32>
 80125cc:	4b39      	ldr	r3, [pc, #228]	; (80126b4 <tcp_pcb_remove+0x10c>)
 80125ce:	f640 0284 	movw	r2, #2180	; 0x884
 80125d2:	493b      	ldr	r1, [pc, #236]	; (80126c0 <tcp_pcb_remove+0x118>)
 80125d4:	4839      	ldr	r0, [pc, #228]	; (80126bc <tcp_pcb_remove+0x114>)
 80125d6:	f005 fb9d 	bl	8017d14 <iprintf>

  TCP_RMV(pcblist, pcb);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	683a      	ldr	r2, [r7, #0]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d105      	bne.n	80125f0 <tcp_pcb_remove+0x48>
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	681b      	ldr	r3, [r3, #0]
 80125e8:	68da      	ldr	r2, [r3, #12]
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	601a      	str	r2, [r3, #0]
 80125ee:	e013      	b.n	8012618 <tcp_pcb_remove+0x70>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	60fb      	str	r3, [r7, #12]
 80125f6:	e00c      	b.n	8012612 <tcp_pcb_remove+0x6a>
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	683a      	ldr	r2, [r7, #0]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d104      	bne.n	801260c <tcp_pcb_remove+0x64>
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	68da      	ldr	r2, [r3, #12]
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	60da      	str	r2, [r3, #12]
 801260a:	e005      	b.n	8012618 <tcp_pcb_remove+0x70>
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	60fb      	str	r3, [r7, #12]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d1ef      	bne.n	80125f8 <tcp_pcb_remove+0x50>
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	2200      	movs	r2, #0
 801261c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801261e:	6838      	ldr	r0, [r7, #0]
 8012620:	f7ff ff72 	bl	8012508 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	7d1b      	ldrb	r3, [r3, #20]
 8012628:	2b0a      	cmp	r3, #10
 801262a:	d013      	beq.n	8012654 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012630:	2b01      	cmp	r3, #1
 8012632:	d00f      	beq.n	8012654 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	8b5b      	ldrh	r3, [r3, #26]
 8012638:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801263c:	2b00      	cmp	r3, #0
 801263e:	d009      	beq.n	8012654 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	8b5b      	ldrh	r3, [r3, #26]
 8012644:	f043 0302 	orr.w	r3, r3, #2
 8012648:	b29a      	uxth	r2, r3
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801264e:	6838      	ldr	r0, [r7, #0]
 8012650:	f003 fbc6 	bl	8015de0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	7d1b      	ldrb	r3, [r3, #20]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d020      	beq.n	801269e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012660:	2b00      	cmp	r3, #0
 8012662:	d006      	beq.n	8012672 <tcp_pcb_remove+0xca>
 8012664:	4b13      	ldr	r3, [pc, #76]	; (80126b4 <tcp_pcb_remove+0x10c>)
 8012666:	f640 0293 	movw	r2, #2195	; 0x893
 801266a:	4916      	ldr	r1, [pc, #88]	; (80126c4 <tcp_pcb_remove+0x11c>)
 801266c:	4813      	ldr	r0, [pc, #76]	; (80126bc <tcp_pcb_remove+0x114>)
 801266e:	f005 fb51 	bl	8017d14 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012676:	2b00      	cmp	r3, #0
 8012678:	d006      	beq.n	8012688 <tcp_pcb_remove+0xe0>
 801267a:	4b0e      	ldr	r3, [pc, #56]	; (80126b4 <tcp_pcb_remove+0x10c>)
 801267c:	f640 0294 	movw	r2, #2196	; 0x894
 8012680:	4911      	ldr	r1, [pc, #68]	; (80126c8 <tcp_pcb_remove+0x120>)
 8012682:	480e      	ldr	r0, [pc, #56]	; (80126bc <tcp_pcb_remove+0x114>)
 8012684:	f005 fb46 	bl	8017d14 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801268c:	2b00      	cmp	r3, #0
 801268e:	d006      	beq.n	801269e <tcp_pcb_remove+0xf6>
 8012690:	4b08      	ldr	r3, [pc, #32]	; (80126b4 <tcp_pcb_remove+0x10c>)
 8012692:	f640 0296 	movw	r2, #2198	; 0x896
 8012696:	490d      	ldr	r1, [pc, #52]	; (80126cc <tcp_pcb_remove+0x124>)
 8012698:	4808      	ldr	r0, [pc, #32]	; (80126bc <tcp_pcb_remove+0x114>)
 801269a:	f005 fb3b 	bl	8017d14 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	2200      	movs	r2, #0
 80126a2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	2200      	movs	r2, #0
 80126a8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80126aa:	bf00      	nop
 80126ac:	3710      	adds	r7, #16
 80126ae:	46bd      	mov	sp, r7
 80126b0:	bd80      	pop	{r7, pc}
 80126b2:	bf00      	nop
 80126b4:	0801af4c 	.word	0x0801af4c
 80126b8:	0801b5fc 	.word	0x0801b5fc
 80126bc:	0801afd8 	.word	0x0801afd8
 80126c0:	0801b618 	.word	0x0801b618
 80126c4:	0801b638 	.word	0x0801b638
 80126c8:	0801b650 	.word	0x0801b650
 80126cc:	0801b66c 	.word	0x0801b66c

080126d0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b082      	sub	sp, #8
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d106      	bne.n	80126ec <tcp_next_iss+0x1c>
 80126de:	4b0a      	ldr	r3, [pc, #40]	; (8012708 <tcp_next_iss+0x38>)
 80126e0:	f640 02af 	movw	r2, #2223	; 0x8af
 80126e4:	4909      	ldr	r1, [pc, #36]	; (801270c <tcp_next_iss+0x3c>)
 80126e6:	480a      	ldr	r0, [pc, #40]	; (8012710 <tcp_next_iss+0x40>)
 80126e8:	f005 fb14 	bl	8017d14 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80126ec:	4b09      	ldr	r3, [pc, #36]	; (8012714 <tcp_next_iss+0x44>)
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	4b09      	ldr	r3, [pc, #36]	; (8012718 <tcp_next_iss+0x48>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	4413      	add	r3, r2
 80126f6:	4a07      	ldr	r2, [pc, #28]	; (8012714 <tcp_next_iss+0x44>)
 80126f8:	6013      	str	r3, [r2, #0]
  return iss;
 80126fa:	4b06      	ldr	r3, [pc, #24]	; (8012714 <tcp_next_iss+0x44>)
 80126fc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3708      	adds	r7, #8
 8012702:	46bd      	mov	sp, r7
 8012704:	bd80      	pop	{r7, pc}
 8012706:	bf00      	nop
 8012708:	0801af4c 	.word	0x0801af4c
 801270c:	0801b684 	.word	0x0801b684
 8012710:	0801afd8 	.word	0x0801afd8
 8012714:	2400002c 	.word	0x2400002c
 8012718:	2400f228 	.word	0x2400f228

0801271c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b086      	sub	sp, #24
 8012720:	af00      	add	r7, sp, #0
 8012722:	4603      	mov	r3, r0
 8012724:	60b9      	str	r1, [r7, #8]
 8012726:	607a      	str	r2, [r7, #4]
 8012728:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d106      	bne.n	801273e <tcp_eff_send_mss_netif+0x22>
 8012730:	4b14      	ldr	r3, [pc, #80]	; (8012784 <tcp_eff_send_mss_netif+0x68>)
 8012732:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012736:	4914      	ldr	r1, [pc, #80]	; (8012788 <tcp_eff_send_mss_netif+0x6c>)
 8012738:	4814      	ldr	r0, [pc, #80]	; (801278c <tcp_eff_send_mss_netif+0x70>)
 801273a:	f005 faeb 	bl	8017d14 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d101      	bne.n	8012748 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012744:	89fb      	ldrh	r3, [r7, #14]
 8012746:	e019      	b.n	801277c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012748:	68bb      	ldr	r3, [r7, #8]
 801274a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801274c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801274e:	8afb      	ldrh	r3, [r7, #22]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d012      	beq.n	801277a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012754:	2328      	movs	r3, #40	; 0x28
 8012756:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012758:	8afa      	ldrh	r2, [r7, #22]
 801275a:	8abb      	ldrh	r3, [r7, #20]
 801275c:	429a      	cmp	r2, r3
 801275e:	d904      	bls.n	801276a <tcp_eff_send_mss_netif+0x4e>
 8012760:	8afa      	ldrh	r2, [r7, #22]
 8012762:	8abb      	ldrh	r3, [r7, #20]
 8012764:	1ad3      	subs	r3, r2, r3
 8012766:	b29b      	uxth	r3, r3
 8012768:	e000      	b.n	801276c <tcp_eff_send_mss_netif+0x50>
 801276a:	2300      	movs	r3, #0
 801276c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801276e:	8a7a      	ldrh	r2, [r7, #18]
 8012770:	89fb      	ldrh	r3, [r7, #14]
 8012772:	4293      	cmp	r3, r2
 8012774:	bf28      	it	cs
 8012776:	4613      	movcs	r3, r2
 8012778:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801277a:	89fb      	ldrh	r3, [r7, #14]
}
 801277c:	4618      	mov	r0, r3
 801277e:	3718      	adds	r7, #24
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}
 8012784:	0801af4c 	.word	0x0801af4c
 8012788:	0801b6a0 	.word	0x0801b6a0
 801278c:	0801afd8 	.word	0x0801afd8

08012790 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b084      	sub	sp, #16
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d119      	bne.n	80127d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80127a4:	4b10      	ldr	r3, [pc, #64]	; (80127e8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80127a6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80127aa:	4910      	ldr	r1, [pc, #64]	; (80127ec <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80127ac:	4810      	ldr	r0, [pc, #64]	; (80127f0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80127ae:	f005 fab1 	bl	8017d14 <iprintf>

  while (pcb != NULL) {
 80127b2:	e011      	b.n	80127d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	681a      	ldr	r2, [r3, #0]
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	429a      	cmp	r2, r3
 80127be:	d108      	bne.n	80127d2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	68db      	ldr	r3, [r3, #12]
 80127c4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80127c6:	68f8      	ldr	r0, [r7, #12]
 80127c8:	f7fe fd4c 	bl	8011264 <tcp_abort>
      pcb = next;
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	60fb      	str	r3, [r7, #12]
 80127d0:	e002      	b.n	80127d8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80127d8:	68fb      	ldr	r3, [r7, #12]
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d1ea      	bne.n	80127b4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80127de:	bf00      	nop
 80127e0:	bf00      	nop
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	0801af4c 	.word	0x0801af4c
 80127ec:	0801b6c8 	.word	0x0801b6c8
 80127f0:	0801afd8 	.word	0x0801afd8

080127f4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d02a      	beq.n	801285a <tcp_netif_ip_addr_changed+0x66>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d026      	beq.n	801285a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801280c:	4b15      	ldr	r3, [pc, #84]	; (8012864 <tcp_netif_ip_addr_changed+0x70>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	4619      	mov	r1, r3
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f7ff ffbc 	bl	8012790 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012818:	4b13      	ldr	r3, [pc, #76]	; (8012868 <tcp_netif_ip_addr_changed+0x74>)
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	4619      	mov	r1, r3
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f7ff ffb6 	bl	8012790 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	2b00      	cmp	r3, #0
 8012828:	d017      	beq.n	801285a <tcp_netif_ip_addr_changed+0x66>
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d013      	beq.n	801285a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012832:	4b0e      	ldr	r3, [pc, #56]	; (801286c <tcp_netif_ip_addr_changed+0x78>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	60fb      	str	r3, [r7, #12]
 8012838:	e00c      	b.n	8012854 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	681a      	ldr	r2, [r3, #0]
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	429a      	cmp	r2, r3
 8012844:	d103      	bne.n	801284e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012846:	683b      	ldr	r3, [r7, #0]
 8012848:	681a      	ldr	r2, [r3, #0]
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	60fb      	str	r3, [r7, #12]
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d1ef      	bne.n	801283a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801285a:	bf00      	nop
 801285c:	3710      	adds	r7, #16
 801285e:	46bd      	mov	sp, r7
 8012860:	bd80      	pop	{r7, pc}
 8012862:	bf00      	nop
 8012864:	2400f234 	.word	0x2400f234
 8012868:	2400f22c 	.word	0x2400f22c
 801286c:	2400f230 	.word	0x2400f230

08012870 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801287c:	2b00      	cmp	r3, #0
 801287e:	d007      	beq.n	8012890 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012884:	4618      	mov	r0, r3
 8012886:	f7ff fb6f 	bl	8011f68 <tcp_segs_free>
    pcb->ooseq = NULL;
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	2200      	movs	r2, #0
 801288e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012890:	bf00      	nop
 8012892:	3708      	adds	r7, #8
 8012894:	46bd      	mov	sp, r7
 8012896:	bd80      	pop	{r7, pc}

08012898 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012898:	b590      	push	{r4, r7, lr}
 801289a:	b08d      	sub	sp, #52	; 0x34
 801289c:	af04      	add	r7, sp, #16
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d105      	bne.n	80128b4 <tcp_input+0x1c>
 80128a8:	4b9b      	ldr	r3, [pc, #620]	; (8012b18 <tcp_input+0x280>)
 80128aa:	2283      	movs	r2, #131	; 0x83
 80128ac:	499b      	ldr	r1, [pc, #620]	; (8012b1c <tcp_input+0x284>)
 80128ae:	489c      	ldr	r0, [pc, #624]	; (8012b20 <tcp_input+0x288>)
 80128b0:	f005 fa30 	bl	8017d14 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	4a9a      	ldr	r2, [pc, #616]	; (8012b24 <tcp_input+0x28c>)
 80128ba:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	895b      	ldrh	r3, [r3, #10]
 80128c0:	2b13      	cmp	r3, #19
 80128c2:	f240 83d1 	bls.w	8013068 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128c6:	4b98      	ldr	r3, [pc, #608]	; (8012b28 <tcp_input+0x290>)
 80128c8:	695b      	ldr	r3, [r3, #20]
 80128ca:	4a97      	ldr	r2, [pc, #604]	; (8012b28 <tcp_input+0x290>)
 80128cc:	6812      	ldr	r2, [r2, #0]
 80128ce:	4611      	mov	r1, r2
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fb fa8f 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	f040 83c7 	bne.w	801306c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80128de:	4b92      	ldr	r3, [pc, #584]	; (8012b28 <tcp_input+0x290>)
 80128e0:	695b      	ldr	r3, [r3, #20]
 80128e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128e6:	2be0      	cmp	r3, #224	; 0xe0
 80128e8:	f000 83c0 	beq.w	801306c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80128ec:	4b8d      	ldr	r3, [pc, #564]	; (8012b24 <tcp_input+0x28c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	899b      	ldrh	r3, [r3, #12]
 80128f2:	b29b      	uxth	r3, r3
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7f9 fd0f 	bl	800c318 <lwip_htons>
 80128fa:	4603      	mov	r3, r0
 80128fc:	0b1b      	lsrs	r3, r3, #12
 80128fe:	b29b      	uxth	r3, r3
 8012900:	b2db      	uxtb	r3, r3
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012906:	7cbb      	ldrb	r3, [r7, #18]
 8012908:	2b13      	cmp	r3, #19
 801290a:	f240 83b1 	bls.w	8013070 <tcp_input+0x7d8>
 801290e:	7cbb      	ldrb	r3, [r7, #18]
 8012910:	b29a      	uxth	r2, r3
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	891b      	ldrh	r3, [r3, #8]
 8012916:	429a      	cmp	r2, r3
 8012918:	f200 83aa 	bhi.w	8013070 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801291c:	7cbb      	ldrb	r3, [r7, #18]
 801291e:	b29b      	uxth	r3, r3
 8012920:	3b14      	subs	r3, #20
 8012922:	b29a      	uxth	r2, r3
 8012924:	4b81      	ldr	r3, [pc, #516]	; (8012b2c <tcp_input+0x294>)
 8012926:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012928:	4b81      	ldr	r3, [pc, #516]	; (8012b30 <tcp_input+0x298>)
 801292a:	2200      	movs	r2, #0
 801292c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	895a      	ldrh	r2, [r3, #10]
 8012932:	7cbb      	ldrb	r3, [r7, #18]
 8012934:	b29b      	uxth	r3, r3
 8012936:	429a      	cmp	r2, r3
 8012938:	d309      	bcc.n	801294e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801293a:	4b7c      	ldr	r3, [pc, #496]	; (8012b2c <tcp_input+0x294>)
 801293c:	881a      	ldrh	r2, [r3, #0]
 801293e:	4b7d      	ldr	r3, [pc, #500]	; (8012b34 <tcp_input+0x29c>)
 8012940:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012942:	7cbb      	ldrb	r3, [r7, #18]
 8012944:	4619      	mov	r1, r3
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f7fd fc34 	bl	80101b4 <pbuf_remove_header>
 801294c:	e04e      	b.n	80129ec <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d105      	bne.n	8012962 <tcp_input+0xca>
 8012956:	4b70      	ldr	r3, [pc, #448]	; (8012b18 <tcp_input+0x280>)
 8012958:	22c2      	movs	r2, #194	; 0xc2
 801295a:	4977      	ldr	r1, [pc, #476]	; (8012b38 <tcp_input+0x2a0>)
 801295c:	4870      	ldr	r0, [pc, #448]	; (8012b20 <tcp_input+0x288>)
 801295e:	f005 f9d9 	bl	8017d14 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012962:	2114      	movs	r1, #20
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f7fd fc25 	bl	80101b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	895a      	ldrh	r2, [r3, #10]
 801296e:	4b71      	ldr	r3, [pc, #452]	; (8012b34 <tcp_input+0x29c>)
 8012970:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012972:	4b6e      	ldr	r3, [pc, #440]	; (8012b2c <tcp_input+0x294>)
 8012974:	881a      	ldrh	r2, [r3, #0]
 8012976:	4b6f      	ldr	r3, [pc, #444]	; (8012b34 <tcp_input+0x29c>)
 8012978:	881b      	ldrh	r3, [r3, #0]
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801297e:	4b6d      	ldr	r3, [pc, #436]	; (8012b34 <tcp_input+0x29c>)
 8012980:	881b      	ldrh	r3, [r3, #0]
 8012982:	4619      	mov	r1, r3
 8012984:	6878      	ldr	r0, [r7, #4]
 8012986:	f7fd fc15 	bl	80101b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	895b      	ldrh	r3, [r3, #10]
 8012990:	8a3a      	ldrh	r2, [r7, #16]
 8012992:	429a      	cmp	r2, r3
 8012994:	f200 836e 	bhi.w	8013074 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	685b      	ldr	r3, [r3, #4]
 801299e:	4a64      	ldr	r2, [pc, #400]	; (8012b30 <tcp_input+0x298>)
 80129a0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	8a3a      	ldrh	r2, [r7, #16]
 80129a8:	4611      	mov	r1, r2
 80129aa:	4618      	mov	r0, r3
 80129ac:	f7fd fc02 	bl	80101b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	891a      	ldrh	r2, [r3, #8]
 80129b4:	8a3b      	ldrh	r3, [r7, #16]
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	895b      	ldrh	r3, [r3, #10]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d005      	beq.n	80129d2 <tcp_input+0x13a>
 80129c6:	4b54      	ldr	r3, [pc, #336]	; (8012b18 <tcp_input+0x280>)
 80129c8:	22df      	movs	r2, #223	; 0xdf
 80129ca:	495c      	ldr	r1, [pc, #368]	; (8012b3c <tcp_input+0x2a4>)
 80129cc:	4854      	ldr	r0, [pc, #336]	; (8012b20 <tcp_input+0x288>)
 80129ce:	f005 f9a1 	bl	8017d14 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	891a      	ldrh	r2, [r3, #8]
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	891b      	ldrh	r3, [r3, #8]
 80129dc:	429a      	cmp	r2, r3
 80129de:	d005      	beq.n	80129ec <tcp_input+0x154>
 80129e0:	4b4d      	ldr	r3, [pc, #308]	; (8012b18 <tcp_input+0x280>)
 80129e2:	22e0      	movs	r2, #224	; 0xe0
 80129e4:	4956      	ldr	r1, [pc, #344]	; (8012b40 <tcp_input+0x2a8>)
 80129e6:	484e      	ldr	r0, [pc, #312]	; (8012b20 <tcp_input+0x288>)
 80129e8:	f005 f994 	bl	8017d14 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80129ec:	4b4d      	ldr	r3, [pc, #308]	; (8012b24 <tcp_input+0x28c>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	881b      	ldrh	r3, [r3, #0]
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	4a4b      	ldr	r2, [pc, #300]	; (8012b24 <tcp_input+0x28c>)
 80129f6:	6814      	ldr	r4, [r2, #0]
 80129f8:	4618      	mov	r0, r3
 80129fa:	f7f9 fc8d 	bl	800c318 <lwip_htons>
 80129fe:	4603      	mov	r3, r0
 8012a00:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012a02:	4b48      	ldr	r3, [pc, #288]	; (8012b24 <tcp_input+0x28c>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	885b      	ldrh	r3, [r3, #2]
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	4a46      	ldr	r2, [pc, #280]	; (8012b24 <tcp_input+0x28c>)
 8012a0c:	6814      	ldr	r4, [r2, #0]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7f9 fc82 	bl	800c318 <lwip_htons>
 8012a14:	4603      	mov	r3, r0
 8012a16:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012a18:	4b42      	ldr	r3, [pc, #264]	; (8012b24 <tcp_input+0x28c>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	4a41      	ldr	r2, [pc, #260]	; (8012b24 <tcp_input+0x28c>)
 8012a20:	6814      	ldr	r4, [r2, #0]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7f9 fc8d 	bl	800c342 <lwip_htonl>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	6063      	str	r3, [r4, #4]
 8012a2c:	6863      	ldr	r3, [r4, #4]
 8012a2e:	4a45      	ldr	r2, [pc, #276]	; (8012b44 <tcp_input+0x2ac>)
 8012a30:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012a32:	4b3c      	ldr	r3, [pc, #240]	; (8012b24 <tcp_input+0x28c>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	4a3a      	ldr	r2, [pc, #232]	; (8012b24 <tcp_input+0x28c>)
 8012a3a:	6814      	ldr	r4, [r2, #0]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f9 fc80 	bl	800c342 <lwip_htonl>
 8012a42:	4603      	mov	r3, r0
 8012a44:	60a3      	str	r3, [r4, #8]
 8012a46:	68a3      	ldr	r3, [r4, #8]
 8012a48:	4a3f      	ldr	r2, [pc, #252]	; (8012b48 <tcp_input+0x2b0>)
 8012a4a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012a4c:	4b35      	ldr	r3, [pc, #212]	; (8012b24 <tcp_input+0x28c>)
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	89db      	ldrh	r3, [r3, #14]
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	4a33      	ldr	r2, [pc, #204]	; (8012b24 <tcp_input+0x28c>)
 8012a56:	6814      	ldr	r4, [r2, #0]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7f9 fc5d 	bl	800c318 <lwip_htons>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012a62:	4b30      	ldr	r3, [pc, #192]	; (8012b24 <tcp_input+0x28c>)
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	899b      	ldrh	r3, [r3, #12]
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7f9 fc54 	bl	800c318 <lwip_htons>
 8012a70:	4603      	mov	r3, r0
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a78:	b2da      	uxtb	r2, r3
 8012a7a:	4b34      	ldr	r3, [pc, #208]	; (8012b4c <tcp_input+0x2b4>)
 8012a7c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	891a      	ldrh	r2, [r3, #8]
 8012a82:	4b33      	ldr	r3, [pc, #204]	; (8012b50 <tcp_input+0x2b8>)
 8012a84:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012a86:	4b31      	ldr	r3, [pc, #196]	; (8012b4c <tcp_input+0x2b4>)
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	f003 0303 	and.w	r3, r3, #3
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00c      	beq.n	8012aac <tcp_input+0x214>
    tcplen++;
 8012a92:	4b2f      	ldr	r3, [pc, #188]	; (8012b50 <tcp_input+0x2b8>)
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	3301      	adds	r3, #1
 8012a98:	b29a      	uxth	r2, r3
 8012a9a:	4b2d      	ldr	r3, [pc, #180]	; (8012b50 <tcp_input+0x2b8>)
 8012a9c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	891a      	ldrh	r2, [r3, #8]
 8012aa2:	4b2b      	ldr	r3, [pc, #172]	; (8012b50 <tcp_input+0x2b8>)
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	f200 82e6 	bhi.w	8013078 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012aac:	2300      	movs	r3, #0
 8012aae:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ab0:	4b28      	ldr	r3, [pc, #160]	; (8012b54 <tcp_input+0x2bc>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	61fb      	str	r3, [r7, #28]
 8012ab6:	e09d      	b.n	8012bf4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012ab8:	69fb      	ldr	r3, [r7, #28]
 8012aba:	7d1b      	ldrb	r3, [r3, #20]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d105      	bne.n	8012acc <tcp_input+0x234>
 8012ac0:	4b15      	ldr	r3, [pc, #84]	; (8012b18 <tcp_input+0x280>)
 8012ac2:	22fb      	movs	r2, #251	; 0xfb
 8012ac4:	4924      	ldr	r1, [pc, #144]	; (8012b58 <tcp_input+0x2c0>)
 8012ac6:	4816      	ldr	r0, [pc, #88]	; (8012b20 <tcp_input+0x288>)
 8012ac8:	f005 f924 	bl	8017d14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	7d1b      	ldrb	r3, [r3, #20]
 8012ad0:	2b0a      	cmp	r3, #10
 8012ad2:	d105      	bne.n	8012ae0 <tcp_input+0x248>
 8012ad4:	4b10      	ldr	r3, [pc, #64]	; (8012b18 <tcp_input+0x280>)
 8012ad6:	22fc      	movs	r2, #252	; 0xfc
 8012ad8:	4920      	ldr	r1, [pc, #128]	; (8012b5c <tcp_input+0x2c4>)
 8012ada:	4811      	ldr	r0, [pc, #68]	; (8012b20 <tcp_input+0x288>)
 8012adc:	f005 f91a 	bl	8017d14 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	7d1b      	ldrb	r3, [r3, #20]
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	d105      	bne.n	8012af4 <tcp_input+0x25c>
 8012ae8:	4b0b      	ldr	r3, [pc, #44]	; (8012b18 <tcp_input+0x280>)
 8012aea:	22fd      	movs	r2, #253	; 0xfd
 8012aec:	491c      	ldr	r1, [pc, #112]	; (8012b60 <tcp_input+0x2c8>)
 8012aee:	480c      	ldr	r0, [pc, #48]	; (8012b20 <tcp_input+0x288>)
 8012af0:	f005 f910 	bl	8017d14 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	7a1b      	ldrb	r3, [r3, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d033      	beq.n	8012b64 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012afc:	69fb      	ldr	r3, [r7, #28]
 8012afe:	7a1a      	ldrb	r2, [r3, #8]
 8012b00:	4b09      	ldr	r3, [pc, #36]	; (8012b28 <tcp_input+0x290>)
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012b08:	3301      	adds	r3, #1
 8012b0a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d029      	beq.n	8012b64 <tcp_input+0x2cc>
      prev = pcb;
 8012b10:	69fb      	ldr	r3, [r7, #28]
 8012b12:	61bb      	str	r3, [r7, #24]
      continue;
 8012b14:	e06b      	b.n	8012bee <tcp_input+0x356>
 8012b16:	bf00      	nop
 8012b18:	0801b6fc 	.word	0x0801b6fc
 8012b1c:	0801b774 	.word	0x0801b774
 8012b20:	0801b78c 	.word	0x0801b78c
 8012b24:	2400f250 	.word	0x2400f250
 8012b28:	24008758 	.word	0x24008758
 8012b2c:	2400f254 	.word	0x2400f254
 8012b30:	2400f258 	.word	0x2400f258
 8012b34:	2400f256 	.word	0x2400f256
 8012b38:	0801b7b4 	.word	0x0801b7b4
 8012b3c:	0801b7c4 	.word	0x0801b7c4
 8012b40:	0801b7d0 	.word	0x0801b7d0
 8012b44:	2400f260 	.word	0x2400f260
 8012b48:	2400f264 	.word	0x2400f264
 8012b4c:	2400f26c 	.word	0x2400f26c
 8012b50:	2400f26a 	.word	0x2400f26a
 8012b54:	2400f234 	.word	0x2400f234
 8012b58:	0801b7f0 	.word	0x0801b7f0
 8012b5c:	0801b818 	.word	0x0801b818
 8012b60:	0801b844 	.word	0x0801b844
    }

    if (pcb->remote_port == tcphdr->src &&
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	8b1a      	ldrh	r2, [r3, #24]
 8012b68:	4b72      	ldr	r3, [pc, #456]	; (8012d34 <tcp_input+0x49c>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	881b      	ldrh	r3, [r3, #0]
 8012b6e:	b29b      	uxth	r3, r3
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d13a      	bne.n	8012bea <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	8ada      	ldrh	r2, [r3, #22]
 8012b78:	4b6e      	ldr	r3, [pc, #440]	; (8012d34 <tcp_input+0x49c>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	885b      	ldrh	r3, [r3, #2]
 8012b7e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d132      	bne.n	8012bea <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	685a      	ldr	r2, [r3, #4]
 8012b88:	4b6b      	ldr	r3, [pc, #428]	; (8012d38 <tcp_input+0x4a0>)
 8012b8a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d12c      	bne.n	8012bea <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b90:	69fb      	ldr	r3, [r7, #28]
 8012b92:	681a      	ldr	r2, [r3, #0]
 8012b94:	4b68      	ldr	r3, [pc, #416]	; (8012d38 <tcp_input+0x4a0>)
 8012b96:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d126      	bne.n	8012bea <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012b9c:	69fb      	ldr	r3, [r7, #28]
 8012b9e:	68db      	ldr	r3, [r3, #12]
 8012ba0:	69fa      	ldr	r2, [r7, #28]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d106      	bne.n	8012bb4 <tcp_input+0x31c>
 8012ba6:	4b65      	ldr	r3, [pc, #404]	; (8012d3c <tcp_input+0x4a4>)
 8012ba8:	f240 120d 	movw	r2, #269	; 0x10d
 8012bac:	4964      	ldr	r1, [pc, #400]	; (8012d40 <tcp_input+0x4a8>)
 8012bae:	4865      	ldr	r0, [pc, #404]	; (8012d44 <tcp_input+0x4ac>)
 8012bb0:	f005 f8b0 	bl	8017d14 <iprintf>
      if (prev != NULL) {
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00a      	beq.n	8012bd0 <tcp_input+0x338>
        prev->next = pcb->next;
 8012bba:	69fb      	ldr	r3, [r7, #28]
 8012bbc:	68da      	ldr	r2, [r3, #12]
 8012bbe:	69bb      	ldr	r3, [r7, #24]
 8012bc0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012bc2:	4b61      	ldr	r3, [pc, #388]	; (8012d48 <tcp_input+0x4b0>)
 8012bc4:	681a      	ldr	r2, [r3, #0]
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012bca:	4a5f      	ldr	r2, [pc, #380]	; (8012d48 <tcp_input+0x4b0>)
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	68db      	ldr	r3, [r3, #12]
 8012bd4:	69fa      	ldr	r2, [r7, #28]
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d111      	bne.n	8012bfe <tcp_input+0x366>
 8012bda:	4b58      	ldr	r3, [pc, #352]	; (8012d3c <tcp_input+0x4a4>)
 8012bdc:	f240 1215 	movw	r2, #277	; 0x115
 8012be0:	495a      	ldr	r1, [pc, #360]	; (8012d4c <tcp_input+0x4b4>)
 8012be2:	4858      	ldr	r0, [pc, #352]	; (8012d44 <tcp_input+0x4ac>)
 8012be4:	f005 f896 	bl	8017d14 <iprintf>
      break;
 8012be8:	e009      	b.n	8012bfe <tcp_input+0x366>
    }
    prev = pcb;
 8012bea:	69fb      	ldr	r3, [r7, #28]
 8012bec:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bee:	69fb      	ldr	r3, [r7, #28]
 8012bf0:	68db      	ldr	r3, [r3, #12]
 8012bf2:	61fb      	str	r3, [r7, #28]
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	f47f af5e 	bne.w	8012ab8 <tcp_input+0x220>
 8012bfc:	e000      	b.n	8012c00 <tcp_input+0x368>
      break;
 8012bfe:	bf00      	nop
  }

  if (pcb == NULL) {
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	f040 80aa 	bne.w	8012d5c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c08:	4b51      	ldr	r3, [pc, #324]	; (8012d50 <tcp_input+0x4b8>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	61fb      	str	r3, [r7, #28]
 8012c0e:	e03f      	b.n	8012c90 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	7d1b      	ldrb	r3, [r3, #20]
 8012c14:	2b0a      	cmp	r3, #10
 8012c16:	d006      	beq.n	8012c26 <tcp_input+0x38e>
 8012c18:	4b48      	ldr	r3, [pc, #288]	; (8012d3c <tcp_input+0x4a4>)
 8012c1a:	f240 121f 	movw	r2, #287	; 0x11f
 8012c1e:	494d      	ldr	r1, [pc, #308]	; (8012d54 <tcp_input+0x4bc>)
 8012c20:	4848      	ldr	r0, [pc, #288]	; (8012d44 <tcp_input+0x4ac>)
 8012c22:	f005 f877 	bl	8017d14 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	7a1b      	ldrb	r3, [r3, #8]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d009      	beq.n	8012c42 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c2e:	69fb      	ldr	r3, [r7, #28]
 8012c30:	7a1a      	ldrb	r2, [r3, #8]
 8012c32:	4b41      	ldr	r3, [pc, #260]	; (8012d38 <tcp_input+0x4a0>)
 8012c34:	685b      	ldr	r3, [r3, #4]
 8012c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d122      	bne.n	8012c88 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012c42:	69fb      	ldr	r3, [r7, #28]
 8012c44:	8b1a      	ldrh	r2, [r3, #24]
 8012c46:	4b3b      	ldr	r3, [pc, #236]	; (8012d34 <tcp_input+0x49c>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	881b      	ldrh	r3, [r3, #0]
 8012c4c:	b29b      	uxth	r3, r3
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d11b      	bne.n	8012c8a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	8ada      	ldrh	r2, [r3, #22]
 8012c56:	4b37      	ldr	r3, [pc, #220]	; (8012d34 <tcp_input+0x49c>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	885b      	ldrh	r3, [r3, #2]
 8012c5c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d113      	bne.n	8012c8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c62:	69fb      	ldr	r3, [r7, #28]
 8012c64:	685a      	ldr	r2, [r3, #4]
 8012c66:	4b34      	ldr	r3, [pc, #208]	; (8012d38 <tcp_input+0x4a0>)
 8012c68:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d10d      	bne.n	8012c8a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	4b31      	ldr	r3, [pc, #196]	; (8012d38 <tcp_input+0x4a0>)
 8012c74:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d107      	bne.n	8012c8a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012c7a:	69f8      	ldr	r0, [r7, #28]
 8012c7c:	f000 fb56 	bl	801332c <tcp_timewait_input>
        }
        pbuf_free(p);
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7fd fb1d 	bl	80102c0 <pbuf_free>
        return;
 8012c86:	e1fd      	b.n	8013084 <tcp_input+0x7ec>
        continue;
 8012c88:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	61fb      	str	r3, [r7, #28]
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d1bc      	bne.n	8012c10 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012c96:	2300      	movs	r3, #0
 8012c98:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c9a:	4b2f      	ldr	r3, [pc, #188]	; (8012d58 <tcp_input+0x4c0>)
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	617b      	str	r3, [r7, #20]
 8012ca0:	e02a      	b.n	8012cf8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	7a1b      	ldrb	r3, [r3, #8]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d00c      	beq.n	8012cc4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	7a1a      	ldrb	r2, [r3, #8]
 8012cae:	4b22      	ldr	r3, [pc, #136]	; (8012d38 <tcp_input+0x4a0>)
 8012cb0:	685b      	ldr	r3, [r3, #4]
 8012cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012cba:	429a      	cmp	r2, r3
 8012cbc:	d002      	beq.n	8012cc4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	61bb      	str	r3, [r7, #24]
        continue;
 8012cc2:	e016      	b.n	8012cf2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	8ada      	ldrh	r2, [r3, #22]
 8012cc8:	4b1a      	ldr	r3, [pc, #104]	; (8012d34 <tcp_input+0x49c>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	885b      	ldrh	r3, [r3, #2]
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d10c      	bne.n	8012cee <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012cd4:	697b      	ldr	r3, [r7, #20]
 8012cd6:	681a      	ldr	r2, [r3, #0]
 8012cd8:	4b17      	ldr	r3, [pc, #92]	; (8012d38 <tcp_input+0x4a0>)
 8012cda:	695b      	ldr	r3, [r3, #20]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d00f      	beq.n	8012d00 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d00d      	beq.n	8012d02 <tcp_input+0x46a>
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d009      	beq.n	8012d02 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	68db      	ldr	r3, [r3, #12]
 8012cf6:	617b      	str	r3, [r7, #20]
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d1d1      	bne.n	8012ca2 <tcp_input+0x40a>
 8012cfe:	e000      	b.n	8012d02 <tcp_input+0x46a>
            break;
 8012d00:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d029      	beq.n	8012d5c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00a      	beq.n	8012d24 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	68da      	ldr	r2, [r3, #12]
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012d16:	4b10      	ldr	r3, [pc, #64]	; (8012d58 <tcp_input+0x4c0>)
 8012d18:	681a      	ldr	r2, [r3, #0]
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012d1e:	4a0e      	ldr	r2, [pc, #56]	; (8012d58 <tcp_input+0x4c0>)
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012d24:	6978      	ldr	r0, [r7, #20]
 8012d26:	f000 fa03 	bl	8013130 <tcp_listen_input>
      }
      pbuf_free(p);
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f7fd fac8 	bl	80102c0 <pbuf_free>
      return;
 8012d30:	e1a8      	b.n	8013084 <tcp_input+0x7ec>
 8012d32:	bf00      	nop
 8012d34:	2400f250 	.word	0x2400f250
 8012d38:	24008758 	.word	0x24008758
 8012d3c:	0801b6fc 	.word	0x0801b6fc
 8012d40:	0801b86c 	.word	0x0801b86c
 8012d44:	0801b78c 	.word	0x0801b78c
 8012d48:	2400f234 	.word	0x2400f234
 8012d4c:	0801b898 	.word	0x0801b898
 8012d50:	2400f238 	.word	0x2400f238
 8012d54:	0801b8c4 	.word	0x0801b8c4
 8012d58:	2400f230 	.word	0x2400f230
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012d5c:	69fb      	ldr	r3, [r7, #28]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f000 8158 	beq.w	8013014 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012d64:	4b95      	ldr	r3, [pc, #596]	; (8012fbc <tcp_input+0x724>)
 8012d66:	2200      	movs	r2, #0
 8012d68:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	891a      	ldrh	r2, [r3, #8]
 8012d6e:	4b93      	ldr	r3, [pc, #588]	; (8012fbc <tcp_input+0x724>)
 8012d70:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012d72:	4a92      	ldr	r2, [pc, #584]	; (8012fbc <tcp_input+0x724>)
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012d78:	4b91      	ldr	r3, [pc, #580]	; (8012fc0 <tcp_input+0x728>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a8f      	ldr	r2, [pc, #572]	; (8012fbc <tcp_input+0x724>)
 8012d7e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012d80:	4b90      	ldr	r3, [pc, #576]	; (8012fc4 <tcp_input+0x72c>)
 8012d82:	2200      	movs	r2, #0
 8012d84:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012d86:	4b90      	ldr	r3, [pc, #576]	; (8012fc8 <tcp_input+0x730>)
 8012d88:	2200      	movs	r2, #0
 8012d8a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012d8c:	4b8f      	ldr	r3, [pc, #572]	; (8012fcc <tcp_input+0x734>)
 8012d8e:	2200      	movs	r2, #0
 8012d90:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012d92:	4b8f      	ldr	r3, [pc, #572]	; (8012fd0 <tcp_input+0x738>)
 8012d94:	781b      	ldrb	r3, [r3, #0]
 8012d96:	f003 0308 	and.w	r3, r3, #8
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d006      	beq.n	8012dac <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	7b5b      	ldrb	r3, [r3, #13]
 8012da2:	f043 0301 	orr.w	r3, r3, #1
 8012da6:	b2da      	uxtb	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012dac:	69fb      	ldr	r3, [r7, #28]
 8012dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d017      	beq.n	8012de4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012db4:	69f8      	ldr	r0, [r7, #28]
 8012db6:	f7ff f859 	bl	8011e6c <tcp_process_refused_data>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	f113 0f0d 	cmn.w	r3, #13
 8012dc0:	d007      	beq.n	8012dd2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d00c      	beq.n	8012de4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012dca:	4b82      	ldr	r3, [pc, #520]	; (8012fd4 <tcp_input+0x73c>)
 8012dcc:	881b      	ldrh	r3, [r3, #0]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d008      	beq.n	8012de4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	f040 80e4 	bne.w	8012fa4 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012ddc:	69f8      	ldr	r0, [r7, #28]
 8012dde:	f003 fe05 	bl	80169ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012de2:	e0df      	b.n	8012fa4 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8012de4:	4a7c      	ldr	r2, [pc, #496]	; (8012fd8 <tcp_input+0x740>)
 8012de6:	69fb      	ldr	r3, [r7, #28]
 8012de8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012dea:	69f8      	ldr	r0, [r7, #28]
 8012dec:	f000 fb18 	bl	8013420 <tcp_process>
 8012df0:	4603      	mov	r3, r0
 8012df2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012df8:	f113 0f0d 	cmn.w	r3, #13
 8012dfc:	f000 80d4 	beq.w	8012fa8 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8012e00:	4b71      	ldr	r3, [pc, #452]	; (8012fc8 <tcp_input+0x730>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	f003 0308 	and.w	r3, r3, #8
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d015      	beq.n	8012e38 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012e0c:	69fb      	ldr	r3, [r7, #28]
 8012e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d008      	beq.n	8012e28 <tcp_input+0x590>
 8012e16:	69fb      	ldr	r3, [r7, #28]
 8012e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e1c:	69fa      	ldr	r2, [r7, #28]
 8012e1e:	6912      	ldr	r2, [r2, #16]
 8012e20:	f06f 010d 	mvn.w	r1, #13
 8012e24:	4610      	mov	r0, r2
 8012e26:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e28:	69f9      	ldr	r1, [r7, #28]
 8012e2a:	486c      	ldr	r0, [pc, #432]	; (8012fdc <tcp_input+0x744>)
 8012e2c:	f7ff fbbc 	bl	80125a8 <tcp_pcb_remove>
        tcp_free(pcb);
 8012e30:	69f8      	ldr	r0, [r7, #28]
 8012e32:	f7fd fed3 	bl	8010bdc <tcp_free>
 8012e36:	e0da      	b.n	8012fee <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012e3c:	4b63      	ldr	r3, [pc, #396]	; (8012fcc <tcp_input+0x734>)
 8012e3e:	881b      	ldrh	r3, [r3, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d01d      	beq.n	8012e80 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012e44:	4b61      	ldr	r3, [pc, #388]	; (8012fcc <tcp_input+0x734>)
 8012e46:	881b      	ldrh	r3, [r3, #0]
 8012e48:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d00a      	beq.n	8012e6a <tcp_input+0x5d2>
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e5a:	69fa      	ldr	r2, [r7, #28]
 8012e5c:	6910      	ldr	r0, [r2, #16]
 8012e5e:	89fa      	ldrh	r2, [r7, #14]
 8012e60:	69f9      	ldr	r1, [r7, #28]
 8012e62:	4798      	blx	r3
 8012e64:	4603      	mov	r3, r0
 8012e66:	74fb      	strb	r3, [r7, #19]
 8012e68:	e001      	b.n	8012e6e <tcp_input+0x5d6>
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e72:	f113 0f0d 	cmn.w	r3, #13
 8012e76:	f000 8099 	beq.w	8012fac <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012e7a:	4b54      	ldr	r3, [pc, #336]	; (8012fcc <tcp_input+0x734>)
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012e80:	69f8      	ldr	r0, [r7, #28]
 8012e82:	f000 f915 	bl	80130b0 <tcp_input_delayed_close>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	f040 8091 	bne.w	8012fb0 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012e8e:	4b4d      	ldr	r3, [pc, #308]	; (8012fc4 <tcp_input+0x72c>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d041      	beq.n	8012f1a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012e96:	69fb      	ldr	r3, [r7, #28]
 8012e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d006      	beq.n	8012eac <tcp_input+0x614>
 8012e9e:	4b50      	ldr	r3, [pc, #320]	; (8012fe0 <tcp_input+0x748>)
 8012ea0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012ea4:	494f      	ldr	r1, [pc, #316]	; (8012fe4 <tcp_input+0x74c>)
 8012ea6:	4850      	ldr	r0, [pc, #320]	; (8012fe8 <tcp_input+0x750>)
 8012ea8:	f004 ff34 	bl	8017d14 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012eac:	69fb      	ldr	r3, [r7, #28]
 8012eae:	8b5b      	ldrh	r3, [r3, #26]
 8012eb0:	f003 0310 	and.w	r3, r3, #16
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d008      	beq.n	8012eca <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012eb8:	4b42      	ldr	r3, [pc, #264]	; (8012fc4 <tcp_input+0x72c>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7fd f9ff 	bl	80102c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012ec2:	69f8      	ldr	r0, [r7, #28]
 8012ec4:	f7fe f9ce 	bl	8011264 <tcp_abort>
            goto aborted;
 8012ec8:	e091      	b.n	8012fee <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012eca:	69fb      	ldr	r3, [r7, #28]
 8012ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d00c      	beq.n	8012eee <tcp_input+0x656>
 8012ed4:	69fb      	ldr	r3, [r7, #28]
 8012ed6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012eda:	69fb      	ldr	r3, [r7, #28]
 8012edc:	6918      	ldr	r0, [r3, #16]
 8012ede:	4b39      	ldr	r3, [pc, #228]	; (8012fc4 <tcp_input+0x72c>)
 8012ee0:	681a      	ldr	r2, [r3, #0]
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	69f9      	ldr	r1, [r7, #28]
 8012ee6:	47a0      	blx	r4
 8012ee8:	4603      	mov	r3, r0
 8012eea:	74fb      	strb	r3, [r7, #19]
 8012eec:	e008      	b.n	8012f00 <tcp_input+0x668>
 8012eee:	4b35      	ldr	r3, [pc, #212]	; (8012fc4 <tcp_input+0x72c>)
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	69f9      	ldr	r1, [r7, #28]
 8012ef6:	2000      	movs	r0, #0
 8012ef8:	f7ff f890 	bl	801201c <tcp_recv_null>
 8012efc:	4603      	mov	r3, r0
 8012efe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012f00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f04:	f113 0f0d 	cmn.w	r3, #13
 8012f08:	d054      	beq.n	8012fb4 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012f0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d003      	beq.n	8012f1a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012f12:	4b2c      	ldr	r3, [pc, #176]	; (8012fc4 <tcp_input+0x72c>)
 8012f14:	681a      	ldr	r2, [r3, #0]
 8012f16:	69fb      	ldr	r3, [r7, #28]
 8012f18:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012f1a:	4b2b      	ldr	r3, [pc, #172]	; (8012fc8 <tcp_input+0x730>)
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	f003 0320 	and.w	r3, r3, #32
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d031      	beq.n	8012f8a <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d009      	beq.n	8012f42 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012f2e:	69fb      	ldr	r3, [r7, #28]
 8012f30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f32:	7b5a      	ldrb	r2, [r3, #13]
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f38:	f042 0220 	orr.w	r2, r2, #32
 8012f3c:	b2d2      	uxtb	r2, r2
 8012f3e:	735a      	strb	r2, [r3, #13]
 8012f40:	e023      	b.n	8012f8a <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012f42:	69fb      	ldr	r3, [r7, #28]
 8012f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f46:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012f4a:	4293      	cmp	r3, r2
 8012f4c:	d005      	beq.n	8012f5a <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8012f4e:	69fb      	ldr	r3, [r7, #28]
 8012f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f52:	3301      	adds	r3, #1
 8012f54:	b29a      	uxth	r2, r3
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012f5a:	69fb      	ldr	r3, [r7, #28]
 8012f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00b      	beq.n	8012f7c <tcp_input+0x6e4>
 8012f64:	69fb      	ldr	r3, [r7, #28]
 8012f66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012f6a:	69fb      	ldr	r3, [r7, #28]
 8012f6c:	6918      	ldr	r0, [r3, #16]
 8012f6e:	2300      	movs	r3, #0
 8012f70:	2200      	movs	r2, #0
 8012f72:	69f9      	ldr	r1, [r7, #28]
 8012f74:	47a0      	blx	r4
 8012f76:	4603      	mov	r3, r0
 8012f78:	74fb      	strb	r3, [r7, #19]
 8012f7a:	e001      	b.n	8012f80 <tcp_input+0x6e8>
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f84:	f113 0f0d 	cmn.w	r3, #13
 8012f88:	d016      	beq.n	8012fb8 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012f8a:	4b13      	ldr	r3, [pc, #76]	; (8012fd8 <tcp_input+0x740>)
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012f90:	69f8      	ldr	r0, [r7, #28]
 8012f92:	f000 f88d 	bl	80130b0 <tcp_input_delayed_close>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d127      	bne.n	8012fec <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012f9c:	69f8      	ldr	r0, [r7, #28]
 8012f9e:	f002 ff1f 	bl	8015de0 <tcp_output>
 8012fa2:	e024      	b.n	8012fee <tcp_input+0x756>
        goto aborted;
 8012fa4:	bf00      	nop
 8012fa6:	e022      	b.n	8012fee <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012fa8:	bf00      	nop
 8012faa:	e020      	b.n	8012fee <tcp_input+0x756>
              goto aborted;
 8012fac:	bf00      	nop
 8012fae:	e01e      	b.n	8012fee <tcp_input+0x756>
          goto aborted;
 8012fb0:	bf00      	nop
 8012fb2:	e01c      	b.n	8012fee <tcp_input+0x756>
            goto aborted;
 8012fb4:	bf00      	nop
 8012fb6:	e01a      	b.n	8012fee <tcp_input+0x756>
              goto aborted;
 8012fb8:	bf00      	nop
 8012fba:	e018      	b.n	8012fee <tcp_input+0x756>
 8012fbc:	2400f240 	.word	0x2400f240
 8012fc0:	2400f250 	.word	0x2400f250
 8012fc4:	2400f270 	.word	0x2400f270
 8012fc8:	2400f26d 	.word	0x2400f26d
 8012fcc:	2400f268 	.word	0x2400f268
 8012fd0:	2400f26c 	.word	0x2400f26c
 8012fd4:	2400f26a 	.word	0x2400f26a
 8012fd8:	2400f274 	.word	0x2400f274
 8012fdc:	2400f234 	.word	0x2400f234
 8012fe0:	0801b6fc 	.word	0x0801b6fc
 8012fe4:	0801b8f4 	.word	0x0801b8f4
 8012fe8:	0801b78c 	.word	0x0801b78c
          goto aborted;
 8012fec:	bf00      	nop
    tcp_input_pcb = NULL;
 8012fee:	4b27      	ldr	r3, [pc, #156]	; (801308c <tcp_input+0x7f4>)
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012ff4:	4b26      	ldr	r3, [pc, #152]	; (8013090 <tcp_input+0x7f8>)
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012ffa:	4b26      	ldr	r3, [pc, #152]	; (8013094 <tcp_input+0x7fc>)
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d03f      	beq.n	8013082 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013002:	4b24      	ldr	r3, [pc, #144]	; (8013094 <tcp_input+0x7fc>)
 8013004:	685b      	ldr	r3, [r3, #4]
 8013006:	4618      	mov	r0, r3
 8013008:	f7fd f95a 	bl	80102c0 <pbuf_free>
      inseg.p = NULL;
 801300c:	4b21      	ldr	r3, [pc, #132]	; (8013094 <tcp_input+0x7fc>)
 801300e:	2200      	movs	r2, #0
 8013010:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013012:	e036      	b.n	8013082 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013014:	4b20      	ldr	r3, [pc, #128]	; (8013098 <tcp_input+0x800>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	899b      	ldrh	r3, [r3, #12]
 801301a:	b29b      	uxth	r3, r3
 801301c:	4618      	mov	r0, r3
 801301e:	f7f9 f97b 	bl	800c318 <lwip_htons>
 8013022:	4603      	mov	r3, r0
 8013024:	b2db      	uxtb	r3, r3
 8013026:	f003 0304 	and.w	r3, r3, #4
 801302a:	2b00      	cmp	r3, #0
 801302c:	d118      	bne.n	8013060 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801302e:	4b1b      	ldr	r3, [pc, #108]	; (801309c <tcp_input+0x804>)
 8013030:	6819      	ldr	r1, [r3, #0]
 8013032:	4b1b      	ldr	r3, [pc, #108]	; (80130a0 <tcp_input+0x808>)
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	461a      	mov	r2, r3
 8013038:	4b1a      	ldr	r3, [pc, #104]	; (80130a4 <tcp_input+0x80c>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801303e:	4b16      	ldr	r3, [pc, #88]	; (8013098 <tcp_input+0x800>)
 8013040:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013042:	885b      	ldrh	r3, [r3, #2]
 8013044:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013046:	4a14      	ldr	r2, [pc, #80]	; (8013098 <tcp_input+0x800>)
 8013048:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801304a:	8812      	ldrh	r2, [r2, #0]
 801304c:	b292      	uxth	r2, r2
 801304e:	9202      	str	r2, [sp, #8]
 8013050:	9301      	str	r3, [sp, #4]
 8013052:	4b15      	ldr	r3, [pc, #84]	; (80130a8 <tcp_input+0x810>)
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	4b15      	ldr	r3, [pc, #84]	; (80130ac <tcp_input+0x814>)
 8013058:	4602      	mov	r2, r0
 801305a:	2000      	movs	r0, #0
 801305c:	f003 fc74 	bl	8016948 <tcp_rst>
    pbuf_free(p);
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f7fd f92d 	bl	80102c0 <pbuf_free>
  return;
 8013066:	e00c      	b.n	8013082 <tcp_input+0x7ea>
    goto dropped;
 8013068:	bf00      	nop
 801306a:	e006      	b.n	801307a <tcp_input+0x7e2>
    goto dropped;
 801306c:	bf00      	nop
 801306e:	e004      	b.n	801307a <tcp_input+0x7e2>
    goto dropped;
 8013070:	bf00      	nop
 8013072:	e002      	b.n	801307a <tcp_input+0x7e2>
      goto dropped;
 8013074:	bf00      	nop
 8013076:	e000      	b.n	801307a <tcp_input+0x7e2>
      goto dropped;
 8013078:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f7fd f920 	bl	80102c0 <pbuf_free>
 8013080:	e000      	b.n	8013084 <tcp_input+0x7ec>
  return;
 8013082:	bf00      	nop
}
 8013084:	3724      	adds	r7, #36	; 0x24
 8013086:	46bd      	mov	sp, r7
 8013088:	bd90      	pop	{r4, r7, pc}
 801308a:	bf00      	nop
 801308c:	2400f274 	.word	0x2400f274
 8013090:	2400f270 	.word	0x2400f270
 8013094:	2400f240 	.word	0x2400f240
 8013098:	2400f250 	.word	0x2400f250
 801309c:	2400f264 	.word	0x2400f264
 80130a0:	2400f26a 	.word	0x2400f26a
 80130a4:	2400f260 	.word	0x2400f260
 80130a8:	24008768 	.word	0x24008768
 80130ac:	2400876c 	.word	0x2400876c

080130b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b082      	sub	sp, #8
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d106      	bne.n	80130cc <tcp_input_delayed_close+0x1c>
 80130be:	4b17      	ldr	r3, [pc, #92]	; (801311c <tcp_input_delayed_close+0x6c>)
 80130c0:	f240 225a 	movw	r2, #602	; 0x25a
 80130c4:	4916      	ldr	r1, [pc, #88]	; (8013120 <tcp_input_delayed_close+0x70>)
 80130c6:	4817      	ldr	r0, [pc, #92]	; (8013124 <tcp_input_delayed_close+0x74>)
 80130c8:	f004 fe24 	bl	8017d14 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80130cc:	4b16      	ldr	r3, [pc, #88]	; (8013128 <tcp_input_delayed_close+0x78>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	f003 0310 	and.w	r3, r3, #16
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d01c      	beq.n	8013112 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	8b5b      	ldrh	r3, [r3, #26]
 80130dc:	f003 0310 	and.w	r3, r3, #16
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d10d      	bne.n	8013100 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d008      	beq.n	8013100 <tcp_input_delayed_close+0x50>
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130f4:	687a      	ldr	r2, [r7, #4]
 80130f6:	6912      	ldr	r2, [r2, #16]
 80130f8:	f06f 010e 	mvn.w	r1, #14
 80130fc:	4610      	mov	r0, r2
 80130fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013100:	6879      	ldr	r1, [r7, #4]
 8013102:	480a      	ldr	r0, [pc, #40]	; (801312c <tcp_input_delayed_close+0x7c>)
 8013104:	f7ff fa50 	bl	80125a8 <tcp_pcb_remove>
    tcp_free(pcb);
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f7fd fd67 	bl	8010bdc <tcp_free>
    return 1;
 801310e:	2301      	movs	r3, #1
 8013110:	e000      	b.n	8013114 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013112:	2300      	movs	r3, #0
}
 8013114:	4618      	mov	r0, r3
 8013116:	3708      	adds	r7, #8
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}
 801311c:	0801b6fc 	.word	0x0801b6fc
 8013120:	0801b910 	.word	0x0801b910
 8013124:	0801b78c 	.word	0x0801b78c
 8013128:	2400f26d 	.word	0x2400f26d
 801312c:	2400f234 	.word	0x2400f234

08013130 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013130:	b590      	push	{r4, r7, lr}
 8013132:	b08b      	sub	sp, #44	; 0x2c
 8013134:	af04      	add	r7, sp, #16
 8013136:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013138:	4b6f      	ldr	r3, [pc, #444]	; (80132f8 <tcp_listen_input+0x1c8>)
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	f003 0304 	and.w	r3, r3, #4
 8013140:	2b00      	cmp	r3, #0
 8013142:	f040 80d2 	bne.w	80132ea <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d106      	bne.n	801315a <tcp_listen_input+0x2a>
 801314c:	4b6b      	ldr	r3, [pc, #428]	; (80132fc <tcp_listen_input+0x1cc>)
 801314e:	f240 2281 	movw	r2, #641	; 0x281
 8013152:	496b      	ldr	r1, [pc, #428]	; (8013300 <tcp_listen_input+0x1d0>)
 8013154:	486b      	ldr	r0, [pc, #428]	; (8013304 <tcp_listen_input+0x1d4>)
 8013156:	f004 fddd 	bl	8017d14 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801315a:	4b67      	ldr	r3, [pc, #412]	; (80132f8 <tcp_listen_input+0x1c8>)
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	f003 0310 	and.w	r3, r3, #16
 8013162:	2b00      	cmp	r3, #0
 8013164:	d019      	beq.n	801319a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013166:	4b68      	ldr	r3, [pc, #416]	; (8013308 <tcp_listen_input+0x1d8>)
 8013168:	6819      	ldr	r1, [r3, #0]
 801316a:	4b68      	ldr	r3, [pc, #416]	; (801330c <tcp_listen_input+0x1dc>)
 801316c:	881b      	ldrh	r3, [r3, #0]
 801316e:	461a      	mov	r2, r3
 8013170:	4b67      	ldr	r3, [pc, #412]	; (8013310 <tcp_listen_input+0x1e0>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013176:	4b67      	ldr	r3, [pc, #412]	; (8013314 <tcp_listen_input+0x1e4>)
 8013178:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801317a:	885b      	ldrh	r3, [r3, #2]
 801317c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801317e:	4a65      	ldr	r2, [pc, #404]	; (8013314 <tcp_listen_input+0x1e4>)
 8013180:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013182:	8812      	ldrh	r2, [r2, #0]
 8013184:	b292      	uxth	r2, r2
 8013186:	9202      	str	r2, [sp, #8]
 8013188:	9301      	str	r3, [sp, #4]
 801318a:	4b63      	ldr	r3, [pc, #396]	; (8013318 <tcp_listen_input+0x1e8>)
 801318c:	9300      	str	r3, [sp, #0]
 801318e:	4b63      	ldr	r3, [pc, #396]	; (801331c <tcp_listen_input+0x1ec>)
 8013190:	4602      	mov	r2, r0
 8013192:	6878      	ldr	r0, [r7, #4]
 8013194:	f003 fbd8 	bl	8016948 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013198:	e0a9      	b.n	80132ee <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801319a:	4b57      	ldr	r3, [pc, #348]	; (80132f8 <tcp_listen_input+0x1c8>)
 801319c:	781b      	ldrb	r3, [r3, #0]
 801319e:	f003 0302 	and.w	r3, r3, #2
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	f000 80a3 	beq.w	80132ee <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	7d5b      	ldrb	r3, [r3, #21]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ff f859 	bl	8012264 <tcp_alloc>
 80131b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80131b4:	697b      	ldr	r3, [r7, #20]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d111      	bne.n	80131de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	699b      	ldr	r3, [r3, #24]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d00a      	beq.n	80131d8 <tcp_listen_input+0xa8>
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	699b      	ldr	r3, [r3, #24]
 80131c6:	687a      	ldr	r2, [r7, #4]
 80131c8:	6910      	ldr	r0, [r2, #16]
 80131ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80131ce:	2100      	movs	r1, #0
 80131d0:	4798      	blx	r3
 80131d2:	4603      	mov	r3, r0
 80131d4:	73bb      	strb	r3, [r7, #14]
      return;
 80131d6:	e08b      	b.n	80132f0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80131d8:	23f0      	movs	r3, #240	; 0xf0
 80131da:	73bb      	strb	r3, [r7, #14]
      return;
 80131dc:	e088      	b.n	80132f0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80131de:	4b50      	ldr	r3, [pc, #320]	; (8013320 <tcp_listen_input+0x1f0>)
 80131e0:	695a      	ldr	r2, [r3, #20]
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80131e6:	4b4e      	ldr	r3, [pc, #312]	; (8013320 <tcp_listen_input+0x1f0>)
 80131e8:	691a      	ldr	r2, [r3, #16]
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	8ada      	ldrh	r2, [r3, #22]
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80131f6:	4b47      	ldr	r3, [pc, #284]	; (8013314 <tcp_listen_input+0x1e4>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	881b      	ldrh	r3, [r3, #0]
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2203      	movs	r2, #3
 8013206:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013208:	4b41      	ldr	r3, [pc, #260]	; (8013310 <tcp_listen_input+0x1e0>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	1c5a      	adds	r2, r3, #1
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013216:	697b      	ldr	r3, [r7, #20]
 8013218:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801321a:	6978      	ldr	r0, [r7, #20]
 801321c:	f7ff fa58 	bl	80126d0 <tcp_next_iss>
 8013220:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	693a      	ldr	r2, [r7, #16]
 8013226:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	693a      	ldr	r2, [r7, #16]
 801322c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801322e:	697b      	ldr	r3, [r7, #20]
 8013230:	693a      	ldr	r2, [r7, #16]
 8013232:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013234:	697b      	ldr	r3, [r7, #20]
 8013236:	693a      	ldr	r2, [r7, #16]
 8013238:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801323a:	4b35      	ldr	r3, [pc, #212]	; (8013310 <tcp_listen_input+0x1e0>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	1e5a      	subs	r2, r3, #1
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	691a      	ldr	r2, [r3, #16]
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	7a5b      	ldrb	r3, [r3, #9]
 8013256:	f003 030c 	and.w	r3, r3, #12
 801325a:	b2da      	uxtb	r2, r3
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	7a1a      	ldrb	r2, [r3, #8]
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013268:	4b2e      	ldr	r3, [pc, #184]	; (8013324 <tcp_listen_input+0x1f4>)
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	697b      	ldr	r3, [r7, #20]
 801326e:	60da      	str	r2, [r3, #12]
 8013270:	4a2c      	ldr	r2, [pc, #176]	; (8013324 <tcp_listen_input+0x1f4>)
 8013272:	697b      	ldr	r3, [r7, #20]
 8013274:	6013      	str	r3, [r2, #0]
 8013276:	f003 fee1 	bl	801703c <tcp_timer_needed>
 801327a:	4b2b      	ldr	r3, [pc, #172]	; (8013328 <tcp_listen_input+0x1f8>)
 801327c:	2201      	movs	r2, #1
 801327e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013280:	6978      	ldr	r0, [r7, #20]
 8013282:	f001 fd8f 	bl	8014da4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013286:	4b23      	ldr	r3, [pc, #140]	; (8013314 <tcp_listen_input+0x1e4>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	89db      	ldrh	r3, [r3, #14]
 801328c:	b29a      	uxth	r2, r3
 801328e:	697b      	ldr	r3, [r7, #20]
 8013290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013294:	697b      	ldr	r3, [r7, #20]
 8013296:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801329a:	697b      	ldr	r3, [r7, #20]
 801329c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80132a4:	697b      	ldr	r3, [r7, #20]
 80132a6:	3304      	adds	r3, #4
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fa fb0d 	bl	800d8c8 <ip4_route>
 80132ae:	4601      	mov	r1, r0
 80132b0:	697b      	ldr	r3, [r7, #20]
 80132b2:	3304      	adds	r3, #4
 80132b4:	461a      	mov	r2, r3
 80132b6:	4620      	mov	r0, r4
 80132b8:	f7ff fa30 	bl	801271c <tcp_eff_send_mss_netif>
 80132bc:	4603      	mov	r3, r0
 80132be:	461a      	mov	r2, r3
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80132c4:	2112      	movs	r1, #18
 80132c6:	6978      	ldr	r0, [r7, #20]
 80132c8:	f002 fc9c 	bl	8015c04 <tcp_enqueue_flags>
 80132cc:	4603      	mov	r3, r0
 80132ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80132d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d004      	beq.n	80132e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80132d8:	2100      	movs	r1, #0
 80132da:	6978      	ldr	r0, [r7, #20]
 80132dc:	f7fd ff04 	bl	80110e8 <tcp_abandon>
      return;
 80132e0:	e006      	b.n	80132f0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80132e2:	6978      	ldr	r0, [r7, #20]
 80132e4:	f002 fd7c 	bl	8015de0 <tcp_output>
  return;
 80132e8:	e001      	b.n	80132ee <tcp_listen_input+0x1be>
    return;
 80132ea:	bf00      	nop
 80132ec:	e000      	b.n	80132f0 <tcp_listen_input+0x1c0>
  return;
 80132ee:	bf00      	nop
}
 80132f0:	371c      	adds	r7, #28
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd90      	pop	{r4, r7, pc}
 80132f6:	bf00      	nop
 80132f8:	2400f26c 	.word	0x2400f26c
 80132fc:	0801b6fc 	.word	0x0801b6fc
 8013300:	0801b938 	.word	0x0801b938
 8013304:	0801b78c 	.word	0x0801b78c
 8013308:	2400f264 	.word	0x2400f264
 801330c:	2400f26a 	.word	0x2400f26a
 8013310:	2400f260 	.word	0x2400f260
 8013314:	2400f250 	.word	0x2400f250
 8013318:	24008768 	.word	0x24008768
 801331c:	2400876c 	.word	0x2400876c
 8013320:	24008758 	.word	0x24008758
 8013324:	2400f234 	.word	0x2400f234
 8013328:	2400f23c 	.word	0x2400f23c

0801332c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b086      	sub	sp, #24
 8013330:	af04      	add	r7, sp, #16
 8013332:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013334:	4b2f      	ldr	r3, [pc, #188]	; (80133f4 <tcp_timewait_input+0xc8>)
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 0304 	and.w	r3, r3, #4
 801333c:	2b00      	cmp	r3, #0
 801333e:	d153      	bne.n	80133e8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d106      	bne.n	8013354 <tcp_timewait_input+0x28>
 8013346:	4b2c      	ldr	r3, [pc, #176]	; (80133f8 <tcp_timewait_input+0xcc>)
 8013348:	f240 22ee 	movw	r2, #750	; 0x2ee
 801334c:	492b      	ldr	r1, [pc, #172]	; (80133fc <tcp_timewait_input+0xd0>)
 801334e:	482c      	ldr	r0, [pc, #176]	; (8013400 <tcp_timewait_input+0xd4>)
 8013350:	f004 fce0 	bl	8017d14 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013354:	4b27      	ldr	r3, [pc, #156]	; (80133f4 <tcp_timewait_input+0xc8>)
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f003 0302 	and.w	r3, r3, #2
 801335c:	2b00      	cmp	r3, #0
 801335e:	d02a      	beq.n	80133b6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013360:	4b28      	ldr	r3, [pc, #160]	; (8013404 <tcp_timewait_input+0xd8>)
 8013362:	681a      	ldr	r2, [r3, #0]
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013368:	1ad3      	subs	r3, r2, r3
 801336a:	2b00      	cmp	r3, #0
 801336c:	db2d      	blt.n	80133ca <tcp_timewait_input+0x9e>
 801336e:	4b25      	ldr	r3, [pc, #148]	; (8013404 <tcp_timewait_input+0xd8>)
 8013370:	681a      	ldr	r2, [r3, #0]
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013376:	6879      	ldr	r1, [r7, #4]
 8013378:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801337a:	440b      	add	r3, r1
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	2b00      	cmp	r3, #0
 8013380:	dc23      	bgt.n	80133ca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013382:	4b21      	ldr	r3, [pc, #132]	; (8013408 <tcp_timewait_input+0xdc>)
 8013384:	6819      	ldr	r1, [r3, #0]
 8013386:	4b21      	ldr	r3, [pc, #132]	; (801340c <tcp_timewait_input+0xe0>)
 8013388:	881b      	ldrh	r3, [r3, #0]
 801338a:	461a      	mov	r2, r3
 801338c:	4b1d      	ldr	r3, [pc, #116]	; (8013404 <tcp_timewait_input+0xd8>)
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013392:	4b1f      	ldr	r3, [pc, #124]	; (8013410 <tcp_timewait_input+0xe4>)
 8013394:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013396:	885b      	ldrh	r3, [r3, #2]
 8013398:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801339a:	4a1d      	ldr	r2, [pc, #116]	; (8013410 <tcp_timewait_input+0xe4>)
 801339c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801339e:	8812      	ldrh	r2, [r2, #0]
 80133a0:	b292      	uxth	r2, r2
 80133a2:	9202      	str	r2, [sp, #8]
 80133a4:	9301      	str	r3, [sp, #4]
 80133a6:	4b1b      	ldr	r3, [pc, #108]	; (8013414 <tcp_timewait_input+0xe8>)
 80133a8:	9300      	str	r3, [sp, #0]
 80133aa:	4b1b      	ldr	r3, [pc, #108]	; (8013418 <tcp_timewait_input+0xec>)
 80133ac:	4602      	mov	r2, r0
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f003 faca 	bl	8016948 <tcp_rst>
      return;
 80133b4:	e01b      	b.n	80133ee <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80133b6:	4b0f      	ldr	r3, [pc, #60]	; (80133f4 <tcp_timewait_input+0xc8>)
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	f003 0301 	and.w	r3, r3, #1
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d003      	beq.n	80133ca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80133c2:	4b16      	ldr	r3, [pc, #88]	; (801341c <tcp_timewait_input+0xf0>)
 80133c4:	681a      	ldr	r2, [r3, #0]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80133ca:	4b10      	ldr	r3, [pc, #64]	; (801340c <tcp_timewait_input+0xe0>)
 80133cc:	881b      	ldrh	r3, [r3, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d00c      	beq.n	80133ec <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	8b5b      	ldrh	r3, [r3, #26]
 80133d6:	f043 0302 	orr.w	r3, r3, #2
 80133da:	b29a      	uxth	r2, r3
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f002 fcfd 	bl	8015de0 <tcp_output>
  }
  return;
 80133e6:	e001      	b.n	80133ec <tcp_timewait_input+0xc0>
    return;
 80133e8:	bf00      	nop
 80133ea:	e000      	b.n	80133ee <tcp_timewait_input+0xc2>
  return;
 80133ec:	bf00      	nop
}
 80133ee:	3708      	adds	r7, #8
 80133f0:	46bd      	mov	sp, r7
 80133f2:	bd80      	pop	{r7, pc}
 80133f4:	2400f26c 	.word	0x2400f26c
 80133f8:	0801b6fc 	.word	0x0801b6fc
 80133fc:	0801b958 	.word	0x0801b958
 8013400:	0801b78c 	.word	0x0801b78c
 8013404:	2400f260 	.word	0x2400f260
 8013408:	2400f264 	.word	0x2400f264
 801340c:	2400f26a 	.word	0x2400f26a
 8013410:	2400f250 	.word	0x2400f250
 8013414:	24008768 	.word	0x24008768
 8013418:	2400876c 	.word	0x2400876c
 801341c:	2400f228 	.word	0x2400f228

08013420 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013420:	b590      	push	{r4, r7, lr}
 8013422:	b08d      	sub	sp, #52	; 0x34
 8013424:	af04      	add	r7, sp, #16
 8013426:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013428:	2300      	movs	r3, #0
 801342a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801342c:	2300      	movs	r3, #0
 801342e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d106      	bne.n	8013444 <tcp_process+0x24>
 8013436:	4b9d      	ldr	r3, [pc, #628]	; (80136ac <tcp_process+0x28c>)
 8013438:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801343c:	499c      	ldr	r1, [pc, #624]	; (80136b0 <tcp_process+0x290>)
 801343e:	489d      	ldr	r0, [pc, #628]	; (80136b4 <tcp_process+0x294>)
 8013440:	f004 fc68 	bl	8017d14 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013444:	4b9c      	ldr	r3, [pc, #624]	; (80136b8 <tcp_process+0x298>)
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	f003 0304 	and.w	r3, r3, #4
 801344c:	2b00      	cmp	r3, #0
 801344e:	d04e      	beq.n	80134ee <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	7d1b      	ldrb	r3, [r3, #20]
 8013454:	2b02      	cmp	r3, #2
 8013456:	d108      	bne.n	801346a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801345c:	4b97      	ldr	r3, [pc, #604]	; (80136bc <tcp_process+0x29c>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	429a      	cmp	r2, r3
 8013462:	d123      	bne.n	80134ac <tcp_process+0x8c>
        acceptable = 1;
 8013464:	2301      	movs	r3, #1
 8013466:	76fb      	strb	r3, [r7, #27]
 8013468:	e020      	b.n	80134ac <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801346e:	4b94      	ldr	r3, [pc, #592]	; (80136c0 <tcp_process+0x2a0>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	429a      	cmp	r2, r3
 8013474:	d102      	bne.n	801347c <tcp_process+0x5c>
        acceptable = 1;
 8013476:	2301      	movs	r3, #1
 8013478:	76fb      	strb	r3, [r7, #27]
 801347a:	e017      	b.n	80134ac <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801347c:	4b90      	ldr	r3, [pc, #576]	; (80136c0 <tcp_process+0x2a0>)
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013484:	1ad3      	subs	r3, r2, r3
 8013486:	2b00      	cmp	r3, #0
 8013488:	db10      	blt.n	80134ac <tcp_process+0x8c>
 801348a:	4b8d      	ldr	r3, [pc, #564]	; (80136c0 <tcp_process+0x2a0>)
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013492:	6879      	ldr	r1, [r7, #4]
 8013494:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013496:	440b      	add	r3, r1
 8013498:	1ad3      	subs	r3, r2, r3
 801349a:	2b00      	cmp	r3, #0
 801349c:	dc06      	bgt.n	80134ac <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	8b5b      	ldrh	r3, [r3, #26]
 80134a2:	f043 0302 	orr.w	r3, r3, #2
 80134a6:	b29a      	uxth	r2, r3
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80134ac:	7efb      	ldrb	r3, [r7, #27]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d01b      	beq.n	80134ea <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	7d1b      	ldrb	r3, [r3, #20]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d106      	bne.n	80134c8 <tcp_process+0xa8>
 80134ba:	4b7c      	ldr	r3, [pc, #496]	; (80136ac <tcp_process+0x28c>)
 80134bc:	f44f 724e 	mov.w	r2, #824	; 0x338
 80134c0:	4980      	ldr	r1, [pc, #512]	; (80136c4 <tcp_process+0x2a4>)
 80134c2:	487c      	ldr	r0, [pc, #496]	; (80136b4 <tcp_process+0x294>)
 80134c4:	f004 fc26 	bl	8017d14 <iprintf>
      recv_flags |= TF_RESET;
 80134c8:	4b7f      	ldr	r3, [pc, #508]	; (80136c8 <tcp_process+0x2a8>)
 80134ca:	781b      	ldrb	r3, [r3, #0]
 80134cc:	f043 0308 	orr.w	r3, r3, #8
 80134d0:	b2da      	uxtb	r2, r3
 80134d2:	4b7d      	ldr	r3, [pc, #500]	; (80136c8 <tcp_process+0x2a8>)
 80134d4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	8b5b      	ldrh	r3, [r3, #26]
 80134da:	f023 0301 	bic.w	r3, r3, #1
 80134de:	b29a      	uxth	r2, r3
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80134e4:	f06f 030d 	mvn.w	r3, #13
 80134e8:	e37a      	b.n	8013be0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80134ea:	2300      	movs	r3, #0
 80134ec:	e378      	b.n	8013be0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80134ee:	4b72      	ldr	r3, [pc, #456]	; (80136b8 <tcp_process+0x298>)
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	f003 0302 	and.w	r3, r3, #2
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d010      	beq.n	801351c <tcp_process+0xfc>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	7d1b      	ldrb	r3, [r3, #20]
 80134fe:	2b02      	cmp	r3, #2
 8013500:	d00c      	beq.n	801351c <tcp_process+0xfc>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	7d1b      	ldrb	r3, [r3, #20]
 8013506:	2b03      	cmp	r3, #3
 8013508:	d008      	beq.n	801351c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	8b5b      	ldrh	r3, [r3, #26]
 801350e:	f043 0302 	orr.w	r3, r3, #2
 8013512:	b29a      	uxth	r2, r3
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013518:	2300      	movs	r3, #0
 801351a:	e361      	b.n	8013be0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	8b5b      	ldrh	r3, [r3, #26]
 8013520:	f003 0310 	and.w	r3, r3, #16
 8013524:	2b00      	cmp	r3, #0
 8013526:	d103      	bne.n	8013530 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013528:	4b68      	ldr	r3, [pc, #416]	; (80136cc <tcp_process+0x2ac>)
 801352a:	681a      	ldr	r2, [r3, #0]
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2200      	movs	r2, #0
 8013534:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f001 fc2f 	bl	8014da4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	7d1b      	ldrb	r3, [r3, #20]
 801354a:	3b02      	subs	r3, #2
 801354c:	2b07      	cmp	r3, #7
 801354e:	f200 8337 	bhi.w	8013bc0 <tcp_process+0x7a0>
 8013552:	a201      	add	r2, pc, #4	; (adr r2, 8013558 <tcp_process+0x138>)
 8013554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013558:	08013579 	.word	0x08013579
 801355c:	080137a9 	.word	0x080137a9
 8013560:	08013921 	.word	0x08013921
 8013564:	0801394b 	.word	0x0801394b
 8013568:	08013a6f 	.word	0x08013a6f
 801356c:	08013921 	.word	0x08013921
 8013570:	08013afb 	.word	0x08013afb
 8013574:	08013b8b 	.word	0x08013b8b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013578:	4b4f      	ldr	r3, [pc, #316]	; (80136b8 <tcp_process+0x298>)
 801357a:	781b      	ldrb	r3, [r3, #0]
 801357c:	f003 0310 	and.w	r3, r3, #16
 8013580:	2b00      	cmp	r3, #0
 8013582:	f000 80e4 	beq.w	801374e <tcp_process+0x32e>
 8013586:	4b4c      	ldr	r3, [pc, #304]	; (80136b8 <tcp_process+0x298>)
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	f003 0302 	and.w	r3, r3, #2
 801358e:	2b00      	cmp	r3, #0
 8013590:	f000 80dd 	beq.w	801374e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013598:	1c5a      	adds	r2, r3, #1
 801359a:	4b48      	ldr	r3, [pc, #288]	; (80136bc <tcp_process+0x29c>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	429a      	cmp	r2, r3
 80135a0:	f040 80d5 	bne.w	801374e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80135a4:	4b46      	ldr	r3, [pc, #280]	; (80136c0 <tcp_process+0x2a0>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	1c5a      	adds	r2, r3, #1
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80135b6:	4b41      	ldr	r3, [pc, #260]	; (80136bc <tcp_process+0x29c>)
 80135b8:	681a      	ldr	r2, [r3, #0]
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80135be:	4b44      	ldr	r3, [pc, #272]	; (80136d0 <tcp_process+0x2b0>)
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	89db      	ldrh	r3, [r3, #14]
 80135c4:	b29a      	uxth	r2, r3
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80135d8:	4b39      	ldr	r3, [pc, #228]	; (80136c0 <tcp_process+0x2a0>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	1e5a      	subs	r2, r3, #1
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2204      	movs	r2, #4
 80135e6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	3304      	adds	r3, #4
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7fa f969 	bl	800d8c8 <ip4_route>
 80135f6:	4601      	mov	r1, r0
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	3304      	adds	r3, #4
 80135fc:	461a      	mov	r2, r3
 80135fe:	4620      	mov	r0, r4
 8013600:	f7ff f88c 	bl	801271c <tcp_eff_send_mss_netif>
 8013604:	4603      	mov	r3, r0
 8013606:	461a      	mov	r2, r3
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013610:	009a      	lsls	r2, r3, #2
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013616:	005b      	lsls	r3, r3, #1
 8013618:	f241 111c 	movw	r1, #4380	; 0x111c
 801361c:	428b      	cmp	r3, r1
 801361e:	bf38      	it	cc
 8013620:	460b      	movcc	r3, r1
 8013622:	429a      	cmp	r2, r3
 8013624:	d204      	bcs.n	8013630 <tcp_process+0x210>
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801362a:	009b      	lsls	r3, r3, #2
 801362c:	b29b      	uxth	r3, r3
 801362e:	e00d      	b.n	801364c <tcp_process+0x22c>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013634:	005b      	lsls	r3, r3, #1
 8013636:	f241 121c 	movw	r2, #4380	; 0x111c
 801363a:	4293      	cmp	r3, r2
 801363c:	d904      	bls.n	8013648 <tcp_process+0x228>
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013642:	005b      	lsls	r3, r3, #1
 8013644:	b29b      	uxth	r3, r3
 8013646:	e001      	b.n	801364c <tcp_process+0x22c>
 8013648:	f241 131c 	movw	r3, #4380	; 0x111c
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013658:	2b00      	cmp	r3, #0
 801365a:	d106      	bne.n	801366a <tcp_process+0x24a>
 801365c:	4b13      	ldr	r3, [pc, #76]	; (80136ac <tcp_process+0x28c>)
 801365e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013662:	491c      	ldr	r1, [pc, #112]	; (80136d4 <tcp_process+0x2b4>)
 8013664:	4813      	ldr	r0, [pc, #76]	; (80136b4 <tcp_process+0x294>)
 8013666:	f004 fb55 	bl	8017d14 <iprintf>
        --pcb->snd_queuelen;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013670:	3b01      	subs	r3, #1
 8013672:	b29a      	uxth	r2, r3
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801367e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d12a      	bne.n	80136dc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801368a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d106      	bne.n	80136a0 <tcp_process+0x280>
 8013692:	4b06      	ldr	r3, [pc, #24]	; (80136ac <tcp_process+0x28c>)
 8013694:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013698:	490f      	ldr	r1, [pc, #60]	; (80136d8 <tcp_process+0x2b8>)
 801369a:	4806      	ldr	r0, [pc, #24]	; (80136b4 <tcp_process+0x294>)
 801369c:	f004 fb3a 	bl	8017d14 <iprintf>
          pcb->unsent = rseg->next;
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	681a      	ldr	r2, [r3, #0]
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80136a8:	e01c      	b.n	80136e4 <tcp_process+0x2c4>
 80136aa:	bf00      	nop
 80136ac:	0801b6fc 	.word	0x0801b6fc
 80136b0:	0801b978 	.word	0x0801b978
 80136b4:	0801b78c 	.word	0x0801b78c
 80136b8:	2400f26c 	.word	0x2400f26c
 80136bc:	2400f264 	.word	0x2400f264
 80136c0:	2400f260 	.word	0x2400f260
 80136c4:	0801b994 	.word	0x0801b994
 80136c8:	2400f26d 	.word	0x2400f26d
 80136cc:	2400f228 	.word	0x2400f228
 80136d0:	2400f250 	.word	0x2400f250
 80136d4:	0801b9b4 	.word	0x0801b9b4
 80136d8:	0801b9cc 	.word	0x0801b9cc
        } else {
          pcb->unacked = rseg->next;
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	681a      	ldr	r2, [r3, #0]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80136e4:	69f8      	ldr	r0, [r7, #28]
 80136e6:	f7fe fc54 	bl	8011f92 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d104      	bne.n	80136fc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136f8:	861a      	strh	r2, [r3, #48]	; 0x30
 80136fa:	e006      	b.n	801370a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2200      	movs	r2, #0
 8013700:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	2200      	movs	r2, #0
 8013706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00a      	beq.n	801372a <tcp_process+0x30a>
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801371a:	687a      	ldr	r2, [r7, #4]
 801371c:	6910      	ldr	r0, [r2, #16]
 801371e:	2200      	movs	r2, #0
 8013720:	6879      	ldr	r1, [r7, #4]
 8013722:	4798      	blx	r3
 8013724:	4603      	mov	r3, r0
 8013726:	76bb      	strb	r3, [r7, #26]
 8013728:	e001      	b.n	801372e <tcp_process+0x30e>
 801372a:	2300      	movs	r3, #0
 801372c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801372e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013732:	f113 0f0d 	cmn.w	r3, #13
 8013736:	d102      	bne.n	801373e <tcp_process+0x31e>
          return ERR_ABRT;
 8013738:	f06f 030c 	mvn.w	r3, #12
 801373c:	e250      	b.n	8013be0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	8b5b      	ldrh	r3, [r3, #26]
 8013742:	f043 0302 	orr.w	r3, r3, #2
 8013746:	b29a      	uxth	r2, r3
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801374c:	e23a      	b.n	8013bc4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801374e:	4b98      	ldr	r3, [pc, #608]	; (80139b0 <tcp_process+0x590>)
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	f003 0310 	and.w	r3, r3, #16
 8013756:	2b00      	cmp	r3, #0
 8013758:	f000 8234 	beq.w	8013bc4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801375c:	4b95      	ldr	r3, [pc, #596]	; (80139b4 <tcp_process+0x594>)
 801375e:	6819      	ldr	r1, [r3, #0]
 8013760:	4b95      	ldr	r3, [pc, #596]	; (80139b8 <tcp_process+0x598>)
 8013762:	881b      	ldrh	r3, [r3, #0]
 8013764:	461a      	mov	r2, r3
 8013766:	4b95      	ldr	r3, [pc, #596]	; (80139bc <tcp_process+0x59c>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801376c:	4b94      	ldr	r3, [pc, #592]	; (80139c0 <tcp_process+0x5a0>)
 801376e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013770:	885b      	ldrh	r3, [r3, #2]
 8013772:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013774:	4a92      	ldr	r2, [pc, #584]	; (80139c0 <tcp_process+0x5a0>)
 8013776:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013778:	8812      	ldrh	r2, [r2, #0]
 801377a:	b292      	uxth	r2, r2
 801377c:	9202      	str	r2, [sp, #8]
 801377e:	9301      	str	r3, [sp, #4]
 8013780:	4b90      	ldr	r3, [pc, #576]	; (80139c4 <tcp_process+0x5a4>)
 8013782:	9300      	str	r3, [sp, #0]
 8013784:	4b90      	ldr	r3, [pc, #576]	; (80139c8 <tcp_process+0x5a8>)
 8013786:	4602      	mov	r2, r0
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f003 f8dd 	bl	8016948 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013794:	2b05      	cmp	r3, #5
 8013796:	f200 8215 	bhi.w	8013bc4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	2200      	movs	r2, #0
 801379e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80137a0:	6878      	ldr	r0, [r7, #4]
 80137a2:	f002 fea7 	bl	80164f4 <tcp_rexmit_rto>
      break;
 80137a6:	e20d      	b.n	8013bc4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80137a8:	4b81      	ldr	r3, [pc, #516]	; (80139b0 <tcp_process+0x590>)
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	f003 0310 	and.w	r3, r3, #16
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	f000 80a1 	beq.w	80138f8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80137b6:	4b7f      	ldr	r3, [pc, #508]	; (80139b4 <tcp_process+0x594>)
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80137be:	1ad3      	subs	r3, r2, r3
 80137c0:	3b01      	subs	r3, #1
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	db7e      	blt.n	80138c4 <tcp_process+0x4a4>
 80137c6:	4b7b      	ldr	r3, [pc, #492]	; (80139b4 <tcp_process+0x594>)
 80137c8:	681a      	ldr	r2, [r3, #0]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	dc77      	bgt.n	80138c4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2204      	movs	r2, #4
 80137d8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d102      	bne.n	80137e8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80137e2:	23fa      	movs	r3, #250	; 0xfa
 80137e4:	76bb      	strb	r3, [r7, #26]
 80137e6:	e01d      	b.n	8013824 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137ec:	699b      	ldr	r3, [r3, #24]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d106      	bne.n	8013800 <tcp_process+0x3e0>
 80137f2:	4b76      	ldr	r3, [pc, #472]	; (80139cc <tcp_process+0x5ac>)
 80137f4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80137f8:	4975      	ldr	r1, [pc, #468]	; (80139d0 <tcp_process+0x5b0>)
 80137fa:	4876      	ldr	r0, [pc, #472]	; (80139d4 <tcp_process+0x5b4>)
 80137fc:	f004 fa8a 	bl	8017d14 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013804:	699b      	ldr	r3, [r3, #24]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d00a      	beq.n	8013820 <tcp_process+0x400>
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801380e:	699b      	ldr	r3, [r3, #24]
 8013810:	687a      	ldr	r2, [r7, #4]
 8013812:	6910      	ldr	r0, [r2, #16]
 8013814:	2200      	movs	r2, #0
 8013816:	6879      	ldr	r1, [r7, #4]
 8013818:	4798      	blx	r3
 801381a:	4603      	mov	r3, r0
 801381c:	76bb      	strb	r3, [r7, #26]
 801381e:	e001      	b.n	8013824 <tcp_process+0x404>
 8013820:	23f0      	movs	r3, #240	; 0xf0
 8013822:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013824:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d00a      	beq.n	8013842 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801382c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013830:	f113 0f0d 	cmn.w	r3, #13
 8013834:	d002      	beq.n	801383c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f7fd fd14 	bl	8011264 <tcp_abort>
            }
            return ERR_ABRT;
 801383c:	f06f 030c 	mvn.w	r3, #12
 8013840:	e1ce      	b.n	8013be0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 fae0 	bl	8013e08 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013848:	4b63      	ldr	r3, [pc, #396]	; (80139d8 <tcp_process+0x5b8>)
 801384a:	881b      	ldrh	r3, [r3, #0]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d005      	beq.n	801385c <tcp_process+0x43c>
            recv_acked--;
 8013850:	4b61      	ldr	r3, [pc, #388]	; (80139d8 <tcp_process+0x5b8>)
 8013852:	881b      	ldrh	r3, [r3, #0]
 8013854:	3b01      	subs	r3, #1
 8013856:	b29a      	uxth	r2, r3
 8013858:	4b5f      	ldr	r3, [pc, #380]	; (80139d8 <tcp_process+0x5b8>)
 801385a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013860:	009a      	lsls	r2, r3, #2
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013866:	005b      	lsls	r3, r3, #1
 8013868:	f241 111c 	movw	r1, #4380	; 0x111c
 801386c:	428b      	cmp	r3, r1
 801386e:	bf38      	it	cc
 8013870:	460b      	movcc	r3, r1
 8013872:	429a      	cmp	r2, r3
 8013874:	d204      	bcs.n	8013880 <tcp_process+0x460>
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801387a:	009b      	lsls	r3, r3, #2
 801387c:	b29b      	uxth	r3, r3
 801387e:	e00d      	b.n	801389c <tcp_process+0x47c>
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013884:	005b      	lsls	r3, r3, #1
 8013886:	f241 121c 	movw	r2, #4380	; 0x111c
 801388a:	4293      	cmp	r3, r2
 801388c:	d904      	bls.n	8013898 <tcp_process+0x478>
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013892:	005b      	lsls	r3, r3, #1
 8013894:	b29b      	uxth	r3, r3
 8013896:	e001      	b.n	801389c <tcp_process+0x47c>
 8013898:	f241 131c 	movw	r3, #4380	; 0x111c
 801389c:	687a      	ldr	r2, [r7, #4]
 801389e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80138a2:	4b4e      	ldr	r3, [pc, #312]	; (80139dc <tcp_process+0x5bc>)
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	f003 0320 	and.w	r3, r3, #32
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d037      	beq.n	801391e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	8b5b      	ldrh	r3, [r3, #26]
 80138b2:	f043 0302 	orr.w	r3, r3, #2
 80138b6:	b29a      	uxth	r2, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2207      	movs	r2, #7
 80138c0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80138c2:	e02c      	b.n	801391e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138c4:	4b3b      	ldr	r3, [pc, #236]	; (80139b4 <tcp_process+0x594>)
 80138c6:	6819      	ldr	r1, [r3, #0]
 80138c8:	4b3b      	ldr	r3, [pc, #236]	; (80139b8 <tcp_process+0x598>)
 80138ca:	881b      	ldrh	r3, [r3, #0]
 80138cc:	461a      	mov	r2, r3
 80138ce:	4b3b      	ldr	r3, [pc, #236]	; (80139bc <tcp_process+0x59c>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138d4:	4b3a      	ldr	r3, [pc, #232]	; (80139c0 <tcp_process+0x5a0>)
 80138d6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138d8:	885b      	ldrh	r3, [r3, #2]
 80138da:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138dc:	4a38      	ldr	r2, [pc, #224]	; (80139c0 <tcp_process+0x5a0>)
 80138de:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138e0:	8812      	ldrh	r2, [r2, #0]
 80138e2:	b292      	uxth	r2, r2
 80138e4:	9202      	str	r2, [sp, #8]
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	4b36      	ldr	r3, [pc, #216]	; (80139c4 <tcp_process+0x5a4>)
 80138ea:	9300      	str	r3, [sp, #0]
 80138ec:	4b36      	ldr	r3, [pc, #216]	; (80139c8 <tcp_process+0x5a8>)
 80138ee:	4602      	mov	r2, r0
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f003 f829 	bl	8016948 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80138f6:	e167      	b.n	8013bc8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80138f8:	4b2d      	ldr	r3, [pc, #180]	; (80139b0 <tcp_process+0x590>)
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	f003 0302 	and.w	r3, r3, #2
 8013900:	2b00      	cmp	r3, #0
 8013902:	f000 8161 	beq.w	8013bc8 <tcp_process+0x7a8>
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801390a:	1e5a      	subs	r2, r3, #1
 801390c:	4b2b      	ldr	r3, [pc, #172]	; (80139bc <tcp_process+0x59c>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	429a      	cmp	r2, r3
 8013912:	f040 8159 	bne.w	8013bc8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f002 fe0e 	bl	8016538 <tcp_rexmit>
      break;
 801391c:	e154      	b.n	8013bc8 <tcp_process+0x7a8>
 801391e:	e153      	b.n	8013bc8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 fa71 	bl	8013e08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013926:	4b2d      	ldr	r3, [pc, #180]	; (80139dc <tcp_process+0x5bc>)
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	f003 0320 	and.w	r3, r3, #32
 801392e:	2b00      	cmp	r3, #0
 8013930:	f000 814c 	beq.w	8013bcc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	8b5b      	ldrh	r3, [r3, #26]
 8013938:	f043 0302 	orr.w	r3, r3, #2
 801393c:	b29a      	uxth	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	2207      	movs	r2, #7
 8013946:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013948:	e140      	b.n	8013bcc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f000 fa5c 	bl	8013e08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013950:	4b22      	ldr	r3, [pc, #136]	; (80139dc <tcp_process+0x5bc>)
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	f003 0320 	and.w	r3, r3, #32
 8013958:	2b00      	cmp	r3, #0
 801395a:	d071      	beq.n	8013a40 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801395c:	4b14      	ldr	r3, [pc, #80]	; (80139b0 <tcp_process+0x590>)
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	f003 0310 	and.w	r3, r3, #16
 8013964:	2b00      	cmp	r3, #0
 8013966:	d060      	beq.n	8013a2a <tcp_process+0x60a>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801396c:	4b11      	ldr	r3, [pc, #68]	; (80139b4 <tcp_process+0x594>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	429a      	cmp	r2, r3
 8013972:	d15a      	bne.n	8013a2a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013978:	2b00      	cmp	r3, #0
 801397a:	d156      	bne.n	8013a2a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	8b5b      	ldrh	r3, [r3, #26]
 8013980:	f043 0302 	orr.w	r3, r3, #2
 8013984:	b29a      	uxth	r2, r3
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7fe fdbc 	bl	8012508 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013990:	4b13      	ldr	r3, [pc, #76]	; (80139e0 <tcp_process+0x5c0>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	687a      	ldr	r2, [r7, #4]
 8013996:	429a      	cmp	r2, r3
 8013998:	d105      	bne.n	80139a6 <tcp_process+0x586>
 801399a:	4b11      	ldr	r3, [pc, #68]	; (80139e0 <tcp_process+0x5c0>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	4a0f      	ldr	r2, [pc, #60]	; (80139e0 <tcp_process+0x5c0>)
 80139a2:	6013      	str	r3, [r2, #0]
 80139a4:	e02e      	b.n	8013a04 <tcp_process+0x5e4>
 80139a6:	4b0e      	ldr	r3, [pc, #56]	; (80139e0 <tcp_process+0x5c0>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	617b      	str	r3, [r7, #20]
 80139ac:	e027      	b.n	80139fe <tcp_process+0x5de>
 80139ae:	bf00      	nop
 80139b0:	2400f26c 	.word	0x2400f26c
 80139b4:	2400f264 	.word	0x2400f264
 80139b8:	2400f26a 	.word	0x2400f26a
 80139bc:	2400f260 	.word	0x2400f260
 80139c0:	2400f250 	.word	0x2400f250
 80139c4:	24008768 	.word	0x24008768
 80139c8:	2400876c 	.word	0x2400876c
 80139cc:	0801b6fc 	.word	0x0801b6fc
 80139d0:	0801b9e0 	.word	0x0801b9e0
 80139d4:	0801b78c 	.word	0x0801b78c
 80139d8:	2400f268 	.word	0x2400f268
 80139dc:	2400f26d 	.word	0x2400f26d
 80139e0:	2400f234 	.word	0x2400f234
 80139e4:	697b      	ldr	r3, [r7, #20]
 80139e6:	68db      	ldr	r3, [r3, #12]
 80139e8:	687a      	ldr	r2, [r7, #4]
 80139ea:	429a      	cmp	r2, r3
 80139ec:	d104      	bne.n	80139f8 <tcp_process+0x5d8>
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	68da      	ldr	r2, [r3, #12]
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	60da      	str	r2, [r3, #12]
 80139f6:	e005      	b.n	8013a04 <tcp_process+0x5e4>
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	617b      	str	r3, [r7, #20]
 80139fe:	697b      	ldr	r3, [r7, #20]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d1ef      	bne.n	80139e4 <tcp_process+0x5c4>
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	2200      	movs	r2, #0
 8013a08:	60da      	str	r2, [r3, #12]
 8013a0a:	4b77      	ldr	r3, [pc, #476]	; (8013be8 <tcp_process+0x7c8>)
 8013a0c:	2201      	movs	r2, #1
 8013a0e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	220a      	movs	r2, #10
 8013a14:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013a16:	4b75      	ldr	r3, [pc, #468]	; (8013bec <tcp_process+0x7cc>)
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	60da      	str	r2, [r3, #12]
 8013a1e:	4a73      	ldr	r2, [pc, #460]	; (8013bec <tcp_process+0x7cc>)
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6013      	str	r3, [r2, #0]
 8013a24:	f003 fb0a 	bl	801703c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013a28:	e0d2      	b.n	8013bd0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	8b5b      	ldrh	r3, [r3, #26]
 8013a2e:	f043 0302 	orr.w	r3, r3, #2
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2208      	movs	r2, #8
 8013a3c:	751a      	strb	r2, [r3, #20]
      break;
 8013a3e:	e0c7      	b.n	8013bd0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a40:	4b6b      	ldr	r3, [pc, #428]	; (8013bf0 <tcp_process+0x7d0>)
 8013a42:	781b      	ldrb	r3, [r3, #0]
 8013a44:	f003 0310 	and.w	r3, r3, #16
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	f000 80c1 	beq.w	8013bd0 <tcp_process+0x7b0>
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a52:	4b68      	ldr	r3, [pc, #416]	; (8013bf4 <tcp_process+0x7d4>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	429a      	cmp	r2, r3
 8013a58:	f040 80ba 	bne.w	8013bd0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	f040 80b5 	bne.w	8013bd0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	2206      	movs	r2, #6
 8013a6a:	751a      	strb	r2, [r3, #20]
      break;
 8013a6c:	e0b0      	b.n	8013bd0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f000 f9ca 	bl	8013e08 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a74:	4b60      	ldr	r3, [pc, #384]	; (8013bf8 <tcp_process+0x7d8>)
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	f003 0320 	and.w	r3, r3, #32
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f000 80a9 	beq.w	8013bd4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	8b5b      	ldrh	r3, [r3, #26]
 8013a86:	f043 0302 	orr.w	r3, r3, #2
 8013a8a:	b29a      	uxth	r2, r3
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013a90:	6878      	ldr	r0, [r7, #4]
 8013a92:	f7fe fd39 	bl	8012508 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013a96:	4b59      	ldr	r3, [pc, #356]	; (8013bfc <tcp_process+0x7dc>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	687a      	ldr	r2, [r7, #4]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d105      	bne.n	8013aac <tcp_process+0x68c>
 8013aa0:	4b56      	ldr	r3, [pc, #344]	; (8013bfc <tcp_process+0x7dc>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	68db      	ldr	r3, [r3, #12]
 8013aa6:	4a55      	ldr	r2, [pc, #340]	; (8013bfc <tcp_process+0x7dc>)
 8013aa8:	6013      	str	r3, [r2, #0]
 8013aaa:	e013      	b.n	8013ad4 <tcp_process+0x6b4>
 8013aac:	4b53      	ldr	r3, [pc, #332]	; (8013bfc <tcp_process+0x7dc>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	613b      	str	r3, [r7, #16]
 8013ab2:	e00c      	b.n	8013ace <tcp_process+0x6ae>
 8013ab4:	693b      	ldr	r3, [r7, #16]
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	687a      	ldr	r2, [r7, #4]
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d104      	bne.n	8013ac8 <tcp_process+0x6a8>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	68da      	ldr	r2, [r3, #12]
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	60da      	str	r2, [r3, #12]
 8013ac6:	e005      	b.n	8013ad4 <tcp_process+0x6b4>
 8013ac8:	693b      	ldr	r3, [r7, #16]
 8013aca:	68db      	ldr	r3, [r3, #12]
 8013acc:	613b      	str	r3, [r7, #16]
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d1ef      	bne.n	8013ab4 <tcp_process+0x694>
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	60da      	str	r2, [r3, #12]
 8013ada:	4b43      	ldr	r3, [pc, #268]	; (8013be8 <tcp_process+0x7c8>)
 8013adc:	2201      	movs	r2, #1
 8013ade:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	220a      	movs	r2, #10
 8013ae4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013ae6:	4b41      	ldr	r3, [pc, #260]	; (8013bec <tcp_process+0x7cc>)
 8013ae8:	681a      	ldr	r2, [r3, #0]
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	60da      	str	r2, [r3, #12]
 8013aee:	4a3f      	ldr	r2, [pc, #252]	; (8013bec <tcp_process+0x7cc>)
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6013      	str	r3, [r2, #0]
 8013af4:	f003 faa2 	bl	801703c <tcp_timer_needed>
      }
      break;
 8013af8:	e06c      	b.n	8013bd4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f000 f984 	bl	8013e08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013b00:	4b3b      	ldr	r3, [pc, #236]	; (8013bf0 <tcp_process+0x7d0>)
 8013b02:	781b      	ldrb	r3, [r3, #0]
 8013b04:	f003 0310 	and.w	r3, r3, #16
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d065      	beq.n	8013bd8 <tcp_process+0x7b8>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b10:	4b38      	ldr	r3, [pc, #224]	; (8013bf4 <tcp_process+0x7d4>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d15f      	bne.n	8013bd8 <tcp_process+0x7b8>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d15b      	bne.n	8013bd8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013b20:	6878      	ldr	r0, [r7, #4]
 8013b22:	f7fe fcf1 	bl	8012508 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013b26:	4b35      	ldr	r3, [pc, #212]	; (8013bfc <tcp_process+0x7dc>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	687a      	ldr	r2, [r7, #4]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d105      	bne.n	8013b3c <tcp_process+0x71c>
 8013b30:	4b32      	ldr	r3, [pc, #200]	; (8013bfc <tcp_process+0x7dc>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	68db      	ldr	r3, [r3, #12]
 8013b36:	4a31      	ldr	r2, [pc, #196]	; (8013bfc <tcp_process+0x7dc>)
 8013b38:	6013      	str	r3, [r2, #0]
 8013b3a:	e013      	b.n	8013b64 <tcp_process+0x744>
 8013b3c:	4b2f      	ldr	r3, [pc, #188]	; (8013bfc <tcp_process+0x7dc>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	60fb      	str	r3, [r7, #12]
 8013b42:	e00c      	b.n	8013b5e <tcp_process+0x73e>
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	68db      	ldr	r3, [r3, #12]
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d104      	bne.n	8013b58 <tcp_process+0x738>
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	68da      	ldr	r2, [r3, #12]
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	60da      	str	r2, [r3, #12]
 8013b56:	e005      	b.n	8013b64 <tcp_process+0x744>
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	60fb      	str	r3, [r7, #12]
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d1ef      	bne.n	8013b44 <tcp_process+0x724>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	2200      	movs	r2, #0
 8013b68:	60da      	str	r2, [r3, #12]
 8013b6a:	4b1f      	ldr	r3, [pc, #124]	; (8013be8 <tcp_process+0x7c8>)
 8013b6c:	2201      	movs	r2, #1
 8013b6e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	220a      	movs	r2, #10
 8013b74:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013b76:	4b1d      	ldr	r3, [pc, #116]	; (8013bec <tcp_process+0x7cc>)
 8013b78:	681a      	ldr	r2, [r3, #0]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	60da      	str	r2, [r3, #12]
 8013b7e:	4a1b      	ldr	r2, [pc, #108]	; (8013bec <tcp_process+0x7cc>)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	6013      	str	r3, [r2, #0]
 8013b84:	f003 fa5a 	bl	801703c <tcp_timer_needed>
      }
      break;
 8013b88:	e026      	b.n	8013bd8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f000 f93c 	bl	8013e08 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013b90:	4b17      	ldr	r3, [pc, #92]	; (8013bf0 <tcp_process+0x7d0>)
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	f003 0310 	and.w	r3, r3, #16
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d01f      	beq.n	8013bdc <tcp_process+0x7bc>
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013ba0:	4b14      	ldr	r3, [pc, #80]	; (8013bf4 <tcp_process+0x7d4>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	429a      	cmp	r2, r3
 8013ba6:	d119      	bne.n	8013bdc <tcp_process+0x7bc>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d115      	bne.n	8013bdc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013bb0:	4b11      	ldr	r3, [pc, #68]	; (8013bf8 <tcp_process+0x7d8>)
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f043 0310 	orr.w	r3, r3, #16
 8013bb8:	b2da      	uxtb	r2, r3
 8013bba:	4b0f      	ldr	r3, [pc, #60]	; (8013bf8 <tcp_process+0x7d8>)
 8013bbc:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013bbe:	e00d      	b.n	8013bdc <tcp_process+0x7bc>
    default:
      break;
 8013bc0:	bf00      	nop
 8013bc2:	e00c      	b.n	8013bde <tcp_process+0x7be>
      break;
 8013bc4:	bf00      	nop
 8013bc6:	e00a      	b.n	8013bde <tcp_process+0x7be>
      break;
 8013bc8:	bf00      	nop
 8013bca:	e008      	b.n	8013bde <tcp_process+0x7be>
      break;
 8013bcc:	bf00      	nop
 8013bce:	e006      	b.n	8013bde <tcp_process+0x7be>
      break;
 8013bd0:	bf00      	nop
 8013bd2:	e004      	b.n	8013bde <tcp_process+0x7be>
      break;
 8013bd4:	bf00      	nop
 8013bd6:	e002      	b.n	8013bde <tcp_process+0x7be>
      break;
 8013bd8:	bf00      	nop
 8013bda:	e000      	b.n	8013bde <tcp_process+0x7be>
      break;
 8013bdc:	bf00      	nop
  }
  return ERR_OK;
 8013bde:	2300      	movs	r3, #0
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3724      	adds	r7, #36	; 0x24
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd90      	pop	{r4, r7, pc}
 8013be8:	2400f23c 	.word	0x2400f23c
 8013bec:	2400f238 	.word	0x2400f238
 8013bf0:	2400f26c 	.word	0x2400f26c
 8013bf4:	2400f264 	.word	0x2400f264
 8013bf8:	2400f26d 	.word	0x2400f26d
 8013bfc:	2400f234 	.word	0x2400f234

08013c00 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013c00:	b590      	push	{r4, r7, lr}
 8013c02:	b085      	sub	sp, #20
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
 8013c08:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d106      	bne.n	8013c1e <tcp_oos_insert_segment+0x1e>
 8013c10:	4b3b      	ldr	r3, [pc, #236]	; (8013d00 <tcp_oos_insert_segment+0x100>)
 8013c12:	f240 421f 	movw	r2, #1055	; 0x41f
 8013c16:	493b      	ldr	r1, [pc, #236]	; (8013d04 <tcp_oos_insert_segment+0x104>)
 8013c18:	483b      	ldr	r0, [pc, #236]	; (8013d08 <tcp_oos_insert_segment+0x108>)
 8013c1a:	f004 f87b 	bl	8017d14 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	68db      	ldr	r3, [r3, #12]
 8013c22:	899b      	ldrh	r3, [r3, #12]
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	4618      	mov	r0, r3
 8013c28:	f7f8 fb76 	bl	800c318 <lwip_htons>
 8013c2c:	4603      	mov	r3, r0
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	f003 0301 	and.w	r3, r3, #1
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d028      	beq.n	8013c8a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013c38:	6838      	ldr	r0, [r7, #0]
 8013c3a:	f7fe f995 	bl	8011f68 <tcp_segs_free>
    next = NULL;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	603b      	str	r3, [r7, #0]
 8013c42:	e056      	b.n	8013cf2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	68db      	ldr	r3, [r3, #12]
 8013c48:	899b      	ldrh	r3, [r3, #12]
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7f8 fb63 	bl	800c318 <lwip_htons>
 8013c52:	4603      	mov	r3, r0
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	f003 0301 	and.w	r3, r3, #1
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d00d      	beq.n	8013c7a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	68db      	ldr	r3, [r3, #12]
 8013c62:	899b      	ldrh	r3, [r3, #12]
 8013c64:	b29c      	uxth	r4, r3
 8013c66:	2001      	movs	r0, #1
 8013c68:	f7f8 fb56 	bl	800c318 <lwip_htons>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	461a      	mov	r2, r3
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	68db      	ldr	r3, [r3, #12]
 8013c74:	4322      	orrs	r2, r4
 8013c76:	b292      	uxth	r2, r2
 8013c78:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013c7e:	683b      	ldr	r3, [r7, #0]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013c84:	68f8      	ldr	r0, [r7, #12]
 8013c86:	f7fe f984 	bl	8011f92 <tcp_seg_free>
    while (next &&
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d00e      	beq.n	8013cae <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	891b      	ldrh	r3, [r3, #8]
 8013c94:	461a      	mov	r2, r3
 8013c96:	4b1d      	ldr	r3, [pc, #116]	; (8013d0c <tcp_oos_insert_segment+0x10c>)
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	441a      	add	r2, r3
 8013c9c:	683b      	ldr	r3, [r7, #0]
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	6839      	ldr	r1, [r7, #0]
 8013ca4:	8909      	ldrh	r1, [r1, #8]
 8013ca6:	440b      	add	r3, r1
 8013ca8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	daca      	bge.n	8013c44 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d01e      	beq.n	8013cf2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	891b      	ldrh	r3, [r3, #8]
 8013cb8:	461a      	mov	r2, r3
 8013cba:	4b14      	ldr	r3, [pc, #80]	; (8013d0c <tcp_oos_insert_segment+0x10c>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	441a      	add	r2, r3
 8013cc0:	683b      	ldr	r3, [r7, #0]
 8013cc2:	68db      	ldr	r3, [r3, #12]
 8013cc4:	685b      	ldr	r3, [r3, #4]
 8013cc6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	dd12      	ble.n	8013cf2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013ccc:	683b      	ldr	r3, [r7, #0]
 8013cce:	68db      	ldr	r3, [r3, #12]
 8013cd0:	685b      	ldr	r3, [r3, #4]
 8013cd2:	b29a      	uxth	r2, r3
 8013cd4:	4b0d      	ldr	r3, [pc, #52]	; (8013d0c <tcp_oos_insert_segment+0x10c>)
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	b29b      	uxth	r3, r3
 8013cda:	1ad3      	subs	r3, r2, r3
 8013cdc:	b29a      	uxth	r2, r3
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	685a      	ldr	r2, [r3, #4]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	891b      	ldrh	r3, [r3, #8]
 8013cea:	4619      	mov	r1, r3
 8013cec:	4610      	mov	r0, r2
 8013cee:	f7fc f963 	bl	800ffb8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	683a      	ldr	r2, [r7, #0]
 8013cf6:	601a      	str	r2, [r3, #0]
}
 8013cf8:	bf00      	nop
 8013cfa:	3714      	adds	r7, #20
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd90      	pop	{r4, r7, pc}
 8013d00:	0801b6fc 	.word	0x0801b6fc
 8013d04:	0801ba00 	.word	0x0801ba00
 8013d08:	0801b78c 	.word	0x0801b78c
 8013d0c:	2400f260 	.word	0x2400f260

08013d10 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013d10:	b5b0      	push	{r4, r5, r7, lr}
 8013d12:	b086      	sub	sp, #24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013d1e:	e03e      	b.n	8013d9e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7fc fb54 	bl	80103dc <pbuf_clen>
 8013d34:	4603      	mov	r3, r0
 8013d36:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d3e:	8a7a      	ldrh	r2, [r7, #18]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d906      	bls.n	8013d52 <tcp_free_acked_segments+0x42>
 8013d44:	4b2a      	ldr	r3, [pc, #168]	; (8013df0 <tcp_free_acked_segments+0xe0>)
 8013d46:	f240 4257 	movw	r2, #1111	; 0x457
 8013d4a:	492a      	ldr	r1, [pc, #168]	; (8013df4 <tcp_free_acked_segments+0xe4>)
 8013d4c:	482a      	ldr	r0, [pc, #168]	; (8013df8 <tcp_free_acked_segments+0xe8>)
 8013d4e:	f003 ffe1 	bl	8017d14 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013d58:	8a7b      	ldrh	r3, [r7, #18]
 8013d5a:	1ad3      	subs	r3, r2, r3
 8013d5c:	b29a      	uxth	r2, r3
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	891a      	ldrh	r2, [r3, #8]
 8013d68:	4b24      	ldr	r3, [pc, #144]	; (8013dfc <tcp_free_acked_segments+0xec>)
 8013d6a:	881b      	ldrh	r3, [r3, #0]
 8013d6c:	4413      	add	r3, r2
 8013d6e:	b29a      	uxth	r2, r3
 8013d70:	4b22      	ldr	r3, [pc, #136]	; (8013dfc <tcp_free_acked_segments+0xec>)
 8013d72:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013d74:	6978      	ldr	r0, [r7, #20]
 8013d76:	f7fe f90c 	bl	8011f92 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d00c      	beq.n	8013d9e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d109      	bne.n	8013d9e <tcp_free_acked_segments+0x8e>
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d106      	bne.n	8013d9e <tcp_free_acked_segments+0x8e>
 8013d90:	4b17      	ldr	r3, [pc, #92]	; (8013df0 <tcp_free_acked_segments+0xe0>)
 8013d92:	f240 4261 	movw	r2, #1121	; 0x461
 8013d96:	491a      	ldr	r1, [pc, #104]	; (8013e00 <tcp_free_acked_segments+0xf0>)
 8013d98:	4817      	ldr	r0, [pc, #92]	; (8013df8 <tcp_free_acked_segments+0xe8>)
 8013d9a:	f003 ffbb 	bl	8017d14 <iprintf>
  while (seg_list != NULL &&
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d020      	beq.n	8013de6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	68db      	ldr	r3, [r3, #12]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7f8 fac9 	bl	800c342 <lwip_htonl>
 8013db0:	4604      	mov	r4, r0
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	891b      	ldrh	r3, [r3, #8]
 8013db6:	461d      	mov	r5, r3
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	68db      	ldr	r3, [r3, #12]
 8013dbc:	899b      	ldrh	r3, [r3, #12]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7f8 faa9 	bl	800c318 <lwip_htons>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	f003 0303 	and.w	r3, r3, #3
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d001      	beq.n	8013dd6 <tcp_free_acked_segments+0xc6>
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	e000      	b.n	8013dd8 <tcp_free_acked_segments+0xc8>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	442b      	add	r3, r5
 8013dda:	18e2      	adds	r2, r4, r3
 8013ddc:	4b09      	ldr	r3, [pc, #36]	; (8013e04 <tcp_free_acked_segments+0xf4>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	dd9c      	ble.n	8013d20 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013de6:	68bb      	ldr	r3, [r7, #8]
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	3718      	adds	r7, #24
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bdb0      	pop	{r4, r5, r7, pc}
 8013df0:	0801b6fc 	.word	0x0801b6fc
 8013df4:	0801ba28 	.word	0x0801ba28
 8013df8:	0801b78c 	.word	0x0801b78c
 8013dfc:	2400f268 	.word	0x2400f268
 8013e00:	0801ba50 	.word	0x0801ba50
 8013e04:	2400f264 	.word	0x2400f264

08013e08 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013e08:	b5b0      	push	{r4, r5, r7, lr}
 8013e0a:	b094      	sub	sp, #80	; 0x50
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013e10:	2300      	movs	r3, #0
 8013e12:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d106      	bne.n	8013e28 <tcp_receive+0x20>
 8013e1a:	4b91      	ldr	r3, [pc, #580]	; (8014060 <tcp_receive+0x258>)
 8013e1c:	f240 427b 	movw	r2, #1147	; 0x47b
 8013e20:	4990      	ldr	r1, [pc, #576]	; (8014064 <tcp_receive+0x25c>)
 8013e22:	4891      	ldr	r0, [pc, #580]	; (8014068 <tcp_receive+0x260>)
 8013e24:	f003 ff76 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	7d1b      	ldrb	r3, [r3, #20]
 8013e2c:	2b03      	cmp	r3, #3
 8013e2e:	d806      	bhi.n	8013e3e <tcp_receive+0x36>
 8013e30:	4b8b      	ldr	r3, [pc, #556]	; (8014060 <tcp_receive+0x258>)
 8013e32:	f240 427c 	movw	r2, #1148	; 0x47c
 8013e36:	498d      	ldr	r1, [pc, #564]	; (801406c <tcp_receive+0x264>)
 8013e38:	488b      	ldr	r0, [pc, #556]	; (8014068 <tcp_receive+0x260>)
 8013e3a:	f003 ff6b 	bl	8017d14 <iprintf>

  if (flags & TCP_ACK) {
 8013e3e:	4b8c      	ldr	r3, [pc, #560]	; (8014070 <tcp_receive+0x268>)
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	f003 0310 	and.w	r3, r3, #16
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	f000 8264 	beq.w	8014314 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e52:	461a      	mov	r2, r3
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e58:	4413      	add	r3, r2
 8013e5a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e60:	4b84      	ldr	r3, [pc, #528]	; (8014074 <tcp_receive+0x26c>)
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	1ad3      	subs	r3, r2, r3
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	db1b      	blt.n	8013ea2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e6e:	4b81      	ldr	r3, [pc, #516]	; (8014074 <tcp_receive+0x26c>)
 8013e70:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e72:	429a      	cmp	r2, r3
 8013e74:	d106      	bne.n	8013e84 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e7a:	4b7f      	ldr	r3, [pc, #508]	; (8014078 <tcp_receive+0x270>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	1ad3      	subs	r3, r2, r3
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	db0e      	blt.n	8013ea2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e88:	4b7b      	ldr	r3, [pc, #492]	; (8014078 <tcp_receive+0x270>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d125      	bne.n	8013edc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e90:	4b7a      	ldr	r3, [pc, #488]	; (801407c <tcp_receive+0x274>)
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	89db      	ldrh	r3, [r3, #14]
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d91c      	bls.n	8013edc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013ea2:	4b76      	ldr	r3, [pc, #472]	; (801407c <tcp_receive+0x274>)
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	89db      	ldrh	r3, [r3, #14]
 8013ea8:	b29a      	uxth	r2, r3
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d205      	bcs.n	8013ecc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013ecc:	4b69      	ldr	r3, [pc, #420]	; (8014074 <tcp_receive+0x26c>)
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013ed4:	4b68      	ldr	r3, [pc, #416]	; (8014078 <tcp_receive+0x270>)
 8013ed6:	681a      	ldr	r2, [r3, #0]
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013edc:	4b66      	ldr	r3, [pc, #408]	; (8014078 <tcp_receive+0x270>)
 8013ede:	681a      	ldr	r2, [r3, #0]
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ee4:	1ad3      	subs	r3, r2, r3
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	dc58      	bgt.n	8013f9c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013eea:	4b65      	ldr	r3, [pc, #404]	; (8014080 <tcp_receive+0x278>)
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d14b      	bne.n	8013f8a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ef6:	687a      	ldr	r2, [r7, #4]
 8013ef8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013efc:	4413      	add	r3, r2
 8013efe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d142      	bne.n	8013f8a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	db3d      	blt.n	8013f8a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013f12:	4b59      	ldr	r3, [pc, #356]	; (8014078 <tcp_receive+0x270>)
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	429a      	cmp	r2, r3
 8013f18:	d137      	bne.n	8013f8a <tcp_receive+0x182>
              found_dupack = 1;
 8013f1a:	2301      	movs	r3, #1
 8013f1c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f24:	2bff      	cmp	r3, #255	; 0xff
 8013f26:	d007      	beq.n	8013f38 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f2e:	3301      	adds	r3, #1
 8013f30:	b2da      	uxtb	r2, r3
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f3e:	2b03      	cmp	r3, #3
 8013f40:	d91b      	bls.n	8013f7a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f4c:	4413      	add	r3, r2
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d30a      	bcc.n	8013f70 <tcp_receive+0x168>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f64:	4413      	add	r3, r2
 8013f66:	b29a      	uxth	r2, r3
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f6e:	e004      	b.n	8013f7a <tcp_receive+0x172>
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f80:	2b02      	cmp	r3, #2
 8013f82:	d902      	bls.n	8013f8a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f002 fb43 	bl	8016610 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	f040 8161 	bne.w	8014254 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2200      	movs	r2, #0
 8013f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f9a:	e15b      	b.n	8014254 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f9c:	4b36      	ldr	r3, [pc, #216]	; (8014078 <tcp_receive+0x270>)
 8013f9e:	681a      	ldr	r2, [r3, #0]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013fa4:	1ad3      	subs	r3, r2, r3
 8013fa6:	3b01      	subs	r3, #1
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	f2c0 814e 	blt.w	801424a <tcp_receive+0x442>
 8013fae:	4b32      	ldr	r3, [pc, #200]	; (8014078 <tcp_receive+0x270>)
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fb6:	1ad3      	subs	r3, r2, r3
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	f300 8146 	bgt.w	801424a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	8b5b      	ldrh	r3, [r3, #26]
 8013fc2:	f003 0304 	and.w	r3, r3, #4
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d010      	beq.n	8013fec <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	8b5b      	ldrh	r3, [r3, #26]
 8013fce:	f023 0304 	bic.w	r3, r3, #4
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	2200      	movs	r2, #0
 8013ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013ffa:	10db      	asrs	r3, r3, #3
 8013ffc:	b21b      	sxth	r3, r3
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014006:	b29b      	uxth	r3, r3
 8014008:	4413      	add	r3, r2
 801400a:	b29b      	uxth	r3, r3
 801400c:	b21a      	sxth	r2, r3
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014014:	4b18      	ldr	r3, [pc, #96]	; (8014078 <tcp_receive+0x270>)
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	b29a      	uxth	r2, r3
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801401e:	b29b      	uxth	r3, r3
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	2200      	movs	r2, #0
 8014028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801402c:	4b12      	ldr	r3, [pc, #72]	; (8014078 <tcp_receive+0x270>)
 801402e:	681a      	ldr	r2, [r3, #0]
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	7d1b      	ldrb	r3, [r3, #20]
 8014038:	2b03      	cmp	r3, #3
 801403a:	f240 8097 	bls.w	801416c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801404a:	429a      	cmp	r2, r3
 801404c:	d245      	bcs.n	80140da <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	8b5b      	ldrh	r3, [r3, #26]
 8014052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014056:	2b00      	cmp	r3, #0
 8014058:	d014      	beq.n	8014084 <tcp_receive+0x27c>
 801405a:	2301      	movs	r3, #1
 801405c:	e013      	b.n	8014086 <tcp_receive+0x27e>
 801405e:	bf00      	nop
 8014060:	0801b6fc 	.word	0x0801b6fc
 8014064:	0801ba70 	.word	0x0801ba70
 8014068:	0801b78c 	.word	0x0801b78c
 801406c:	0801ba8c 	.word	0x0801ba8c
 8014070:	2400f26c 	.word	0x2400f26c
 8014074:	2400f260 	.word	0x2400f260
 8014078:	2400f264 	.word	0x2400f264
 801407c:	2400f250 	.word	0x2400f250
 8014080:	2400f26a 	.word	0x2400f26a
 8014084:	2302      	movs	r3, #2
 8014086:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801408a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801408e:	b29a      	uxth	r2, r3
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014094:	fb12 f303 	smulbb	r3, r2, r3
 8014098:	b29b      	uxth	r3, r3
 801409a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801409c:	4293      	cmp	r3, r2
 801409e:	bf28      	it	cs
 80140a0:	4613      	movcs	r3, r2
 80140a2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140ac:	4413      	add	r3, r2
 80140ae:	b29a      	uxth	r2, r3
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d309      	bcc.n	80140ce <tcp_receive+0x2c6>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80140c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80140c2:	4413      	add	r3, r2
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80140cc:	e04e      	b.n	801416c <tcp_receive+0x364>
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80140d8:	e048      	b.n	801416c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80140e2:	4413      	add	r3, r2
 80140e4:	b29a      	uxth	r2, r3
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d309      	bcc.n	8014104 <tcp_receive+0x2fc>
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80140f8:	4413      	add	r3, r2
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014102:	e004      	b.n	801410e <tcp_receive+0x306>
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801410a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801411a:	429a      	cmp	r2, r3
 801411c:	d326      	bcc.n	801416c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801412a:	1ad3      	subs	r3, r2, r3
 801412c:	b29a      	uxth	r2, r3
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801413e:	4413      	add	r3, r2
 8014140:	b29a      	uxth	r2, r3
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014148:	429a      	cmp	r2, r3
 801414a:	d30a      	bcc.n	8014162 <tcp_receive+0x35a>
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014156:	4413      	add	r3, r2
 8014158:	b29a      	uxth	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014160:	e004      	b.n	801416c <tcp_receive+0x364>
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014168:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014174:	4a98      	ldr	r2, [pc, #608]	; (80143d8 <tcp_receive+0x5d0>)
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f7ff fdca 	bl	8013d10 <tcp_free_acked_segments>
 801417c:	4602      	mov	r2, r0
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801418a:	4a94      	ldr	r2, [pc, #592]	; (80143dc <tcp_receive+0x5d4>)
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f7ff fdbf 	bl	8013d10 <tcp_free_acked_segments>
 8014192:	4602      	mov	r2, r0
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801419c:	2b00      	cmp	r3, #0
 801419e:	d104      	bne.n	80141aa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80141a8:	e002      	b.n	80141b0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2200      	movs	r2, #0
 80141ae:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2200      	movs	r2, #0
 80141b4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d103      	bne.n	80141c6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2200      	movs	r2, #0
 80141c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80141cc:	4b84      	ldr	r3, [pc, #528]	; (80143e0 <tcp_receive+0x5d8>)
 80141ce:	881b      	ldrh	r3, [r3, #0]
 80141d0:	4413      	add	r3, r2
 80141d2:	b29a      	uxth	r2, r3
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	8b5b      	ldrh	r3, [r3, #26]
 80141de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d035      	beq.n	8014252 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d118      	bne.n	8014220 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d00c      	beq.n	8014210 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	4618      	mov	r0, r3
 8014204:	f7f8 f89d 	bl	800c342 <lwip_htonl>
 8014208:	4603      	mov	r3, r0
 801420a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801420c:	2b00      	cmp	r3, #0
 801420e:	dc20      	bgt.n	8014252 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	8b5b      	ldrh	r3, [r3, #26]
 8014214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014218:	b29a      	uxth	r2, r3
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801421e:	e018      	b.n	8014252 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014228:	68db      	ldr	r3, [r3, #12]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	4618      	mov	r0, r3
 801422e:	f7f8 f888 	bl	800c342 <lwip_htonl>
 8014232:	4603      	mov	r3, r0
 8014234:	1ae3      	subs	r3, r4, r3
 8014236:	2b00      	cmp	r3, #0
 8014238:	dc0b      	bgt.n	8014252 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	8b5b      	ldrh	r3, [r3, #26]
 801423e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014242:	b29a      	uxth	r2, r3
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014248:	e003      	b.n	8014252 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f002 fbce 	bl	80169ec <tcp_send_empty_ack>
 8014250:	e000      	b.n	8014254 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014252:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014258:	2b00      	cmp	r3, #0
 801425a:	d05b      	beq.n	8014314 <tcp_receive+0x50c>
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014260:	4b60      	ldr	r3, [pc, #384]	; (80143e4 <tcp_receive+0x5dc>)
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	2b00      	cmp	r3, #0
 8014268:	da54      	bge.n	8014314 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801426a:	4b5f      	ldr	r3, [pc, #380]	; (80143e8 <tcp_receive+0x5e0>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	b29a      	uxth	r2, r3
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014274:	b29b      	uxth	r3, r3
 8014276:	1ad3      	subs	r3, r2, r3
 8014278:	b29b      	uxth	r3, r3
 801427a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801427e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014288:	10db      	asrs	r3, r3, #3
 801428a:	b21b      	sxth	r3, r3
 801428c:	b29b      	uxth	r3, r3
 801428e:	1ad3      	subs	r3, r2, r3
 8014290:	b29b      	uxth	r3, r3
 8014292:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801429c:	b29a      	uxth	r2, r3
 801429e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80142a2:	4413      	add	r3, r2
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	b21a      	sxth	r2, r3
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80142ac:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	da05      	bge.n	80142c0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80142b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80142b8:	425b      	negs	r3, r3
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80142c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142ca:	109b      	asrs	r3, r3, #2
 80142cc:	b21b      	sxth	r3, r3
 80142ce:	b29b      	uxth	r3, r3
 80142d0:	1ad3      	subs	r3, r2, r3
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142de:	b29a      	uxth	r2, r3
 80142e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80142e4:	4413      	add	r3, r2
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	b21a      	sxth	r2, r3
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142f4:	10db      	asrs	r3, r3, #3
 80142f6:	b21b      	sxth	r3, r3
 80142f8:	b29a      	uxth	r2, r3
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014300:	b29b      	uxth	r3, r3
 8014302:	4413      	add	r3, r2
 8014304:	b29b      	uxth	r3, r3
 8014306:	b21a      	sxth	r2, r3
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2200      	movs	r2, #0
 8014312:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014314:	4b35      	ldr	r3, [pc, #212]	; (80143ec <tcp_receive+0x5e4>)
 8014316:	881b      	ldrh	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	f000 84e2 	beq.w	8014ce2 <tcp_receive+0xeda>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	7d1b      	ldrb	r3, [r3, #20]
 8014322:	2b06      	cmp	r3, #6
 8014324:	f200 84dd 	bhi.w	8014ce2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801432c:	4b30      	ldr	r3, [pc, #192]	; (80143f0 <tcp_receive+0x5e8>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	1ad3      	subs	r3, r2, r3
 8014332:	3b01      	subs	r3, #1
 8014334:	2b00      	cmp	r3, #0
 8014336:	f2c0 808f 	blt.w	8014458 <tcp_receive+0x650>
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801433e:	4b2b      	ldr	r3, [pc, #172]	; (80143ec <tcp_receive+0x5e4>)
 8014340:	881b      	ldrh	r3, [r3, #0]
 8014342:	4619      	mov	r1, r3
 8014344:	4b2a      	ldr	r3, [pc, #168]	; (80143f0 <tcp_receive+0x5e8>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	440b      	add	r3, r1
 801434a:	1ad3      	subs	r3, r2, r3
 801434c:	3301      	adds	r3, #1
 801434e:	2b00      	cmp	r3, #0
 8014350:	f300 8082 	bgt.w	8014458 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014354:	4b27      	ldr	r3, [pc, #156]	; (80143f4 <tcp_receive+0x5ec>)
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801435e:	4b24      	ldr	r3, [pc, #144]	; (80143f0 <tcp_receive+0x5e8>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	1ad3      	subs	r3, r2, r3
 8014364:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014366:	4b23      	ldr	r3, [pc, #140]	; (80143f4 <tcp_receive+0x5ec>)
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	2b00      	cmp	r3, #0
 801436c:	d106      	bne.n	801437c <tcp_receive+0x574>
 801436e:	4b22      	ldr	r3, [pc, #136]	; (80143f8 <tcp_receive+0x5f0>)
 8014370:	f240 5294 	movw	r2, #1428	; 0x594
 8014374:	4921      	ldr	r1, [pc, #132]	; (80143fc <tcp_receive+0x5f4>)
 8014376:	4822      	ldr	r0, [pc, #136]	; (8014400 <tcp_receive+0x5f8>)
 8014378:	f003 fccc 	bl	8017d14 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014382:	4293      	cmp	r3, r2
 8014384:	d906      	bls.n	8014394 <tcp_receive+0x58c>
 8014386:	4b1c      	ldr	r3, [pc, #112]	; (80143f8 <tcp_receive+0x5f0>)
 8014388:	f240 5295 	movw	r2, #1429	; 0x595
 801438c:	491d      	ldr	r1, [pc, #116]	; (8014404 <tcp_receive+0x5fc>)
 801438e:	481c      	ldr	r0, [pc, #112]	; (8014400 <tcp_receive+0x5f8>)
 8014390:	f003 fcc0 	bl	8017d14 <iprintf>
      off = (u16_t)off32;
 8014394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014396:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801439a:	4b16      	ldr	r3, [pc, #88]	; (80143f4 <tcp_receive+0x5ec>)
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	891b      	ldrh	r3, [r3, #8]
 80143a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80143a4:	429a      	cmp	r2, r3
 80143a6:	d906      	bls.n	80143b6 <tcp_receive+0x5ae>
 80143a8:	4b13      	ldr	r3, [pc, #76]	; (80143f8 <tcp_receive+0x5f0>)
 80143aa:	f240 5297 	movw	r2, #1431	; 0x597
 80143ae:	4916      	ldr	r1, [pc, #88]	; (8014408 <tcp_receive+0x600>)
 80143b0:	4813      	ldr	r0, [pc, #76]	; (8014400 <tcp_receive+0x5f8>)
 80143b2:	f003 fcaf 	bl	8017d14 <iprintf>
      inseg.len -= off;
 80143b6:	4b0f      	ldr	r3, [pc, #60]	; (80143f4 <tcp_receive+0x5ec>)
 80143b8:	891a      	ldrh	r2, [r3, #8]
 80143ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143be:	1ad3      	subs	r3, r2, r3
 80143c0:	b29a      	uxth	r2, r3
 80143c2:	4b0c      	ldr	r3, [pc, #48]	; (80143f4 <tcp_receive+0x5ec>)
 80143c4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80143c6:	4b0b      	ldr	r3, [pc, #44]	; (80143f4 <tcp_receive+0x5ec>)
 80143c8:	685b      	ldr	r3, [r3, #4]
 80143ca:	891a      	ldrh	r2, [r3, #8]
 80143cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143d0:	1ad3      	subs	r3, r2, r3
 80143d2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80143d4:	e02a      	b.n	801442c <tcp_receive+0x624>
 80143d6:	bf00      	nop
 80143d8:	0801baa8 	.word	0x0801baa8
 80143dc:	0801bab0 	.word	0x0801bab0
 80143e0:	2400f268 	.word	0x2400f268
 80143e4:	2400f264 	.word	0x2400f264
 80143e8:	2400f228 	.word	0x2400f228
 80143ec:	2400f26a 	.word	0x2400f26a
 80143f0:	2400f260 	.word	0x2400f260
 80143f4:	2400f240 	.word	0x2400f240
 80143f8:	0801b6fc 	.word	0x0801b6fc
 80143fc:	0801bab8 	.word	0x0801bab8
 8014400:	0801b78c 	.word	0x0801b78c
 8014404:	0801bac8 	.word	0x0801bac8
 8014408:	0801bad8 	.word	0x0801bad8
        off -= p->len;
 801440c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801440e:	895b      	ldrh	r3, [r3, #10]
 8014410:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014414:	1ad3      	subs	r3, r2, r3
 8014416:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801441a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801441c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801441e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014422:	2200      	movs	r2, #0
 8014424:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801442e:	895b      	ldrh	r3, [r3, #10]
 8014430:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014434:	429a      	cmp	r2, r3
 8014436:	d8e9      	bhi.n	801440c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801443c:	4619      	mov	r1, r3
 801443e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014440:	f7fb feb8 	bl	80101b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014448:	4a91      	ldr	r2, [pc, #580]	; (8014690 <tcp_receive+0x888>)
 801444a:	6013      	str	r3, [r2, #0]
 801444c:	4b91      	ldr	r3, [pc, #580]	; (8014694 <tcp_receive+0x88c>)
 801444e:	68db      	ldr	r3, [r3, #12]
 8014450:	4a8f      	ldr	r2, [pc, #572]	; (8014690 <tcp_receive+0x888>)
 8014452:	6812      	ldr	r2, [r2, #0]
 8014454:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014456:	e00d      	b.n	8014474 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014458:	4b8d      	ldr	r3, [pc, #564]	; (8014690 <tcp_receive+0x888>)
 801445a:	681a      	ldr	r2, [r3, #0]
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014460:	1ad3      	subs	r3, r2, r3
 8014462:	2b00      	cmp	r3, #0
 8014464:	da06      	bge.n	8014474 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	8b5b      	ldrh	r3, [r3, #26]
 801446a:	f043 0302 	orr.w	r3, r3, #2
 801446e:	b29a      	uxth	r2, r3
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014474:	4b86      	ldr	r3, [pc, #536]	; (8014690 <tcp_receive+0x888>)
 8014476:	681a      	ldr	r2, [r3, #0]
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447c:	1ad3      	subs	r3, r2, r3
 801447e:	2b00      	cmp	r3, #0
 8014480:	f2c0 842a 	blt.w	8014cd8 <tcp_receive+0xed0>
 8014484:	4b82      	ldr	r3, [pc, #520]	; (8014690 <tcp_receive+0x888>)
 8014486:	681a      	ldr	r2, [r3, #0]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801448c:	6879      	ldr	r1, [r7, #4]
 801448e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014490:	440b      	add	r3, r1
 8014492:	1ad3      	subs	r3, r2, r3
 8014494:	3301      	adds	r3, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	f300 841e 	bgt.w	8014cd8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80144a0:	4b7b      	ldr	r3, [pc, #492]	; (8014690 <tcp_receive+0x888>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	429a      	cmp	r2, r3
 80144a6:	f040 829a 	bne.w	80149de <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80144aa:	4b7a      	ldr	r3, [pc, #488]	; (8014694 <tcp_receive+0x88c>)
 80144ac:	891c      	ldrh	r4, [r3, #8]
 80144ae:	4b79      	ldr	r3, [pc, #484]	; (8014694 <tcp_receive+0x88c>)
 80144b0:	68db      	ldr	r3, [r3, #12]
 80144b2:	899b      	ldrh	r3, [r3, #12]
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7f7 ff2e 	bl	800c318 <lwip_htons>
 80144bc:	4603      	mov	r3, r0
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	f003 0303 	and.w	r3, r3, #3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d001      	beq.n	80144cc <tcp_receive+0x6c4>
 80144c8:	2301      	movs	r3, #1
 80144ca:	e000      	b.n	80144ce <tcp_receive+0x6c6>
 80144cc:	2300      	movs	r3, #0
 80144ce:	4423      	add	r3, r4
 80144d0:	b29a      	uxth	r2, r3
 80144d2:	4b71      	ldr	r3, [pc, #452]	; (8014698 <tcp_receive+0x890>)
 80144d4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80144da:	4b6f      	ldr	r3, [pc, #444]	; (8014698 <tcp_receive+0x890>)
 80144dc:	881b      	ldrh	r3, [r3, #0]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d275      	bcs.n	80145ce <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80144e2:	4b6c      	ldr	r3, [pc, #432]	; (8014694 <tcp_receive+0x88c>)
 80144e4:	68db      	ldr	r3, [r3, #12]
 80144e6:	899b      	ldrh	r3, [r3, #12]
 80144e8:	b29b      	uxth	r3, r3
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7f7 ff14 	bl	800c318 <lwip_htons>
 80144f0:	4603      	mov	r3, r0
 80144f2:	b2db      	uxtb	r3, r3
 80144f4:	f003 0301 	and.w	r3, r3, #1
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d01f      	beq.n	801453c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80144fc:	4b65      	ldr	r3, [pc, #404]	; (8014694 <tcp_receive+0x88c>)
 80144fe:	68db      	ldr	r3, [r3, #12]
 8014500:	899b      	ldrh	r3, [r3, #12]
 8014502:	b29b      	uxth	r3, r3
 8014504:	b21b      	sxth	r3, r3
 8014506:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801450a:	b21c      	sxth	r4, r3
 801450c:	4b61      	ldr	r3, [pc, #388]	; (8014694 <tcp_receive+0x88c>)
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	899b      	ldrh	r3, [r3, #12]
 8014512:	b29b      	uxth	r3, r3
 8014514:	4618      	mov	r0, r3
 8014516:	f7f7 feff 	bl	800c318 <lwip_htons>
 801451a:	4603      	mov	r3, r0
 801451c:	b2db      	uxtb	r3, r3
 801451e:	b29b      	uxth	r3, r3
 8014520:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014524:	b29b      	uxth	r3, r3
 8014526:	4618      	mov	r0, r3
 8014528:	f7f7 fef6 	bl	800c318 <lwip_htons>
 801452c:	4603      	mov	r3, r0
 801452e:	b21b      	sxth	r3, r3
 8014530:	4323      	orrs	r3, r4
 8014532:	b21a      	sxth	r2, r3
 8014534:	4b57      	ldr	r3, [pc, #348]	; (8014694 <tcp_receive+0x88c>)
 8014536:	68db      	ldr	r3, [r3, #12]
 8014538:	b292      	uxth	r2, r2
 801453a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014540:	4b54      	ldr	r3, [pc, #336]	; (8014694 <tcp_receive+0x88c>)
 8014542:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014544:	4b53      	ldr	r3, [pc, #332]	; (8014694 <tcp_receive+0x88c>)
 8014546:	68db      	ldr	r3, [r3, #12]
 8014548:	899b      	ldrh	r3, [r3, #12]
 801454a:	b29b      	uxth	r3, r3
 801454c:	4618      	mov	r0, r3
 801454e:	f7f7 fee3 	bl	800c318 <lwip_htons>
 8014552:	4603      	mov	r3, r0
 8014554:	b2db      	uxtb	r3, r3
 8014556:	f003 0302 	and.w	r3, r3, #2
 801455a:	2b00      	cmp	r3, #0
 801455c:	d005      	beq.n	801456a <tcp_receive+0x762>
            inseg.len -= 1;
 801455e:	4b4d      	ldr	r3, [pc, #308]	; (8014694 <tcp_receive+0x88c>)
 8014560:	891b      	ldrh	r3, [r3, #8]
 8014562:	3b01      	subs	r3, #1
 8014564:	b29a      	uxth	r2, r3
 8014566:	4b4b      	ldr	r3, [pc, #300]	; (8014694 <tcp_receive+0x88c>)
 8014568:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801456a:	4b4a      	ldr	r3, [pc, #296]	; (8014694 <tcp_receive+0x88c>)
 801456c:	685b      	ldr	r3, [r3, #4]
 801456e:	4a49      	ldr	r2, [pc, #292]	; (8014694 <tcp_receive+0x88c>)
 8014570:	8912      	ldrh	r2, [r2, #8]
 8014572:	4611      	mov	r1, r2
 8014574:	4618      	mov	r0, r3
 8014576:	f7fb fd1f 	bl	800ffb8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801457a:	4b46      	ldr	r3, [pc, #280]	; (8014694 <tcp_receive+0x88c>)
 801457c:	891c      	ldrh	r4, [r3, #8]
 801457e:	4b45      	ldr	r3, [pc, #276]	; (8014694 <tcp_receive+0x88c>)
 8014580:	68db      	ldr	r3, [r3, #12]
 8014582:	899b      	ldrh	r3, [r3, #12]
 8014584:	b29b      	uxth	r3, r3
 8014586:	4618      	mov	r0, r3
 8014588:	f7f7 fec6 	bl	800c318 <lwip_htons>
 801458c:	4603      	mov	r3, r0
 801458e:	b2db      	uxtb	r3, r3
 8014590:	f003 0303 	and.w	r3, r3, #3
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <tcp_receive+0x794>
 8014598:	2301      	movs	r3, #1
 801459a:	e000      	b.n	801459e <tcp_receive+0x796>
 801459c:	2300      	movs	r3, #0
 801459e:	4423      	add	r3, r4
 80145a0:	b29a      	uxth	r2, r3
 80145a2:	4b3d      	ldr	r3, [pc, #244]	; (8014698 <tcp_receive+0x890>)
 80145a4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80145a6:	4b3c      	ldr	r3, [pc, #240]	; (8014698 <tcp_receive+0x890>)
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	461a      	mov	r2, r3
 80145ac:	4b38      	ldr	r3, [pc, #224]	; (8014690 <tcp_receive+0x888>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	441a      	add	r2, r3
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b6:	6879      	ldr	r1, [r7, #4]
 80145b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80145ba:	440b      	add	r3, r1
 80145bc:	429a      	cmp	r2, r3
 80145be:	d006      	beq.n	80145ce <tcp_receive+0x7c6>
 80145c0:	4b36      	ldr	r3, [pc, #216]	; (801469c <tcp_receive+0x894>)
 80145c2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80145c6:	4936      	ldr	r1, [pc, #216]	; (80146a0 <tcp_receive+0x898>)
 80145c8:	4836      	ldr	r0, [pc, #216]	; (80146a4 <tcp_receive+0x89c>)
 80145ca:	f003 fba3 	bl	8017d14 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	f000 80e7 	beq.w	80147a6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145d8:	4b2e      	ldr	r3, [pc, #184]	; (8014694 <tcp_receive+0x88c>)
 80145da:	68db      	ldr	r3, [r3, #12]
 80145dc:	899b      	ldrh	r3, [r3, #12]
 80145de:	b29b      	uxth	r3, r3
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7f7 fe99 	bl	800c318 <lwip_htons>
 80145e6:	4603      	mov	r3, r0
 80145e8:	b2db      	uxtb	r3, r3
 80145ea:	f003 0301 	and.w	r3, r3, #1
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d010      	beq.n	8014614 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80145f2:	e00a      	b.n	801460a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145f8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145fe:	681a      	ldr	r2, [r3, #0]
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014604:	68f8      	ldr	r0, [r7, #12]
 8014606:	f7fd fcc4 	bl	8011f92 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801460e:	2b00      	cmp	r3, #0
 8014610:	d1f0      	bne.n	80145f4 <tcp_receive+0x7ec>
 8014612:	e0c8      	b.n	80147a6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014618:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801461a:	e052      	b.n	80146c2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801461c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801461e:	68db      	ldr	r3, [r3, #12]
 8014620:	899b      	ldrh	r3, [r3, #12]
 8014622:	b29b      	uxth	r3, r3
 8014624:	4618      	mov	r0, r3
 8014626:	f7f7 fe77 	bl	800c318 <lwip_htons>
 801462a:	4603      	mov	r3, r0
 801462c:	b2db      	uxtb	r3, r3
 801462e:	f003 0301 	and.w	r3, r3, #1
 8014632:	2b00      	cmp	r3, #0
 8014634:	d03d      	beq.n	80146b2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014636:	4b17      	ldr	r3, [pc, #92]	; (8014694 <tcp_receive+0x88c>)
 8014638:	68db      	ldr	r3, [r3, #12]
 801463a:	899b      	ldrh	r3, [r3, #12]
 801463c:	b29b      	uxth	r3, r3
 801463e:	4618      	mov	r0, r3
 8014640:	f7f7 fe6a 	bl	800c318 <lwip_htons>
 8014644:	4603      	mov	r3, r0
 8014646:	b2db      	uxtb	r3, r3
 8014648:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801464c:	2b00      	cmp	r3, #0
 801464e:	d130      	bne.n	80146b2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014650:	4b10      	ldr	r3, [pc, #64]	; (8014694 <tcp_receive+0x88c>)
 8014652:	68db      	ldr	r3, [r3, #12]
 8014654:	899b      	ldrh	r3, [r3, #12]
 8014656:	b29c      	uxth	r4, r3
 8014658:	2001      	movs	r0, #1
 801465a:	f7f7 fe5d 	bl	800c318 <lwip_htons>
 801465e:	4603      	mov	r3, r0
 8014660:	461a      	mov	r2, r3
 8014662:	4b0c      	ldr	r3, [pc, #48]	; (8014694 <tcp_receive+0x88c>)
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	4322      	orrs	r2, r4
 8014668:	b292      	uxth	r2, r2
 801466a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801466c:	4b09      	ldr	r3, [pc, #36]	; (8014694 <tcp_receive+0x88c>)
 801466e:	891c      	ldrh	r4, [r3, #8]
 8014670:	4b08      	ldr	r3, [pc, #32]	; (8014694 <tcp_receive+0x88c>)
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	899b      	ldrh	r3, [r3, #12]
 8014676:	b29b      	uxth	r3, r3
 8014678:	4618      	mov	r0, r3
 801467a:	f7f7 fe4d 	bl	800c318 <lwip_htons>
 801467e:	4603      	mov	r3, r0
 8014680:	b2db      	uxtb	r3, r3
 8014682:	f003 0303 	and.w	r3, r3, #3
 8014686:	2b00      	cmp	r3, #0
 8014688:	d00e      	beq.n	80146a8 <tcp_receive+0x8a0>
 801468a:	2301      	movs	r3, #1
 801468c:	e00d      	b.n	80146aa <tcp_receive+0x8a2>
 801468e:	bf00      	nop
 8014690:	2400f260 	.word	0x2400f260
 8014694:	2400f240 	.word	0x2400f240
 8014698:	2400f26a 	.word	0x2400f26a
 801469c:	0801b6fc 	.word	0x0801b6fc
 80146a0:	0801bae8 	.word	0x0801bae8
 80146a4:	0801b78c 	.word	0x0801b78c
 80146a8:	2300      	movs	r3, #0
 80146aa:	4423      	add	r3, r4
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	4b98      	ldr	r3, [pc, #608]	; (8014910 <tcp_receive+0xb08>)
 80146b0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80146b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80146b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80146bc:	6938      	ldr	r0, [r7, #16]
 80146be:	f7fd fc68 	bl	8011f92 <tcp_seg_free>
            while (next &&
 80146c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d00e      	beq.n	80146e6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80146c8:	4b91      	ldr	r3, [pc, #580]	; (8014910 <tcp_receive+0xb08>)
 80146ca:	881b      	ldrh	r3, [r3, #0]
 80146cc:	461a      	mov	r2, r3
 80146ce:	4b91      	ldr	r3, [pc, #580]	; (8014914 <tcp_receive+0xb0c>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	441a      	add	r2, r3
 80146d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	685b      	ldr	r3, [r3, #4]
 80146da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146dc:	8909      	ldrh	r1, [r1, #8]
 80146de:	440b      	add	r3, r1
 80146e0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	da9a      	bge.n	801461c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80146e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d059      	beq.n	80147a0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80146ec:	4b88      	ldr	r3, [pc, #544]	; (8014910 <tcp_receive+0xb08>)
 80146ee:	881b      	ldrh	r3, [r3, #0]
 80146f0:	461a      	mov	r2, r3
 80146f2:	4b88      	ldr	r3, [pc, #544]	; (8014914 <tcp_receive+0xb0c>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	441a      	add	r2, r3
 80146f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146fa:	68db      	ldr	r3, [r3, #12]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014700:	2b00      	cmp	r3, #0
 8014702:	dd4d      	ble.n	80147a0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014706:	68db      	ldr	r3, [r3, #12]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	b29a      	uxth	r2, r3
 801470c:	4b81      	ldr	r3, [pc, #516]	; (8014914 <tcp_receive+0xb0c>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	b29b      	uxth	r3, r3
 8014712:	1ad3      	subs	r3, r2, r3
 8014714:	b29a      	uxth	r2, r3
 8014716:	4b80      	ldr	r3, [pc, #512]	; (8014918 <tcp_receive+0xb10>)
 8014718:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801471a:	4b7f      	ldr	r3, [pc, #508]	; (8014918 <tcp_receive+0xb10>)
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	899b      	ldrh	r3, [r3, #12]
 8014720:	b29b      	uxth	r3, r3
 8014722:	4618      	mov	r0, r3
 8014724:	f7f7 fdf8 	bl	800c318 <lwip_htons>
 8014728:	4603      	mov	r3, r0
 801472a:	b2db      	uxtb	r3, r3
 801472c:	f003 0302 	and.w	r3, r3, #2
 8014730:	2b00      	cmp	r3, #0
 8014732:	d005      	beq.n	8014740 <tcp_receive+0x938>
                inseg.len -= 1;
 8014734:	4b78      	ldr	r3, [pc, #480]	; (8014918 <tcp_receive+0xb10>)
 8014736:	891b      	ldrh	r3, [r3, #8]
 8014738:	3b01      	subs	r3, #1
 801473a:	b29a      	uxth	r2, r3
 801473c:	4b76      	ldr	r3, [pc, #472]	; (8014918 <tcp_receive+0xb10>)
 801473e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014740:	4b75      	ldr	r3, [pc, #468]	; (8014918 <tcp_receive+0xb10>)
 8014742:	685b      	ldr	r3, [r3, #4]
 8014744:	4a74      	ldr	r2, [pc, #464]	; (8014918 <tcp_receive+0xb10>)
 8014746:	8912      	ldrh	r2, [r2, #8]
 8014748:	4611      	mov	r1, r2
 801474a:	4618      	mov	r0, r3
 801474c:	f7fb fc34 	bl	800ffb8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014750:	4b71      	ldr	r3, [pc, #452]	; (8014918 <tcp_receive+0xb10>)
 8014752:	891c      	ldrh	r4, [r3, #8]
 8014754:	4b70      	ldr	r3, [pc, #448]	; (8014918 <tcp_receive+0xb10>)
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	899b      	ldrh	r3, [r3, #12]
 801475a:	b29b      	uxth	r3, r3
 801475c:	4618      	mov	r0, r3
 801475e:	f7f7 fddb 	bl	800c318 <lwip_htons>
 8014762:	4603      	mov	r3, r0
 8014764:	b2db      	uxtb	r3, r3
 8014766:	f003 0303 	and.w	r3, r3, #3
 801476a:	2b00      	cmp	r3, #0
 801476c:	d001      	beq.n	8014772 <tcp_receive+0x96a>
 801476e:	2301      	movs	r3, #1
 8014770:	e000      	b.n	8014774 <tcp_receive+0x96c>
 8014772:	2300      	movs	r3, #0
 8014774:	4423      	add	r3, r4
 8014776:	b29a      	uxth	r2, r3
 8014778:	4b65      	ldr	r3, [pc, #404]	; (8014910 <tcp_receive+0xb08>)
 801477a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801477c:	4b64      	ldr	r3, [pc, #400]	; (8014910 <tcp_receive+0xb08>)
 801477e:	881b      	ldrh	r3, [r3, #0]
 8014780:	461a      	mov	r2, r3
 8014782:	4b64      	ldr	r3, [pc, #400]	; (8014914 <tcp_receive+0xb0c>)
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	441a      	add	r2, r3
 8014788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	429a      	cmp	r2, r3
 8014790:	d006      	beq.n	80147a0 <tcp_receive+0x998>
 8014792:	4b62      	ldr	r3, [pc, #392]	; (801491c <tcp_receive+0xb14>)
 8014794:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014798:	4961      	ldr	r1, [pc, #388]	; (8014920 <tcp_receive+0xb18>)
 801479a:	4862      	ldr	r0, [pc, #392]	; (8014924 <tcp_receive+0xb1c>)
 801479c:	f003 faba 	bl	8017d14 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80147a4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80147a6:	4b5a      	ldr	r3, [pc, #360]	; (8014910 <tcp_receive+0xb08>)
 80147a8:	881b      	ldrh	r3, [r3, #0]
 80147aa:	461a      	mov	r2, r3
 80147ac:	4b59      	ldr	r3, [pc, #356]	; (8014914 <tcp_receive+0xb0c>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	441a      	add	r2, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147ba:	4b55      	ldr	r3, [pc, #340]	; (8014910 <tcp_receive+0xb08>)
 80147bc:	881b      	ldrh	r3, [r3, #0]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d206      	bcs.n	80147d0 <tcp_receive+0x9c8>
 80147c2:	4b56      	ldr	r3, [pc, #344]	; (801491c <tcp_receive+0xb14>)
 80147c4:	f240 6207 	movw	r2, #1543	; 0x607
 80147c8:	4957      	ldr	r1, [pc, #348]	; (8014928 <tcp_receive+0xb20>)
 80147ca:	4856      	ldr	r0, [pc, #344]	; (8014924 <tcp_receive+0xb1c>)
 80147cc:	f003 faa2 	bl	8017d14 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147d4:	4b4e      	ldr	r3, [pc, #312]	; (8014910 <tcp_receive+0xb08>)
 80147d6:	881b      	ldrh	r3, [r3, #0]
 80147d8:	1ad3      	subs	r3, r2, r3
 80147da:	b29a      	uxth	r2, r3
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f7fc fead 	bl	8011540 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80147e6:	4b4c      	ldr	r3, [pc, #304]	; (8014918 <tcp_receive+0xb10>)
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	891b      	ldrh	r3, [r3, #8]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d006      	beq.n	80147fe <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80147f0:	4b49      	ldr	r3, [pc, #292]	; (8014918 <tcp_receive+0xb10>)
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	4a4d      	ldr	r2, [pc, #308]	; (801492c <tcp_receive+0xb24>)
 80147f6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80147f8:	4b47      	ldr	r3, [pc, #284]	; (8014918 <tcp_receive+0xb10>)
 80147fa:	2200      	movs	r2, #0
 80147fc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80147fe:	4b46      	ldr	r3, [pc, #280]	; (8014918 <tcp_receive+0xb10>)
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	899b      	ldrh	r3, [r3, #12]
 8014804:	b29b      	uxth	r3, r3
 8014806:	4618      	mov	r0, r3
 8014808:	f7f7 fd86 	bl	800c318 <lwip_htons>
 801480c:	4603      	mov	r3, r0
 801480e:	b2db      	uxtb	r3, r3
 8014810:	f003 0301 	and.w	r3, r3, #1
 8014814:	2b00      	cmp	r3, #0
 8014816:	f000 80b8 	beq.w	801498a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801481a:	4b45      	ldr	r3, [pc, #276]	; (8014930 <tcp_receive+0xb28>)
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	f043 0320 	orr.w	r3, r3, #32
 8014822:	b2da      	uxtb	r2, r3
 8014824:	4b42      	ldr	r3, [pc, #264]	; (8014930 <tcp_receive+0xb28>)
 8014826:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014828:	e0af      	b.n	801498a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801482e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	4a36      	ldr	r2, [pc, #216]	; (8014914 <tcp_receive+0xb0c>)
 801483a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	891b      	ldrh	r3, [r3, #8]
 8014840:	461c      	mov	r4, r3
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	68db      	ldr	r3, [r3, #12]
 8014846:	899b      	ldrh	r3, [r3, #12]
 8014848:	b29b      	uxth	r3, r3
 801484a:	4618      	mov	r0, r3
 801484c:	f7f7 fd64 	bl	800c318 <lwip_htons>
 8014850:	4603      	mov	r3, r0
 8014852:	b2db      	uxtb	r3, r3
 8014854:	f003 0303 	and.w	r3, r3, #3
 8014858:	2b00      	cmp	r3, #0
 801485a:	d001      	beq.n	8014860 <tcp_receive+0xa58>
 801485c:	2301      	movs	r3, #1
 801485e:	e000      	b.n	8014862 <tcp_receive+0xa5a>
 8014860:	2300      	movs	r3, #0
 8014862:	191a      	adds	r2, r3, r4
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014868:	441a      	add	r2, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014872:	461c      	mov	r4, r3
 8014874:	68bb      	ldr	r3, [r7, #8]
 8014876:	891b      	ldrh	r3, [r3, #8]
 8014878:	461d      	mov	r5, r3
 801487a:	68bb      	ldr	r3, [r7, #8]
 801487c:	68db      	ldr	r3, [r3, #12]
 801487e:	899b      	ldrh	r3, [r3, #12]
 8014880:	b29b      	uxth	r3, r3
 8014882:	4618      	mov	r0, r3
 8014884:	f7f7 fd48 	bl	800c318 <lwip_htons>
 8014888:	4603      	mov	r3, r0
 801488a:	b2db      	uxtb	r3, r3
 801488c:	f003 0303 	and.w	r3, r3, #3
 8014890:	2b00      	cmp	r3, #0
 8014892:	d001      	beq.n	8014898 <tcp_receive+0xa90>
 8014894:	2301      	movs	r3, #1
 8014896:	e000      	b.n	801489a <tcp_receive+0xa92>
 8014898:	2300      	movs	r3, #0
 801489a:	442b      	add	r3, r5
 801489c:	429c      	cmp	r4, r3
 801489e:	d206      	bcs.n	80148ae <tcp_receive+0xaa6>
 80148a0:	4b1e      	ldr	r3, [pc, #120]	; (801491c <tcp_receive+0xb14>)
 80148a2:	f240 622b 	movw	r2, #1579	; 0x62b
 80148a6:	4923      	ldr	r1, [pc, #140]	; (8014934 <tcp_receive+0xb2c>)
 80148a8:	481e      	ldr	r0, [pc, #120]	; (8014924 <tcp_receive+0xb1c>)
 80148aa:	f003 fa33 	bl	8017d14 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	891b      	ldrh	r3, [r3, #8]
 80148b2:	461c      	mov	r4, r3
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	68db      	ldr	r3, [r3, #12]
 80148b8:	899b      	ldrh	r3, [r3, #12]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	4618      	mov	r0, r3
 80148be:	f7f7 fd2b 	bl	800c318 <lwip_htons>
 80148c2:	4603      	mov	r3, r0
 80148c4:	b2db      	uxtb	r3, r3
 80148c6:	f003 0303 	and.w	r3, r3, #3
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d001      	beq.n	80148d2 <tcp_receive+0xaca>
 80148ce:	2301      	movs	r3, #1
 80148d0:	e000      	b.n	80148d4 <tcp_receive+0xacc>
 80148d2:	2300      	movs	r3, #0
 80148d4:	1919      	adds	r1, r3, r4
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148da:	b28b      	uxth	r3, r1
 80148dc:	1ad3      	subs	r3, r2, r3
 80148de:	b29a      	uxth	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f7fc fe2b 	bl	8011540 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	685b      	ldr	r3, [r3, #4]
 80148ee:	891b      	ldrh	r3, [r3, #8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d028      	beq.n	8014946 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80148f4:	4b0d      	ldr	r3, [pc, #52]	; (801492c <tcp_receive+0xb24>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d01d      	beq.n	8014938 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80148fc:	4b0b      	ldr	r3, [pc, #44]	; (801492c <tcp_receive+0xb24>)
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	4619      	mov	r1, r3
 8014906:	4610      	mov	r0, r2
 8014908:	f7fb fda8 	bl	801045c <pbuf_cat>
 801490c:	e018      	b.n	8014940 <tcp_receive+0xb38>
 801490e:	bf00      	nop
 8014910:	2400f26a 	.word	0x2400f26a
 8014914:	2400f260 	.word	0x2400f260
 8014918:	2400f240 	.word	0x2400f240
 801491c:	0801b6fc 	.word	0x0801b6fc
 8014920:	0801bb20 	.word	0x0801bb20
 8014924:	0801b78c 	.word	0x0801b78c
 8014928:	0801bb5c 	.word	0x0801bb5c
 801492c:	2400f270 	.word	0x2400f270
 8014930:	2400f26d 	.word	0x2400f26d
 8014934:	0801bb7c 	.word	0x0801bb7c
            } else {
              recv_data = cseg->p;
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	4a70      	ldr	r2, [pc, #448]	; (8014b00 <tcp_receive+0xcf8>)
 801493e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	2200      	movs	r2, #0
 8014944:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014946:	68bb      	ldr	r3, [r7, #8]
 8014948:	68db      	ldr	r3, [r3, #12]
 801494a:	899b      	ldrh	r3, [r3, #12]
 801494c:	b29b      	uxth	r3, r3
 801494e:	4618      	mov	r0, r3
 8014950:	f7f7 fce2 	bl	800c318 <lwip_htons>
 8014954:	4603      	mov	r3, r0
 8014956:	b2db      	uxtb	r3, r3
 8014958:	f003 0301 	and.w	r3, r3, #1
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00d      	beq.n	801497c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014960:	4b68      	ldr	r3, [pc, #416]	; (8014b04 <tcp_receive+0xcfc>)
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	f043 0320 	orr.w	r3, r3, #32
 8014968:	b2da      	uxtb	r2, r3
 801496a:	4b66      	ldr	r3, [pc, #408]	; (8014b04 <tcp_receive+0xcfc>)
 801496c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	7d1b      	ldrb	r3, [r3, #20]
 8014972:	2b04      	cmp	r3, #4
 8014974:	d102      	bne.n	801497c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	2207      	movs	r2, #7
 801497a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801497c:	68bb      	ldr	r3, [r7, #8]
 801497e:	681a      	ldr	r2, [r3, #0]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014984:	68b8      	ldr	r0, [r7, #8]
 8014986:	f7fd fb04 	bl	8011f92 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801498e:	2b00      	cmp	r3, #0
 8014990:	d008      	beq.n	80149a4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014996:	68db      	ldr	r3, [r3, #12]
 8014998:	685a      	ldr	r2, [r3, #4]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801499e:	429a      	cmp	r2, r3
 80149a0:	f43f af43 	beq.w	801482a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	8b5b      	ldrh	r3, [r3, #26]
 80149a8:	f003 0301 	and.w	r3, r3, #1
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d00e      	beq.n	80149ce <tcp_receive+0xbc6>
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	8b5b      	ldrh	r3, [r3, #26]
 80149b4:	f023 0301 	bic.w	r3, r3, #1
 80149b8:	b29a      	uxth	r2, r3
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	835a      	strh	r2, [r3, #26]
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	8b5b      	ldrh	r3, [r3, #26]
 80149c2:	f043 0302 	orr.w	r3, r3, #2
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80149cc:	e188      	b.n	8014ce0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	8b5b      	ldrh	r3, [r3, #26]
 80149d2:	f043 0301 	orr.w	r3, r3, #1
 80149d6:	b29a      	uxth	r2, r3
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80149dc:	e180      	b.n	8014ce0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d106      	bne.n	80149f4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80149e6:	4848      	ldr	r0, [pc, #288]	; (8014b08 <tcp_receive+0xd00>)
 80149e8:	f7fd faec 	bl	8011fc4 <tcp_seg_copy>
 80149ec:	4602      	mov	r2, r0
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	675a      	str	r2, [r3, #116]	; 0x74
 80149f2:	e16d      	b.n	8014cd0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80149f4:	2300      	movs	r3, #0
 80149f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80149fe:	e157      	b.n	8014cb0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	685a      	ldr	r2, [r3, #4]
 8014a06:	4b41      	ldr	r3, [pc, #260]	; (8014b0c <tcp_receive+0xd04>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d11d      	bne.n	8014a4a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014a0e:	4b3e      	ldr	r3, [pc, #248]	; (8014b08 <tcp_receive+0xd00>)
 8014a10:	891a      	ldrh	r2, [r3, #8]
 8014a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a14:	891b      	ldrh	r3, [r3, #8]
 8014a16:	429a      	cmp	r2, r3
 8014a18:	f240 814f 	bls.w	8014cba <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a1c:	483a      	ldr	r0, [pc, #232]	; (8014b08 <tcp_receive+0xd00>)
 8014a1e:	f7fd fad1 	bl	8011fc4 <tcp_seg_copy>
 8014a22:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f000 8149 	beq.w	8014cbe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d003      	beq.n	8014a3a <tcp_receive+0xc32>
                    prev->next = cseg;
 8014a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a34:	697a      	ldr	r2, [r7, #20]
 8014a36:	601a      	str	r2, [r3, #0]
 8014a38:	e002      	b.n	8014a40 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	697a      	ldr	r2, [r7, #20]
 8014a3e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014a40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a42:	6978      	ldr	r0, [r7, #20]
 8014a44:	f7ff f8dc 	bl	8013c00 <tcp_oos_insert_segment>
                }
                break;
 8014a48:	e139      	b.n	8014cbe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d117      	bne.n	8014a80 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014a50:	4b2e      	ldr	r3, [pc, #184]	; (8014b0c <tcp_receive+0xd04>)
 8014a52:	681a      	ldr	r2, [r3, #0]
 8014a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a56:	68db      	ldr	r3, [r3, #12]
 8014a58:	685b      	ldr	r3, [r3, #4]
 8014a5a:	1ad3      	subs	r3, r2, r3
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	da57      	bge.n	8014b10 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a60:	4829      	ldr	r0, [pc, #164]	; (8014b08 <tcp_receive+0xd00>)
 8014a62:	f7fd faaf 	bl	8011fc4 <tcp_seg_copy>
 8014a66:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014a68:	69bb      	ldr	r3, [r7, #24]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	f000 8129 	beq.w	8014cc2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	69ba      	ldr	r2, [r7, #24]
 8014a74:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014a76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a78:	69b8      	ldr	r0, [r7, #24]
 8014a7a:	f7ff f8c1 	bl	8013c00 <tcp_oos_insert_segment>
                  }
                  break;
 8014a7e:	e120      	b.n	8014cc2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014a80:	4b22      	ldr	r3, [pc, #136]	; (8014b0c <tcp_receive+0xd04>)
 8014a82:	681a      	ldr	r2, [r3, #0]
 8014a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a86:	68db      	ldr	r3, [r3, #12]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	1ad3      	subs	r3, r2, r3
 8014a8c:	3b01      	subs	r3, #1
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	db3e      	blt.n	8014b10 <tcp_receive+0xd08>
 8014a92:	4b1e      	ldr	r3, [pc, #120]	; (8014b0c <tcp_receive+0xd04>)
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a98:	68db      	ldr	r3, [r3, #12]
 8014a9a:	685b      	ldr	r3, [r3, #4]
 8014a9c:	1ad3      	subs	r3, r2, r3
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	dc35      	bgt.n	8014b10 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014aa4:	4818      	ldr	r0, [pc, #96]	; (8014b08 <tcp_receive+0xd00>)
 8014aa6:	f7fd fa8d 	bl	8011fc4 <tcp_seg_copy>
 8014aaa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014aac:	69fb      	ldr	r3, [r7, #28]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	f000 8109 	beq.w	8014cc6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014abc:	8912      	ldrh	r2, [r2, #8]
 8014abe:	441a      	add	r2, r3
 8014ac0:	4b12      	ldr	r3, [pc, #72]	; (8014b0c <tcp_receive+0xd04>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	1ad3      	subs	r3, r2, r3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	dd12      	ble.n	8014af0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014aca:	4b10      	ldr	r3, [pc, #64]	; (8014b0c <tcp_receive+0xd04>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	b29a      	uxth	r2, r3
 8014ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ad2:	68db      	ldr	r3, [r3, #12]
 8014ad4:	685b      	ldr	r3, [r3, #4]
 8014ad6:	b29b      	uxth	r3, r3
 8014ad8:	1ad3      	subs	r3, r2, r3
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ade:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ae2:	685a      	ldr	r2, [r3, #4]
 8014ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ae6:	891b      	ldrh	r3, [r3, #8]
 8014ae8:	4619      	mov	r1, r3
 8014aea:	4610      	mov	r0, r2
 8014aec:	f7fb fa64 	bl	800ffb8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014af2:	69fa      	ldr	r2, [r7, #28]
 8014af4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014af6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014af8:	69f8      	ldr	r0, [r7, #28]
 8014afa:	f7ff f881 	bl	8013c00 <tcp_oos_insert_segment>
                  }
                  break;
 8014afe:	e0e2      	b.n	8014cc6 <tcp_receive+0xebe>
 8014b00:	2400f270 	.word	0x2400f270
 8014b04:	2400f26d 	.word	0x2400f26d
 8014b08:	2400f240 	.word	0x2400f240
 8014b0c:	2400f260 	.word	0x2400f260
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b12:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f040 80c6 	bne.w	8014caa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014b1e:	4b80      	ldr	r3, [pc, #512]	; (8014d20 <tcp_receive+0xf18>)
 8014b20:	681a      	ldr	r2, [r3, #0]
 8014b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b24:	68db      	ldr	r3, [r3, #12]
 8014b26:	685b      	ldr	r3, [r3, #4]
 8014b28:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f340 80bd 	ble.w	8014caa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b32:	68db      	ldr	r3, [r3, #12]
 8014b34:	899b      	ldrh	r3, [r3, #12]
 8014b36:	b29b      	uxth	r3, r3
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7f7 fbed 	bl	800c318 <lwip_htons>
 8014b3e:	4603      	mov	r3, r0
 8014b40:	b2db      	uxtb	r3, r3
 8014b42:	f003 0301 	and.w	r3, r3, #1
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f040 80bf 	bne.w	8014cca <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014b4c:	4875      	ldr	r0, [pc, #468]	; (8014d24 <tcp_receive+0xf1c>)
 8014b4e:	f7fd fa39 	bl	8011fc4 <tcp_seg_copy>
 8014b52:	4602      	mov	r2, r0
 8014b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b56:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	f000 80b6 	beq.w	8014cce <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b64:	68db      	ldr	r3, [r3, #12]
 8014b66:	685b      	ldr	r3, [r3, #4]
 8014b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b6a:	8912      	ldrh	r2, [r2, #8]
 8014b6c:	441a      	add	r2, r3
 8014b6e:	4b6c      	ldr	r3, [pc, #432]	; (8014d20 <tcp_receive+0xf18>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	1ad3      	subs	r3, r2, r3
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	dd12      	ble.n	8014b9e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014b78:	4b69      	ldr	r3, [pc, #420]	; (8014d20 <tcp_receive+0xf18>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	685b      	ldr	r3, [r3, #4]
 8014b84:	b29b      	uxth	r3, r3
 8014b86:	1ad3      	subs	r3, r2, r3
 8014b88:	b29a      	uxth	r2, r3
 8014b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b8c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b90:	685a      	ldr	r2, [r3, #4]
 8014b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b94:	891b      	ldrh	r3, [r3, #8]
 8014b96:	4619      	mov	r1, r3
 8014b98:	4610      	mov	r0, r2
 8014b9a:	f7fb fa0d 	bl	800ffb8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014b9e:	4b62      	ldr	r3, [pc, #392]	; (8014d28 <tcp_receive+0xf20>)
 8014ba0:	881b      	ldrh	r3, [r3, #0]
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	4b5e      	ldr	r3, [pc, #376]	; (8014d20 <tcp_receive+0xf18>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	441a      	add	r2, r3
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bae:	6879      	ldr	r1, [r7, #4]
 8014bb0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014bb2:	440b      	add	r3, r1
 8014bb4:	1ad3      	subs	r3, r2, r3
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	f340 8089 	ble.w	8014cce <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	68db      	ldr	r3, [r3, #12]
 8014bc2:	899b      	ldrh	r3, [r3, #12]
 8014bc4:	b29b      	uxth	r3, r3
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7f7 fba6 	bl	800c318 <lwip_htons>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	f003 0301 	and.w	r3, r3, #1
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d022      	beq.n	8014c1e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	68db      	ldr	r3, [r3, #12]
 8014bde:	899b      	ldrh	r3, [r3, #12]
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	b21b      	sxth	r3, r3
 8014be4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014be8:	b21c      	sxth	r4, r3
 8014bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	899b      	ldrh	r3, [r3, #12]
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	4618      	mov	r0, r3
 8014bf6:	f7f7 fb8f 	bl	800c318 <lwip_htons>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	b2db      	uxtb	r3, r3
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014c04:	b29b      	uxth	r3, r3
 8014c06:	4618      	mov	r0, r3
 8014c08:	f7f7 fb86 	bl	800c318 <lwip_htons>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	b21b      	sxth	r3, r3
 8014c10:	4323      	orrs	r3, r4
 8014c12:	b21a      	sxth	r2, r3
 8014c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	68db      	ldr	r3, [r3, #12]
 8014c1a:	b292      	uxth	r2, r2
 8014c1c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c28:	4413      	add	r3, r2
 8014c2a:	b299      	uxth	r1, r3
 8014c2c:	4b3c      	ldr	r3, [pc, #240]	; (8014d20 <tcp_receive+0xf18>)
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	b29a      	uxth	r2, r3
 8014c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	1a8a      	subs	r2, r1, r2
 8014c38:	b292      	uxth	r2, r2
 8014c3a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	685a      	ldr	r2, [r3, #4]
 8014c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	891b      	ldrh	r3, [r3, #8]
 8014c48:	4619      	mov	r1, r3
 8014c4a:	4610      	mov	r0, r2
 8014c4c:	f7fb f9b4 	bl	800ffb8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	891c      	ldrh	r4, [r3, #8]
 8014c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	68db      	ldr	r3, [r3, #12]
 8014c5c:	899b      	ldrh	r3, [r3, #12]
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7f7 fb59 	bl	800c318 <lwip_htons>
 8014c66:	4603      	mov	r3, r0
 8014c68:	b2db      	uxtb	r3, r3
 8014c6a:	f003 0303 	and.w	r3, r3, #3
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d001      	beq.n	8014c76 <tcp_receive+0xe6e>
 8014c72:	2301      	movs	r3, #1
 8014c74:	e000      	b.n	8014c78 <tcp_receive+0xe70>
 8014c76:	2300      	movs	r3, #0
 8014c78:	4423      	add	r3, r4
 8014c7a:	b29a      	uxth	r2, r3
 8014c7c:	4b2a      	ldr	r3, [pc, #168]	; (8014d28 <tcp_receive+0xf20>)
 8014c7e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014c80:	4b29      	ldr	r3, [pc, #164]	; (8014d28 <tcp_receive+0xf20>)
 8014c82:	881b      	ldrh	r3, [r3, #0]
 8014c84:	461a      	mov	r2, r3
 8014c86:	4b26      	ldr	r3, [pc, #152]	; (8014d20 <tcp_receive+0xf18>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	441a      	add	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c90:	6879      	ldr	r1, [r7, #4]
 8014c92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c94:	440b      	add	r3, r1
 8014c96:	429a      	cmp	r2, r3
 8014c98:	d019      	beq.n	8014cce <tcp_receive+0xec6>
 8014c9a:	4b24      	ldr	r3, [pc, #144]	; (8014d2c <tcp_receive+0xf24>)
 8014c9c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014ca0:	4923      	ldr	r1, [pc, #140]	; (8014d30 <tcp_receive+0xf28>)
 8014ca2:	4824      	ldr	r0, [pc, #144]	; (8014d34 <tcp_receive+0xf2c>)
 8014ca4:	f003 f836 	bl	8017d14 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014ca8:	e011      	b.n	8014cce <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cac:	681b      	ldr	r3, [r3, #0]
 8014cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f47f aea4 	bne.w	8014a00 <tcp_receive+0xbf8>
 8014cb8:	e00a      	b.n	8014cd0 <tcp_receive+0xec8>
                break;
 8014cba:	bf00      	nop
 8014cbc:	e008      	b.n	8014cd0 <tcp_receive+0xec8>
                break;
 8014cbe:	bf00      	nop
 8014cc0:	e006      	b.n	8014cd0 <tcp_receive+0xec8>
                  break;
 8014cc2:	bf00      	nop
 8014cc4:	e004      	b.n	8014cd0 <tcp_receive+0xec8>
                  break;
 8014cc6:	bf00      	nop
 8014cc8:	e002      	b.n	8014cd0 <tcp_receive+0xec8>
                  break;
 8014cca:	bf00      	nop
 8014ccc:	e000      	b.n	8014cd0 <tcp_receive+0xec8>
                break;
 8014cce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f001 fe8b 	bl	80169ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014cd6:	e003      	b.n	8014ce0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f001 fe87 	bl	80169ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014cde:	e01a      	b.n	8014d16 <tcp_receive+0xf0e>
 8014ce0:	e019      	b.n	8014d16 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014ce2:	4b0f      	ldr	r3, [pc, #60]	; (8014d20 <tcp_receive+0xf18>)
 8014ce4:	681a      	ldr	r2, [r3, #0]
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cea:	1ad3      	subs	r3, r2, r3
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	db0a      	blt.n	8014d06 <tcp_receive+0xefe>
 8014cf0:	4b0b      	ldr	r3, [pc, #44]	; (8014d20 <tcp_receive+0xf18>)
 8014cf2:	681a      	ldr	r2, [r3, #0]
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cf8:	6879      	ldr	r1, [r7, #4]
 8014cfa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014cfc:	440b      	add	r3, r1
 8014cfe:	1ad3      	subs	r3, r2, r3
 8014d00:	3301      	adds	r3, #1
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	dd07      	ble.n	8014d16 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	8b5b      	ldrh	r3, [r3, #26]
 8014d0a:	f043 0302 	orr.w	r3, r3, #2
 8014d0e:	b29a      	uxth	r2, r3
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014d14:	e7ff      	b.n	8014d16 <tcp_receive+0xf0e>
 8014d16:	bf00      	nop
 8014d18:	3750      	adds	r7, #80	; 0x50
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	2400f260 	.word	0x2400f260
 8014d24:	2400f240 	.word	0x2400f240
 8014d28:	2400f26a 	.word	0x2400f26a
 8014d2c:	0801b6fc 	.word	0x0801b6fc
 8014d30:	0801bae8 	.word	0x0801bae8
 8014d34:	0801b78c 	.word	0x0801b78c

08014d38 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014d38:	b480      	push	{r7}
 8014d3a:	b083      	sub	sp, #12
 8014d3c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014d3e:	4b15      	ldr	r3, [pc, #84]	; (8014d94 <tcp_get_next_optbyte+0x5c>)
 8014d40:	881b      	ldrh	r3, [r3, #0]
 8014d42:	1c5a      	adds	r2, r3, #1
 8014d44:	b291      	uxth	r1, r2
 8014d46:	4a13      	ldr	r2, [pc, #76]	; (8014d94 <tcp_get_next_optbyte+0x5c>)
 8014d48:	8011      	strh	r1, [r2, #0]
 8014d4a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014d4c:	4b12      	ldr	r3, [pc, #72]	; (8014d98 <tcp_get_next_optbyte+0x60>)
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d004      	beq.n	8014d5e <tcp_get_next_optbyte+0x26>
 8014d54:	4b11      	ldr	r3, [pc, #68]	; (8014d9c <tcp_get_next_optbyte+0x64>)
 8014d56:	881b      	ldrh	r3, [r3, #0]
 8014d58:	88fa      	ldrh	r2, [r7, #6]
 8014d5a:	429a      	cmp	r2, r3
 8014d5c:	d208      	bcs.n	8014d70 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014d5e:	4b10      	ldr	r3, [pc, #64]	; (8014da0 <tcp_get_next_optbyte+0x68>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	3314      	adds	r3, #20
 8014d64:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014d66:	88fb      	ldrh	r3, [r7, #6]
 8014d68:	683a      	ldr	r2, [r7, #0]
 8014d6a:	4413      	add	r3, r2
 8014d6c:	781b      	ldrb	r3, [r3, #0]
 8014d6e:	e00b      	b.n	8014d88 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014d70:	88fb      	ldrh	r3, [r7, #6]
 8014d72:	b2da      	uxtb	r2, r3
 8014d74:	4b09      	ldr	r3, [pc, #36]	; (8014d9c <tcp_get_next_optbyte+0x64>)
 8014d76:	881b      	ldrh	r3, [r3, #0]
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014d7e:	4b06      	ldr	r3, [pc, #24]	; (8014d98 <tcp_get_next_optbyte+0x60>)
 8014d80:	681a      	ldr	r2, [r3, #0]
 8014d82:	797b      	ldrb	r3, [r7, #5]
 8014d84:	4413      	add	r3, r2
 8014d86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	370c      	adds	r7, #12
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr
 8014d94:	2400f25c 	.word	0x2400f25c
 8014d98:	2400f258 	.word	0x2400f258
 8014d9c:	2400f256 	.word	0x2400f256
 8014da0:	2400f250 	.word	0x2400f250

08014da4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b084      	sub	sp, #16
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d106      	bne.n	8014dc0 <tcp_parseopt+0x1c>
 8014db2:	4b32      	ldr	r3, [pc, #200]	; (8014e7c <tcp_parseopt+0xd8>)
 8014db4:	f240 727d 	movw	r2, #1917	; 0x77d
 8014db8:	4931      	ldr	r1, [pc, #196]	; (8014e80 <tcp_parseopt+0xdc>)
 8014dba:	4832      	ldr	r0, [pc, #200]	; (8014e84 <tcp_parseopt+0xe0>)
 8014dbc:	f002 ffaa 	bl	8017d14 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014dc0:	4b31      	ldr	r3, [pc, #196]	; (8014e88 <tcp_parseopt+0xe4>)
 8014dc2:	881b      	ldrh	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d056      	beq.n	8014e76 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014dc8:	4b30      	ldr	r3, [pc, #192]	; (8014e8c <tcp_parseopt+0xe8>)
 8014dca:	2200      	movs	r2, #0
 8014dcc:	801a      	strh	r2, [r3, #0]
 8014dce:	e046      	b.n	8014e5e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8014dd0:	f7ff ffb2 	bl	8014d38 <tcp_get_next_optbyte>
 8014dd4:	4603      	mov	r3, r0
 8014dd6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014dd8:	7bfb      	ldrb	r3, [r7, #15]
 8014dda:	2b02      	cmp	r3, #2
 8014ddc:	d006      	beq.n	8014dec <tcp_parseopt+0x48>
 8014dde:	2b02      	cmp	r3, #2
 8014de0:	dc2c      	bgt.n	8014e3c <tcp_parseopt+0x98>
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d042      	beq.n	8014e6c <tcp_parseopt+0xc8>
 8014de6:	2b01      	cmp	r3, #1
 8014de8:	d128      	bne.n	8014e3c <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014dea:	e038      	b.n	8014e5e <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014dec:	f7ff ffa4 	bl	8014d38 <tcp_get_next_optbyte>
 8014df0:	4603      	mov	r3, r0
 8014df2:	2b04      	cmp	r3, #4
 8014df4:	d13c      	bne.n	8014e70 <tcp_parseopt+0xcc>
 8014df6:	4b25      	ldr	r3, [pc, #148]	; (8014e8c <tcp_parseopt+0xe8>)
 8014df8:	881b      	ldrh	r3, [r3, #0]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	4a22      	ldr	r2, [pc, #136]	; (8014e88 <tcp_parseopt+0xe4>)
 8014dfe:	8812      	ldrh	r2, [r2, #0]
 8014e00:	4293      	cmp	r3, r2
 8014e02:	da35      	bge.n	8014e70 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014e04:	f7ff ff98 	bl	8014d38 <tcp_get_next_optbyte>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	021b      	lsls	r3, r3, #8
 8014e0e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014e10:	f7ff ff92 	bl	8014d38 <tcp_get_next_optbyte>
 8014e14:	4603      	mov	r3, r0
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	89bb      	ldrh	r3, [r7, #12]
 8014e1a:	4313      	orrs	r3, r2
 8014e1c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014e1e:	89bb      	ldrh	r3, [r7, #12]
 8014e20:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014e24:	4293      	cmp	r3, r2
 8014e26:	d804      	bhi.n	8014e32 <tcp_parseopt+0x8e>
 8014e28:	89bb      	ldrh	r3, [r7, #12]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d001      	beq.n	8014e32 <tcp_parseopt+0x8e>
 8014e2e:	89ba      	ldrh	r2, [r7, #12]
 8014e30:	e001      	b.n	8014e36 <tcp_parseopt+0x92>
 8014e32:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014e3a:	e010      	b.n	8014e5e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014e3c:	f7ff ff7c 	bl	8014d38 <tcp_get_next_optbyte>
 8014e40:	4603      	mov	r3, r0
 8014e42:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014e44:	7afb      	ldrb	r3, [r7, #11]
 8014e46:	2b01      	cmp	r3, #1
 8014e48:	d914      	bls.n	8014e74 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014e4a:	7afb      	ldrb	r3, [r7, #11]
 8014e4c:	b29a      	uxth	r2, r3
 8014e4e:	4b0f      	ldr	r3, [pc, #60]	; (8014e8c <tcp_parseopt+0xe8>)
 8014e50:	881b      	ldrh	r3, [r3, #0]
 8014e52:	4413      	add	r3, r2
 8014e54:	b29b      	uxth	r3, r3
 8014e56:	3b02      	subs	r3, #2
 8014e58:	b29a      	uxth	r2, r3
 8014e5a:	4b0c      	ldr	r3, [pc, #48]	; (8014e8c <tcp_parseopt+0xe8>)
 8014e5c:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014e5e:	4b0b      	ldr	r3, [pc, #44]	; (8014e8c <tcp_parseopt+0xe8>)
 8014e60:	881a      	ldrh	r2, [r3, #0]
 8014e62:	4b09      	ldr	r3, [pc, #36]	; (8014e88 <tcp_parseopt+0xe4>)
 8014e64:	881b      	ldrh	r3, [r3, #0]
 8014e66:	429a      	cmp	r2, r3
 8014e68:	d3b2      	bcc.n	8014dd0 <tcp_parseopt+0x2c>
 8014e6a:	e004      	b.n	8014e76 <tcp_parseopt+0xd2>
          return;
 8014e6c:	bf00      	nop
 8014e6e:	e002      	b.n	8014e76 <tcp_parseopt+0xd2>
            return;
 8014e70:	bf00      	nop
 8014e72:	e000      	b.n	8014e76 <tcp_parseopt+0xd2>
            return;
 8014e74:	bf00      	nop
      }
    }
  }
}
 8014e76:	3710      	adds	r7, #16
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}
 8014e7c:	0801b6fc 	.word	0x0801b6fc
 8014e80:	0801bba4 	.word	0x0801bba4
 8014e84:	0801b78c 	.word	0x0801b78c
 8014e88:	2400f254 	.word	0x2400f254
 8014e8c:	2400f25c 	.word	0x2400f25c

08014e90 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014e90:	b480      	push	{r7}
 8014e92:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014e94:	4b05      	ldr	r3, [pc, #20]	; (8014eac <tcp_trigger_input_pcb_close+0x1c>)
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	f043 0310 	orr.w	r3, r3, #16
 8014e9c:	b2da      	uxtb	r2, r3
 8014e9e:	4b03      	ldr	r3, [pc, #12]	; (8014eac <tcp_trigger_input_pcb_close+0x1c>)
 8014ea0:	701a      	strb	r2, [r3, #0]
}
 8014ea2:	bf00      	nop
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eaa:	4770      	bx	lr
 8014eac:	2400f26d 	.word	0x2400f26d

08014eb0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d00a      	beq.n	8014ed8 <tcp_route+0x28>
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	7a1b      	ldrb	r3, [r3, #8]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d006      	beq.n	8014ed8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	7a1b      	ldrb	r3, [r3, #8]
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7fa fe68 	bl	800fba4 <netif_get_by_index>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	e003      	b.n	8014ee0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014ed8:	6878      	ldr	r0, [r7, #4]
 8014eda:	f7f8 fcf5 	bl	800d8c8 <ip4_route>
 8014ede:	4603      	mov	r3, r0
  }
}
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	3710      	adds	r7, #16
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}

08014ee8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014ee8:	b590      	push	{r4, r7, lr}
 8014eea:	b087      	sub	sp, #28
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	60f8      	str	r0, [r7, #12]
 8014ef0:	60b9      	str	r1, [r7, #8]
 8014ef2:	603b      	str	r3, [r7, #0]
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d105      	bne.n	8014f0a <tcp_create_segment+0x22>
 8014efe:	4b44      	ldr	r3, [pc, #272]	; (8015010 <tcp_create_segment+0x128>)
 8014f00:	22a3      	movs	r2, #163	; 0xa3
 8014f02:	4944      	ldr	r1, [pc, #272]	; (8015014 <tcp_create_segment+0x12c>)
 8014f04:	4844      	ldr	r0, [pc, #272]	; (8015018 <tcp_create_segment+0x130>)
 8014f06:	f002 ff05 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d105      	bne.n	8014f1c <tcp_create_segment+0x34>
 8014f10:	4b3f      	ldr	r3, [pc, #252]	; (8015010 <tcp_create_segment+0x128>)
 8014f12:	22a4      	movs	r2, #164	; 0xa4
 8014f14:	4941      	ldr	r1, [pc, #260]	; (801501c <tcp_create_segment+0x134>)
 8014f16:	4840      	ldr	r0, [pc, #256]	; (8015018 <tcp_create_segment+0x130>)
 8014f18:	f002 fefc 	bl	8017d14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014f1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014f20:	009b      	lsls	r3, r3, #2
 8014f22:	b2db      	uxtb	r3, r3
 8014f24:	f003 0304 	and.w	r3, r3, #4
 8014f28:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014f2a:	2003      	movs	r0, #3
 8014f2c:	f7fa fa5e 	bl	800f3ec <memp_malloc>
 8014f30:	6138      	str	r0, [r7, #16]
 8014f32:	693b      	ldr	r3, [r7, #16]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d104      	bne.n	8014f42 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014f38:	68b8      	ldr	r0, [r7, #8]
 8014f3a:	f7fb f9c1 	bl	80102c0 <pbuf_free>
    return NULL;
 8014f3e:	2300      	movs	r3, #0
 8014f40:	e061      	b.n	8015006 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014f48:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014f4a:	693b      	ldr	r3, [r7, #16]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	68ba      	ldr	r2, [r7, #8]
 8014f54:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	891a      	ldrh	r2, [r3, #8]
 8014f5a:	7dfb      	ldrb	r3, [r7, #23]
 8014f5c:	b29b      	uxth	r3, r3
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d205      	bcs.n	8014f6e <tcp_create_segment+0x86>
 8014f62:	4b2b      	ldr	r3, [pc, #172]	; (8015010 <tcp_create_segment+0x128>)
 8014f64:	22b0      	movs	r2, #176	; 0xb0
 8014f66:	492e      	ldr	r1, [pc, #184]	; (8015020 <tcp_create_segment+0x138>)
 8014f68:	482b      	ldr	r0, [pc, #172]	; (8015018 <tcp_create_segment+0x130>)
 8014f6a:	f002 fed3 	bl	8017d14 <iprintf>
  seg->len = p->tot_len - optlen;
 8014f6e:	68bb      	ldr	r3, [r7, #8]
 8014f70:	891a      	ldrh	r2, [r3, #8]
 8014f72:	7dfb      	ldrb	r3, [r7, #23]
 8014f74:	b29b      	uxth	r3, r3
 8014f76:	1ad3      	subs	r3, r2, r3
 8014f78:	b29a      	uxth	r2, r3
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014f7e:	2114      	movs	r1, #20
 8014f80:	68b8      	ldr	r0, [r7, #8]
 8014f82:	f7fb f907 	bl	8010194 <pbuf_add_header>
 8014f86:	4603      	mov	r3, r0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d004      	beq.n	8014f96 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014f8c:	6938      	ldr	r0, [r7, #16]
 8014f8e:	f7fd f800 	bl	8011f92 <tcp_seg_free>
    return NULL;
 8014f92:	2300      	movs	r3, #0
 8014f94:	e037      	b.n	8015006 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	685b      	ldr	r3, [r3, #4]
 8014f9a:	685a      	ldr	r2, [r3, #4]
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	8ada      	ldrh	r2, [r3, #22]
 8014fa4:	693b      	ldr	r3, [r7, #16]
 8014fa6:	68dc      	ldr	r4, [r3, #12]
 8014fa8:	4610      	mov	r0, r2
 8014faa:	f7f7 f9b5 	bl	800c318 <lwip_htons>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	8b1a      	ldrh	r2, [r3, #24]
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	68dc      	ldr	r4, [r3, #12]
 8014fba:	4610      	mov	r0, r2
 8014fbc:	f7f7 f9ac 	bl	800c318 <lwip_htons>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	68dc      	ldr	r4, [r3, #12]
 8014fc8:	6838      	ldr	r0, [r7, #0]
 8014fca:	f7f7 f9ba 	bl	800c342 <lwip_htonl>
 8014fce:	4603      	mov	r3, r0
 8014fd0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014fd2:	7dfb      	ldrb	r3, [r7, #23]
 8014fd4:	089b      	lsrs	r3, r3, #2
 8014fd6:	b2db      	uxtb	r3, r3
 8014fd8:	b29b      	uxth	r3, r3
 8014fda:	3305      	adds	r3, #5
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	031b      	lsls	r3, r3, #12
 8014fe0:	b29a      	uxth	r2, r3
 8014fe2:	79fb      	ldrb	r3, [r7, #7]
 8014fe4:	b29b      	uxth	r3, r3
 8014fe6:	4313      	orrs	r3, r2
 8014fe8:	b29a      	uxth	r2, r3
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	68dc      	ldr	r4, [r3, #12]
 8014fee:	4610      	mov	r0, r2
 8014ff0:	f7f7 f992 	bl	800c318 <lwip_htons>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014ff8:	693b      	ldr	r3, [r7, #16]
 8014ffa:	68db      	ldr	r3, [r3, #12]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	749a      	strb	r2, [r3, #18]
 8015000:	2200      	movs	r2, #0
 8015002:	74da      	strb	r2, [r3, #19]
  return seg;
 8015004:	693b      	ldr	r3, [r7, #16]
}
 8015006:	4618      	mov	r0, r3
 8015008:	371c      	adds	r7, #28
 801500a:	46bd      	mov	sp, r7
 801500c:	bd90      	pop	{r4, r7, pc}
 801500e:	bf00      	nop
 8015010:	0801bbc0 	.word	0x0801bbc0
 8015014:	0801bc3c 	.word	0x0801bc3c
 8015018:	0801bc5c 	.word	0x0801bc5c
 801501c:	0801bc84 	.word	0x0801bc84
 8015020:	0801bca8 	.word	0x0801bca8

08015024 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b086      	sub	sp, #24
 8015028:	af00      	add	r7, sp, #0
 801502a:	607b      	str	r3, [r7, #4]
 801502c:	4603      	mov	r3, r0
 801502e:	73fb      	strb	r3, [r7, #15]
 8015030:	460b      	mov	r3, r1
 8015032:	81bb      	strh	r3, [r7, #12]
 8015034:	4613      	mov	r3, r2
 8015036:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015038:	89bb      	ldrh	r3, [r7, #12]
 801503a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	2b00      	cmp	r3, #0
 8015040:	d105      	bne.n	801504e <tcp_pbuf_prealloc+0x2a>
 8015042:	4b30      	ldr	r3, [pc, #192]	; (8015104 <tcp_pbuf_prealloc+0xe0>)
 8015044:	22e8      	movs	r2, #232	; 0xe8
 8015046:	4930      	ldr	r1, [pc, #192]	; (8015108 <tcp_pbuf_prealloc+0xe4>)
 8015048:	4830      	ldr	r0, [pc, #192]	; (801510c <tcp_pbuf_prealloc+0xe8>)
 801504a:	f002 fe63 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801504e:	6a3b      	ldr	r3, [r7, #32]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d105      	bne.n	8015060 <tcp_pbuf_prealloc+0x3c>
 8015054:	4b2b      	ldr	r3, [pc, #172]	; (8015104 <tcp_pbuf_prealloc+0xe0>)
 8015056:	22e9      	movs	r2, #233	; 0xe9
 8015058:	492d      	ldr	r1, [pc, #180]	; (8015110 <tcp_pbuf_prealloc+0xec>)
 801505a:	482c      	ldr	r0, [pc, #176]	; (801510c <tcp_pbuf_prealloc+0xe8>)
 801505c:	f002 fe5a 	bl	8017d14 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015060:	89ba      	ldrh	r2, [r7, #12]
 8015062:	897b      	ldrh	r3, [r7, #10]
 8015064:	429a      	cmp	r2, r3
 8015066:	d221      	bcs.n	80150ac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801506c:	f003 0302 	and.w	r3, r3, #2
 8015070:	2b00      	cmp	r3, #0
 8015072:	d111      	bne.n	8015098 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015074:	6a3b      	ldr	r3, [r7, #32]
 8015076:	8b5b      	ldrh	r3, [r3, #26]
 8015078:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801507c:	2b00      	cmp	r3, #0
 801507e:	d115      	bne.n	80150ac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015080:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015084:	2b00      	cmp	r3, #0
 8015086:	d007      	beq.n	8015098 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015088:	6a3b      	ldr	r3, [r7, #32]
 801508a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801508c:	2b00      	cmp	r3, #0
 801508e:	d103      	bne.n	8015098 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015090:	6a3b      	ldr	r3, [r7, #32]
 8015092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015094:	2b00      	cmp	r3, #0
 8015096:	d009      	beq.n	80150ac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015098:	89bb      	ldrh	r3, [r7, #12]
 801509a:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801509e:	f023 0203 	bic.w	r2, r3, #3
 80150a2:	897b      	ldrh	r3, [r7, #10]
 80150a4:	4293      	cmp	r3, r2
 80150a6:	bf28      	it	cs
 80150a8:	4613      	movcs	r3, r2
 80150aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80150ac:	8af9      	ldrh	r1, [r7, #22]
 80150ae:	7bfb      	ldrb	r3, [r7, #15]
 80150b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7fa fe1f 	bl	800fcf8 <pbuf_alloc>
 80150ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d101      	bne.n	80150c6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80150c2:	2300      	movs	r3, #0
 80150c4:	e019      	b.n	80150fa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d006      	beq.n	80150dc <tcp_pbuf_prealloc+0xb8>
 80150ce:	4b0d      	ldr	r3, [pc, #52]	; (8015104 <tcp_pbuf_prealloc+0xe0>)
 80150d0:	f240 120b 	movw	r2, #267	; 0x10b
 80150d4:	490f      	ldr	r1, [pc, #60]	; (8015114 <tcp_pbuf_prealloc+0xf0>)
 80150d6:	480d      	ldr	r0, [pc, #52]	; (801510c <tcp_pbuf_prealloc+0xe8>)
 80150d8:	f002 fe1c 	bl	8017d14 <iprintf>
  *oversize = p->len - length;
 80150dc:	693b      	ldr	r3, [r7, #16]
 80150de:	895a      	ldrh	r2, [r3, #10]
 80150e0:	89bb      	ldrh	r3, [r7, #12]
 80150e2:	1ad3      	subs	r3, r2, r3
 80150e4:	b29a      	uxth	r2, r3
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80150ea:	693b      	ldr	r3, [r7, #16]
 80150ec:	89ba      	ldrh	r2, [r7, #12]
 80150ee:	811a      	strh	r2, [r3, #8]
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	891a      	ldrh	r2, [r3, #8]
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	815a      	strh	r2, [r3, #10]
  return p;
 80150f8:	693b      	ldr	r3, [r7, #16]
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3718      	adds	r7, #24
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd80      	pop	{r7, pc}
 8015102:	bf00      	nop
 8015104:	0801bbc0 	.word	0x0801bbc0
 8015108:	0801bcc0 	.word	0x0801bcc0
 801510c:	0801bc5c 	.word	0x0801bc5c
 8015110:	0801bce4 	.word	0x0801bce4
 8015114:	0801bd04 	.word	0x0801bd04

08015118 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b082      	sub	sp, #8
 801511c:	af00      	add	r7, sp, #0
 801511e:	6078      	str	r0, [r7, #4]
 8015120:	460b      	mov	r3, r1
 8015122:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d106      	bne.n	8015138 <tcp_write_checks+0x20>
 801512a:	4b33      	ldr	r3, [pc, #204]	; (80151f8 <tcp_write_checks+0xe0>)
 801512c:	f240 1233 	movw	r2, #307	; 0x133
 8015130:	4932      	ldr	r1, [pc, #200]	; (80151fc <tcp_write_checks+0xe4>)
 8015132:	4833      	ldr	r0, [pc, #204]	; (8015200 <tcp_write_checks+0xe8>)
 8015134:	f002 fdee 	bl	8017d14 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	7d1b      	ldrb	r3, [r3, #20]
 801513c:	2b04      	cmp	r3, #4
 801513e:	d00e      	beq.n	801515e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015144:	2b07      	cmp	r3, #7
 8015146:	d00a      	beq.n	801515e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801514c:	2b02      	cmp	r3, #2
 801514e:	d006      	beq.n	801515e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015154:	2b03      	cmp	r3, #3
 8015156:	d002      	beq.n	801515e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015158:	f06f 030a 	mvn.w	r3, #10
 801515c:	e048      	b.n	80151f0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801515e:	887b      	ldrh	r3, [r7, #2]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d101      	bne.n	8015168 <tcp_write_checks+0x50>
    return ERR_OK;
 8015164:	2300      	movs	r3, #0
 8015166:	e043      	b.n	80151f0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801516e:	887a      	ldrh	r2, [r7, #2]
 8015170:	429a      	cmp	r2, r3
 8015172:	d909      	bls.n	8015188 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	8b5b      	ldrh	r3, [r3, #26]
 8015178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801517c:	b29a      	uxth	r2, r3
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015186:	e033      	b.n	80151f0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801518e:	2b0f      	cmp	r3, #15
 8015190:	d909      	bls.n	80151a6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	8b5b      	ldrh	r3, [r3, #26]
 8015196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801519a:	b29a      	uxth	r2, r3
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80151a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151a4:	e024      	b.n	80151f0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d00f      	beq.n	80151d0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d11a      	bne.n	80151ee <tcp_write_checks+0xd6>
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d116      	bne.n	80151ee <tcp_write_checks+0xd6>
 80151c0:	4b0d      	ldr	r3, [pc, #52]	; (80151f8 <tcp_write_checks+0xe0>)
 80151c2:	f240 1255 	movw	r2, #341	; 0x155
 80151c6:	490f      	ldr	r1, [pc, #60]	; (8015204 <tcp_write_checks+0xec>)
 80151c8:	480d      	ldr	r0, [pc, #52]	; (8015200 <tcp_write_checks+0xe8>)
 80151ca:	f002 fda3 	bl	8017d14 <iprintf>
 80151ce:	e00e      	b.n	80151ee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d103      	bne.n	80151e0 <tcp_write_checks+0xc8>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d006      	beq.n	80151ee <tcp_write_checks+0xd6>
 80151e0:	4b05      	ldr	r3, [pc, #20]	; (80151f8 <tcp_write_checks+0xe0>)
 80151e2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80151e6:	4908      	ldr	r1, [pc, #32]	; (8015208 <tcp_write_checks+0xf0>)
 80151e8:	4805      	ldr	r0, [pc, #20]	; (8015200 <tcp_write_checks+0xe8>)
 80151ea:	f002 fd93 	bl	8017d14 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80151ee:	2300      	movs	r3, #0
}
 80151f0:	4618      	mov	r0, r3
 80151f2:	3708      	adds	r7, #8
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	0801bbc0 	.word	0x0801bbc0
 80151fc:	0801bd18 	.word	0x0801bd18
 8015200:	0801bc5c 	.word	0x0801bc5c
 8015204:	0801bd38 	.word	0x0801bd38
 8015208:	0801bd74 	.word	0x0801bd74

0801520c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801520c:	b590      	push	{r4, r7, lr}
 801520e:	b09b      	sub	sp, #108	; 0x6c
 8015210:	af04      	add	r7, sp, #16
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	4611      	mov	r1, r2
 8015218:	461a      	mov	r2, r3
 801521a:	460b      	mov	r3, r1
 801521c:	80fb      	strh	r3, [r7, #6]
 801521e:	4613      	mov	r3, r2
 8015220:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015222:	2300      	movs	r3, #0
 8015224:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015226:	2300      	movs	r3, #0
 8015228:	653b      	str	r3, [r7, #80]	; 0x50
 801522a:	2300      	movs	r3, #0
 801522c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801522e:	2300      	movs	r3, #0
 8015230:	64bb      	str	r3, [r7, #72]	; 0x48
 8015232:	2300      	movs	r3, #0
 8015234:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015236:	2300      	movs	r3, #0
 8015238:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801523c:	2300      	movs	r3, #0
 801523e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015242:	2300      	movs	r3, #0
 8015244:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015246:	2300      	movs	r3, #0
 8015248:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801524a:	2300      	movs	r3, #0
 801524c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d109      	bne.n	8015268 <tcp_write+0x5c>
 8015254:	4ba4      	ldr	r3, [pc, #656]	; (80154e8 <tcp_write+0x2dc>)
 8015256:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801525a:	49a4      	ldr	r1, [pc, #656]	; (80154ec <tcp_write+0x2e0>)
 801525c:	48a4      	ldr	r0, [pc, #656]	; (80154f0 <tcp_write+0x2e4>)
 801525e:	f002 fd59 	bl	8017d14 <iprintf>
 8015262:	f06f 030f 	mvn.w	r3, #15
 8015266:	e32a      	b.n	80158be <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801526e:	085b      	lsrs	r3, r3, #1
 8015270:	b29a      	uxth	r2, r3
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015276:	4293      	cmp	r3, r2
 8015278:	bf28      	it	cs
 801527a:	4613      	movcs	r3, r2
 801527c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801527e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015280:	2b00      	cmp	r3, #0
 8015282:	d102      	bne.n	801528a <tcp_write+0x7e>
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015288:	e000      	b.n	801528c <tcp_write+0x80>
 801528a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801528c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d109      	bne.n	80152a8 <tcp_write+0x9c>
 8015294:	4b94      	ldr	r3, [pc, #592]	; (80154e8 <tcp_write+0x2dc>)
 8015296:	f240 12ad 	movw	r2, #429	; 0x1ad
 801529a:	4996      	ldr	r1, [pc, #600]	; (80154f4 <tcp_write+0x2e8>)
 801529c:	4894      	ldr	r0, [pc, #592]	; (80154f0 <tcp_write+0x2e4>)
 801529e:	f002 fd39 	bl	8017d14 <iprintf>
 80152a2:	f06f 030f 	mvn.w	r3, #15
 80152a6:	e30a      	b.n	80158be <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80152a8:	88fb      	ldrh	r3, [r7, #6]
 80152aa:	4619      	mov	r1, r3
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f7ff ff33 	bl	8015118 <tcp_write_checks>
 80152b2:	4603      	mov	r3, r0
 80152b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80152b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d002      	beq.n	80152c6 <tcp_write+0xba>
    return err;
 80152c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80152c4:	e2fb      	b.n	80158be <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80152d0:	2300      	movs	r3, #0
 80152d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152da:	2b00      	cmp	r3, #0
 80152dc:	f000 80f6 	beq.w	80154cc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152e4:	653b      	str	r3, [r7, #80]	; 0x50
 80152e6:	e002      	b.n	80152ee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80152e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80152ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d1f8      	bne.n	80152e8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80152f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152f8:	7a9b      	ldrb	r3, [r3, #10]
 80152fa:	009b      	lsls	r3, r3, #2
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	f003 0304 	and.w	r3, r3, #4
 8015302:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015304:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015308:	891b      	ldrh	r3, [r3, #8]
 801530a:	4619      	mov	r1, r3
 801530c:	8c3b      	ldrh	r3, [r7, #32]
 801530e:	440b      	add	r3, r1
 8015310:	429a      	cmp	r2, r3
 8015312:	da06      	bge.n	8015322 <tcp_write+0x116>
 8015314:	4b74      	ldr	r3, [pc, #464]	; (80154e8 <tcp_write+0x2dc>)
 8015316:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801531a:	4977      	ldr	r1, [pc, #476]	; (80154f8 <tcp_write+0x2ec>)
 801531c:	4874      	ldr	r0, [pc, #464]	; (80154f0 <tcp_write+0x2e4>)
 801531e:	f002 fcf9 	bl	8017d14 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015324:	891a      	ldrh	r2, [r3, #8]
 8015326:	8c3b      	ldrh	r3, [r7, #32]
 8015328:	4413      	add	r3, r2
 801532a:	b29b      	uxth	r3, r3
 801532c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801532e:	1ad3      	subs	r3, r2, r3
 8015330:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015338:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801533a:	8a7b      	ldrh	r3, [r7, #18]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d026      	beq.n	801538e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015340:	8a7b      	ldrh	r3, [r7, #18]
 8015342:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015344:	429a      	cmp	r2, r3
 8015346:	d206      	bcs.n	8015356 <tcp_write+0x14a>
 8015348:	4b67      	ldr	r3, [pc, #412]	; (80154e8 <tcp_write+0x2dc>)
 801534a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801534e:	496b      	ldr	r1, [pc, #428]	; (80154fc <tcp_write+0x2f0>)
 8015350:	4867      	ldr	r0, [pc, #412]	; (80154f0 <tcp_write+0x2e4>)
 8015352:	f002 fcdf 	bl	8017d14 <iprintf>
      seg = last_unsent;
 8015356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015358:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801535a:	8a7b      	ldrh	r3, [r7, #18]
 801535c:	88fa      	ldrh	r2, [r7, #6]
 801535e:	4293      	cmp	r3, r2
 8015360:	bf28      	it	cs
 8015362:	4613      	movcs	r3, r2
 8015364:	b29b      	uxth	r3, r3
 8015366:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015368:	4293      	cmp	r3, r2
 801536a:	bf28      	it	cs
 801536c:	4613      	movcs	r3, r2
 801536e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8015370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015374:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015376:	4413      	add	r3, r2
 8015378:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801537c:	8a7a      	ldrh	r2, [r7, #18]
 801537e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015380:	1ad3      	subs	r3, r2, r3
 8015382:	b29b      	uxth	r3, r3
 8015384:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015386:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015388:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801538a:	1ad3      	subs	r3, r2, r3
 801538c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801538e:	8a7b      	ldrh	r3, [r7, #18]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d00b      	beq.n	80153ac <tcp_write+0x1a0>
 8015394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015398:	88fb      	ldrh	r3, [r7, #6]
 801539a:	429a      	cmp	r2, r3
 801539c:	d006      	beq.n	80153ac <tcp_write+0x1a0>
 801539e:	4b52      	ldr	r3, [pc, #328]	; (80154e8 <tcp_write+0x2dc>)
 80153a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80153a4:	4956      	ldr	r1, [pc, #344]	; (8015500 <tcp_write+0x2f4>)
 80153a6:	4852      	ldr	r0, [pc, #328]	; (80154f0 <tcp_write+0x2e4>)
 80153a8:	f002 fcb4 	bl	8017d14 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80153ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80153b0:	88fb      	ldrh	r3, [r7, #6]
 80153b2:	429a      	cmp	r2, r3
 80153b4:	f080 8167 	bcs.w	8015686 <tcp_write+0x47a>
 80153b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	f000 8163 	beq.w	8015686 <tcp_write+0x47a>
 80153c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153c2:	891b      	ldrh	r3, [r3, #8]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	f000 815e 	beq.w	8015686 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80153ca:	88fa      	ldrh	r2, [r7, #6]
 80153cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153d0:	1ad2      	subs	r2, r2, r3
 80153d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153d4:	4293      	cmp	r3, r2
 80153d6:	bfa8      	it	ge
 80153d8:	4613      	movge	r3, r2
 80153da:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80153dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153de:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80153e0:	797b      	ldrb	r3, [r7, #5]
 80153e2:	f003 0301 	and.w	r3, r3, #1
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d027      	beq.n	801543a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80153ea:	f107 0012 	add.w	r0, r7, #18
 80153ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80153f0:	8bf9      	ldrh	r1, [r7, #30]
 80153f2:	2301      	movs	r3, #1
 80153f4:	9302      	str	r3, [sp, #8]
 80153f6:	797b      	ldrb	r3, [r7, #5]
 80153f8:	9301      	str	r3, [sp, #4]
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	9300      	str	r3, [sp, #0]
 80153fe:	4603      	mov	r3, r0
 8015400:	2000      	movs	r0, #0
 8015402:	f7ff fe0f 	bl	8015024 <tcp_pbuf_prealloc>
 8015406:	6578      	str	r0, [r7, #84]	; 0x54
 8015408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801540a:	2b00      	cmp	r3, #0
 801540c:	f000 8225 	beq.w	801585a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015412:	6858      	ldr	r0, [r3, #4]
 8015414:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015418:	68ba      	ldr	r2, [r7, #8]
 801541a:	4413      	add	r3, r2
 801541c:	8bfa      	ldrh	r2, [r7, #30]
 801541e:	4619      	mov	r1, r3
 8015420:	f002 fbb3 	bl	8017b8a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015424:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015426:	f7fa ffd9 	bl	80103dc <pbuf_clen>
 801542a:	4603      	mov	r3, r0
 801542c:	461a      	mov	r2, r3
 801542e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015432:	4413      	add	r3, r2
 8015434:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015438:	e041      	b.n	80154be <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801543a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801543c:	685b      	ldr	r3, [r3, #4]
 801543e:	637b      	str	r3, [r7, #52]	; 0x34
 8015440:	e002      	b.n	8015448 <tcp_write+0x23c>
 8015442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	637b      	str	r3, [r7, #52]	; 0x34
 8015448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d1f8      	bne.n	8015442 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015452:	7b1b      	ldrb	r3, [r3, #12]
 8015454:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015458:	2b00      	cmp	r3, #0
 801545a:	d115      	bne.n	8015488 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015462:	8952      	ldrh	r2, [r2, #10]
 8015464:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015466:	68ba      	ldr	r2, [r7, #8]
 8015468:	429a      	cmp	r2, r3
 801546a:	d10d      	bne.n	8015488 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801546c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015470:	2b00      	cmp	r3, #0
 8015472:	d006      	beq.n	8015482 <tcp_write+0x276>
 8015474:	4b1c      	ldr	r3, [pc, #112]	; (80154e8 <tcp_write+0x2dc>)
 8015476:	f240 2231 	movw	r2, #561	; 0x231
 801547a:	4922      	ldr	r1, [pc, #136]	; (8015504 <tcp_write+0x2f8>)
 801547c:	481c      	ldr	r0, [pc, #112]	; (80154f0 <tcp_write+0x2e4>)
 801547e:	f002 fc49 	bl	8017d14 <iprintf>
          extendlen = seglen;
 8015482:	8bfb      	ldrh	r3, [r7, #30]
 8015484:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015486:	e01a      	b.n	80154be <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015488:	8bfb      	ldrh	r3, [r7, #30]
 801548a:	2201      	movs	r2, #1
 801548c:	4619      	mov	r1, r3
 801548e:	2000      	movs	r0, #0
 8015490:	f7fa fc32 	bl	800fcf8 <pbuf_alloc>
 8015494:	6578      	str	r0, [r7, #84]	; 0x54
 8015496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015498:	2b00      	cmp	r3, #0
 801549a:	f000 81e0 	beq.w	801585e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801549e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154a2:	68ba      	ldr	r2, [r7, #8]
 80154a4:	441a      	add	r2, r3
 80154a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154a8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80154aa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80154ac:	f7fa ff96 	bl	80103dc <pbuf_clen>
 80154b0:	4603      	mov	r3, r0
 80154b2:	461a      	mov	r2, r3
 80154b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80154b8:	4413      	add	r3, r2
 80154ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80154be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80154c2:	8bfb      	ldrh	r3, [r7, #30]
 80154c4:	4413      	add	r3, r2
 80154c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80154ca:	e0dc      	b.n	8015686 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	f000 80d7 	beq.w	8015686 <tcp_write+0x47a>
 80154d8:	4b03      	ldr	r3, [pc, #12]	; (80154e8 <tcp_write+0x2dc>)
 80154da:	f240 224a 	movw	r2, #586	; 0x24a
 80154de:	490a      	ldr	r1, [pc, #40]	; (8015508 <tcp_write+0x2fc>)
 80154e0:	4803      	ldr	r0, [pc, #12]	; (80154f0 <tcp_write+0x2e4>)
 80154e2:	f002 fc17 	bl	8017d14 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80154e6:	e0ce      	b.n	8015686 <tcp_write+0x47a>
 80154e8:	0801bbc0 	.word	0x0801bbc0
 80154ec:	0801bda8 	.word	0x0801bda8
 80154f0:	0801bc5c 	.word	0x0801bc5c
 80154f4:	0801bdc0 	.word	0x0801bdc0
 80154f8:	0801bdf4 	.word	0x0801bdf4
 80154fc:	0801be0c 	.word	0x0801be0c
 8015500:	0801be2c 	.word	0x0801be2c
 8015504:	0801be4c 	.word	0x0801be4c
 8015508:	0801be78 	.word	0x0801be78
    struct pbuf *p;
    u16_t left = len - pos;
 801550c:	88fa      	ldrh	r2, [r7, #6]
 801550e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015512:	1ad3      	subs	r3, r2, r3
 8015514:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015516:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801551a:	b29b      	uxth	r3, r3
 801551c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801551e:	1ad3      	subs	r3, r2, r3
 8015520:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015522:	8b7a      	ldrh	r2, [r7, #26]
 8015524:	8bbb      	ldrh	r3, [r7, #28]
 8015526:	4293      	cmp	r3, r2
 8015528:	bf28      	it	cs
 801552a:	4613      	movcs	r3, r2
 801552c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801552e:	797b      	ldrb	r3, [r7, #5]
 8015530:	f003 0301 	and.w	r3, r3, #1
 8015534:	2b00      	cmp	r3, #0
 8015536:	d036      	beq.n	80155a6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015538:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801553c:	b29a      	uxth	r2, r3
 801553e:	8b3b      	ldrh	r3, [r7, #24]
 8015540:	4413      	add	r3, r2
 8015542:	b299      	uxth	r1, r3
 8015544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015546:	2b00      	cmp	r3, #0
 8015548:	bf0c      	ite	eq
 801554a:	2301      	moveq	r3, #1
 801554c:	2300      	movne	r3, #0
 801554e:	b2db      	uxtb	r3, r3
 8015550:	f107 0012 	add.w	r0, r7, #18
 8015554:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015556:	9302      	str	r3, [sp, #8]
 8015558:	797b      	ldrb	r3, [r7, #5]
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	9300      	str	r3, [sp, #0]
 8015560:	4603      	mov	r3, r0
 8015562:	2036      	movs	r0, #54	; 0x36
 8015564:	f7ff fd5e 	bl	8015024 <tcp_pbuf_prealloc>
 8015568:	6338      	str	r0, [r7, #48]	; 0x30
 801556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801556c:	2b00      	cmp	r3, #0
 801556e:	f000 8178 	beq.w	8015862 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015574:	895b      	ldrh	r3, [r3, #10]
 8015576:	8b3a      	ldrh	r2, [r7, #24]
 8015578:	429a      	cmp	r2, r3
 801557a:	d906      	bls.n	801558a <tcp_write+0x37e>
 801557c:	4b8c      	ldr	r3, [pc, #560]	; (80157b0 <tcp_write+0x5a4>)
 801557e:	f240 2266 	movw	r2, #614	; 0x266
 8015582:	498c      	ldr	r1, [pc, #560]	; (80157b4 <tcp_write+0x5a8>)
 8015584:	488c      	ldr	r0, [pc, #560]	; (80157b8 <tcp_write+0x5ac>)
 8015586:	f002 fbc5 	bl	8017d14 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558c:	685a      	ldr	r2, [r3, #4]
 801558e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015592:	18d0      	adds	r0, r2, r3
 8015594:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015598:	68ba      	ldr	r2, [r7, #8]
 801559a:	4413      	add	r3, r2
 801559c:	8b3a      	ldrh	r2, [r7, #24]
 801559e:	4619      	mov	r1, r3
 80155a0:	f002 faf3 	bl	8017b8a <memcpy>
 80155a4:	e02f      	b.n	8015606 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80155a6:	8a7b      	ldrh	r3, [r7, #18]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d006      	beq.n	80155ba <tcp_write+0x3ae>
 80155ac:	4b80      	ldr	r3, [pc, #512]	; (80157b0 <tcp_write+0x5a4>)
 80155ae:	f240 2271 	movw	r2, #625	; 0x271
 80155b2:	4982      	ldr	r1, [pc, #520]	; (80157bc <tcp_write+0x5b0>)
 80155b4:	4880      	ldr	r0, [pc, #512]	; (80157b8 <tcp_write+0x5ac>)
 80155b6:	f002 fbad 	bl	8017d14 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80155ba:	8b3b      	ldrh	r3, [r7, #24]
 80155bc:	2201      	movs	r2, #1
 80155be:	4619      	mov	r1, r3
 80155c0:	2036      	movs	r0, #54	; 0x36
 80155c2:	f7fa fb99 	bl	800fcf8 <pbuf_alloc>
 80155c6:	6178      	str	r0, [r7, #20]
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	f000 814b 	beq.w	8015866 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80155d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155d4:	68ba      	ldr	r2, [r7, #8]
 80155d6:	441a      	add	r2, r3
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80155dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155e6:	4619      	mov	r1, r3
 80155e8:	2036      	movs	r0, #54	; 0x36
 80155ea:	f7fa fb85 	bl	800fcf8 <pbuf_alloc>
 80155ee:	6338      	str	r0, [r7, #48]	; 0x30
 80155f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d103      	bne.n	80155fe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80155f6:	6978      	ldr	r0, [r7, #20]
 80155f8:	f7fa fe62 	bl	80102c0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80155fc:	e136      	b.n	801586c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80155fe:	6979      	ldr	r1, [r7, #20]
 8015600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015602:	f7fa ff2b 	bl	801045c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015608:	f7fa fee8 	bl	80103dc <pbuf_clen>
 801560c:	4603      	mov	r3, r0
 801560e:	461a      	mov	r2, r3
 8015610:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015614:	4413      	add	r3, r2
 8015616:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801561a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801561e:	2b10      	cmp	r3, #16
 8015620:	d903      	bls.n	801562a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015624:	f7fa fe4c 	bl	80102c0 <pbuf_free>
      goto memerr;
 8015628:	e120      	b.n	801586c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801562e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015632:	441a      	add	r2, r3
 8015634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	4613      	mov	r3, r2
 801563c:	2200      	movs	r2, #0
 801563e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f7ff fc51 	bl	8014ee8 <tcp_create_segment>
 8015646:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801564a:	2b00      	cmp	r3, #0
 801564c:	f000 810d 	beq.w	801586a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8015650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015652:	2b00      	cmp	r3, #0
 8015654:	d102      	bne.n	801565c <tcp_write+0x450>
      queue = seg;
 8015656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015658:	647b      	str	r3, [r7, #68]	; 0x44
 801565a:	e00c      	b.n	8015676 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801565c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801565e:	2b00      	cmp	r3, #0
 8015660:	d106      	bne.n	8015670 <tcp_write+0x464>
 8015662:	4b53      	ldr	r3, [pc, #332]	; (80157b0 <tcp_write+0x5a4>)
 8015664:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015668:	4955      	ldr	r1, [pc, #340]	; (80157c0 <tcp_write+0x5b4>)
 801566a:	4853      	ldr	r0, [pc, #332]	; (80157b8 <tcp_write+0x5ac>)
 801566c:	f002 fb52 	bl	8017d14 <iprintf>
      prev_seg->next = seg;
 8015670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015674:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015678:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801567a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801567e:	8b3b      	ldrh	r3, [r7, #24]
 8015680:	4413      	add	r3, r2
 8015682:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015686:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801568a:	88fb      	ldrh	r3, [r7, #6]
 801568c:	429a      	cmp	r2, r3
 801568e:	f4ff af3d 	bcc.w	801550c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8015692:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015694:	2b00      	cmp	r3, #0
 8015696:	d02c      	beq.n	80156f2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801569a:	685b      	ldr	r3, [r3, #4]
 801569c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801569e:	e01e      	b.n	80156de <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80156a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a2:	891a      	ldrh	r2, [r3, #8]
 80156a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156a6:	4413      	add	r3, r2
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80156ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d110      	bne.n	80156d8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80156b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156bc:	8952      	ldrh	r2, [r2, #10]
 80156be:	4413      	add	r3, r2
 80156c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80156c2:	68b9      	ldr	r1, [r7, #8]
 80156c4:	4618      	mov	r0, r3
 80156c6:	f002 fa60 	bl	8017b8a <memcpy>
        p->len += oversize_used;
 80156ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156cc:	895a      	ldrh	r2, [r3, #10]
 80156ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156d0:	4413      	add	r3, r2
 80156d2:	b29a      	uxth	r2, r3
 80156d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80156d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d1dd      	bne.n	80156a0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80156e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156e6:	891a      	ldrh	r2, [r3, #8]
 80156e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156ea:	4413      	add	r3, r2
 80156ec:	b29a      	uxth	r2, r3
 80156ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156f0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80156f2:	8a7a      	ldrh	r2, [r7, #18]
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80156fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d018      	beq.n	8015732 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8015700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015702:	2b00      	cmp	r3, #0
 8015704:	d106      	bne.n	8015714 <tcp_write+0x508>
 8015706:	4b2a      	ldr	r3, [pc, #168]	; (80157b0 <tcp_write+0x5a4>)
 8015708:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801570c:	492d      	ldr	r1, [pc, #180]	; (80157c4 <tcp_write+0x5b8>)
 801570e:	482a      	ldr	r0, [pc, #168]	; (80157b8 <tcp_write+0x5ac>)
 8015710:	f002 fb00 	bl	8017d14 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8015714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801571a:	4618      	mov	r0, r3
 801571c:	f7fa fe9e 	bl	801045c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8015720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015722:	891a      	ldrh	r2, [r3, #8]
 8015724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015726:	891b      	ldrh	r3, [r3, #8]
 8015728:	4413      	add	r3, r2
 801572a:	b29a      	uxth	r2, r3
 801572c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801572e:	811a      	strh	r2, [r3, #8]
 8015730:	e037      	b.n	80157a2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8015732:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015734:	2b00      	cmp	r3, #0
 8015736:	d034      	beq.n	80157a2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801573a:	2b00      	cmp	r3, #0
 801573c:	d003      	beq.n	8015746 <tcp_write+0x53a>
 801573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015740:	685b      	ldr	r3, [r3, #4]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d106      	bne.n	8015754 <tcp_write+0x548>
 8015746:	4b1a      	ldr	r3, [pc, #104]	; (80157b0 <tcp_write+0x5a4>)
 8015748:	f240 22e6 	movw	r2, #742	; 0x2e6
 801574c:	491e      	ldr	r1, [pc, #120]	; (80157c8 <tcp_write+0x5bc>)
 801574e:	481a      	ldr	r0, [pc, #104]	; (80157b8 <tcp_write+0x5ac>)
 8015750:	f002 fae0 	bl	8017d14 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015756:	685b      	ldr	r3, [r3, #4]
 8015758:	62bb      	str	r3, [r7, #40]	; 0x28
 801575a:	e009      	b.n	8015770 <tcp_write+0x564>
      p->tot_len += extendlen;
 801575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575e:	891a      	ldrh	r2, [r3, #8]
 8015760:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015762:	4413      	add	r3, r2
 8015764:	b29a      	uxth	r2, r3
 8015766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015768:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801576a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d1f1      	bne.n	801575c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	891a      	ldrh	r2, [r3, #8]
 801577c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801577e:	4413      	add	r3, r2
 8015780:	b29a      	uxth	r2, r3
 8015782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015784:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015788:	895a      	ldrh	r2, [r3, #10]
 801578a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801578c:	4413      	add	r3, r2
 801578e:	b29a      	uxth	r2, r3
 8015790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015792:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015796:	891a      	ldrh	r2, [r3, #8]
 8015798:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801579a:	4413      	add	r3, r2
 801579c:	b29a      	uxth	r2, r3
 801579e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80157a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d111      	bne.n	80157cc <tcp_write+0x5c0>
    pcb->unsent = queue;
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80157ae:	e010      	b.n	80157d2 <tcp_write+0x5c6>
 80157b0:	0801bbc0 	.word	0x0801bbc0
 80157b4:	0801bea8 	.word	0x0801bea8
 80157b8:	0801bc5c 	.word	0x0801bc5c
 80157bc:	0801bee8 	.word	0x0801bee8
 80157c0:	0801bef8 	.word	0x0801bef8
 80157c4:	0801bf0c 	.word	0x0801bf0c
 80157c8:	0801bf44 	.word	0x0801bf44
  } else {
    last_unsent->next = queue;
 80157cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80157d6:	88fb      	ldrh	r3, [r7, #6]
 80157d8:	441a      	add	r2, r3
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80157e4:	88fb      	ldrh	r3, [r7, #6]
 80157e6:	1ad3      	subs	r3, r2, r3
 80157e8:	b29a      	uxth	r2, r3
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80157f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015800:	2b00      	cmp	r3, #0
 8015802:	d00e      	beq.n	8015822 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015808:	2b00      	cmp	r3, #0
 801580a:	d10a      	bne.n	8015822 <tcp_write+0x616>
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015810:	2b00      	cmp	r3, #0
 8015812:	d106      	bne.n	8015822 <tcp_write+0x616>
 8015814:	4b2c      	ldr	r3, [pc, #176]	; (80158c8 <tcp_write+0x6bc>)
 8015816:	f240 3212 	movw	r2, #786	; 0x312
 801581a:	492c      	ldr	r1, [pc, #176]	; (80158cc <tcp_write+0x6c0>)
 801581c:	482c      	ldr	r0, [pc, #176]	; (80158d0 <tcp_write+0x6c4>)
 801581e:	f002 fa79 	bl	8017d14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8015822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015824:	2b00      	cmp	r3, #0
 8015826:	d016      	beq.n	8015856 <tcp_write+0x64a>
 8015828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801582a:	68db      	ldr	r3, [r3, #12]
 801582c:	2b00      	cmp	r3, #0
 801582e:	d012      	beq.n	8015856 <tcp_write+0x64a>
 8015830:	797b      	ldrb	r3, [r7, #5]
 8015832:	f003 0302 	and.w	r3, r3, #2
 8015836:	2b00      	cmp	r3, #0
 8015838:	d10d      	bne.n	8015856 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801583a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801583c:	68db      	ldr	r3, [r3, #12]
 801583e:	899b      	ldrh	r3, [r3, #12]
 8015840:	b29c      	uxth	r4, r3
 8015842:	2008      	movs	r0, #8
 8015844:	f7f6 fd68 	bl	800c318 <lwip_htons>
 8015848:	4603      	mov	r3, r0
 801584a:	461a      	mov	r2, r3
 801584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801584e:	68db      	ldr	r3, [r3, #12]
 8015850:	4322      	orrs	r2, r4
 8015852:	b292      	uxth	r2, r2
 8015854:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015856:	2300      	movs	r3, #0
 8015858:	e031      	b.n	80158be <tcp_write+0x6b2>
          goto memerr;
 801585a:	bf00      	nop
 801585c:	e006      	b.n	801586c <tcp_write+0x660>
            goto memerr;
 801585e:	bf00      	nop
 8015860:	e004      	b.n	801586c <tcp_write+0x660>
        goto memerr;
 8015862:	bf00      	nop
 8015864:	e002      	b.n	801586c <tcp_write+0x660>
        goto memerr;
 8015866:	bf00      	nop
 8015868:	e000      	b.n	801586c <tcp_write+0x660>
      goto memerr;
 801586a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	8b5b      	ldrh	r3, [r3, #26]
 8015870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015874:	b29a      	uxth	r2, r3
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801587a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801587c:	2b00      	cmp	r3, #0
 801587e:	d002      	beq.n	8015886 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8015880:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015882:	f7fa fd1d 	bl	80102c0 <pbuf_free>
  }
  if (queue != NULL) {
 8015886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015888:	2b00      	cmp	r3, #0
 801588a:	d002      	beq.n	8015892 <tcp_write+0x686>
    tcp_segs_free(queue);
 801588c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801588e:	f7fc fb6b 	bl	8011f68 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015898:	2b00      	cmp	r3, #0
 801589a:	d00e      	beq.n	80158ba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d10a      	bne.n	80158ba <tcp_write+0x6ae>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d106      	bne.n	80158ba <tcp_write+0x6ae>
 80158ac:	4b06      	ldr	r3, [pc, #24]	; (80158c8 <tcp_write+0x6bc>)
 80158ae:	f240 3227 	movw	r2, #807	; 0x327
 80158b2:	4906      	ldr	r1, [pc, #24]	; (80158cc <tcp_write+0x6c0>)
 80158b4:	4806      	ldr	r0, [pc, #24]	; (80158d0 <tcp_write+0x6c4>)
 80158b6:	f002 fa2d 	bl	8017d14 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80158ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80158be:	4618      	mov	r0, r3
 80158c0:	375c      	adds	r7, #92	; 0x5c
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bd90      	pop	{r4, r7, pc}
 80158c6:	bf00      	nop
 80158c8:	0801bbc0 	.word	0x0801bbc0
 80158cc:	0801bf7c 	.word	0x0801bf7c
 80158d0:	0801bc5c 	.word	0x0801bc5c

080158d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80158d4:	b590      	push	{r4, r7, lr}
 80158d6:	b08b      	sub	sp, #44	; 0x2c
 80158d8:	af02      	add	r7, sp, #8
 80158da:	6078      	str	r0, [r7, #4]
 80158dc:	460b      	mov	r3, r1
 80158de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80158e0:	2300      	movs	r3, #0
 80158e2:	61fb      	str	r3, [r7, #28]
 80158e4:	2300      	movs	r3, #0
 80158e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80158e8:	2300      	movs	r3, #0
 80158ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d106      	bne.n	8015900 <tcp_split_unsent_seg+0x2c>
 80158f2:	4b95      	ldr	r3, [pc, #596]	; (8015b48 <tcp_split_unsent_seg+0x274>)
 80158f4:	f240 324b 	movw	r2, #843	; 0x34b
 80158f8:	4994      	ldr	r1, [pc, #592]	; (8015b4c <tcp_split_unsent_seg+0x278>)
 80158fa:	4895      	ldr	r0, [pc, #596]	; (8015b50 <tcp_split_unsent_seg+0x27c>)
 80158fc:	f002 fa0a 	bl	8017d14 <iprintf>

  useg = pcb->unsent;
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015904:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d102      	bne.n	8015912 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801590c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015910:	e116      	b.n	8015b40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8015912:	887b      	ldrh	r3, [r7, #2]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d109      	bne.n	801592c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015918:	4b8b      	ldr	r3, [pc, #556]	; (8015b48 <tcp_split_unsent_seg+0x274>)
 801591a:	f240 3253 	movw	r2, #851	; 0x353
 801591e:	498d      	ldr	r1, [pc, #564]	; (8015b54 <tcp_split_unsent_seg+0x280>)
 8015920:	488b      	ldr	r0, [pc, #556]	; (8015b50 <tcp_split_unsent_seg+0x27c>)
 8015922:	f002 f9f7 	bl	8017d14 <iprintf>
    return ERR_VAL;
 8015926:	f06f 0305 	mvn.w	r3, #5
 801592a:	e109      	b.n	8015b40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801592c:	697b      	ldr	r3, [r7, #20]
 801592e:	891b      	ldrh	r3, [r3, #8]
 8015930:	887a      	ldrh	r2, [r7, #2]
 8015932:	429a      	cmp	r2, r3
 8015934:	d301      	bcc.n	801593a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015936:	2300      	movs	r3, #0
 8015938:	e102      	b.n	8015b40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801593e:	887a      	ldrh	r2, [r7, #2]
 8015940:	429a      	cmp	r2, r3
 8015942:	d906      	bls.n	8015952 <tcp_split_unsent_seg+0x7e>
 8015944:	4b80      	ldr	r3, [pc, #512]	; (8015b48 <tcp_split_unsent_seg+0x274>)
 8015946:	f240 325b 	movw	r2, #859	; 0x35b
 801594a:	4983      	ldr	r1, [pc, #524]	; (8015b58 <tcp_split_unsent_seg+0x284>)
 801594c:	4880      	ldr	r0, [pc, #512]	; (8015b50 <tcp_split_unsent_seg+0x27c>)
 801594e:	f002 f9e1 	bl	8017d14 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	891b      	ldrh	r3, [r3, #8]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d106      	bne.n	8015968 <tcp_split_unsent_seg+0x94>
 801595a:	4b7b      	ldr	r3, [pc, #492]	; (8015b48 <tcp_split_unsent_seg+0x274>)
 801595c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8015960:	497e      	ldr	r1, [pc, #504]	; (8015b5c <tcp_split_unsent_seg+0x288>)
 8015962:	487b      	ldr	r0, [pc, #492]	; (8015b50 <tcp_split_unsent_seg+0x27c>)
 8015964:	f002 f9d6 	bl	8017d14 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	7a9b      	ldrb	r3, [r3, #10]
 801596c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801596e:	7bfb      	ldrb	r3, [r7, #15]
 8015970:	009b      	lsls	r3, r3, #2
 8015972:	b2db      	uxtb	r3, r3
 8015974:	f003 0304 	and.w	r3, r3, #4
 8015978:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	891a      	ldrh	r2, [r3, #8]
 801597e:	887b      	ldrh	r3, [r7, #2]
 8015980:	1ad3      	subs	r3, r2, r3
 8015982:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015984:	7bbb      	ldrb	r3, [r7, #14]
 8015986:	b29a      	uxth	r2, r3
 8015988:	89bb      	ldrh	r3, [r7, #12]
 801598a:	4413      	add	r3, r2
 801598c:	b29b      	uxth	r3, r3
 801598e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015992:	4619      	mov	r1, r3
 8015994:	2036      	movs	r0, #54	; 0x36
 8015996:	f7fa f9af 	bl	800fcf8 <pbuf_alloc>
 801599a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	f000 80b7 	beq.w	8015b12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	891a      	ldrh	r2, [r3, #8]
 80159aa:	697b      	ldr	r3, [r7, #20]
 80159ac:	891b      	ldrh	r3, [r3, #8]
 80159ae:	1ad3      	subs	r3, r2, r3
 80159b0:	b29a      	uxth	r2, r3
 80159b2:	887b      	ldrh	r3, [r7, #2]
 80159b4:	4413      	add	r3, r2
 80159b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80159b8:	697b      	ldr	r3, [r7, #20]
 80159ba:	6858      	ldr	r0, [r3, #4]
 80159bc:	693b      	ldr	r3, [r7, #16]
 80159be:	685a      	ldr	r2, [r3, #4]
 80159c0:	7bbb      	ldrb	r3, [r7, #14]
 80159c2:	18d1      	adds	r1, r2, r3
 80159c4:	897b      	ldrh	r3, [r7, #10]
 80159c6:	89ba      	ldrh	r2, [r7, #12]
 80159c8:	f7fa fe70 	bl	80106ac <pbuf_copy_partial>
 80159cc:	4603      	mov	r3, r0
 80159ce:	461a      	mov	r2, r3
 80159d0:	89bb      	ldrh	r3, [r7, #12]
 80159d2:	4293      	cmp	r3, r2
 80159d4:	f040 809f 	bne.w	8015b16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	68db      	ldr	r3, [r3, #12]
 80159dc:	899b      	ldrh	r3, [r3, #12]
 80159de:	b29b      	uxth	r3, r3
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7f6 fc99 	bl	800c318 <lwip_htons>
 80159e6:	4603      	mov	r3, r0
 80159e8:	b2db      	uxtb	r3, r3
 80159ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80159f0:	2300      	movs	r3, #0
 80159f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80159f4:	7efb      	ldrb	r3, [r7, #27]
 80159f6:	f003 0308 	and.w	r3, r3, #8
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d007      	beq.n	8015a0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80159fe:	7efb      	ldrb	r3, [r7, #27]
 8015a00:	f023 0308 	bic.w	r3, r3, #8
 8015a04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015a06:	7ebb      	ldrb	r3, [r7, #26]
 8015a08:	f043 0308 	orr.w	r3, r3, #8
 8015a0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8015a0e:	7efb      	ldrb	r3, [r7, #27]
 8015a10:	f003 0301 	and.w	r3, r3, #1
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d007      	beq.n	8015a28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015a18:	7efb      	ldrb	r3, [r7, #27]
 8015a1a:	f023 0301 	bic.w	r3, r3, #1
 8015a1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8015a20:	7ebb      	ldrb	r3, [r7, #26]
 8015a22:	f043 0301 	orr.w	r3, r3, #1
 8015a26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015a28:	697b      	ldr	r3, [r7, #20]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7f6 fc87 	bl	800c342 <lwip_htonl>
 8015a34:	4602      	mov	r2, r0
 8015a36:	887b      	ldrh	r3, [r7, #2]
 8015a38:	18d1      	adds	r1, r2, r3
 8015a3a:	7eba      	ldrb	r2, [r7, #26]
 8015a3c:	7bfb      	ldrb	r3, [r7, #15]
 8015a3e:	9300      	str	r3, [sp, #0]
 8015a40:	460b      	mov	r3, r1
 8015a42:	6939      	ldr	r1, [r7, #16]
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f7ff fa4f 	bl	8014ee8 <tcp_create_segment>
 8015a4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015a4c:	69fb      	ldr	r3, [r7, #28]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d063      	beq.n	8015b1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	4618      	mov	r0, r3
 8015a58:	f7fa fcc0 	bl	80103dc <pbuf_clen>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	461a      	mov	r2, r3
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a66:	1a9b      	subs	r3, r3, r2
 8015a68:	b29a      	uxth	r2, r3
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	6858      	ldr	r0, [r3, #4]
 8015a74:	697b      	ldr	r3, [r7, #20]
 8015a76:	685b      	ldr	r3, [r3, #4]
 8015a78:	891a      	ldrh	r2, [r3, #8]
 8015a7a:	89bb      	ldrh	r3, [r7, #12]
 8015a7c:	1ad3      	subs	r3, r2, r3
 8015a7e:	b29b      	uxth	r3, r3
 8015a80:	4619      	mov	r1, r3
 8015a82:	f7fa fa99 	bl	800ffb8 <pbuf_realloc>
  useg->len -= remainder;
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	891a      	ldrh	r2, [r3, #8]
 8015a8a:	89bb      	ldrh	r3, [r7, #12]
 8015a8c:	1ad3      	subs	r3, r2, r3
 8015a8e:	b29a      	uxth	r2, r3
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	899b      	ldrh	r3, [r3, #12]
 8015a9a:	b29c      	uxth	r4, r3
 8015a9c:	7efb      	ldrb	r3, [r7, #27]
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	f7f6 fc39 	bl	800c318 <lwip_htons>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	68db      	ldr	r3, [r3, #12]
 8015aae:	4322      	orrs	r2, r4
 8015ab0:	b292      	uxth	r2, r2
 8015ab2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015ab4:	697b      	ldr	r3, [r7, #20]
 8015ab6:	685b      	ldr	r3, [r3, #4]
 8015ab8:	4618      	mov	r0, r3
 8015aba:	f7fa fc8f 	bl	80103dc <pbuf_clen>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ac8:	4413      	add	r3, r2
 8015aca:	b29a      	uxth	r2, r3
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015ad2:	69fb      	ldr	r3, [r7, #28]
 8015ad4:	685b      	ldr	r3, [r3, #4]
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7fa fc80 	bl	80103dc <pbuf_clen>
 8015adc:	4603      	mov	r3, r0
 8015ade:	461a      	mov	r2, r3
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ae6:	4413      	add	r3, r2
 8015ae8:	b29a      	uxth	r2, r3
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015af0:	697b      	ldr	r3, [r7, #20]
 8015af2:	681a      	ldr	r2, [r3, #0]
 8015af4:	69fb      	ldr	r3, [r7, #28]
 8015af6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	69fa      	ldr	r2, [r7, #28]
 8015afc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d103      	bne.n	8015b0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2200      	movs	r2, #0
 8015b0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	e016      	b.n	8015b40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015b12:	bf00      	nop
 8015b14:	e002      	b.n	8015b1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015b16:	bf00      	nop
 8015b18:	e000      	b.n	8015b1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015b1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d006      	beq.n	8015b30 <tcp_split_unsent_seg+0x25c>
 8015b22:	4b09      	ldr	r3, [pc, #36]	; (8015b48 <tcp_split_unsent_seg+0x274>)
 8015b24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015b28:	490d      	ldr	r1, [pc, #52]	; (8015b60 <tcp_split_unsent_seg+0x28c>)
 8015b2a:	4809      	ldr	r0, [pc, #36]	; (8015b50 <tcp_split_unsent_seg+0x27c>)
 8015b2c:	f002 f8f2 	bl	8017d14 <iprintf>
  if (p != NULL) {
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d002      	beq.n	8015b3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015b36:	6938      	ldr	r0, [r7, #16]
 8015b38:	f7fa fbc2 	bl	80102c0 <pbuf_free>
  }

  return ERR_MEM;
 8015b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3724      	adds	r7, #36	; 0x24
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd90      	pop	{r4, r7, pc}
 8015b48:	0801bbc0 	.word	0x0801bbc0
 8015b4c:	0801bf9c 	.word	0x0801bf9c
 8015b50:	0801bc5c 	.word	0x0801bc5c
 8015b54:	0801bfc0 	.word	0x0801bfc0
 8015b58:	0801bfe4 	.word	0x0801bfe4
 8015b5c:	0801bff4 	.word	0x0801bff4
 8015b60:	0801c004 	.word	0x0801c004

08015b64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015b64:	b590      	push	{r4, r7, lr}
 8015b66:	b085      	sub	sp, #20
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d106      	bne.n	8015b80 <tcp_send_fin+0x1c>
 8015b72:	4b21      	ldr	r3, [pc, #132]	; (8015bf8 <tcp_send_fin+0x94>)
 8015b74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015b78:	4920      	ldr	r1, [pc, #128]	; (8015bfc <tcp_send_fin+0x98>)
 8015b7a:	4821      	ldr	r0, [pc, #132]	; (8015c00 <tcp_send_fin+0x9c>)
 8015b7c:	f002 f8ca 	bl	8017d14 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d02e      	beq.n	8015be6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b8c:	60fb      	str	r3, [r7, #12]
 8015b8e:	e002      	b.n	8015b96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d1f8      	bne.n	8015b90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	68db      	ldr	r3, [r3, #12]
 8015ba2:	899b      	ldrh	r3, [r3, #12]
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7f6 fbb6 	bl	800c318 <lwip_htons>
 8015bac:	4603      	mov	r3, r0
 8015bae:	b2db      	uxtb	r3, r3
 8015bb0:	f003 0307 	and.w	r3, r3, #7
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d116      	bne.n	8015be6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	68db      	ldr	r3, [r3, #12]
 8015bbc:	899b      	ldrh	r3, [r3, #12]
 8015bbe:	b29c      	uxth	r4, r3
 8015bc0:	2001      	movs	r0, #1
 8015bc2:	f7f6 fba9 	bl	800c318 <lwip_htons>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	461a      	mov	r2, r3
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	4322      	orrs	r2, r4
 8015bd0:	b292      	uxth	r2, r2
 8015bd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	8b5b      	ldrh	r3, [r3, #26]
 8015bd8:	f043 0320 	orr.w	r3, r3, #32
 8015bdc:	b29a      	uxth	r2, r3
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015be2:	2300      	movs	r3, #0
 8015be4:	e004      	b.n	8015bf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015be6:	2101      	movs	r1, #1
 8015be8:	6878      	ldr	r0, [r7, #4]
 8015bea:	f000 f80b 	bl	8015c04 <tcp_enqueue_flags>
 8015bee:	4603      	mov	r3, r0
}
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	3714      	adds	r7, #20
 8015bf4:	46bd      	mov	sp, r7
 8015bf6:	bd90      	pop	{r4, r7, pc}
 8015bf8:	0801bbc0 	.word	0x0801bbc0
 8015bfc:	0801c010 	.word	0x0801c010
 8015c00:	0801bc5c 	.word	0x0801bc5c

08015c04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b08a      	sub	sp, #40	; 0x28
 8015c08:	af02      	add	r7, sp, #8
 8015c0a:	6078      	str	r0, [r7, #4]
 8015c0c:	460b      	mov	r3, r1
 8015c0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015c10:	2300      	movs	r3, #0
 8015c12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015c14:	2300      	movs	r3, #0
 8015c16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015c18:	78fb      	ldrb	r3, [r7, #3]
 8015c1a:	f003 0303 	and.w	r3, r3, #3
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d106      	bne.n	8015c30 <tcp_enqueue_flags+0x2c>
 8015c22:	4b67      	ldr	r3, [pc, #412]	; (8015dc0 <tcp_enqueue_flags+0x1bc>)
 8015c24:	f240 4211 	movw	r2, #1041	; 0x411
 8015c28:	4966      	ldr	r1, [pc, #408]	; (8015dc4 <tcp_enqueue_flags+0x1c0>)
 8015c2a:	4867      	ldr	r0, [pc, #412]	; (8015dc8 <tcp_enqueue_flags+0x1c4>)
 8015c2c:	f002 f872 	bl	8017d14 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d106      	bne.n	8015c44 <tcp_enqueue_flags+0x40>
 8015c36:	4b62      	ldr	r3, [pc, #392]	; (8015dc0 <tcp_enqueue_flags+0x1bc>)
 8015c38:	f240 4213 	movw	r2, #1043	; 0x413
 8015c3c:	4963      	ldr	r1, [pc, #396]	; (8015dcc <tcp_enqueue_flags+0x1c8>)
 8015c3e:	4862      	ldr	r0, [pc, #392]	; (8015dc8 <tcp_enqueue_flags+0x1c4>)
 8015c40:	f002 f868 	bl	8017d14 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015c44:	78fb      	ldrb	r3, [r7, #3]
 8015c46:	f003 0302 	and.w	r3, r3, #2
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d001      	beq.n	8015c52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015c4e:	2301      	movs	r3, #1
 8015c50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015c52:	7ffb      	ldrb	r3, [r7, #31]
 8015c54:	009b      	lsls	r3, r3, #2
 8015c56:	b2db      	uxtb	r3, r3
 8015c58:	f003 0304 	and.w	r3, r3, #4
 8015c5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015c5e:	7dfb      	ldrb	r3, [r7, #23]
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c66:	4619      	mov	r1, r3
 8015c68:	2036      	movs	r0, #54	; 0x36
 8015c6a:	f7fa f845 	bl	800fcf8 <pbuf_alloc>
 8015c6e:	6138      	str	r0, [r7, #16]
 8015c70:	693b      	ldr	r3, [r7, #16]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d109      	bne.n	8015c8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	8b5b      	ldrh	r3, [r3, #26]
 8015c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c7e:	b29a      	uxth	r2, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015c84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c88:	e095      	b.n	8015db6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	895a      	ldrh	r2, [r3, #10]
 8015c8e:	7dfb      	ldrb	r3, [r7, #23]
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	429a      	cmp	r2, r3
 8015c94:	d206      	bcs.n	8015ca4 <tcp_enqueue_flags+0xa0>
 8015c96:	4b4a      	ldr	r3, [pc, #296]	; (8015dc0 <tcp_enqueue_flags+0x1bc>)
 8015c98:	f240 4239 	movw	r2, #1081	; 0x439
 8015c9c:	494c      	ldr	r1, [pc, #304]	; (8015dd0 <tcp_enqueue_flags+0x1cc>)
 8015c9e:	484a      	ldr	r0, [pc, #296]	; (8015dc8 <tcp_enqueue_flags+0x1c4>)
 8015ca0:	f002 f838 	bl	8017d14 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015ca8:	78fa      	ldrb	r2, [r7, #3]
 8015caa:	7ffb      	ldrb	r3, [r7, #31]
 8015cac:	9300      	str	r3, [sp, #0]
 8015cae:	460b      	mov	r3, r1
 8015cb0:	6939      	ldr	r1, [r7, #16]
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f7ff f918 	bl	8014ee8 <tcp_create_segment>
 8015cb8:	60f8      	str	r0, [r7, #12]
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d109      	bne.n	8015cd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	8b5b      	ldrh	r3, [r3, #26]
 8015cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015cc8:	b29a      	uxth	r2, r3
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015cd2:	e070      	b.n	8015db6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	68db      	ldr	r3, [r3, #12]
 8015cd8:	f003 0303 	and.w	r3, r3, #3
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d006      	beq.n	8015cee <tcp_enqueue_flags+0xea>
 8015ce0:	4b37      	ldr	r3, [pc, #220]	; (8015dc0 <tcp_enqueue_flags+0x1bc>)
 8015ce2:	f240 4242 	movw	r2, #1090	; 0x442
 8015ce6:	493b      	ldr	r1, [pc, #236]	; (8015dd4 <tcp_enqueue_flags+0x1d0>)
 8015ce8:	4837      	ldr	r0, [pc, #220]	; (8015dc8 <tcp_enqueue_flags+0x1c4>)
 8015cea:	f002 f813 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	891b      	ldrh	r3, [r3, #8]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d006      	beq.n	8015d04 <tcp_enqueue_flags+0x100>
 8015cf6:	4b32      	ldr	r3, [pc, #200]	; (8015dc0 <tcp_enqueue_flags+0x1bc>)
 8015cf8:	f240 4243 	movw	r2, #1091	; 0x443
 8015cfc:	4936      	ldr	r1, [pc, #216]	; (8015dd8 <tcp_enqueue_flags+0x1d4>)
 8015cfe:	4832      	ldr	r0, [pc, #200]	; (8015dc8 <tcp_enqueue_flags+0x1c4>)
 8015d00:	f002 f808 	bl	8017d14 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d103      	bne.n	8015d14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	68fa      	ldr	r2, [r7, #12]
 8015d10:	66da      	str	r2, [r3, #108]	; 0x6c
 8015d12:	e00d      	b.n	8015d30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d18:	61bb      	str	r3, [r7, #24]
 8015d1a:	e002      	b.n	8015d22 <tcp_enqueue_flags+0x11e>
 8015d1c:	69bb      	ldr	r3, [r7, #24]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	61bb      	str	r3, [r7, #24]
 8015d22:	69bb      	ldr	r3, [r7, #24]
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d1f8      	bne.n	8015d1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015d2a:	69bb      	ldr	r3, [r7, #24]
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	2200      	movs	r2, #0
 8015d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015d38:	78fb      	ldrb	r3, [r7, #3]
 8015d3a:	f003 0302 	and.w	r3, r3, #2
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d104      	bne.n	8015d4c <tcp_enqueue_flags+0x148>
 8015d42:	78fb      	ldrb	r3, [r7, #3]
 8015d44:	f003 0301 	and.w	r3, r3, #1
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d004      	beq.n	8015d56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015d50:	1c5a      	adds	r2, r3, #1
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015d56:	78fb      	ldrb	r3, [r7, #3]
 8015d58:	f003 0301 	and.w	r3, r3, #1
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d006      	beq.n	8015d6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	8b5b      	ldrh	r3, [r3, #26]
 8015d64:	f043 0320 	orr.w	r3, r3, #32
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	685b      	ldr	r3, [r3, #4]
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7fa fb32 	bl	80103dc <pbuf_clen>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	461a      	mov	r2, r3
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d82:	4413      	add	r3, r2
 8015d84:	b29a      	uxth	r2, r3
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d00e      	beq.n	8015db4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d10a      	bne.n	8015db4 <tcp_enqueue_flags+0x1b0>
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d106      	bne.n	8015db4 <tcp_enqueue_flags+0x1b0>
 8015da6:	4b06      	ldr	r3, [pc, #24]	; (8015dc0 <tcp_enqueue_flags+0x1bc>)
 8015da8:	f240 4265 	movw	r2, #1125	; 0x465
 8015dac:	490b      	ldr	r1, [pc, #44]	; (8015ddc <tcp_enqueue_flags+0x1d8>)
 8015dae:	4806      	ldr	r0, [pc, #24]	; (8015dc8 <tcp_enqueue_flags+0x1c4>)
 8015db0:	f001 ffb0 	bl	8017d14 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015db4:	2300      	movs	r3, #0
}
 8015db6:	4618      	mov	r0, r3
 8015db8:	3720      	adds	r7, #32
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	bd80      	pop	{r7, pc}
 8015dbe:	bf00      	nop
 8015dc0:	0801bbc0 	.word	0x0801bbc0
 8015dc4:	0801c02c 	.word	0x0801c02c
 8015dc8:	0801bc5c 	.word	0x0801bc5c
 8015dcc:	0801c084 	.word	0x0801c084
 8015dd0:	0801c0a4 	.word	0x0801c0a4
 8015dd4:	0801c0e0 	.word	0x0801c0e0
 8015dd8:	0801c0f8 	.word	0x0801c0f8
 8015ddc:	0801c124 	.word	0x0801c124

08015de0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015de0:	b5b0      	push	{r4, r5, r7, lr}
 8015de2:	b08a      	sub	sp, #40	; 0x28
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d106      	bne.n	8015dfc <tcp_output+0x1c>
 8015dee:	4b8a      	ldr	r3, [pc, #552]	; (8016018 <tcp_output+0x238>)
 8015df0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015df4:	4989      	ldr	r1, [pc, #548]	; (801601c <tcp_output+0x23c>)
 8015df6:	488a      	ldr	r0, [pc, #552]	; (8016020 <tcp_output+0x240>)
 8015df8:	f001 ff8c 	bl	8017d14 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	7d1b      	ldrb	r3, [r3, #20]
 8015e00:	2b01      	cmp	r3, #1
 8015e02:	d106      	bne.n	8015e12 <tcp_output+0x32>
 8015e04:	4b84      	ldr	r3, [pc, #528]	; (8016018 <tcp_output+0x238>)
 8015e06:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015e0a:	4986      	ldr	r1, [pc, #536]	; (8016024 <tcp_output+0x244>)
 8015e0c:	4884      	ldr	r0, [pc, #528]	; (8016020 <tcp_output+0x240>)
 8015e0e:	f001 ff81 	bl	8017d14 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015e12:	4b85      	ldr	r3, [pc, #532]	; (8016028 <tcp_output+0x248>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d101      	bne.n	8015e20 <tcp_output+0x40>
    return ERR_OK;
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	e1ce      	b.n	80161be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	bf28      	it	cs
 8015e30:	4613      	movcs	r3, r2
 8015e32:	b29b      	uxth	r3, r3
 8015e34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d10b      	bne.n	8015e5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	8b5b      	ldrh	r3, [r3, #26]
 8015e46:	f003 0302 	and.w	r3, r3, #2
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	f000 81aa 	beq.w	80161a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015e50:	6878      	ldr	r0, [r7, #4]
 8015e52:	f000 fdcb 	bl	80169ec <tcp_send_empty_ack>
 8015e56:	4603      	mov	r3, r0
 8015e58:	e1b1      	b.n	80161be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015e5a:	6879      	ldr	r1, [r7, #4]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	3304      	adds	r3, #4
 8015e60:	461a      	mov	r2, r3
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f7ff f824 	bl	8014eb0 <tcp_route>
 8015e68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d102      	bne.n	8015e76 <tcp_output+0x96>
    return ERR_RTE;
 8015e70:	f06f 0303 	mvn.w	r3, #3
 8015e74:	e1a3      	b.n	80161be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d003      	beq.n	8015e84 <tcp_output+0xa4>
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d111      	bne.n	8015ea8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015e84:	697b      	ldr	r3, [r7, #20]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d002      	beq.n	8015e90 <tcp_output+0xb0>
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	3304      	adds	r3, #4
 8015e8e:	e000      	b.n	8015e92 <tcp_output+0xb2>
 8015e90:	2300      	movs	r3, #0
 8015e92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015e94:	693b      	ldr	r3, [r7, #16]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d102      	bne.n	8015ea0 <tcp_output+0xc0>
      return ERR_RTE;
 8015e9a:	f06f 0303 	mvn.w	r3, #3
 8015e9e:	e18e      	b.n	80161be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	681a      	ldr	r2, [r3, #0]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eaa:	68db      	ldr	r3, [r3, #12]
 8015eac:	685b      	ldr	r3, [r3, #4]
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7f6 fa47 	bl	800c342 <lwip_htonl>
 8015eb4:	4602      	mov	r2, r0
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eba:	1ad3      	subs	r3, r2, r3
 8015ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015ebe:	8912      	ldrh	r2, [r2, #8]
 8015ec0:	4413      	add	r3, r2
 8015ec2:	69ba      	ldr	r2, [r7, #24]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d227      	bcs.n	8015f18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015ece:	461a      	mov	r2, r3
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	d114      	bne.n	8015f00 <tcp_output+0x120>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d110      	bne.n	8015f00 <tcp_output+0x120>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d10b      	bne.n	8015f00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2200      	movs	r2, #0
 8015eec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2201      	movs	r2, #1
 8015ef4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2200      	movs	r2, #0
 8015efc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	8b5b      	ldrh	r3, [r3, #26]
 8015f04:	f003 0302 	and.w	r3, r3, #2
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	f000 814d 	beq.w	80161a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f000 fd6c 	bl	80169ec <tcp_send_empty_ack>
 8015f14:	4603      	mov	r3, r0
 8015f16:	e152      	b.n	80161be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	2200      	movs	r2, #0
 8015f1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015f26:	6a3b      	ldr	r3, [r7, #32]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	f000 811c 	beq.w	8016166 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015f2e:	e002      	b.n	8015f36 <tcp_output+0x156>
 8015f30:	6a3b      	ldr	r3, [r7, #32]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	623b      	str	r3, [r7, #32]
 8015f36:	6a3b      	ldr	r3, [r7, #32]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d1f8      	bne.n	8015f30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015f3e:	e112      	b.n	8016166 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f42:	68db      	ldr	r3, [r3, #12]
 8015f44:	899b      	ldrh	r3, [r3, #12]
 8015f46:	b29b      	uxth	r3, r3
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7f6 f9e5 	bl	800c318 <lwip_htons>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	b2db      	uxtb	r3, r3
 8015f52:	f003 0304 	and.w	r3, r3, #4
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d006      	beq.n	8015f68 <tcp_output+0x188>
 8015f5a:	4b2f      	ldr	r3, [pc, #188]	; (8016018 <tcp_output+0x238>)
 8015f5c:	f240 5236 	movw	r2, #1334	; 0x536
 8015f60:	4932      	ldr	r1, [pc, #200]	; (801602c <tcp_output+0x24c>)
 8015f62:	482f      	ldr	r0, [pc, #188]	; (8016020 <tcp_output+0x240>)
 8015f64:	f001 fed6 	bl	8017d14 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d01f      	beq.n	8015fb0 <tcp_output+0x1d0>
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	8b5b      	ldrh	r3, [r3, #26]
 8015f74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d119      	bne.n	8015fb0 <tcp_output+0x1d0>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d00b      	beq.n	8015f9c <tcp_output+0x1bc>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d110      	bne.n	8015fb0 <tcp_output+0x1d0>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f92:	891a      	ldrh	r2, [r3, #8]
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d209      	bcs.n	8015fb0 <tcp_output+0x1d0>
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d004      	beq.n	8015fb0 <tcp_output+0x1d0>
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fac:	2b0f      	cmp	r3, #15
 8015fae:	d901      	bls.n	8015fb4 <tcp_output+0x1d4>
 8015fb0:	2301      	movs	r3, #1
 8015fb2:	e000      	b.n	8015fb6 <tcp_output+0x1d6>
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d106      	bne.n	8015fc8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	8b5b      	ldrh	r3, [r3, #26]
 8015fbe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	f000 80e4 	beq.w	8016190 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	7d1b      	ldrb	r3, [r3, #20]
 8015fcc:	2b02      	cmp	r3, #2
 8015fce:	d00d      	beq.n	8015fec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd2:	68db      	ldr	r3, [r3, #12]
 8015fd4:	899b      	ldrh	r3, [r3, #12]
 8015fd6:	b29c      	uxth	r4, r3
 8015fd8:	2010      	movs	r0, #16
 8015fda:	f7f6 f99d 	bl	800c318 <lwip_htons>
 8015fde:	4603      	mov	r3, r0
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe4:	68db      	ldr	r3, [r3, #12]
 8015fe6:	4322      	orrs	r2, r4
 8015fe8:	b292      	uxth	r2, r2
 8015fea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015fec:	697a      	ldr	r2, [r7, #20]
 8015fee:	6879      	ldr	r1, [r7, #4]
 8015ff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ff2:	f000 f909 	bl	8016208 <tcp_output_segment>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d016      	beq.n	8016030 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	8b5b      	ldrh	r3, [r3, #26]
 8016006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801600a:	b29a      	uxth	r2, r3
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	835a      	strh	r2, [r3, #26]
      return err;
 8016010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016014:	e0d3      	b.n	80161be <tcp_output+0x3de>
 8016016:	bf00      	nop
 8016018:	0801bbc0 	.word	0x0801bbc0
 801601c:	0801c14c 	.word	0x0801c14c
 8016020:	0801bc5c 	.word	0x0801bc5c
 8016024:	0801c164 	.word	0x0801c164
 8016028:	2400f274 	.word	0x2400f274
 801602c:	0801c18c 	.word	0x0801c18c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016032:	681a      	ldr	r2, [r3, #0]
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	7d1b      	ldrb	r3, [r3, #20]
 801603c:	2b02      	cmp	r3, #2
 801603e:	d006      	beq.n	801604e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	8b5b      	ldrh	r3, [r3, #26]
 8016044:	f023 0303 	bic.w	r3, r3, #3
 8016048:	b29a      	uxth	r2, r3
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801604e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016050:	68db      	ldr	r3, [r3, #12]
 8016052:	685b      	ldr	r3, [r3, #4]
 8016054:	4618      	mov	r0, r3
 8016056:	f7f6 f974 	bl	800c342 <lwip_htonl>
 801605a:	4604      	mov	r4, r0
 801605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801605e:	891b      	ldrh	r3, [r3, #8]
 8016060:	461d      	mov	r5, r3
 8016062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016064:	68db      	ldr	r3, [r3, #12]
 8016066:	899b      	ldrh	r3, [r3, #12]
 8016068:	b29b      	uxth	r3, r3
 801606a:	4618      	mov	r0, r3
 801606c:	f7f6 f954 	bl	800c318 <lwip_htons>
 8016070:	4603      	mov	r3, r0
 8016072:	b2db      	uxtb	r3, r3
 8016074:	f003 0303 	and.w	r3, r3, #3
 8016078:	2b00      	cmp	r3, #0
 801607a:	d001      	beq.n	8016080 <tcp_output+0x2a0>
 801607c:	2301      	movs	r3, #1
 801607e:	e000      	b.n	8016082 <tcp_output+0x2a2>
 8016080:	2300      	movs	r3, #0
 8016082:	442b      	add	r3, r5
 8016084:	4423      	add	r3, r4
 8016086:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801608c:	68bb      	ldr	r3, [r7, #8]
 801608e:	1ad3      	subs	r3, r2, r3
 8016090:	2b00      	cmp	r3, #0
 8016092:	da02      	bge.n	801609a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	68ba      	ldr	r2, [r7, #8]
 8016098:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801609c:	891b      	ldrh	r3, [r3, #8]
 801609e:	461c      	mov	r4, r3
 80160a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a2:	68db      	ldr	r3, [r3, #12]
 80160a4:	899b      	ldrh	r3, [r3, #12]
 80160a6:	b29b      	uxth	r3, r3
 80160a8:	4618      	mov	r0, r3
 80160aa:	f7f6 f935 	bl	800c318 <lwip_htons>
 80160ae:	4603      	mov	r3, r0
 80160b0:	b2db      	uxtb	r3, r3
 80160b2:	f003 0303 	and.w	r3, r3, #3
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d001      	beq.n	80160be <tcp_output+0x2de>
 80160ba:	2301      	movs	r3, #1
 80160bc:	e000      	b.n	80160c0 <tcp_output+0x2e0>
 80160be:	2300      	movs	r3, #0
 80160c0:	4423      	add	r3, r4
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d049      	beq.n	801615a <tcp_output+0x37a>
      seg->next = NULL;
 80160c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c8:	2200      	movs	r2, #0
 80160ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d105      	bne.n	80160e0 <tcp_output+0x300>
        pcb->unacked = seg;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160d8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80160da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160dc:	623b      	str	r3, [r7, #32]
 80160de:	e03f      	b.n	8016160 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80160e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7f6 f92b 	bl	800c342 <lwip_htonl>
 80160ec:	4604      	mov	r4, r0
 80160ee:	6a3b      	ldr	r3, [r7, #32]
 80160f0:	68db      	ldr	r3, [r3, #12]
 80160f2:	685b      	ldr	r3, [r3, #4]
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7f6 f924 	bl	800c342 <lwip_htonl>
 80160fa:	4603      	mov	r3, r0
 80160fc:	1ae3      	subs	r3, r4, r3
 80160fe:	2b00      	cmp	r3, #0
 8016100:	da24      	bge.n	801614c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	3370      	adds	r3, #112	; 0x70
 8016106:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016108:	e002      	b.n	8016110 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801610a:	69fb      	ldr	r3, [r7, #28]
 801610c:	681b      	ldr	r3, [r3, #0]
 801610e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016110:	69fb      	ldr	r3, [r7, #28]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d011      	beq.n	801613c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016118:	69fb      	ldr	r3, [r7, #28]
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	68db      	ldr	r3, [r3, #12]
 801611e:	685b      	ldr	r3, [r3, #4]
 8016120:	4618      	mov	r0, r3
 8016122:	f7f6 f90e 	bl	800c342 <lwip_htonl>
 8016126:	4604      	mov	r4, r0
 8016128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	4618      	mov	r0, r3
 8016130:	f7f6 f907 	bl	800c342 <lwip_htonl>
 8016134:	4603      	mov	r3, r0
 8016136:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016138:	2b00      	cmp	r3, #0
 801613a:	dbe6      	blt.n	801610a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	681a      	ldr	r2, [r3, #0]
 8016140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016142:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016144:	69fb      	ldr	r3, [r7, #28]
 8016146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016148:	601a      	str	r2, [r3, #0]
 801614a:	e009      	b.n	8016160 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801614c:	6a3b      	ldr	r3, [r7, #32]
 801614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016150:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016152:	6a3b      	ldr	r3, [r7, #32]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	623b      	str	r3, [r7, #32]
 8016158:	e002      	b.n	8016160 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801615a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801615c:	f7fb ff19 	bl	8011f92 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016164:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016168:	2b00      	cmp	r3, #0
 801616a:	d012      	beq.n	8016192 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801616e:	68db      	ldr	r3, [r3, #12]
 8016170:	685b      	ldr	r3, [r3, #4]
 8016172:	4618      	mov	r0, r3
 8016174:	f7f6 f8e5 	bl	800c342 <lwip_htonl>
 8016178:	4602      	mov	r2, r0
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801617e:	1ad3      	subs	r3, r2, r3
 8016180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016182:	8912      	ldrh	r2, [r2, #8]
 8016184:	4413      	add	r3, r2
  while (seg != NULL &&
 8016186:	69ba      	ldr	r2, [r7, #24]
 8016188:	429a      	cmp	r2, r3
 801618a:	f4bf aed9 	bcs.w	8015f40 <tcp_output+0x160>
 801618e:	e000      	b.n	8016192 <tcp_output+0x3b2>
      break;
 8016190:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016196:	2b00      	cmp	r3, #0
 8016198:	d108      	bne.n	80161ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	2200      	movs	r2, #0
 801619e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80161a2:	e004      	b.n	80161ae <tcp_output+0x3ce>
    goto output_done;
 80161a4:	bf00      	nop
 80161a6:	e002      	b.n	80161ae <tcp_output+0x3ce>
    goto output_done;
 80161a8:	bf00      	nop
 80161aa:	e000      	b.n	80161ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80161ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	8b5b      	ldrh	r3, [r3, #26]
 80161b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80161b6:	b29a      	uxth	r2, r3
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80161bc:	2300      	movs	r3, #0
}
 80161be:	4618      	mov	r0, r3
 80161c0:	3728      	adds	r7, #40	; 0x28
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bdb0      	pop	{r4, r5, r7, pc}
 80161c6:	bf00      	nop

080161c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b082      	sub	sp, #8
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d106      	bne.n	80161e4 <tcp_output_segment_busy+0x1c>
 80161d6:	4b09      	ldr	r3, [pc, #36]	; (80161fc <tcp_output_segment_busy+0x34>)
 80161d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80161dc:	4908      	ldr	r1, [pc, #32]	; (8016200 <tcp_output_segment_busy+0x38>)
 80161de:	4809      	ldr	r0, [pc, #36]	; (8016204 <tcp_output_segment_busy+0x3c>)
 80161e0:	f001 fd98 	bl	8017d14 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	685b      	ldr	r3, [r3, #4]
 80161e8:	7b9b      	ldrb	r3, [r3, #14]
 80161ea:	2b01      	cmp	r3, #1
 80161ec:	d001      	beq.n	80161f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80161ee:	2301      	movs	r3, #1
 80161f0:	e000      	b.n	80161f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80161f2:	2300      	movs	r3, #0
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}
 80161fc:	0801bbc0 	.word	0x0801bbc0
 8016200:	0801c1a4 	.word	0x0801c1a4
 8016204:	0801bc5c 	.word	0x0801bc5c

08016208 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016208:	b5b0      	push	{r4, r5, r7, lr}
 801620a:	b08c      	sub	sp, #48	; 0x30
 801620c:	af04      	add	r7, sp, #16
 801620e:	60f8      	str	r0, [r7, #12]
 8016210:	60b9      	str	r1, [r7, #8]
 8016212:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d106      	bne.n	8016228 <tcp_output_segment+0x20>
 801621a:	4b63      	ldr	r3, [pc, #396]	; (80163a8 <tcp_output_segment+0x1a0>)
 801621c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8016220:	4962      	ldr	r1, [pc, #392]	; (80163ac <tcp_output_segment+0x1a4>)
 8016222:	4863      	ldr	r0, [pc, #396]	; (80163b0 <tcp_output_segment+0x1a8>)
 8016224:	f001 fd76 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016228:	68bb      	ldr	r3, [r7, #8]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d106      	bne.n	801623c <tcp_output_segment+0x34>
 801622e:	4b5e      	ldr	r3, [pc, #376]	; (80163a8 <tcp_output_segment+0x1a0>)
 8016230:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016234:	495f      	ldr	r1, [pc, #380]	; (80163b4 <tcp_output_segment+0x1ac>)
 8016236:	485e      	ldr	r0, [pc, #376]	; (80163b0 <tcp_output_segment+0x1a8>)
 8016238:	f001 fd6c 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d106      	bne.n	8016250 <tcp_output_segment+0x48>
 8016242:	4b59      	ldr	r3, [pc, #356]	; (80163a8 <tcp_output_segment+0x1a0>)
 8016244:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016248:	495b      	ldr	r1, [pc, #364]	; (80163b8 <tcp_output_segment+0x1b0>)
 801624a:	4859      	ldr	r0, [pc, #356]	; (80163b0 <tcp_output_segment+0x1a8>)
 801624c:	f001 fd62 	bl	8017d14 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016250:	68f8      	ldr	r0, [r7, #12]
 8016252:	f7ff ffb9 	bl	80161c8 <tcp_output_segment_busy>
 8016256:	4603      	mov	r3, r0
 8016258:	2b00      	cmp	r3, #0
 801625a:	d001      	beq.n	8016260 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801625c:	2300      	movs	r3, #0
 801625e:	e09f      	b.n	80163a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	68dc      	ldr	r4, [r3, #12]
 8016268:	4610      	mov	r0, r2
 801626a:	f7f6 f86a 	bl	800c342 <lwip_htonl>
 801626e:	4603      	mov	r3, r0
 8016270:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016272:	68bb      	ldr	r3, [r7, #8]
 8016274:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	68dc      	ldr	r4, [r3, #12]
 801627a:	4610      	mov	r0, r2
 801627c:	f7f6 f84c 	bl	800c318 <lwip_htons>
 8016280:	4603      	mov	r3, r0
 8016282:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016288:	68ba      	ldr	r2, [r7, #8]
 801628a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801628c:	441a      	add	r2, r3
 801628e:	68bb      	ldr	r3, [r7, #8]
 8016290:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016292:	68fb      	ldr	r3, [r7, #12]
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	3314      	adds	r3, #20
 8016298:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801629a:	68fb      	ldr	r3, [r7, #12]
 801629c:	7a9b      	ldrb	r3, [r3, #10]
 801629e:	f003 0301 	and.w	r3, r3, #1
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d015      	beq.n	80162d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	3304      	adds	r3, #4
 80162aa:	461a      	mov	r2, r3
 80162ac:	6879      	ldr	r1, [r7, #4]
 80162ae:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80162b2:	f7fc fa33 	bl	801271c <tcp_eff_send_mss_netif>
 80162b6:	4603      	mov	r3, r0
 80162b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80162ba:	8b7b      	ldrh	r3, [r7, #26]
 80162bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80162c0:	4618      	mov	r0, r3
 80162c2:	f7f6 f83e 	bl	800c342 <lwip_htonl>
 80162c6:	4602      	mov	r2, r0
 80162c8:	69fb      	ldr	r3, [r7, #28]
 80162ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	3304      	adds	r3, #4
 80162d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80162d2:	68bb      	ldr	r3, [r7, #8]
 80162d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80162d8:	2b00      	cmp	r3, #0
 80162da:	da02      	bge.n	80162e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	2200      	movs	r2, #0
 80162e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80162e2:	68bb      	ldr	r3, [r7, #8]
 80162e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d10c      	bne.n	8016304 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80162ea:	4b34      	ldr	r3, [pc, #208]	; (80163bc <tcp_output_segment+0x1b4>)
 80162ec:	681a      	ldr	r2, [r3, #0]
 80162ee:	68bb      	ldr	r3, [r7, #8]
 80162f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	4618      	mov	r0, r3
 80162fa:	f7f6 f822 	bl	800c342 <lwip_htonl>
 80162fe:	4602      	mov	r2, r0
 8016300:	68bb      	ldr	r3, [r7, #8]
 8016302:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	68da      	ldr	r2, [r3, #12]
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	1ad3      	subs	r3, r2, r3
 8016310:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	8959      	ldrh	r1, [r3, #10]
 8016318:	68fb      	ldr	r3, [r7, #12]
 801631a:	685b      	ldr	r3, [r3, #4]
 801631c:	8b3a      	ldrh	r2, [r7, #24]
 801631e:	1a8a      	subs	r2, r1, r2
 8016320:	b292      	uxth	r2, r2
 8016322:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	685b      	ldr	r3, [r3, #4]
 8016328:	8919      	ldrh	r1, [r3, #8]
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	8b3a      	ldrh	r2, [r7, #24]
 8016330:	1a8a      	subs	r2, r1, r2
 8016332:	b292      	uxth	r2, r2
 8016334:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	68fa      	ldr	r2, [r7, #12]
 801633c:	68d2      	ldr	r2, [r2, #12]
 801633e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	68db      	ldr	r3, [r3, #12]
 8016344:	2200      	movs	r2, #0
 8016346:	741a      	strb	r2, [r3, #16]
 8016348:	2200      	movs	r2, #0
 801634a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	68db      	ldr	r3, [r3, #12]
 8016350:	f103 0214 	add.w	r2, r3, #20
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	7a9b      	ldrb	r3, [r3, #10]
 8016358:	009b      	lsls	r3, r3, #2
 801635a:	f003 0304 	and.w	r3, r3, #4
 801635e:	4413      	add	r3, r2
 8016360:	69fa      	ldr	r2, [r7, #28]
 8016362:	429a      	cmp	r2, r3
 8016364:	d006      	beq.n	8016374 <tcp_output_segment+0x16c>
 8016366:	4b10      	ldr	r3, [pc, #64]	; (80163a8 <tcp_output_segment+0x1a0>)
 8016368:	f240 621c 	movw	r2, #1564	; 0x61c
 801636c:	4914      	ldr	r1, [pc, #80]	; (80163c0 <tcp_output_segment+0x1b8>)
 801636e:	4810      	ldr	r0, [pc, #64]	; (80163b0 <tcp_output_segment+0x1a8>)
 8016370:	f001 fcd0 	bl	8017d14 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	6858      	ldr	r0, [r3, #4]
 8016378:	68b9      	ldr	r1, [r7, #8]
 801637a:	68bb      	ldr	r3, [r7, #8]
 801637c:	1d1c      	adds	r4, r3, #4
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	7add      	ldrb	r5, [r3, #11]
 8016382:	68bb      	ldr	r3, [r7, #8]
 8016384:	7a9b      	ldrb	r3, [r3, #10]
 8016386:	687a      	ldr	r2, [r7, #4]
 8016388:	9202      	str	r2, [sp, #8]
 801638a:	2206      	movs	r2, #6
 801638c:	9201      	str	r2, [sp, #4]
 801638e:	9300      	str	r3, [sp, #0]
 8016390:	462b      	mov	r3, r5
 8016392:	4622      	mov	r2, r4
 8016394:	f7f7 fc56 	bl	800dc44 <ip4_output_if>
 8016398:	4603      	mov	r3, r0
 801639a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801639c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3720      	adds	r7, #32
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bdb0      	pop	{r4, r5, r7, pc}
 80163a8:	0801bbc0 	.word	0x0801bbc0
 80163ac:	0801c1cc 	.word	0x0801c1cc
 80163b0:	0801bc5c 	.word	0x0801bc5c
 80163b4:	0801c1ec 	.word	0x0801c1ec
 80163b8:	0801c20c 	.word	0x0801c20c
 80163bc:	2400f228 	.word	0x2400f228
 80163c0:	0801c230 	.word	0x0801c230

080163c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80163c4:	b5b0      	push	{r4, r5, r7, lr}
 80163c6:	b084      	sub	sp, #16
 80163c8:	af00      	add	r7, sp, #0
 80163ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d106      	bne.n	80163e0 <tcp_rexmit_rto_prepare+0x1c>
 80163d2:	4b31      	ldr	r3, [pc, #196]	; (8016498 <tcp_rexmit_rto_prepare+0xd4>)
 80163d4:	f240 6263 	movw	r2, #1635	; 0x663
 80163d8:	4930      	ldr	r1, [pc, #192]	; (801649c <tcp_rexmit_rto_prepare+0xd8>)
 80163da:	4831      	ldr	r0, [pc, #196]	; (80164a0 <tcp_rexmit_rto_prepare+0xdc>)
 80163dc:	f001 fc9a 	bl	8017d14 <iprintf>

  if (pcb->unacked == NULL) {
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d102      	bne.n	80163ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80163e8:	f06f 0305 	mvn.w	r3, #5
 80163ec:	e050      	b.n	8016490 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163f2:	60fb      	str	r3, [r7, #12]
 80163f4:	e00b      	b.n	801640e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80163f6:	68f8      	ldr	r0, [r7, #12]
 80163f8:	f7ff fee6 	bl	80161c8 <tcp_output_segment_busy>
 80163fc:	4603      	mov	r3, r0
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d002      	beq.n	8016408 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016402:	f06f 0305 	mvn.w	r3, #5
 8016406:	e043      	b.n	8016490 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	60fb      	str	r3, [r7, #12]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d1ef      	bne.n	80163f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016416:	68f8      	ldr	r0, [r7, #12]
 8016418:	f7ff fed6 	bl	80161c8 <tcp_output_segment_busy>
 801641c:	4603      	mov	r3, r0
 801641e:	2b00      	cmp	r3, #0
 8016420:	d002      	beq.n	8016428 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016422:	f06f 0305 	mvn.w	r3, #5
 8016426:	e033      	b.n	8016490 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2200      	movs	r2, #0
 801643c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	8b5b      	ldrh	r3, [r3, #26]
 8016442:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016446:	b29a      	uxth	r2, r3
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	68db      	ldr	r3, [r3, #12]
 8016450:	685b      	ldr	r3, [r3, #4]
 8016452:	4618      	mov	r0, r3
 8016454:	f7f5 ff75 	bl	800c342 <lwip_htonl>
 8016458:	4604      	mov	r4, r0
 801645a:	68fb      	ldr	r3, [r7, #12]
 801645c:	891b      	ldrh	r3, [r3, #8]
 801645e:	461d      	mov	r5, r3
 8016460:	68fb      	ldr	r3, [r7, #12]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	899b      	ldrh	r3, [r3, #12]
 8016466:	b29b      	uxth	r3, r3
 8016468:	4618      	mov	r0, r3
 801646a:	f7f5 ff55 	bl	800c318 <lwip_htons>
 801646e:	4603      	mov	r3, r0
 8016470:	b2db      	uxtb	r3, r3
 8016472:	f003 0303 	and.w	r3, r3, #3
 8016476:	2b00      	cmp	r3, #0
 8016478:	d001      	beq.n	801647e <tcp_rexmit_rto_prepare+0xba>
 801647a:	2301      	movs	r3, #1
 801647c:	e000      	b.n	8016480 <tcp_rexmit_rto_prepare+0xbc>
 801647e:	2300      	movs	r3, #0
 8016480:	442b      	add	r3, r5
 8016482:	18e2      	adds	r2, r4, r3
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	2200      	movs	r2, #0
 801648c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801648e:	2300      	movs	r3, #0
}
 8016490:	4618      	mov	r0, r3
 8016492:	3710      	adds	r7, #16
 8016494:	46bd      	mov	sp, r7
 8016496:	bdb0      	pop	{r4, r5, r7, pc}
 8016498:	0801bbc0 	.word	0x0801bbc0
 801649c:	0801c244 	.word	0x0801c244
 80164a0:	0801bc5c 	.word	0x0801bc5c

080164a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b082      	sub	sp, #8
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d106      	bne.n	80164c0 <tcp_rexmit_rto_commit+0x1c>
 80164b2:	4b0d      	ldr	r3, [pc, #52]	; (80164e8 <tcp_rexmit_rto_commit+0x44>)
 80164b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80164b8:	490c      	ldr	r1, [pc, #48]	; (80164ec <tcp_rexmit_rto_commit+0x48>)
 80164ba:	480d      	ldr	r0, [pc, #52]	; (80164f0 <tcp_rexmit_rto_commit+0x4c>)
 80164bc:	f001 fc2a 	bl	8017d14 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80164c6:	2bff      	cmp	r3, #255	; 0xff
 80164c8:	d007      	beq.n	80164da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80164d0:	3301      	adds	r3, #1
 80164d2:	b2da      	uxtb	r2, r3
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80164da:	6878      	ldr	r0, [r7, #4]
 80164dc:	f7ff fc80 	bl	8015de0 <tcp_output>
}
 80164e0:	bf00      	nop
 80164e2:	3708      	adds	r7, #8
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	0801bbc0 	.word	0x0801bbc0
 80164ec:	0801c268 	.word	0x0801c268
 80164f0:	0801bc5c 	.word	0x0801bc5c

080164f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d106      	bne.n	8016510 <tcp_rexmit_rto+0x1c>
 8016502:	4b0a      	ldr	r3, [pc, #40]	; (801652c <tcp_rexmit_rto+0x38>)
 8016504:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016508:	4909      	ldr	r1, [pc, #36]	; (8016530 <tcp_rexmit_rto+0x3c>)
 801650a:	480a      	ldr	r0, [pc, #40]	; (8016534 <tcp_rexmit_rto+0x40>)
 801650c:	f001 fc02 	bl	8017d14 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f7ff ff57 	bl	80163c4 <tcp_rexmit_rto_prepare>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d102      	bne.n	8016522 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801651c:	6878      	ldr	r0, [r7, #4]
 801651e:	f7ff ffc1 	bl	80164a4 <tcp_rexmit_rto_commit>
  }
}
 8016522:	bf00      	nop
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	0801bbc0 	.word	0x0801bbc0
 8016530:	0801c28c 	.word	0x0801c28c
 8016534:	0801bc5c 	.word	0x0801bc5c

08016538 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016538:	b590      	push	{r4, r7, lr}
 801653a:	b085      	sub	sp, #20
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	2b00      	cmp	r3, #0
 8016544:	d106      	bne.n	8016554 <tcp_rexmit+0x1c>
 8016546:	4b2f      	ldr	r3, [pc, #188]	; (8016604 <tcp_rexmit+0xcc>)
 8016548:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801654c:	492e      	ldr	r1, [pc, #184]	; (8016608 <tcp_rexmit+0xd0>)
 801654e:	482f      	ldr	r0, [pc, #188]	; (801660c <tcp_rexmit+0xd4>)
 8016550:	f001 fbe0 	bl	8017d14 <iprintf>

  if (pcb->unacked == NULL) {
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016558:	2b00      	cmp	r3, #0
 801655a:	d102      	bne.n	8016562 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801655c:	f06f 0305 	mvn.w	r3, #5
 8016560:	e04c      	b.n	80165fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016566:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016568:	68b8      	ldr	r0, [r7, #8]
 801656a:	f7ff fe2d 	bl	80161c8 <tcp_output_segment_busy>
 801656e:	4603      	mov	r3, r0
 8016570:	2b00      	cmp	r3, #0
 8016572:	d002      	beq.n	801657a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016574:	f06f 0305 	mvn.w	r3, #5
 8016578:	e040      	b.n	80165fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801657a:	68bb      	ldr	r3, [r7, #8]
 801657c:	681a      	ldr	r2, [r3, #0]
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	336c      	adds	r3, #108	; 0x6c
 8016586:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016588:	e002      	b.n	8016590 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d011      	beq.n	80165bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	685b      	ldr	r3, [r3, #4]
 80165a0:	4618      	mov	r0, r3
 80165a2:	f7f5 fece 	bl	800c342 <lwip_htonl>
 80165a6:	4604      	mov	r4, r0
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	4618      	mov	r0, r3
 80165b0:	f7f5 fec7 	bl	800c342 <lwip_htonl>
 80165b4:	4603      	mov	r3, r0
 80165b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	dbe6      	blt.n	801658a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	681a      	ldr	r2, [r3, #0]
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	68ba      	ldr	r2, [r7, #8]
 80165c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80165ca:	68bb      	ldr	r3, [r7, #8]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d103      	bne.n	80165da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2200      	movs	r2, #0
 80165d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80165e0:	2bff      	cmp	r3, #255	; 0xff
 80165e2:	d007      	beq.n	80165f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80165ea:	3301      	adds	r3, #1
 80165ec:	b2da      	uxtb	r2, r3
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2200      	movs	r2, #0
 80165f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80165fa:	2300      	movs	r3, #0
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	3714      	adds	r7, #20
 8016600:	46bd      	mov	sp, r7
 8016602:	bd90      	pop	{r4, r7, pc}
 8016604:	0801bbc0 	.word	0x0801bbc0
 8016608:	0801c2a8 	.word	0x0801c2a8
 801660c:	0801bc5c 	.word	0x0801bc5c

08016610 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d106      	bne.n	801662c <tcp_rexmit_fast+0x1c>
 801661e:	4b2a      	ldr	r3, [pc, #168]	; (80166c8 <tcp_rexmit_fast+0xb8>)
 8016620:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016624:	4929      	ldr	r1, [pc, #164]	; (80166cc <tcp_rexmit_fast+0xbc>)
 8016626:	482a      	ldr	r0, [pc, #168]	; (80166d0 <tcp_rexmit_fast+0xc0>)
 8016628:	f001 fb74 	bl	8017d14 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016630:	2b00      	cmp	r3, #0
 8016632:	d045      	beq.n	80166c0 <tcp_rexmit_fast+0xb0>
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	8b5b      	ldrh	r3, [r3, #26]
 8016638:	f003 0304 	and.w	r3, r3, #4
 801663c:	2b00      	cmp	r3, #0
 801663e:	d13f      	bne.n	80166c0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f7ff ff79 	bl	8016538 <tcp_rexmit>
 8016646:	4603      	mov	r3, r0
 8016648:	2b00      	cmp	r3, #0
 801664a:	d139      	bne.n	80166c0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016658:	4293      	cmp	r3, r2
 801665a:	bf28      	it	cs
 801665c:	4613      	movcs	r3, r2
 801665e:	b29b      	uxth	r3, r3
 8016660:	2b00      	cmp	r3, #0
 8016662:	da00      	bge.n	8016666 <tcp_rexmit_fast+0x56>
 8016664:	3301      	adds	r3, #1
 8016666:	105b      	asrs	r3, r3, #1
 8016668:	b29a      	uxth	r2, r3
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016676:	461a      	mov	r2, r3
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801667c:	005b      	lsls	r3, r3, #1
 801667e:	429a      	cmp	r2, r3
 8016680:	d206      	bcs.n	8016690 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016686:	005b      	lsls	r3, r3, #1
 8016688:	b29a      	uxth	r2, r3
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801669a:	4619      	mov	r1, r3
 801669c:	0049      	lsls	r1, r1, #1
 801669e:	440b      	add	r3, r1
 80166a0:	b29b      	uxth	r3, r3
 80166a2:	4413      	add	r3, r2
 80166a4:	b29a      	uxth	r2, r3
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	8b5b      	ldrh	r3, [r3, #26]
 80166b0:	f043 0304 	orr.w	r3, r3, #4
 80166b4:	b29a      	uxth	r2, r3
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	2200      	movs	r2, #0
 80166be:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80166c0:	bf00      	nop
 80166c2:	3708      	adds	r7, #8
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}
 80166c8:	0801bbc0 	.word	0x0801bbc0
 80166cc:	0801c2c0 	.word	0x0801c2c0
 80166d0:	0801bc5c 	.word	0x0801bc5c

080166d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80166d4:	b580      	push	{r7, lr}
 80166d6:	b086      	sub	sp, #24
 80166d8:	af00      	add	r7, sp, #0
 80166da:	60f8      	str	r0, [r7, #12]
 80166dc:	607b      	str	r3, [r7, #4]
 80166de:	460b      	mov	r3, r1
 80166e0:	817b      	strh	r3, [r7, #10]
 80166e2:	4613      	mov	r3, r2
 80166e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80166e6:	897a      	ldrh	r2, [r7, #10]
 80166e8:	893b      	ldrh	r3, [r7, #8]
 80166ea:	4413      	add	r3, r2
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	3314      	adds	r3, #20
 80166f0:	b29b      	uxth	r3, r3
 80166f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166f6:	4619      	mov	r1, r3
 80166f8:	2022      	movs	r0, #34	; 0x22
 80166fa:	f7f9 fafd 	bl	800fcf8 <pbuf_alloc>
 80166fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d04d      	beq.n	80167a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016706:	897b      	ldrh	r3, [r7, #10]
 8016708:	3313      	adds	r3, #19
 801670a:	697a      	ldr	r2, [r7, #20]
 801670c:	8952      	ldrh	r2, [r2, #10]
 801670e:	4293      	cmp	r3, r2
 8016710:	db06      	blt.n	8016720 <tcp_output_alloc_header_common+0x4c>
 8016712:	4b26      	ldr	r3, [pc, #152]	; (80167ac <tcp_output_alloc_header_common+0xd8>)
 8016714:	f240 7223 	movw	r2, #1827	; 0x723
 8016718:	4925      	ldr	r1, [pc, #148]	; (80167b0 <tcp_output_alloc_header_common+0xdc>)
 801671a:	4826      	ldr	r0, [pc, #152]	; (80167b4 <tcp_output_alloc_header_common+0xe0>)
 801671c:	f001 fafa 	bl	8017d14 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016726:	8c3b      	ldrh	r3, [r7, #32]
 8016728:	4618      	mov	r0, r3
 801672a:	f7f5 fdf5 	bl	800c318 <lwip_htons>
 801672e:	4603      	mov	r3, r0
 8016730:	461a      	mov	r2, r3
 8016732:	693b      	ldr	r3, [r7, #16]
 8016734:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016738:	4618      	mov	r0, r3
 801673a:	f7f5 fded 	bl	800c318 <lwip_htons>
 801673e:	4603      	mov	r3, r0
 8016740:	461a      	mov	r2, r3
 8016742:	693b      	ldr	r3, [r7, #16]
 8016744:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	687a      	ldr	r2, [r7, #4]
 801674a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801674c:	68f8      	ldr	r0, [r7, #12]
 801674e:	f7f5 fdf8 	bl	800c342 <lwip_htonl>
 8016752:	4602      	mov	r2, r0
 8016754:	693b      	ldr	r3, [r7, #16]
 8016756:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016758:	897b      	ldrh	r3, [r7, #10]
 801675a:	089b      	lsrs	r3, r3, #2
 801675c:	b29b      	uxth	r3, r3
 801675e:	3305      	adds	r3, #5
 8016760:	b29b      	uxth	r3, r3
 8016762:	031b      	lsls	r3, r3, #12
 8016764:	b29a      	uxth	r2, r3
 8016766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801676a:	b29b      	uxth	r3, r3
 801676c:	4313      	orrs	r3, r2
 801676e:	b29b      	uxth	r3, r3
 8016770:	4618      	mov	r0, r3
 8016772:	f7f5 fdd1 	bl	800c318 <lwip_htons>
 8016776:	4603      	mov	r3, r0
 8016778:	461a      	mov	r2, r3
 801677a:	693b      	ldr	r3, [r7, #16]
 801677c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801677e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016780:	4618      	mov	r0, r3
 8016782:	f7f5 fdc9 	bl	800c318 <lwip_htons>
 8016786:	4603      	mov	r3, r0
 8016788:	461a      	mov	r2, r3
 801678a:	693b      	ldr	r3, [r7, #16]
 801678c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	2200      	movs	r2, #0
 8016792:	741a      	strb	r2, [r3, #16]
 8016794:	2200      	movs	r2, #0
 8016796:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016798:	693b      	ldr	r3, [r7, #16]
 801679a:	2200      	movs	r2, #0
 801679c:	749a      	strb	r2, [r3, #18]
 801679e:	2200      	movs	r2, #0
 80167a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80167a2:	697b      	ldr	r3, [r7, #20]
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	3718      	adds	r7, #24
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}
 80167ac:	0801bbc0 	.word	0x0801bbc0
 80167b0:	0801c2e0 	.word	0x0801c2e0
 80167b4:	0801bc5c 	.word	0x0801bc5c

080167b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80167b8:	b5b0      	push	{r4, r5, r7, lr}
 80167ba:	b08a      	sub	sp, #40	; 0x28
 80167bc:	af04      	add	r7, sp, #16
 80167be:	60f8      	str	r0, [r7, #12]
 80167c0:	607b      	str	r3, [r7, #4]
 80167c2:	460b      	mov	r3, r1
 80167c4:	817b      	strh	r3, [r7, #10]
 80167c6:	4613      	mov	r3, r2
 80167c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d106      	bne.n	80167de <tcp_output_alloc_header+0x26>
 80167d0:	4b15      	ldr	r3, [pc, #84]	; (8016828 <tcp_output_alloc_header+0x70>)
 80167d2:	f240 7242 	movw	r2, #1858	; 0x742
 80167d6:	4915      	ldr	r1, [pc, #84]	; (801682c <tcp_output_alloc_header+0x74>)
 80167d8:	4815      	ldr	r0, [pc, #84]	; (8016830 <tcp_output_alloc_header+0x78>)
 80167da:	f001 fa9b 	bl	8017d14 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	8adb      	ldrh	r3, [r3, #22]
 80167e6:	68fa      	ldr	r2, [r7, #12]
 80167e8:	8b12      	ldrh	r2, [r2, #24]
 80167ea:	68f9      	ldr	r1, [r7, #12]
 80167ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80167ee:	893d      	ldrh	r5, [r7, #8]
 80167f0:	897c      	ldrh	r4, [r7, #10]
 80167f2:	9103      	str	r1, [sp, #12]
 80167f4:	2110      	movs	r1, #16
 80167f6:	9102      	str	r1, [sp, #8]
 80167f8:	9201      	str	r2, [sp, #4]
 80167fa:	9300      	str	r3, [sp, #0]
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	462a      	mov	r2, r5
 8016800:	4621      	mov	r1, r4
 8016802:	f7ff ff67 	bl	80166d4 <tcp_output_alloc_header_common>
 8016806:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016808:	697b      	ldr	r3, [r7, #20]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d006      	beq.n	801681c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016812:	68fa      	ldr	r2, [r7, #12]
 8016814:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016816:	441a      	add	r2, r3
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801681c:	697b      	ldr	r3, [r7, #20]
}
 801681e:	4618      	mov	r0, r3
 8016820:	3718      	adds	r7, #24
 8016822:	46bd      	mov	sp, r7
 8016824:	bdb0      	pop	{r4, r5, r7, pc}
 8016826:	bf00      	nop
 8016828:	0801bbc0 	.word	0x0801bbc0
 801682c:	0801c310 	.word	0x0801c310
 8016830:	0801bc5c 	.word	0x0801bc5c

08016834 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b088      	sub	sp, #32
 8016838:	af00      	add	r7, sp, #0
 801683a:	60f8      	str	r0, [r7, #12]
 801683c:	60b9      	str	r1, [r7, #8]
 801683e:	4611      	mov	r1, r2
 8016840:	461a      	mov	r2, r3
 8016842:	460b      	mov	r3, r1
 8016844:	71fb      	strb	r3, [r7, #7]
 8016846:	4613      	mov	r3, r2
 8016848:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801684a:	2300      	movs	r3, #0
 801684c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801684e:	68bb      	ldr	r3, [r7, #8]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d106      	bne.n	8016862 <tcp_output_fill_options+0x2e>
 8016854:	4b13      	ldr	r3, [pc, #76]	; (80168a4 <tcp_output_fill_options+0x70>)
 8016856:	f240 7256 	movw	r2, #1878	; 0x756
 801685a:	4913      	ldr	r1, [pc, #76]	; (80168a8 <tcp_output_fill_options+0x74>)
 801685c:	4813      	ldr	r0, [pc, #76]	; (80168ac <tcp_output_fill_options+0x78>)
 801685e:	f001 fa59 	bl	8017d14 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8016862:	68bb      	ldr	r3, [r7, #8]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016868:	69bb      	ldr	r3, [r7, #24]
 801686a:	3314      	adds	r3, #20
 801686c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801686e:	69bb      	ldr	r3, [r7, #24]
 8016870:	f103 0214 	add.w	r2, r3, #20
 8016874:	8bfb      	ldrh	r3, [r7, #30]
 8016876:	009b      	lsls	r3, r3, #2
 8016878:	4619      	mov	r1, r3
 801687a:	79fb      	ldrb	r3, [r7, #7]
 801687c:	009b      	lsls	r3, r3, #2
 801687e:	f003 0304 	and.w	r3, r3, #4
 8016882:	440b      	add	r3, r1
 8016884:	4413      	add	r3, r2
 8016886:	697a      	ldr	r2, [r7, #20]
 8016888:	429a      	cmp	r2, r3
 801688a:	d006      	beq.n	801689a <tcp_output_fill_options+0x66>
 801688c:	4b05      	ldr	r3, [pc, #20]	; (80168a4 <tcp_output_fill_options+0x70>)
 801688e:	f240 7275 	movw	r2, #1909	; 0x775
 8016892:	4907      	ldr	r1, [pc, #28]	; (80168b0 <tcp_output_fill_options+0x7c>)
 8016894:	4805      	ldr	r0, [pc, #20]	; (80168ac <tcp_output_fill_options+0x78>)
 8016896:	f001 fa3d 	bl	8017d14 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801689a:	bf00      	nop
 801689c:	3720      	adds	r7, #32
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	0801bbc0 	.word	0x0801bbc0
 80168a8:	0801c338 	.word	0x0801c338
 80168ac:	0801bc5c 	.word	0x0801bc5c
 80168b0:	0801c230 	.word	0x0801c230

080168b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b08a      	sub	sp, #40	; 0x28
 80168b8:	af04      	add	r7, sp, #16
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	607a      	str	r2, [r7, #4]
 80168c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80168c2:	68bb      	ldr	r3, [r7, #8]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d106      	bne.n	80168d6 <tcp_output_control_segment+0x22>
 80168c8:	4b1c      	ldr	r3, [pc, #112]	; (801693c <tcp_output_control_segment+0x88>)
 80168ca:	f240 7287 	movw	r2, #1927	; 0x787
 80168ce:	491c      	ldr	r1, [pc, #112]	; (8016940 <tcp_output_control_segment+0x8c>)
 80168d0:	481c      	ldr	r0, [pc, #112]	; (8016944 <tcp_output_control_segment+0x90>)
 80168d2:	f001 fa1f 	bl	8017d14 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80168d6:	683a      	ldr	r2, [r7, #0]
 80168d8:	6879      	ldr	r1, [r7, #4]
 80168da:	68f8      	ldr	r0, [r7, #12]
 80168dc:	f7fe fae8 	bl	8014eb0 <tcp_route>
 80168e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d102      	bne.n	80168ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80168e8:	23fc      	movs	r3, #252	; 0xfc
 80168ea:	75fb      	strb	r3, [r7, #23]
 80168ec:	e01c      	b.n	8016928 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d006      	beq.n	8016902 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	7adb      	ldrb	r3, [r3, #11]
 80168f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80168fa:	68fb      	ldr	r3, [r7, #12]
 80168fc:	7a9b      	ldrb	r3, [r3, #10]
 80168fe:	757b      	strb	r3, [r7, #21]
 8016900:	e003      	b.n	801690a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8016902:	23ff      	movs	r3, #255	; 0xff
 8016904:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016906:	2300      	movs	r3, #0
 8016908:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801690a:	7dba      	ldrb	r2, [r7, #22]
 801690c:	693b      	ldr	r3, [r7, #16]
 801690e:	9302      	str	r3, [sp, #8]
 8016910:	2306      	movs	r3, #6
 8016912:	9301      	str	r3, [sp, #4]
 8016914:	7d7b      	ldrb	r3, [r7, #21]
 8016916:	9300      	str	r3, [sp, #0]
 8016918:	4613      	mov	r3, r2
 801691a:	683a      	ldr	r2, [r7, #0]
 801691c:	6879      	ldr	r1, [r7, #4]
 801691e:	68b8      	ldr	r0, [r7, #8]
 8016920:	f7f7 f990 	bl	800dc44 <ip4_output_if>
 8016924:	4603      	mov	r3, r0
 8016926:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016928:	68b8      	ldr	r0, [r7, #8]
 801692a:	f7f9 fcc9 	bl	80102c0 <pbuf_free>
  return err;
 801692e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016932:	4618      	mov	r0, r3
 8016934:	3718      	adds	r7, #24
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
 801693a:	bf00      	nop
 801693c:	0801bbc0 	.word	0x0801bbc0
 8016940:	0801c360 	.word	0x0801c360
 8016944:	0801bc5c 	.word	0x0801bc5c

08016948 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016948:	b590      	push	{r4, r7, lr}
 801694a:	b08b      	sub	sp, #44	; 0x2c
 801694c:	af04      	add	r7, sp, #16
 801694e:	60f8      	str	r0, [r7, #12]
 8016950:	60b9      	str	r1, [r7, #8]
 8016952:	607a      	str	r2, [r7, #4]
 8016954:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016956:	683b      	ldr	r3, [r7, #0]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d106      	bne.n	801696a <tcp_rst+0x22>
 801695c:	4b1f      	ldr	r3, [pc, #124]	; (80169dc <tcp_rst+0x94>)
 801695e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8016962:	491f      	ldr	r1, [pc, #124]	; (80169e0 <tcp_rst+0x98>)
 8016964:	481f      	ldr	r0, [pc, #124]	; (80169e4 <tcp_rst+0x9c>)
 8016966:	f001 f9d5 	bl	8017d14 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801696c:	2b00      	cmp	r3, #0
 801696e:	d106      	bne.n	801697e <tcp_rst+0x36>
 8016970:	4b1a      	ldr	r3, [pc, #104]	; (80169dc <tcp_rst+0x94>)
 8016972:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016976:	491c      	ldr	r1, [pc, #112]	; (80169e8 <tcp_rst+0xa0>)
 8016978:	481a      	ldr	r0, [pc, #104]	; (80169e4 <tcp_rst+0x9c>)
 801697a:	f001 f9cb 	bl	8017d14 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801697e:	2300      	movs	r3, #0
 8016980:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8016982:	f24d 0316 	movw	r3, #53270	; 0xd016
 8016986:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016988:	7dfb      	ldrb	r3, [r7, #23]
 801698a:	b29c      	uxth	r4, r3
 801698c:	68b8      	ldr	r0, [r7, #8]
 801698e:	f7f5 fcd8 	bl	800c342 <lwip_htonl>
 8016992:	4602      	mov	r2, r0
 8016994:	8abb      	ldrh	r3, [r7, #20]
 8016996:	9303      	str	r3, [sp, #12]
 8016998:	2314      	movs	r3, #20
 801699a:	9302      	str	r3, [sp, #8]
 801699c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801699e:	9301      	str	r3, [sp, #4]
 80169a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80169a2:	9300      	str	r3, [sp, #0]
 80169a4:	4613      	mov	r3, r2
 80169a6:	2200      	movs	r2, #0
 80169a8:	4621      	mov	r1, r4
 80169aa:	6878      	ldr	r0, [r7, #4]
 80169ac:	f7ff fe92 	bl	80166d4 <tcp_output_alloc_header_common>
 80169b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d00c      	beq.n	80169d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80169b8:	7dfb      	ldrb	r3, [r7, #23]
 80169ba:	2200      	movs	r2, #0
 80169bc:	6939      	ldr	r1, [r7, #16]
 80169be:	68f8      	ldr	r0, [r7, #12]
 80169c0:	f7ff ff38 	bl	8016834 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80169c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169c6:	683a      	ldr	r2, [r7, #0]
 80169c8:	6939      	ldr	r1, [r7, #16]
 80169ca:	68f8      	ldr	r0, [r7, #12]
 80169cc:	f7ff ff72 	bl	80168b4 <tcp_output_control_segment>
 80169d0:	e000      	b.n	80169d4 <tcp_rst+0x8c>
    return;
 80169d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80169d4:	371c      	adds	r7, #28
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd90      	pop	{r4, r7, pc}
 80169da:	bf00      	nop
 80169dc:	0801bbc0 	.word	0x0801bbc0
 80169e0:	0801c38c 	.word	0x0801c38c
 80169e4:	0801bc5c 	.word	0x0801bc5c
 80169e8:	0801c3a8 	.word	0x0801c3a8

080169ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80169ec:	b590      	push	{r4, r7, lr}
 80169ee:	b087      	sub	sp, #28
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80169f4:	2300      	movs	r3, #0
 80169f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80169f8:	2300      	movs	r3, #0
 80169fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d106      	bne.n	8016a10 <tcp_send_empty_ack+0x24>
 8016a02:	4b28      	ldr	r3, [pc, #160]	; (8016aa4 <tcp_send_empty_ack+0xb8>)
 8016a04:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016a08:	4927      	ldr	r1, [pc, #156]	; (8016aa8 <tcp_send_empty_ack+0xbc>)
 8016a0a:	4828      	ldr	r0, [pc, #160]	; (8016aac <tcp_send_empty_ack+0xc0>)
 8016a0c:	f001 f982 	bl	8017d14 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a10:	7dfb      	ldrb	r3, [r7, #23]
 8016a12:	009b      	lsls	r3, r3, #2
 8016a14:	b2db      	uxtb	r3, r3
 8016a16:	f003 0304 	and.w	r3, r3, #4
 8016a1a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016a1c:	7d7b      	ldrb	r3, [r7, #21]
 8016a1e:	b29c      	uxth	r4, r3
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7f5 fc8c 	bl	800c342 <lwip_htonl>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	4621      	mov	r1, r4
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f7ff fec1 	bl	80167b8 <tcp_output_alloc_header>
 8016a36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016a38:	693b      	ldr	r3, [r7, #16]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d109      	bne.n	8016a52 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	8b5b      	ldrh	r3, [r3, #26]
 8016a42:	f043 0303 	orr.w	r3, r3, #3
 8016a46:	b29a      	uxth	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016a4c:	f06f 0301 	mvn.w	r3, #1
 8016a50:	e023      	b.n	8016a9a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016a52:	7dbb      	ldrb	r3, [r7, #22]
 8016a54:	7dfa      	ldrb	r2, [r7, #23]
 8016a56:	6939      	ldr	r1, [r7, #16]
 8016a58:	6878      	ldr	r0, [r7, #4]
 8016a5a:	f7ff feeb 	bl	8016834 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016a5e:	687a      	ldr	r2, [r7, #4]
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	3304      	adds	r3, #4
 8016a64:	6939      	ldr	r1, [r7, #16]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f7ff ff24 	bl	80168b4 <tcp_output_control_segment>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d007      	beq.n	8016a88 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	8b5b      	ldrh	r3, [r3, #26]
 8016a7c:	f043 0303 	orr.w	r3, r3, #3
 8016a80:	b29a      	uxth	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	835a      	strh	r2, [r3, #26]
 8016a86:	e006      	b.n	8016a96 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	8b5b      	ldrh	r3, [r3, #26]
 8016a8c:	f023 0303 	bic.w	r3, r3, #3
 8016a90:	b29a      	uxth	r2, r3
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	371c      	adds	r7, #28
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd90      	pop	{r4, r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	0801bbc0 	.word	0x0801bbc0
 8016aa8:	0801c3c4 	.word	0x0801c3c4
 8016aac:	0801bc5c 	.word	0x0801bc5c

08016ab0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016ab0:	b590      	push	{r4, r7, lr}
 8016ab2:	b087      	sub	sp, #28
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016ab8:	2300      	movs	r3, #0
 8016aba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d106      	bne.n	8016ad0 <tcp_keepalive+0x20>
 8016ac2:	4b18      	ldr	r3, [pc, #96]	; (8016b24 <tcp_keepalive+0x74>)
 8016ac4:	f640 0224 	movw	r2, #2084	; 0x824
 8016ac8:	4917      	ldr	r1, [pc, #92]	; (8016b28 <tcp_keepalive+0x78>)
 8016aca:	4818      	ldr	r0, [pc, #96]	; (8016b2c <tcp_keepalive+0x7c>)
 8016acc:	f001 f922 	bl	8017d14 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016ad0:	7dfb      	ldrb	r3, [r7, #23]
 8016ad2:	b29c      	uxth	r4, r3
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ad8:	3b01      	subs	r3, #1
 8016ada:	4618      	mov	r0, r3
 8016adc:	f7f5 fc31 	bl	800c342 <lwip_htonl>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	4621      	mov	r1, r4
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7ff fe66 	bl	80167b8 <tcp_output_alloc_header>
 8016aec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d102      	bne.n	8016afa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016af8:	e010      	b.n	8016b1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016afa:	7dfb      	ldrb	r3, [r7, #23]
 8016afc:	2200      	movs	r2, #0
 8016afe:	6939      	ldr	r1, [r7, #16]
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f7ff fe97 	bl	8016834 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016b06:	687a      	ldr	r2, [r7, #4]
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	3304      	adds	r3, #4
 8016b0c:	6939      	ldr	r1, [r7, #16]
 8016b0e:	6878      	ldr	r0, [r7, #4]
 8016b10:	f7ff fed0 	bl	80168b4 <tcp_output_control_segment>
 8016b14:	4603      	mov	r3, r0
 8016b16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	371c      	adds	r7, #28
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd90      	pop	{r4, r7, pc}
 8016b24:	0801bbc0 	.word	0x0801bbc0
 8016b28:	0801c3e4 	.word	0x0801c3e4
 8016b2c:	0801bc5c 	.word	0x0801bc5c

08016b30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016b30:	b590      	push	{r4, r7, lr}
 8016b32:	b08b      	sub	sp, #44	; 0x2c
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016b38:	2300      	movs	r3, #0
 8016b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d106      	bne.n	8016b52 <tcp_zero_window_probe+0x22>
 8016b44:	4b4c      	ldr	r3, [pc, #304]	; (8016c78 <tcp_zero_window_probe+0x148>)
 8016b46:	f640 024f 	movw	r2, #2127	; 0x84f
 8016b4a:	494c      	ldr	r1, [pc, #304]	; (8016c7c <tcp_zero_window_probe+0x14c>)
 8016b4c:	484c      	ldr	r0, [pc, #304]	; (8016c80 <tcp_zero_window_probe+0x150>)
 8016b4e:	f001 f8e1 	bl	8017d14 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016b58:	6a3b      	ldr	r3, [r7, #32]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d101      	bne.n	8016b62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	e086      	b.n	8016c70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016b68:	2bff      	cmp	r3, #255	; 0xff
 8016b6a:	d007      	beq.n	8016b7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016b72:	3301      	adds	r3, #1
 8016b74:	b2da      	uxtb	r2, r3
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016b7c:	6a3b      	ldr	r3, [r7, #32]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	899b      	ldrh	r3, [r3, #12]
 8016b82:	b29b      	uxth	r3, r3
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7f5 fbc7 	bl	800c318 <lwip_htons>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	b2db      	uxtb	r3, r3
 8016b8e:	f003 0301 	and.w	r3, r3, #1
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d005      	beq.n	8016ba2 <tcp_zero_window_probe+0x72>
 8016b96:	6a3b      	ldr	r3, [r7, #32]
 8016b98:	891b      	ldrh	r3, [r3, #8]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d101      	bne.n	8016ba2 <tcp_zero_window_probe+0x72>
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	e000      	b.n	8016ba4 <tcp_zero_window_probe+0x74>
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016ba6:	7ffb      	ldrb	r3, [r7, #31]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	bf0c      	ite	eq
 8016bac:	2301      	moveq	r3, #1
 8016bae:	2300      	movne	r3, #0
 8016bb0:	b2db      	uxtb	r3, r3
 8016bb2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb8:	b299      	uxth	r1, r3
 8016bba:	6a3b      	ldr	r3, [r7, #32]
 8016bbc:	68db      	ldr	r3, [r3, #12]
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	8bba      	ldrh	r2, [r7, #28]
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f7ff fdf8 	bl	80167b8 <tcp_output_alloc_header>
 8016bc8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016bca:	69bb      	ldr	r3, [r7, #24]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d102      	bne.n	8016bd6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016bd4:	e04c      	b.n	8016c70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016bd6:	69bb      	ldr	r3, [r7, #24]
 8016bd8:	685b      	ldr	r3, [r3, #4]
 8016bda:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016bdc:	7ffb      	ldrb	r3, [r7, #31]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d011      	beq.n	8016c06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016be2:	697b      	ldr	r3, [r7, #20]
 8016be4:	899b      	ldrh	r3, [r3, #12]
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	b21b      	sxth	r3, r3
 8016bea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016bee:	b21c      	sxth	r4, r3
 8016bf0:	2011      	movs	r0, #17
 8016bf2:	f7f5 fb91 	bl	800c318 <lwip_htons>
 8016bf6:	4603      	mov	r3, r0
 8016bf8:	b21b      	sxth	r3, r3
 8016bfa:	4323      	orrs	r3, r4
 8016bfc:	b21b      	sxth	r3, r3
 8016bfe:	b29a      	uxth	r2, r3
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	819a      	strh	r2, [r3, #12]
 8016c04:	e010      	b.n	8016c28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016c06:	69bb      	ldr	r3, [r7, #24]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	3314      	adds	r3, #20
 8016c0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016c0e:	6a3b      	ldr	r3, [r7, #32]
 8016c10:	6858      	ldr	r0, [r3, #4]
 8016c12:	6a3b      	ldr	r3, [r7, #32]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	891a      	ldrh	r2, [r3, #8]
 8016c18:	6a3b      	ldr	r3, [r7, #32]
 8016c1a:	891b      	ldrh	r3, [r3, #8]
 8016c1c:	1ad3      	subs	r3, r2, r3
 8016c1e:	b29b      	uxth	r3, r3
 8016c20:	2201      	movs	r2, #1
 8016c22:	6939      	ldr	r1, [r7, #16]
 8016c24:	f7f9 fd42 	bl	80106ac <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016c28:	6a3b      	ldr	r3, [r7, #32]
 8016c2a:	68db      	ldr	r3, [r3, #12]
 8016c2c:	685b      	ldr	r3, [r3, #4]
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7f5 fb87 	bl	800c342 <lwip_htonl>
 8016c34:	4603      	mov	r3, r0
 8016c36:	3301      	adds	r3, #1
 8016c38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	1ad3      	subs	r3, r2, r3
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	da02      	bge.n	8016c4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	68fa      	ldr	r2, [r7, #12]
 8016c4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c50:	2200      	movs	r2, #0
 8016c52:	69b9      	ldr	r1, [r7, #24]
 8016c54:	6878      	ldr	r0, [r7, #4]
 8016c56:	f7ff fded 	bl	8016834 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016c5a:	687a      	ldr	r2, [r7, #4]
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	3304      	adds	r3, #4
 8016c60:	69b9      	ldr	r1, [r7, #24]
 8016c62:	6878      	ldr	r0, [r7, #4]
 8016c64:	f7ff fe26 	bl	80168b4 <tcp_output_control_segment>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016c6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	372c      	adds	r7, #44	; 0x2c
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd90      	pop	{r4, r7, pc}
 8016c78:	0801bbc0 	.word	0x0801bbc0
 8016c7c:	0801c400 	.word	0x0801c400
 8016c80:	0801bc5c 	.word	0x0801bc5c

08016c84 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8016c8e:	f000 fb17 	bl	80172c0 <sys_timeouts_sleeptime>
 8016c92:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016c9a:	d10b      	bne.n	8016cb4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8016c9c:	4813      	ldr	r0, [pc, #76]	; (8016cec <tcpip_timeouts_mbox_fetch+0x68>)
 8016c9e:	f7f9 ff3a 	bl	8010b16 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f7f9 fdf2 	bl	8010890 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8016cac:	480f      	ldr	r0, [pc, #60]	; (8016cec <tcpip_timeouts_mbox_fetch+0x68>)
 8016cae:	f7f9 ff23 	bl	8010af8 <sys_mutex_lock>
    return;
 8016cb2:	e018      	b.n	8016ce6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d102      	bne.n	8016cc0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8016cba:	f000 fac7 	bl	801724c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016cbe:	e7e6      	b.n	8016c8e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016cc0:	480a      	ldr	r0, [pc, #40]	; (8016cec <tcpip_timeouts_mbox_fetch+0x68>)
 8016cc2:	f7f9 ff28 	bl	8010b16 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016cc6:	68fa      	ldr	r2, [r7, #12]
 8016cc8:	6839      	ldr	r1, [r7, #0]
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f7f9 fde0 	bl	8010890 <sys_arch_mbox_fetch>
 8016cd0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8016cd2:	4806      	ldr	r0, [pc, #24]	; (8016cec <tcpip_timeouts_mbox_fetch+0x68>)
 8016cd4:	f7f9 ff10 	bl	8010af8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016cd8:	68bb      	ldr	r3, [r7, #8]
 8016cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016cde:	d102      	bne.n	8016ce6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016ce0:	f000 fab4 	bl	801724c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016ce4:	e7d3      	b.n	8016c8e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016ce6:	3710      	adds	r7, #16
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}
 8016cec:	2400f284 	.word	0x2400f284

08016cf0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b084      	sub	sp, #16
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016cf8:	4810      	ldr	r0, [pc, #64]	; (8016d3c <tcpip_thread+0x4c>)
 8016cfa:	f7f9 fefd 	bl	8010af8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8016cfe:	4b10      	ldr	r3, [pc, #64]	; (8016d40 <tcpip_thread+0x50>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d005      	beq.n	8016d12 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016d06:	4b0e      	ldr	r3, [pc, #56]	; (8016d40 <tcpip_thread+0x50>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	4a0e      	ldr	r2, [pc, #56]	; (8016d44 <tcpip_thread+0x54>)
 8016d0c:	6812      	ldr	r2, [r2, #0]
 8016d0e:	4610      	mov	r0, r2
 8016d10:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016d12:	f107 030c 	add.w	r3, r7, #12
 8016d16:	4619      	mov	r1, r3
 8016d18:	480b      	ldr	r0, [pc, #44]	; (8016d48 <tcpip_thread+0x58>)
 8016d1a:	f7ff ffb3 	bl	8016c84 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d106      	bne.n	8016d32 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016d24:	4b09      	ldr	r3, [pc, #36]	; (8016d4c <tcpip_thread+0x5c>)
 8016d26:	2291      	movs	r2, #145	; 0x91
 8016d28:	4909      	ldr	r1, [pc, #36]	; (8016d50 <tcpip_thread+0x60>)
 8016d2a:	480a      	ldr	r0, [pc, #40]	; (8016d54 <tcpip_thread+0x64>)
 8016d2c:	f000 fff2 	bl	8017d14 <iprintf>
      continue;
 8016d30:	e003      	b.n	8016d3a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	4618      	mov	r0, r3
 8016d36:	f000 f80f 	bl	8016d58 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016d3a:	e7ea      	b.n	8016d12 <tcpip_thread+0x22>
 8016d3c:	2400f284 	.word	0x2400f284
 8016d40:	2400f278 	.word	0x2400f278
 8016d44:	2400f27c 	.word	0x2400f27c
 8016d48:	2400f280 	.word	0x2400f280
 8016d4c:	0801c424 	.word	0x0801c424
 8016d50:	0801c49c 	.word	0x0801c49c
 8016d54:	0801c4bc 	.word	0x0801c4bc

08016d58 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	781b      	ldrb	r3, [r3, #0]
 8016d64:	2b02      	cmp	r3, #2
 8016d66:	d026      	beq.n	8016db6 <tcpip_thread_handle_msg+0x5e>
 8016d68:	2b02      	cmp	r3, #2
 8016d6a:	dc2b      	bgt.n	8016dc4 <tcpip_thread_handle_msg+0x6c>
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d002      	beq.n	8016d76 <tcpip_thread_handle_msg+0x1e>
 8016d70:	2b01      	cmp	r3, #1
 8016d72:	d015      	beq.n	8016da0 <tcpip_thread_handle_msg+0x48>
 8016d74:	e026      	b.n	8016dc4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	68db      	ldr	r3, [r3, #12]
 8016d7a:	687a      	ldr	r2, [r7, #4]
 8016d7c:	6850      	ldr	r0, [r2, #4]
 8016d7e:	687a      	ldr	r2, [r7, #4]
 8016d80:	6892      	ldr	r2, [r2, #8]
 8016d82:	4611      	mov	r1, r2
 8016d84:	4798      	blx	r3
 8016d86:	4603      	mov	r3, r0
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d004      	beq.n	8016d96 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	685b      	ldr	r3, [r3, #4]
 8016d90:	4618      	mov	r0, r3
 8016d92:	f7f9 fa95 	bl	80102c0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016d96:	6879      	ldr	r1, [r7, #4]
 8016d98:	2009      	movs	r0, #9
 8016d9a:	f7f8 fb9d 	bl	800f4d8 <memp_free>
      break;
 8016d9e:	e018      	b.n	8016dd2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	685b      	ldr	r3, [r3, #4]
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	6892      	ldr	r2, [r2, #8]
 8016da8:	4610      	mov	r0, r2
 8016daa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8016dac:	6879      	ldr	r1, [r7, #4]
 8016dae:	2008      	movs	r0, #8
 8016db0:	f7f8 fb92 	bl	800f4d8 <memp_free>
      break;
 8016db4:	e00d      	b.n	8016dd2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	685b      	ldr	r3, [r3, #4]
 8016dba:	687a      	ldr	r2, [r7, #4]
 8016dbc:	6892      	ldr	r2, [r2, #8]
 8016dbe:	4610      	mov	r0, r2
 8016dc0:	4798      	blx	r3
      break;
 8016dc2:	e006      	b.n	8016dd2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016dc4:	4b05      	ldr	r3, [pc, #20]	; (8016ddc <tcpip_thread_handle_msg+0x84>)
 8016dc6:	22cf      	movs	r2, #207	; 0xcf
 8016dc8:	4905      	ldr	r1, [pc, #20]	; (8016de0 <tcpip_thread_handle_msg+0x88>)
 8016dca:	4806      	ldr	r0, [pc, #24]	; (8016de4 <tcpip_thread_handle_msg+0x8c>)
 8016dcc:	f000 ffa2 	bl	8017d14 <iprintf>
      break;
 8016dd0:	bf00      	nop
  }
}
 8016dd2:	bf00      	nop
 8016dd4:	3708      	adds	r7, #8
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}
 8016dda:	bf00      	nop
 8016ddc:	0801c424 	.word	0x0801c424
 8016de0:	0801c49c 	.word	0x0801c49c
 8016de4:	0801c4bc 	.word	0x0801c4bc

08016de8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b086      	sub	sp, #24
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	60b9      	str	r1, [r7, #8]
 8016df2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016df4:	481a      	ldr	r0, [pc, #104]	; (8016e60 <tcpip_inpkt+0x78>)
 8016df6:	f7f9 fda6 	bl	8010946 <sys_mbox_valid>
 8016dfa:	4603      	mov	r3, r0
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d105      	bne.n	8016e0c <tcpip_inpkt+0x24>
 8016e00:	4b18      	ldr	r3, [pc, #96]	; (8016e64 <tcpip_inpkt+0x7c>)
 8016e02:	22fc      	movs	r2, #252	; 0xfc
 8016e04:	4918      	ldr	r1, [pc, #96]	; (8016e68 <tcpip_inpkt+0x80>)
 8016e06:	4819      	ldr	r0, [pc, #100]	; (8016e6c <tcpip_inpkt+0x84>)
 8016e08:	f000 ff84 	bl	8017d14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8016e0c:	2009      	movs	r0, #9
 8016e0e:	f7f8 faed 	bl	800f3ec <memp_malloc>
 8016e12:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d102      	bne.n	8016e20 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8016e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e1e:	e01a      	b.n	8016e56 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	2200      	movs	r2, #0
 8016e24:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8016e26:	697b      	ldr	r3, [r7, #20]
 8016e28:	68fa      	ldr	r2, [r7, #12]
 8016e2a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	68ba      	ldr	r2, [r7, #8]
 8016e30:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8016e32:	697b      	ldr	r3, [r7, #20]
 8016e34:	687a      	ldr	r2, [r7, #4]
 8016e36:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016e38:	6979      	ldr	r1, [r7, #20]
 8016e3a:	4809      	ldr	r0, [pc, #36]	; (8016e60 <tcpip_inpkt+0x78>)
 8016e3c:	f7f9 fd0e 	bl	801085c <sys_mbox_trypost>
 8016e40:	4603      	mov	r3, r0
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d006      	beq.n	8016e54 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016e46:	6979      	ldr	r1, [r7, #20]
 8016e48:	2009      	movs	r0, #9
 8016e4a:	f7f8 fb45 	bl	800f4d8 <memp_free>
    return ERR_MEM;
 8016e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e52:	e000      	b.n	8016e56 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8016e54:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3718      	adds	r7, #24
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	2400f280 	.word	0x2400f280
 8016e64:	0801c424 	.word	0x0801c424
 8016e68:	0801c4e4 	.word	0x0801c4e4
 8016e6c:	0801c4bc 	.word	0x0801c4bc

08016e70 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8016e70:	b580      	push	{r7, lr}
 8016e72:	b082      	sub	sp, #8
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
 8016e78:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e80:	f003 0318 	and.w	r3, r3, #24
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d006      	beq.n	8016e96 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8016e88:	4a08      	ldr	r2, [pc, #32]	; (8016eac <tcpip_input+0x3c>)
 8016e8a:	6839      	ldr	r1, [r7, #0]
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f7ff ffab 	bl	8016de8 <tcpip_inpkt>
 8016e92:	4603      	mov	r3, r0
 8016e94:	e005      	b.n	8016ea2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8016e96:	4a06      	ldr	r2, [pc, #24]	; (8016eb0 <tcpip_input+0x40>)
 8016e98:	6839      	ldr	r1, [r7, #0]
 8016e9a:	6878      	ldr	r0, [r7, #4]
 8016e9c:	f7ff ffa4 	bl	8016de8 <tcpip_inpkt>
 8016ea0:	4603      	mov	r3, r0
}
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3708      	adds	r7, #8
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	bf00      	nop
 8016eac:	0800d20d 	.word	0x0800d20d
 8016eb0:	0800d9fd 	.word	0x0800d9fd

08016eb4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016eb4:	b580      	push	{r7, lr}
 8016eb6:	b084      	sub	sp, #16
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	6078      	str	r0, [r7, #4]
 8016ebc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016ebe:	4819      	ldr	r0, [pc, #100]	; (8016f24 <tcpip_try_callback+0x70>)
 8016ec0:	f7f9 fd41 	bl	8010946 <sys_mbox_valid>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d106      	bne.n	8016ed8 <tcpip_try_callback+0x24>
 8016eca:	4b17      	ldr	r3, [pc, #92]	; (8016f28 <tcpip_try_callback+0x74>)
 8016ecc:	f240 125d 	movw	r2, #349	; 0x15d
 8016ed0:	4916      	ldr	r1, [pc, #88]	; (8016f2c <tcpip_try_callback+0x78>)
 8016ed2:	4817      	ldr	r0, [pc, #92]	; (8016f30 <tcpip_try_callback+0x7c>)
 8016ed4:	f000 ff1e 	bl	8017d14 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016ed8:	2008      	movs	r0, #8
 8016eda:	f7f8 fa87 	bl	800f3ec <memp_malloc>
 8016ede:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d102      	bne.n	8016eec <tcpip_try_callback+0x38>
    return ERR_MEM;
 8016ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016eea:	e017      	b.n	8016f1c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2201      	movs	r2, #1
 8016ef0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	683a      	ldr	r2, [r7, #0]
 8016efc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016efe:	68f9      	ldr	r1, [r7, #12]
 8016f00:	4808      	ldr	r0, [pc, #32]	; (8016f24 <tcpip_try_callback+0x70>)
 8016f02:	f7f9 fcab 	bl	801085c <sys_mbox_trypost>
 8016f06:	4603      	mov	r3, r0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d006      	beq.n	8016f1a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8016f0c:	68f9      	ldr	r1, [r7, #12]
 8016f0e:	2008      	movs	r0, #8
 8016f10:	f7f8 fae2 	bl	800f4d8 <memp_free>
    return ERR_MEM;
 8016f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f18:	e000      	b.n	8016f1c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8016f1a:	2300      	movs	r3, #0
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	3710      	adds	r7, #16
 8016f20:	46bd      	mov	sp, r7
 8016f22:	bd80      	pop	{r7, pc}
 8016f24:	2400f280 	.word	0x2400f280
 8016f28:	0801c424 	.word	0x0801c424
 8016f2c:	0801c4e4 	.word	0x0801c4e4
 8016f30:	0801c4bc 	.word	0x0801c4bc

08016f34 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b084      	sub	sp, #16
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	60f8      	str	r0, [r7, #12]
 8016f3c:	60b9      	str	r1, [r7, #8]
 8016f3e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8016f40:	4806      	ldr	r0, [pc, #24]	; (8016f5c <tcpip_send_msg_wait_sem+0x28>)
 8016f42:	f7f9 fdd9 	bl	8010af8 <sys_mutex_lock>
  fn(apimsg);
 8016f46:	68fb      	ldr	r3, [r7, #12]
 8016f48:	68b8      	ldr	r0, [r7, #8]
 8016f4a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8016f4c:	4803      	ldr	r0, [pc, #12]	; (8016f5c <tcpip_send_msg_wait_sem+0x28>)
 8016f4e:	f7f9 fde2 	bl	8010b16 <sys_mutex_unlock>
  return ERR_OK;
 8016f52:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	3710      	adds	r7, #16
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}
 8016f5c:	2400f284 	.word	0x2400f284

08016f60 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b084      	sub	sp, #16
 8016f64:	af02      	add	r7, sp, #8
 8016f66:	6078      	str	r0, [r7, #4]
 8016f68:	6039      	str	r1, [r7, #0]
  lwip_init();
 8016f6a:	f7f6 fc95 	bl	800d898 <lwip_init>

  tcpip_init_done = initfunc;
 8016f6e:	4a17      	ldr	r2, [pc, #92]	; (8016fcc <tcpip_init+0x6c>)
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8016f74:	4a16      	ldr	r2, [pc, #88]	; (8016fd0 <tcpip_init+0x70>)
 8016f76:	683b      	ldr	r3, [r7, #0]
 8016f78:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8016f7a:	2106      	movs	r1, #6
 8016f7c:	4815      	ldr	r0, [pc, #84]	; (8016fd4 <tcpip_init+0x74>)
 8016f7e:	f7f9 fc39 	bl	80107f4 <sys_mbox_new>
 8016f82:	4603      	mov	r3, r0
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	d006      	beq.n	8016f96 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8016f88:	4b13      	ldr	r3, [pc, #76]	; (8016fd8 <tcpip_init+0x78>)
 8016f8a:	f240 2261 	movw	r2, #609	; 0x261
 8016f8e:	4913      	ldr	r1, [pc, #76]	; (8016fdc <tcpip_init+0x7c>)
 8016f90:	4813      	ldr	r0, [pc, #76]	; (8016fe0 <tcpip_init+0x80>)
 8016f92:	f000 febf 	bl	8017d14 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8016f96:	4813      	ldr	r0, [pc, #76]	; (8016fe4 <tcpip_init+0x84>)
 8016f98:	f7f9 fd92 	bl	8010ac0 <sys_mutex_new>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d006      	beq.n	8016fb0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8016fa2:	4b0d      	ldr	r3, [pc, #52]	; (8016fd8 <tcpip_init+0x78>)
 8016fa4:	f240 2265 	movw	r2, #613	; 0x265
 8016fa8:	490f      	ldr	r1, [pc, #60]	; (8016fe8 <tcpip_init+0x88>)
 8016faa:	480d      	ldr	r0, [pc, #52]	; (8016fe0 <tcpip_init+0x80>)
 8016fac:	f000 feb2 	bl	8017d14 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	9300      	str	r3, [sp, #0]
 8016fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016fb8:	2200      	movs	r2, #0
 8016fba:	490c      	ldr	r1, [pc, #48]	; (8016fec <tcpip_init+0x8c>)
 8016fbc:	480c      	ldr	r0, [pc, #48]	; (8016ff0 <tcpip_init+0x90>)
 8016fbe:	f7f9 fdb7 	bl	8010b30 <sys_thread_new>
}
 8016fc2:	bf00      	nop
 8016fc4:	3708      	adds	r7, #8
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	2400f278 	.word	0x2400f278
 8016fd0:	2400f27c 	.word	0x2400f27c
 8016fd4:	2400f280 	.word	0x2400f280
 8016fd8:	0801c424 	.word	0x0801c424
 8016fdc:	0801c4f4 	.word	0x0801c4f4
 8016fe0:	0801c4bc 	.word	0x0801c4bc
 8016fe4:	2400f284 	.word	0x2400f284
 8016fe8:	0801c518 	.word	0x0801c518
 8016fec:	08016cf1 	.word	0x08016cf1
 8016ff0:	0801c53c 	.word	0x0801c53c

08016ff4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b082      	sub	sp, #8
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016ffc:	f7f9 fe26 	bl	8010c4c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017000:	4b0a      	ldr	r3, [pc, #40]	; (801702c <tcpip_tcp_timer+0x38>)
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d103      	bne.n	8017010 <tcpip_tcp_timer+0x1c>
 8017008:	4b09      	ldr	r3, [pc, #36]	; (8017030 <tcpip_tcp_timer+0x3c>)
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	2b00      	cmp	r3, #0
 801700e:	d005      	beq.n	801701c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017010:	2200      	movs	r2, #0
 8017012:	4908      	ldr	r1, [pc, #32]	; (8017034 <tcpip_tcp_timer+0x40>)
 8017014:	20fa      	movs	r0, #250	; 0xfa
 8017016:	f000 f8f3 	bl	8017200 <sys_timeout>
 801701a:	e003      	b.n	8017024 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801701c:	4b06      	ldr	r3, [pc, #24]	; (8017038 <tcpip_tcp_timer+0x44>)
 801701e:	2200      	movs	r2, #0
 8017020:	601a      	str	r2, [r3, #0]
  }
}
 8017022:	bf00      	nop
 8017024:	bf00      	nop
 8017026:	3708      	adds	r7, #8
 8017028:	46bd      	mov	sp, r7
 801702a:	bd80      	pop	{r7, pc}
 801702c:	2400f234 	.word	0x2400f234
 8017030:	2400f238 	.word	0x2400f238
 8017034:	08016ff5 	.word	0x08016ff5
 8017038:	2400f290 	.word	0x2400f290

0801703c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017040:	4b0a      	ldr	r3, [pc, #40]	; (801706c <tcp_timer_needed+0x30>)
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d10f      	bne.n	8017068 <tcp_timer_needed+0x2c>
 8017048:	4b09      	ldr	r3, [pc, #36]	; (8017070 <tcp_timer_needed+0x34>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d103      	bne.n	8017058 <tcp_timer_needed+0x1c>
 8017050:	4b08      	ldr	r3, [pc, #32]	; (8017074 <tcp_timer_needed+0x38>)
 8017052:	681b      	ldr	r3, [r3, #0]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d007      	beq.n	8017068 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017058:	4b04      	ldr	r3, [pc, #16]	; (801706c <tcp_timer_needed+0x30>)
 801705a:	2201      	movs	r2, #1
 801705c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801705e:	2200      	movs	r2, #0
 8017060:	4905      	ldr	r1, [pc, #20]	; (8017078 <tcp_timer_needed+0x3c>)
 8017062:	20fa      	movs	r0, #250	; 0xfa
 8017064:	f000 f8cc 	bl	8017200 <sys_timeout>
  }
}
 8017068:	bf00      	nop
 801706a:	bd80      	pop	{r7, pc}
 801706c:	2400f290 	.word	0x2400f290
 8017070:	2400f234 	.word	0x2400f234
 8017074:	2400f238 	.word	0x2400f238
 8017078:	08016ff5 	.word	0x08016ff5

0801707c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b086      	sub	sp, #24
 8017080:	af00      	add	r7, sp, #0
 8017082:	60f8      	str	r0, [r7, #12]
 8017084:	60b9      	str	r1, [r7, #8]
 8017086:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017088:	200a      	movs	r0, #10
 801708a:	f7f8 f9af 	bl	800f3ec <memp_malloc>
 801708e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017090:	693b      	ldr	r3, [r7, #16]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d109      	bne.n	80170aa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017096:	693b      	ldr	r3, [r7, #16]
 8017098:	2b00      	cmp	r3, #0
 801709a:	d151      	bne.n	8017140 <sys_timeout_abs+0xc4>
 801709c:	4b2a      	ldr	r3, [pc, #168]	; (8017148 <sys_timeout_abs+0xcc>)
 801709e:	22be      	movs	r2, #190	; 0xbe
 80170a0:	492a      	ldr	r1, [pc, #168]	; (801714c <sys_timeout_abs+0xd0>)
 80170a2:	482b      	ldr	r0, [pc, #172]	; (8017150 <sys_timeout_abs+0xd4>)
 80170a4:	f000 fe36 	bl	8017d14 <iprintf>
    return;
 80170a8:	e04a      	b.n	8017140 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80170aa:	693b      	ldr	r3, [r7, #16]
 80170ac:	2200      	movs	r2, #0
 80170ae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80170b0:	693b      	ldr	r3, [r7, #16]
 80170b2:	68ba      	ldr	r2, [r7, #8]
 80170b4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80170b6:	693b      	ldr	r3, [r7, #16]
 80170b8:	687a      	ldr	r2, [r7, #4]
 80170ba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80170bc:	693b      	ldr	r3, [r7, #16]
 80170be:	68fa      	ldr	r2, [r7, #12]
 80170c0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80170c2:	4b24      	ldr	r3, [pc, #144]	; (8017154 <sys_timeout_abs+0xd8>)
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d103      	bne.n	80170d2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80170ca:	4a22      	ldr	r2, [pc, #136]	; (8017154 <sys_timeout_abs+0xd8>)
 80170cc:	693b      	ldr	r3, [r7, #16]
 80170ce:	6013      	str	r3, [r2, #0]
    return;
 80170d0:	e037      	b.n	8017142 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80170d2:	693b      	ldr	r3, [r7, #16]
 80170d4:	685a      	ldr	r2, [r3, #4]
 80170d6:	4b1f      	ldr	r3, [pc, #124]	; (8017154 <sys_timeout_abs+0xd8>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	1ad3      	subs	r3, r2, r3
 80170de:	0fdb      	lsrs	r3, r3, #31
 80170e0:	f003 0301 	and.w	r3, r3, #1
 80170e4:	b2db      	uxtb	r3, r3
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d007      	beq.n	80170fa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80170ea:	4b1a      	ldr	r3, [pc, #104]	; (8017154 <sys_timeout_abs+0xd8>)
 80170ec:	681a      	ldr	r2, [r3, #0]
 80170ee:	693b      	ldr	r3, [r7, #16]
 80170f0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80170f2:	4a18      	ldr	r2, [pc, #96]	; (8017154 <sys_timeout_abs+0xd8>)
 80170f4:	693b      	ldr	r3, [r7, #16]
 80170f6:	6013      	str	r3, [r2, #0]
 80170f8:	e023      	b.n	8017142 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80170fa:	4b16      	ldr	r3, [pc, #88]	; (8017154 <sys_timeout_abs+0xd8>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	617b      	str	r3, [r7, #20]
 8017100:	e01a      	b.n	8017138 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017102:	697b      	ldr	r3, [r7, #20]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2b00      	cmp	r3, #0
 8017108:	d00b      	beq.n	8017122 <sys_timeout_abs+0xa6>
 801710a:	693b      	ldr	r3, [r7, #16]
 801710c:	685a      	ldr	r2, [r3, #4]
 801710e:	697b      	ldr	r3, [r7, #20]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	685b      	ldr	r3, [r3, #4]
 8017114:	1ad3      	subs	r3, r2, r3
 8017116:	0fdb      	lsrs	r3, r3, #31
 8017118:	f003 0301 	and.w	r3, r3, #1
 801711c:	b2db      	uxtb	r3, r3
 801711e:	2b00      	cmp	r3, #0
 8017120:	d007      	beq.n	8017132 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017122:	697b      	ldr	r3, [r7, #20]
 8017124:	681a      	ldr	r2, [r3, #0]
 8017126:	693b      	ldr	r3, [r7, #16]
 8017128:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	693a      	ldr	r2, [r7, #16]
 801712e:	601a      	str	r2, [r3, #0]
        break;
 8017130:	e007      	b.n	8017142 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017132:	697b      	ldr	r3, [r7, #20]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	617b      	str	r3, [r7, #20]
 8017138:	697b      	ldr	r3, [r7, #20]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d1e1      	bne.n	8017102 <sys_timeout_abs+0x86>
 801713e:	e000      	b.n	8017142 <sys_timeout_abs+0xc6>
    return;
 8017140:	bf00      	nop
      }
    }
  }
}
 8017142:	3718      	adds	r7, #24
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}
 8017148:	0801c54c 	.word	0x0801c54c
 801714c:	0801c5c8 	.word	0x0801c5c8
 8017150:	0801c608 	.word	0x0801c608
 8017154:	2400f288 	.word	0x2400f288

08017158 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b086      	sub	sp, #24
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	4798      	blx	r3

  now = sys_now();
 801716a:	f7ef fd4d 	bl	8006c08 <sys_now>
 801716e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017170:	697b      	ldr	r3, [r7, #20]
 8017172:	681a      	ldr	r2, [r3, #0]
 8017174:	4b0f      	ldr	r3, [pc, #60]	; (80171b4 <lwip_cyclic_timer+0x5c>)
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	4413      	add	r3, r2
 801717a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801717c:	68fa      	ldr	r2, [r7, #12]
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	1ad3      	subs	r3, r2, r3
 8017182:	0fdb      	lsrs	r3, r3, #31
 8017184:	f003 0301 	and.w	r3, r3, #1
 8017188:	b2db      	uxtb	r3, r3
 801718a:	2b00      	cmp	r3, #0
 801718c:	d009      	beq.n	80171a2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	681a      	ldr	r2, [r3, #0]
 8017192:	693b      	ldr	r3, [r7, #16]
 8017194:	4413      	add	r3, r2
 8017196:	687a      	ldr	r2, [r7, #4]
 8017198:	4907      	ldr	r1, [pc, #28]	; (80171b8 <lwip_cyclic_timer+0x60>)
 801719a:	4618      	mov	r0, r3
 801719c:	f7ff ff6e 	bl	801707c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80171a0:	e004      	b.n	80171ac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80171a2:	687a      	ldr	r2, [r7, #4]
 80171a4:	4904      	ldr	r1, [pc, #16]	; (80171b8 <lwip_cyclic_timer+0x60>)
 80171a6:	68f8      	ldr	r0, [r7, #12]
 80171a8:	f7ff ff68 	bl	801707c <sys_timeout_abs>
}
 80171ac:	bf00      	nop
 80171ae:	3718      	adds	r7, #24
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	2400f28c 	.word	0x2400f28c
 80171b8:	08017159 	.word	0x08017159

080171bc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b082      	sub	sp, #8
 80171c0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80171c2:	2301      	movs	r3, #1
 80171c4:	607b      	str	r3, [r7, #4]
 80171c6:	e00e      	b.n	80171e6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80171c8:	4a0b      	ldr	r2, [pc, #44]	; (80171f8 <sys_timeouts_init+0x3c>)
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	00db      	lsls	r3, r3, #3
 80171d4:	4a08      	ldr	r2, [pc, #32]	; (80171f8 <sys_timeouts_init+0x3c>)
 80171d6:	4413      	add	r3, r2
 80171d8:	461a      	mov	r2, r3
 80171da:	4908      	ldr	r1, [pc, #32]	; (80171fc <sys_timeouts_init+0x40>)
 80171dc:	f000 f810 	bl	8017200 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	3301      	adds	r3, #1
 80171e4:	607b      	str	r3, [r7, #4]
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	2b02      	cmp	r3, #2
 80171ea:	d9ed      	bls.n	80171c8 <sys_timeouts_init+0xc>
  }
}
 80171ec:	bf00      	nop
 80171ee:	bf00      	nop
 80171f0:	3708      	adds	r7, #8
 80171f2:	46bd      	mov	sp, r7
 80171f4:	bd80      	pop	{r7, pc}
 80171f6:	bf00      	nop
 80171f8:	0801cb5c 	.word	0x0801cb5c
 80171fc:	08017159 	.word	0x08017159

08017200 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b086      	sub	sp, #24
 8017204:	af00      	add	r7, sp, #0
 8017206:	60f8      	str	r0, [r7, #12]
 8017208:	60b9      	str	r1, [r7, #8]
 801720a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017212:	d306      	bcc.n	8017222 <sys_timeout+0x22>
 8017214:	4b0a      	ldr	r3, [pc, #40]	; (8017240 <sys_timeout+0x40>)
 8017216:	f240 1229 	movw	r2, #297	; 0x129
 801721a:	490a      	ldr	r1, [pc, #40]	; (8017244 <sys_timeout+0x44>)
 801721c:	480a      	ldr	r0, [pc, #40]	; (8017248 <sys_timeout+0x48>)
 801721e:	f000 fd79 	bl	8017d14 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017222:	f7ef fcf1 	bl	8006c08 <sys_now>
 8017226:	4602      	mov	r2, r0
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	4413      	add	r3, r2
 801722c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801722e:	687a      	ldr	r2, [r7, #4]
 8017230:	68b9      	ldr	r1, [r7, #8]
 8017232:	6978      	ldr	r0, [r7, #20]
 8017234:	f7ff ff22 	bl	801707c <sys_timeout_abs>
#endif
}
 8017238:	bf00      	nop
 801723a:	3718      	adds	r7, #24
 801723c:	46bd      	mov	sp, r7
 801723e:	bd80      	pop	{r7, pc}
 8017240:	0801c54c 	.word	0x0801c54c
 8017244:	0801c630 	.word	0x0801c630
 8017248:	0801c608 	.word	0x0801c608

0801724c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b084      	sub	sp, #16
 8017250:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017252:	f7ef fcd9 	bl	8006c08 <sys_now>
 8017256:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017258:	4b17      	ldr	r3, [pc, #92]	; (80172b8 <sys_check_timeouts+0x6c>)
 801725a:	681b      	ldr	r3, [r3, #0]
 801725c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d022      	beq.n	80172aa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017264:	68bb      	ldr	r3, [r7, #8]
 8017266:	685b      	ldr	r3, [r3, #4]
 8017268:	68fa      	ldr	r2, [r7, #12]
 801726a:	1ad3      	subs	r3, r2, r3
 801726c:	0fdb      	lsrs	r3, r3, #31
 801726e:	f003 0301 	and.w	r3, r3, #1
 8017272:	b2db      	uxtb	r3, r3
 8017274:	2b00      	cmp	r3, #0
 8017276:	d11a      	bne.n	80172ae <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017278:	68bb      	ldr	r3, [r7, #8]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	4a0e      	ldr	r2, [pc, #56]	; (80172b8 <sys_check_timeouts+0x6c>)
 801727e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017280:	68bb      	ldr	r3, [r7, #8]
 8017282:	689b      	ldr	r3, [r3, #8]
 8017284:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017286:	68bb      	ldr	r3, [r7, #8]
 8017288:	68db      	ldr	r3, [r3, #12]
 801728a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	4a0a      	ldr	r2, [pc, #40]	; (80172bc <sys_check_timeouts+0x70>)
 8017292:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017294:	68b9      	ldr	r1, [r7, #8]
 8017296:	200a      	movs	r0, #10
 8017298:	f7f8 f91e 	bl	800f4d8 <memp_free>
    if (handler != NULL) {
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d0da      	beq.n	8017258 <sys_check_timeouts+0xc>
      handler(arg);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	6838      	ldr	r0, [r7, #0]
 80172a6:	4798      	blx	r3
  do {
 80172a8:	e7d6      	b.n	8017258 <sys_check_timeouts+0xc>
      return;
 80172aa:	bf00      	nop
 80172ac:	e000      	b.n	80172b0 <sys_check_timeouts+0x64>
      return;
 80172ae:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80172b0:	3710      	adds	r7, #16
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}
 80172b6:	bf00      	nop
 80172b8:	2400f288 	.word	0x2400f288
 80172bc:	2400f28c 	.word	0x2400f28c

080172c0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b082      	sub	sp, #8
 80172c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80172c6:	4b16      	ldr	r3, [pc, #88]	; (8017320 <sys_timeouts_sleeptime+0x60>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d102      	bne.n	80172d4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80172ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80172d2:	e020      	b.n	8017316 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80172d4:	f7ef fc98 	bl	8006c08 <sys_now>
 80172d8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80172da:	4b11      	ldr	r3, [pc, #68]	; (8017320 <sys_timeouts_sleeptime+0x60>)
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	685a      	ldr	r2, [r3, #4]
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	1ad3      	subs	r3, r2, r3
 80172e4:	0fdb      	lsrs	r3, r3, #31
 80172e6:	f003 0301 	and.w	r3, r3, #1
 80172ea:	b2db      	uxtb	r3, r3
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d001      	beq.n	80172f4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80172f0:	2300      	movs	r3, #0
 80172f2:	e010      	b.n	8017316 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80172f4:	4b0a      	ldr	r3, [pc, #40]	; (8017320 <sys_timeouts_sleeptime+0x60>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	685a      	ldr	r2, [r3, #4]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	1ad3      	subs	r3, r2, r3
 80172fe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017300:	683b      	ldr	r3, [r7, #0]
 8017302:	2b00      	cmp	r3, #0
 8017304:	da06      	bge.n	8017314 <sys_timeouts_sleeptime+0x54>
 8017306:	4b07      	ldr	r3, [pc, #28]	; (8017324 <sys_timeouts_sleeptime+0x64>)
 8017308:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801730c:	4906      	ldr	r1, [pc, #24]	; (8017328 <sys_timeouts_sleeptime+0x68>)
 801730e:	4807      	ldr	r0, [pc, #28]	; (801732c <sys_timeouts_sleeptime+0x6c>)
 8017310:	f000 fd00 	bl	8017d14 <iprintf>
    return ret;
 8017314:	683b      	ldr	r3, [r7, #0]
  }
}
 8017316:	4618      	mov	r0, r3
 8017318:	3708      	adds	r7, #8
 801731a:	46bd      	mov	sp, r7
 801731c:	bd80      	pop	{r7, pc}
 801731e:	bf00      	nop
 8017320:	2400f288 	.word	0x2400f288
 8017324:	0801c54c 	.word	0x0801c54c
 8017328:	0801c668 	.word	0x0801c668
 801732c:	0801c608 	.word	0x0801c608

08017330 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017334:	f000 fd06 	bl	8017d44 <rand>
 8017338:	4603      	mov	r3, r0
 801733a:	b29b      	uxth	r3, r3
 801733c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017340:	b29b      	uxth	r3, r3
 8017342:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017346:	b29a      	uxth	r2, r3
 8017348:	4b01      	ldr	r3, [pc, #4]	; (8017350 <udp_init+0x20>)
 801734a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801734c:	bf00      	nop
 801734e:	bd80      	pop	{r7, pc}
 8017350:	24000030 	.word	0x24000030

08017354 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017354:	b480      	push	{r7}
 8017356:	b083      	sub	sp, #12
 8017358:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801735a:	2300      	movs	r3, #0
 801735c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801735e:	4b17      	ldr	r3, [pc, #92]	; (80173bc <udp_new_port+0x68>)
 8017360:	881b      	ldrh	r3, [r3, #0]
 8017362:	1c5a      	adds	r2, r3, #1
 8017364:	b291      	uxth	r1, r2
 8017366:	4a15      	ldr	r2, [pc, #84]	; (80173bc <udp_new_port+0x68>)
 8017368:	8011      	strh	r1, [r2, #0]
 801736a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801736e:	4293      	cmp	r3, r2
 8017370:	d103      	bne.n	801737a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017372:	4b12      	ldr	r3, [pc, #72]	; (80173bc <udp_new_port+0x68>)
 8017374:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017378:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801737a:	4b11      	ldr	r3, [pc, #68]	; (80173c0 <udp_new_port+0x6c>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	603b      	str	r3, [r7, #0]
 8017380:	e011      	b.n	80173a6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017382:	683b      	ldr	r3, [r7, #0]
 8017384:	8a5a      	ldrh	r2, [r3, #18]
 8017386:	4b0d      	ldr	r3, [pc, #52]	; (80173bc <udp_new_port+0x68>)
 8017388:	881b      	ldrh	r3, [r3, #0]
 801738a:	429a      	cmp	r2, r3
 801738c:	d108      	bne.n	80173a0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801738e:	88fb      	ldrh	r3, [r7, #6]
 8017390:	3301      	adds	r3, #1
 8017392:	80fb      	strh	r3, [r7, #6]
 8017394:	88fb      	ldrh	r3, [r7, #6]
 8017396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801739a:	d3e0      	bcc.n	801735e <udp_new_port+0xa>
        return 0;
 801739c:	2300      	movs	r3, #0
 801739e:	e007      	b.n	80173b0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80173a0:	683b      	ldr	r3, [r7, #0]
 80173a2:	68db      	ldr	r3, [r3, #12]
 80173a4:	603b      	str	r3, [r7, #0]
 80173a6:	683b      	ldr	r3, [r7, #0]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d1ea      	bne.n	8017382 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80173ac:	4b03      	ldr	r3, [pc, #12]	; (80173bc <udp_new_port+0x68>)
 80173ae:	881b      	ldrh	r3, [r3, #0]
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	370c      	adds	r7, #12
 80173b4:	46bd      	mov	sp, r7
 80173b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ba:	4770      	bx	lr
 80173bc:	24000030 	.word	0x24000030
 80173c0:	2400f294 	.word	0x2400f294

080173c4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b084      	sub	sp, #16
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	60f8      	str	r0, [r7, #12]
 80173cc:	60b9      	str	r1, [r7, #8]
 80173ce:	4613      	mov	r3, r2
 80173d0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d105      	bne.n	80173e4 <udp_input_local_match+0x20>
 80173d8:	4b27      	ldr	r3, [pc, #156]	; (8017478 <udp_input_local_match+0xb4>)
 80173da:	2287      	movs	r2, #135	; 0x87
 80173dc:	4927      	ldr	r1, [pc, #156]	; (801747c <udp_input_local_match+0xb8>)
 80173de:	4828      	ldr	r0, [pc, #160]	; (8017480 <udp_input_local_match+0xbc>)
 80173e0:	f000 fc98 	bl	8017d14 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80173e4:	68bb      	ldr	r3, [r7, #8]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d105      	bne.n	80173f6 <udp_input_local_match+0x32>
 80173ea:	4b23      	ldr	r3, [pc, #140]	; (8017478 <udp_input_local_match+0xb4>)
 80173ec:	2288      	movs	r2, #136	; 0x88
 80173ee:	4925      	ldr	r1, [pc, #148]	; (8017484 <udp_input_local_match+0xc0>)
 80173f0:	4823      	ldr	r0, [pc, #140]	; (8017480 <udp_input_local_match+0xbc>)
 80173f2:	f000 fc8f 	bl	8017d14 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	7a1b      	ldrb	r3, [r3, #8]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d00b      	beq.n	8017416 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80173fe:	68fb      	ldr	r3, [r7, #12]
 8017400:	7a1a      	ldrb	r2, [r3, #8]
 8017402:	4b21      	ldr	r3, [pc, #132]	; (8017488 <udp_input_local_match+0xc4>)
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801740a:	3301      	adds	r3, #1
 801740c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801740e:	429a      	cmp	r2, r3
 8017410:	d001      	beq.n	8017416 <udp_input_local_match+0x52>
    return 0;
 8017412:	2300      	movs	r3, #0
 8017414:	e02b      	b.n	801746e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017416:	79fb      	ldrb	r3, [r7, #7]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d018      	beq.n	801744e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d013      	beq.n	801744a <udp_input_local_match+0x86>
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	2b00      	cmp	r3, #0
 8017428:	d00f      	beq.n	801744a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801742a:	4b17      	ldr	r3, [pc, #92]	; (8017488 <udp_input_local_match+0xc4>)
 801742c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801742e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017432:	d00a      	beq.n	801744a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	4b13      	ldr	r3, [pc, #76]	; (8017488 <udp_input_local_match+0xc4>)
 801743a:	695b      	ldr	r3, [r3, #20]
 801743c:	405a      	eors	r2, r3
 801743e:	68bb      	ldr	r3, [r7, #8]
 8017440:	3308      	adds	r3, #8
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017446:	2b00      	cmp	r3, #0
 8017448:	d110      	bne.n	801746c <udp_input_local_match+0xa8>
          return 1;
 801744a:	2301      	movs	r3, #1
 801744c:	e00f      	b.n	801746e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d009      	beq.n	8017468 <udp_input_local_match+0xa4>
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	681b      	ldr	r3, [r3, #0]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d005      	beq.n	8017468 <udp_input_local_match+0xa4>
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	681a      	ldr	r2, [r3, #0]
 8017460:	4b09      	ldr	r3, [pc, #36]	; (8017488 <udp_input_local_match+0xc4>)
 8017462:	695b      	ldr	r3, [r3, #20]
 8017464:	429a      	cmp	r2, r3
 8017466:	d101      	bne.n	801746c <udp_input_local_match+0xa8>
        return 1;
 8017468:	2301      	movs	r3, #1
 801746a:	e000      	b.n	801746e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801746c:	2300      	movs	r3, #0
}
 801746e:	4618      	mov	r0, r3
 8017470:	3710      	adds	r7, #16
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	bf00      	nop
 8017478:	0801c67c 	.word	0x0801c67c
 801747c:	0801c6f4 	.word	0x0801c6f4
 8017480:	0801c718 	.word	0x0801c718
 8017484:	0801c740 	.word	0x0801c740
 8017488:	24008758 	.word	0x24008758

0801748c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801748c:	b590      	push	{r4, r7, lr}
 801748e:	b08d      	sub	sp, #52	; 0x34
 8017490:	af02      	add	r7, sp, #8
 8017492:	6078      	str	r0, [r7, #4]
 8017494:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017496:	2300      	movs	r3, #0
 8017498:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	2b00      	cmp	r3, #0
 801749e:	d105      	bne.n	80174ac <udp_input+0x20>
 80174a0:	4b7c      	ldr	r3, [pc, #496]	; (8017694 <udp_input+0x208>)
 80174a2:	22cf      	movs	r2, #207	; 0xcf
 80174a4:	497c      	ldr	r1, [pc, #496]	; (8017698 <udp_input+0x20c>)
 80174a6:	487d      	ldr	r0, [pc, #500]	; (801769c <udp_input+0x210>)
 80174a8:	f000 fc34 	bl	8017d14 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80174ac:	683b      	ldr	r3, [r7, #0]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d105      	bne.n	80174be <udp_input+0x32>
 80174b2:	4b78      	ldr	r3, [pc, #480]	; (8017694 <udp_input+0x208>)
 80174b4:	22d0      	movs	r2, #208	; 0xd0
 80174b6:	497a      	ldr	r1, [pc, #488]	; (80176a0 <udp_input+0x214>)
 80174b8:	4878      	ldr	r0, [pc, #480]	; (801769c <udp_input+0x210>)
 80174ba:	f000 fc2b 	bl	8017d14 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	895b      	ldrh	r3, [r3, #10]
 80174c2:	2b07      	cmp	r3, #7
 80174c4:	d803      	bhi.n	80174ce <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80174c6:	6878      	ldr	r0, [r7, #4]
 80174c8:	f7f8 fefa 	bl	80102c0 <pbuf_free>
    goto end;
 80174cc:	e0de      	b.n	801768c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	685b      	ldr	r3, [r3, #4]
 80174d2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80174d4:	4b73      	ldr	r3, [pc, #460]	; (80176a4 <udp_input+0x218>)
 80174d6:	695b      	ldr	r3, [r3, #20]
 80174d8:	4a72      	ldr	r2, [pc, #456]	; (80176a4 <udp_input+0x218>)
 80174da:	6812      	ldr	r2, [r2, #0]
 80174dc:	4611      	mov	r1, r2
 80174de:	4618      	mov	r0, r3
 80174e0:	f7f6 fc88 	bl	800ddf4 <ip4_addr_isbroadcast_u32>
 80174e4:	4603      	mov	r3, r0
 80174e6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	881b      	ldrh	r3, [r3, #0]
 80174ec:	b29b      	uxth	r3, r3
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7f4 ff12 	bl	800c318 <lwip_htons>
 80174f4:	4603      	mov	r3, r0
 80174f6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80174f8:	697b      	ldr	r3, [r7, #20]
 80174fa:	885b      	ldrh	r3, [r3, #2]
 80174fc:	b29b      	uxth	r3, r3
 80174fe:	4618      	mov	r0, r3
 8017500:	f7f4 ff0a 	bl	800c318 <lwip_htons>
 8017504:	4603      	mov	r3, r0
 8017506:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017508:	2300      	movs	r3, #0
 801750a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801750c:	2300      	movs	r3, #0
 801750e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017510:	2300      	movs	r3, #0
 8017512:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017514:	4b64      	ldr	r3, [pc, #400]	; (80176a8 <udp_input+0x21c>)
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	627b      	str	r3, [r7, #36]	; 0x24
 801751a:	e054      	b.n	80175c6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801751e:	8a5b      	ldrh	r3, [r3, #18]
 8017520:	89fa      	ldrh	r2, [r7, #14]
 8017522:	429a      	cmp	r2, r3
 8017524:	d14a      	bne.n	80175bc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017526:	7cfb      	ldrb	r3, [r7, #19]
 8017528:	461a      	mov	r2, r3
 801752a:	6839      	ldr	r1, [r7, #0]
 801752c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801752e:	f7ff ff49 	bl	80173c4 <udp_input_local_match>
 8017532:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017534:	2b00      	cmp	r3, #0
 8017536:	d041      	beq.n	80175bc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753a:	7c1b      	ldrb	r3, [r3, #16]
 801753c:	f003 0304 	and.w	r3, r3, #4
 8017540:	2b00      	cmp	r3, #0
 8017542:	d11d      	bne.n	8017580 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017544:	69fb      	ldr	r3, [r7, #28]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d102      	bne.n	8017550 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801754c:	61fb      	str	r3, [r7, #28]
 801754e:	e017      	b.n	8017580 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017550:	7cfb      	ldrb	r3, [r7, #19]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d014      	beq.n	8017580 <udp_input+0xf4>
 8017556:	4b53      	ldr	r3, [pc, #332]	; (80176a4 <udp_input+0x218>)
 8017558:	695b      	ldr	r3, [r3, #20]
 801755a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801755e:	d10f      	bne.n	8017580 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017560:	69fb      	ldr	r3, [r7, #28]
 8017562:	681a      	ldr	r2, [r3, #0]
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	3304      	adds	r3, #4
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	429a      	cmp	r2, r3
 801756c:	d008      	beq.n	8017580 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801756e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	3304      	adds	r3, #4
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	429a      	cmp	r2, r3
 801757a:	d101      	bne.n	8017580 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801757e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017582:	8a9b      	ldrh	r3, [r3, #20]
 8017584:	8a3a      	ldrh	r2, [r7, #16]
 8017586:	429a      	cmp	r2, r3
 8017588:	d118      	bne.n	80175bc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801758c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801758e:	2b00      	cmp	r3, #0
 8017590:	d005      	beq.n	801759e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017594:	685a      	ldr	r2, [r3, #4]
 8017596:	4b43      	ldr	r3, [pc, #268]	; (80176a4 <udp_input+0x218>)
 8017598:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801759a:	429a      	cmp	r2, r3
 801759c:	d10e      	bne.n	80175bc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801759e:	6a3b      	ldr	r3, [r7, #32]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d014      	beq.n	80175ce <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80175a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175a6:	68da      	ldr	r2, [r3, #12]
 80175a8:	6a3b      	ldr	r3, [r7, #32]
 80175aa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80175ac:	4b3e      	ldr	r3, [pc, #248]	; (80176a8 <udp_input+0x21c>)
 80175ae:	681a      	ldr	r2, [r3, #0]
 80175b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80175b4:	4a3c      	ldr	r2, [pc, #240]	; (80176a8 <udp_input+0x21c>)
 80175b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175b8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80175ba:	e008      	b.n	80175ce <udp_input+0x142>
      }
    }

    prev = pcb;
 80175bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175be:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80175c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c2:	68db      	ldr	r3, [r3, #12]
 80175c4:	627b      	str	r3, [r7, #36]	; 0x24
 80175c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d1a7      	bne.n	801751c <udp_input+0x90>
 80175cc:	e000      	b.n	80175d0 <udp_input+0x144>
        break;
 80175ce:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80175d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d101      	bne.n	80175da <udp_input+0x14e>
    pcb = uncon_pcb;
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80175da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d002      	beq.n	80175e6 <udp_input+0x15a>
    for_us = 1;
 80175e0:	2301      	movs	r3, #1
 80175e2:	76fb      	strb	r3, [r7, #27]
 80175e4:	e00a      	b.n	80175fc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	3304      	adds	r3, #4
 80175ea:	681a      	ldr	r2, [r3, #0]
 80175ec:	4b2d      	ldr	r3, [pc, #180]	; (80176a4 <udp_input+0x218>)
 80175ee:	695b      	ldr	r3, [r3, #20]
 80175f0:	429a      	cmp	r2, r3
 80175f2:	bf0c      	ite	eq
 80175f4:	2301      	moveq	r3, #1
 80175f6:	2300      	movne	r3, #0
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80175fc:	7efb      	ldrb	r3, [r7, #27]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d041      	beq.n	8017686 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017602:	2108      	movs	r1, #8
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f7f8 fdd5 	bl	80101b4 <pbuf_remove_header>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d00a      	beq.n	8017626 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017610:	4b20      	ldr	r3, [pc, #128]	; (8017694 <udp_input+0x208>)
 8017612:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017616:	4925      	ldr	r1, [pc, #148]	; (80176ac <udp_input+0x220>)
 8017618:	4820      	ldr	r0, [pc, #128]	; (801769c <udp_input+0x210>)
 801761a:	f000 fb7b 	bl	8017d14 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801761e:	6878      	ldr	r0, [r7, #4]
 8017620:	f7f8 fe4e 	bl	80102c0 <pbuf_free>
      goto end;
 8017624:	e032      	b.n	801768c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017628:	2b00      	cmp	r3, #0
 801762a:	d012      	beq.n	8017652 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801762e:	699b      	ldr	r3, [r3, #24]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d00a      	beq.n	801764a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017636:	699c      	ldr	r4, [r3, #24]
 8017638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801763a:	69d8      	ldr	r0, [r3, #28]
 801763c:	8a3b      	ldrh	r3, [r7, #16]
 801763e:	9300      	str	r3, [sp, #0]
 8017640:	4b1b      	ldr	r3, [pc, #108]	; (80176b0 <udp_input+0x224>)
 8017642:	687a      	ldr	r2, [r7, #4]
 8017644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017646:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017648:	e021      	b.n	801768e <udp_input+0x202>
        pbuf_free(p);
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f7f8 fe38 	bl	80102c0 <pbuf_free>
        goto end;
 8017650:	e01c      	b.n	801768c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017652:	7cfb      	ldrb	r3, [r7, #19]
 8017654:	2b00      	cmp	r3, #0
 8017656:	d112      	bne.n	801767e <udp_input+0x1f2>
 8017658:	4b12      	ldr	r3, [pc, #72]	; (80176a4 <udp_input+0x218>)
 801765a:	695b      	ldr	r3, [r3, #20]
 801765c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017660:	2be0      	cmp	r3, #224	; 0xe0
 8017662:	d00c      	beq.n	801767e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017664:	4b0f      	ldr	r3, [pc, #60]	; (80176a4 <udp_input+0x218>)
 8017666:	899b      	ldrh	r3, [r3, #12]
 8017668:	3308      	adds	r3, #8
 801766a:	b29b      	uxth	r3, r3
 801766c:	b21b      	sxth	r3, r3
 801766e:	4619      	mov	r1, r3
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f7f8 fe12 	bl	801029a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017676:	2103      	movs	r1, #3
 8017678:	6878      	ldr	r0, [r7, #4]
 801767a:	f7f5 ffbd 	bl	800d5f8 <icmp_dest_unreach>
      pbuf_free(p);
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	f7f8 fe1e 	bl	80102c0 <pbuf_free>
  return;
 8017684:	e003      	b.n	801768e <udp_input+0x202>
    pbuf_free(p);
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f7f8 fe1a 	bl	80102c0 <pbuf_free>
  return;
 801768c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801768e:	372c      	adds	r7, #44	; 0x2c
 8017690:	46bd      	mov	sp, r7
 8017692:	bd90      	pop	{r4, r7, pc}
 8017694:	0801c67c 	.word	0x0801c67c
 8017698:	0801c768 	.word	0x0801c768
 801769c:	0801c718 	.word	0x0801c718
 80176a0:	0801c780 	.word	0x0801c780
 80176a4:	24008758 	.word	0x24008758
 80176a8:	2400f294 	.word	0x2400f294
 80176ac:	0801c79c 	.word	0x0801c79c
 80176b0:	24008768 	.word	0x24008768

080176b4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b086      	sub	sp, #24
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	60f8      	str	r0, [r7, #12]
 80176bc:	60b9      	str	r1, [r7, #8]
 80176be:	4613      	mov	r3, r2
 80176c0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d101      	bne.n	80176cc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80176c8:	4b39      	ldr	r3, [pc, #228]	; (80177b0 <udp_bind+0xfc>)
 80176ca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80176cc:	68fb      	ldr	r3, [r7, #12]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d109      	bne.n	80176e6 <udp_bind+0x32>
 80176d2:	4b38      	ldr	r3, [pc, #224]	; (80177b4 <udp_bind+0x100>)
 80176d4:	f240 32b7 	movw	r2, #951	; 0x3b7
 80176d8:	4937      	ldr	r1, [pc, #220]	; (80177b8 <udp_bind+0x104>)
 80176da:	4838      	ldr	r0, [pc, #224]	; (80177bc <udp_bind+0x108>)
 80176dc:	f000 fb1a 	bl	8017d14 <iprintf>
 80176e0:	f06f 030f 	mvn.w	r3, #15
 80176e4:	e060      	b.n	80177a8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80176e6:	2300      	movs	r3, #0
 80176e8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80176ea:	4b35      	ldr	r3, [pc, #212]	; (80177c0 <udp_bind+0x10c>)
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	617b      	str	r3, [r7, #20]
 80176f0:	e009      	b.n	8017706 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80176f2:	68fa      	ldr	r2, [r7, #12]
 80176f4:	697b      	ldr	r3, [r7, #20]
 80176f6:	429a      	cmp	r2, r3
 80176f8:	d102      	bne.n	8017700 <udp_bind+0x4c>
      rebind = 1;
 80176fa:	2301      	movs	r3, #1
 80176fc:	74fb      	strb	r3, [r7, #19]
      break;
 80176fe:	e005      	b.n	801770c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017700:	697b      	ldr	r3, [r7, #20]
 8017702:	68db      	ldr	r3, [r3, #12]
 8017704:	617b      	str	r3, [r7, #20]
 8017706:	697b      	ldr	r3, [r7, #20]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d1f2      	bne.n	80176f2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801770c:	88fb      	ldrh	r3, [r7, #6]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d109      	bne.n	8017726 <udp_bind+0x72>
    port = udp_new_port();
 8017712:	f7ff fe1f 	bl	8017354 <udp_new_port>
 8017716:	4603      	mov	r3, r0
 8017718:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801771a:	88fb      	ldrh	r3, [r7, #6]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d12c      	bne.n	801777a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017720:	f06f 0307 	mvn.w	r3, #7
 8017724:	e040      	b.n	80177a8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017726:	4b26      	ldr	r3, [pc, #152]	; (80177c0 <udp_bind+0x10c>)
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	617b      	str	r3, [r7, #20]
 801772c:	e022      	b.n	8017774 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801772e:	68fa      	ldr	r2, [r7, #12]
 8017730:	697b      	ldr	r3, [r7, #20]
 8017732:	429a      	cmp	r2, r3
 8017734:	d01b      	beq.n	801776e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017736:	697b      	ldr	r3, [r7, #20]
 8017738:	8a5b      	ldrh	r3, [r3, #18]
 801773a:	88fa      	ldrh	r2, [r7, #6]
 801773c:	429a      	cmp	r2, r3
 801773e:	d116      	bne.n	801776e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	681a      	ldr	r2, [r3, #0]
 8017744:	68bb      	ldr	r3, [r7, #8]
 8017746:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017748:	429a      	cmp	r2, r3
 801774a:	d00d      	beq.n	8017768 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801774c:	68bb      	ldr	r3, [r7, #8]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00a      	beq.n	8017768 <udp_bind+0xb4>
 8017752:	68bb      	ldr	r3, [r7, #8]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d006      	beq.n	8017768 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801775a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801775c:	2b00      	cmp	r3, #0
 801775e:	d003      	beq.n	8017768 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8017760:	697b      	ldr	r3, [r7, #20]
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d102      	bne.n	801776e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8017768:	f06f 0307 	mvn.w	r3, #7
 801776c:	e01c      	b.n	80177a8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	68db      	ldr	r3, [r3, #12]
 8017772:	617b      	str	r3, [r7, #20]
 8017774:	697b      	ldr	r3, [r7, #20]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d1d9      	bne.n	801772e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d002      	beq.n	8017786 <udp_bind+0xd2>
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	e000      	b.n	8017788 <udp_bind+0xd4>
 8017786:	2300      	movs	r3, #0
 8017788:	68fa      	ldr	r2, [r7, #12]
 801778a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	88fa      	ldrh	r2, [r7, #6]
 8017790:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8017792:	7cfb      	ldrb	r3, [r7, #19]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d106      	bne.n	80177a6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8017798:	4b09      	ldr	r3, [pc, #36]	; (80177c0 <udp_bind+0x10c>)
 801779a:	681a      	ldr	r2, [r3, #0]
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80177a0:	4a07      	ldr	r2, [pc, #28]	; (80177c0 <udp_bind+0x10c>)
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80177a6:	2300      	movs	r3, #0
}
 80177a8:	4618      	mov	r0, r3
 80177aa:	3718      	adds	r7, #24
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	0801ca58 	.word	0x0801ca58
 80177b4:	0801c67c 	.word	0x0801c67c
 80177b8:	0801c98c 	.word	0x0801c98c
 80177bc:	0801c718 	.word	0x0801c718
 80177c0:	2400f294 	.word	0x2400f294

080177c4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b084      	sub	sp, #16
 80177c8:	af00      	add	r7, sp, #0
 80177ca:	60f8      	str	r0, [r7, #12]
 80177cc:	60b9      	str	r1, [r7, #8]
 80177ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	d107      	bne.n	80177e6 <udp_recv+0x22>
 80177d6:	4b08      	ldr	r3, [pc, #32]	; (80177f8 <udp_recv+0x34>)
 80177d8:	f240 428a 	movw	r2, #1162	; 0x48a
 80177dc:	4907      	ldr	r1, [pc, #28]	; (80177fc <udp_recv+0x38>)
 80177de:	4808      	ldr	r0, [pc, #32]	; (8017800 <udp_recv+0x3c>)
 80177e0:	f000 fa98 	bl	8017d14 <iprintf>
 80177e4:	e005      	b.n	80177f2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	68ba      	ldr	r2, [r7, #8]
 80177ea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	687a      	ldr	r2, [r7, #4]
 80177f0:	61da      	str	r2, [r3, #28]
}
 80177f2:	3710      	adds	r7, #16
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	0801c67c 	.word	0x0801c67c
 80177fc:	0801c9f8 	.word	0x0801c9f8
 8017800:	0801c718 	.word	0x0801c718

08017804 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b084      	sub	sp, #16
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d107      	bne.n	8017822 <udp_remove+0x1e>
 8017812:	4b19      	ldr	r3, [pc, #100]	; (8017878 <udp_remove+0x74>)
 8017814:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017818:	4918      	ldr	r1, [pc, #96]	; (801787c <udp_remove+0x78>)
 801781a:	4819      	ldr	r0, [pc, #100]	; (8017880 <udp_remove+0x7c>)
 801781c:	f000 fa7a 	bl	8017d14 <iprintf>
 8017820:	e026      	b.n	8017870 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017822:	4b18      	ldr	r3, [pc, #96]	; (8017884 <udp_remove+0x80>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	687a      	ldr	r2, [r7, #4]
 8017828:	429a      	cmp	r2, r3
 801782a:	d105      	bne.n	8017838 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801782c:	4b15      	ldr	r3, [pc, #84]	; (8017884 <udp_remove+0x80>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	68db      	ldr	r3, [r3, #12]
 8017832:	4a14      	ldr	r2, [pc, #80]	; (8017884 <udp_remove+0x80>)
 8017834:	6013      	str	r3, [r2, #0]
 8017836:	e017      	b.n	8017868 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017838:	4b12      	ldr	r3, [pc, #72]	; (8017884 <udp_remove+0x80>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	60fb      	str	r3, [r7, #12]
 801783e:	e010      	b.n	8017862 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	68db      	ldr	r3, [r3, #12]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d009      	beq.n	801785c <udp_remove+0x58>
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	68db      	ldr	r3, [r3, #12]
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	429a      	cmp	r2, r3
 8017850:	d104      	bne.n	801785c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	68da      	ldr	r2, [r3, #12]
 8017856:	68fb      	ldr	r3, [r7, #12]
 8017858:	60da      	str	r2, [r3, #12]
        break;
 801785a:	e005      	b.n	8017868 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	68db      	ldr	r3, [r3, #12]
 8017860:	60fb      	str	r3, [r7, #12]
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1eb      	bne.n	8017840 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017868:	6879      	ldr	r1, [r7, #4]
 801786a:	2000      	movs	r0, #0
 801786c:	f7f7 fe34 	bl	800f4d8 <memp_free>
}
 8017870:	3710      	adds	r7, #16
 8017872:	46bd      	mov	sp, r7
 8017874:	bd80      	pop	{r7, pc}
 8017876:	bf00      	nop
 8017878:	0801c67c 	.word	0x0801c67c
 801787c:	0801ca10 	.word	0x0801ca10
 8017880:	0801c718 	.word	0x0801c718
 8017884:	2400f294 	.word	0x2400f294

08017888 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017888:	b580      	push	{r7, lr}
 801788a:	b082      	sub	sp, #8
 801788c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801788e:	2000      	movs	r0, #0
 8017890:	f7f7 fdac 	bl	800f3ec <memp_malloc>
 8017894:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d007      	beq.n	80178ac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801789c:	2220      	movs	r2, #32
 801789e:	2100      	movs	r1, #0
 80178a0:	6878      	ldr	r0, [r7, #4]
 80178a2:	f000 f99a 	bl	8017bda <memset>
    pcb->ttl = UDP_TTL;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	22ff      	movs	r2, #255	; 0xff
 80178aa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80178ac:	687b      	ldr	r3, [r7, #4]
}
 80178ae:	4618      	mov	r0, r3
 80178b0:	3708      	adds	r7, #8
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}

080178b6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80178b6:	b580      	push	{r7, lr}
 80178b8:	b084      	sub	sp, #16
 80178ba:	af00      	add	r7, sp, #0
 80178bc:	4603      	mov	r3, r0
 80178be:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80178c0:	f7ff ffe2 	bl	8017888 <udp_new>
 80178c4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80178c6:	68fb      	ldr	r3, [r7, #12]
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3710      	adds	r7, #16
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}

080178d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80178d0:	b480      	push	{r7}
 80178d2:	b085      	sub	sp, #20
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	6078      	str	r0, [r7, #4]
 80178d8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d01e      	beq.n	801791e <udp_netif_ip_addr_changed+0x4e>
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d01a      	beq.n	801791e <udp_netif_ip_addr_changed+0x4e>
 80178e8:	683b      	ldr	r3, [r7, #0]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d017      	beq.n	801791e <udp_netif_ip_addr_changed+0x4e>
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d013      	beq.n	801791e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80178f6:	4b0d      	ldr	r3, [pc, #52]	; (801792c <udp_netif_ip_addr_changed+0x5c>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	60fb      	str	r3, [r7, #12]
 80178fc:	e00c      	b.n	8017918 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	681a      	ldr	r2, [r3, #0]
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	429a      	cmp	r2, r3
 8017908:	d103      	bne.n	8017912 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801790a:	683b      	ldr	r3, [r7, #0]
 801790c:	681a      	ldr	r2, [r3, #0]
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	68db      	ldr	r3, [r3, #12]
 8017916:	60fb      	str	r3, [r7, #12]
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	2b00      	cmp	r3, #0
 801791c:	d1ef      	bne.n	80178fe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801791e:	bf00      	nop
 8017920:	3714      	adds	r7, #20
 8017922:	46bd      	mov	sp, r7
 8017924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017928:	4770      	bx	lr
 801792a:	bf00      	nop
 801792c:	2400f294 	.word	0x2400f294

08017930 <std>:
 8017930:	2300      	movs	r3, #0
 8017932:	b510      	push	{r4, lr}
 8017934:	4604      	mov	r4, r0
 8017936:	e9c0 3300 	strd	r3, r3, [r0]
 801793a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801793e:	6083      	str	r3, [r0, #8]
 8017940:	8181      	strh	r1, [r0, #12]
 8017942:	6643      	str	r3, [r0, #100]	; 0x64
 8017944:	81c2      	strh	r2, [r0, #14]
 8017946:	6183      	str	r3, [r0, #24]
 8017948:	4619      	mov	r1, r3
 801794a:	2208      	movs	r2, #8
 801794c:	305c      	adds	r0, #92	; 0x5c
 801794e:	f000 f944 	bl	8017bda <memset>
 8017952:	4b05      	ldr	r3, [pc, #20]	; (8017968 <std+0x38>)
 8017954:	6263      	str	r3, [r4, #36]	; 0x24
 8017956:	4b05      	ldr	r3, [pc, #20]	; (801796c <std+0x3c>)
 8017958:	62a3      	str	r3, [r4, #40]	; 0x28
 801795a:	4b05      	ldr	r3, [pc, #20]	; (8017970 <std+0x40>)
 801795c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801795e:	4b05      	ldr	r3, [pc, #20]	; (8017974 <std+0x44>)
 8017960:	6224      	str	r4, [r4, #32]
 8017962:	6323      	str	r3, [r4, #48]	; 0x30
 8017964:	bd10      	pop	{r4, pc}
 8017966:	bf00      	nop
 8017968:	08017ef5 	.word	0x08017ef5
 801796c:	08017f17 	.word	0x08017f17
 8017970:	08017f4f 	.word	0x08017f4f
 8017974:	08017f73 	.word	0x08017f73

08017978 <_cleanup_r>:
 8017978:	4901      	ldr	r1, [pc, #4]	; (8017980 <_cleanup_r+0x8>)
 801797a:	f000 b8af 	b.w	8017adc <_fwalk_reent>
 801797e:	bf00      	nop
 8017980:	0801812d 	.word	0x0801812d

08017984 <__sfmoreglue>:
 8017984:	b570      	push	{r4, r5, r6, lr}
 8017986:	2268      	movs	r2, #104	; 0x68
 8017988:	1e4d      	subs	r5, r1, #1
 801798a:	4355      	muls	r5, r2
 801798c:	460e      	mov	r6, r1
 801798e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017992:	f000 f94b 	bl	8017c2c <_malloc_r>
 8017996:	4604      	mov	r4, r0
 8017998:	b140      	cbz	r0, 80179ac <__sfmoreglue+0x28>
 801799a:	2100      	movs	r1, #0
 801799c:	e9c0 1600 	strd	r1, r6, [r0]
 80179a0:	300c      	adds	r0, #12
 80179a2:	60a0      	str	r0, [r4, #8]
 80179a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80179a8:	f000 f917 	bl	8017bda <memset>
 80179ac:	4620      	mov	r0, r4
 80179ae:	bd70      	pop	{r4, r5, r6, pc}

080179b0 <__sfp_lock_acquire>:
 80179b0:	4801      	ldr	r0, [pc, #4]	; (80179b8 <__sfp_lock_acquire+0x8>)
 80179b2:	f000 b8d8 	b.w	8017b66 <__retarget_lock_acquire_recursive>
 80179b6:	bf00      	nop
 80179b8:	2400f299 	.word	0x2400f299

080179bc <__sfp_lock_release>:
 80179bc:	4801      	ldr	r0, [pc, #4]	; (80179c4 <__sfp_lock_release+0x8>)
 80179be:	f000 b8d3 	b.w	8017b68 <__retarget_lock_release_recursive>
 80179c2:	bf00      	nop
 80179c4:	2400f299 	.word	0x2400f299

080179c8 <__sinit_lock_acquire>:
 80179c8:	4801      	ldr	r0, [pc, #4]	; (80179d0 <__sinit_lock_acquire+0x8>)
 80179ca:	f000 b8cc 	b.w	8017b66 <__retarget_lock_acquire_recursive>
 80179ce:	bf00      	nop
 80179d0:	2400f29a 	.word	0x2400f29a

080179d4 <__sinit_lock_release>:
 80179d4:	4801      	ldr	r0, [pc, #4]	; (80179dc <__sinit_lock_release+0x8>)
 80179d6:	f000 b8c7 	b.w	8017b68 <__retarget_lock_release_recursive>
 80179da:	bf00      	nop
 80179dc:	2400f29a 	.word	0x2400f29a

080179e0 <__sinit>:
 80179e0:	b510      	push	{r4, lr}
 80179e2:	4604      	mov	r4, r0
 80179e4:	f7ff fff0 	bl	80179c8 <__sinit_lock_acquire>
 80179e8:	69a3      	ldr	r3, [r4, #24]
 80179ea:	b11b      	cbz	r3, 80179f4 <__sinit+0x14>
 80179ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80179f0:	f7ff bff0 	b.w	80179d4 <__sinit_lock_release>
 80179f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80179f8:	6523      	str	r3, [r4, #80]	; 0x50
 80179fa:	4b13      	ldr	r3, [pc, #76]	; (8017a48 <__sinit+0x68>)
 80179fc:	4a13      	ldr	r2, [pc, #76]	; (8017a4c <__sinit+0x6c>)
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8017a02:	42a3      	cmp	r3, r4
 8017a04:	bf04      	itt	eq
 8017a06:	2301      	moveq	r3, #1
 8017a08:	61a3      	streq	r3, [r4, #24]
 8017a0a:	4620      	mov	r0, r4
 8017a0c:	f000 f820 	bl	8017a50 <__sfp>
 8017a10:	6060      	str	r0, [r4, #4]
 8017a12:	4620      	mov	r0, r4
 8017a14:	f000 f81c 	bl	8017a50 <__sfp>
 8017a18:	60a0      	str	r0, [r4, #8]
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	f000 f818 	bl	8017a50 <__sfp>
 8017a20:	2200      	movs	r2, #0
 8017a22:	60e0      	str	r0, [r4, #12]
 8017a24:	2104      	movs	r1, #4
 8017a26:	6860      	ldr	r0, [r4, #4]
 8017a28:	f7ff ff82 	bl	8017930 <std>
 8017a2c:	68a0      	ldr	r0, [r4, #8]
 8017a2e:	2201      	movs	r2, #1
 8017a30:	2109      	movs	r1, #9
 8017a32:	f7ff ff7d 	bl	8017930 <std>
 8017a36:	68e0      	ldr	r0, [r4, #12]
 8017a38:	2202      	movs	r2, #2
 8017a3a:	2112      	movs	r1, #18
 8017a3c:	f7ff ff78 	bl	8017930 <std>
 8017a40:	2301      	movs	r3, #1
 8017a42:	61a3      	str	r3, [r4, #24]
 8017a44:	e7d2      	b.n	80179ec <__sinit+0xc>
 8017a46:	bf00      	nop
 8017a48:	0801cbd4 	.word	0x0801cbd4
 8017a4c:	08017979 	.word	0x08017979

08017a50 <__sfp>:
 8017a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a52:	4607      	mov	r7, r0
 8017a54:	f7ff ffac 	bl	80179b0 <__sfp_lock_acquire>
 8017a58:	4b1e      	ldr	r3, [pc, #120]	; (8017ad4 <__sfp+0x84>)
 8017a5a:	681e      	ldr	r6, [r3, #0]
 8017a5c:	69b3      	ldr	r3, [r6, #24]
 8017a5e:	b913      	cbnz	r3, 8017a66 <__sfp+0x16>
 8017a60:	4630      	mov	r0, r6
 8017a62:	f7ff ffbd 	bl	80179e0 <__sinit>
 8017a66:	3648      	adds	r6, #72	; 0x48
 8017a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017a6c:	3b01      	subs	r3, #1
 8017a6e:	d503      	bpl.n	8017a78 <__sfp+0x28>
 8017a70:	6833      	ldr	r3, [r6, #0]
 8017a72:	b30b      	cbz	r3, 8017ab8 <__sfp+0x68>
 8017a74:	6836      	ldr	r6, [r6, #0]
 8017a76:	e7f7      	b.n	8017a68 <__sfp+0x18>
 8017a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017a7c:	b9d5      	cbnz	r5, 8017ab4 <__sfp+0x64>
 8017a7e:	4b16      	ldr	r3, [pc, #88]	; (8017ad8 <__sfp+0x88>)
 8017a80:	60e3      	str	r3, [r4, #12]
 8017a82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017a86:	6665      	str	r5, [r4, #100]	; 0x64
 8017a88:	f000 f86c 	bl	8017b64 <__retarget_lock_init_recursive>
 8017a8c:	f7ff ff96 	bl	80179bc <__sfp_lock_release>
 8017a90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017a94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017a98:	6025      	str	r5, [r4, #0]
 8017a9a:	61a5      	str	r5, [r4, #24]
 8017a9c:	2208      	movs	r2, #8
 8017a9e:	4629      	mov	r1, r5
 8017aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017aa4:	f000 f899 	bl	8017bda <memset>
 8017aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017ab0:	4620      	mov	r0, r4
 8017ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ab4:	3468      	adds	r4, #104	; 0x68
 8017ab6:	e7d9      	b.n	8017a6c <__sfp+0x1c>
 8017ab8:	2104      	movs	r1, #4
 8017aba:	4638      	mov	r0, r7
 8017abc:	f7ff ff62 	bl	8017984 <__sfmoreglue>
 8017ac0:	4604      	mov	r4, r0
 8017ac2:	6030      	str	r0, [r6, #0]
 8017ac4:	2800      	cmp	r0, #0
 8017ac6:	d1d5      	bne.n	8017a74 <__sfp+0x24>
 8017ac8:	f7ff ff78 	bl	80179bc <__sfp_lock_release>
 8017acc:	230c      	movs	r3, #12
 8017ace:	603b      	str	r3, [r7, #0]
 8017ad0:	e7ee      	b.n	8017ab0 <__sfp+0x60>
 8017ad2:	bf00      	nop
 8017ad4:	0801cbd4 	.word	0x0801cbd4
 8017ad8:	ffff0001 	.word	0xffff0001

08017adc <_fwalk_reent>:
 8017adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017ae0:	4606      	mov	r6, r0
 8017ae2:	4688      	mov	r8, r1
 8017ae4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017ae8:	2700      	movs	r7, #0
 8017aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017aee:	f1b9 0901 	subs.w	r9, r9, #1
 8017af2:	d505      	bpl.n	8017b00 <_fwalk_reent+0x24>
 8017af4:	6824      	ldr	r4, [r4, #0]
 8017af6:	2c00      	cmp	r4, #0
 8017af8:	d1f7      	bne.n	8017aea <_fwalk_reent+0xe>
 8017afa:	4638      	mov	r0, r7
 8017afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b00:	89ab      	ldrh	r3, [r5, #12]
 8017b02:	2b01      	cmp	r3, #1
 8017b04:	d907      	bls.n	8017b16 <_fwalk_reent+0x3a>
 8017b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b0a:	3301      	adds	r3, #1
 8017b0c:	d003      	beq.n	8017b16 <_fwalk_reent+0x3a>
 8017b0e:	4629      	mov	r1, r5
 8017b10:	4630      	mov	r0, r6
 8017b12:	47c0      	blx	r8
 8017b14:	4307      	orrs	r7, r0
 8017b16:	3568      	adds	r5, #104	; 0x68
 8017b18:	e7e9      	b.n	8017aee <_fwalk_reent+0x12>
	...

08017b1c <__libc_init_array>:
 8017b1c:	b570      	push	{r4, r5, r6, lr}
 8017b1e:	4d0d      	ldr	r5, [pc, #52]	; (8017b54 <__libc_init_array+0x38>)
 8017b20:	4c0d      	ldr	r4, [pc, #52]	; (8017b58 <__libc_init_array+0x3c>)
 8017b22:	1b64      	subs	r4, r4, r5
 8017b24:	10a4      	asrs	r4, r4, #2
 8017b26:	2600      	movs	r6, #0
 8017b28:	42a6      	cmp	r6, r4
 8017b2a:	d109      	bne.n	8017b40 <__libc_init_array+0x24>
 8017b2c:	4d0b      	ldr	r5, [pc, #44]	; (8017b5c <__libc_init_array+0x40>)
 8017b2e:	4c0c      	ldr	r4, [pc, #48]	; (8017b60 <__libc_init_array+0x44>)
 8017b30:	f001 f9e2 	bl	8018ef8 <_init>
 8017b34:	1b64      	subs	r4, r4, r5
 8017b36:	10a4      	asrs	r4, r4, #2
 8017b38:	2600      	movs	r6, #0
 8017b3a:	42a6      	cmp	r6, r4
 8017b3c:	d105      	bne.n	8017b4a <__libc_init_array+0x2e>
 8017b3e:	bd70      	pop	{r4, r5, r6, pc}
 8017b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b44:	4798      	blx	r3
 8017b46:	3601      	adds	r6, #1
 8017b48:	e7ee      	b.n	8017b28 <__libc_init_array+0xc>
 8017b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017b4e:	4798      	blx	r3
 8017b50:	3601      	adds	r6, #1
 8017b52:	e7f2      	b.n	8017b3a <__libc_init_array+0x1e>
 8017b54:	0801ccbc 	.word	0x0801ccbc
 8017b58:	0801ccbc 	.word	0x0801ccbc
 8017b5c:	0801ccbc 	.word	0x0801ccbc
 8017b60:	0801ccc0 	.word	0x0801ccc0

08017b64 <__retarget_lock_init_recursive>:
 8017b64:	4770      	bx	lr

08017b66 <__retarget_lock_acquire_recursive>:
 8017b66:	4770      	bx	lr

08017b68 <__retarget_lock_release_recursive>:
 8017b68:	4770      	bx	lr

08017b6a <memcmp>:
 8017b6a:	b510      	push	{r4, lr}
 8017b6c:	3901      	subs	r1, #1
 8017b6e:	4402      	add	r2, r0
 8017b70:	4290      	cmp	r0, r2
 8017b72:	d101      	bne.n	8017b78 <memcmp+0xe>
 8017b74:	2000      	movs	r0, #0
 8017b76:	e005      	b.n	8017b84 <memcmp+0x1a>
 8017b78:	7803      	ldrb	r3, [r0, #0]
 8017b7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017b7e:	42a3      	cmp	r3, r4
 8017b80:	d001      	beq.n	8017b86 <memcmp+0x1c>
 8017b82:	1b18      	subs	r0, r3, r4
 8017b84:	bd10      	pop	{r4, pc}
 8017b86:	3001      	adds	r0, #1
 8017b88:	e7f2      	b.n	8017b70 <memcmp+0x6>

08017b8a <memcpy>:
 8017b8a:	440a      	add	r2, r1
 8017b8c:	4291      	cmp	r1, r2
 8017b8e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017b92:	d100      	bne.n	8017b96 <memcpy+0xc>
 8017b94:	4770      	bx	lr
 8017b96:	b510      	push	{r4, lr}
 8017b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ba0:	4291      	cmp	r1, r2
 8017ba2:	d1f9      	bne.n	8017b98 <memcpy+0xe>
 8017ba4:	bd10      	pop	{r4, pc}

08017ba6 <memmove>:
 8017ba6:	4288      	cmp	r0, r1
 8017ba8:	b510      	push	{r4, lr}
 8017baa:	eb01 0402 	add.w	r4, r1, r2
 8017bae:	d902      	bls.n	8017bb6 <memmove+0x10>
 8017bb0:	4284      	cmp	r4, r0
 8017bb2:	4623      	mov	r3, r4
 8017bb4:	d807      	bhi.n	8017bc6 <memmove+0x20>
 8017bb6:	1e43      	subs	r3, r0, #1
 8017bb8:	42a1      	cmp	r1, r4
 8017bba:	d008      	beq.n	8017bce <memmove+0x28>
 8017bbc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017bc0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017bc4:	e7f8      	b.n	8017bb8 <memmove+0x12>
 8017bc6:	4402      	add	r2, r0
 8017bc8:	4601      	mov	r1, r0
 8017bca:	428a      	cmp	r2, r1
 8017bcc:	d100      	bne.n	8017bd0 <memmove+0x2a>
 8017bce:	bd10      	pop	{r4, pc}
 8017bd0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017bd4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017bd8:	e7f7      	b.n	8017bca <memmove+0x24>

08017bda <memset>:
 8017bda:	4402      	add	r2, r0
 8017bdc:	4603      	mov	r3, r0
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d100      	bne.n	8017be4 <memset+0xa>
 8017be2:	4770      	bx	lr
 8017be4:	f803 1b01 	strb.w	r1, [r3], #1
 8017be8:	e7f9      	b.n	8017bde <memset+0x4>
	...

08017bec <sbrk_aligned>:
 8017bec:	b570      	push	{r4, r5, r6, lr}
 8017bee:	4e0e      	ldr	r6, [pc, #56]	; (8017c28 <sbrk_aligned+0x3c>)
 8017bf0:	460c      	mov	r4, r1
 8017bf2:	6831      	ldr	r1, [r6, #0]
 8017bf4:	4605      	mov	r5, r0
 8017bf6:	b911      	cbnz	r1, 8017bfe <sbrk_aligned+0x12>
 8017bf8:	f000 f94c 	bl	8017e94 <_sbrk_r>
 8017bfc:	6030      	str	r0, [r6, #0]
 8017bfe:	4621      	mov	r1, r4
 8017c00:	4628      	mov	r0, r5
 8017c02:	f000 f947 	bl	8017e94 <_sbrk_r>
 8017c06:	1c43      	adds	r3, r0, #1
 8017c08:	d00a      	beq.n	8017c20 <sbrk_aligned+0x34>
 8017c0a:	1cc4      	adds	r4, r0, #3
 8017c0c:	f024 0403 	bic.w	r4, r4, #3
 8017c10:	42a0      	cmp	r0, r4
 8017c12:	d007      	beq.n	8017c24 <sbrk_aligned+0x38>
 8017c14:	1a21      	subs	r1, r4, r0
 8017c16:	4628      	mov	r0, r5
 8017c18:	f000 f93c 	bl	8017e94 <_sbrk_r>
 8017c1c:	3001      	adds	r0, #1
 8017c1e:	d101      	bne.n	8017c24 <sbrk_aligned+0x38>
 8017c20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017c24:	4620      	mov	r0, r4
 8017c26:	bd70      	pop	{r4, r5, r6, pc}
 8017c28:	2400f2a0 	.word	0x2400f2a0

08017c2c <_malloc_r>:
 8017c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c30:	1ccd      	adds	r5, r1, #3
 8017c32:	f025 0503 	bic.w	r5, r5, #3
 8017c36:	3508      	adds	r5, #8
 8017c38:	2d0c      	cmp	r5, #12
 8017c3a:	bf38      	it	cc
 8017c3c:	250c      	movcc	r5, #12
 8017c3e:	2d00      	cmp	r5, #0
 8017c40:	4607      	mov	r7, r0
 8017c42:	db01      	blt.n	8017c48 <_malloc_r+0x1c>
 8017c44:	42a9      	cmp	r1, r5
 8017c46:	d905      	bls.n	8017c54 <_malloc_r+0x28>
 8017c48:	230c      	movs	r3, #12
 8017c4a:	603b      	str	r3, [r7, #0]
 8017c4c:	2600      	movs	r6, #0
 8017c4e:	4630      	mov	r0, r6
 8017c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c54:	4e2e      	ldr	r6, [pc, #184]	; (8017d10 <_malloc_r+0xe4>)
 8017c56:	f000 fad1 	bl	80181fc <__malloc_lock>
 8017c5a:	6833      	ldr	r3, [r6, #0]
 8017c5c:	461c      	mov	r4, r3
 8017c5e:	bb34      	cbnz	r4, 8017cae <_malloc_r+0x82>
 8017c60:	4629      	mov	r1, r5
 8017c62:	4638      	mov	r0, r7
 8017c64:	f7ff ffc2 	bl	8017bec <sbrk_aligned>
 8017c68:	1c43      	adds	r3, r0, #1
 8017c6a:	4604      	mov	r4, r0
 8017c6c:	d14d      	bne.n	8017d0a <_malloc_r+0xde>
 8017c6e:	6834      	ldr	r4, [r6, #0]
 8017c70:	4626      	mov	r6, r4
 8017c72:	2e00      	cmp	r6, #0
 8017c74:	d140      	bne.n	8017cf8 <_malloc_r+0xcc>
 8017c76:	6823      	ldr	r3, [r4, #0]
 8017c78:	4631      	mov	r1, r6
 8017c7a:	4638      	mov	r0, r7
 8017c7c:	eb04 0803 	add.w	r8, r4, r3
 8017c80:	f000 f908 	bl	8017e94 <_sbrk_r>
 8017c84:	4580      	cmp	r8, r0
 8017c86:	d13a      	bne.n	8017cfe <_malloc_r+0xd2>
 8017c88:	6821      	ldr	r1, [r4, #0]
 8017c8a:	3503      	adds	r5, #3
 8017c8c:	1a6d      	subs	r5, r5, r1
 8017c8e:	f025 0503 	bic.w	r5, r5, #3
 8017c92:	3508      	adds	r5, #8
 8017c94:	2d0c      	cmp	r5, #12
 8017c96:	bf38      	it	cc
 8017c98:	250c      	movcc	r5, #12
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	4638      	mov	r0, r7
 8017c9e:	f7ff ffa5 	bl	8017bec <sbrk_aligned>
 8017ca2:	3001      	adds	r0, #1
 8017ca4:	d02b      	beq.n	8017cfe <_malloc_r+0xd2>
 8017ca6:	6823      	ldr	r3, [r4, #0]
 8017ca8:	442b      	add	r3, r5
 8017caa:	6023      	str	r3, [r4, #0]
 8017cac:	e00e      	b.n	8017ccc <_malloc_r+0xa0>
 8017cae:	6822      	ldr	r2, [r4, #0]
 8017cb0:	1b52      	subs	r2, r2, r5
 8017cb2:	d41e      	bmi.n	8017cf2 <_malloc_r+0xc6>
 8017cb4:	2a0b      	cmp	r2, #11
 8017cb6:	d916      	bls.n	8017ce6 <_malloc_r+0xba>
 8017cb8:	1961      	adds	r1, r4, r5
 8017cba:	42a3      	cmp	r3, r4
 8017cbc:	6025      	str	r5, [r4, #0]
 8017cbe:	bf18      	it	ne
 8017cc0:	6059      	strne	r1, [r3, #4]
 8017cc2:	6863      	ldr	r3, [r4, #4]
 8017cc4:	bf08      	it	eq
 8017cc6:	6031      	streq	r1, [r6, #0]
 8017cc8:	5162      	str	r2, [r4, r5]
 8017cca:	604b      	str	r3, [r1, #4]
 8017ccc:	4638      	mov	r0, r7
 8017cce:	f104 060b 	add.w	r6, r4, #11
 8017cd2:	f000 fa99 	bl	8018208 <__malloc_unlock>
 8017cd6:	f026 0607 	bic.w	r6, r6, #7
 8017cda:	1d23      	adds	r3, r4, #4
 8017cdc:	1af2      	subs	r2, r6, r3
 8017cde:	d0b6      	beq.n	8017c4e <_malloc_r+0x22>
 8017ce0:	1b9b      	subs	r3, r3, r6
 8017ce2:	50a3      	str	r3, [r4, r2]
 8017ce4:	e7b3      	b.n	8017c4e <_malloc_r+0x22>
 8017ce6:	6862      	ldr	r2, [r4, #4]
 8017ce8:	42a3      	cmp	r3, r4
 8017cea:	bf0c      	ite	eq
 8017cec:	6032      	streq	r2, [r6, #0]
 8017cee:	605a      	strne	r2, [r3, #4]
 8017cf0:	e7ec      	b.n	8017ccc <_malloc_r+0xa0>
 8017cf2:	4623      	mov	r3, r4
 8017cf4:	6864      	ldr	r4, [r4, #4]
 8017cf6:	e7b2      	b.n	8017c5e <_malloc_r+0x32>
 8017cf8:	4634      	mov	r4, r6
 8017cfa:	6876      	ldr	r6, [r6, #4]
 8017cfc:	e7b9      	b.n	8017c72 <_malloc_r+0x46>
 8017cfe:	230c      	movs	r3, #12
 8017d00:	603b      	str	r3, [r7, #0]
 8017d02:	4638      	mov	r0, r7
 8017d04:	f000 fa80 	bl	8018208 <__malloc_unlock>
 8017d08:	e7a1      	b.n	8017c4e <_malloc_r+0x22>
 8017d0a:	6025      	str	r5, [r4, #0]
 8017d0c:	e7de      	b.n	8017ccc <_malloc_r+0xa0>
 8017d0e:	bf00      	nop
 8017d10:	2400f29c 	.word	0x2400f29c

08017d14 <iprintf>:
 8017d14:	b40f      	push	{r0, r1, r2, r3}
 8017d16:	4b0a      	ldr	r3, [pc, #40]	; (8017d40 <iprintf+0x2c>)
 8017d18:	b513      	push	{r0, r1, r4, lr}
 8017d1a:	681c      	ldr	r4, [r3, #0]
 8017d1c:	b124      	cbz	r4, 8017d28 <iprintf+0x14>
 8017d1e:	69a3      	ldr	r3, [r4, #24]
 8017d20:	b913      	cbnz	r3, 8017d28 <iprintf+0x14>
 8017d22:	4620      	mov	r0, r4
 8017d24:	f7ff fe5c 	bl	80179e0 <__sinit>
 8017d28:	ab05      	add	r3, sp, #20
 8017d2a:	9a04      	ldr	r2, [sp, #16]
 8017d2c:	68a1      	ldr	r1, [r4, #8]
 8017d2e:	9301      	str	r3, [sp, #4]
 8017d30:	4620      	mov	r0, r4
 8017d32:	f000 fc41 	bl	80185b8 <_vfiprintf_r>
 8017d36:	b002      	add	sp, #8
 8017d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d3c:	b004      	add	sp, #16
 8017d3e:	4770      	bx	lr
 8017d40:	24000034 	.word	0x24000034

08017d44 <rand>:
 8017d44:	4b16      	ldr	r3, [pc, #88]	; (8017da0 <rand+0x5c>)
 8017d46:	b510      	push	{r4, lr}
 8017d48:	681c      	ldr	r4, [r3, #0]
 8017d4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017d4c:	b9b3      	cbnz	r3, 8017d7c <rand+0x38>
 8017d4e:	2018      	movs	r0, #24
 8017d50:	f000 fa4c 	bl	80181ec <malloc>
 8017d54:	63a0      	str	r0, [r4, #56]	; 0x38
 8017d56:	b928      	cbnz	r0, 8017d64 <rand+0x20>
 8017d58:	4602      	mov	r2, r0
 8017d5a:	4b12      	ldr	r3, [pc, #72]	; (8017da4 <rand+0x60>)
 8017d5c:	4812      	ldr	r0, [pc, #72]	; (8017da8 <rand+0x64>)
 8017d5e:	214e      	movs	r1, #78	; 0x4e
 8017d60:	f000 f930 	bl	8017fc4 <__assert_func>
 8017d64:	4a11      	ldr	r2, [pc, #68]	; (8017dac <rand+0x68>)
 8017d66:	4b12      	ldr	r3, [pc, #72]	; (8017db0 <rand+0x6c>)
 8017d68:	e9c0 2300 	strd	r2, r3, [r0]
 8017d6c:	4b11      	ldr	r3, [pc, #68]	; (8017db4 <rand+0x70>)
 8017d6e:	6083      	str	r3, [r0, #8]
 8017d70:	230b      	movs	r3, #11
 8017d72:	8183      	strh	r3, [r0, #12]
 8017d74:	2201      	movs	r2, #1
 8017d76:	2300      	movs	r3, #0
 8017d78:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017d7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017d7e:	4a0e      	ldr	r2, [pc, #56]	; (8017db8 <rand+0x74>)
 8017d80:	6920      	ldr	r0, [r4, #16]
 8017d82:	6963      	ldr	r3, [r4, #20]
 8017d84:	490d      	ldr	r1, [pc, #52]	; (8017dbc <rand+0x78>)
 8017d86:	4342      	muls	r2, r0
 8017d88:	fb01 2203 	mla	r2, r1, r3, r2
 8017d8c:	fba0 0101 	umull	r0, r1, r0, r1
 8017d90:	1c43      	adds	r3, r0, #1
 8017d92:	eb42 0001 	adc.w	r0, r2, r1
 8017d96:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017d9a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017d9e:	bd10      	pop	{r4, pc}
 8017da0:	24000034 	.word	0x24000034
 8017da4:	0801cbd8 	.word	0x0801cbd8
 8017da8:	0801cbef 	.word	0x0801cbef
 8017dac:	abcd330e 	.word	0xabcd330e
 8017db0:	e66d1234 	.word	0xe66d1234
 8017db4:	0005deec 	.word	0x0005deec
 8017db8:	5851f42d 	.word	0x5851f42d
 8017dbc:	4c957f2d 	.word	0x4c957f2d

08017dc0 <cleanup_glue>:
 8017dc0:	b538      	push	{r3, r4, r5, lr}
 8017dc2:	460c      	mov	r4, r1
 8017dc4:	6809      	ldr	r1, [r1, #0]
 8017dc6:	4605      	mov	r5, r0
 8017dc8:	b109      	cbz	r1, 8017dce <cleanup_glue+0xe>
 8017dca:	f7ff fff9 	bl	8017dc0 <cleanup_glue>
 8017dce:	4621      	mov	r1, r4
 8017dd0:	4628      	mov	r0, r5
 8017dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dd6:	f000 ba1d 	b.w	8018214 <_free_r>
	...

08017ddc <_reclaim_reent>:
 8017ddc:	4b2c      	ldr	r3, [pc, #176]	; (8017e90 <_reclaim_reent+0xb4>)
 8017dde:	681b      	ldr	r3, [r3, #0]
 8017de0:	4283      	cmp	r3, r0
 8017de2:	b570      	push	{r4, r5, r6, lr}
 8017de4:	4604      	mov	r4, r0
 8017de6:	d051      	beq.n	8017e8c <_reclaim_reent+0xb0>
 8017de8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017dea:	b143      	cbz	r3, 8017dfe <_reclaim_reent+0x22>
 8017dec:	68db      	ldr	r3, [r3, #12]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d14a      	bne.n	8017e88 <_reclaim_reent+0xac>
 8017df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017df4:	6819      	ldr	r1, [r3, #0]
 8017df6:	b111      	cbz	r1, 8017dfe <_reclaim_reent+0x22>
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f000 fa0b 	bl	8018214 <_free_r>
 8017dfe:	6961      	ldr	r1, [r4, #20]
 8017e00:	b111      	cbz	r1, 8017e08 <_reclaim_reent+0x2c>
 8017e02:	4620      	mov	r0, r4
 8017e04:	f000 fa06 	bl	8018214 <_free_r>
 8017e08:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017e0a:	b111      	cbz	r1, 8017e12 <_reclaim_reent+0x36>
 8017e0c:	4620      	mov	r0, r4
 8017e0e:	f000 fa01 	bl	8018214 <_free_r>
 8017e12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017e14:	b111      	cbz	r1, 8017e1c <_reclaim_reent+0x40>
 8017e16:	4620      	mov	r0, r4
 8017e18:	f000 f9fc 	bl	8018214 <_free_r>
 8017e1c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017e1e:	b111      	cbz	r1, 8017e26 <_reclaim_reent+0x4a>
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 f9f7 	bl	8018214 <_free_r>
 8017e26:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017e28:	b111      	cbz	r1, 8017e30 <_reclaim_reent+0x54>
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	f000 f9f2 	bl	8018214 <_free_r>
 8017e30:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017e32:	b111      	cbz	r1, 8017e3a <_reclaim_reent+0x5e>
 8017e34:	4620      	mov	r0, r4
 8017e36:	f000 f9ed 	bl	8018214 <_free_r>
 8017e3a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017e3c:	b111      	cbz	r1, 8017e44 <_reclaim_reent+0x68>
 8017e3e:	4620      	mov	r0, r4
 8017e40:	f000 f9e8 	bl	8018214 <_free_r>
 8017e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e46:	b111      	cbz	r1, 8017e4e <_reclaim_reent+0x72>
 8017e48:	4620      	mov	r0, r4
 8017e4a:	f000 f9e3 	bl	8018214 <_free_r>
 8017e4e:	69a3      	ldr	r3, [r4, #24]
 8017e50:	b1e3      	cbz	r3, 8017e8c <_reclaim_reent+0xb0>
 8017e52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017e54:	4620      	mov	r0, r4
 8017e56:	4798      	blx	r3
 8017e58:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017e5a:	b1b9      	cbz	r1, 8017e8c <_reclaim_reent+0xb0>
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e62:	f7ff bfad 	b.w	8017dc0 <cleanup_glue>
 8017e66:	5949      	ldr	r1, [r1, r5]
 8017e68:	b941      	cbnz	r1, 8017e7c <_reclaim_reent+0xa0>
 8017e6a:	3504      	adds	r5, #4
 8017e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e6e:	2d80      	cmp	r5, #128	; 0x80
 8017e70:	68d9      	ldr	r1, [r3, #12]
 8017e72:	d1f8      	bne.n	8017e66 <_reclaim_reent+0x8a>
 8017e74:	4620      	mov	r0, r4
 8017e76:	f000 f9cd 	bl	8018214 <_free_r>
 8017e7a:	e7ba      	b.n	8017df2 <_reclaim_reent+0x16>
 8017e7c:	680e      	ldr	r6, [r1, #0]
 8017e7e:	4620      	mov	r0, r4
 8017e80:	f000 f9c8 	bl	8018214 <_free_r>
 8017e84:	4631      	mov	r1, r6
 8017e86:	e7ef      	b.n	8017e68 <_reclaim_reent+0x8c>
 8017e88:	2500      	movs	r5, #0
 8017e8a:	e7ef      	b.n	8017e6c <_reclaim_reent+0x90>
 8017e8c:	bd70      	pop	{r4, r5, r6, pc}
 8017e8e:	bf00      	nop
 8017e90:	24000034 	.word	0x24000034

08017e94 <_sbrk_r>:
 8017e94:	b538      	push	{r3, r4, r5, lr}
 8017e96:	4d06      	ldr	r5, [pc, #24]	; (8017eb0 <_sbrk_r+0x1c>)
 8017e98:	2300      	movs	r3, #0
 8017e9a:	4604      	mov	r4, r0
 8017e9c:	4608      	mov	r0, r1
 8017e9e:	602b      	str	r3, [r5, #0]
 8017ea0:	f7e8 ffe6 	bl	8000e70 <_sbrk>
 8017ea4:	1c43      	adds	r3, r0, #1
 8017ea6:	d102      	bne.n	8017eae <_sbrk_r+0x1a>
 8017ea8:	682b      	ldr	r3, [r5, #0]
 8017eaa:	b103      	cbz	r3, 8017eae <_sbrk_r+0x1a>
 8017eac:	6023      	str	r3, [r4, #0]
 8017eae:	bd38      	pop	{r3, r4, r5, pc}
 8017eb0:	2400f2a4 	.word	0x2400f2a4

08017eb4 <siprintf>:
 8017eb4:	b40e      	push	{r1, r2, r3}
 8017eb6:	b500      	push	{lr}
 8017eb8:	b09c      	sub	sp, #112	; 0x70
 8017eba:	ab1d      	add	r3, sp, #116	; 0x74
 8017ebc:	9002      	str	r0, [sp, #8]
 8017ebe:	9006      	str	r0, [sp, #24]
 8017ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017ec4:	4809      	ldr	r0, [pc, #36]	; (8017eec <siprintf+0x38>)
 8017ec6:	9107      	str	r1, [sp, #28]
 8017ec8:	9104      	str	r1, [sp, #16]
 8017eca:	4909      	ldr	r1, [pc, #36]	; (8017ef0 <siprintf+0x3c>)
 8017ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ed0:	9105      	str	r1, [sp, #20]
 8017ed2:	6800      	ldr	r0, [r0, #0]
 8017ed4:	9301      	str	r3, [sp, #4]
 8017ed6:	a902      	add	r1, sp, #8
 8017ed8:	f000 fa44 	bl	8018364 <_svfiprintf_r>
 8017edc:	9b02      	ldr	r3, [sp, #8]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	701a      	strb	r2, [r3, #0]
 8017ee2:	b01c      	add	sp, #112	; 0x70
 8017ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ee8:	b003      	add	sp, #12
 8017eea:	4770      	bx	lr
 8017eec:	24000034 	.word	0x24000034
 8017ef0:	ffff0208 	.word	0xffff0208

08017ef4 <__sread>:
 8017ef4:	b510      	push	{r4, lr}
 8017ef6:	460c      	mov	r4, r1
 8017ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017efc:	f000 fe20 	bl	8018b40 <_read_r>
 8017f00:	2800      	cmp	r0, #0
 8017f02:	bfab      	itete	ge
 8017f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017f06:	89a3      	ldrhlt	r3, [r4, #12]
 8017f08:	181b      	addge	r3, r3, r0
 8017f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017f0e:	bfac      	ite	ge
 8017f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8017f12:	81a3      	strhlt	r3, [r4, #12]
 8017f14:	bd10      	pop	{r4, pc}

08017f16 <__swrite>:
 8017f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f1a:	461f      	mov	r7, r3
 8017f1c:	898b      	ldrh	r3, [r1, #12]
 8017f1e:	05db      	lsls	r3, r3, #23
 8017f20:	4605      	mov	r5, r0
 8017f22:	460c      	mov	r4, r1
 8017f24:	4616      	mov	r6, r2
 8017f26:	d505      	bpl.n	8017f34 <__swrite+0x1e>
 8017f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f2c:	2302      	movs	r3, #2
 8017f2e:	2200      	movs	r2, #0
 8017f30:	f000 f94a 	bl	80181c8 <_lseek_r>
 8017f34:	89a3      	ldrh	r3, [r4, #12]
 8017f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017f3e:	81a3      	strh	r3, [r4, #12]
 8017f40:	4632      	mov	r2, r6
 8017f42:	463b      	mov	r3, r7
 8017f44:	4628      	mov	r0, r5
 8017f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f4a:	f000 b829 	b.w	8017fa0 <_write_r>

08017f4e <__sseek>:
 8017f4e:	b510      	push	{r4, lr}
 8017f50:	460c      	mov	r4, r1
 8017f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f56:	f000 f937 	bl	80181c8 <_lseek_r>
 8017f5a:	1c43      	adds	r3, r0, #1
 8017f5c:	89a3      	ldrh	r3, [r4, #12]
 8017f5e:	bf15      	itete	ne
 8017f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f6a:	81a3      	strheq	r3, [r4, #12]
 8017f6c:	bf18      	it	ne
 8017f6e:	81a3      	strhne	r3, [r4, #12]
 8017f70:	bd10      	pop	{r4, pc}

08017f72 <__sclose>:
 8017f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f76:	f000 b843 	b.w	8018000 <_close_r>

08017f7a <strncpy>:
 8017f7a:	b510      	push	{r4, lr}
 8017f7c:	3901      	subs	r1, #1
 8017f7e:	4603      	mov	r3, r0
 8017f80:	b132      	cbz	r2, 8017f90 <strncpy+0x16>
 8017f82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017f86:	f803 4b01 	strb.w	r4, [r3], #1
 8017f8a:	3a01      	subs	r2, #1
 8017f8c:	2c00      	cmp	r4, #0
 8017f8e:	d1f7      	bne.n	8017f80 <strncpy+0x6>
 8017f90:	441a      	add	r2, r3
 8017f92:	2100      	movs	r1, #0
 8017f94:	4293      	cmp	r3, r2
 8017f96:	d100      	bne.n	8017f9a <strncpy+0x20>
 8017f98:	bd10      	pop	{r4, pc}
 8017f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8017f9e:	e7f9      	b.n	8017f94 <strncpy+0x1a>

08017fa0 <_write_r>:
 8017fa0:	b538      	push	{r3, r4, r5, lr}
 8017fa2:	4d07      	ldr	r5, [pc, #28]	; (8017fc0 <_write_r+0x20>)
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	4608      	mov	r0, r1
 8017fa8:	4611      	mov	r1, r2
 8017faa:	2200      	movs	r2, #0
 8017fac:	602a      	str	r2, [r5, #0]
 8017fae:	461a      	mov	r2, r3
 8017fb0:	f7e8 ff0d 	bl	8000dce <_write>
 8017fb4:	1c43      	adds	r3, r0, #1
 8017fb6:	d102      	bne.n	8017fbe <_write_r+0x1e>
 8017fb8:	682b      	ldr	r3, [r5, #0]
 8017fba:	b103      	cbz	r3, 8017fbe <_write_r+0x1e>
 8017fbc:	6023      	str	r3, [r4, #0]
 8017fbe:	bd38      	pop	{r3, r4, r5, pc}
 8017fc0:	2400f2a4 	.word	0x2400f2a4

08017fc4 <__assert_func>:
 8017fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017fc6:	4614      	mov	r4, r2
 8017fc8:	461a      	mov	r2, r3
 8017fca:	4b09      	ldr	r3, [pc, #36]	; (8017ff0 <__assert_func+0x2c>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4605      	mov	r5, r0
 8017fd0:	68d8      	ldr	r0, [r3, #12]
 8017fd2:	b14c      	cbz	r4, 8017fe8 <__assert_func+0x24>
 8017fd4:	4b07      	ldr	r3, [pc, #28]	; (8017ff4 <__assert_func+0x30>)
 8017fd6:	9100      	str	r1, [sp, #0]
 8017fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017fdc:	4906      	ldr	r1, [pc, #24]	; (8017ff8 <__assert_func+0x34>)
 8017fde:	462b      	mov	r3, r5
 8017fe0:	f000 f8e0 	bl	80181a4 <fiprintf>
 8017fe4:	f000 fe7e 	bl	8018ce4 <abort>
 8017fe8:	4b04      	ldr	r3, [pc, #16]	; (8017ffc <__assert_func+0x38>)
 8017fea:	461c      	mov	r4, r3
 8017fec:	e7f3      	b.n	8017fd6 <__assert_func+0x12>
 8017fee:	bf00      	nop
 8017ff0:	24000034 	.word	0x24000034
 8017ff4:	0801cc4a 	.word	0x0801cc4a
 8017ff8:	0801cc57 	.word	0x0801cc57
 8017ffc:	0801cc85 	.word	0x0801cc85

08018000 <_close_r>:
 8018000:	b538      	push	{r3, r4, r5, lr}
 8018002:	4d06      	ldr	r5, [pc, #24]	; (801801c <_close_r+0x1c>)
 8018004:	2300      	movs	r3, #0
 8018006:	4604      	mov	r4, r0
 8018008:	4608      	mov	r0, r1
 801800a:	602b      	str	r3, [r5, #0]
 801800c:	f7e8 fefb 	bl	8000e06 <_close>
 8018010:	1c43      	adds	r3, r0, #1
 8018012:	d102      	bne.n	801801a <_close_r+0x1a>
 8018014:	682b      	ldr	r3, [r5, #0]
 8018016:	b103      	cbz	r3, 801801a <_close_r+0x1a>
 8018018:	6023      	str	r3, [r4, #0]
 801801a:	bd38      	pop	{r3, r4, r5, pc}
 801801c:	2400f2a4 	.word	0x2400f2a4

08018020 <__sflush_r>:
 8018020:	898a      	ldrh	r2, [r1, #12]
 8018022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018026:	4605      	mov	r5, r0
 8018028:	0710      	lsls	r0, r2, #28
 801802a:	460c      	mov	r4, r1
 801802c:	d458      	bmi.n	80180e0 <__sflush_r+0xc0>
 801802e:	684b      	ldr	r3, [r1, #4]
 8018030:	2b00      	cmp	r3, #0
 8018032:	dc05      	bgt.n	8018040 <__sflush_r+0x20>
 8018034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018036:	2b00      	cmp	r3, #0
 8018038:	dc02      	bgt.n	8018040 <__sflush_r+0x20>
 801803a:	2000      	movs	r0, #0
 801803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018042:	2e00      	cmp	r6, #0
 8018044:	d0f9      	beq.n	801803a <__sflush_r+0x1a>
 8018046:	2300      	movs	r3, #0
 8018048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801804c:	682f      	ldr	r7, [r5, #0]
 801804e:	602b      	str	r3, [r5, #0]
 8018050:	d032      	beq.n	80180b8 <__sflush_r+0x98>
 8018052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018054:	89a3      	ldrh	r3, [r4, #12]
 8018056:	075a      	lsls	r2, r3, #29
 8018058:	d505      	bpl.n	8018066 <__sflush_r+0x46>
 801805a:	6863      	ldr	r3, [r4, #4]
 801805c:	1ac0      	subs	r0, r0, r3
 801805e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018060:	b10b      	cbz	r3, 8018066 <__sflush_r+0x46>
 8018062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018064:	1ac0      	subs	r0, r0, r3
 8018066:	2300      	movs	r3, #0
 8018068:	4602      	mov	r2, r0
 801806a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801806c:	6a21      	ldr	r1, [r4, #32]
 801806e:	4628      	mov	r0, r5
 8018070:	47b0      	blx	r6
 8018072:	1c43      	adds	r3, r0, #1
 8018074:	89a3      	ldrh	r3, [r4, #12]
 8018076:	d106      	bne.n	8018086 <__sflush_r+0x66>
 8018078:	6829      	ldr	r1, [r5, #0]
 801807a:	291d      	cmp	r1, #29
 801807c:	d82c      	bhi.n	80180d8 <__sflush_r+0xb8>
 801807e:	4a2a      	ldr	r2, [pc, #168]	; (8018128 <__sflush_r+0x108>)
 8018080:	40ca      	lsrs	r2, r1
 8018082:	07d6      	lsls	r6, r2, #31
 8018084:	d528      	bpl.n	80180d8 <__sflush_r+0xb8>
 8018086:	2200      	movs	r2, #0
 8018088:	6062      	str	r2, [r4, #4]
 801808a:	04d9      	lsls	r1, r3, #19
 801808c:	6922      	ldr	r2, [r4, #16]
 801808e:	6022      	str	r2, [r4, #0]
 8018090:	d504      	bpl.n	801809c <__sflush_r+0x7c>
 8018092:	1c42      	adds	r2, r0, #1
 8018094:	d101      	bne.n	801809a <__sflush_r+0x7a>
 8018096:	682b      	ldr	r3, [r5, #0]
 8018098:	b903      	cbnz	r3, 801809c <__sflush_r+0x7c>
 801809a:	6560      	str	r0, [r4, #84]	; 0x54
 801809c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801809e:	602f      	str	r7, [r5, #0]
 80180a0:	2900      	cmp	r1, #0
 80180a2:	d0ca      	beq.n	801803a <__sflush_r+0x1a>
 80180a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80180a8:	4299      	cmp	r1, r3
 80180aa:	d002      	beq.n	80180b2 <__sflush_r+0x92>
 80180ac:	4628      	mov	r0, r5
 80180ae:	f000 f8b1 	bl	8018214 <_free_r>
 80180b2:	2000      	movs	r0, #0
 80180b4:	6360      	str	r0, [r4, #52]	; 0x34
 80180b6:	e7c1      	b.n	801803c <__sflush_r+0x1c>
 80180b8:	6a21      	ldr	r1, [r4, #32]
 80180ba:	2301      	movs	r3, #1
 80180bc:	4628      	mov	r0, r5
 80180be:	47b0      	blx	r6
 80180c0:	1c41      	adds	r1, r0, #1
 80180c2:	d1c7      	bne.n	8018054 <__sflush_r+0x34>
 80180c4:	682b      	ldr	r3, [r5, #0]
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d0c4      	beq.n	8018054 <__sflush_r+0x34>
 80180ca:	2b1d      	cmp	r3, #29
 80180cc:	d001      	beq.n	80180d2 <__sflush_r+0xb2>
 80180ce:	2b16      	cmp	r3, #22
 80180d0:	d101      	bne.n	80180d6 <__sflush_r+0xb6>
 80180d2:	602f      	str	r7, [r5, #0]
 80180d4:	e7b1      	b.n	801803a <__sflush_r+0x1a>
 80180d6:	89a3      	ldrh	r3, [r4, #12]
 80180d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180dc:	81a3      	strh	r3, [r4, #12]
 80180de:	e7ad      	b.n	801803c <__sflush_r+0x1c>
 80180e0:	690f      	ldr	r7, [r1, #16]
 80180e2:	2f00      	cmp	r7, #0
 80180e4:	d0a9      	beq.n	801803a <__sflush_r+0x1a>
 80180e6:	0793      	lsls	r3, r2, #30
 80180e8:	680e      	ldr	r6, [r1, #0]
 80180ea:	bf08      	it	eq
 80180ec:	694b      	ldreq	r3, [r1, #20]
 80180ee:	600f      	str	r7, [r1, #0]
 80180f0:	bf18      	it	ne
 80180f2:	2300      	movne	r3, #0
 80180f4:	eba6 0807 	sub.w	r8, r6, r7
 80180f8:	608b      	str	r3, [r1, #8]
 80180fa:	f1b8 0f00 	cmp.w	r8, #0
 80180fe:	dd9c      	ble.n	801803a <__sflush_r+0x1a>
 8018100:	6a21      	ldr	r1, [r4, #32]
 8018102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018104:	4643      	mov	r3, r8
 8018106:	463a      	mov	r2, r7
 8018108:	4628      	mov	r0, r5
 801810a:	47b0      	blx	r6
 801810c:	2800      	cmp	r0, #0
 801810e:	dc06      	bgt.n	801811e <__sflush_r+0xfe>
 8018110:	89a3      	ldrh	r3, [r4, #12]
 8018112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018116:	81a3      	strh	r3, [r4, #12]
 8018118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801811c:	e78e      	b.n	801803c <__sflush_r+0x1c>
 801811e:	4407      	add	r7, r0
 8018120:	eba8 0800 	sub.w	r8, r8, r0
 8018124:	e7e9      	b.n	80180fa <__sflush_r+0xda>
 8018126:	bf00      	nop
 8018128:	20400001 	.word	0x20400001

0801812c <_fflush_r>:
 801812c:	b538      	push	{r3, r4, r5, lr}
 801812e:	690b      	ldr	r3, [r1, #16]
 8018130:	4605      	mov	r5, r0
 8018132:	460c      	mov	r4, r1
 8018134:	b913      	cbnz	r3, 801813c <_fflush_r+0x10>
 8018136:	2500      	movs	r5, #0
 8018138:	4628      	mov	r0, r5
 801813a:	bd38      	pop	{r3, r4, r5, pc}
 801813c:	b118      	cbz	r0, 8018146 <_fflush_r+0x1a>
 801813e:	6983      	ldr	r3, [r0, #24]
 8018140:	b90b      	cbnz	r3, 8018146 <_fflush_r+0x1a>
 8018142:	f7ff fc4d 	bl	80179e0 <__sinit>
 8018146:	4b14      	ldr	r3, [pc, #80]	; (8018198 <_fflush_r+0x6c>)
 8018148:	429c      	cmp	r4, r3
 801814a:	d11b      	bne.n	8018184 <_fflush_r+0x58>
 801814c:	686c      	ldr	r4, [r5, #4]
 801814e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d0ef      	beq.n	8018136 <_fflush_r+0xa>
 8018156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018158:	07d0      	lsls	r0, r2, #31
 801815a:	d404      	bmi.n	8018166 <_fflush_r+0x3a>
 801815c:	0599      	lsls	r1, r3, #22
 801815e:	d402      	bmi.n	8018166 <_fflush_r+0x3a>
 8018160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018162:	f7ff fd00 	bl	8017b66 <__retarget_lock_acquire_recursive>
 8018166:	4628      	mov	r0, r5
 8018168:	4621      	mov	r1, r4
 801816a:	f7ff ff59 	bl	8018020 <__sflush_r>
 801816e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018170:	07da      	lsls	r2, r3, #31
 8018172:	4605      	mov	r5, r0
 8018174:	d4e0      	bmi.n	8018138 <_fflush_r+0xc>
 8018176:	89a3      	ldrh	r3, [r4, #12]
 8018178:	059b      	lsls	r3, r3, #22
 801817a:	d4dd      	bmi.n	8018138 <_fflush_r+0xc>
 801817c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801817e:	f7ff fcf3 	bl	8017b68 <__retarget_lock_release_recursive>
 8018182:	e7d9      	b.n	8018138 <_fflush_r+0xc>
 8018184:	4b05      	ldr	r3, [pc, #20]	; (801819c <_fflush_r+0x70>)
 8018186:	429c      	cmp	r4, r3
 8018188:	d101      	bne.n	801818e <_fflush_r+0x62>
 801818a:	68ac      	ldr	r4, [r5, #8]
 801818c:	e7df      	b.n	801814e <_fflush_r+0x22>
 801818e:	4b04      	ldr	r3, [pc, #16]	; (80181a0 <_fflush_r+0x74>)
 8018190:	429c      	cmp	r4, r3
 8018192:	bf08      	it	eq
 8018194:	68ec      	ldreq	r4, [r5, #12]
 8018196:	e7da      	b.n	801814e <_fflush_r+0x22>
 8018198:	0801cb94 	.word	0x0801cb94
 801819c:	0801cbb4 	.word	0x0801cbb4
 80181a0:	0801cb74 	.word	0x0801cb74

080181a4 <fiprintf>:
 80181a4:	b40e      	push	{r1, r2, r3}
 80181a6:	b503      	push	{r0, r1, lr}
 80181a8:	4601      	mov	r1, r0
 80181aa:	ab03      	add	r3, sp, #12
 80181ac:	4805      	ldr	r0, [pc, #20]	; (80181c4 <fiprintf+0x20>)
 80181ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80181b2:	6800      	ldr	r0, [r0, #0]
 80181b4:	9301      	str	r3, [sp, #4]
 80181b6:	f000 f9ff 	bl	80185b8 <_vfiprintf_r>
 80181ba:	b002      	add	sp, #8
 80181bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80181c0:	b003      	add	sp, #12
 80181c2:	4770      	bx	lr
 80181c4:	24000034 	.word	0x24000034

080181c8 <_lseek_r>:
 80181c8:	b538      	push	{r3, r4, r5, lr}
 80181ca:	4d07      	ldr	r5, [pc, #28]	; (80181e8 <_lseek_r+0x20>)
 80181cc:	4604      	mov	r4, r0
 80181ce:	4608      	mov	r0, r1
 80181d0:	4611      	mov	r1, r2
 80181d2:	2200      	movs	r2, #0
 80181d4:	602a      	str	r2, [r5, #0]
 80181d6:	461a      	mov	r2, r3
 80181d8:	f7e8 fe3c 	bl	8000e54 <_lseek>
 80181dc:	1c43      	adds	r3, r0, #1
 80181de:	d102      	bne.n	80181e6 <_lseek_r+0x1e>
 80181e0:	682b      	ldr	r3, [r5, #0]
 80181e2:	b103      	cbz	r3, 80181e6 <_lseek_r+0x1e>
 80181e4:	6023      	str	r3, [r4, #0]
 80181e6:	bd38      	pop	{r3, r4, r5, pc}
 80181e8:	2400f2a4 	.word	0x2400f2a4

080181ec <malloc>:
 80181ec:	4b02      	ldr	r3, [pc, #8]	; (80181f8 <malloc+0xc>)
 80181ee:	4601      	mov	r1, r0
 80181f0:	6818      	ldr	r0, [r3, #0]
 80181f2:	f7ff bd1b 	b.w	8017c2c <_malloc_r>
 80181f6:	bf00      	nop
 80181f8:	24000034 	.word	0x24000034

080181fc <__malloc_lock>:
 80181fc:	4801      	ldr	r0, [pc, #4]	; (8018204 <__malloc_lock+0x8>)
 80181fe:	f7ff bcb2 	b.w	8017b66 <__retarget_lock_acquire_recursive>
 8018202:	bf00      	nop
 8018204:	2400f298 	.word	0x2400f298

08018208 <__malloc_unlock>:
 8018208:	4801      	ldr	r0, [pc, #4]	; (8018210 <__malloc_unlock+0x8>)
 801820a:	f7ff bcad 	b.w	8017b68 <__retarget_lock_release_recursive>
 801820e:	bf00      	nop
 8018210:	2400f298 	.word	0x2400f298

08018214 <_free_r>:
 8018214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018216:	2900      	cmp	r1, #0
 8018218:	d044      	beq.n	80182a4 <_free_r+0x90>
 801821a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801821e:	9001      	str	r0, [sp, #4]
 8018220:	2b00      	cmp	r3, #0
 8018222:	f1a1 0404 	sub.w	r4, r1, #4
 8018226:	bfb8      	it	lt
 8018228:	18e4      	addlt	r4, r4, r3
 801822a:	f7ff ffe7 	bl	80181fc <__malloc_lock>
 801822e:	4a1e      	ldr	r2, [pc, #120]	; (80182a8 <_free_r+0x94>)
 8018230:	9801      	ldr	r0, [sp, #4]
 8018232:	6813      	ldr	r3, [r2, #0]
 8018234:	b933      	cbnz	r3, 8018244 <_free_r+0x30>
 8018236:	6063      	str	r3, [r4, #4]
 8018238:	6014      	str	r4, [r2, #0]
 801823a:	b003      	add	sp, #12
 801823c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018240:	f7ff bfe2 	b.w	8018208 <__malloc_unlock>
 8018244:	42a3      	cmp	r3, r4
 8018246:	d908      	bls.n	801825a <_free_r+0x46>
 8018248:	6825      	ldr	r5, [r4, #0]
 801824a:	1961      	adds	r1, r4, r5
 801824c:	428b      	cmp	r3, r1
 801824e:	bf01      	itttt	eq
 8018250:	6819      	ldreq	r1, [r3, #0]
 8018252:	685b      	ldreq	r3, [r3, #4]
 8018254:	1949      	addeq	r1, r1, r5
 8018256:	6021      	streq	r1, [r4, #0]
 8018258:	e7ed      	b.n	8018236 <_free_r+0x22>
 801825a:	461a      	mov	r2, r3
 801825c:	685b      	ldr	r3, [r3, #4]
 801825e:	b10b      	cbz	r3, 8018264 <_free_r+0x50>
 8018260:	42a3      	cmp	r3, r4
 8018262:	d9fa      	bls.n	801825a <_free_r+0x46>
 8018264:	6811      	ldr	r1, [r2, #0]
 8018266:	1855      	adds	r5, r2, r1
 8018268:	42a5      	cmp	r5, r4
 801826a:	d10b      	bne.n	8018284 <_free_r+0x70>
 801826c:	6824      	ldr	r4, [r4, #0]
 801826e:	4421      	add	r1, r4
 8018270:	1854      	adds	r4, r2, r1
 8018272:	42a3      	cmp	r3, r4
 8018274:	6011      	str	r1, [r2, #0]
 8018276:	d1e0      	bne.n	801823a <_free_r+0x26>
 8018278:	681c      	ldr	r4, [r3, #0]
 801827a:	685b      	ldr	r3, [r3, #4]
 801827c:	6053      	str	r3, [r2, #4]
 801827e:	4421      	add	r1, r4
 8018280:	6011      	str	r1, [r2, #0]
 8018282:	e7da      	b.n	801823a <_free_r+0x26>
 8018284:	d902      	bls.n	801828c <_free_r+0x78>
 8018286:	230c      	movs	r3, #12
 8018288:	6003      	str	r3, [r0, #0]
 801828a:	e7d6      	b.n	801823a <_free_r+0x26>
 801828c:	6825      	ldr	r5, [r4, #0]
 801828e:	1961      	adds	r1, r4, r5
 8018290:	428b      	cmp	r3, r1
 8018292:	bf04      	itt	eq
 8018294:	6819      	ldreq	r1, [r3, #0]
 8018296:	685b      	ldreq	r3, [r3, #4]
 8018298:	6063      	str	r3, [r4, #4]
 801829a:	bf04      	itt	eq
 801829c:	1949      	addeq	r1, r1, r5
 801829e:	6021      	streq	r1, [r4, #0]
 80182a0:	6054      	str	r4, [r2, #4]
 80182a2:	e7ca      	b.n	801823a <_free_r+0x26>
 80182a4:	b003      	add	sp, #12
 80182a6:	bd30      	pop	{r4, r5, pc}
 80182a8:	2400f29c 	.word	0x2400f29c

080182ac <__ssputs_r>:
 80182ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80182b0:	688e      	ldr	r6, [r1, #8]
 80182b2:	429e      	cmp	r6, r3
 80182b4:	4682      	mov	sl, r0
 80182b6:	460c      	mov	r4, r1
 80182b8:	4690      	mov	r8, r2
 80182ba:	461f      	mov	r7, r3
 80182bc:	d838      	bhi.n	8018330 <__ssputs_r+0x84>
 80182be:	898a      	ldrh	r2, [r1, #12]
 80182c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80182c4:	d032      	beq.n	801832c <__ssputs_r+0x80>
 80182c6:	6825      	ldr	r5, [r4, #0]
 80182c8:	6909      	ldr	r1, [r1, #16]
 80182ca:	eba5 0901 	sub.w	r9, r5, r1
 80182ce:	6965      	ldr	r5, [r4, #20]
 80182d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80182d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80182d8:	3301      	adds	r3, #1
 80182da:	444b      	add	r3, r9
 80182dc:	106d      	asrs	r5, r5, #1
 80182de:	429d      	cmp	r5, r3
 80182e0:	bf38      	it	cc
 80182e2:	461d      	movcc	r5, r3
 80182e4:	0553      	lsls	r3, r2, #21
 80182e6:	d531      	bpl.n	801834c <__ssputs_r+0xa0>
 80182e8:	4629      	mov	r1, r5
 80182ea:	f7ff fc9f 	bl	8017c2c <_malloc_r>
 80182ee:	4606      	mov	r6, r0
 80182f0:	b950      	cbnz	r0, 8018308 <__ssputs_r+0x5c>
 80182f2:	230c      	movs	r3, #12
 80182f4:	f8ca 3000 	str.w	r3, [sl]
 80182f8:	89a3      	ldrh	r3, [r4, #12]
 80182fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182fe:	81a3      	strh	r3, [r4, #12]
 8018300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018308:	6921      	ldr	r1, [r4, #16]
 801830a:	464a      	mov	r2, r9
 801830c:	f7ff fc3d 	bl	8017b8a <memcpy>
 8018310:	89a3      	ldrh	r3, [r4, #12]
 8018312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801831a:	81a3      	strh	r3, [r4, #12]
 801831c:	6126      	str	r6, [r4, #16]
 801831e:	6165      	str	r5, [r4, #20]
 8018320:	444e      	add	r6, r9
 8018322:	eba5 0509 	sub.w	r5, r5, r9
 8018326:	6026      	str	r6, [r4, #0]
 8018328:	60a5      	str	r5, [r4, #8]
 801832a:	463e      	mov	r6, r7
 801832c:	42be      	cmp	r6, r7
 801832e:	d900      	bls.n	8018332 <__ssputs_r+0x86>
 8018330:	463e      	mov	r6, r7
 8018332:	6820      	ldr	r0, [r4, #0]
 8018334:	4632      	mov	r2, r6
 8018336:	4641      	mov	r1, r8
 8018338:	f7ff fc35 	bl	8017ba6 <memmove>
 801833c:	68a3      	ldr	r3, [r4, #8]
 801833e:	1b9b      	subs	r3, r3, r6
 8018340:	60a3      	str	r3, [r4, #8]
 8018342:	6823      	ldr	r3, [r4, #0]
 8018344:	4433      	add	r3, r6
 8018346:	6023      	str	r3, [r4, #0]
 8018348:	2000      	movs	r0, #0
 801834a:	e7db      	b.n	8018304 <__ssputs_r+0x58>
 801834c:	462a      	mov	r2, r5
 801834e:	f000 fd35 	bl	8018dbc <_realloc_r>
 8018352:	4606      	mov	r6, r0
 8018354:	2800      	cmp	r0, #0
 8018356:	d1e1      	bne.n	801831c <__ssputs_r+0x70>
 8018358:	6921      	ldr	r1, [r4, #16]
 801835a:	4650      	mov	r0, sl
 801835c:	f7ff ff5a 	bl	8018214 <_free_r>
 8018360:	e7c7      	b.n	80182f2 <__ssputs_r+0x46>
	...

08018364 <_svfiprintf_r>:
 8018364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018368:	4698      	mov	r8, r3
 801836a:	898b      	ldrh	r3, [r1, #12]
 801836c:	061b      	lsls	r3, r3, #24
 801836e:	b09d      	sub	sp, #116	; 0x74
 8018370:	4607      	mov	r7, r0
 8018372:	460d      	mov	r5, r1
 8018374:	4614      	mov	r4, r2
 8018376:	d50e      	bpl.n	8018396 <_svfiprintf_r+0x32>
 8018378:	690b      	ldr	r3, [r1, #16]
 801837a:	b963      	cbnz	r3, 8018396 <_svfiprintf_r+0x32>
 801837c:	2140      	movs	r1, #64	; 0x40
 801837e:	f7ff fc55 	bl	8017c2c <_malloc_r>
 8018382:	6028      	str	r0, [r5, #0]
 8018384:	6128      	str	r0, [r5, #16]
 8018386:	b920      	cbnz	r0, 8018392 <_svfiprintf_r+0x2e>
 8018388:	230c      	movs	r3, #12
 801838a:	603b      	str	r3, [r7, #0]
 801838c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018390:	e0d1      	b.n	8018536 <_svfiprintf_r+0x1d2>
 8018392:	2340      	movs	r3, #64	; 0x40
 8018394:	616b      	str	r3, [r5, #20]
 8018396:	2300      	movs	r3, #0
 8018398:	9309      	str	r3, [sp, #36]	; 0x24
 801839a:	2320      	movs	r3, #32
 801839c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80183a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80183a4:	2330      	movs	r3, #48	; 0x30
 80183a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018550 <_svfiprintf_r+0x1ec>
 80183aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80183ae:	f04f 0901 	mov.w	r9, #1
 80183b2:	4623      	mov	r3, r4
 80183b4:	469a      	mov	sl, r3
 80183b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80183ba:	b10a      	cbz	r2, 80183c0 <_svfiprintf_r+0x5c>
 80183bc:	2a25      	cmp	r2, #37	; 0x25
 80183be:	d1f9      	bne.n	80183b4 <_svfiprintf_r+0x50>
 80183c0:	ebba 0b04 	subs.w	fp, sl, r4
 80183c4:	d00b      	beq.n	80183de <_svfiprintf_r+0x7a>
 80183c6:	465b      	mov	r3, fp
 80183c8:	4622      	mov	r2, r4
 80183ca:	4629      	mov	r1, r5
 80183cc:	4638      	mov	r0, r7
 80183ce:	f7ff ff6d 	bl	80182ac <__ssputs_r>
 80183d2:	3001      	adds	r0, #1
 80183d4:	f000 80aa 	beq.w	801852c <_svfiprintf_r+0x1c8>
 80183d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80183da:	445a      	add	r2, fp
 80183dc:	9209      	str	r2, [sp, #36]	; 0x24
 80183de:	f89a 3000 	ldrb.w	r3, [sl]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	f000 80a2 	beq.w	801852c <_svfiprintf_r+0x1c8>
 80183e8:	2300      	movs	r3, #0
 80183ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80183f2:	f10a 0a01 	add.w	sl, sl, #1
 80183f6:	9304      	str	r3, [sp, #16]
 80183f8:	9307      	str	r3, [sp, #28]
 80183fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80183fe:	931a      	str	r3, [sp, #104]	; 0x68
 8018400:	4654      	mov	r4, sl
 8018402:	2205      	movs	r2, #5
 8018404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018408:	4851      	ldr	r0, [pc, #324]	; (8018550 <_svfiprintf_r+0x1ec>)
 801840a:	f7e7 ff69 	bl	80002e0 <memchr>
 801840e:	9a04      	ldr	r2, [sp, #16]
 8018410:	b9d8      	cbnz	r0, 801844a <_svfiprintf_r+0xe6>
 8018412:	06d0      	lsls	r0, r2, #27
 8018414:	bf44      	itt	mi
 8018416:	2320      	movmi	r3, #32
 8018418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801841c:	0711      	lsls	r1, r2, #28
 801841e:	bf44      	itt	mi
 8018420:	232b      	movmi	r3, #43	; 0x2b
 8018422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018426:	f89a 3000 	ldrb.w	r3, [sl]
 801842a:	2b2a      	cmp	r3, #42	; 0x2a
 801842c:	d015      	beq.n	801845a <_svfiprintf_r+0xf6>
 801842e:	9a07      	ldr	r2, [sp, #28]
 8018430:	4654      	mov	r4, sl
 8018432:	2000      	movs	r0, #0
 8018434:	f04f 0c0a 	mov.w	ip, #10
 8018438:	4621      	mov	r1, r4
 801843a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801843e:	3b30      	subs	r3, #48	; 0x30
 8018440:	2b09      	cmp	r3, #9
 8018442:	d94e      	bls.n	80184e2 <_svfiprintf_r+0x17e>
 8018444:	b1b0      	cbz	r0, 8018474 <_svfiprintf_r+0x110>
 8018446:	9207      	str	r2, [sp, #28]
 8018448:	e014      	b.n	8018474 <_svfiprintf_r+0x110>
 801844a:	eba0 0308 	sub.w	r3, r0, r8
 801844e:	fa09 f303 	lsl.w	r3, r9, r3
 8018452:	4313      	orrs	r3, r2
 8018454:	9304      	str	r3, [sp, #16]
 8018456:	46a2      	mov	sl, r4
 8018458:	e7d2      	b.n	8018400 <_svfiprintf_r+0x9c>
 801845a:	9b03      	ldr	r3, [sp, #12]
 801845c:	1d19      	adds	r1, r3, #4
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	9103      	str	r1, [sp, #12]
 8018462:	2b00      	cmp	r3, #0
 8018464:	bfbb      	ittet	lt
 8018466:	425b      	neglt	r3, r3
 8018468:	f042 0202 	orrlt.w	r2, r2, #2
 801846c:	9307      	strge	r3, [sp, #28]
 801846e:	9307      	strlt	r3, [sp, #28]
 8018470:	bfb8      	it	lt
 8018472:	9204      	strlt	r2, [sp, #16]
 8018474:	7823      	ldrb	r3, [r4, #0]
 8018476:	2b2e      	cmp	r3, #46	; 0x2e
 8018478:	d10c      	bne.n	8018494 <_svfiprintf_r+0x130>
 801847a:	7863      	ldrb	r3, [r4, #1]
 801847c:	2b2a      	cmp	r3, #42	; 0x2a
 801847e:	d135      	bne.n	80184ec <_svfiprintf_r+0x188>
 8018480:	9b03      	ldr	r3, [sp, #12]
 8018482:	1d1a      	adds	r2, r3, #4
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	9203      	str	r2, [sp, #12]
 8018488:	2b00      	cmp	r3, #0
 801848a:	bfb8      	it	lt
 801848c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018490:	3402      	adds	r4, #2
 8018492:	9305      	str	r3, [sp, #20]
 8018494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018560 <_svfiprintf_r+0x1fc>
 8018498:	7821      	ldrb	r1, [r4, #0]
 801849a:	2203      	movs	r2, #3
 801849c:	4650      	mov	r0, sl
 801849e:	f7e7 ff1f 	bl	80002e0 <memchr>
 80184a2:	b140      	cbz	r0, 80184b6 <_svfiprintf_r+0x152>
 80184a4:	2340      	movs	r3, #64	; 0x40
 80184a6:	eba0 000a 	sub.w	r0, r0, sl
 80184aa:	fa03 f000 	lsl.w	r0, r3, r0
 80184ae:	9b04      	ldr	r3, [sp, #16]
 80184b0:	4303      	orrs	r3, r0
 80184b2:	3401      	adds	r4, #1
 80184b4:	9304      	str	r3, [sp, #16]
 80184b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184ba:	4826      	ldr	r0, [pc, #152]	; (8018554 <_svfiprintf_r+0x1f0>)
 80184bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80184c0:	2206      	movs	r2, #6
 80184c2:	f7e7 ff0d 	bl	80002e0 <memchr>
 80184c6:	2800      	cmp	r0, #0
 80184c8:	d038      	beq.n	801853c <_svfiprintf_r+0x1d8>
 80184ca:	4b23      	ldr	r3, [pc, #140]	; (8018558 <_svfiprintf_r+0x1f4>)
 80184cc:	bb1b      	cbnz	r3, 8018516 <_svfiprintf_r+0x1b2>
 80184ce:	9b03      	ldr	r3, [sp, #12]
 80184d0:	3307      	adds	r3, #7
 80184d2:	f023 0307 	bic.w	r3, r3, #7
 80184d6:	3308      	adds	r3, #8
 80184d8:	9303      	str	r3, [sp, #12]
 80184da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184dc:	4433      	add	r3, r6
 80184de:	9309      	str	r3, [sp, #36]	; 0x24
 80184e0:	e767      	b.n	80183b2 <_svfiprintf_r+0x4e>
 80184e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80184e6:	460c      	mov	r4, r1
 80184e8:	2001      	movs	r0, #1
 80184ea:	e7a5      	b.n	8018438 <_svfiprintf_r+0xd4>
 80184ec:	2300      	movs	r3, #0
 80184ee:	3401      	adds	r4, #1
 80184f0:	9305      	str	r3, [sp, #20]
 80184f2:	4619      	mov	r1, r3
 80184f4:	f04f 0c0a 	mov.w	ip, #10
 80184f8:	4620      	mov	r0, r4
 80184fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80184fe:	3a30      	subs	r2, #48	; 0x30
 8018500:	2a09      	cmp	r2, #9
 8018502:	d903      	bls.n	801850c <_svfiprintf_r+0x1a8>
 8018504:	2b00      	cmp	r3, #0
 8018506:	d0c5      	beq.n	8018494 <_svfiprintf_r+0x130>
 8018508:	9105      	str	r1, [sp, #20]
 801850a:	e7c3      	b.n	8018494 <_svfiprintf_r+0x130>
 801850c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018510:	4604      	mov	r4, r0
 8018512:	2301      	movs	r3, #1
 8018514:	e7f0      	b.n	80184f8 <_svfiprintf_r+0x194>
 8018516:	ab03      	add	r3, sp, #12
 8018518:	9300      	str	r3, [sp, #0]
 801851a:	462a      	mov	r2, r5
 801851c:	4b0f      	ldr	r3, [pc, #60]	; (801855c <_svfiprintf_r+0x1f8>)
 801851e:	a904      	add	r1, sp, #16
 8018520:	4638      	mov	r0, r7
 8018522:	f3af 8000 	nop.w
 8018526:	1c42      	adds	r2, r0, #1
 8018528:	4606      	mov	r6, r0
 801852a:	d1d6      	bne.n	80184da <_svfiprintf_r+0x176>
 801852c:	89ab      	ldrh	r3, [r5, #12]
 801852e:	065b      	lsls	r3, r3, #25
 8018530:	f53f af2c 	bmi.w	801838c <_svfiprintf_r+0x28>
 8018534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018536:	b01d      	add	sp, #116	; 0x74
 8018538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801853c:	ab03      	add	r3, sp, #12
 801853e:	9300      	str	r3, [sp, #0]
 8018540:	462a      	mov	r2, r5
 8018542:	4b06      	ldr	r3, [pc, #24]	; (801855c <_svfiprintf_r+0x1f8>)
 8018544:	a904      	add	r1, sp, #16
 8018546:	4638      	mov	r0, r7
 8018548:	f000 f9d4 	bl	80188f4 <_printf_i>
 801854c:	e7eb      	b.n	8018526 <_svfiprintf_r+0x1c2>
 801854e:	bf00      	nop
 8018550:	0801cc86 	.word	0x0801cc86
 8018554:	0801cc90 	.word	0x0801cc90
 8018558:	00000000 	.word	0x00000000
 801855c:	080182ad 	.word	0x080182ad
 8018560:	0801cc8c 	.word	0x0801cc8c

08018564 <__sfputc_r>:
 8018564:	6893      	ldr	r3, [r2, #8]
 8018566:	3b01      	subs	r3, #1
 8018568:	2b00      	cmp	r3, #0
 801856a:	b410      	push	{r4}
 801856c:	6093      	str	r3, [r2, #8]
 801856e:	da08      	bge.n	8018582 <__sfputc_r+0x1e>
 8018570:	6994      	ldr	r4, [r2, #24]
 8018572:	42a3      	cmp	r3, r4
 8018574:	db01      	blt.n	801857a <__sfputc_r+0x16>
 8018576:	290a      	cmp	r1, #10
 8018578:	d103      	bne.n	8018582 <__sfputc_r+0x1e>
 801857a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801857e:	f000 baf1 	b.w	8018b64 <__swbuf_r>
 8018582:	6813      	ldr	r3, [r2, #0]
 8018584:	1c58      	adds	r0, r3, #1
 8018586:	6010      	str	r0, [r2, #0]
 8018588:	7019      	strb	r1, [r3, #0]
 801858a:	4608      	mov	r0, r1
 801858c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018590:	4770      	bx	lr

08018592 <__sfputs_r>:
 8018592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018594:	4606      	mov	r6, r0
 8018596:	460f      	mov	r7, r1
 8018598:	4614      	mov	r4, r2
 801859a:	18d5      	adds	r5, r2, r3
 801859c:	42ac      	cmp	r4, r5
 801859e:	d101      	bne.n	80185a4 <__sfputs_r+0x12>
 80185a0:	2000      	movs	r0, #0
 80185a2:	e007      	b.n	80185b4 <__sfputs_r+0x22>
 80185a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185a8:	463a      	mov	r2, r7
 80185aa:	4630      	mov	r0, r6
 80185ac:	f7ff ffda 	bl	8018564 <__sfputc_r>
 80185b0:	1c43      	adds	r3, r0, #1
 80185b2:	d1f3      	bne.n	801859c <__sfputs_r+0xa>
 80185b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080185b8 <_vfiprintf_r>:
 80185b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185bc:	460d      	mov	r5, r1
 80185be:	b09d      	sub	sp, #116	; 0x74
 80185c0:	4614      	mov	r4, r2
 80185c2:	4698      	mov	r8, r3
 80185c4:	4606      	mov	r6, r0
 80185c6:	b118      	cbz	r0, 80185d0 <_vfiprintf_r+0x18>
 80185c8:	6983      	ldr	r3, [r0, #24]
 80185ca:	b90b      	cbnz	r3, 80185d0 <_vfiprintf_r+0x18>
 80185cc:	f7ff fa08 	bl	80179e0 <__sinit>
 80185d0:	4b89      	ldr	r3, [pc, #548]	; (80187f8 <_vfiprintf_r+0x240>)
 80185d2:	429d      	cmp	r5, r3
 80185d4:	d11b      	bne.n	801860e <_vfiprintf_r+0x56>
 80185d6:	6875      	ldr	r5, [r6, #4]
 80185d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80185da:	07d9      	lsls	r1, r3, #31
 80185dc:	d405      	bmi.n	80185ea <_vfiprintf_r+0x32>
 80185de:	89ab      	ldrh	r3, [r5, #12]
 80185e0:	059a      	lsls	r2, r3, #22
 80185e2:	d402      	bmi.n	80185ea <_vfiprintf_r+0x32>
 80185e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80185e6:	f7ff fabe 	bl	8017b66 <__retarget_lock_acquire_recursive>
 80185ea:	89ab      	ldrh	r3, [r5, #12]
 80185ec:	071b      	lsls	r3, r3, #28
 80185ee:	d501      	bpl.n	80185f4 <_vfiprintf_r+0x3c>
 80185f0:	692b      	ldr	r3, [r5, #16]
 80185f2:	b9eb      	cbnz	r3, 8018630 <_vfiprintf_r+0x78>
 80185f4:	4629      	mov	r1, r5
 80185f6:	4630      	mov	r0, r6
 80185f8:	f000 fb06 	bl	8018c08 <__swsetup_r>
 80185fc:	b1c0      	cbz	r0, 8018630 <_vfiprintf_r+0x78>
 80185fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018600:	07dc      	lsls	r4, r3, #31
 8018602:	d50e      	bpl.n	8018622 <_vfiprintf_r+0x6a>
 8018604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018608:	b01d      	add	sp, #116	; 0x74
 801860a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801860e:	4b7b      	ldr	r3, [pc, #492]	; (80187fc <_vfiprintf_r+0x244>)
 8018610:	429d      	cmp	r5, r3
 8018612:	d101      	bne.n	8018618 <_vfiprintf_r+0x60>
 8018614:	68b5      	ldr	r5, [r6, #8]
 8018616:	e7df      	b.n	80185d8 <_vfiprintf_r+0x20>
 8018618:	4b79      	ldr	r3, [pc, #484]	; (8018800 <_vfiprintf_r+0x248>)
 801861a:	429d      	cmp	r5, r3
 801861c:	bf08      	it	eq
 801861e:	68f5      	ldreq	r5, [r6, #12]
 8018620:	e7da      	b.n	80185d8 <_vfiprintf_r+0x20>
 8018622:	89ab      	ldrh	r3, [r5, #12]
 8018624:	0598      	lsls	r0, r3, #22
 8018626:	d4ed      	bmi.n	8018604 <_vfiprintf_r+0x4c>
 8018628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801862a:	f7ff fa9d 	bl	8017b68 <__retarget_lock_release_recursive>
 801862e:	e7e9      	b.n	8018604 <_vfiprintf_r+0x4c>
 8018630:	2300      	movs	r3, #0
 8018632:	9309      	str	r3, [sp, #36]	; 0x24
 8018634:	2320      	movs	r3, #32
 8018636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801863a:	f8cd 800c 	str.w	r8, [sp, #12]
 801863e:	2330      	movs	r3, #48	; 0x30
 8018640:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018804 <_vfiprintf_r+0x24c>
 8018644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018648:	f04f 0901 	mov.w	r9, #1
 801864c:	4623      	mov	r3, r4
 801864e:	469a      	mov	sl, r3
 8018650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018654:	b10a      	cbz	r2, 801865a <_vfiprintf_r+0xa2>
 8018656:	2a25      	cmp	r2, #37	; 0x25
 8018658:	d1f9      	bne.n	801864e <_vfiprintf_r+0x96>
 801865a:	ebba 0b04 	subs.w	fp, sl, r4
 801865e:	d00b      	beq.n	8018678 <_vfiprintf_r+0xc0>
 8018660:	465b      	mov	r3, fp
 8018662:	4622      	mov	r2, r4
 8018664:	4629      	mov	r1, r5
 8018666:	4630      	mov	r0, r6
 8018668:	f7ff ff93 	bl	8018592 <__sfputs_r>
 801866c:	3001      	adds	r0, #1
 801866e:	f000 80aa 	beq.w	80187c6 <_vfiprintf_r+0x20e>
 8018672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018674:	445a      	add	r2, fp
 8018676:	9209      	str	r2, [sp, #36]	; 0x24
 8018678:	f89a 3000 	ldrb.w	r3, [sl]
 801867c:	2b00      	cmp	r3, #0
 801867e:	f000 80a2 	beq.w	80187c6 <_vfiprintf_r+0x20e>
 8018682:	2300      	movs	r3, #0
 8018684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801868c:	f10a 0a01 	add.w	sl, sl, #1
 8018690:	9304      	str	r3, [sp, #16]
 8018692:	9307      	str	r3, [sp, #28]
 8018694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018698:	931a      	str	r3, [sp, #104]	; 0x68
 801869a:	4654      	mov	r4, sl
 801869c:	2205      	movs	r2, #5
 801869e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186a2:	4858      	ldr	r0, [pc, #352]	; (8018804 <_vfiprintf_r+0x24c>)
 80186a4:	f7e7 fe1c 	bl	80002e0 <memchr>
 80186a8:	9a04      	ldr	r2, [sp, #16]
 80186aa:	b9d8      	cbnz	r0, 80186e4 <_vfiprintf_r+0x12c>
 80186ac:	06d1      	lsls	r1, r2, #27
 80186ae:	bf44      	itt	mi
 80186b0:	2320      	movmi	r3, #32
 80186b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186b6:	0713      	lsls	r3, r2, #28
 80186b8:	bf44      	itt	mi
 80186ba:	232b      	movmi	r3, #43	; 0x2b
 80186bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80186c0:	f89a 3000 	ldrb.w	r3, [sl]
 80186c4:	2b2a      	cmp	r3, #42	; 0x2a
 80186c6:	d015      	beq.n	80186f4 <_vfiprintf_r+0x13c>
 80186c8:	9a07      	ldr	r2, [sp, #28]
 80186ca:	4654      	mov	r4, sl
 80186cc:	2000      	movs	r0, #0
 80186ce:	f04f 0c0a 	mov.w	ip, #10
 80186d2:	4621      	mov	r1, r4
 80186d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80186d8:	3b30      	subs	r3, #48	; 0x30
 80186da:	2b09      	cmp	r3, #9
 80186dc:	d94e      	bls.n	801877c <_vfiprintf_r+0x1c4>
 80186de:	b1b0      	cbz	r0, 801870e <_vfiprintf_r+0x156>
 80186e0:	9207      	str	r2, [sp, #28]
 80186e2:	e014      	b.n	801870e <_vfiprintf_r+0x156>
 80186e4:	eba0 0308 	sub.w	r3, r0, r8
 80186e8:	fa09 f303 	lsl.w	r3, r9, r3
 80186ec:	4313      	orrs	r3, r2
 80186ee:	9304      	str	r3, [sp, #16]
 80186f0:	46a2      	mov	sl, r4
 80186f2:	e7d2      	b.n	801869a <_vfiprintf_r+0xe2>
 80186f4:	9b03      	ldr	r3, [sp, #12]
 80186f6:	1d19      	adds	r1, r3, #4
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	9103      	str	r1, [sp, #12]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	bfbb      	ittet	lt
 8018700:	425b      	neglt	r3, r3
 8018702:	f042 0202 	orrlt.w	r2, r2, #2
 8018706:	9307      	strge	r3, [sp, #28]
 8018708:	9307      	strlt	r3, [sp, #28]
 801870a:	bfb8      	it	lt
 801870c:	9204      	strlt	r2, [sp, #16]
 801870e:	7823      	ldrb	r3, [r4, #0]
 8018710:	2b2e      	cmp	r3, #46	; 0x2e
 8018712:	d10c      	bne.n	801872e <_vfiprintf_r+0x176>
 8018714:	7863      	ldrb	r3, [r4, #1]
 8018716:	2b2a      	cmp	r3, #42	; 0x2a
 8018718:	d135      	bne.n	8018786 <_vfiprintf_r+0x1ce>
 801871a:	9b03      	ldr	r3, [sp, #12]
 801871c:	1d1a      	adds	r2, r3, #4
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	9203      	str	r2, [sp, #12]
 8018722:	2b00      	cmp	r3, #0
 8018724:	bfb8      	it	lt
 8018726:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801872a:	3402      	adds	r4, #2
 801872c:	9305      	str	r3, [sp, #20]
 801872e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018814 <_vfiprintf_r+0x25c>
 8018732:	7821      	ldrb	r1, [r4, #0]
 8018734:	2203      	movs	r2, #3
 8018736:	4650      	mov	r0, sl
 8018738:	f7e7 fdd2 	bl	80002e0 <memchr>
 801873c:	b140      	cbz	r0, 8018750 <_vfiprintf_r+0x198>
 801873e:	2340      	movs	r3, #64	; 0x40
 8018740:	eba0 000a 	sub.w	r0, r0, sl
 8018744:	fa03 f000 	lsl.w	r0, r3, r0
 8018748:	9b04      	ldr	r3, [sp, #16]
 801874a:	4303      	orrs	r3, r0
 801874c:	3401      	adds	r4, #1
 801874e:	9304      	str	r3, [sp, #16]
 8018750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018754:	482c      	ldr	r0, [pc, #176]	; (8018808 <_vfiprintf_r+0x250>)
 8018756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801875a:	2206      	movs	r2, #6
 801875c:	f7e7 fdc0 	bl	80002e0 <memchr>
 8018760:	2800      	cmp	r0, #0
 8018762:	d03f      	beq.n	80187e4 <_vfiprintf_r+0x22c>
 8018764:	4b29      	ldr	r3, [pc, #164]	; (801880c <_vfiprintf_r+0x254>)
 8018766:	bb1b      	cbnz	r3, 80187b0 <_vfiprintf_r+0x1f8>
 8018768:	9b03      	ldr	r3, [sp, #12]
 801876a:	3307      	adds	r3, #7
 801876c:	f023 0307 	bic.w	r3, r3, #7
 8018770:	3308      	adds	r3, #8
 8018772:	9303      	str	r3, [sp, #12]
 8018774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018776:	443b      	add	r3, r7
 8018778:	9309      	str	r3, [sp, #36]	; 0x24
 801877a:	e767      	b.n	801864c <_vfiprintf_r+0x94>
 801877c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018780:	460c      	mov	r4, r1
 8018782:	2001      	movs	r0, #1
 8018784:	e7a5      	b.n	80186d2 <_vfiprintf_r+0x11a>
 8018786:	2300      	movs	r3, #0
 8018788:	3401      	adds	r4, #1
 801878a:	9305      	str	r3, [sp, #20]
 801878c:	4619      	mov	r1, r3
 801878e:	f04f 0c0a 	mov.w	ip, #10
 8018792:	4620      	mov	r0, r4
 8018794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018798:	3a30      	subs	r2, #48	; 0x30
 801879a:	2a09      	cmp	r2, #9
 801879c:	d903      	bls.n	80187a6 <_vfiprintf_r+0x1ee>
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d0c5      	beq.n	801872e <_vfiprintf_r+0x176>
 80187a2:	9105      	str	r1, [sp, #20]
 80187a4:	e7c3      	b.n	801872e <_vfiprintf_r+0x176>
 80187a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80187aa:	4604      	mov	r4, r0
 80187ac:	2301      	movs	r3, #1
 80187ae:	e7f0      	b.n	8018792 <_vfiprintf_r+0x1da>
 80187b0:	ab03      	add	r3, sp, #12
 80187b2:	9300      	str	r3, [sp, #0]
 80187b4:	462a      	mov	r2, r5
 80187b6:	4b16      	ldr	r3, [pc, #88]	; (8018810 <_vfiprintf_r+0x258>)
 80187b8:	a904      	add	r1, sp, #16
 80187ba:	4630      	mov	r0, r6
 80187bc:	f3af 8000 	nop.w
 80187c0:	4607      	mov	r7, r0
 80187c2:	1c78      	adds	r0, r7, #1
 80187c4:	d1d6      	bne.n	8018774 <_vfiprintf_r+0x1bc>
 80187c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80187c8:	07d9      	lsls	r1, r3, #31
 80187ca:	d405      	bmi.n	80187d8 <_vfiprintf_r+0x220>
 80187cc:	89ab      	ldrh	r3, [r5, #12]
 80187ce:	059a      	lsls	r2, r3, #22
 80187d0:	d402      	bmi.n	80187d8 <_vfiprintf_r+0x220>
 80187d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80187d4:	f7ff f9c8 	bl	8017b68 <__retarget_lock_release_recursive>
 80187d8:	89ab      	ldrh	r3, [r5, #12]
 80187da:	065b      	lsls	r3, r3, #25
 80187dc:	f53f af12 	bmi.w	8018604 <_vfiprintf_r+0x4c>
 80187e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80187e2:	e711      	b.n	8018608 <_vfiprintf_r+0x50>
 80187e4:	ab03      	add	r3, sp, #12
 80187e6:	9300      	str	r3, [sp, #0]
 80187e8:	462a      	mov	r2, r5
 80187ea:	4b09      	ldr	r3, [pc, #36]	; (8018810 <_vfiprintf_r+0x258>)
 80187ec:	a904      	add	r1, sp, #16
 80187ee:	4630      	mov	r0, r6
 80187f0:	f000 f880 	bl	80188f4 <_printf_i>
 80187f4:	e7e4      	b.n	80187c0 <_vfiprintf_r+0x208>
 80187f6:	bf00      	nop
 80187f8:	0801cb94 	.word	0x0801cb94
 80187fc:	0801cbb4 	.word	0x0801cbb4
 8018800:	0801cb74 	.word	0x0801cb74
 8018804:	0801cc86 	.word	0x0801cc86
 8018808:	0801cc90 	.word	0x0801cc90
 801880c:	00000000 	.word	0x00000000
 8018810:	08018593 	.word	0x08018593
 8018814:	0801cc8c 	.word	0x0801cc8c

08018818 <_printf_common>:
 8018818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801881c:	4616      	mov	r6, r2
 801881e:	4699      	mov	r9, r3
 8018820:	688a      	ldr	r2, [r1, #8]
 8018822:	690b      	ldr	r3, [r1, #16]
 8018824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018828:	4293      	cmp	r3, r2
 801882a:	bfb8      	it	lt
 801882c:	4613      	movlt	r3, r2
 801882e:	6033      	str	r3, [r6, #0]
 8018830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018834:	4607      	mov	r7, r0
 8018836:	460c      	mov	r4, r1
 8018838:	b10a      	cbz	r2, 801883e <_printf_common+0x26>
 801883a:	3301      	adds	r3, #1
 801883c:	6033      	str	r3, [r6, #0]
 801883e:	6823      	ldr	r3, [r4, #0]
 8018840:	0699      	lsls	r1, r3, #26
 8018842:	bf42      	ittt	mi
 8018844:	6833      	ldrmi	r3, [r6, #0]
 8018846:	3302      	addmi	r3, #2
 8018848:	6033      	strmi	r3, [r6, #0]
 801884a:	6825      	ldr	r5, [r4, #0]
 801884c:	f015 0506 	ands.w	r5, r5, #6
 8018850:	d106      	bne.n	8018860 <_printf_common+0x48>
 8018852:	f104 0a19 	add.w	sl, r4, #25
 8018856:	68e3      	ldr	r3, [r4, #12]
 8018858:	6832      	ldr	r2, [r6, #0]
 801885a:	1a9b      	subs	r3, r3, r2
 801885c:	42ab      	cmp	r3, r5
 801885e:	dc26      	bgt.n	80188ae <_printf_common+0x96>
 8018860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018864:	1e13      	subs	r3, r2, #0
 8018866:	6822      	ldr	r2, [r4, #0]
 8018868:	bf18      	it	ne
 801886a:	2301      	movne	r3, #1
 801886c:	0692      	lsls	r2, r2, #26
 801886e:	d42b      	bmi.n	80188c8 <_printf_common+0xb0>
 8018870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018874:	4649      	mov	r1, r9
 8018876:	4638      	mov	r0, r7
 8018878:	47c0      	blx	r8
 801887a:	3001      	adds	r0, #1
 801887c:	d01e      	beq.n	80188bc <_printf_common+0xa4>
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	68e5      	ldr	r5, [r4, #12]
 8018882:	6832      	ldr	r2, [r6, #0]
 8018884:	f003 0306 	and.w	r3, r3, #6
 8018888:	2b04      	cmp	r3, #4
 801888a:	bf08      	it	eq
 801888c:	1aad      	subeq	r5, r5, r2
 801888e:	68a3      	ldr	r3, [r4, #8]
 8018890:	6922      	ldr	r2, [r4, #16]
 8018892:	bf0c      	ite	eq
 8018894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018898:	2500      	movne	r5, #0
 801889a:	4293      	cmp	r3, r2
 801889c:	bfc4      	itt	gt
 801889e:	1a9b      	subgt	r3, r3, r2
 80188a0:	18ed      	addgt	r5, r5, r3
 80188a2:	2600      	movs	r6, #0
 80188a4:	341a      	adds	r4, #26
 80188a6:	42b5      	cmp	r5, r6
 80188a8:	d11a      	bne.n	80188e0 <_printf_common+0xc8>
 80188aa:	2000      	movs	r0, #0
 80188ac:	e008      	b.n	80188c0 <_printf_common+0xa8>
 80188ae:	2301      	movs	r3, #1
 80188b0:	4652      	mov	r2, sl
 80188b2:	4649      	mov	r1, r9
 80188b4:	4638      	mov	r0, r7
 80188b6:	47c0      	blx	r8
 80188b8:	3001      	adds	r0, #1
 80188ba:	d103      	bne.n	80188c4 <_printf_common+0xac>
 80188bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80188c4:	3501      	adds	r5, #1
 80188c6:	e7c6      	b.n	8018856 <_printf_common+0x3e>
 80188c8:	18e1      	adds	r1, r4, r3
 80188ca:	1c5a      	adds	r2, r3, #1
 80188cc:	2030      	movs	r0, #48	; 0x30
 80188ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80188d2:	4422      	add	r2, r4
 80188d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80188d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80188dc:	3302      	adds	r3, #2
 80188de:	e7c7      	b.n	8018870 <_printf_common+0x58>
 80188e0:	2301      	movs	r3, #1
 80188e2:	4622      	mov	r2, r4
 80188e4:	4649      	mov	r1, r9
 80188e6:	4638      	mov	r0, r7
 80188e8:	47c0      	blx	r8
 80188ea:	3001      	adds	r0, #1
 80188ec:	d0e6      	beq.n	80188bc <_printf_common+0xa4>
 80188ee:	3601      	adds	r6, #1
 80188f0:	e7d9      	b.n	80188a6 <_printf_common+0x8e>
	...

080188f4 <_printf_i>:
 80188f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80188f8:	7e0f      	ldrb	r7, [r1, #24]
 80188fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80188fc:	2f78      	cmp	r7, #120	; 0x78
 80188fe:	4691      	mov	r9, r2
 8018900:	4680      	mov	r8, r0
 8018902:	460c      	mov	r4, r1
 8018904:	469a      	mov	sl, r3
 8018906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801890a:	d807      	bhi.n	801891c <_printf_i+0x28>
 801890c:	2f62      	cmp	r7, #98	; 0x62
 801890e:	d80a      	bhi.n	8018926 <_printf_i+0x32>
 8018910:	2f00      	cmp	r7, #0
 8018912:	f000 80d8 	beq.w	8018ac6 <_printf_i+0x1d2>
 8018916:	2f58      	cmp	r7, #88	; 0x58
 8018918:	f000 80a3 	beq.w	8018a62 <_printf_i+0x16e>
 801891c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018924:	e03a      	b.n	801899c <_printf_i+0xa8>
 8018926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801892a:	2b15      	cmp	r3, #21
 801892c:	d8f6      	bhi.n	801891c <_printf_i+0x28>
 801892e:	a101      	add	r1, pc, #4	; (adr r1, 8018934 <_printf_i+0x40>)
 8018930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018934:	0801898d 	.word	0x0801898d
 8018938:	080189a1 	.word	0x080189a1
 801893c:	0801891d 	.word	0x0801891d
 8018940:	0801891d 	.word	0x0801891d
 8018944:	0801891d 	.word	0x0801891d
 8018948:	0801891d 	.word	0x0801891d
 801894c:	080189a1 	.word	0x080189a1
 8018950:	0801891d 	.word	0x0801891d
 8018954:	0801891d 	.word	0x0801891d
 8018958:	0801891d 	.word	0x0801891d
 801895c:	0801891d 	.word	0x0801891d
 8018960:	08018aad 	.word	0x08018aad
 8018964:	080189d1 	.word	0x080189d1
 8018968:	08018a8f 	.word	0x08018a8f
 801896c:	0801891d 	.word	0x0801891d
 8018970:	0801891d 	.word	0x0801891d
 8018974:	08018acf 	.word	0x08018acf
 8018978:	0801891d 	.word	0x0801891d
 801897c:	080189d1 	.word	0x080189d1
 8018980:	0801891d 	.word	0x0801891d
 8018984:	0801891d 	.word	0x0801891d
 8018988:	08018a97 	.word	0x08018a97
 801898c:	682b      	ldr	r3, [r5, #0]
 801898e:	1d1a      	adds	r2, r3, #4
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	602a      	str	r2, [r5, #0]
 8018994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801899c:	2301      	movs	r3, #1
 801899e:	e0a3      	b.n	8018ae8 <_printf_i+0x1f4>
 80189a0:	6820      	ldr	r0, [r4, #0]
 80189a2:	6829      	ldr	r1, [r5, #0]
 80189a4:	0606      	lsls	r6, r0, #24
 80189a6:	f101 0304 	add.w	r3, r1, #4
 80189aa:	d50a      	bpl.n	80189c2 <_printf_i+0xce>
 80189ac:	680e      	ldr	r6, [r1, #0]
 80189ae:	602b      	str	r3, [r5, #0]
 80189b0:	2e00      	cmp	r6, #0
 80189b2:	da03      	bge.n	80189bc <_printf_i+0xc8>
 80189b4:	232d      	movs	r3, #45	; 0x2d
 80189b6:	4276      	negs	r6, r6
 80189b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80189bc:	485e      	ldr	r0, [pc, #376]	; (8018b38 <_printf_i+0x244>)
 80189be:	230a      	movs	r3, #10
 80189c0:	e019      	b.n	80189f6 <_printf_i+0x102>
 80189c2:	680e      	ldr	r6, [r1, #0]
 80189c4:	602b      	str	r3, [r5, #0]
 80189c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80189ca:	bf18      	it	ne
 80189cc:	b236      	sxthne	r6, r6
 80189ce:	e7ef      	b.n	80189b0 <_printf_i+0xbc>
 80189d0:	682b      	ldr	r3, [r5, #0]
 80189d2:	6820      	ldr	r0, [r4, #0]
 80189d4:	1d19      	adds	r1, r3, #4
 80189d6:	6029      	str	r1, [r5, #0]
 80189d8:	0601      	lsls	r1, r0, #24
 80189da:	d501      	bpl.n	80189e0 <_printf_i+0xec>
 80189dc:	681e      	ldr	r6, [r3, #0]
 80189de:	e002      	b.n	80189e6 <_printf_i+0xf2>
 80189e0:	0646      	lsls	r6, r0, #25
 80189e2:	d5fb      	bpl.n	80189dc <_printf_i+0xe8>
 80189e4:	881e      	ldrh	r6, [r3, #0]
 80189e6:	4854      	ldr	r0, [pc, #336]	; (8018b38 <_printf_i+0x244>)
 80189e8:	2f6f      	cmp	r7, #111	; 0x6f
 80189ea:	bf0c      	ite	eq
 80189ec:	2308      	moveq	r3, #8
 80189ee:	230a      	movne	r3, #10
 80189f0:	2100      	movs	r1, #0
 80189f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80189f6:	6865      	ldr	r5, [r4, #4]
 80189f8:	60a5      	str	r5, [r4, #8]
 80189fa:	2d00      	cmp	r5, #0
 80189fc:	bfa2      	ittt	ge
 80189fe:	6821      	ldrge	r1, [r4, #0]
 8018a00:	f021 0104 	bicge.w	r1, r1, #4
 8018a04:	6021      	strge	r1, [r4, #0]
 8018a06:	b90e      	cbnz	r6, 8018a0c <_printf_i+0x118>
 8018a08:	2d00      	cmp	r5, #0
 8018a0a:	d04d      	beq.n	8018aa8 <_printf_i+0x1b4>
 8018a0c:	4615      	mov	r5, r2
 8018a0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018a12:	fb03 6711 	mls	r7, r3, r1, r6
 8018a16:	5dc7      	ldrb	r7, [r0, r7]
 8018a18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018a1c:	4637      	mov	r7, r6
 8018a1e:	42bb      	cmp	r3, r7
 8018a20:	460e      	mov	r6, r1
 8018a22:	d9f4      	bls.n	8018a0e <_printf_i+0x11a>
 8018a24:	2b08      	cmp	r3, #8
 8018a26:	d10b      	bne.n	8018a40 <_printf_i+0x14c>
 8018a28:	6823      	ldr	r3, [r4, #0]
 8018a2a:	07de      	lsls	r6, r3, #31
 8018a2c:	d508      	bpl.n	8018a40 <_printf_i+0x14c>
 8018a2e:	6923      	ldr	r3, [r4, #16]
 8018a30:	6861      	ldr	r1, [r4, #4]
 8018a32:	4299      	cmp	r1, r3
 8018a34:	bfde      	ittt	le
 8018a36:	2330      	movle	r3, #48	; 0x30
 8018a38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018a3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018a40:	1b52      	subs	r2, r2, r5
 8018a42:	6122      	str	r2, [r4, #16]
 8018a44:	f8cd a000 	str.w	sl, [sp]
 8018a48:	464b      	mov	r3, r9
 8018a4a:	aa03      	add	r2, sp, #12
 8018a4c:	4621      	mov	r1, r4
 8018a4e:	4640      	mov	r0, r8
 8018a50:	f7ff fee2 	bl	8018818 <_printf_common>
 8018a54:	3001      	adds	r0, #1
 8018a56:	d14c      	bne.n	8018af2 <_printf_i+0x1fe>
 8018a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a5c:	b004      	add	sp, #16
 8018a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a62:	4835      	ldr	r0, [pc, #212]	; (8018b38 <_printf_i+0x244>)
 8018a64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018a68:	6829      	ldr	r1, [r5, #0]
 8018a6a:	6823      	ldr	r3, [r4, #0]
 8018a6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8018a70:	6029      	str	r1, [r5, #0]
 8018a72:	061d      	lsls	r5, r3, #24
 8018a74:	d514      	bpl.n	8018aa0 <_printf_i+0x1ac>
 8018a76:	07df      	lsls	r7, r3, #31
 8018a78:	bf44      	itt	mi
 8018a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8018a7e:	6023      	strmi	r3, [r4, #0]
 8018a80:	b91e      	cbnz	r6, 8018a8a <_printf_i+0x196>
 8018a82:	6823      	ldr	r3, [r4, #0]
 8018a84:	f023 0320 	bic.w	r3, r3, #32
 8018a88:	6023      	str	r3, [r4, #0]
 8018a8a:	2310      	movs	r3, #16
 8018a8c:	e7b0      	b.n	80189f0 <_printf_i+0xfc>
 8018a8e:	6823      	ldr	r3, [r4, #0]
 8018a90:	f043 0320 	orr.w	r3, r3, #32
 8018a94:	6023      	str	r3, [r4, #0]
 8018a96:	2378      	movs	r3, #120	; 0x78
 8018a98:	4828      	ldr	r0, [pc, #160]	; (8018b3c <_printf_i+0x248>)
 8018a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018a9e:	e7e3      	b.n	8018a68 <_printf_i+0x174>
 8018aa0:	0659      	lsls	r1, r3, #25
 8018aa2:	bf48      	it	mi
 8018aa4:	b2b6      	uxthmi	r6, r6
 8018aa6:	e7e6      	b.n	8018a76 <_printf_i+0x182>
 8018aa8:	4615      	mov	r5, r2
 8018aaa:	e7bb      	b.n	8018a24 <_printf_i+0x130>
 8018aac:	682b      	ldr	r3, [r5, #0]
 8018aae:	6826      	ldr	r6, [r4, #0]
 8018ab0:	6961      	ldr	r1, [r4, #20]
 8018ab2:	1d18      	adds	r0, r3, #4
 8018ab4:	6028      	str	r0, [r5, #0]
 8018ab6:	0635      	lsls	r5, r6, #24
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	d501      	bpl.n	8018ac0 <_printf_i+0x1cc>
 8018abc:	6019      	str	r1, [r3, #0]
 8018abe:	e002      	b.n	8018ac6 <_printf_i+0x1d2>
 8018ac0:	0670      	lsls	r0, r6, #25
 8018ac2:	d5fb      	bpl.n	8018abc <_printf_i+0x1c8>
 8018ac4:	8019      	strh	r1, [r3, #0]
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	6123      	str	r3, [r4, #16]
 8018aca:	4615      	mov	r5, r2
 8018acc:	e7ba      	b.n	8018a44 <_printf_i+0x150>
 8018ace:	682b      	ldr	r3, [r5, #0]
 8018ad0:	1d1a      	adds	r2, r3, #4
 8018ad2:	602a      	str	r2, [r5, #0]
 8018ad4:	681d      	ldr	r5, [r3, #0]
 8018ad6:	6862      	ldr	r2, [r4, #4]
 8018ad8:	2100      	movs	r1, #0
 8018ada:	4628      	mov	r0, r5
 8018adc:	f7e7 fc00 	bl	80002e0 <memchr>
 8018ae0:	b108      	cbz	r0, 8018ae6 <_printf_i+0x1f2>
 8018ae2:	1b40      	subs	r0, r0, r5
 8018ae4:	6060      	str	r0, [r4, #4]
 8018ae6:	6863      	ldr	r3, [r4, #4]
 8018ae8:	6123      	str	r3, [r4, #16]
 8018aea:	2300      	movs	r3, #0
 8018aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018af0:	e7a8      	b.n	8018a44 <_printf_i+0x150>
 8018af2:	6923      	ldr	r3, [r4, #16]
 8018af4:	462a      	mov	r2, r5
 8018af6:	4649      	mov	r1, r9
 8018af8:	4640      	mov	r0, r8
 8018afa:	47d0      	blx	sl
 8018afc:	3001      	adds	r0, #1
 8018afe:	d0ab      	beq.n	8018a58 <_printf_i+0x164>
 8018b00:	6823      	ldr	r3, [r4, #0]
 8018b02:	079b      	lsls	r3, r3, #30
 8018b04:	d413      	bmi.n	8018b2e <_printf_i+0x23a>
 8018b06:	68e0      	ldr	r0, [r4, #12]
 8018b08:	9b03      	ldr	r3, [sp, #12]
 8018b0a:	4298      	cmp	r0, r3
 8018b0c:	bfb8      	it	lt
 8018b0e:	4618      	movlt	r0, r3
 8018b10:	e7a4      	b.n	8018a5c <_printf_i+0x168>
 8018b12:	2301      	movs	r3, #1
 8018b14:	4632      	mov	r2, r6
 8018b16:	4649      	mov	r1, r9
 8018b18:	4640      	mov	r0, r8
 8018b1a:	47d0      	blx	sl
 8018b1c:	3001      	adds	r0, #1
 8018b1e:	d09b      	beq.n	8018a58 <_printf_i+0x164>
 8018b20:	3501      	adds	r5, #1
 8018b22:	68e3      	ldr	r3, [r4, #12]
 8018b24:	9903      	ldr	r1, [sp, #12]
 8018b26:	1a5b      	subs	r3, r3, r1
 8018b28:	42ab      	cmp	r3, r5
 8018b2a:	dcf2      	bgt.n	8018b12 <_printf_i+0x21e>
 8018b2c:	e7eb      	b.n	8018b06 <_printf_i+0x212>
 8018b2e:	2500      	movs	r5, #0
 8018b30:	f104 0619 	add.w	r6, r4, #25
 8018b34:	e7f5      	b.n	8018b22 <_printf_i+0x22e>
 8018b36:	bf00      	nop
 8018b38:	0801cc97 	.word	0x0801cc97
 8018b3c:	0801cca8 	.word	0x0801cca8

08018b40 <_read_r>:
 8018b40:	b538      	push	{r3, r4, r5, lr}
 8018b42:	4d07      	ldr	r5, [pc, #28]	; (8018b60 <_read_r+0x20>)
 8018b44:	4604      	mov	r4, r0
 8018b46:	4608      	mov	r0, r1
 8018b48:	4611      	mov	r1, r2
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	602a      	str	r2, [r5, #0]
 8018b4e:	461a      	mov	r2, r3
 8018b50:	f7e8 f920 	bl	8000d94 <_read>
 8018b54:	1c43      	adds	r3, r0, #1
 8018b56:	d102      	bne.n	8018b5e <_read_r+0x1e>
 8018b58:	682b      	ldr	r3, [r5, #0]
 8018b5a:	b103      	cbz	r3, 8018b5e <_read_r+0x1e>
 8018b5c:	6023      	str	r3, [r4, #0]
 8018b5e:	bd38      	pop	{r3, r4, r5, pc}
 8018b60:	2400f2a4 	.word	0x2400f2a4

08018b64 <__swbuf_r>:
 8018b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b66:	460e      	mov	r6, r1
 8018b68:	4614      	mov	r4, r2
 8018b6a:	4605      	mov	r5, r0
 8018b6c:	b118      	cbz	r0, 8018b76 <__swbuf_r+0x12>
 8018b6e:	6983      	ldr	r3, [r0, #24]
 8018b70:	b90b      	cbnz	r3, 8018b76 <__swbuf_r+0x12>
 8018b72:	f7fe ff35 	bl	80179e0 <__sinit>
 8018b76:	4b21      	ldr	r3, [pc, #132]	; (8018bfc <__swbuf_r+0x98>)
 8018b78:	429c      	cmp	r4, r3
 8018b7a:	d12b      	bne.n	8018bd4 <__swbuf_r+0x70>
 8018b7c:	686c      	ldr	r4, [r5, #4]
 8018b7e:	69a3      	ldr	r3, [r4, #24]
 8018b80:	60a3      	str	r3, [r4, #8]
 8018b82:	89a3      	ldrh	r3, [r4, #12]
 8018b84:	071a      	lsls	r2, r3, #28
 8018b86:	d52f      	bpl.n	8018be8 <__swbuf_r+0x84>
 8018b88:	6923      	ldr	r3, [r4, #16]
 8018b8a:	b36b      	cbz	r3, 8018be8 <__swbuf_r+0x84>
 8018b8c:	6923      	ldr	r3, [r4, #16]
 8018b8e:	6820      	ldr	r0, [r4, #0]
 8018b90:	1ac0      	subs	r0, r0, r3
 8018b92:	6963      	ldr	r3, [r4, #20]
 8018b94:	b2f6      	uxtb	r6, r6
 8018b96:	4283      	cmp	r3, r0
 8018b98:	4637      	mov	r7, r6
 8018b9a:	dc04      	bgt.n	8018ba6 <__swbuf_r+0x42>
 8018b9c:	4621      	mov	r1, r4
 8018b9e:	4628      	mov	r0, r5
 8018ba0:	f7ff fac4 	bl	801812c <_fflush_r>
 8018ba4:	bb30      	cbnz	r0, 8018bf4 <__swbuf_r+0x90>
 8018ba6:	68a3      	ldr	r3, [r4, #8]
 8018ba8:	3b01      	subs	r3, #1
 8018baa:	60a3      	str	r3, [r4, #8]
 8018bac:	6823      	ldr	r3, [r4, #0]
 8018bae:	1c5a      	adds	r2, r3, #1
 8018bb0:	6022      	str	r2, [r4, #0]
 8018bb2:	701e      	strb	r6, [r3, #0]
 8018bb4:	6963      	ldr	r3, [r4, #20]
 8018bb6:	3001      	adds	r0, #1
 8018bb8:	4283      	cmp	r3, r0
 8018bba:	d004      	beq.n	8018bc6 <__swbuf_r+0x62>
 8018bbc:	89a3      	ldrh	r3, [r4, #12]
 8018bbe:	07db      	lsls	r3, r3, #31
 8018bc0:	d506      	bpl.n	8018bd0 <__swbuf_r+0x6c>
 8018bc2:	2e0a      	cmp	r6, #10
 8018bc4:	d104      	bne.n	8018bd0 <__swbuf_r+0x6c>
 8018bc6:	4621      	mov	r1, r4
 8018bc8:	4628      	mov	r0, r5
 8018bca:	f7ff faaf 	bl	801812c <_fflush_r>
 8018bce:	b988      	cbnz	r0, 8018bf4 <__swbuf_r+0x90>
 8018bd0:	4638      	mov	r0, r7
 8018bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bd4:	4b0a      	ldr	r3, [pc, #40]	; (8018c00 <__swbuf_r+0x9c>)
 8018bd6:	429c      	cmp	r4, r3
 8018bd8:	d101      	bne.n	8018bde <__swbuf_r+0x7a>
 8018bda:	68ac      	ldr	r4, [r5, #8]
 8018bdc:	e7cf      	b.n	8018b7e <__swbuf_r+0x1a>
 8018bde:	4b09      	ldr	r3, [pc, #36]	; (8018c04 <__swbuf_r+0xa0>)
 8018be0:	429c      	cmp	r4, r3
 8018be2:	bf08      	it	eq
 8018be4:	68ec      	ldreq	r4, [r5, #12]
 8018be6:	e7ca      	b.n	8018b7e <__swbuf_r+0x1a>
 8018be8:	4621      	mov	r1, r4
 8018bea:	4628      	mov	r0, r5
 8018bec:	f000 f80c 	bl	8018c08 <__swsetup_r>
 8018bf0:	2800      	cmp	r0, #0
 8018bf2:	d0cb      	beq.n	8018b8c <__swbuf_r+0x28>
 8018bf4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018bf8:	e7ea      	b.n	8018bd0 <__swbuf_r+0x6c>
 8018bfa:	bf00      	nop
 8018bfc:	0801cb94 	.word	0x0801cb94
 8018c00:	0801cbb4 	.word	0x0801cbb4
 8018c04:	0801cb74 	.word	0x0801cb74

08018c08 <__swsetup_r>:
 8018c08:	4b32      	ldr	r3, [pc, #200]	; (8018cd4 <__swsetup_r+0xcc>)
 8018c0a:	b570      	push	{r4, r5, r6, lr}
 8018c0c:	681d      	ldr	r5, [r3, #0]
 8018c0e:	4606      	mov	r6, r0
 8018c10:	460c      	mov	r4, r1
 8018c12:	b125      	cbz	r5, 8018c1e <__swsetup_r+0x16>
 8018c14:	69ab      	ldr	r3, [r5, #24]
 8018c16:	b913      	cbnz	r3, 8018c1e <__swsetup_r+0x16>
 8018c18:	4628      	mov	r0, r5
 8018c1a:	f7fe fee1 	bl	80179e0 <__sinit>
 8018c1e:	4b2e      	ldr	r3, [pc, #184]	; (8018cd8 <__swsetup_r+0xd0>)
 8018c20:	429c      	cmp	r4, r3
 8018c22:	d10f      	bne.n	8018c44 <__swsetup_r+0x3c>
 8018c24:	686c      	ldr	r4, [r5, #4]
 8018c26:	89a3      	ldrh	r3, [r4, #12]
 8018c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018c2c:	0719      	lsls	r1, r3, #28
 8018c2e:	d42c      	bmi.n	8018c8a <__swsetup_r+0x82>
 8018c30:	06dd      	lsls	r5, r3, #27
 8018c32:	d411      	bmi.n	8018c58 <__swsetup_r+0x50>
 8018c34:	2309      	movs	r3, #9
 8018c36:	6033      	str	r3, [r6, #0]
 8018c38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018c3c:	81a3      	strh	r3, [r4, #12]
 8018c3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018c42:	e03e      	b.n	8018cc2 <__swsetup_r+0xba>
 8018c44:	4b25      	ldr	r3, [pc, #148]	; (8018cdc <__swsetup_r+0xd4>)
 8018c46:	429c      	cmp	r4, r3
 8018c48:	d101      	bne.n	8018c4e <__swsetup_r+0x46>
 8018c4a:	68ac      	ldr	r4, [r5, #8]
 8018c4c:	e7eb      	b.n	8018c26 <__swsetup_r+0x1e>
 8018c4e:	4b24      	ldr	r3, [pc, #144]	; (8018ce0 <__swsetup_r+0xd8>)
 8018c50:	429c      	cmp	r4, r3
 8018c52:	bf08      	it	eq
 8018c54:	68ec      	ldreq	r4, [r5, #12]
 8018c56:	e7e6      	b.n	8018c26 <__swsetup_r+0x1e>
 8018c58:	0758      	lsls	r0, r3, #29
 8018c5a:	d512      	bpl.n	8018c82 <__swsetup_r+0x7a>
 8018c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c5e:	b141      	cbz	r1, 8018c72 <__swsetup_r+0x6a>
 8018c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c64:	4299      	cmp	r1, r3
 8018c66:	d002      	beq.n	8018c6e <__swsetup_r+0x66>
 8018c68:	4630      	mov	r0, r6
 8018c6a:	f7ff fad3 	bl	8018214 <_free_r>
 8018c6e:	2300      	movs	r3, #0
 8018c70:	6363      	str	r3, [r4, #52]	; 0x34
 8018c72:	89a3      	ldrh	r3, [r4, #12]
 8018c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018c78:	81a3      	strh	r3, [r4, #12]
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	6063      	str	r3, [r4, #4]
 8018c7e:	6923      	ldr	r3, [r4, #16]
 8018c80:	6023      	str	r3, [r4, #0]
 8018c82:	89a3      	ldrh	r3, [r4, #12]
 8018c84:	f043 0308 	orr.w	r3, r3, #8
 8018c88:	81a3      	strh	r3, [r4, #12]
 8018c8a:	6923      	ldr	r3, [r4, #16]
 8018c8c:	b94b      	cbnz	r3, 8018ca2 <__swsetup_r+0x9a>
 8018c8e:	89a3      	ldrh	r3, [r4, #12]
 8018c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c98:	d003      	beq.n	8018ca2 <__swsetup_r+0x9a>
 8018c9a:	4621      	mov	r1, r4
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	f000 f84d 	bl	8018d3c <__smakebuf_r>
 8018ca2:	89a0      	ldrh	r0, [r4, #12]
 8018ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018ca8:	f010 0301 	ands.w	r3, r0, #1
 8018cac:	d00a      	beq.n	8018cc4 <__swsetup_r+0xbc>
 8018cae:	2300      	movs	r3, #0
 8018cb0:	60a3      	str	r3, [r4, #8]
 8018cb2:	6963      	ldr	r3, [r4, #20]
 8018cb4:	425b      	negs	r3, r3
 8018cb6:	61a3      	str	r3, [r4, #24]
 8018cb8:	6923      	ldr	r3, [r4, #16]
 8018cba:	b943      	cbnz	r3, 8018cce <__swsetup_r+0xc6>
 8018cbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018cc0:	d1ba      	bne.n	8018c38 <__swsetup_r+0x30>
 8018cc2:	bd70      	pop	{r4, r5, r6, pc}
 8018cc4:	0781      	lsls	r1, r0, #30
 8018cc6:	bf58      	it	pl
 8018cc8:	6963      	ldrpl	r3, [r4, #20]
 8018cca:	60a3      	str	r3, [r4, #8]
 8018ccc:	e7f4      	b.n	8018cb8 <__swsetup_r+0xb0>
 8018cce:	2000      	movs	r0, #0
 8018cd0:	e7f7      	b.n	8018cc2 <__swsetup_r+0xba>
 8018cd2:	bf00      	nop
 8018cd4:	24000034 	.word	0x24000034
 8018cd8:	0801cb94 	.word	0x0801cb94
 8018cdc:	0801cbb4 	.word	0x0801cbb4
 8018ce0:	0801cb74 	.word	0x0801cb74

08018ce4 <abort>:
 8018ce4:	b508      	push	{r3, lr}
 8018ce6:	2006      	movs	r0, #6
 8018ce8:	f000 f8c0 	bl	8018e6c <raise>
 8018cec:	2001      	movs	r0, #1
 8018cee:	f7e8 f847 	bl	8000d80 <_exit>

08018cf2 <__swhatbuf_r>:
 8018cf2:	b570      	push	{r4, r5, r6, lr}
 8018cf4:	460e      	mov	r6, r1
 8018cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018cfa:	2900      	cmp	r1, #0
 8018cfc:	b096      	sub	sp, #88	; 0x58
 8018cfe:	4614      	mov	r4, r2
 8018d00:	461d      	mov	r5, r3
 8018d02:	da08      	bge.n	8018d16 <__swhatbuf_r+0x24>
 8018d04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018d08:	2200      	movs	r2, #0
 8018d0a:	602a      	str	r2, [r5, #0]
 8018d0c:	061a      	lsls	r2, r3, #24
 8018d0e:	d410      	bmi.n	8018d32 <__swhatbuf_r+0x40>
 8018d10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d14:	e00e      	b.n	8018d34 <__swhatbuf_r+0x42>
 8018d16:	466a      	mov	r2, sp
 8018d18:	f000 f8c4 	bl	8018ea4 <_fstat_r>
 8018d1c:	2800      	cmp	r0, #0
 8018d1e:	dbf1      	blt.n	8018d04 <__swhatbuf_r+0x12>
 8018d20:	9a01      	ldr	r2, [sp, #4]
 8018d22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018d26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018d2a:	425a      	negs	r2, r3
 8018d2c:	415a      	adcs	r2, r3
 8018d2e:	602a      	str	r2, [r5, #0]
 8018d30:	e7ee      	b.n	8018d10 <__swhatbuf_r+0x1e>
 8018d32:	2340      	movs	r3, #64	; 0x40
 8018d34:	2000      	movs	r0, #0
 8018d36:	6023      	str	r3, [r4, #0]
 8018d38:	b016      	add	sp, #88	; 0x58
 8018d3a:	bd70      	pop	{r4, r5, r6, pc}

08018d3c <__smakebuf_r>:
 8018d3c:	898b      	ldrh	r3, [r1, #12]
 8018d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018d40:	079d      	lsls	r5, r3, #30
 8018d42:	4606      	mov	r6, r0
 8018d44:	460c      	mov	r4, r1
 8018d46:	d507      	bpl.n	8018d58 <__smakebuf_r+0x1c>
 8018d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018d4c:	6023      	str	r3, [r4, #0]
 8018d4e:	6123      	str	r3, [r4, #16]
 8018d50:	2301      	movs	r3, #1
 8018d52:	6163      	str	r3, [r4, #20]
 8018d54:	b002      	add	sp, #8
 8018d56:	bd70      	pop	{r4, r5, r6, pc}
 8018d58:	ab01      	add	r3, sp, #4
 8018d5a:	466a      	mov	r2, sp
 8018d5c:	f7ff ffc9 	bl	8018cf2 <__swhatbuf_r>
 8018d60:	9900      	ldr	r1, [sp, #0]
 8018d62:	4605      	mov	r5, r0
 8018d64:	4630      	mov	r0, r6
 8018d66:	f7fe ff61 	bl	8017c2c <_malloc_r>
 8018d6a:	b948      	cbnz	r0, 8018d80 <__smakebuf_r+0x44>
 8018d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d70:	059a      	lsls	r2, r3, #22
 8018d72:	d4ef      	bmi.n	8018d54 <__smakebuf_r+0x18>
 8018d74:	f023 0303 	bic.w	r3, r3, #3
 8018d78:	f043 0302 	orr.w	r3, r3, #2
 8018d7c:	81a3      	strh	r3, [r4, #12]
 8018d7e:	e7e3      	b.n	8018d48 <__smakebuf_r+0xc>
 8018d80:	4b0d      	ldr	r3, [pc, #52]	; (8018db8 <__smakebuf_r+0x7c>)
 8018d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8018d84:	89a3      	ldrh	r3, [r4, #12]
 8018d86:	6020      	str	r0, [r4, #0]
 8018d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d8c:	81a3      	strh	r3, [r4, #12]
 8018d8e:	9b00      	ldr	r3, [sp, #0]
 8018d90:	6163      	str	r3, [r4, #20]
 8018d92:	9b01      	ldr	r3, [sp, #4]
 8018d94:	6120      	str	r0, [r4, #16]
 8018d96:	b15b      	cbz	r3, 8018db0 <__smakebuf_r+0x74>
 8018d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d9c:	4630      	mov	r0, r6
 8018d9e:	f000 f893 	bl	8018ec8 <_isatty_r>
 8018da2:	b128      	cbz	r0, 8018db0 <__smakebuf_r+0x74>
 8018da4:	89a3      	ldrh	r3, [r4, #12]
 8018da6:	f023 0303 	bic.w	r3, r3, #3
 8018daa:	f043 0301 	orr.w	r3, r3, #1
 8018dae:	81a3      	strh	r3, [r4, #12]
 8018db0:	89a0      	ldrh	r0, [r4, #12]
 8018db2:	4305      	orrs	r5, r0
 8018db4:	81a5      	strh	r5, [r4, #12]
 8018db6:	e7cd      	b.n	8018d54 <__smakebuf_r+0x18>
 8018db8:	08017979 	.word	0x08017979

08018dbc <_realloc_r>:
 8018dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dc0:	4680      	mov	r8, r0
 8018dc2:	4614      	mov	r4, r2
 8018dc4:	460e      	mov	r6, r1
 8018dc6:	b921      	cbnz	r1, 8018dd2 <_realloc_r+0x16>
 8018dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018dcc:	4611      	mov	r1, r2
 8018dce:	f7fe bf2d 	b.w	8017c2c <_malloc_r>
 8018dd2:	b92a      	cbnz	r2, 8018de0 <_realloc_r+0x24>
 8018dd4:	f7ff fa1e 	bl	8018214 <_free_r>
 8018dd8:	4625      	mov	r5, r4
 8018dda:	4628      	mov	r0, r5
 8018ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018de0:	f000 f882 	bl	8018ee8 <_malloc_usable_size_r>
 8018de4:	4284      	cmp	r4, r0
 8018de6:	4607      	mov	r7, r0
 8018de8:	d802      	bhi.n	8018df0 <_realloc_r+0x34>
 8018dea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018dee:	d812      	bhi.n	8018e16 <_realloc_r+0x5a>
 8018df0:	4621      	mov	r1, r4
 8018df2:	4640      	mov	r0, r8
 8018df4:	f7fe ff1a 	bl	8017c2c <_malloc_r>
 8018df8:	4605      	mov	r5, r0
 8018dfa:	2800      	cmp	r0, #0
 8018dfc:	d0ed      	beq.n	8018dda <_realloc_r+0x1e>
 8018dfe:	42bc      	cmp	r4, r7
 8018e00:	4622      	mov	r2, r4
 8018e02:	4631      	mov	r1, r6
 8018e04:	bf28      	it	cs
 8018e06:	463a      	movcs	r2, r7
 8018e08:	f7fe febf 	bl	8017b8a <memcpy>
 8018e0c:	4631      	mov	r1, r6
 8018e0e:	4640      	mov	r0, r8
 8018e10:	f7ff fa00 	bl	8018214 <_free_r>
 8018e14:	e7e1      	b.n	8018dda <_realloc_r+0x1e>
 8018e16:	4635      	mov	r5, r6
 8018e18:	e7df      	b.n	8018dda <_realloc_r+0x1e>

08018e1a <_raise_r>:
 8018e1a:	291f      	cmp	r1, #31
 8018e1c:	b538      	push	{r3, r4, r5, lr}
 8018e1e:	4604      	mov	r4, r0
 8018e20:	460d      	mov	r5, r1
 8018e22:	d904      	bls.n	8018e2e <_raise_r+0x14>
 8018e24:	2316      	movs	r3, #22
 8018e26:	6003      	str	r3, [r0, #0]
 8018e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e2c:	bd38      	pop	{r3, r4, r5, pc}
 8018e2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018e30:	b112      	cbz	r2, 8018e38 <_raise_r+0x1e>
 8018e32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018e36:	b94b      	cbnz	r3, 8018e4c <_raise_r+0x32>
 8018e38:	4620      	mov	r0, r4
 8018e3a:	f000 f831 	bl	8018ea0 <_getpid_r>
 8018e3e:	462a      	mov	r2, r5
 8018e40:	4601      	mov	r1, r0
 8018e42:	4620      	mov	r0, r4
 8018e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e48:	f000 b818 	b.w	8018e7c <_kill_r>
 8018e4c:	2b01      	cmp	r3, #1
 8018e4e:	d00a      	beq.n	8018e66 <_raise_r+0x4c>
 8018e50:	1c59      	adds	r1, r3, #1
 8018e52:	d103      	bne.n	8018e5c <_raise_r+0x42>
 8018e54:	2316      	movs	r3, #22
 8018e56:	6003      	str	r3, [r0, #0]
 8018e58:	2001      	movs	r0, #1
 8018e5a:	e7e7      	b.n	8018e2c <_raise_r+0x12>
 8018e5c:	2400      	movs	r4, #0
 8018e5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018e62:	4628      	mov	r0, r5
 8018e64:	4798      	blx	r3
 8018e66:	2000      	movs	r0, #0
 8018e68:	e7e0      	b.n	8018e2c <_raise_r+0x12>
	...

08018e6c <raise>:
 8018e6c:	4b02      	ldr	r3, [pc, #8]	; (8018e78 <raise+0xc>)
 8018e6e:	4601      	mov	r1, r0
 8018e70:	6818      	ldr	r0, [r3, #0]
 8018e72:	f7ff bfd2 	b.w	8018e1a <_raise_r>
 8018e76:	bf00      	nop
 8018e78:	24000034 	.word	0x24000034

08018e7c <_kill_r>:
 8018e7c:	b538      	push	{r3, r4, r5, lr}
 8018e7e:	4d07      	ldr	r5, [pc, #28]	; (8018e9c <_kill_r+0x20>)
 8018e80:	2300      	movs	r3, #0
 8018e82:	4604      	mov	r4, r0
 8018e84:	4608      	mov	r0, r1
 8018e86:	4611      	mov	r1, r2
 8018e88:	602b      	str	r3, [r5, #0]
 8018e8a:	f7e7 ff67 	bl	8000d5c <_kill>
 8018e8e:	1c43      	adds	r3, r0, #1
 8018e90:	d102      	bne.n	8018e98 <_kill_r+0x1c>
 8018e92:	682b      	ldr	r3, [r5, #0]
 8018e94:	b103      	cbz	r3, 8018e98 <_kill_r+0x1c>
 8018e96:	6023      	str	r3, [r4, #0]
 8018e98:	bd38      	pop	{r3, r4, r5, pc}
 8018e9a:	bf00      	nop
 8018e9c:	2400f2a4 	.word	0x2400f2a4

08018ea0 <_getpid_r>:
 8018ea0:	f7e7 bf54 	b.w	8000d4c <_getpid>

08018ea4 <_fstat_r>:
 8018ea4:	b538      	push	{r3, r4, r5, lr}
 8018ea6:	4d07      	ldr	r5, [pc, #28]	; (8018ec4 <_fstat_r+0x20>)
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	4604      	mov	r4, r0
 8018eac:	4608      	mov	r0, r1
 8018eae:	4611      	mov	r1, r2
 8018eb0:	602b      	str	r3, [r5, #0]
 8018eb2:	f7e7 ffb4 	bl	8000e1e <_fstat>
 8018eb6:	1c43      	adds	r3, r0, #1
 8018eb8:	d102      	bne.n	8018ec0 <_fstat_r+0x1c>
 8018eba:	682b      	ldr	r3, [r5, #0]
 8018ebc:	b103      	cbz	r3, 8018ec0 <_fstat_r+0x1c>
 8018ebe:	6023      	str	r3, [r4, #0]
 8018ec0:	bd38      	pop	{r3, r4, r5, pc}
 8018ec2:	bf00      	nop
 8018ec4:	2400f2a4 	.word	0x2400f2a4

08018ec8 <_isatty_r>:
 8018ec8:	b538      	push	{r3, r4, r5, lr}
 8018eca:	4d06      	ldr	r5, [pc, #24]	; (8018ee4 <_isatty_r+0x1c>)
 8018ecc:	2300      	movs	r3, #0
 8018ece:	4604      	mov	r4, r0
 8018ed0:	4608      	mov	r0, r1
 8018ed2:	602b      	str	r3, [r5, #0]
 8018ed4:	f7e7 ffb3 	bl	8000e3e <_isatty>
 8018ed8:	1c43      	adds	r3, r0, #1
 8018eda:	d102      	bne.n	8018ee2 <_isatty_r+0x1a>
 8018edc:	682b      	ldr	r3, [r5, #0]
 8018ede:	b103      	cbz	r3, 8018ee2 <_isatty_r+0x1a>
 8018ee0:	6023      	str	r3, [r4, #0]
 8018ee2:	bd38      	pop	{r3, r4, r5, pc}
 8018ee4:	2400f2a4 	.word	0x2400f2a4

08018ee8 <_malloc_usable_size_r>:
 8018ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018eec:	1f18      	subs	r0, r3, #4
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	bfbc      	itt	lt
 8018ef2:	580b      	ldrlt	r3, [r1, r0]
 8018ef4:	18c0      	addlt	r0, r0, r3
 8018ef6:	4770      	bx	lr

08018ef8 <_init>:
 8018ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018efa:	bf00      	nop
 8018efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018efe:	bc08      	pop	{r3}
 8018f00:	469e      	mov	lr, r3
 8018f02:	4770      	bx	lr

08018f04 <_fini>:
 8018f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f06:	bf00      	nop
 8018f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018f0a:	bc08      	pop	{r3}
 8018f0c:	469e      	mov	lr, r3
 8018f0e:	4770      	bx	lr
