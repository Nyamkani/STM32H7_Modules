
openAMP_h7_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0810b358  0810b358  0001b358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810b6a0  0810b6a0  0001b6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0810b6a4  0810b6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000011c  10000000  0810b6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000494  1000011c  0810b7c4  0002011c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  100005b0  0810b7c4  000205b0  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  0810b7c4  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026837  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000053c5  00000000  00000000  00046983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ec0  00000000  00000000  0004bd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001c78  00000000  00000000  0004dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004c065  00000000  00000000  0004f880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002963c  00000000  00000000  0009b8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001c4f75  00000000  00000000  000c4f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00289e96  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008a3c  00000000  00000000  00289ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000011c 	.word	0x1000011c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b340 	.word	0x0810b340

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000120 	.word	0x10000120
 81002dc:	0810b340 	.word	0x0810b340

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81003a0:	b480      	push	{r7}
 81003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81003a4:	4b09      	ldr	r3, [pc, #36]	; (81003cc <SystemInit+0x2c>)
 81003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81003aa:	4a08      	ldr	r2, [pc, #32]	; (81003cc <SystemInit+0x2c>)
 81003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81003b4:	4b05      	ldr	r3, [pc, #20]	; (81003cc <SystemInit+0x2c>)
 81003b6:	691b      	ldr	r3, [r3, #16]
 81003b8:	4a04      	ldr	r2, [pc, #16]	; (81003cc <SystemInit+0x2c>)
 81003ba:	f043 0310 	orr.w	r3, r3, #16
 81003be:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003c0:	bf00      	nop
 81003c2:	46bd      	mov	sp, r7
 81003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003c8:	4770      	bx	lr
 81003ca:	bf00      	nop
 81003cc:	e000ed00 	.word	0xe000ed00

081003d0 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 81003d0:	b580      	push	{r7, lr}
 81003d2:	b086      	sub	sp, #24
 81003d4:	af02      	add	r7, sp, #8
 81003d6:	60f8      	str	r0, [r7, #12]
 81003d8:	60b9      	str	r1, [r7, #8]
 81003da:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81003dc:	68fb      	ldr	r3, [r7, #12]
 81003de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81003e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81003e4:	d101      	bne.n	81003ea <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 81003e6:	4b09      	ldr	r3, [pc, #36]	; (810040c <rpmsg_send+0x3c>)
 81003e8:	e00c      	b.n	8100404 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 81003ea:	68fb      	ldr	r3, [r7, #12]
 81003ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81003ee:	68fb      	ldr	r3, [r7, #12]
 81003f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81003f2:	2301      	movs	r3, #1
 81003f4:	9301      	str	r3, [sp, #4]
 81003f6:	687b      	ldr	r3, [r7, #4]
 81003f8:	9300      	str	r3, [sp, #0]
 81003fa:	68bb      	ldr	r3, [r7, #8]
 81003fc:	68f8      	ldr	r0, [r7, #12]
 81003fe:	f008 fc01 	bl	8108c04 <rpmsg_send_offchannel_raw>
 8100402:	4603      	mov	r3, r0
					 len, true);
}
 8100404:	4618      	mov	r0, r3
 8100406:	3710      	adds	r7, #16
 8100408:	46bd      	mov	sp, r7
 810040a:	bd80      	pop	{r7, pc}
 810040c:	fffff829 	.word	0xfffff829

08100410 <rpmsg_recv_callback>:

HSEM_TypeDef * HSEM_DEBUG= HSEM;

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
               size_t len, uint32_t src, void *priv)
{
 8100410:	b480      	push	{r7}
 8100412:	b085      	sub	sp, #20
 8100414:	af00      	add	r7, sp, #0
 8100416:	60f8      	str	r0, [r7, #12]
 8100418:	60b9      	str	r1, [r7, #8]
 810041a:	607a      	str	r2, [r7, #4]
 810041c:	603b      	str	r3, [r7, #0]
  received_data = *((unsigned int *) data);
 810041e:	68bb      	ldr	r3, [r7, #8]
 8100420:	681b      	ldr	r3, [r3, #0]
 8100422:	4a06      	ldr	r2, [pc, #24]	; (810043c <rpmsg_recv_callback+0x2c>)
 8100424:	6013      	str	r3, [r2, #0]
  message_received=1;
 8100426:	4b06      	ldr	r3, [pc, #24]	; (8100440 <rpmsg_recv_callback+0x30>)
 8100428:	2201      	movs	r2, #1
 810042a:	601a      	str	r2, [r3, #0]

  return 0;
 810042c:	2300      	movs	r3, #0
}
 810042e:	4618      	mov	r0, r3
 8100430:	3714      	adds	r7, #20
 8100432:	46bd      	mov	sp, r7
 8100434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100438:	4770      	bx	lr
 810043a:	bf00      	nop
 810043c:	10000140 	.word	0x10000140
 8100440:	1000013c 	.word	0x1000013c

08100444 <receive_message>:

unsigned int receive_message(void)
{
 8100444:	b580      	push	{r7, lr}
 8100446:	af00      	add	r7, sp, #0
  while (message_received == 0)
 8100448:	e001      	b.n	810044e <receive_message+0xa>
  {
    OPENAMP_check_for_message();
 810044a:	f009 fee7 	bl	810a21c <OPENAMP_check_for_message>
  while (message_received == 0)
 810044e:	4b05      	ldr	r3, [pc, #20]	; (8100464 <receive_message+0x20>)
 8100450:	681b      	ldr	r3, [r3, #0]
 8100452:	2b00      	cmp	r3, #0
 8100454:	d0f9      	beq.n	810044a <receive_message+0x6>
  }
  message_received = 0;
 8100456:	4b03      	ldr	r3, [pc, #12]	; (8100464 <receive_message+0x20>)
 8100458:	2200      	movs	r2, #0
 810045a:	601a      	str	r2, [r3, #0]

  return received_data;
 810045c:	4b02      	ldr	r3, [pc, #8]	; (8100468 <receive_message+0x24>)
 810045e:	681b      	ldr	r3, [r3, #0]
}
 8100460:	4618      	mov	r0, r3
 8100462:	bd80      	pop	{r7, pc}
 8100464:	1000013c 	.word	0x1000013c
 8100468:	10000140 	.word	0x10000140

0810046c <OpenAMPInit_M4>:

void OpenAMPInit_M4()
{
 810046c:	b580      	push	{r7, lr}
 810046e:	b084      	sub	sp, #16
 8100470:	af02      	add	r7, sp, #8
	int32_t status = 0;
 8100472:	2300      	movs	r3, #0
 8100474:	607b      	str	r3, [r7, #4]
	//HAL_NVIC_ClearPendingIRQ(HSEM2_IRQn);

	/* Add Cortex-M4 user application code here */

	/* Inilitize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 8100476:	f009 fd0f 	bl	8109e98 <MAILBOX_Init>

	/* Inilitize OpenAmp and libmetal libraries */
	if (MX_OPENAMP_Init(RPMSG_REMOTE, NULL)!= HAL_OK)
 810047a:	2100      	movs	r1, #0
 810047c:	2001      	movs	r0, #1
 810047e:	f009 fe0d 	bl	810a09c <MX_OPENAMP_Init>
 8100482:	4603      	mov	r3, r0
 8100484:	2b00      	cmp	r3, #0
 8100486:	d001      	beq.n	810048c <OpenAMPInit_M4+0x20>
	Error_Handler();
 8100488:	f000 fc6c 	bl	8100d64 <Error_Handler>

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 810048c:	2300      	movs	r3, #0
 810048e:	9300      	str	r3, [sp, #0]
 8100490:	4b14      	ldr	r3, [pc, #80]	; (81004e4 <OpenAMPInit_M4+0x78>)
 8100492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100496:	4914      	ldr	r1, [pc, #80]	; (81004e8 <OpenAMPInit_M4+0x7c>)
 8100498:	4814      	ldr	r0, [pc, #80]	; (81004ec <OpenAMPInit_M4+0x80>)
 810049a:	f009 fea1 	bl	810a1e0 <OPENAMP_create_endpoint>
 810049e:	6078      	str	r0, [r7, #4]
									rpmsg_recv_callback, NULL);
	if (status < 0)
 81004a0:	687b      	ldr	r3, [r7, #4]
 81004a2:	2b00      	cmp	r3, #0
 81004a4:	da17      	bge.n	81004d6 <OpenAMPInit_M4+0x6a>
	{
		Error_Handler();
 81004a6:	f000 fc5d 	bl	8100d64 <Error_Handler>
	}

	/* Pingpong application*/
	/* Reveice an integer from the master, incremennt it and send back the result to the master*/
	while (message < 100)
 81004aa:	e014      	b.n	81004d6 <OpenAMPInit_M4+0x6a>
	{
		message = receive_message();
 81004ac:	f7ff ffca 	bl	8100444 <receive_message>
 81004b0:	4603      	mov	r3, r0
 81004b2:	4a0f      	ldr	r2, [pc, #60]	; (81004f0 <OpenAMPInit_M4+0x84>)
 81004b4:	6013      	str	r3, [r2, #0]
		message++;
 81004b6:	4b0e      	ldr	r3, [pc, #56]	; (81004f0 <OpenAMPInit_M4+0x84>)
 81004b8:	681b      	ldr	r3, [r3, #0]
 81004ba:	3301      	adds	r3, #1
 81004bc:	4a0c      	ldr	r2, [pc, #48]	; (81004f0 <OpenAMPInit_M4+0x84>)
 81004be:	6013      	str	r3, [r2, #0]
		status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 81004c0:	2204      	movs	r2, #4
 81004c2:	490b      	ldr	r1, [pc, #44]	; (81004f0 <OpenAMPInit_M4+0x84>)
 81004c4:	4809      	ldr	r0, [pc, #36]	; (81004ec <OpenAMPInit_M4+0x80>)
 81004c6:	f7ff ff83 	bl	81003d0 <rpmsg_send>
 81004ca:	6078      	str	r0, [r7, #4]
		if (status < 0)
 81004cc:	687b      	ldr	r3, [r7, #4]
 81004ce:	2b00      	cmp	r3, #0
 81004d0:	da01      	bge.n	81004d6 <OpenAMPInit_M4+0x6a>
		{
		  Error_Handler();
 81004d2:	f000 fc47 	bl	8100d64 <Error_Handler>
	while (message < 100)
 81004d6:	4b06      	ldr	r3, [pc, #24]	; (81004f0 <OpenAMPInit_M4+0x84>)
 81004d8:	681b      	ldr	r3, [r3, #0]
 81004da:	2b63      	cmp	r3, #99	; 0x63
 81004dc:	d9e6      	bls.n	81004ac <OpenAMPInit_M4+0x40>
		}
	}

	/* Deinitialize OpenAMP */
	OPENAMP_DeInit();
 81004de:	f009 fe73 	bl	810a1c8 <OPENAMP_DeInit>

	while(1)
 81004e2:	e7fe      	b.n	81004e2 <OpenAMPInit_M4+0x76>
 81004e4:	08100411 	.word	0x08100411
 81004e8:	0810b358 	.word	0x0810b358
 81004ec:	10000144 	.word	0x10000144
 81004f0:	10000138 	.word	0x10000138

081004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81004f4:	b580      	push	{r7, lr}
 81004f6:	b082      	sub	sp, #8
 81004f8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81004fa:	4b24      	ldr	r3, [pc, #144]	; (810058c <main+0x98>)
 81004fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100500:	4a22      	ldr	r2, [pc, #136]	; (810058c <main+0x98>)
 8100502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100506:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810050a:	4b20      	ldr	r3, [pc, #128]	; (810058c <main+0x98>)
 810050c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100514:	607b      	str	r3, [r7, #4]
 8100516:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100518:	2001      	movs	r0, #1
 810051a:	f002 fe0f 	bl	810313c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810051e:	f002 feb3 	bl	8103288 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100522:	2201      	movs	r2, #1
 8100524:	2102      	movs	r1, #2
 8100526:	2000      	movs	r0, #0
 8100528:	f002 fe34 	bl	8103194 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810052c:	4b18      	ldr	r3, [pc, #96]	; (8100590 <main+0x9c>)
 810052e:	681b      	ldr	r3, [r3, #0]
 8100530:	091b      	lsrs	r3, r3, #4
 8100532:	f003 030f 	and.w	r3, r3, #15
 8100536:	2b07      	cmp	r3, #7
 8100538:	d108      	bne.n	810054c <main+0x58>
 810053a:	4b16      	ldr	r3, [pc, #88]	; (8100594 <main+0xa0>)
 810053c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100540:	4a14      	ldr	r2, [pc, #80]	; (8100594 <main+0xa0>)
 8100542:	f043 0301 	orr.w	r3, r3, #1
 8100546:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810054a:	e007      	b.n	810055c <main+0x68>
 810054c:	4b11      	ldr	r3, [pc, #68]	; (8100594 <main+0xa0>)
 810054e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100552:	4a10      	ldr	r2, [pc, #64]	; (8100594 <main+0xa0>)
 8100554:	f043 0301 	orr.w	r3, r3, #1
 8100558:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810055c:	f001 f826 	bl	81015ac <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100560:	f000 fb7c 	bl	8100c5c <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8100564:	f000 f818 	bl	8100598 <_ZL12MX_ADC1_Initv>
  MX_ADC3_Init();
 8100568:	f000 f89e 	bl	81006a8 <_ZL12MX_ADC3_Initv>
  MX_HDMI_CEC_Init();
 810056c:	f000 f906 	bl	810077c <_ZL16MX_HDMI_CEC_Initv>
  MX_RTC_Init();
 8100570:	f000 f93e 	bl	81007f0 <_ZL11MX_RTC_Initv>
  MX_SAI1_Init();
 8100574:	f000 f994 	bl	81008a0 <_ZL12MX_SAI1_Initv>
  MX_SPDIFRX1_Init();
 8100578:	f000 fa38 	bl	81009ec <_ZL16MX_SPDIFRX1_Initv>
  MX_TIM8_Init();
 810057c:	f000 fa74 	bl	8100a68 <_ZL12MX_TIM8_Initv>
  MX_TIM13_Init();
 8100580:	f000 fb16 	bl	8100bb0 <_ZL13MX_TIM13_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  OpenAMPInit_M4();
 8100584:	f7ff ff72 	bl	810046c <OpenAMPInit_M4>
 8100588:	e7fc      	b.n	8100584 <main+0x90>
 810058a:	bf00      	nop
 810058c:	58024400 	.word	0x58024400
 8100590:	e000ed00 	.word	0xe000ed00
 8100594:	58026400 	.word	0x58026400

08100598 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100598:	b580      	push	{r7, lr}
 810059a:	b08a      	sub	sp, #40	; 0x28
 810059c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 810059e:	f107 031c 	add.w	r3, r7, #28
 81005a2:	2200      	movs	r2, #0
 81005a4:	601a      	str	r2, [r3, #0]
 81005a6:	605a      	str	r2, [r3, #4]
 81005a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 81005aa:	463b      	mov	r3, r7
 81005ac:	2200      	movs	r2, #0
 81005ae:	601a      	str	r2, [r3, #0]
 81005b0:	605a      	str	r2, [r3, #4]
 81005b2:	609a      	str	r2, [r3, #8]
 81005b4:	60da      	str	r2, [r3, #12]
 81005b6:	611a      	str	r2, [r3, #16]
 81005b8:	615a      	str	r2, [r3, #20]
 81005ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 81005bc:	4b37      	ldr	r3, [pc, #220]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005be:	4a38      	ldr	r2, [pc, #224]	; (81006a0 <_ZL12MX_ADC1_Initv+0x108>)
 81005c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 81005c2:	4b36      	ldr	r3, [pc, #216]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005c4:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 81005c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 81005ca:	4b34      	ldr	r3, [pc, #208]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005cc:	2200      	movs	r2, #0
 81005ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81005d0:	4b32      	ldr	r3, [pc, #200]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005d2:	2200      	movs	r2, #0
 81005d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81005d6:	4b31      	ldr	r3, [pc, #196]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005d8:	2204      	movs	r2, #4
 81005da:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 81005dc:	4b2f      	ldr	r3, [pc, #188]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005de:	2200      	movs	r2, #0
 81005e0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 81005e2:	4b2e      	ldr	r3, [pc, #184]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005e4:	2200      	movs	r2, #0
 81005e6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 81005e8:	4b2c      	ldr	r3, [pc, #176]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005ea:	2201      	movs	r2, #1
 81005ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 81005ee:	4b2b      	ldr	r3, [pc, #172]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005f0:	2200      	movs	r2, #0
 81005f2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81005f4:	4b29      	ldr	r3, [pc, #164]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005f6:	2200      	movs	r2, #0
 81005f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81005fa:	4b28      	ldr	r3, [pc, #160]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 81005fc:	2200      	movs	r2, #0
 81005fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100600:	4b26      	ldr	r3, [pc, #152]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 8100602:	2200      	movs	r2, #0
 8100604:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100606:	4b25      	ldr	r3, [pc, #148]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 8100608:	2200      	movs	r2, #0
 810060a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810060c:	4b23      	ldr	r3, [pc, #140]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 810060e:	2200      	movs	r2, #0
 8100610:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100612:	4b22      	ldr	r3, [pc, #136]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 8100614:	2200      	movs	r2, #0
 8100616:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 810061a:	4820      	ldr	r0, [pc, #128]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 810061c:	f001 fa28 	bl	8101a70 <HAL_ADC_Init>
 8100620:	4603      	mov	r3, r0
 8100622:	2b00      	cmp	r3, #0
 8100624:	bf14      	ite	ne
 8100626:	2301      	movne	r3, #1
 8100628:	2300      	moveq	r3, #0
 810062a:	b2db      	uxtb	r3, r3
 810062c:	2b00      	cmp	r3, #0
 810062e:	d001      	beq.n	8100634 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 8100630:	f000 fb98 	bl	8100d64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100634:	2300      	movs	r3, #0
 8100636:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100638:	f107 031c 	add.w	r3, r7, #28
 810063c:	4619      	mov	r1, r3
 810063e:	4817      	ldr	r0, [pc, #92]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 8100640:	f002 f83a 	bl	81026b8 <HAL_ADCEx_MultiModeConfigChannel>
 8100644:	4603      	mov	r3, r0
 8100646:	2b00      	cmp	r3, #0
 8100648:	bf14      	ite	ne
 810064a:	2301      	movne	r3, #1
 810064c:	2300      	moveq	r3, #0
 810064e:	b2db      	uxtb	r3, r3
 8100650:	2b00      	cmp	r3, #0
 8100652:	d001      	beq.n	8100658 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 8100654:	f000 fb86 	bl	8100d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8100658:	4b12      	ldr	r3, [pc, #72]	; (81006a4 <_ZL12MX_ADC1_Initv+0x10c>)
 810065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 810065c:	2306      	movs	r3, #6
 810065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100660:	2300      	movs	r3, #0
 8100662:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100664:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100668:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 810066a:	2304      	movs	r3, #4
 810066c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 810066e:	2300      	movs	r3, #0
 8100670:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100672:	2300      	movs	r3, #0
 8100674:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100676:	463b      	mov	r3, r7
 8100678:	4619      	mov	r1, r3
 810067a:	4808      	ldr	r0, [pc, #32]	; (810069c <_ZL12MX_ADC1_Initv+0x104>)
 810067c:	f001 fb9a 	bl	8101db4 <HAL_ADC_ConfigChannel>
 8100680:	4603      	mov	r3, r0
 8100682:	2b00      	cmp	r3, #0
 8100684:	bf14      	ite	ne
 8100686:	2301      	movne	r3, #1
 8100688:	2300      	moveq	r3, #0
 810068a:	b2db      	uxtb	r3, r3
 810068c:	2b00      	cmp	r3, #0
 810068e:	d001      	beq.n	8100694 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8100690:	f000 fb68 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8100694:	bf00      	nop
 8100696:	3728      	adds	r7, #40	; 0x28
 8100698:	46bd      	mov	sp, r7
 810069a:	bd80      	pop	{r7, pc}
 810069c:	10000184 	.word	0x10000184
 81006a0:	40022000 	.word	0x40022000
 81006a4:	04300002 	.word	0x04300002

081006a8 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 81006a8:	b580      	push	{r7, lr}
 81006aa:	b088      	sub	sp, #32
 81006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 81006ae:	1d3b      	adds	r3, r7, #4
 81006b0:	2200      	movs	r2, #0
 81006b2:	601a      	str	r2, [r3, #0]
 81006b4:	605a      	str	r2, [r3, #4]
 81006b6:	609a      	str	r2, [r3, #8]
 81006b8:	60da      	str	r2, [r3, #12]
 81006ba:	611a      	str	r2, [r3, #16]
 81006bc:	615a      	str	r2, [r3, #20]
 81006be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 81006c0:	4b2c      	ldr	r3, [pc, #176]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006c2:	4a2d      	ldr	r2, [pc, #180]	; (8100778 <_ZL12MX_ADC3_Initv+0xd0>)
 81006c4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 81006c6:	4b2b      	ldr	r3, [pc, #172]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006c8:	2200      	movs	r2, #0
 81006ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 81006cc:	4b29      	ldr	r3, [pc, #164]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006ce:	2200      	movs	r2, #0
 81006d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 81006d2:	4b28      	ldr	r3, [pc, #160]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006d4:	2204      	movs	r2, #4
 81006d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 81006d8:	4b26      	ldr	r3, [pc, #152]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006da:	2200      	movs	r2, #0
 81006dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 81006de:	4b25      	ldr	r3, [pc, #148]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006e0:	2200      	movs	r2, #0
 81006e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 81006e4:	4b23      	ldr	r3, [pc, #140]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006e6:	2201      	movs	r2, #1
 81006e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 81006ea:	4b22      	ldr	r3, [pc, #136]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006ec:	2200      	movs	r2, #0
 81006ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 81006f0:	4b20      	ldr	r3, [pc, #128]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006f2:	2200      	movs	r2, #0
 81006f4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 81006f6:	4b1f      	ldr	r3, [pc, #124]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006f8:	2200      	movs	r2, #0
 81006fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 81006fc:	4b1d      	ldr	r3, [pc, #116]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 81006fe:	2200      	movs	r2, #0
 8100700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100702:	4b1c      	ldr	r3, [pc, #112]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 8100704:	2200      	movs	r2, #0
 8100706:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100708:	4b1a      	ldr	r3, [pc, #104]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 810070a:	2200      	movs	r2, #0
 810070c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 810070e:	4b19      	ldr	r3, [pc, #100]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 8100710:	2200      	movs	r2, #0
 8100712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8100716:	4817      	ldr	r0, [pc, #92]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 8100718:	f001 f9aa 	bl	8101a70 <HAL_ADC_Init>
 810071c:	4603      	mov	r3, r0
 810071e:	2b00      	cmp	r3, #0
 8100720:	bf14      	ite	ne
 8100722:	2301      	movne	r3, #1
 8100724:	2300      	moveq	r3, #0
 8100726:	b2db      	uxtb	r3, r3
 8100728:	2b00      	cmp	r3, #0
 810072a:	d001      	beq.n	8100730 <_ZL12MX_ADC3_Initv+0x88>
  {
    Error_Handler();
 810072c:	f000 fb1a 	bl	8100d64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8100730:	2301      	movs	r3, #1
 8100732:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100734:	2306      	movs	r3, #6
 8100736:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8100738:	2300      	movs	r3, #0
 810073a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 810073c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100740:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100742:	2304      	movs	r3, #4
 8100744:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8100746:	2300      	movs	r3, #0
 8100748:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 810074a:	2300      	movs	r3, #0
 810074c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 810074e:	1d3b      	adds	r3, r7, #4
 8100750:	4619      	mov	r1, r3
 8100752:	4808      	ldr	r0, [pc, #32]	; (8100774 <_ZL12MX_ADC3_Initv+0xcc>)
 8100754:	f001 fb2e 	bl	8101db4 <HAL_ADC_ConfigChannel>
 8100758:	4603      	mov	r3, r0
 810075a:	2b00      	cmp	r3, #0
 810075c:	bf14      	ite	ne
 810075e:	2301      	movne	r3, #1
 8100760:	2300      	moveq	r3, #0
 8100762:	b2db      	uxtb	r3, r3
 8100764:	2b00      	cmp	r3, #0
 8100766:	d001      	beq.n	810076c <_ZL12MX_ADC3_Initv+0xc4>
  {
    Error_Handler();
 8100768:	f000 fafc 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 810076c:	bf00      	nop
 810076e:	3720      	adds	r7, #32
 8100770:	46bd      	mov	sp, r7
 8100772:	bd80      	pop	{r7, pc}
 8100774:	100001e8 	.word	0x100001e8
 8100778:	58026000 	.word	0x58026000

0810077c <_ZL16MX_HDMI_CEC_Initv>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 810077c:	b580      	push	{r7, lr}
 810077e:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100780:	4b18      	ldr	r3, [pc, #96]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100782:	4a19      	ldr	r2, [pc, #100]	; (81007e8 <_ZL16MX_HDMI_CEC_Initv+0x6c>)
 8100784:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100786:	4b17      	ldr	r3, [pc, #92]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100788:	2200      	movs	r2, #0
 810078a:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 810078c:	4b15      	ldr	r3, [pc, #84]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 810078e:	2200      	movs	r2, #0
 8100790:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100792:	4b14      	ldr	r3, [pc, #80]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 8100794:	2210      	movs	r2, #16
 8100796:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100798:	4b12      	ldr	r3, [pc, #72]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 810079a:	2200      	movs	r2, #0
 810079c:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 810079e:	4b11      	ldr	r3, [pc, #68]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81007a0:	2200      	movs	r2, #0
 81007a2:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 81007a4:	4b0f      	ldr	r3, [pc, #60]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81007a6:	2200      	movs	r2, #0
 81007a8:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 81007aa:	4b0e      	ldr	r3, [pc, #56]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81007ac:	2200      	movs	r2, #0
 81007ae:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 81007b0:	4b0c      	ldr	r3, [pc, #48]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81007b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 81007b6:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 81007b8:	4b0a      	ldr	r3, [pc, #40]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81007ba:	2200      	movs	r2, #0
 81007bc:	849a      	strh	r2, [r3, #36]	; 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 81007be:	4b09      	ldr	r3, [pc, #36]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81007c0:	4a0a      	ldr	r2, [pc, #40]	; (81007ec <_ZL16MX_HDMI_CEC_Initv+0x70>)
 81007c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 81007c4:	4807      	ldr	r0, [pc, #28]	; (81007e4 <_ZL16MX_HDMI_CEC_Initv+0x68>)
 81007c6:	f002 f859 	bl	810287c <HAL_CEC_Init>
 81007ca:	4603      	mov	r3, r0
 81007cc:	2b00      	cmp	r3, #0
 81007ce:	bf14      	ite	ne
 81007d0:	2301      	movne	r3, #1
 81007d2:	2300      	moveq	r3, #0
 81007d4:	b2db      	uxtb	r3, r3
 81007d6:	2b00      	cmp	r3, #0
 81007d8:	d001      	beq.n	81007de <_ZL16MX_HDMI_CEC_Initv+0x62>
  {
    Error_Handler();
 81007da:	f000 fac3 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 81007de:	bf00      	nop
 81007e0:	bd80      	pop	{r7, pc}
 81007e2:	bf00      	nop
 81007e4:	1000024c 	.word	0x1000024c
 81007e8:	40006c00 	.word	0x40006c00
 81007ec:	100004cc 	.word	0x100004cc

081007f0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 81007f0:	b580      	push	{r7, lr}
 81007f2:	b08a      	sub	sp, #40	; 0x28
 81007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 81007f6:	463b      	mov	r3, r7
 81007f8:	2228      	movs	r2, #40	; 0x28
 81007fa:	2100      	movs	r1, #0
 81007fc:	4618      	mov	r0, r3
 81007fe:	f009 fdad 	bl	810a35c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100802:	4b25      	ldr	r3, [pc, #148]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 8100804:	4a25      	ldr	r2, [pc, #148]	; (810089c <_ZL11MX_RTC_Initv+0xac>)
 8100806:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100808:	4b23      	ldr	r3, [pc, #140]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 810080a:	2200      	movs	r2, #0
 810080c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 810080e:	4b22      	ldr	r3, [pc, #136]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 8100810:	227f      	movs	r2, #127	; 0x7f
 8100812:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100814:	4b20      	ldr	r3, [pc, #128]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 8100816:	22ff      	movs	r2, #255	; 0xff
 8100818:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 810081a:	4b1f      	ldr	r3, [pc, #124]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 810081c:	2200      	movs	r2, #0
 810081e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100820:	4b1d      	ldr	r3, [pc, #116]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 8100822:	2200      	movs	r2, #0
 8100824:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100826:	4b1c      	ldr	r3, [pc, #112]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 8100828:	2200      	movs	r2, #0
 810082a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 810082c:	4b1a      	ldr	r3, [pc, #104]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 810082e:	2200      	movs	r2, #0
 8100830:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100832:	4819      	ldr	r0, [pc, #100]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 8100834:	f005 fc36 	bl	81060a4 <HAL_RTC_Init>
 8100838:	4603      	mov	r3, r0
 810083a:	2b00      	cmp	r3, #0
 810083c:	bf14      	ite	ne
 810083e:	2301      	movne	r3, #1
 8100840:	2300      	moveq	r3, #0
 8100842:	b2db      	uxtb	r3, r3
 8100844:	2b00      	cmp	r3, #0
 8100846:	d001      	beq.n	810084c <_ZL11MX_RTC_Initv+0x5c>
  {
    Error_Handler();
 8100848:	f000 fa8c 	bl	8100d64 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 810084c:	2301      	movs	r3, #1
 810084e:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100850:	2301      	movs	r3, #1
 8100852:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100854:	2300      	movs	r3, #0
 8100856:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100858:	2300      	movs	r3, #0
 810085a:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 810085c:	2300      	movs	r3, #0
 810085e:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100860:	2300      	movs	r3, #0
 8100862:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100864:	2300      	movs	r3, #0
 8100866:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100868:	2300      	movs	r3, #0
 810086a:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 810086c:	2380      	movs	r3, #128	; 0x80
 810086e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100870:	463b      	mov	r3, r7
 8100872:	4619      	mov	r1, r3
 8100874:	4808      	ldr	r0, [pc, #32]	; (8100898 <_ZL11MX_RTC_Initv+0xa8>)
 8100876:	f005 fd2d 	bl	81062d4 <HAL_RTCEx_SetTamper>
 810087a:	4603      	mov	r3, r0
 810087c:	2b00      	cmp	r3, #0
 810087e:	bf14      	ite	ne
 8100880:	2301      	movne	r3, #1
 8100882:	2300      	moveq	r3, #0
 8100884:	b2db      	uxtb	r3, r3
 8100886:	2b00      	cmp	r3, #0
 8100888:	d001      	beq.n	810088e <_ZL11MX_RTC_Initv+0x9e>
  {
    Error_Handler();
 810088a:	f000 fa6b 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 810088e:	bf00      	nop
 8100890:	3728      	adds	r7, #40	; 0x28
 8100892:	46bd      	mov	sp, r7
 8100894:	bd80      	pop	{r7, pc}
 8100896:	bf00      	nop
 8100898:	10000290 	.word	0x10000290
 810089c:	58004000 	.word	0x58004000

081008a0 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 81008a0:	b580      	push	{r7, lr}
 81008a2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 81008a4:	4b4c      	ldr	r3, [pc, #304]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008a6:	4a4d      	ldr	r2, [pc, #308]	; (81009dc <_ZL12MX_SAI1_Initv+0x13c>)
 81008a8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 81008aa:	4b4b      	ldr	r3, [pc, #300]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008ac:	2200      	movs	r2, #0
 81008ae:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 81008b0:	4b49      	ldr	r3, [pc, #292]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008b2:	2200      	movs	r2, #0
 81008b4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 81008b6:	4b48      	ldr	r3, [pc, #288]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008b8:	2240      	movs	r2, #64	; 0x40
 81008ba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 81008bc:	4b46      	ldr	r3, [pc, #280]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008be:	2200      	movs	r2, #0
 81008c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 81008c2:	4b45      	ldr	r3, [pc, #276]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008c4:	2200      	movs	r2, #0
 81008c6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 81008c8:	4b43      	ldr	r3, [pc, #268]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008ca:	2200      	movs	r2, #0
 81008cc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 81008ce:	4b42      	ldr	r3, [pc, #264]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008d0:	2200      	movs	r2, #0
 81008d2:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 81008d4:	4b40      	ldr	r3, [pc, #256]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008d6:	2200      	movs	r2, #0
 81008d8:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 81008da:	4b3f      	ldr	r3, [pc, #252]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008dc:	2200      	movs	r2, #0
 81008de:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 81008e0:	4b3d      	ldr	r3, [pc, #244]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008e2:	4a3f      	ldr	r2, [pc, #252]	; (81009e0 <_ZL12MX_SAI1_Initv+0x140>)
 81008e4:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 81008e6:	4b3c      	ldr	r3, [pc, #240]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008e8:	2200      	movs	r2, #0
 81008ea:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 81008ec:	4b3a      	ldr	r3, [pc, #232]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008ee:	2200      	movs	r2, #0
 81008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 81008f2:	4b39      	ldr	r3, [pc, #228]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008f4:	2200      	movs	r2, #0
 81008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 81008f8:	4b37      	ldr	r3, [pc, #220]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 81008fa:	2200      	movs	r2, #0
 81008fc:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 81008fe:	4b36      	ldr	r3, [pc, #216]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100900:	2200      	movs	r2, #0
 8100902:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100906:	4b34      	ldr	r3, [pc, #208]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100908:	2201      	movs	r2, #1
 810090a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 810090c:	4b32      	ldr	r3, [pc, #200]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 810090e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8100912:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100914:	4b30      	ldr	r3, [pc, #192]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100916:	2208      	movs	r2, #8
 8100918:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 810091a:	4b2f      	ldr	r3, [pc, #188]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 810091c:	2201      	movs	r2, #1
 810091e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100920:	4b2d      	ldr	r3, [pc, #180]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100922:	2200      	movs	r2, #0
 8100924:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100926:	4b2c      	ldr	r3, [pc, #176]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100928:	2200      	movs	r2, #0
 810092a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 810092c:	4b2a      	ldr	r3, [pc, #168]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 810092e:	2200      	movs	r2, #0
 8100930:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100932:	4b29      	ldr	r3, [pc, #164]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100934:	2200      	movs	r2, #0
 8100936:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100938:	4b27      	ldr	r3, [pc, #156]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 810093a:	2200      	movs	r2, #0
 810093c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 810093e:	4b26      	ldr	r3, [pc, #152]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100940:	2201      	movs	r2, #1
 8100942:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100944:	4b24      	ldr	r3, [pc, #144]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 8100946:	2200      	movs	r2, #0
 8100948:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 810094a:	4823      	ldr	r0, [pc, #140]	; (81009d8 <_ZL12MX_SAI1_Initv+0x138>)
 810094c:	f005 fda2 	bl	8106494 <HAL_SAI_Init>
 8100950:	4603      	mov	r3, r0
 8100952:	2b00      	cmp	r3, #0
 8100954:	bf14      	ite	ne
 8100956:	2301      	movne	r3, #1
 8100958:	2300      	moveq	r3, #0
 810095a:	b2db      	uxtb	r3, r3
 810095c:	2b00      	cmp	r3, #0
 810095e:	d001      	beq.n	8100964 <_ZL12MX_SAI1_Initv+0xc4>
  {
    Error_Handler();
 8100960:	f000 fa00 	bl	8100d64 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100964:	4b1f      	ldr	r3, [pc, #124]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 8100966:	4a20      	ldr	r2, [pc, #128]	; (81009e8 <_ZL12MX_SAI1_Initv+0x148>)
 8100968:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 810096a:	4b1e      	ldr	r3, [pc, #120]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 810096c:	2204      	movs	r2, #4
 810096e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100970:	4b1c      	ldr	r3, [pc, #112]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 8100972:	2200      	movs	r2, #0
 8100974:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100976:	4b1b      	ldr	r3, [pc, #108]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 8100978:	2200      	movs	r2, #0
 810097a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 810097c:	4b19      	ldr	r3, [pc, #100]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 810097e:	2200      	movs	r2, #0
 8100980:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100982:	4b18      	ldr	r3, [pc, #96]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 8100984:	2200      	movs	r2, #0
 8100986:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100988:	4b16      	ldr	r3, [pc, #88]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 810098a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 810098e:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100990:	4b14      	ldr	r3, [pc, #80]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 8100992:	2200      	movs	r2, #0
 8100994:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100996:	4b13      	ldr	r3, [pc, #76]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 8100998:	2200      	movs	r2, #0
 810099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 810099c:	4b11      	ldr	r3, [pc, #68]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 810099e:	2200      	movs	r2, #0
 81009a0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 81009a2:	4b10      	ldr	r3, [pc, #64]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 81009a4:	2200      	movs	r2, #0
 81009a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 81009aa:	4b0e      	ldr	r3, [pc, #56]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 81009ac:	2201      	movs	r2, #1
 81009ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 81009b0:	4b0c      	ldr	r3, [pc, #48]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 81009b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 81009b6:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 81009b8:	480a      	ldr	r0, [pc, #40]	; (81009e4 <_ZL12MX_SAI1_Initv+0x144>)
 81009ba:	f005 fd6b 	bl	8106494 <HAL_SAI_Init>
 81009be:	4603      	mov	r3, r0
 81009c0:	2b00      	cmp	r3, #0
 81009c2:	bf14      	ite	ne
 81009c4:	2301      	movne	r3, #1
 81009c6:	2300      	moveq	r3, #0
 81009c8:	b2db      	uxtb	r3, r3
 81009ca:	2b00      	cmp	r3, #0
 81009cc:	d001      	beq.n	81009d2 <_ZL12MX_SAI1_Initv+0x132>
  {
    Error_Handler();
 81009ce:	f000 f9c9 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 81009d2:	bf00      	nop
 81009d4:	bd80      	pop	{r7, pc}
 81009d6:	bf00      	nop
 81009d8:	100002b4 	.word	0x100002b4
 81009dc:	40015804 	.word	0x40015804
 81009e0:	0002ee00 	.word	0x0002ee00
 81009e4:	1000034c 	.word	0x1000034c
 81009e8:	40015824 	.word	0x40015824

081009ec <_ZL16MX_SPDIFRX1_Initv>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 81009ec:	b580      	push	{r7, lr}
 81009ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 81009f0:	4b1c      	ldr	r3, [pc, #112]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 81009f2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 81009f6:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 81009f8:	4b1a      	ldr	r3, [pc, #104]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 81009fa:	2200      	movs	r2, #0
 81009fc:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 81009fe:	4b19      	ldr	r3, [pc, #100]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a00:	2200      	movs	r2, #0
 8100a02:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100a04:	4b17      	ldr	r3, [pc, #92]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a06:	2200      	movs	r2, #0
 8100a08:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100a0a:	4b16      	ldr	r3, [pc, #88]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a0c:	2200      	movs	r2, #0
 8100a0e:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100a10:	4b14      	ldr	r3, [pc, #80]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a12:	2200      	movs	r2, #0
 8100a14:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100a16:	4b13      	ldr	r3, [pc, #76]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a18:	2200      	movs	r2, #0
 8100a1a:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100a1c:	4b11      	ldr	r3, [pc, #68]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a1e:	2200      	movs	r2, #0
 8100a20:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100a22:	4b10      	ldr	r3, [pc, #64]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a24:	2200      	movs	r2, #0
 8100a26:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100a28:	4b0e      	ldr	r3, [pc, #56]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a2a:	2200      	movs	r2, #0
 8100a2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100a2e:	4b0d      	ldr	r3, [pc, #52]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a30:	2200      	movs	r2, #0
 8100a32:	629a      	str	r2, [r3, #40]	; 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100a34:	4b0b      	ldr	r3, [pc, #44]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a36:	2200      	movs	r2, #0
 8100a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100a3c:	4b09      	ldr	r3, [pc, #36]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a3e:	2200      	movs	r2, #0
 8100a40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100a44:	4807      	ldr	r0, [pc, #28]	; (8100a64 <_ZL16MX_SPDIFRX1_Initv+0x78>)
 8100a46:	f006 f809 	bl	8106a5c <HAL_SPDIFRX_Init>
 8100a4a:	4603      	mov	r3, r0
 8100a4c:	2b00      	cmp	r3, #0
 8100a4e:	bf14      	ite	ne
 8100a50:	2301      	movne	r3, #1
 8100a52:	2300      	moveq	r3, #0
 8100a54:	b2db      	uxtb	r3, r3
 8100a56:	2b00      	cmp	r3, #0
 8100a58:	d001      	beq.n	8100a5e <_ZL16MX_SPDIFRX1_Initv+0x72>
  {
    Error_Handler();
 8100a5a:	f000 f983 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100a5e:	bf00      	nop
 8100a60:	bd80      	pop	{r7, pc}
 8100a62:	bf00      	nop
 8100a64:	100003e4 	.word	0x100003e4

08100a68 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100a68:	b580      	push	{r7, lr}
 8100a6a:	b096      	sub	sp, #88	; 0x58
 8100a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100a6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100a72:	2200      	movs	r2, #0
 8100a74:	601a      	str	r2, [r3, #0]
 8100a76:	605a      	str	r2, [r3, #4]
 8100a78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100a7e:	2200      	movs	r2, #0
 8100a80:	601a      	str	r2, [r3, #0]
 8100a82:	605a      	str	r2, [r3, #4]
 8100a84:	609a      	str	r2, [r3, #8]
 8100a86:	60da      	str	r2, [r3, #12]
 8100a88:	611a      	str	r2, [r3, #16]
 8100a8a:	615a      	str	r2, [r3, #20]
 8100a8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100a8e:	1d3b      	adds	r3, r7, #4
 8100a90:	222c      	movs	r2, #44	; 0x2c
 8100a92:	2100      	movs	r1, #0
 8100a94:	4618      	mov	r0, r3
 8100a96:	f009 fc61 	bl	810a35c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100a9a:	4b43      	ldr	r3, [pc, #268]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100a9c:	4a43      	ldr	r2, [pc, #268]	; (8100bac <_ZL12MX_TIM8_Initv+0x144>)
 8100a9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100aa0:	4b41      	ldr	r3, [pc, #260]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100aa2:	2200      	movs	r2, #0
 8100aa4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100aa6:	4b40      	ldr	r3, [pc, #256]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100aa8:	2200      	movs	r2, #0
 8100aaa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100aac:	4b3e      	ldr	r3, [pc, #248]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100aae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100ab2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100ab4:	4b3c      	ldr	r3, [pc, #240]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100ab6:	2200      	movs	r2, #0
 8100ab8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100aba:	4b3b      	ldr	r3, [pc, #236]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100abc:	2200      	movs	r2, #0
 8100abe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100ac0:	4b39      	ldr	r3, [pc, #228]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100ac2:	2200      	movs	r2, #0
 8100ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100ac6:	4838      	ldr	r0, [pc, #224]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100ac8:	f006 f88d 	bl	8106be6 <HAL_TIM_OC_Init>
 8100acc:	4603      	mov	r3, r0
 8100ace:	2b00      	cmp	r3, #0
 8100ad0:	bf14      	ite	ne
 8100ad2:	2301      	movne	r3, #1
 8100ad4:	2300      	moveq	r3, #0
 8100ad6:	b2db      	uxtb	r3, r3
 8100ad8:	2b00      	cmp	r3, #0
 8100ada:	d001      	beq.n	8100ae0 <_ZL12MX_TIM8_Initv+0x78>
  {
    Error_Handler();
 8100adc:	f000 f942 	bl	8100d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100ae0:	2300      	movs	r3, #0
 8100ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100ae4:	2300      	movs	r3, #0
 8100ae6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100ae8:	2300      	movs	r3, #0
 8100aea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100aec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8100af0:	4619      	mov	r1, r3
 8100af2:	482d      	ldr	r0, [pc, #180]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100af4:	f006 fee0 	bl	81078b8 <HAL_TIMEx_MasterConfigSynchronization>
 8100af8:	4603      	mov	r3, r0
 8100afa:	2b00      	cmp	r3, #0
 8100afc:	bf14      	ite	ne
 8100afe:	2301      	movne	r3, #1
 8100b00:	2300      	moveq	r3, #0
 8100b02:	b2db      	uxtb	r3, r3
 8100b04:	2b00      	cmp	r3, #0
 8100b06:	d001      	beq.n	8100b0c <_ZL12MX_TIM8_Initv+0xa4>
  {
    Error_Handler();
 8100b08:	f000 f92c 	bl	8100d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100b0c:	2300      	movs	r3, #0
 8100b0e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8100b10:	2300      	movs	r3, #0
 8100b12:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8100b14:	2300      	movs	r3, #0
 8100b16:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8100b18:	2300      	movs	r3, #0
 8100b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8100b1c:	2300      	movs	r3, #0
 8100b1e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8100b20:	2300      	movs	r3, #0
 8100b22:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8100b24:	2300      	movs	r3, #0
 8100b26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8100b28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8100b2c:	2204      	movs	r2, #4
 8100b2e:	4619      	mov	r1, r3
 8100b30:	481d      	ldr	r0, [pc, #116]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100b32:	f006 f911 	bl	8106d58 <HAL_TIM_OC_ConfigChannel>
 8100b36:	4603      	mov	r3, r0
 8100b38:	2b00      	cmp	r3, #0
 8100b3a:	bf14      	ite	ne
 8100b3c:	2301      	movne	r3, #1
 8100b3e:	2300      	moveq	r3, #0
 8100b40:	b2db      	uxtb	r3, r3
 8100b42:	2b00      	cmp	r3, #0
 8100b44:	d001      	beq.n	8100b4a <_ZL12MX_TIM8_Initv+0xe2>
  {
    Error_Handler();
 8100b46:	f000 f90d 	bl	8100d64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8100b4a:	2300      	movs	r3, #0
 8100b4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8100b4e:	2300      	movs	r3, #0
 8100b50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8100b52:	2300      	movs	r3, #0
 8100b54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8100b56:	2300      	movs	r3, #0
 8100b58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8100b5a:	2300      	movs	r3, #0
 8100b5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8100b5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100b62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8100b64:	2300      	movs	r3, #0
 8100b66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8100b68:	2300      	movs	r3, #0
 8100b6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8100b6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8100b70:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8100b72:	2300      	movs	r3, #0
 8100b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8100b76:	2300      	movs	r3, #0
 8100b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8100b7a:	1d3b      	adds	r3, r7, #4
 8100b7c:	4619      	mov	r1, r3
 8100b7e:	480a      	ldr	r0, [pc, #40]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100b80:	f006 ff28 	bl	81079d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8100b84:	4603      	mov	r3, r0
 8100b86:	2b00      	cmp	r3, #0
 8100b88:	bf14      	ite	ne
 8100b8a:	2301      	movne	r3, #1
 8100b8c:	2300      	moveq	r3, #0
 8100b8e:	b2db      	uxtb	r3, r3
 8100b90:	2b00      	cmp	r3, #0
 8100b92:	d001      	beq.n	8100b98 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 8100b94:	f000 f8e6 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8100b98:	4803      	ldr	r0, [pc, #12]	; (8100ba8 <_ZL12MX_TIM8_Initv+0x140>)
 8100b9a:	f000 fb25 	bl	81011e8 <HAL_TIM_MspPostInit>

}
 8100b9e:	bf00      	nop
 8100ba0:	3758      	adds	r7, #88	; 0x58
 8100ba2:	46bd      	mov	sp, r7
 8100ba4:	bd80      	pop	{r7, pc}
 8100ba6:	bf00      	nop
 8100ba8:	10000434 	.word	0x10000434
 8100bac:	40010400 	.word	0x40010400

08100bb0 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8100bb0:	b580      	push	{r7, lr}
 8100bb2:	b084      	sub	sp, #16
 8100bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8100bb6:	463b      	mov	r3, r7
 8100bb8:	2200      	movs	r2, #0
 8100bba:	601a      	str	r2, [r3, #0]
 8100bbc:	605a      	str	r2, [r3, #4]
 8100bbe:	609a      	str	r2, [r3, #8]
 8100bc0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8100bc2:	4b24      	ldr	r3, [pc, #144]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100bc4:	4a24      	ldr	r2, [pc, #144]	; (8100c58 <_ZL13MX_TIM13_Initv+0xa8>)
 8100bc6:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8100bc8:	4b22      	ldr	r3, [pc, #136]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100bca:	2200      	movs	r2, #0
 8100bcc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100bce:	4b21      	ldr	r3, [pc, #132]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100bd0:	2200      	movs	r2, #0
 8100bd2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8100bd4:	4b1f      	ldr	r3, [pc, #124]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100bd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8100bda:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100bdc:	4b1d      	ldr	r3, [pc, #116]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100bde:	2200      	movs	r2, #0
 8100be0:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100be2:	4b1c      	ldr	r3, [pc, #112]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100be4:	2200      	movs	r2, #0
 8100be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8100be8:	481a      	ldr	r0, [pc, #104]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100bea:	f005 ffa5 	bl	8106b38 <HAL_TIM_Base_Init>
 8100bee:	4603      	mov	r3, r0
 8100bf0:	2b00      	cmp	r3, #0
 8100bf2:	bf14      	ite	ne
 8100bf4:	2301      	movne	r3, #1
 8100bf6:	2300      	moveq	r3, #0
 8100bf8:	b2db      	uxtb	r3, r3
 8100bfa:	2b00      	cmp	r3, #0
 8100bfc:	d001      	beq.n	8100c02 <_ZL13MX_TIM13_Initv+0x52>
  {
    Error_Handler();
 8100bfe:	f000 f8b1 	bl	8100d64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8100c02:	4814      	ldr	r0, [pc, #80]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100c04:	f006 f846 	bl	8106c94 <HAL_TIM_IC_Init>
 8100c08:	4603      	mov	r3, r0
 8100c0a:	2b00      	cmp	r3, #0
 8100c0c:	bf14      	ite	ne
 8100c0e:	2301      	movne	r3, #1
 8100c10:	2300      	moveq	r3, #0
 8100c12:	b2db      	uxtb	r3, r3
 8100c14:	2b00      	cmp	r3, #0
 8100c16:	d001      	beq.n	8100c1c <_ZL13MX_TIM13_Initv+0x6c>
  {
    Error_Handler();
 8100c18:	f000 f8a4 	bl	8100d64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8100c1c:	2300      	movs	r3, #0
 8100c1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8100c20:	2301      	movs	r3, #1
 8100c22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8100c24:	2300      	movs	r3, #0
 8100c26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8100c28:	2300      	movs	r3, #0
 8100c2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8100c2c:	463b      	mov	r3, r7
 8100c2e:	2200      	movs	r2, #0
 8100c30:	4619      	mov	r1, r3
 8100c32:	4808      	ldr	r0, [pc, #32]	; (8100c54 <_ZL13MX_TIM13_Initv+0xa4>)
 8100c34:	f006 f90a 	bl	8106e4c <HAL_TIM_IC_ConfigChannel>
 8100c38:	4603      	mov	r3, r0
 8100c3a:	2b00      	cmp	r3, #0
 8100c3c:	bf14      	ite	ne
 8100c3e:	2301      	movne	r3, #1
 8100c40:	2300      	moveq	r3, #0
 8100c42:	b2db      	uxtb	r3, r3
 8100c44:	2b00      	cmp	r3, #0
 8100c46:	d001      	beq.n	8100c4c <_ZL13MX_TIM13_Initv+0x9c>
  {
    Error_Handler();
 8100c48:	f000 f88c 	bl	8100d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8100c4c:	bf00      	nop
 8100c4e:	3710      	adds	r7, #16
 8100c50:	46bd      	mov	sp, r7
 8100c52:	bd80      	pop	{r7, pc}
 8100c54:	10000480 	.word	0x10000480
 8100c58:	40001c00 	.word	0x40001c00

08100c5c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100c5c:	b480      	push	{r7}
 8100c5e:	b089      	sub	sp, #36	; 0x24
 8100c60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100c62:	4b3f      	ldr	r3, [pc, #252]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c68:	4a3d      	ldr	r2, [pc, #244]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100c6a:	f043 0302 	orr.w	r3, r3, #2
 8100c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c72:	4b3b      	ldr	r3, [pc, #236]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c78:	f003 0302 	and.w	r3, r3, #2
 8100c7c:	61fb      	str	r3, [r7, #28]
 8100c7e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100c80:	4b37      	ldr	r3, [pc, #220]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c86:	4a36      	ldr	r2, [pc, #216]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100c88:	f043 0308 	orr.w	r3, r3, #8
 8100c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c90:	4b33      	ldr	r3, [pc, #204]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c96:	f003 0308 	and.w	r3, r3, #8
 8100c9a:	61bb      	str	r3, [r7, #24]
 8100c9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100c9e:	4b30      	ldr	r3, [pc, #192]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ca4:	4a2e      	ldr	r2, [pc, #184]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100ca6:	f043 0310 	orr.w	r3, r3, #16
 8100caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cae:	4b2c      	ldr	r3, [pc, #176]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cb4:	f003 0310 	and.w	r3, r3, #16
 8100cb8:	617b      	str	r3, [r7, #20]
 8100cba:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100cbc:	4b28      	ldr	r3, [pc, #160]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cc2:	4a27      	ldr	r2, [pc, #156]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100cc4:	f043 0304 	orr.w	r3, r3, #4
 8100cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ccc:	4b24      	ldr	r3, [pc, #144]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cd2:	f003 0304 	and.w	r3, r3, #4
 8100cd6:	613b      	str	r3, [r7, #16]
 8100cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100cda:	4b21      	ldr	r3, [pc, #132]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ce0:	4a1f      	ldr	r2, [pc, #124]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100cea:	4b1d      	ldr	r3, [pc, #116]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100cf4:	60fb      	str	r3, [r7, #12]
 8100cf6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100cf8:	4b19      	ldr	r3, [pc, #100]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100cfe:	4a18      	ldr	r2, [pc, #96]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d00:	f043 0320 	orr.w	r3, r3, #32
 8100d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d08:	4b15      	ldr	r3, [pc, #84]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d0e:	f003 0320 	and.w	r3, r3, #32
 8100d12:	60bb      	str	r3, [r7, #8]
 8100d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8100d16:	4b12      	ldr	r3, [pc, #72]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d1c:	4a10      	ldr	r2, [pc, #64]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8100d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d26:	4b0e      	ldr	r3, [pc, #56]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8100d30:	607b      	str	r3, [r7, #4]
 8100d32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100d34:	4b0a      	ldr	r3, [pc, #40]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d3a:	4a09      	ldr	r2, [pc, #36]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d3c:	f043 0301 	orr.w	r3, r3, #1
 8100d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d44:	4b06      	ldr	r3, [pc, #24]	; (8100d60 <_ZL12MX_GPIO_Initv+0x104>)
 8100d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d4a:	f003 0301 	and.w	r3, r3, #1
 8100d4e:	603b      	str	r3, [r7, #0]
 8100d50:	683b      	ldr	r3, [r7, #0]

}
 8100d52:	bf00      	nop
 8100d54:	3724      	adds	r7, #36	; 0x24
 8100d56:	46bd      	mov	sp, r7
 8100d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d5c:	4770      	bx	lr
 8100d5e:	bf00      	nop
 8100d60:	58024400 	.word	0x58024400

08100d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100d64:	b480      	push	{r7}
 8100d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100d68:	b672      	cpsid	i
}
 8100d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100d6c:	e7fe      	b.n	8100d6c <Error_Handler+0x8>
	...

08100d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100d70:	b580      	push	{r7, lr}
 8100d72:	b082      	sub	sp, #8
 8100d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100d76:	4b0d      	ldr	r3, [pc, #52]	; (8100dac <HAL_MspInit+0x3c>)
 8100d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d7c:	4a0b      	ldr	r2, [pc, #44]	; (8100dac <HAL_MspInit+0x3c>)
 8100d7e:	f043 0302 	orr.w	r3, r3, #2
 8100d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100d86:	4b09      	ldr	r3, [pc, #36]	; (8100dac <HAL_MspInit+0x3c>)
 8100d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100d8c:	f003 0302 	and.w	r3, r3, #2
 8100d90:	607b      	str	r3, [r7, #4]
 8100d92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 8100d94:	2200      	movs	r2, #0
 8100d96:	2100      	movs	r1, #0
 8100d98:	207e      	movs	r0, #126	; 0x7e
 8100d9a:	f001 ffa8 	bl	8102cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100d9e:	207e      	movs	r0, #126	; 0x7e
 8100da0:	f001 ffbf 	bl	8102d22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100da4:	bf00      	nop
 8100da6:	3708      	adds	r7, #8
 8100da8:	46bd      	mov	sp, r7
 8100daa:	bd80      	pop	{r7, pc}
 8100dac:	58024400 	.word	0x58024400

08100db0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8100db0:	b580      	push	{r7, lr}
 8100db2:	b08c      	sub	sp, #48	; 0x30
 8100db4:	af00      	add	r7, sp, #0
 8100db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100db8:	f107 031c 	add.w	r3, r7, #28
 8100dbc:	2200      	movs	r2, #0
 8100dbe:	601a      	str	r2, [r3, #0]
 8100dc0:	605a      	str	r2, [r3, #4]
 8100dc2:	609a      	str	r2, [r3, #8]
 8100dc4:	60da      	str	r2, [r3, #12]
 8100dc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8100dc8:	687b      	ldr	r3, [r7, #4]
 8100dca:	681b      	ldr	r3, [r3, #0]
 8100dcc:	4a3e      	ldr	r2, [pc, #248]	; (8100ec8 <HAL_ADC_MspInit+0x118>)
 8100dce:	4293      	cmp	r3, r2
 8100dd0:	d12a      	bne.n	8100e28 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100dd2:	4b3e      	ldr	r3, [pc, #248]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100dd8:	4a3c      	ldr	r2, [pc, #240]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100dda:	f043 0320 	orr.w	r3, r3, #32
 8100dde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100de2:	4b3a      	ldr	r3, [pc, #232]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100de8:	f003 0320 	and.w	r3, r3, #32
 8100dec:	61bb      	str	r3, [r7, #24]
 8100dee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8100df0:	4b36      	ldr	r3, [pc, #216]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100df6:	4a35      	ldr	r2, [pc, #212]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100df8:	f043 0301 	orr.w	r3, r3, #1
 8100dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e00:	4b32      	ldr	r3, [pc, #200]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e06:	f003 0301 	and.w	r3, r3, #1
 8100e0a:	617b      	str	r3, [r7, #20]
 8100e0c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8100e0e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8100e12:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8100e16:	f000 fc89 	bl	810172c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8100e1a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8100e1e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8100e22:	f000 fc83 	bl	810172c <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8100e26:	e04a      	b.n	8100ebe <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 8100e28:	687b      	ldr	r3, [r7, #4]
 8100e2a:	681b      	ldr	r3, [r3, #0]
 8100e2c:	4a28      	ldr	r2, [pc, #160]	; (8100ed0 <HAL_ADC_MspInit+0x120>)
 8100e2e:	4293      	cmp	r3, r2
 8100e30:	d145      	bne.n	8100ebe <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8100e32:	4b26      	ldr	r3, [pc, #152]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e38:	4a24      	ldr	r2, [pc, #144]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8100e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e42:	4b22      	ldr	r3, [pc, #136]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8100e4c:	613b      	str	r3, [r7, #16]
 8100e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100e50:	4b1e      	ldr	r3, [pc, #120]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e56:	4a1d      	ldr	r2, [pc, #116]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e58:	f043 0320 	orr.w	r3, r3, #32
 8100e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e60:	4b1a      	ldr	r3, [pc, #104]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e66:	f003 0320 	and.w	r3, r3, #32
 8100e6a:	60fb      	str	r3, [r7, #12]
 8100e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8100e6e:	4b17      	ldr	r3, [pc, #92]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e74:	4a15      	ldr	r2, [pc, #84]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e76:	f043 0304 	orr.w	r3, r3, #4
 8100e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e7e:	4b13      	ldr	r3, [pc, #76]	; (8100ecc <HAL_ADC_MspInit+0x11c>)
 8100e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e84:	f003 0304 	and.w	r3, r3, #4
 8100e88:	60bb      	str	r3, [r7, #8]
 8100e8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8100e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8100e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8100e92:	2303      	movs	r3, #3
 8100e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e96:	2300      	movs	r3, #0
 8100e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8100e9a:	f107 031c 	add.w	r3, r7, #28
 8100e9e:	4619      	mov	r1, r3
 8100ea0:	480c      	ldr	r0, [pc, #48]	; (8100ed4 <HAL_ADC_MspInit+0x124>)
 8100ea2:	f001 ff6d 	bl	8102d80 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8100ea6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8100eaa:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8100eae:	f000 fc3d 	bl	810172c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8100eb2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8100eb6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8100eba:	f000 fc37 	bl	810172c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8100ebe:	bf00      	nop
 8100ec0:	3730      	adds	r7, #48	; 0x30
 8100ec2:	46bd      	mov	sp, r7
 8100ec4:	bd80      	pop	{r7, pc}
 8100ec6:	bf00      	nop
 8100ec8:	40022000 	.word	0x40022000
 8100ecc:	58024400 	.word	0x58024400
 8100ed0:	58026000 	.word	0x58026000
 8100ed4:	58021400 	.word	0x58021400

08100ed8 <HAL_CEC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcec: CEC handle pointer
* @retval None
*/
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8100ed8:	b580      	push	{r7, lr}
 8100eda:	b0bc      	sub	sp, #240	; 0xf0
 8100edc:	af00      	add	r7, sp, #0
 8100ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ee0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100ee4:	2200      	movs	r2, #0
 8100ee6:	601a      	str	r2, [r3, #0]
 8100ee8:	605a      	str	r2, [r3, #4]
 8100eea:	609a      	str	r2, [r3, #8]
 8100eec:	60da      	str	r2, [r3, #12]
 8100eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100ef0:	f107 0310 	add.w	r3, r7, #16
 8100ef4:	22c8      	movs	r2, #200	; 0xc8
 8100ef6:	2100      	movs	r1, #0
 8100ef8:	4618      	mov	r0, r3
 8100efa:	f009 fa2f 	bl	810a35c <memset>
  if(hcec->Instance==CEC)
 8100efe:	687b      	ldr	r3, [r7, #4]
 8100f00:	681b      	ldr	r3, [r3, #0]
 8100f02:	4a2b      	ldr	r2, [pc, #172]	; (8100fb0 <HAL_CEC_MspInit+0xd8>)
 8100f04:	4293      	cmp	r3, r2
 8100f06:	d14e      	bne.n	8100fa6 <HAL_CEC_MspInit+0xce>

  /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 8100f08:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8100f0c:	f04f 0300 	mov.w	r3, #0
 8100f10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 8100f14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8100f18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100f1c:	f107 0310 	add.w	r3, r7, #16
 8100f20:	4618      	mov	r0, r3
 8100f22:	f002 fb81 	bl	8103628 <HAL_RCCEx_PeriphCLKConfig>
 8100f26:	4603      	mov	r3, r0
 8100f28:	2b00      	cmp	r3, #0
 8100f2a:	d001      	beq.n	8100f30 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 8100f2c:	f7ff ff1a 	bl	8100d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 8100f30:	4b20      	ldr	r3, [pc, #128]	; (8100fb4 <HAL_CEC_MspInit+0xdc>)
 8100f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f36:	4a1f      	ldr	r2, [pc, #124]	; (8100fb4 <HAL_CEC_MspInit+0xdc>)
 8100f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8100f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100f40:	4b1c      	ldr	r3, [pc, #112]	; (8100fb4 <HAL_CEC_MspInit+0xdc>)
 8100f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8100f4a:	60fb      	str	r3, [r7, #12]
 8100f4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f4e:	4b19      	ldr	r3, [pc, #100]	; (8100fb4 <HAL_CEC_MspInit+0xdc>)
 8100f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f54:	4a17      	ldr	r2, [pc, #92]	; (8100fb4 <HAL_CEC_MspInit+0xdc>)
 8100f56:	f043 0302 	orr.w	r3, r3, #2
 8100f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f5e:	4b15      	ldr	r3, [pc, #84]	; (8100fb4 <HAL_CEC_MspInit+0xdc>)
 8100f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f64:	f003 0302 	and.w	r3, r3, #2
 8100f68:	60bb      	str	r3, [r7, #8]
 8100f6a:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8100f6c:	2340      	movs	r3, #64	; 0x40
 8100f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8100f72:	2312      	movs	r3, #18
 8100f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f78:	2300      	movs	r3, #0
 8100f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f7e:	2300      	movs	r3, #0
 8100f80:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8100f84:	2305      	movs	r3, #5
 8100f86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8100f8a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100f8e:	4619      	mov	r1, r3
 8100f90:	4809      	ldr	r0, [pc, #36]	; (8100fb8 <HAL_CEC_MspInit+0xe0>)
 8100f92:	f001 fef5 	bl	8102d80 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 8100f96:	2200      	movs	r2, #0
 8100f98:	2100      	movs	r1, #0
 8100f9a:	205e      	movs	r0, #94	; 0x5e
 8100f9c:	f001 fea7 	bl	8102cee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8100fa0:	205e      	movs	r0, #94	; 0x5e
 8100fa2:	f001 febe 	bl	8102d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CEC_MspInit 1 */

  /* USER CODE END CEC_MspInit 1 */
  }

}
 8100fa6:	bf00      	nop
 8100fa8:	37f0      	adds	r7, #240	; 0xf0
 8100faa:	46bd      	mov	sp, r7
 8100fac:	bd80      	pop	{r7, pc}
 8100fae:	bf00      	nop
 8100fb0:	40006c00 	.word	0x40006c00
 8100fb4:	58024400 	.word	0x58024400
 8100fb8:	58020400 	.word	0x58020400

08100fbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8100fbc:	b580      	push	{r7, lr}
 8100fbe:	b0b4      	sub	sp, #208	; 0xd0
 8100fc0:	af00      	add	r7, sp, #0
 8100fc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100fc4:	f107 0308 	add.w	r3, r7, #8
 8100fc8:	22c8      	movs	r2, #200	; 0xc8
 8100fca:	2100      	movs	r1, #0
 8100fcc:	4618      	mov	r0, r3
 8100fce:	f009 f9c5 	bl	810a35c <memset>
  if(hrtc->Instance==RTC)
 8100fd2:	687b      	ldr	r3, [r7, #4]
 8100fd4:	681b      	ldr	r3, [r3, #0]
 8100fd6:	4a10      	ldr	r2, [pc, #64]	; (8101018 <HAL_RTC_MspInit+0x5c>)
 8100fd8:	4293      	cmp	r3, r2
 8100fda:	d119      	bne.n	8101010 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8100fdc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100fe0:	f04f 0300 	mov.w	r3, #0
 8100fe4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8100fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100ff0:	f107 0308 	add.w	r3, r7, #8
 8100ff4:	4618      	mov	r0, r3
 8100ff6:	f002 fb17 	bl	8103628 <HAL_RCCEx_PeriphCLKConfig>
 8100ffa:	4603      	mov	r3, r0
 8100ffc:	2b00      	cmp	r3, #0
 8100ffe:	d001      	beq.n	8101004 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101000:	f7ff feb0 	bl	8100d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101004:	4b05      	ldr	r3, [pc, #20]	; (810101c <HAL_RTC_MspInit+0x60>)
 8101006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101008:	4a04      	ldr	r2, [pc, #16]	; (810101c <HAL_RTC_MspInit+0x60>)
 810100a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 810100e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8101010:	bf00      	nop
 8101012:	37d0      	adds	r7, #208	; 0xd0
 8101014:	46bd      	mov	sp, r7
 8101016:	bd80      	pop	{r7, pc}
 8101018:	58004000 	.word	0x58004000
 810101c:	58024400 	.word	0x58024400

08101020 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101020:	b580      	push	{r7, lr}
 8101022:	b0bc      	sub	sp, #240	; 0xf0
 8101024:	af00      	add	r7, sp, #0
 8101026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101028:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 810102c:	2200      	movs	r2, #0
 810102e:	601a      	str	r2, [r3, #0]
 8101030:	605a      	str	r2, [r3, #4]
 8101032:	609a      	str	r2, [r3, #8]
 8101034:	60da      	str	r2, [r3, #12]
 8101036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101038:	f107 0310 	add.w	r3, r7, #16
 810103c:	22c8      	movs	r2, #200	; 0xc8
 810103e:	2100      	movs	r1, #0
 8101040:	4618      	mov	r0, r3
 8101042:	f009 f98b 	bl	810a35c <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101046:	687b      	ldr	r3, [r7, #4]
 8101048:	681b      	ldr	r3, [r3, #0]
 810104a:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 810104e:	d156      	bne.n	81010fe <HAL_SPDIFRX_MspInit+0xde>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8101054:	f04f 0300 	mov.w	r3, #0
 8101058:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 810105c:	2304      	movs	r3, #4
 810105e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8101060:	2309      	movs	r3, #9
 8101062:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8101064:	2302      	movs	r3, #2
 8101066:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8101068:	2302      	movs	r3, #2
 810106a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 810106c:	2301      	movs	r3, #1
 810106e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8101070:	23c0      	movs	r3, #192	; 0xc0
 8101072:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8101074:	2320      	movs	r3, #32
 8101076:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8101078:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810107c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL2;
 810107e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8101082:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101084:	f107 0310 	add.w	r3, r7, #16
 8101088:	4618      	mov	r0, r3
 810108a:	f002 facd 	bl	8103628 <HAL_RCCEx_PeriphCLKConfig>
 810108e:	4603      	mov	r3, r0
 8101090:	2b00      	cmp	r3, #0
 8101092:	d001      	beq.n	8101098 <HAL_SPDIFRX_MspInit+0x78>
    {
      Error_Handler();
 8101094:	f7ff fe66 	bl	8100d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101098:	4b1b      	ldr	r3, [pc, #108]	; (8101108 <HAL_SPDIFRX_MspInit+0xe8>)
 810109a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810109e:	4a1a      	ldr	r2, [pc, #104]	; (8101108 <HAL_SPDIFRX_MspInit+0xe8>)
 81010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81010a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81010a8:	4b17      	ldr	r3, [pc, #92]	; (8101108 <HAL_SPDIFRX_MspInit+0xe8>)
 81010aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81010b2:	60fb      	str	r3, [r7, #12]
 81010b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81010b6:	4b14      	ldr	r3, [pc, #80]	; (8101108 <HAL_SPDIFRX_MspInit+0xe8>)
 81010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010bc:	4a12      	ldr	r2, [pc, #72]	; (8101108 <HAL_SPDIFRX_MspInit+0xe8>)
 81010be:	f043 0308 	orr.w	r3, r3, #8
 81010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81010c6:	4b10      	ldr	r3, [pc, #64]	; (8101108 <HAL_SPDIFRX_MspInit+0xe8>)
 81010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81010cc:	f003 0308 	and.w	r3, r3, #8
 81010d0:	60bb      	str	r3, [r7, #8]
 81010d2:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 81010d4:	2380      	movs	r3, #128	; 0x80
 81010d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81010da:	2302      	movs	r3, #2
 81010dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010e0:	2300      	movs	r3, #0
 81010e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010e6:	2300      	movs	r3, #0
 81010e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 81010ec:	2309      	movs	r3, #9
 81010ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 81010f2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81010f6:	4619      	mov	r1, r3
 81010f8:	4804      	ldr	r0, [pc, #16]	; (810110c <HAL_SPDIFRX_MspInit+0xec>)
 81010fa:	f001 fe41 	bl	8102d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 81010fe:	bf00      	nop
 8101100:	37f0      	adds	r7, #240	; 0xf0
 8101102:	46bd      	mov	sp, r7
 8101104:	bd80      	pop	{r7, pc}
 8101106:	bf00      	nop
 8101108:	58024400 	.word	0x58024400
 810110c:	58020c00 	.word	0x58020c00

08101110 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8101110:	b480      	push	{r7}
 8101112:	b085      	sub	sp, #20
 8101114:	af00      	add	r7, sp, #0
 8101116:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	681b      	ldr	r3, [r3, #0]
 810111c:	4a0b      	ldr	r2, [pc, #44]	; (810114c <HAL_TIM_OC_MspInit+0x3c>)
 810111e:	4293      	cmp	r3, r2
 8101120:	d10e      	bne.n	8101140 <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8101122:	4b0b      	ldr	r3, [pc, #44]	; (8101150 <HAL_TIM_OC_MspInit+0x40>)
 8101124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101128:	4a09      	ldr	r2, [pc, #36]	; (8101150 <HAL_TIM_OC_MspInit+0x40>)
 810112a:	f043 0302 	orr.w	r3, r3, #2
 810112e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101132:	4b07      	ldr	r3, [pc, #28]	; (8101150 <HAL_TIM_OC_MspInit+0x40>)
 8101134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101138:	f003 0302 	and.w	r3, r3, #2
 810113c:	60fb      	str	r3, [r7, #12]
 810113e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8101140:	bf00      	nop
 8101142:	3714      	adds	r7, #20
 8101144:	46bd      	mov	sp, r7
 8101146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810114a:	4770      	bx	lr
 810114c:	40010400 	.word	0x40010400
 8101150:	58024400 	.word	0x58024400

08101154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8101154:	b580      	push	{r7, lr}
 8101156:	b08a      	sub	sp, #40	; 0x28
 8101158:	af00      	add	r7, sp, #0
 810115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810115c:	f107 0314 	add.w	r3, r7, #20
 8101160:	2200      	movs	r2, #0
 8101162:	601a      	str	r2, [r3, #0]
 8101164:	605a      	str	r2, [r3, #4]
 8101166:	609a      	str	r2, [r3, #8]
 8101168:	60da      	str	r2, [r3, #12]
 810116a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 810116c:	687b      	ldr	r3, [r7, #4]
 810116e:	681b      	ldr	r3, [r3, #0]
 8101170:	4a1a      	ldr	r2, [pc, #104]	; (81011dc <HAL_TIM_Base_MspInit+0x88>)
 8101172:	4293      	cmp	r3, r2
 8101174:	d12e      	bne.n	81011d4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8101176:	4b1a      	ldr	r3, [pc, #104]	; (81011e0 <HAL_TIM_Base_MspInit+0x8c>)
 8101178:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810117c:	4a18      	ldr	r2, [pc, #96]	; (81011e0 <HAL_TIM_Base_MspInit+0x8c>)
 810117e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8101182:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101186:	4b16      	ldr	r3, [pc, #88]	; (81011e0 <HAL_TIM_Base_MspInit+0x8c>)
 8101188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810118c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8101190:	613b      	str	r3, [r7, #16]
 8101192:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101194:	4b12      	ldr	r3, [pc, #72]	; (81011e0 <HAL_TIM_Base_MspInit+0x8c>)
 8101196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810119a:	4a11      	ldr	r2, [pc, #68]	; (81011e0 <HAL_TIM_Base_MspInit+0x8c>)
 810119c:	f043 0320 	orr.w	r3, r3, #32
 81011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011a4:	4b0e      	ldr	r3, [pc, #56]	; (81011e0 <HAL_TIM_Base_MspInit+0x8c>)
 81011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011aa:	f003 0320 	and.w	r3, r3, #32
 81011ae:	60fb      	str	r3, [r7, #12]
 81011b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 81011b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 81011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011b8:	2302      	movs	r3, #2
 81011ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011bc:	2300      	movs	r3, #0
 81011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011c0:	2300      	movs	r3, #0
 81011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 81011c4:	2309      	movs	r3, #9
 81011c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 81011c8:	f107 0314 	add.w	r3, r7, #20
 81011cc:	4619      	mov	r1, r3
 81011ce:	4805      	ldr	r0, [pc, #20]	; (81011e4 <HAL_TIM_Base_MspInit+0x90>)
 81011d0:	f001 fdd6 	bl	8102d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 81011d4:	bf00      	nop
 81011d6:	3728      	adds	r7, #40	; 0x28
 81011d8:	46bd      	mov	sp, r7
 81011da:	bd80      	pop	{r7, pc}
 81011dc:	40001c00 	.word	0x40001c00
 81011e0:	58024400 	.word	0x58024400
 81011e4:	58021400 	.word	0x58021400

081011e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81011e8:	b580      	push	{r7, lr}
 81011ea:	b088      	sub	sp, #32
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011f0:	f107 030c 	add.w	r3, r7, #12
 81011f4:	2200      	movs	r2, #0
 81011f6:	601a      	str	r2, [r3, #0]
 81011f8:	605a      	str	r2, [r3, #4]
 81011fa:	609a      	str	r2, [r3, #8]
 81011fc:	60da      	str	r2, [r3, #12]
 81011fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8101200:	687b      	ldr	r3, [r7, #4]
 8101202:	681b      	ldr	r3, [r3, #0]
 8101204:	4a12      	ldr	r2, [pc, #72]	; (8101250 <HAL_TIM_MspPostInit+0x68>)
 8101206:	4293      	cmp	r3, r2
 8101208:	d11e      	bne.n	8101248 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810120a:	4b12      	ldr	r3, [pc, #72]	; (8101254 <HAL_TIM_MspPostInit+0x6c>)
 810120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101210:	4a10      	ldr	r2, [pc, #64]	; (8101254 <HAL_TIM_MspPostInit+0x6c>)
 8101212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101216:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810121a:	4b0e      	ldr	r3, [pc, #56]	; (8101254 <HAL_TIM_MspPostInit+0x6c>)
 810121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101220:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101224:	60bb      	str	r3, [r7, #8]
 8101226:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 8101228:	23c0      	movs	r3, #192	; 0xc0
 810122a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810122c:	2302      	movs	r3, #2
 810122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101230:	2300      	movs	r3, #0
 8101232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101234:	2300      	movs	r3, #0
 8101236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8101238:	2303      	movs	r3, #3
 810123a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 810123c:	f107 030c 	add.w	r3, r7, #12
 8101240:	4619      	mov	r1, r3
 8101242:	4805      	ldr	r0, [pc, #20]	; (8101258 <HAL_TIM_MspPostInit+0x70>)
 8101244:	f001 fd9c 	bl	8102d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8101248:	bf00      	nop
 810124a:	3720      	adds	r7, #32
 810124c:	46bd      	mov	sp, r7
 810124e:	bd80      	pop	{r7, pc}
 8101250:	40010400 	.word	0x40010400
 8101254:	58024400 	.word	0x58024400
 8101258:	58022400 	.word	0x58022400

0810125c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 810125c:	b580      	push	{r7, lr}
 810125e:	b08a      	sub	sp, #40	; 0x28
 8101260:	af00      	add	r7, sp, #0
 8101262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	681b      	ldr	r3, [r3, #0]
 8101268:	4a35      	ldr	r2, [pc, #212]	; (8101340 <HAL_SAI_MspInit+0xe4>)
 810126a:	4293      	cmp	r3, r2
 810126c:	d137      	bne.n	81012de <HAL_SAI_MspInit+0x82>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 810126e:	4b35      	ldr	r3, [pc, #212]	; (8101344 <HAL_SAI_MspInit+0xe8>)
 8101270:	681b      	ldr	r3, [r3, #0]
 8101272:	2b00      	cmp	r3, #0
 8101274:	d10e      	bne.n	8101294 <HAL_SAI_MspInit+0x38>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8101276:	4b34      	ldr	r3, [pc, #208]	; (8101348 <HAL_SAI_MspInit+0xec>)
 8101278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810127c:	4a32      	ldr	r2, [pc, #200]	; (8101348 <HAL_SAI_MspInit+0xec>)
 810127e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8101282:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101286:	4b30      	ldr	r3, [pc, #192]	; (8101348 <HAL_SAI_MspInit+0xec>)
 8101288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810128c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101290:	613b      	str	r3, [r7, #16]
 8101292:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8101294:	4b2b      	ldr	r3, [pc, #172]	; (8101344 <HAL_SAI_MspInit+0xe8>)
 8101296:	681b      	ldr	r3, [r3, #0]
 8101298:	3301      	adds	r3, #1
 810129a:	4a2a      	ldr	r2, [pc, #168]	; (8101344 <HAL_SAI_MspInit+0xe8>)
 810129c:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 810129e:	2370      	movs	r3, #112	; 0x70
 81012a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012a2:	2302      	movs	r3, #2
 81012a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012a6:	2300      	movs	r3, #0
 81012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012aa:	2300      	movs	r3, #0
 81012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81012ae:	2306      	movs	r3, #6
 81012b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81012b2:	f107 0314 	add.w	r3, r7, #20
 81012b6:	4619      	mov	r1, r3
 81012b8:	4824      	ldr	r0, [pc, #144]	; (810134c <HAL_SAI_MspInit+0xf0>)
 81012ba:	f001 fd61 	bl	8102d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 81012be:	2380      	movs	r3, #128	; 0x80
 81012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012c2:	2302      	movs	r3, #2
 81012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012c6:	2300      	movs	r3, #0
 81012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012ca:	2300      	movs	r3, #0
 81012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 81012ce:	2306      	movs	r3, #6
 81012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 81012d2:	f107 0314 	add.w	r3, r7, #20
 81012d6:	4619      	mov	r1, r3
 81012d8:	481d      	ldr	r0, [pc, #116]	; (8101350 <HAL_SAI_MspInit+0xf4>)
 81012da:	f001 fd51 	bl	8102d80 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81012de:	687b      	ldr	r3, [r7, #4]
 81012e0:	681b      	ldr	r3, [r3, #0]
 81012e2:	4a1c      	ldr	r2, [pc, #112]	; (8101354 <HAL_SAI_MspInit+0xf8>)
 81012e4:	4293      	cmp	r3, r2
 81012e6:	d127      	bne.n	8101338 <HAL_SAI_MspInit+0xdc>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 81012e8:	4b16      	ldr	r3, [pc, #88]	; (8101344 <HAL_SAI_MspInit+0xe8>)
 81012ea:	681b      	ldr	r3, [r3, #0]
 81012ec:	2b00      	cmp	r3, #0
 81012ee:	d10e      	bne.n	810130e <HAL_SAI_MspInit+0xb2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81012f0:	4b15      	ldr	r3, [pc, #84]	; (8101348 <HAL_SAI_MspInit+0xec>)
 81012f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81012f6:	4a14      	ldr	r2, [pc, #80]	; (8101348 <HAL_SAI_MspInit+0xec>)
 81012f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81012fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101300:	4b11      	ldr	r3, [pc, #68]	; (8101348 <HAL_SAI_MspInit+0xec>)
 8101302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810130a:	60fb      	str	r3, [r7, #12]
 810130c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 810130e:	4b0d      	ldr	r3, [pc, #52]	; (8101344 <HAL_SAI_MspInit+0xe8>)
 8101310:	681b      	ldr	r3, [r3, #0]
 8101312:	3301      	adds	r3, #1
 8101314:	4a0b      	ldr	r2, [pc, #44]	; (8101344 <HAL_SAI_MspInit+0xe8>)
 8101316:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 8101318:	2308      	movs	r3, #8
 810131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810131c:	2302      	movs	r3, #2
 810131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101320:	2300      	movs	r3, #0
 8101322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101324:	2300      	movs	r3, #0
 8101326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8101328:	2306      	movs	r3, #6
 810132a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 810132c:	f107 0314 	add.w	r3, r7, #20
 8101330:	4619      	mov	r1, r3
 8101332:	4806      	ldr	r0, [pc, #24]	; (810134c <HAL_SAI_MspInit+0xf0>)
 8101334:	f001 fd24 	bl	8102d80 <HAL_GPIO_Init>

    }
}
 8101338:	bf00      	nop
 810133a:	3728      	adds	r7, #40	; 0x28
 810133c:	46bd      	mov	sp, r7
 810133e:	bd80      	pop	{r7, pc}
 8101340:	40015804 	.word	0x40015804
 8101344:	100004dc 	.word	0x100004dc
 8101348:	58024400 	.word	0x58024400
 810134c:	58021000 	.word	0x58021000
 8101350:	58021800 	.word	0x58021800
 8101354:	40015824 	.word	0x40015824

08101358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101358:	b480      	push	{r7}
 810135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 810135c:	e7fe      	b.n	810135c <NMI_Handler+0x4>

0810135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810135e:	b480      	push	{r7}
 8101360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101362:	e7fe      	b.n	8101362 <HardFault_Handler+0x4>

08101364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101364:	b480      	push	{r7}
 8101366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101368:	e7fe      	b.n	8101368 <MemManage_Handler+0x4>

0810136a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810136a:	b480      	push	{r7}
 810136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810136e:	e7fe      	b.n	810136e <BusFault_Handler+0x4>

08101370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101370:	b480      	push	{r7}
 8101372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101374:	e7fe      	b.n	8101374 <UsageFault_Handler+0x4>

08101376 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101376:	b480      	push	{r7}
 8101378:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810137a:	bf00      	nop
 810137c:	46bd      	mov	sp, r7
 810137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101382:	4770      	bx	lr

08101384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101384:	b480      	push	{r7}
 8101386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101388:	bf00      	nop
 810138a:	46bd      	mov	sp, r7
 810138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101390:	4770      	bx	lr

08101392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101392:	b480      	push	{r7}
 8101394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101396:	bf00      	nop
 8101398:	46bd      	mov	sp, r7
 810139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810139e:	4770      	bx	lr

081013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81013a0:	b580      	push	{r7, lr}
 81013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81013a4:	f000 f996 	bl	81016d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81013a8:	bf00      	nop
 81013aa:	bd80      	pop	{r7, pc}

081013ac <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 81013ac:	b580      	push	{r7, lr}
 81013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 81013b0:	4802      	ldr	r0, [pc, #8]	; (81013bc <CEC_IRQHandler+0x10>)
 81013b2:	f001 fac5 	bl	8102940 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 81013b6:	bf00      	nop
 81013b8:	bd80      	pop	{r7, pc}
 81013ba:	bf00      	nop
 81013bc:	1000024c 	.word	0x1000024c

081013c0 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 81013c0:	b580      	push	{r7, lr}
 81013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 81013c4:	f001 fecc 	bl	8103160 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 81013c8:	bf00      	nop
 81013ca:	bd80      	pop	{r7, pc}

081013cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81013cc:	b480      	push	{r7}
 81013ce:	af00      	add	r7, sp, #0
  return 1;
 81013d0:	2301      	movs	r3, #1
}
 81013d2:	4618      	mov	r0, r3
 81013d4:	46bd      	mov	sp, r7
 81013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013da:	4770      	bx	lr

081013dc <_kill>:

int _kill(int pid, int sig)
{
 81013dc:	b580      	push	{r7, lr}
 81013de:	b082      	sub	sp, #8
 81013e0:	af00      	add	r7, sp, #0
 81013e2:	6078      	str	r0, [r7, #4]
 81013e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81013e6:	f008 ff5f 	bl	810a2a8 <__errno>
 81013ea:	4603      	mov	r3, r0
 81013ec:	2216      	movs	r2, #22
 81013ee:	601a      	str	r2, [r3, #0]
  return -1;
 81013f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 81013f4:	4618      	mov	r0, r3
 81013f6:	3708      	adds	r7, #8
 81013f8:	46bd      	mov	sp, r7
 81013fa:	bd80      	pop	{r7, pc}

081013fc <_exit>:

void _exit (int status)
{
 81013fc:	b580      	push	{r7, lr}
 81013fe:	b082      	sub	sp, #8
 8101400:	af00      	add	r7, sp, #0
 8101402:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8101408:	6878      	ldr	r0, [r7, #4]
 810140a:	f7ff ffe7 	bl	81013dc <_kill>
  while (1) {}    /* Make sure we hang here */
 810140e:	e7fe      	b.n	810140e <_exit+0x12>

08101410 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101410:	b580      	push	{r7, lr}
 8101412:	b086      	sub	sp, #24
 8101414:	af00      	add	r7, sp, #0
 8101416:	60f8      	str	r0, [r7, #12]
 8101418:	60b9      	str	r1, [r7, #8]
 810141a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810141c:	2300      	movs	r3, #0
 810141e:	617b      	str	r3, [r7, #20]
 8101420:	e00a      	b.n	8101438 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101422:	f3af 8000 	nop.w
 8101426:	4601      	mov	r1, r0
 8101428:	68bb      	ldr	r3, [r7, #8]
 810142a:	1c5a      	adds	r2, r3, #1
 810142c:	60ba      	str	r2, [r7, #8]
 810142e:	b2ca      	uxtb	r2, r1
 8101430:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101432:	697b      	ldr	r3, [r7, #20]
 8101434:	3301      	adds	r3, #1
 8101436:	617b      	str	r3, [r7, #20]
 8101438:	697a      	ldr	r2, [r7, #20]
 810143a:	687b      	ldr	r3, [r7, #4]
 810143c:	429a      	cmp	r2, r3
 810143e:	dbf0      	blt.n	8101422 <_read+0x12>
  }

  return len;
 8101440:	687b      	ldr	r3, [r7, #4]
}
 8101442:	4618      	mov	r0, r3
 8101444:	3718      	adds	r7, #24
 8101446:	46bd      	mov	sp, r7
 8101448:	bd80      	pop	{r7, pc}

0810144a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810144a:	b580      	push	{r7, lr}
 810144c:	b086      	sub	sp, #24
 810144e:	af00      	add	r7, sp, #0
 8101450:	60f8      	str	r0, [r7, #12]
 8101452:	60b9      	str	r1, [r7, #8]
 8101454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101456:	2300      	movs	r3, #0
 8101458:	617b      	str	r3, [r7, #20]
 810145a:	e009      	b.n	8101470 <_write+0x26>
  {
    __io_putchar(*ptr++);
 810145c:	68bb      	ldr	r3, [r7, #8]
 810145e:	1c5a      	adds	r2, r3, #1
 8101460:	60ba      	str	r2, [r7, #8]
 8101462:	781b      	ldrb	r3, [r3, #0]
 8101464:	4618      	mov	r0, r3
 8101466:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810146a:	697b      	ldr	r3, [r7, #20]
 810146c:	3301      	adds	r3, #1
 810146e:	617b      	str	r3, [r7, #20]
 8101470:	697a      	ldr	r2, [r7, #20]
 8101472:	687b      	ldr	r3, [r7, #4]
 8101474:	429a      	cmp	r2, r3
 8101476:	dbf1      	blt.n	810145c <_write+0x12>
  }
  return len;
 8101478:	687b      	ldr	r3, [r7, #4]
}
 810147a:	4618      	mov	r0, r3
 810147c:	3718      	adds	r7, #24
 810147e:	46bd      	mov	sp, r7
 8101480:	bd80      	pop	{r7, pc}

08101482 <_close>:

int _close(int file)
{
 8101482:	b480      	push	{r7}
 8101484:	b083      	sub	sp, #12
 8101486:	af00      	add	r7, sp, #0
 8101488:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810148a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 810148e:	4618      	mov	r0, r3
 8101490:	370c      	adds	r7, #12
 8101492:	46bd      	mov	sp, r7
 8101494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101498:	4770      	bx	lr

0810149a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810149a:	b480      	push	{r7}
 810149c:	b083      	sub	sp, #12
 810149e:	af00      	add	r7, sp, #0
 81014a0:	6078      	str	r0, [r7, #4]
 81014a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 81014a4:	683b      	ldr	r3, [r7, #0]
 81014a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81014aa:	605a      	str	r2, [r3, #4]
  return 0;
 81014ac:	2300      	movs	r3, #0
}
 81014ae:	4618      	mov	r0, r3
 81014b0:	370c      	adds	r7, #12
 81014b2:	46bd      	mov	sp, r7
 81014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014b8:	4770      	bx	lr

081014ba <_isatty>:

int _isatty(int file)
{
 81014ba:	b480      	push	{r7}
 81014bc:	b083      	sub	sp, #12
 81014be:	af00      	add	r7, sp, #0
 81014c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81014c2:	2301      	movs	r3, #1
}
 81014c4:	4618      	mov	r0, r3
 81014c6:	370c      	adds	r7, #12
 81014c8:	46bd      	mov	sp, r7
 81014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ce:	4770      	bx	lr

081014d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81014d0:	b480      	push	{r7}
 81014d2:	b085      	sub	sp, #20
 81014d4:	af00      	add	r7, sp, #0
 81014d6:	60f8      	str	r0, [r7, #12]
 81014d8:	60b9      	str	r1, [r7, #8]
 81014da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81014dc:	2300      	movs	r3, #0
}
 81014de:	4618      	mov	r0, r3
 81014e0:	3714      	adds	r7, #20
 81014e2:	46bd      	mov	sp, r7
 81014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014e8:	4770      	bx	lr
	...

081014ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81014ec:	b580      	push	{r7, lr}
 81014ee:	b086      	sub	sp, #24
 81014f0:	af00      	add	r7, sp, #0
 81014f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81014f4:	4a14      	ldr	r2, [pc, #80]	; (8101548 <_sbrk+0x5c>)
 81014f6:	4b15      	ldr	r3, [pc, #84]	; (810154c <_sbrk+0x60>)
 81014f8:	1ad3      	subs	r3, r2, r3
 81014fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81014fc:	697b      	ldr	r3, [r7, #20]
 81014fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101500:	4b13      	ldr	r3, [pc, #76]	; (8101550 <_sbrk+0x64>)
 8101502:	681b      	ldr	r3, [r3, #0]
 8101504:	2b00      	cmp	r3, #0
 8101506:	d102      	bne.n	810150e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101508:	4b11      	ldr	r3, [pc, #68]	; (8101550 <_sbrk+0x64>)
 810150a:	4a12      	ldr	r2, [pc, #72]	; (8101554 <_sbrk+0x68>)
 810150c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810150e:	4b10      	ldr	r3, [pc, #64]	; (8101550 <_sbrk+0x64>)
 8101510:	681a      	ldr	r2, [r3, #0]
 8101512:	687b      	ldr	r3, [r7, #4]
 8101514:	4413      	add	r3, r2
 8101516:	693a      	ldr	r2, [r7, #16]
 8101518:	429a      	cmp	r2, r3
 810151a:	d207      	bcs.n	810152c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810151c:	f008 fec4 	bl	810a2a8 <__errno>
 8101520:	4603      	mov	r3, r0
 8101522:	220c      	movs	r2, #12
 8101524:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810152a:	e009      	b.n	8101540 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810152c:	4b08      	ldr	r3, [pc, #32]	; (8101550 <_sbrk+0x64>)
 810152e:	681b      	ldr	r3, [r3, #0]
 8101530:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101532:	4b07      	ldr	r3, [pc, #28]	; (8101550 <_sbrk+0x64>)
 8101534:	681a      	ldr	r2, [r3, #0]
 8101536:	687b      	ldr	r3, [r7, #4]
 8101538:	4413      	add	r3, r2
 810153a:	4a05      	ldr	r2, [pc, #20]	; (8101550 <_sbrk+0x64>)
 810153c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810153e:	68fb      	ldr	r3, [r7, #12]
}
 8101540:	4618      	mov	r0, r3
 8101542:	3718      	adds	r7, #24
 8101544:	46bd      	mov	sp, r7
 8101546:	bd80      	pop	{r7, pc}
 8101548:	10048000 	.word	0x10048000
 810154c:	00000400 	.word	0x00000400
 8101550:	100004e0 	.word	0x100004e0
 8101554:	100005b0 	.word	0x100005b0

08101558 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101590 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810155c:	f7fe ff20 	bl	81003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101560:	480c      	ldr	r0, [pc, #48]	; (8101594 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101562:	490d      	ldr	r1, [pc, #52]	; (8101598 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101564:	4a0d      	ldr	r2, [pc, #52]	; (810159c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101566:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101568:	e002      	b.n	8101570 <LoopCopyDataInit>

0810156a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810156a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810156c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810156e:	3304      	adds	r3, #4

08101570 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101570:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101572:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101574:	d3f9      	bcc.n	810156a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101576:	4a0a      	ldr	r2, [pc, #40]	; (81015a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101578:	4c0a      	ldr	r4, [pc, #40]	; (81015a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 810157a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810157c:	e001      	b.n	8101582 <LoopFillZerobss>

0810157e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810157e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101580:	3204      	adds	r2, #4

08101582 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101582:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101584:	d3fb      	bcc.n	810157e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101586:	f008 fea7 	bl	810a2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810158a:	f7fe ffb3 	bl	81004f4 <main>
  bx  lr
 810158e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101590:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101594:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101598:	1000011c 	.word	0x1000011c
  ldr r2, =_sidata
 810159c:	0810b6a8 	.word	0x0810b6a8
  ldr r2, =_sbss
 81015a0:	1000011c 	.word	0x1000011c
  ldr r4, =_ebss
 81015a4:	100005b0 	.word	0x100005b0

081015a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81015a8:	e7fe      	b.n	81015a8 <ADC3_IRQHandler>
	...

081015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81015ac:	b580      	push	{r7, lr}
 81015ae:	b082      	sub	sp, #8
 81015b0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81015b2:	4b28      	ldr	r3, [pc, #160]	; (8101654 <HAL_Init+0xa8>)
 81015b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81015b8:	4a26      	ldr	r2, [pc, #152]	; (8101654 <HAL_Init+0xa8>)
 81015ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81015be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81015c2:	4b24      	ldr	r3, [pc, #144]	; (8101654 <HAL_Init+0xa8>)
 81015c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81015c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81015cc:	603b      	str	r3, [r7, #0]
 81015ce:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81015d0:	4b21      	ldr	r3, [pc, #132]	; (8101658 <HAL_Init+0xac>)
 81015d2:	681b      	ldr	r3, [r3, #0]
 81015d4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81015d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81015dc:	4a1e      	ldr	r2, [pc, #120]	; (8101658 <HAL_Init+0xac>)
 81015de:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81015e2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81015e4:	4b1c      	ldr	r3, [pc, #112]	; (8101658 <HAL_Init+0xac>)
 81015e6:	681b      	ldr	r3, [r3, #0]
 81015e8:	4a1b      	ldr	r2, [pc, #108]	; (8101658 <HAL_Init+0xac>)
 81015ea:	f043 0301 	orr.w	r3, r3, #1
 81015ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81015f0:	2003      	movs	r0, #3
 81015f2:	f001 fb71 	bl	8102cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81015f6:	f001 fe55 	bl	81032a4 <HAL_RCC_GetSysClockFreq>
 81015fa:	4602      	mov	r2, r0
 81015fc:	4b15      	ldr	r3, [pc, #84]	; (8101654 <HAL_Init+0xa8>)
 81015fe:	699b      	ldr	r3, [r3, #24]
 8101600:	0a1b      	lsrs	r3, r3, #8
 8101602:	f003 030f 	and.w	r3, r3, #15
 8101606:	4915      	ldr	r1, [pc, #84]	; (810165c <HAL_Init+0xb0>)
 8101608:	5ccb      	ldrb	r3, [r1, r3]
 810160a:	f003 031f 	and.w	r3, r3, #31
 810160e:	fa22 f303 	lsr.w	r3, r2, r3
 8101612:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101614:	4b0f      	ldr	r3, [pc, #60]	; (8101654 <HAL_Init+0xa8>)
 8101616:	699b      	ldr	r3, [r3, #24]
 8101618:	f003 030f 	and.w	r3, r3, #15
 810161c:	4a0f      	ldr	r2, [pc, #60]	; (810165c <HAL_Init+0xb0>)
 810161e:	5cd3      	ldrb	r3, [r2, r3]
 8101620:	f003 031f 	and.w	r3, r3, #31
 8101624:	687a      	ldr	r2, [r7, #4]
 8101626:	fa22 f303 	lsr.w	r3, r2, r3
 810162a:	4a0d      	ldr	r2, [pc, #52]	; (8101660 <HAL_Init+0xb4>)
 810162c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810162e:	4b0c      	ldr	r3, [pc, #48]	; (8101660 <HAL_Init+0xb4>)
 8101630:	681b      	ldr	r3, [r3, #0]
 8101632:	4a0c      	ldr	r2, [pc, #48]	; (8101664 <HAL_Init+0xb8>)
 8101634:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101636:	2000      	movs	r0, #0
 8101638:	f000 f816 	bl	8101668 <HAL_InitTick>
 810163c:	4603      	mov	r3, r0
 810163e:	2b00      	cmp	r3, #0
 8101640:	d001      	beq.n	8101646 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101642:	2301      	movs	r3, #1
 8101644:	e002      	b.n	810164c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101646:	f7ff fb93 	bl	8100d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810164a:	2300      	movs	r3, #0
}
 810164c:	4618      	mov	r0, r3
 810164e:	3708      	adds	r7, #8
 8101650:	46bd      	mov	sp, r7
 8101652:	bd80      	pop	{r7, pc}
 8101654:	58024400 	.word	0x58024400
 8101658:	40024400 	.word	0x40024400
 810165c:	0810b568 	.word	0x0810b568
 8101660:	10000004 	.word	0x10000004
 8101664:	10000000 	.word	0x10000000

08101668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101668:	b580      	push	{r7, lr}
 810166a:	b082      	sub	sp, #8
 810166c:	af00      	add	r7, sp, #0
 810166e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101670:	4b15      	ldr	r3, [pc, #84]	; (81016c8 <HAL_InitTick+0x60>)
 8101672:	781b      	ldrb	r3, [r3, #0]
 8101674:	2b00      	cmp	r3, #0
 8101676:	d101      	bne.n	810167c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101678:	2301      	movs	r3, #1
 810167a:	e021      	b.n	81016c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810167c:	4b13      	ldr	r3, [pc, #76]	; (81016cc <HAL_InitTick+0x64>)
 810167e:	681a      	ldr	r2, [r3, #0]
 8101680:	4b11      	ldr	r3, [pc, #68]	; (81016c8 <HAL_InitTick+0x60>)
 8101682:	781b      	ldrb	r3, [r3, #0]
 8101684:	4619      	mov	r1, r3
 8101686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810168a:	fbb3 f3f1 	udiv	r3, r3, r1
 810168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101692:	4618      	mov	r0, r3
 8101694:	f001 fb53 	bl	8102d3e <HAL_SYSTICK_Config>
 8101698:	4603      	mov	r3, r0
 810169a:	2b00      	cmp	r3, #0
 810169c:	d001      	beq.n	81016a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810169e:	2301      	movs	r3, #1
 81016a0:	e00e      	b.n	81016c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	2b0f      	cmp	r3, #15
 81016a6:	d80a      	bhi.n	81016be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81016a8:	2200      	movs	r2, #0
 81016aa:	6879      	ldr	r1, [r7, #4]
 81016ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81016b0:	f001 fb1d 	bl	8102cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81016b4:	4a06      	ldr	r2, [pc, #24]	; (81016d0 <HAL_InitTick+0x68>)
 81016b6:	687b      	ldr	r3, [r7, #4]
 81016b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81016ba:	2300      	movs	r3, #0
 81016bc:	e000      	b.n	81016c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81016be:	2301      	movs	r3, #1
}
 81016c0:	4618      	mov	r0, r3
 81016c2:	3708      	adds	r7, #8
 81016c4:	46bd      	mov	sp, r7
 81016c6:	bd80      	pop	{r7, pc}
 81016c8:	1000000c 	.word	0x1000000c
 81016cc:	10000000 	.word	0x10000000
 81016d0:	10000008 	.word	0x10000008

081016d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81016d4:	b480      	push	{r7}
 81016d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81016d8:	4b06      	ldr	r3, [pc, #24]	; (81016f4 <HAL_IncTick+0x20>)
 81016da:	781b      	ldrb	r3, [r3, #0]
 81016dc:	461a      	mov	r2, r3
 81016de:	4b06      	ldr	r3, [pc, #24]	; (81016f8 <HAL_IncTick+0x24>)
 81016e0:	681b      	ldr	r3, [r3, #0]
 81016e2:	4413      	add	r3, r2
 81016e4:	4a04      	ldr	r2, [pc, #16]	; (81016f8 <HAL_IncTick+0x24>)
 81016e6:	6013      	str	r3, [r2, #0]
}
 81016e8:	bf00      	nop
 81016ea:	46bd      	mov	sp, r7
 81016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f0:	4770      	bx	lr
 81016f2:	bf00      	nop
 81016f4:	1000000c 	.word	0x1000000c
 81016f8:	100004e4 	.word	0x100004e4

081016fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81016fc:	b480      	push	{r7}
 81016fe:	af00      	add	r7, sp, #0
  return uwTick;
 8101700:	4b03      	ldr	r3, [pc, #12]	; (8101710 <HAL_GetTick+0x14>)
 8101702:	681b      	ldr	r3, [r3, #0]
}
 8101704:	4618      	mov	r0, r3
 8101706:	46bd      	mov	sp, r7
 8101708:	f85d 7b04 	ldr.w	r7, [sp], #4
 810170c:	4770      	bx	lr
 810170e:	bf00      	nop
 8101710:	100004e4 	.word	0x100004e4

08101714 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8101714:	b480      	push	{r7}
 8101716:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8101718:	4b03      	ldr	r3, [pc, #12]	; (8101728 <HAL_GetREVID+0x14>)
 810171a:	681b      	ldr	r3, [r3, #0]
 810171c:	0c1b      	lsrs	r3, r3, #16
}
 810171e:	4618      	mov	r0, r3
 8101720:	46bd      	mov	sp, r7
 8101722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101726:	4770      	bx	lr
 8101728:	5c001000 	.word	0x5c001000

0810172c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 810172c:	b480      	push	{r7}
 810172e:	b083      	sub	sp, #12
 8101730:	af00      	add	r7, sp, #0
 8101732:	6078      	str	r0, [r7, #4]
 8101734:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8101736:	4b07      	ldr	r3, [pc, #28]	; (8101754 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101738:	685a      	ldr	r2, [r3, #4]
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	43db      	mvns	r3, r3
 810173e:	401a      	ands	r2, r3
 8101740:	4904      	ldr	r1, [pc, #16]	; (8101754 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8101742:	683b      	ldr	r3, [r7, #0]
 8101744:	4313      	orrs	r3, r2
 8101746:	604b      	str	r3, [r1, #4]
}
 8101748:	bf00      	nop
 810174a:	370c      	adds	r7, #12
 810174c:	46bd      	mov	sp, r7
 810174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101752:	4770      	bx	lr
 8101754:	58000400 	.word	0x58000400

08101758 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8101758:	b480      	push	{r7}
 810175a:	b083      	sub	sp, #12
 810175c:	af00      	add	r7, sp, #0
 810175e:	6078      	str	r0, [r7, #4]
 8101760:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8101762:	687b      	ldr	r3, [r7, #4]
 8101764:	689b      	ldr	r3, [r3, #8]
 8101766:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 810176a:	683b      	ldr	r3, [r7, #0]
 810176c:	431a      	orrs	r2, r3
 810176e:	687b      	ldr	r3, [r7, #4]
 8101770:	609a      	str	r2, [r3, #8]
}
 8101772:	bf00      	nop
 8101774:	370c      	adds	r7, #12
 8101776:	46bd      	mov	sp, r7
 8101778:	f85d 7b04 	ldr.w	r7, [sp], #4
 810177c:	4770      	bx	lr

0810177e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 810177e:	b480      	push	{r7}
 8101780:	b083      	sub	sp, #12
 8101782:	af00      	add	r7, sp, #0
 8101784:	6078      	str	r0, [r7, #4]
 8101786:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8101788:	687b      	ldr	r3, [r7, #4]
 810178a:	689b      	ldr	r3, [r3, #8]
 810178c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8101790:	683b      	ldr	r3, [r7, #0]
 8101792:	431a      	orrs	r2, r3
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	609a      	str	r2, [r3, #8]
}
 8101798:	bf00      	nop
 810179a:	370c      	adds	r7, #12
 810179c:	46bd      	mov	sp, r7
 810179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a2:	4770      	bx	lr

081017a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 81017a4:	b480      	push	{r7}
 81017a6:	b083      	sub	sp, #12
 81017a8:	af00      	add	r7, sp, #0
 81017aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 81017ac:	687b      	ldr	r3, [r7, #4]
 81017ae:	689b      	ldr	r3, [r3, #8]
 81017b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 81017b4:	4618      	mov	r0, r3
 81017b6:	370c      	adds	r7, #12
 81017b8:	46bd      	mov	sp, r7
 81017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017be:	4770      	bx	lr

081017c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 81017c0:	b480      	push	{r7}
 81017c2:	b087      	sub	sp, #28
 81017c4:	af00      	add	r7, sp, #0
 81017c6:	60f8      	str	r0, [r7, #12]
 81017c8:	60b9      	str	r1, [r7, #8]
 81017ca:	607a      	str	r2, [r7, #4]
 81017cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81017ce:	68fb      	ldr	r3, [r7, #12]
 81017d0:	3360      	adds	r3, #96	; 0x60
 81017d2:	461a      	mov	r2, r3
 81017d4:	68bb      	ldr	r3, [r7, #8]
 81017d6:	009b      	lsls	r3, r3, #2
 81017d8:	4413      	add	r3, r2
 81017da:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 81017dc:	697b      	ldr	r3, [r7, #20]
 81017de:	681b      	ldr	r3, [r3, #0]
 81017e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 81017e4:	687b      	ldr	r3, [r7, #4]
 81017e6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 81017ea:	683b      	ldr	r3, [r7, #0]
 81017ec:	430b      	orrs	r3, r1
 81017ee:	431a      	orrs	r2, r3
 81017f0:	697b      	ldr	r3, [r7, #20]
 81017f2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 81017f4:	bf00      	nop
 81017f6:	371c      	adds	r7, #28
 81017f8:	46bd      	mov	sp, r7
 81017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017fe:	4770      	bx	lr

08101800 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101800:	b480      	push	{r7}
 8101802:	b085      	sub	sp, #20
 8101804:	af00      	add	r7, sp, #0
 8101806:	60f8      	str	r0, [r7, #12]
 8101808:	60b9      	str	r1, [r7, #8]
 810180a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 810180c:	68fb      	ldr	r3, [r7, #12]
 810180e:	691b      	ldr	r3, [r3, #16]
 8101810:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101814:	68bb      	ldr	r3, [r7, #8]
 8101816:	f003 031f 	and.w	r3, r3, #31
 810181a:	6879      	ldr	r1, [r7, #4]
 810181c:	fa01 f303 	lsl.w	r3, r1, r3
 8101820:	431a      	orrs	r2, r3
 8101822:	68fb      	ldr	r3, [r7, #12]
 8101824:	611a      	str	r2, [r3, #16]
}
 8101826:	bf00      	nop
 8101828:	3714      	adds	r7, #20
 810182a:	46bd      	mov	sp, r7
 810182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101830:	4770      	bx	lr

08101832 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101832:	b480      	push	{r7}
 8101834:	b087      	sub	sp, #28
 8101836:	af00      	add	r7, sp, #0
 8101838:	60f8      	str	r0, [r7, #12]
 810183a:	60b9      	str	r1, [r7, #8]
 810183c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 810183e:	68fb      	ldr	r3, [r7, #12]
 8101840:	3360      	adds	r3, #96	; 0x60
 8101842:	461a      	mov	r2, r3
 8101844:	68bb      	ldr	r3, [r7, #8]
 8101846:	009b      	lsls	r3, r3, #2
 8101848:	4413      	add	r3, r2
 810184a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 810184c:	697b      	ldr	r3, [r7, #20]
 810184e:	681b      	ldr	r3, [r3, #0]
 8101850:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8101854:	687b      	ldr	r3, [r7, #4]
 8101856:	431a      	orrs	r2, r3
 8101858:	697b      	ldr	r3, [r7, #20]
 810185a:	601a      	str	r2, [r3, #0]
  }
}
 810185c:	bf00      	nop
 810185e:	371c      	adds	r7, #28
 8101860:	46bd      	mov	sp, r7
 8101862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101866:	4770      	bx	lr

08101868 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8101868:	b480      	push	{r7}
 810186a:	b087      	sub	sp, #28
 810186c:	af00      	add	r7, sp, #0
 810186e:	60f8      	str	r0, [r7, #12]
 8101870:	60b9      	str	r1, [r7, #8]
 8101872:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8101874:	68fb      	ldr	r3, [r7, #12]
 8101876:	3330      	adds	r3, #48	; 0x30
 8101878:	461a      	mov	r2, r3
 810187a:	68bb      	ldr	r3, [r7, #8]
 810187c:	0a1b      	lsrs	r3, r3, #8
 810187e:	009b      	lsls	r3, r3, #2
 8101880:	f003 030c 	and.w	r3, r3, #12
 8101884:	4413      	add	r3, r2
 8101886:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101888:	697b      	ldr	r3, [r7, #20]
 810188a:	681a      	ldr	r2, [r3, #0]
 810188c:	68bb      	ldr	r3, [r7, #8]
 810188e:	f003 031f 	and.w	r3, r3, #31
 8101892:	211f      	movs	r1, #31
 8101894:	fa01 f303 	lsl.w	r3, r1, r3
 8101898:	43db      	mvns	r3, r3
 810189a:	401a      	ands	r2, r3
 810189c:	687b      	ldr	r3, [r7, #4]
 810189e:	0e9b      	lsrs	r3, r3, #26
 81018a0:	f003 011f 	and.w	r1, r3, #31
 81018a4:	68bb      	ldr	r3, [r7, #8]
 81018a6:	f003 031f 	and.w	r3, r3, #31
 81018aa:	fa01 f303 	lsl.w	r3, r1, r3
 81018ae:	431a      	orrs	r2, r3
 81018b0:	697b      	ldr	r3, [r7, #20]
 81018b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 81018b4:	bf00      	nop
 81018b6:	371c      	adds	r7, #28
 81018b8:	46bd      	mov	sp, r7
 81018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018be:	4770      	bx	lr

081018c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 81018c0:	b480      	push	{r7}
 81018c2:	b087      	sub	sp, #28
 81018c4:	af00      	add	r7, sp, #0
 81018c6:	60f8      	str	r0, [r7, #12]
 81018c8:	60b9      	str	r1, [r7, #8]
 81018ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 81018cc:	68fb      	ldr	r3, [r7, #12]
 81018ce:	3314      	adds	r3, #20
 81018d0:	461a      	mov	r2, r3
 81018d2:	68bb      	ldr	r3, [r7, #8]
 81018d4:	0e5b      	lsrs	r3, r3, #25
 81018d6:	009b      	lsls	r3, r3, #2
 81018d8:	f003 0304 	and.w	r3, r3, #4
 81018dc:	4413      	add	r3, r2
 81018de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 81018e0:	697b      	ldr	r3, [r7, #20]
 81018e2:	681a      	ldr	r2, [r3, #0]
 81018e4:	68bb      	ldr	r3, [r7, #8]
 81018e6:	0d1b      	lsrs	r3, r3, #20
 81018e8:	f003 031f 	and.w	r3, r3, #31
 81018ec:	2107      	movs	r1, #7
 81018ee:	fa01 f303 	lsl.w	r3, r1, r3
 81018f2:	43db      	mvns	r3, r3
 81018f4:	401a      	ands	r2, r3
 81018f6:	68bb      	ldr	r3, [r7, #8]
 81018f8:	0d1b      	lsrs	r3, r3, #20
 81018fa:	f003 031f 	and.w	r3, r3, #31
 81018fe:	6879      	ldr	r1, [r7, #4]
 8101900:	fa01 f303 	lsl.w	r3, r1, r3
 8101904:	431a      	orrs	r2, r3
 8101906:	697b      	ldr	r3, [r7, #20]
 8101908:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 810190a:	bf00      	nop
 810190c:	371c      	adds	r7, #28
 810190e:	46bd      	mov	sp, r7
 8101910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101914:	4770      	bx	lr
	...

08101918 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8101918:	b480      	push	{r7}
 810191a:	b085      	sub	sp, #20
 810191c:	af00      	add	r7, sp, #0
 810191e:	60f8      	str	r0, [r7, #12]
 8101920:	60b9      	str	r1, [r7, #8]
 8101922:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8101924:	68fb      	ldr	r3, [r7, #12]
 8101926:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 810192a:	68bb      	ldr	r3, [r7, #8]
 810192c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101930:	43db      	mvns	r3, r3
 8101932:	401a      	ands	r2, r3
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	f003 0318 	and.w	r3, r3, #24
 810193a:	4908      	ldr	r1, [pc, #32]	; (810195c <LL_ADC_SetChannelSingleDiff+0x44>)
 810193c:	40d9      	lsrs	r1, r3
 810193e:	68bb      	ldr	r3, [r7, #8]
 8101940:	400b      	ands	r3, r1
 8101942:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101946:	431a      	orrs	r2, r3
 8101948:	68fb      	ldr	r3, [r7, #12]
 810194a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 810194e:	bf00      	nop
 8101950:	3714      	adds	r7, #20
 8101952:	46bd      	mov	sp, r7
 8101954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101958:	4770      	bx	lr
 810195a:	bf00      	nop
 810195c:	000fffff 	.word	0x000fffff

08101960 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101960:	b480      	push	{r7}
 8101962:	b083      	sub	sp, #12
 8101964:	af00      	add	r7, sp, #0
 8101966:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101968:	687b      	ldr	r3, [r7, #4]
 810196a:	689b      	ldr	r3, [r3, #8]
 810196c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8101970:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101974:	687a      	ldr	r2, [r7, #4]
 8101976:	6093      	str	r3, [r2, #8]
}
 8101978:	bf00      	nop
 810197a:	370c      	adds	r7, #12
 810197c:	46bd      	mov	sp, r7
 810197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101982:	4770      	bx	lr

08101984 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8101984:	b480      	push	{r7}
 8101986:	b083      	sub	sp, #12
 8101988:	af00      	add	r7, sp, #0
 810198a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 810198c:	687b      	ldr	r3, [r7, #4]
 810198e:	689b      	ldr	r3, [r3, #8]
 8101990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101998:	d101      	bne.n	810199e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 810199a:	2301      	movs	r3, #1
 810199c:	e000      	b.n	81019a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 810199e:	2300      	movs	r3, #0
}
 81019a0:	4618      	mov	r0, r3
 81019a2:	370c      	adds	r7, #12
 81019a4:	46bd      	mov	sp, r7
 81019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019aa:	4770      	bx	lr

081019ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 81019ac:	b480      	push	{r7}
 81019ae:	b083      	sub	sp, #12
 81019b0:	af00      	add	r7, sp, #0
 81019b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 81019b4:	687b      	ldr	r3, [r7, #4]
 81019b6:	689b      	ldr	r3, [r3, #8]
 81019b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 81019bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 81019c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 81019c4:	687b      	ldr	r3, [r7, #4]
 81019c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 81019c8:	bf00      	nop
 81019ca:	370c      	adds	r7, #12
 81019cc:	46bd      	mov	sp, r7
 81019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019d2:	4770      	bx	lr

081019d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 81019d4:	b480      	push	{r7}
 81019d6:	b083      	sub	sp, #12
 81019d8:	af00      	add	r7, sp, #0
 81019da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	689b      	ldr	r3, [r3, #8]
 81019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81019e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81019e8:	d101      	bne.n	81019ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 81019ea:	2301      	movs	r3, #1
 81019ec:	e000      	b.n	81019f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 81019ee:	2300      	movs	r3, #0
}
 81019f0:	4618      	mov	r0, r3
 81019f2:	370c      	adds	r7, #12
 81019f4:	46bd      	mov	sp, r7
 81019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019fa:	4770      	bx	lr

081019fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 81019fc:	b480      	push	{r7}
 81019fe:	b083      	sub	sp, #12
 8101a00:	af00      	add	r7, sp, #0
 8101a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101a04:	687b      	ldr	r3, [r7, #4]
 8101a06:	689b      	ldr	r3, [r3, #8]
 8101a08:	f003 0301 	and.w	r3, r3, #1
 8101a0c:	2b01      	cmp	r3, #1
 8101a0e:	d101      	bne.n	8101a14 <LL_ADC_IsEnabled+0x18>
 8101a10:	2301      	movs	r3, #1
 8101a12:	e000      	b.n	8101a16 <LL_ADC_IsEnabled+0x1a>
 8101a14:	2300      	movs	r3, #0
}
 8101a16:	4618      	mov	r0, r3
 8101a18:	370c      	adds	r7, #12
 8101a1a:	46bd      	mov	sp, r7
 8101a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a20:	4770      	bx	lr

08101a22 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101a22:	b480      	push	{r7}
 8101a24:	b083      	sub	sp, #12
 8101a26:	af00      	add	r7, sp, #0
 8101a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101a2a:	687b      	ldr	r3, [r7, #4]
 8101a2c:	689b      	ldr	r3, [r3, #8]
 8101a2e:	f003 0304 	and.w	r3, r3, #4
 8101a32:	2b04      	cmp	r3, #4
 8101a34:	d101      	bne.n	8101a3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8101a36:	2301      	movs	r3, #1
 8101a38:	e000      	b.n	8101a3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101a3a:	2300      	movs	r3, #0
}
 8101a3c:	4618      	mov	r0, r3
 8101a3e:	370c      	adds	r7, #12
 8101a40:	46bd      	mov	sp, r7
 8101a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a46:	4770      	bx	lr

08101a48 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101a48:	b480      	push	{r7}
 8101a4a:	b083      	sub	sp, #12
 8101a4c:	af00      	add	r7, sp, #0
 8101a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	689b      	ldr	r3, [r3, #8]
 8101a54:	f003 0308 	and.w	r3, r3, #8
 8101a58:	2b08      	cmp	r3, #8
 8101a5a:	d101      	bne.n	8101a60 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101a5c:	2301      	movs	r3, #1
 8101a5e:	e000      	b.n	8101a62 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101a60:	2300      	movs	r3, #0
}
 8101a62:	4618      	mov	r0, r3
 8101a64:	370c      	adds	r7, #12
 8101a66:	46bd      	mov	sp, r7
 8101a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a6c:	4770      	bx	lr
	...

08101a70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101a70:	b590      	push	{r4, r7, lr}
 8101a72:	b089      	sub	sp, #36	; 0x24
 8101a74:	af00      	add	r7, sp, #0
 8101a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101a78:	2300      	movs	r3, #0
 8101a7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8101a7c:	2300      	movs	r3, #0
 8101a7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	2b00      	cmp	r3, #0
 8101a84:	d101      	bne.n	8101a8a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8101a86:	2301      	movs	r3, #1
 8101a88:	e18f      	b.n	8101daa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8101a8a:	687b      	ldr	r3, [r7, #4]
 8101a8c:	68db      	ldr	r3, [r3, #12]
 8101a8e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8101a90:	687b      	ldr	r3, [r7, #4]
 8101a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101a94:	2b00      	cmp	r3, #0
 8101a96:	d109      	bne.n	8101aac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8101a98:	6878      	ldr	r0, [r7, #4]
 8101a9a:	f7ff f989 	bl	8100db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8101a9e:	687b      	ldr	r3, [r7, #4]
 8101aa0:	2200      	movs	r2, #0
 8101aa2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	681b      	ldr	r3, [r3, #0]
 8101ab0:	4618      	mov	r0, r3
 8101ab2:	f7ff ff67 	bl	8101984 <LL_ADC_IsDeepPowerDownEnabled>
 8101ab6:	4603      	mov	r3, r0
 8101ab8:	2b00      	cmp	r3, #0
 8101aba:	d004      	beq.n	8101ac6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101abc:	687b      	ldr	r3, [r7, #4]
 8101abe:	681b      	ldr	r3, [r3, #0]
 8101ac0:	4618      	mov	r0, r3
 8101ac2:	f7ff ff4d 	bl	8101960 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101ac6:	687b      	ldr	r3, [r7, #4]
 8101ac8:	681b      	ldr	r3, [r3, #0]
 8101aca:	4618      	mov	r0, r3
 8101acc:	f7ff ff82 	bl	81019d4 <LL_ADC_IsInternalRegulatorEnabled>
 8101ad0:	4603      	mov	r3, r0
 8101ad2:	2b00      	cmp	r3, #0
 8101ad4:	d114      	bne.n	8101b00 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	4618      	mov	r0, r3
 8101adc:	f7ff ff66 	bl	81019ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101ae0:	4b88      	ldr	r3, [pc, #544]	; (8101d04 <HAL_ADC_Init+0x294>)
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	099b      	lsrs	r3, r3, #6
 8101ae6:	4a88      	ldr	r2, [pc, #544]	; (8101d08 <HAL_ADC_Init+0x298>)
 8101ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8101aec:	099b      	lsrs	r3, r3, #6
 8101aee:	3301      	adds	r3, #1
 8101af0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101af2:	e002      	b.n	8101afa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101af4:	68bb      	ldr	r3, [r7, #8]
 8101af6:	3b01      	subs	r3, #1
 8101af8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101afa:	68bb      	ldr	r3, [r7, #8]
 8101afc:	2b00      	cmp	r3, #0
 8101afe:	d1f9      	bne.n	8101af4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101b00:	687b      	ldr	r3, [r7, #4]
 8101b02:	681b      	ldr	r3, [r3, #0]
 8101b04:	4618      	mov	r0, r3
 8101b06:	f7ff ff65 	bl	81019d4 <LL_ADC_IsInternalRegulatorEnabled>
 8101b0a:	4603      	mov	r3, r0
 8101b0c:	2b00      	cmp	r3, #0
 8101b0e:	d10d      	bne.n	8101b2c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101b10:	687b      	ldr	r3, [r7, #4]
 8101b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101b14:	f043 0210 	orr.w	r2, r3, #16
 8101b18:	687b      	ldr	r3, [r7, #4]
 8101b1a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101b1c:	687b      	ldr	r3, [r7, #4]
 8101b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101b20:	f043 0201 	orr.w	r2, r3, #1
 8101b24:	687b      	ldr	r3, [r7, #4]
 8101b26:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8101b28:	2301      	movs	r3, #1
 8101b2a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101b2c:	687b      	ldr	r3, [r7, #4]
 8101b2e:	681b      	ldr	r3, [r3, #0]
 8101b30:	4618      	mov	r0, r3
 8101b32:	f7ff ff76 	bl	8101a22 <LL_ADC_REG_IsConversionOngoing>
 8101b36:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101b38:	687b      	ldr	r3, [r7, #4]
 8101b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101b3c:	f003 0310 	and.w	r3, r3, #16
 8101b40:	2b00      	cmp	r3, #0
 8101b42:	f040 8129 	bne.w	8101d98 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8101b46:	697b      	ldr	r3, [r7, #20]
 8101b48:	2b00      	cmp	r3, #0
 8101b4a:	f040 8125 	bne.w	8101d98 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101b4e:	687b      	ldr	r3, [r7, #4]
 8101b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101b52:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8101b56:	f043 0202 	orr.w	r2, r3, #2
 8101b5a:	687b      	ldr	r3, [r7, #4]
 8101b5c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101b5e:	687b      	ldr	r3, [r7, #4]
 8101b60:	681b      	ldr	r3, [r3, #0]
 8101b62:	4618      	mov	r0, r3
 8101b64:	f7ff ff4a 	bl	81019fc <LL_ADC_IsEnabled>
 8101b68:	4603      	mov	r3, r0
 8101b6a:	2b00      	cmp	r3, #0
 8101b6c:	d136      	bne.n	8101bdc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101b6e:	687b      	ldr	r3, [r7, #4]
 8101b70:	681b      	ldr	r3, [r3, #0]
 8101b72:	4a66      	ldr	r2, [pc, #408]	; (8101d0c <HAL_ADC_Init+0x29c>)
 8101b74:	4293      	cmp	r3, r2
 8101b76:	d004      	beq.n	8101b82 <HAL_ADC_Init+0x112>
 8101b78:	687b      	ldr	r3, [r7, #4]
 8101b7a:	681b      	ldr	r3, [r3, #0]
 8101b7c:	4a64      	ldr	r2, [pc, #400]	; (8101d10 <HAL_ADC_Init+0x2a0>)
 8101b7e:	4293      	cmp	r3, r2
 8101b80:	d10e      	bne.n	8101ba0 <HAL_ADC_Init+0x130>
 8101b82:	4862      	ldr	r0, [pc, #392]	; (8101d0c <HAL_ADC_Init+0x29c>)
 8101b84:	f7ff ff3a 	bl	81019fc <LL_ADC_IsEnabled>
 8101b88:	4604      	mov	r4, r0
 8101b8a:	4861      	ldr	r0, [pc, #388]	; (8101d10 <HAL_ADC_Init+0x2a0>)
 8101b8c:	f7ff ff36 	bl	81019fc <LL_ADC_IsEnabled>
 8101b90:	4603      	mov	r3, r0
 8101b92:	4323      	orrs	r3, r4
 8101b94:	2b00      	cmp	r3, #0
 8101b96:	bf0c      	ite	eq
 8101b98:	2301      	moveq	r3, #1
 8101b9a:	2300      	movne	r3, #0
 8101b9c:	b2db      	uxtb	r3, r3
 8101b9e:	e008      	b.n	8101bb2 <HAL_ADC_Init+0x142>
 8101ba0:	485c      	ldr	r0, [pc, #368]	; (8101d14 <HAL_ADC_Init+0x2a4>)
 8101ba2:	f7ff ff2b 	bl	81019fc <LL_ADC_IsEnabled>
 8101ba6:	4603      	mov	r3, r0
 8101ba8:	2b00      	cmp	r3, #0
 8101baa:	bf0c      	ite	eq
 8101bac:	2301      	moveq	r3, #1
 8101bae:	2300      	movne	r3, #0
 8101bb0:	b2db      	uxtb	r3, r3
 8101bb2:	2b00      	cmp	r3, #0
 8101bb4:	d012      	beq.n	8101bdc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8101bb6:	687b      	ldr	r3, [r7, #4]
 8101bb8:	681b      	ldr	r3, [r3, #0]
 8101bba:	4a54      	ldr	r2, [pc, #336]	; (8101d0c <HAL_ADC_Init+0x29c>)
 8101bbc:	4293      	cmp	r3, r2
 8101bbe:	d004      	beq.n	8101bca <HAL_ADC_Init+0x15a>
 8101bc0:	687b      	ldr	r3, [r7, #4]
 8101bc2:	681b      	ldr	r3, [r3, #0]
 8101bc4:	4a52      	ldr	r2, [pc, #328]	; (8101d10 <HAL_ADC_Init+0x2a0>)
 8101bc6:	4293      	cmp	r3, r2
 8101bc8:	d101      	bne.n	8101bce <HAL_ADC_Init+0x15e>
 8101bca:	4a53      	ldr	r2, [pc, #332]	; (8101d18 <HAL_ADC_Init+0x2a8>)
 8101bcc:	e000      	b.n	8101bd0 <HAL_ADC_Init+0x160>
 8101bce:	4a53      	ldr	r2, [pc, #332]	; (8101d1c <HAL_ADC_Init+0x2ac>)
 8101bd0:	687b      	ldr	r3, [r7, #4]
 8101bd2:	685b      	ldr	r3, [r3, #4]
 8101bd4:	4619      	mov	r1, r3
 8101bd6:	4610      	mov	r0, r2
 8101bd8:	f7ff fdbe 	bl	8101758 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101bdc:	f7ff fd9a 	bl	8101714 <HAL_GetREVID>
 8101be0:	4603      	mov	r3, r0
 8101be2:	f241 0203 	movw	r2, #4099	; 0x1003
 8101be6:	4293      	cmp	r3, r2
 8101be8:	d914      	bls.n	8101c14 <HAL_ADC_Init+0x1a4>
 8101bea:	687b      	ldr	r3, [r7, #4]
 8101bec:	689b      	ldr	r3, [r3, #8]
 8101bee:	2b10      	cmp	r3, #16
 8101bf0:	d110      	bne.n	8101c14 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101bf2:	687b      	ldr	r3, [r7, #4]
 8101bf4:	7d5b      	ldrb	r3, [r3, #21]
 8101bf6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101bf8:	687b      	ldr	r3, [r7, #4]
 8101bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101bfc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101c02:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101c04:	687b      	ldr	r3, [r7, #4]
 8101c06:	7f1b      	ldrb	r3, [r3, #28]
 8101c08:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101c0a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101c0c:	f043 030c 	orr.w	r3, r3, #12
 8101c10:	61bb      	str	r3, [r7, #24]
 8101c12:	e00d      	b.n	8101c30 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101c14:	687b      	ldr	r3, [r7, #4]
 8101c16:	7d5b      	ldrb	r3, [r3, #21]
 8101c18:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101c1e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101c24:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101c26:	687b      	ldr	r3, [r7, #4]
 8101c28:	7f1b      	ldrb	r3, [r3, #28]
 8101c2a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101c2c:	4313      	orrs	r3, r2
 8101c2e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101c30:	687b      	ldr	r3, [r7, #4]
 8101c32:	7f1b      	ldrb	r3, [r3, #28]
 8101c34:	2b01      	cmp	r3, #1
 8101c36:	d106      	bne.n	8101c46 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	6a1b      	ldr	r3, [r3, #32]
 8101c3c:	3b01      	subs	r3, #1
 8101c3e:	045b      	lsls	r3, r3, #17
 8101c40:	69ba      	ldr	r2, [r7, #24]
 8101c42:	4313      	orrs	r3, r2
 8101c44:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101c4a:	2b00      	cmp	r3, #0
 8101c4c:	d009      	beq.n	8101c62 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101c4e:	687b      	ldr	r3, [r7, #4]
 8101c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101c52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101c5a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101c5c:	69ba      	ldr	r2, [r7, #24]
 8101c5e:	4313      	orrs	r3, r2
 8101c60:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	68da      	ldr	r2, [r3, #12]
 8101c68:	4b2d      	ldr	r3, [pc, #180]	; (8101d20 <HAL_ADC_Init+0x2b0>)
 8101c6a:	4013      	ands	r3, r2
 8101c6c:	687a      	ldr	r2, [r7, #4]
 8101c6e:	6812      	ldr	r2, [r2, #0]
 8101c70:	69b9      	ldr	r1, [r7, #24]
 8101c72:	430b      	orrs	r3, r1
 8101c74:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101c76:	687b      	ldr	r3, [r7, #4]
 8101c78:	681b      	ldr	r3, [r3, #0]
 8101c7a:	4618      	mov	r0, r3
 8101c7c:	f7ff fed1 	bl	8101a22 <LL_ADC_REG_IsConversionOngoing>
 8101c80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101c82:	687b      	ldr	r3, [r7, #4]
 8101c84:	681b      	ldr	r3, [r3, #0]
 8101c86:	4618      	mov	r0, r3
 8101c88:	f7ff fede 	bl	8101a48 <LL_ADC_INJ_IsConversionOngoing>
 8101c8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101c8e:	693b      	ldr	r3, [r7, #16]
 8101c90:	2b00      	cmp	r3, #0
 8101c92:	d15f      	bne.n	8101d54 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101c94:	68fb      	ldr	r3, [r7, #12]
 8101c96:	2b00      	cmp	r3, #0
 8101c98:	d15c      	bne.n	8101d54 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8101c9a:	687b      	ldr	r3, [r7, #4]
 8101c9c:	7d1b      	ldrb	r3, [r3, #20]
 8101c9e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8101ca0:	687b      	ldr	r3, [r7, #4]
 8101ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8101ca4:	4313      	orrs	r3, r2
 8101ca6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	681b      	ldr	r3, [r3, #0]
 8101cac:	68db      	ldr	r3, [r3, #12]
 8101cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8101cb2:	f023 0303 	bic.w	r3, r3, #3
 8101cb6:	687a      	ldr	r2, [r7, #4]
 8101cb8:	6812      	ldr	r2, [r2, #0]
 8101cba:	69b9      	ldr	r1, [r7, #24]
 8101cbc:	430b      	orrs	r3, r1
 8101cbe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101cc6:	2b01      	cmp	r3, #1
 8101cc8:	d12e      	bne.n	8101d28 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101cce:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101cd0:	687b      	ldr	r3, [r7, #4]
 8101cd2:	681b      	ldr	r3, [r3, #0]
 8101cd4:	691a      	ldr	r2, [r3, #16]
 8101cd6:	4b13      	ldr	r3, [pc, #76]	; (8101d24 <HAL_ADC_Init+0x2b4>)
 8101cd8:	4013      	ands	r3, r2
 8101cda:	687a      	ldr	r2, [r7, #4]
 8101cdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8101cde:	3a01      	subs	r2, #1
 8101ce0:	0411      	lsls	r1, r2, #16
 8101ce2:	687a      	ldr	r2, [r7, #4]
 8101ce4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8101ce6:	4311      	orrs	r1, r2
 8101ce8:	687a      	ldr	r2, [r7, #4]
 8101cea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101cec:	4311      	orrs	r1, r2
 8101cee:	687a      	ldr	r2, [r7, #4]
 8101cf0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8101cf2:	430a      	orrs	r2, r1
 8101cf4:	431a      	orrs	r2, r3
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	681b      	ldr	r3, [r3, #0]
 8101cfa:	f042 0201 	orr.w	r2, r2, #1
 8101cfe:	611a      	str	r2, [r3, #16]
 8101d00:	e01a      	b.n	8101d38 <HAL_ADC_Init+0x2c8>
 8101d02:	bf00      	nop
 8101d04:	10000000 	.word	0x10000000
 8101d08:	053e2d63 	.word	0x053e2d63
 8101d0c:	40022000 	.word	0x40022000
 8101d10:	40022100 	.word	0x40022100
 8101d14:	58026000 	.word	0x58026000
 8101d18:	40022300 	.word	0x40022300
 8101d1c:	58026300 	.word	0x58026300
 8101d20:	fff0c003 	.word	0xfff0c003
 8101d24:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	681b      	ldr	r3, [r3, #0]
 8101d2c:	691a      	ldr	r2, [r3, #16]
 8101d2e:	687b      	ldr	r3, [r7, #4]
 8101d30:	681b      	ldr	r3, [r3, #0]
 8101d32:	f022 0201 	bic.w	r2, r2, #1
 8101d36:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	681b      	ldr	r3, [r3, #0]
 8101d3c:	691b      	ldr	r3, [r3, #16]
 8101d3e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	430a      	orrs	r2, r1
 8101d4c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101d4e:	6878      	ldr	r0, [r7, #4]
 8101d50:	f000 fb80 	bl	8102454 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101d54:	687b      	ldr	r3, [r7, #4]
 8101d56:	68db      	ldr	r3, [r3, #12]
 8101d58:	2b01      	cmp	r3, #1
 8101d5a:	d10c      	bne.n	8101d76 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101d5c:	687b      	ldr	r3, [r7, #4]
 8101d5e:	681b      	ldr	r3, [r3, #0]
 8101d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101d62:	f023 010f 	bic.w	r1, r3, #15
 8101d66:	687b      	ldr	r3, [r7, #4]
 8101d68:	699b      	ldr	r3, [r3, #24]
 8101d6a:	1e5a      	subs	r2, r3, #1
 8101d6c:	687b      	ldr	r3, [r7, #4]
 8101d6e:	681b      	ldr	r3, [r3, #0]
 8101d70:	430a      	orrs	r2, r1
 8101d72:	631a      	str	r2, [r3, #48]	; 0x30
 8101d74:	e007      	b.n	8101d86 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8101d76:	687b      	ldr	r3, [r7, #4]
 8101d78:	681b      	ldr	r3, [r3, #0]
 8101d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	f022 020f 	bic.w	r2, r2, #15
 8101d84:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d8a:	f023 0303 	bic.w	r3, r3, #3
 8101d8e:	f043 0201 	orr.w	r2, r3, #1
 8101d92:	687b      	ldr	r3, [r7, #4]
 8101d94:	655a      	str	r2, [r3, #84]	; 0x54
 8101d96:	e007      	b.n	8101da8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101d98:	687b      	ldr	r3, [r7, #4]
 8101d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d9c:	f043 0210 	orr.w	r2, r3, #16
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8101da4:	2301      	movs	r3, #1
 8101da6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8101da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8101daa:	4618      	mov	r0, r3
 8101dac:	3724      	adds	r7, #36	; 0x24
 8101dae:	46bd      	mov	sp, r7
 8101db0:	bd90      	pop	{r4, r7, pc}
 8101db2:	bf00      	nop

08101db4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8101db4:	b590      	push	{r4, r7, lr}
 8101db6:	b0a1      	sub	sp, #132	; 0x84
 8101db8:	af00      	add	r7, sp, #0
 8101dba:	6078      	str	r0, [r7, #4]
 8101dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101dbe:	2300      	movs	r3, #0
 8101dc0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8101dc4:	2300      	movs	r3, #0
 8101dc6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8101dc8:	683b      	ldr	r3, [r7, #0]
 8101dca:	68db      	ldr	r3, [r3, #12]
 8101dcc:	4a9d      	ldr	r2, [pc, #628]	; (8102044 <HAL_ADC_ConfigChannel+0x290>)
 8101dce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8101dd0:	687b      	ldr	r3, [r7, #4]
 8101dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101dd6:	2b01      	cmp	r3, #1
 8101dd8:	d101      	bne.n	8101dde <HAL_ADC_ConfigChannel+0x2a>
 8101dda:	2302      	movs	r3, #2
 8101ddc:	e321      	b.n	8102422 <HAL_ADC_ConfigChannel+0x66e>
 8101dde:	687b      	ldr	r3, [r7, #4]
 8101de0:	2201      	movs	r2, #1
 8101de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101de6:	687b      	ldr	r3, [r7, #4]
 8101de8:	681b      	ldr	r3, [r3, #0]
 8101dea:	4618      	mov	r0, r3
 8101dec:	f7ff fe19 	bl	8101a22 <LL_ADC_REG_IsConversionOngoing>
 8101df0:	4603      	mov	r3, r0
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	f040 8306 	bne.w	8102404 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8101df8:	683b      	ldr	r3, [r7, #0]
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8101e00:	2b00      	cmp	r3, #0
 8101e02:	d108      	bne.n	8101e16 <HAL_ADC_ConfigChannel+0x62>
 8101e04:	683b      	ldr	r3, [r7, #0]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	0e9b      	lsrs	r3, r3, #26
 8101e0a:	f003 031f 	and.w	r3, r3, #31
 8101e0e:	2201      	movs	r2, #1
 8101e10:	fa02 f303 	lsl.w	r3, r2, r3
 8101e14:	e016      	b.n	8101e44 <HAL_ADC_ConfigChannel+0x90>
 8101e16:	683b      	ldr	r3, [r7, #0]
 8101e18:	681b      	ldr	r3, [r3, #0]
 8101e1a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101e1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101e1e:	fa93 f3a3 	rbit	r3, r3
 8101e22:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8101e24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101e26:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8101e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101e2a:	2b00      	cmp	r3, #0
 8101e2c:	d101      	bne.n	8101e32 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8101e2e:	2320      	movs	r3, #32
 8101e30:	e003      	b.n	8101e3a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8101e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101e34:	fab3 f383 	clz	r3, r3
 8101e38:	b2db      	uxtb	r3, r3
 8101e3a:	f003 031f 	and.w	r3, r3, #31
 8101e3e:	2201      	movs	r2, #1
 8101e40:	fa02 f303 	lsl.w	r3, r2, r3
 8101e44:	687a      	ldr	r2, [r7, #4]
 8101e46:	6812      	ldr	r2, [r2, #0]
 8101e48:	69d1      	ldr	r1, [r2, #28]
 8101e4a:	687a      	ldr	r2, [r7, #4]
 8101e4c:	6812      	ldr	r2, [r2, #0]
 8101e4e:	430b      	orrs	r3, r1
 8101e50:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8101e52:	687b      	ldr	r3, [r7, #4]
 8101e54:	6818      	ldr	r0, [r3, #0]
 8101e56:	683b      	ldr	r3, [r7, #0]
 8101e58:	6859      	ldr	r1, [r3, #4]
 8101e5a:	683b      	ldr	r3, [r7, #0]
 8101e5c:	681b      	ldr	r3, [r3, #0]
 8101e5e:	461a      	mov	r2, r3
 8101e60:	f7ff fd02 	bl	8101868 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101e64:	687b      	ldr	r3, [r7, #4]
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	4618      	mov	r0, r3
 8101e6a:	f7ff fdda 	bl	8101a22 <LL_ADC_REG_IsConversionOngoing>
 8101e6e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101e70:	687b      	ldr	r3, [r7, #4]
 8101e72:	681b      	ldr	r3, [r3, #0]
 8101e74:	4618      	mov	r0, r3
 8101e76:	f7ff fde7 	bl	8101a48 <LL_ADC_INJ_IsConversionOngoing>
 8101e7a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101e7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101e7e:	2b00      	cmp	r3, #0
 8101e80:	f040 80b3 	bne.w	8101fea <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101e84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101e86:	2b00      	cmp	r3, #0
 8101e88:	f040 80af 	bne.w	8101fea <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	6818      	ldr	r0, [r3, #0]
 8101e90:	683b      	ldr	r3, [r7, #0]
 8101e92:	6819      	ldr	r1, [r3, #0]
 8101e94:	683b      	ldr	r3, [r7, #0]
 8101e96:	689b      	ldr	r3, [r3, #8]
 8101e98:	461a      	mov	r2, r3
 8101e9a:	f7ff fd11 	bl	81018c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8101e9e:	4b6a      	ldr	r3, [pc, #424]	; (8102048 <HAL_ADC_ConfigChannel+0x294>)
 8101ea0:	681b      	ldr	r3, [r3, #0]
 8101ea2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8101ea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101eaa:	d10b      	bne.n	8101ec4 <HAL_ADC_ConfigChannel+0x110>
 8101eac:	683b      	ldr	r3, [r7, #0]
 8101eae:	695a      	ldr	r2, [r3, #20]
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	68db      	ldr	r3, [r3, #12]
 8101eb6:	089b      	lsrs	r3, r3, #2
 8101eb8:	f003 0307 	and.w	r3, r3, #7
 8101ebc:	005b      	lsls	r3, r3, #1
 8101ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8101ec2:	e01d      	b.n	8101f00 <HAL_ADC_ConfigChannel+0x14c>
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	68db      	ldr	r3, [r3, #12]
 8101eca:	f003 0310 	and.w	r3, r3, #16
 8101ece:	2b00      	cmp	r3, #0
 8101ed0:	d10b      	bne.n	8101eea <HAL_ADC_ConfigChannel+0x136>
 8101ed2:	683b      	ldr	r3, [r7, #0]
 8101ed4:	695a      	ldr	r2, [r3, #20]
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	681b      	ldr	r3, [r3, #0]
 8101eda:	68db      	ldr	r3, [r3, #12]
 8101edc:	089b      	lsrs	r3, r3, #2
 8101ede:	f003 0307 	and.w	r3, r3, #7
 8101ee2:	005b      	lsls	r3, r3, #1
 8101ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8101ee8:	e00a      	b.n	8101f00 <HAL_ADC_ConfigChannel+0x14c>
 8101eea:	683b      	ldr	r3, [r7, #0]
 8101eec:	695a      	ldr	r2, [r3, #20]
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	681b      	ldr	r3, [r3, #0]
 8101ef2:	68db      	ldr	r3, [r3, #12]
 8101ef4:	089b      	lsrs	r3, r3, #2
 8101ef6:	f003 0304 	and.w	r3, r3, #4
 8101efa:	005b      	lsls	r3, r3, #1
 8101efc:	fa02 f303 	lsl.w	r3, r2, r3
 8101f00:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8101f02:	683b      	ldr	r3, [r7, #0]
 8101f04:	691b      	ldr	r3, [r3, #16]
 8101f06:	2b04      	cmp	r3, #4
 8101f08:	d027      	beq.n	8101f5a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	6818      	ldr	r0, [r3, #0]
 8101f0e:	683b      	ldr	r3, [r7, #0]
 8101f10:	6919      	ldr	r1, [r3, #16]
 8101f12:	683b      	ldr	r3, [r7, #0]
 8101f14:	681a      	ldr	r2, [r3, #0]
 8101f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101f18:	f7ff fc52 	bl	81017c0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	6818      	ldr	r0, [r3, #0]
 8101f20:	683b      	ldr	r3, [r7, #0]
 8101f22:	6919      	ldr	r1, [r3, #16]
 8101f24:	683b      	ldr	r3, [r7, #0]
 8101f26:	7e5b      	ldrb	r3, [r3, #25]
 8101f28:	2b01      	cmp	r3, #1
 8101f2a:	d102      	bne.n	8101f32 <HAL_ADC_ConfigChannel+0x17e>
 8101f2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8101f30:	e000      	b.n	8101f34 <HAL_ADC_ConfigChannel+0x180>
 8101f32:	2300      	movs	r3, #0
 8101f34:	461a      	mov	r2, r3
 8101f36:	f7ff fc7c 	bl	8101832 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	6818      	ldr	r0, [r3, #0]
 8101f3e:	683b      	ldr	r3, [r7, #0]
 8101f40:	6919      	ldr	r1, [r3, #16]
 8101f42:	683b      	ldr	r3, [r7, #0]
 8101f44:	7e1b      	ldrb	r3, [r3, #24]
 8101f46:	2b01      	cmp	r3, #1
 8101f48:	d102      	bne.n	8101f50 <HAL_ADC_ConfigChannel+0x19c>
 8101f4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101f4e:	e000      	b.n	8101f52 <HAL_ADC_ConfigChannel+0x19e>
 8101f50:	2300      	movs	r3, #0
 8101f52:	461a      	mov	r2, r3
 8101f54:	f7ff fc54 	bl	8101800 <LL_ADC_SetDataRightShift>
 8101f58:	e047      	b.n	8101fea <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101f5a:	687b      	ldr	r3, [r7, #4]
 8101f5c:	681b      	ldr	r3, [r3, #0]
 8101f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101f60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101f64:	683b      	ldr	r3, [r7, #0]
 8101f66:	681b      	ldr	r3, [r3, #0]
 8101f68:	069b      	lsls	r3, r3, #26
 8101f6a:	429a      	cmp	r2, r3
 8101f6c:	d107      	bne.n	8101f7e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8101f6e:	687b      	ldr	r3, [r7, #4]
 8101f70:	681b      	ldr	r3, [r3, #0]
 8101f72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8101f74:	687b      	ldr	r3, [r7, #4]
 8101f76:	681b      	ldr	r3, [r3, #0]
 8101f78:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101f7c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101f7e:	687b      	ldr	r3, [r7, #4]
 8101f80:	681b      	ldr	r3, [r3, #0]
 8101f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101f84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101f88:	683b      	ldr	r3, [r7, #0]
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	069b      	lsls	r3, r3, #26
 8101f8e:	429a      	cmp	r2, r3
 8101f90:	d107      	bne.n	8101fa2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8101f92:	687b      	ldr	r3, [r7, #4]
 8101f94:	681b      	ldr	r3, [r3, #0]
 8101f96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	681b      	ldr	r3, [r3, #0]
 8101f9c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101fa0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	681b      	ldr	r3, [r3, #0]
 8101fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8101fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101fac:	683b      	ldr	r3, [r7, #0]
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	069b      	lsls	r3, r3, #26
 8101fb2:	429a      	cmp	r2, r3
 8101fb4:	d107      	bne.n	8101fc6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	681b      	ldr	r3, [r3, #0]
 8101fc0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101fc4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8101fc6:	687b      	ldr	r3, [r7, #4]
 8101fc8:	681b      	ldr	r3, [r3, #0]
 8101fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8101fcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8101fd0:	683b      	ldr	r3, [r7, #0]
 8101fd2:	681b      	ldr	r3, [r3, #0]
 8101fd4:	069b      	lsls	r3, r3, #26
 8101fd6:	429a      	cmp	r2, r3
 8101fd8:	d107      	bne.n	8101fea <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	681b      	ldr	r3, [r3, #0]
 8101fe4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8101fe8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	681b      	ldr	r3, [r3, #0]
 8101fee:	4618      	mov	r0, r3
 8101ff0:	f7ff fd04 	bl	81019fc <LL_ADC_IsEnabled>
 8101ff4:	4603      	mov	r3, r0
 8101ff6:	2b00      	cmp	r3, #0
 8101ff8:	f040 820d 	bne.w	8102416 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8101ffc:	687b      	ldr	r3, [r7, #4]
 8101ffe:	6818      	ldr	r0, [r3, #0]
 8102000:	683b      	ldr	r3, [r7, #0]
 8102002:	6819      	ldr	r1, [r3, #0]
 8102004:	683b      	ldr	r3, [r7, #0]
 8102006:	68db      	ldr	r3, [r3, #12]
 8102008:	461a      	mov	r2, r3
 810200a:	f7ff fc85 	bl	8101918 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810200e:	683b      	ldr	r3, [r7, #0]
 8102010:	68db      	ldr	r3, [r3, #12]
 8102012:	4a0c      	ldr	r2, [pc, #48]	; (8102044 <HAL_ADC_ConfigChannel+0x290>)
 8102014:	4293      	cmp	r3, r2
 8102016:	f040 8133 	bne.w	8102280 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810201e:	683b      	ldr	r3, [r7, #0]
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102026:	2b00      	cmp	r3, #0
 8102028:	d110      	bne.n	810204c <HAL_ADC_ConfigChannel+0x298>
 810202a:	683b      	ldr	r3, [r7, #0]
 810202c:	681b      	ldr	r3, [r3, #0]
 810202e:	0e9b      	lsrs	r3, r3, #26
 8102030:	3301      	adds	r3, #1
 8102032:	f003 031f 	and.w	r3, r3, #31
 8102036:	2b09      	cmp	r3, #9
 8102038:	bf94      	ite	ls
 810203a:	2301      	movls	r3, #1
 810203c:	2300      	movhi	r3, #0
 810203e:	b2db      	uxtb	r3, r3
 8102040:	e01e      	b.n	8102080 <HAL_ADC_ConfigChannel+0x2cc>
 8102042:	bf00      	nop
 8102044:	47ff0000 	.word	0x47ff0000
 8102048:	5c001000 	.word	0x5c001000
 810204c:	683b      	ldr	r3, [r7, #0]
 810204e:	681b      	ldr	r3, [r3, #0]
 8102050:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102054:	fa93 f3a3 	rbit	r3, r3
 8102058:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 810205a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810205c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 810205e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102060:	2b00      	cmp	r3, #0
 8102062:	d101      	bne.n	8102068 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8102064:	2320      	movs	r3, #32
 8102066:	e003      	b.n	8102070 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8102068:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810206a:	fab3 f383 	clz	r3, r3
 810206e:	b2db      	uxtb	r3, r3
 8102070:	3301      	adds	r3, #1
 8102072:	f003 031f 	and.w	r3, r3, #31
 8102076:	2b09      	cmp	r3, #9
 8102078:	bf94      	ite	ls
 810207a:	2301      	movls	r3, #1
 810207c:	2300      	movhi	r3, #0
 810207e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102080:	2b00      	cmp	r3, #0
 8102082:	d079      	beq.n	8102178 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102084:	683b      	ldr	r3, [r7, #0]
 8102086:	681b      	ldr	r3, [r3, #0]
 8102088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810208c:	2b00      	cmp	r3, #0
 810208e:	d107      	bne.n	81020a0 <HAL_ADC_ConfigChannel+0x2ec>
 8102090:	683b      	ldr	r3, [r7, #0]
 8102092:	681b      	ldr	r3, [r3, #0]
 8102094:	0e9b      	lsrs	r3, r3, #26
 8102096:	3301      	adds	r3, #1
 8102098:	069b      	lsls	r3, r3, #26
 810209a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810209e:	e015      	b.n	81020cc <HAL_ADC_ConfigChannel+0x318>
 81020a0:	683b      	ldr	r3, [r7, #0]
 81020a2:	681b      	ldr	r3, [r3, #0]
 81020a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81020a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81020a8:	fa93 f3a3 	rbit	r3, r3
 81020ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 81020ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81020b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 81020b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81020b4:	2b00      	cmp	r3, #0
 81020b6:	d101      	bne.n	81020bc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 81020b8:	2320      	movs	r3, #32
 81020ba:	e003      	b.n	81020c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 81020bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81020be:	fab3 f383 	clz	r3, r3
 81020c2:	b2db      	uxtb	r3, r3
 81020c4:	3301      	adds	r3, #1
 81020c6:	069b      	lsls	r3, r3, #26
 81020c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81020cc:	683b      	ldr	r3, [r7, #0]
 81020ce:	681b      	ldr	r3, [r3, #0]
 81020d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81020d4:	2b00      	cmp	r3, #0
 81020d6:	d109      	bne.n	81020ec <HAL_ADC_ConfigChannel+0x338>
 81020d8:	683b      	ldr	r3, [r7, #0]
 81020da:	681b      	ldr	r3, [r3, #0]
 81020dc:	0e9b      	lsrs	r3, r3, #26
 81020de:	3301      	adds	r3, #1
 81020e0:	f003 031f 	and.w	r3, r3, #31
 81020e4:	2101      	movs	r1, #1
 81020e6:	fa01 f303 	lsl.w	r3, r1, r3
 81020ea:	e017      	b.n	810211c <HAL_ADC_ConfigChannel+0x368>
 81020ec:	683b      	ldr	r3, [r7, #0]
 81020ee:	681b      	ldr	r3, [r3, #0]
 81020f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81020f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81020f4:	fa93 f3a3 	rbit	r3, r3
 81020f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 81020fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81020fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 81020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102100:	2b00      	cmp	r3, #0
 8102102:	d101      	bne.n	8102108 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102104:	2320      	movs	r3, #32
 8102106:	e003      	b.n	8102110 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810210a:	fab3 f383 	clz	r3, r3
 810210e:	b2db      	uxtb	r3, r3
 8102110:	3301      	adds	r3, #1
 8102112:	f003 031f 	and.w	r3, r3, #31
 8102116:	2101      	movs	r1, #1
 8102118:	fa01 f303 	lsl.w	r3, r1, r3
 810211c:	ea42 0103 	orr.w	r1, r2, r3
 8102120:	683b      	ldr	r3, [r7, #0]
 8102122:	681b      	ldr	r3, [r3, #0]
 8102124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102128:	2b00      	cmp	r3, #0
 810212a:	d10a      	bne.n	8102142 <HAL_ADC_ConfigChannel+0x38e>
 810212c:	683b      	ldr	r3, [r7, #0]
 810212e:	681b      	ldr	r3, [r3, #0]
 8102130:	0e9b      	lsrs	r3, r3, #26
 8102132:	3301      	adds	r3, #1
 8102134:	f003 021f 	and.w	r2, r3, #31
 8102138:	4613      	mov	r3, r2
 810213a:	005b      	lsls	r3, r3, #1
 810213c:	4413      	add	r3, r2
 810213e:	051b      	lsls	r3, r3, #20
 8102140:	e018      	b.n	8102174 <HAL_ADC_ConfigChannel+0x3c0>
 8102142:	683b      	ldr	r3, [r7, #0]
 8102144:	681b      	ldr	r3, [r3, #0]
 8102146:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810214a:	fa93 f3a3 	rbit	r3, r3
 810214e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8102150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102152:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8102154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102156:	2b00      	cmp	r3, #0
 8102158:	d101      	bne.n	810215e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 810215a:	2320      	movs	r3, #32
 810215c:	e003      	b.n	8102166 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 810215e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102160:	fab3 f383 	clz	r3, r3
 8102164:	b2db      	uxtb	r3, r3
 8102166:	3301      	adds	r3, #1
 8102168:	f003 021f 	and.w	r2, r3, #31
 810216c:	4613      	mov	r3, r2
 810216e:	005b      	lsls	r3, r3, #1
 8102170:	4413      	add	r3, r2
 8102172:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102174:	430b      	orrs	r3, r1
 8102176:	e07e      	b.n	8102276 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8102178:	683b      	ldr	r3, [r7, #0]
 810217a:	681b      	ldr	r3, [r3, #0]
 810217c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102180:	2b00      	cmp	r3, #0
 8102182:	d107      	bne.n	8102194 <HAL_ADC_ConfigChannel+0x3e0>
 8102184:	683b      	ldr	r3, [r7, #0]
 8102186:	681b      	ldr	r3, [r3, #0]
 8102188:	0e9b      	lsrs	r3, r3, #26
 810218a:	3301      	adds	r3, #1
 810218c:	069b      	lsls	r3, r3, #26
 810218e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102192:	e015      	b.n	81021c0 <HAL_ADC_ConfigChannel+0x40c>
 8102194:	683b      	ldr	r3, [r7, #0]
 8102196:	681b      	ldr	r3, [r3, #0]
 8102198:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810219c:	fa93 f3a3 	rbit	r3, r3
 81021a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 81021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 81021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81021a8:	2b00      	cmp	r3, #0
 81021aa:	d101      	bne.n	81021b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 81021ac:	2320      	movs	r3, #32
 81021ae:	e003      	b.n	81021b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 81021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81021b2:	fab3 f383 	clz	r3, r3
 81021b6:	b2db      	uxtb	r3, r3
 81021b8:	3301      	adds	r3, #1
 81021ba:	069b      	lsls	r3, r3, #26
 81021bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81021c0:	683b      	ldr	r3, [r7, #0]
 81021c2:	681b      	ldr	r3, [r3, #0]
 81021c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d109      	bne.n	81021e0 <HAL_ADC_ConfigChannel+0x42c>
 81021cc:	683b      	ldr	r3, [r7, #0]
 81021ce:	681b      	ldr	r3, [r3, #0]
 81021d0:	0e9b      	lsrs	r3, r3, #26
 81021d2:	3301      	adds	r3, #1
 81021d4:	f003 031f 	and.w	r3, r3, #31
 81021d8:	2101      	movs	r1, #1
 81021da:	fa01 f303 	lsl.w	r3, r1, r3
 81021de:	e017      	b.n	8102210 <HAL_ADC_ConfigChannel+0x45c>
 81021e0:	683b      	ldr	r3, [r7, #0]
 81021e2:	681b      	ldr	r3, [r3, #0]
 81021e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81021e6:	69fb      	ldr	r3, [r7, #28]
 81021e8:	fa93 f3a3 	rbit	r3, r3
 81021ec:	61bb      	str	r3, [r7, #24]
  return result;
 81021ee:	69bb      	ldr	r3, [r7, #24]
 81021f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 81021f2:	6a3b      	ldr	r3, [r7, #32]
 81021f4:	2b00      	cmp	r3, #0
 81021f6:	d101      	bne.n	81021fc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 81021f8:	2320      	movs	r3, #32
 81021fa:	e003      	b.n	8102204 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 81021fc:	6a3b      	ldr	r3, [r7, #32]
 81021fe:	fab3 f383 	clz	r3, r3
 8102202:	b2db      	uxtb	r3, r3
 8102204:	3301      	adds	r3, #1
 8102206:	f003 031f 	and.w	r3, r3, #31
 810220a:	2101      	movs	r1, #1
 810220c:	fa01 f303 	lsl.w	r3, r1, r3
 8102210:	ea42 0103 	orr.w	r1, r2, r3
 8102214:	683b      	ldr	r3, [r7, #0]
 8102216:	681b      	ldr	r3, [r3, #0]
 8102218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810221c:	2b00      	cmp	r3, #0
 810221e:	d10d      	bne.n	810223c <HAL_ADC_ConfigChannel+0x488>
 8102220:	683b      	ldr	r3, [r7, #0]
 8102222:	681b      	ldr	r3, [r3, #0]
 8102224:	0e9b      	lsrs	r3, r3, #26
 8102226:	3301      	adds	r3, #1
 8102228:	f003 021f 	and.w	r2, r3, #31
 810222c:	4613      	mov	r3, r2
 810222e:	005b      	lsls	r3, r3, #1
 8102230:	4413      	add	r3, r2
 8102232:	3b1e      	subs	r3, #30
 8102234:	051b      	lsls	r3, r3, #20
 8102236:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810223a:	e01b      	b.n	8102274 <HAL_ADC_ConfigChannel+0x4c0>
 810223c:	683b      	ldr	r3, [r7, #0]
 810223e:	681b      	ldr	r3, [r3, #0]
 8102240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102242:	693b      	ldr	r3, [r7, #16]
 8102244:	fa93 f3a3 	rbit	r3, r3
 8102248:	60fb      	str	r3, [r7, #12]
  return result;
 810224a:	68fb      	ldr	r3, [r7, #12]
 810224c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 810224e:	697b      	ldr	r3, [r7, #20]
 8102250:	2b00      	cmp	r3, #0
 8102252:	d101      	bne.n	8102258 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102254:	2320      	movs	r3, #32
 8102256:	e003      	b.n	8102260 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102258:	697b      	ldr	r3, [r7, #20]
 810225a:	fab3 f383 	clz	r3, r3
 810225e:	b2db      	uxtb	r3, r3
 8102260:	3301      	adds	r3, #1
 8102262:	f003 021f 	and.w	r2, r3, #31
 8102266:	4613      	mov	r3, r2
 8102268:	005b      	lsls	r3, r3, #1
 810226a:	4413      	add	r3, r2
 810226c:	3b1e      	subs	r3, #30
 810226e:	051b      	lsls	r3, r3, #20
 8102270:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102274:	430b      	orrs	r3, r1
 8102276:	683a      	ldr	r2, [r7, #0]
 8102278:	6892      	ldr	r2, [r2, #8]
 810227a:	4619      	mov	r1, r3
 810227c:	f7ff fb20 	bl	81018c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102280:	683b      	ldr	r3, [r7, #0]
 8102282:	681b      	ldr	r3, [r3, #0]
 8102284:	2b00      	cmp	r3, #0
 8102286:	f280 80c6 	bge.w	8102416 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	681b      	ldr	r3, [r3, #0]
 810228e:	4a67      	ldr	r2, [pc, #412]	; (810242c <HAL_ADC_ConfigChannel+0x678>)
 8102290:	4293      	cmp	r3, r2
 8102292:	d004      	beq.n	810229e <HAL_ADC_ConfigChannel+0x4ea>
 8102294:	687b      	ldr	r3, [r7, #4]
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	4a65      	ldr	r2, [pc, #404]	; (8102430 <HAL_ADC_ConfigChannel+0x67c>)
 810229a:	4293      	cmp	r3, r2
 810229c:	d101      	bne.n	81022a2 <HAL_ADC_ConfigChannel+0x4ee>
 810229e:	4b65      	ldr	r3, [pc, #404]	; (8102434 <HAL_ADC_ConfigChannel+0x680>)
 81022a0:	e000      	b.n	81022a4 <HAL_ADC_ConfigChannel+0x4f0>
 81022a2:	4b65      	ldr	r3, [pc, #404]	; (8102438 <HAL_ADC_ConfigChannel+0x684>)
 81022a4:	4618      	mov	r0, r3
 81022a6:	f7ff fa7d 	bl	81017a4 <LL_ADC_GetCommonPathInternalCh>
 81022aa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81022ac:	687b      	ldr	r3, [r7, #4]
 81022ae:	681b      	ldr	r3, [r3, #0]
 81022b0:	4a5e      	ldr	r2, [pc, #376]	; (810242c <HAL_ADC_ConfigChannel+0x678>)
 81022b2:	4293      	cmp	r3, r2
 81022b4:	d004      	beq.n	81022c0 <HAL_ADC_ConfigChannel+0x50c>
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	681b      	ldr	r3, [r3, #0]
 81022ba:	4a5d      	ldr	r2, [pc, #372]	; (8102430 <HAL_ADC_ConfigChannel+0x67c>)
 81022bc:	4293      	cmp	r3, r2
 81022be:	d10e      	bne.n	81022de <HAL_ADC_ConfigChannel+0x52a>
 81022c0:	485a      	ldr	r0, [pc, #360]	; (810242c <HAL_ADC_ConfigChannel+0x678>)
 81022c2:	f7ff fb9b 	bl	81019fc <LL_ADC_IsEnabled>
 81022c6:	4604      	mov	r4, r0
 81022c8:	4859      	ldr	r0, [pc, #356]	; (8102430 <HAL_ADC_ConfigChannel+0x67c>)
 81022ca:	f7ff fb97 	bl	81019fc <LL_ADC_IsEnabled>
 81022ce:	4603      	mov	r3, r0
 81022d0:	4323      	orrs	r3, r4
 81022d2:	2b00      	cmp	r3, #0
 81022d4:	bf0c      	ite	eq
 81022d6:	2301      	moveq	r3, #1
 81022d8:	2300      	movne	r3, #0
 81022da:	b2db      	uxtb	r3, r3
 81022dc:	e008      	b.n	81022f0 <HAL_ADC_ConfigChannel+0x53c>
 81022de:	4857      	ldr	r0, [pc, #348]	; (810243c <HAL_ADC_ConfigChannel+0x688>)
 81022e0:	f7ff fb8c 	bl	81019fc <LL_ADC_IsEnabled>
 81022e4:	4603      	mov	r3, r0
 81022e6:	2b00      	cmp	r3, #0
 81022e8:	bf0c      	ite	eq
 81022ea:	2301      	moveq	r3, #1
 81022ec:	2300      	movne	r3, #0
 81022ee:	b2db      	uxtb	r3, r3
 81022f0:	2b00      	cmp	r3, #0
 81022f2:	d07d      	beq.n	81023f0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 81022f4:	683b      	ldr	r3, [r7, #0]
 81022f6:	681b      	ldr	r3, [r3, #0]
 81022f8:	4a51      	ldr	r2, [pc, #324]	; (8102440 <HAL_ADC_ConfigChannel+0x68c>)
 81022fa:	4293      	cmp	r3, r2
 81022fc:	d130      	bne.n	8102360 <HAL_ADC_ConfigChannel+0x5ac>
 81022fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102300:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102304:	2b00      	cmp	r3, #0
 8102306:	d12b      	bne.n	8102360 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	681b      	ldr	r3, [r3, #0]
 810230c:	4a4b      	ldr	r2, [pc, #300]	; (810243c <HAL_ADC_ConfigChannel+0x688>)
 810230e:	4293      	cmp	r3, r2
 8102310:	f040 8081 	bne.w	8102416 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102314:	687b      	ldr	r3, [r7, #4]
 8102316:	681b      	ldr	r3, [r3, #0]
 8102318:	4a44      	ldr	r2, [pc, #272]	; (810242c <HAL_ADC_ConfigChannel+0x678>)
 810231a:	4293      	cmp	r3, r2
 810231c:	d004      	beq.n	8102328 <HAL_ADC_ConfigChannel+0x574>
 810231e:	687b      	ldr	r3, [r7, #4]
 8102320:	681b      	ldr	r3, [r3, #0]
 8102322:	4a43      	ldr	r2, [pc, #268]	; (8102430 <HAL_ADC_ConfigChannel+0x67c>)
 8102324:	4293      	cmp	r3, r2
 8102326:	d101      	bne.n	810232c <HAL_ADC_ConfigChannel+0x578>
 8102328:	4a42      	ldr	r2, [pc, #264]	; (8102434 <HAL_ADC_ConfigChannel+0x680>)
 810232a:	e000      	b.n	810232e <HAL_ADC_ConfigChannel+0x57a>
 810232c:	4a42      	ldr	r2, [pc, #264]	; (8102438 <HAL_ADC_ConfigChannel+0x684>)
 810232e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102330:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102334:	4619      	mov	r1, r3
 8102336:	4610      	mov	r0, r2
 8102338:	f7ff fa21 	bl	810177e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810233c:	4b41      	ldr	r3, [pc, #260]	; (8102444 <HAL_ADC_ConfigChannel+0x690>)
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	099b      	lsrs	r3, r3, #6
 8102342:	4a41      	ldr	r2, [pc, #260]	; (8102448 <HAL_ADC_ConfigChannel+0x694>)
 8102344:	fba2 2303 	umull	r2, r3, r2, r3
 8102348:	099b      	lsrs	r3, r3, #6
 810234a:	3301      	adds	r3, #1
 810234c:	005b      	lsls	r3, r3, #1
 810234e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102350:	e002      	b.n	8102358 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8102352:	68bb      	ldr	r3, [r7, #8]
 8102354:	3b01      	subs	r3, #1
 8102356:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102358:	68bb      	ldr	r3, [r7, #8]
 810235a:	2b00      	cmp	r3, #0
 810235c:	d1f9      	bne.n	8102352 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810235e:	e05a      	b.n	8102416 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102360:	683b      	ldr	r3, [r7, #0]
 8102362:	681b      	ldr	r3, [r3, #0]
 8102364:	4a39      	ldr	r2, [pc, #228]	; (810244c <HAL_ADC_ConfigChannel+0x698>)
 8102366:	4293      	cmp	r3, r2
 8102368:	d11e      	bne.n	81023a8 <HAL_ADC_ConfigChannel+0x5f4>
 810236a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810236c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102370:	2b00      	cmp	r3, #0
 8102372:	d119      	bne.n	81023a8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102374:	687b      	ldr	r3, [r7, #4]
 8102376:	681b      	ldr	r3, [r3, #0]
 8102378:	4a30      	ldr	r2, [pc, #192]	; (810243c <HAL_ADC_ConfigChannel+0x688>)
 810237a:	4293      	cmp	r3, r2
 810237c:	d14b      	bne.n	8102416 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	4a2a      	ldr	r2, [pc, #168]	; (810242c <HAL_ADC_ConfigChannel+0x678>)
 8102384:	4293      	cmp	r3, r2
 8102386:	d004      	beq.n	8102392 <HAL_ADC_ConfigChannel+0x5de>
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	4a28      	ldr	r2, [pc, #160]	; (8102430 <HAL_ADC_ConfigChannel+0x67c>)
 810238e:	4293      	cmp	r3, r2
 8102390:	d101      	bne.n	8102396 <HAL_ADC_ConfigChannel+0x5e2>
 8102392:	4a28      	ldr	r2, [pc, #160]	; (8102434 <HAL_ADC_ConfigChannel+0x680>)
 8102394:	e000      	b.n	8102398 <HAL_ADC_ConfigChannel+0x5e4>
 8102396:	4a28      	ldr	r2, [pc, #160]	; (8102438 <HAL_ADC_ConfigChannel+0x684>)
 8102398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810239a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810239e:	4619      	mov	r1, r3
 81023a0:	4610      	mov	r0, r2
 81023a2:	f7ff f9ec 	bl	810177e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81023a6:	e036      	b.n	8102416 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 81023a8:	683b      	ldr	r3, [r7, #0]
 81023aa:	681b      	ldr	r3, [r3, #0]
 81023ac:	4a28      	ldr	r2, [pc, #160]	; (8102450 <HAL_ADC_ConfigChannel+0x69c>)
 81023ae:	4293      	cmp	r3, r2
 81023b0:	d131      	bne.n	8102416 <HAL_ADC_ConfigChannel+0x662>
 81023b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81023b8:	2b00      	cmp	r3, #0
 81023ba:	d12c      	bne.n	8102416 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	4a1e      	ldr	r2, [pc, #120]	; (810243c <HAL_ADC_ConfigChannel+0x688>)
 81023c2:	4293      	cmp	r3, r2
 81023c4:	d127      	bne.n	8102416 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	4a18      	ldr	r2, [pc, #96]	; (810242c <HAL_ADC_ConfigChannel+0x678>)
 81023cc:	4293      	cmp	r3, r2
 81023ce:	d004      	beq.n	81023da <HAL_ADC_ConfigChannel+0x626>
 81023d0:	687b      	ldr	r3, [r7, #4]
 81023d2:	681b      	ldr	r3, [r3, #0]
 81023d4:	4a16      	ldr	r2, [pc, #88]	; (8102430 <HAL_ADC_ConfigChannel+0x67c>)
 81023d6:	4293      	cmp	r3, r2
 81023d8:	d101      	bne.n	81023de <HAL_ADC_ConfigChannel+0x62a>
 81023da:	4a16      	ldr	r2, [pc, #88]	; (8102434 <HAL_ADC_ConfigChannel+0x680>)
 81023dc:	e000      	b.n	81023e0 <HAL_ADC_ConfigChannel+0x62c>
 81023de:	4a16      	ldr	r2, [pc, #88]	; (8102438 <HAL_ADC_ConfigChannel+0x684>)
 81023e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81023e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81023e6:	4619      	mov	r1, r3
 81023e8:	4610      	mov	r0, r2
 81023ea:	f7ff f9c8 	bl	810177e <LL_ADC_SetCommonPathInternalCh>
 81023ee:	e012      	b.n	8102416 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81023f4:	f043 0220 	orr.w	r2, r3, #32
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 81023fc:	2301      	movs	r3, #1
 81023fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102402:	e008      	b.n	8102416 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102404:	687b      	ldr	r3, [r7, #4]
 8102406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102408:	f043 0220 	orr.w	r2, r3, #32
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102410:	2301      	movs	r3, #1
 8102412:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	2200      	movs	r2, #0
 810241a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810241e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8102422:	4618      	mov	r0, r3
 8102424:	3784      	adds	r7, #132	; 0x84
 8102426:	46bd      	mov	sp, r7
 8102428:	bd90      	pop	{r4, r7, pc}
 810242a:	bf00      	nop
 810242c:	40022000 	.word	0x40022000
 8102430:	40022100 	.word	0x40022100
 8102434:	40022300 	.word	0x40022300
 8102438:	58026300 	.word	0x58026300
 810243c:	58026000 	.word	0x58026000
 8102440:	cb840000 	.word	0xcb840000
 8102444:	10000000 	.word	0x10000000
 8102448:	053e2d63 	.word	0x053e2d63
 810244c:	c7520000 	.word	0xc7520000
 8102450:	cfb80000 	.word	0xcfb80000

08102454 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8102454:	b580      	push	{r7, lr}
 8102456:	b084      	sub	sp, #16
 8102458:	af00      	add	r7, sp, #0
 810245a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	4a7a      	ldr	r2, [pc, #488]	; (810264c <ADC_ConfigureBoostMode+0x1f8>)
 8102462:	4293      	cmp	r3, r2
 8102464:	d004      	beq.n	8102470 <ADC_ConfigureBoostMode+0x1c>
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	4a79      	ldr	r2, [pc, #484]	; (8102650 <ADC_ConfigureBoostMode+0x1fc>)
 810246c:	4293      	cmp	r3, r2
 810246e:	d109      	bne.n	8102484 <ADC_ConfigureBoostMode+0x30>
 8102470:	4b78      	ldr	r3, [pc, #480]	; (8102654 <ADC_ConfigureBoostMode+0x200>)
 8102472:	689b      	ldr	r3, [r3, #8]
 8102474:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102478:	2b00      	cmp	r3, #0
 810247a:	bf14      	ite	ne
 810247c:	2301      	movne	r3, #1
 810247e:	2300      	moveq	r3, #0
 8102480:	b2db      	uxtb	r3, r3
 8102482:	e008      	b.n	8102496 <ADC_ConfigureBoostMode+0x42>
 8102484:	4b74      	ldr	r3, [pc, #464]	; (8102658 <ADC_ConfigureBoostMode+0x204>)
 8102486:	689b      	ldr	r3, [r3, #8]
 8102488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810248c:	2b00      	cmp	r3, #0
 810248e:	bf14      	ite	ne
 8102490:	2301      	movne	r3, #1
 8102492:	2300      	moveq	r3, #0
 8102494:	b2db      	uxtb	r3, r3
 8102496:	2b00      	cmp	r3, #0
 8102498:	d01c      	beq.n	81024d4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 810249a:	f001 f87d 	bl	8103598 <HAL_RCC_GetHCLKFreq>
 810249e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81024a0:	687b      	ldr	r3, [r7, #4]
 81024a2:	685b      	ldr	r3, [r3, #4]
 81024a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81024a8:	d010      	beq.n	81024cc <ADC_ConfigureBoostMode+0x78>
 81024aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81024ae:	d873      	bhi.n	8102598 <ADC_ConfigureBoostMode+0x144>
 81024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81024b4:	d002      	beq.n	81024bc <ADC_ConfigureBoostMode+0x68>
 81024b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81024ba:	d16d      	bne.n	8102598 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	685b      	ldr	r3, [r3, #4]
 81024c0:	0c1b      	lsrs	r3, r3, #16
 81024c2:	68fa      	ldr	r2, [r7, #12]
 81024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 81024c8:	60fb      	str	r3, [r7, #12]
        break;
 81024ca:	e068      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 81024cc:	68fb      	ldr	r3, [r7, #12]
 81024ce:	089b      	lsrs	r3, r3, #2
 81024d0:	60fb      	str	r3, [r7, #12]
        break;
 81024d2:	e064      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 81024d4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 81024d8:	f04f 0100 	mov.w	r1, #0
 81024dc:	f002 faee 	bl	8104abc <HAL_RCCEx_GetPeriphCLKFreq>
 81024e0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	685b      	ldr	r3, [r3, #4]
 81024e6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81024ea:	d051      	beq.n	8102590 <ADC_ConfigureBoostMode+0x13c>
 81024ec:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 81024f0:	d854      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 81024f2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81024f6:	d047      	beq.n	8102588 <ADC_ConfigureBoostMode+0x134>
 81024f8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 81024fc:	d84e      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 81024fe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102502:	d03d      	beq.n	8102580 <ADC_ConfigureBoostMode+0x12c>
 8102504:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102508:	d848      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 810250a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810250e:	d033      	beq.n	8102578 <ADC_ConfigureBoostMode+0x124>
 8102510:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102514:	d842      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 8102516:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 810251a:	d029      	beq.n	8102570 <ADC_ConfigureBoostMode+0x11c>
 810251c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102520:	d83c      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 8102522:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102526:	d01a      	beq.n	810255e <ADC_ConfigureBoostMode+0x10a>
 8102528:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 810252c:	d836      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 810252e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102532:	d014      	beq.n	810255e <ADC_ConfigureBoostMode+0x10a>
 8102534:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102538:	d830      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 810253a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810253e:	d00e      	beq.n	810255e <ADC_ConfigureBoostMode+0x10a>
 8102540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102544:	d82a      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 8102546:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 810254a:	d008      	beq.n	810255e <ADC_ConfigureBoostMode+0x10a>
 810254c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102550:	d824      	bhi.n	810259c <ADC_ConfigureBoostMode+0x148>
 8102552:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102556:	d002      	beq.n	810255e <ADC_ConfigureBoostMode+0x10a>
 8102558:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 810255c:	d11e      	bne.n	810259c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 810255e:	687b      	ldr	r3, [r7, #4]
 8102560:	685b      	ldr	r3, [r3, #4]
 8102562:	0c9b      	lsrs	r3, r3, #18
 8102564:	005b      	lsls	r3, r3, #1
 8102566:	68fa      	ldr	r2, [r7, #12]
 8102568:	fbb2 f3f3 	udiv	r3, r2, r3
 810256c:	60fb      	str	r3, [r7, #12]
        break;
 810256e:	e016      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8102570:	68fb      	ldr	r3, [r7, #12]
 8102572:	091b      	lsrs	r3, r3, #4
 8102574:	60fb      	str	r3, [r7, #12]
        break;
 8102576:	e012      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8102578:	68fb      	ldr	r3, [r7, #12]
 810257a:	095b      	lsrs	r3, r3, #5
 810257c:	60fb      	str	r3, [r7, #12]
        break;
 810257e:	e00e      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8102580:	68fb      	ldr	r3, [r7, #12]
 8102582:	099b      	lsrs	r3, r3, #6
 8102584:	60fb      	str	r3, [r7, #12]
        break;
 8102586:	e00a      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	09db      	lsrs	r3, r3, #7
 810258c:	60fb      	str	r3, [r7, #12]
        break;
 810258e:	e006      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8102590:	68fb      	ldr	r3, [r7, #12]
 8102592:	0a1b      	lsrs	r3, r3, #8
 8102594:	60fb      	str	r3, [r7, #12]
        break;
 8102596:	e002      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
        break;
 8102598:	bf00      	nop
 810259a:	e000      	b.n	810259e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 810259c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 810259e:	f7ff f8b9 	bl	8101714 <HAL_GetREVID>
 81025a2:	4603      	mov	r3, r0
 81025a4:	f241 0203 	movw	r2, #4099	; 0x1003
 81025a8:	4293      	cmp	r3, r2
 81025aa:	d815      	bhi.n	81025d8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 81025ac:	68fb      	ldr	r3, [r7, #12]
 81025ae:	4a2b      	ldr	r2, [pc, #172]	; (810265c <ADC_ConfigureBoostMode+0x208>)
 81025b0:	4293      	cmp	r3, r2
 81025b2:	d908      	bls.n	81025c6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	689a      	ldr	r2, [r3, #8]
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	681b      	ldr	r3, [r3, #0]
 81025be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81025c2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 81025c4:	e03e      	b.n	8102644 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 81025c6:	687b      	ldr	r3, [r7, #4]
 81025c8:	681b      	ldr	r3, [r3, #0]
 81025ca:	689a      	ldr	r2, [r3, #8]
 81025cc:	687b      	ldr	r3, [r7, #4]
 81025ce:	681b      	ldr	r3, [r3, #0]
 81025d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81025d4:	609a      	str	r2, [r3, #8]
}
 81025d6:	e035      	b.n	8102644 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 81025d8:	68fb      	ldr	r3, [r7, #12]
 81025da:	085b      	lsrs	r3, r3, #1
 81025dc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 81025de:	68fb      	ldr	r3, [r7, #12]
 81025e0:	4a1f      	ldr	r2, [pc, #124]	; (8102660 <ADC_ConfigureBoostMode+0x20c>)
 81025e2:	4293      	cmp	r3, r2
 81025e4:	d808      	bhi.n	81025f8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	681b      	ldr	r3, [r3, #0]
 81025ea:	689a      	ldr	r2, [r3, #8]
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	681b      	ldr	r3, [r3, #0]
 81025f0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 81025f4:	609a      	str	r2, [r3, #8]
}
 81025f6:	e025      	b.n	8102644 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 81025f8:	68fb      	ldr	r3, [r7, #12]
 81025fa:	4a1a      	ldr	r2, [pc, #104]	; (8102664 <ADC_ConfigureBoostMode+0x210>)
 81025fc:	4293      	cmp	r3, r2
 81025fe:	d80a      	bhi.n	8102616 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	689b      	ldr	r3, [r3, #8]
 8102606:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	681b      	ldr	r3, [r3, #0]
 810260e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102612:	609a      	str	r2, [r3, #8]
}
 8102614:	e016      	b.n	8102644 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8102616:	68fb      	ldr	r3, [r7, #12]
 8102618:	4a13      	ldr	r2, [pc, #76]	; (8102668 <ADC_ConfigureBoostMode+0x214>)
 810261a:	4293      	cmp	r3, r2
 810261c:	d80a      	bhi.n	8102634 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 810261e:	687b      	ldr	r3, [r7, #4]
 8102620:	681b      	ldr	r3, [r3, #0]
 8102622:	689b      	ldr	r3, [r3, #8]
 8102624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102628:	687b      	ldr	r3, [r7, #4]
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102630:	609a      	str	r2, [r3, #8]
}
 8102632:	e007      	b.n	8102644 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	681b      	ldr	r3, [r3, #0]
 8102638:	689a      	ldr	r2, [r3, #8]
 810263a:	687b      	ldr	r3, [r7, #4]
 810263c:	681b      	ldr	r3, [r3, #0]
 810263e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8102642:	609a      	str	r2, [r3, #8]
}
 8102644:	bf00      	nop
 8102646:	3710      	adds	r7, #16
 8102648:	46bd      	mov	sp, r7
 810264a:	bd80      	pop	{r7, pc}
 810264c:	40022000 	.word	0x40022000
 8102650:	40022100 	.word	0x40022100
 8102654:	40022300 	.word	0x40022300
 8102658:	58026300 	.word	0x58026300
 810265c:	01312d00 	.word	0x01312d00
 8102660:	005f5e10 	.word	0x005f5e10
 8102664:	00bebc20 	.word	0x00bebc20
 8102668:	017d7840 	.word	0x017d7840

0810266c <LL_ADC_IsEnabled>:
{
 810266c:	b480      	push	{r7}
 810266e:	b083      	sub	sp, #12
 8102670:	af00      	add	r7, sp, #0
 8102672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102674:	687b      	ldr	r3, [r7, #4]
 8102676:	689b      	ldr	r3, [r3, #8]
 8102678:	f003 0301 	and.w	r3, r3, #1
 810267c:	2b01      	cmp	r3, #1
 810267e:	d101      	bne.n	8102684 <LL_ADC_IsEnabled+0x18>
 8102680:	2301      	movs	r3, #1
 8102682:	e000      	b.n	8102686 <LL_ADC_IsEnabled+0x1a>
 8102684:	2300      	movs	r3, #0
}
 8102686:	4618      	mov	r0, r3
 8102688:	370c      	adds	r7, #12
 810268a:	46bd      	mov	sp, r7
 810268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102690:	4770      	bx	lr

08102692 <LL_ADC_REG_IsConversionOngoing>:
{
 8102692:	b480      	push	{r7}
 8102694:	b083      	sub	sp, #12
 8102696:	af00      	add	r7, sp, #0
 8102698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	689b      	ldr	r3, [r3, #8]
 810269e:	f003 0304 	and.w	r3, r3, #4
 81026a2:	2b04      	cmp	r3, #4
 81026a4:	d101      	bne.n	81026aa <LL_ADC_REG_IsConversionOngoing+0x18>
 81026a6:	2301      	movs	r3, #1
 81026a8:	e000      	b.n	81026ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 81026aa:	2300      	movs	r3, #0
}
 81026ac:	4618      	mov	r0, r3
 81026ae:	370c      	adds	r7, #12
 81026b0:	46bd      	mov	sp, r7
 81026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026b6:	4770      	bx	lr

081026b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 81026b8:	b590      	push	{r4, r7, lr}
 81026ba:	b09f      	sub	sp, #124	; 0x7c
 81026bc:	af00      	add	r7, sp, #0
 81026be:	6078      	str	r0, [r7, #4]
 81026c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81026c2:	2300      	movs	r3, #0
 81026c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81026c8:	687b      	ldr	r3, [r7, #4]
 81026ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81026ce:	2b01      	cmp	r3, #1
 81026d0:	d101      	bne.n	81026d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81026d2:	2302      	movs	r3, #2
 81026d4:	e0c4      	b.n	8102860 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	2201      	movs	r2, #1
 81026da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81026de:	2300      	movs	r3, #0
 81026e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81026e2:	2300      	movs	r3, #0
 81026e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81026e6:	687b      	ldr	r3, [r7, #4]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	4a5f      	ldr	r2, [pc, #380]	; (8102868 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81026ec:	4293      	cmp	r3, r2
 81026ee:	d102      	bne.n	81026f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81026f0:	4b5e      	ldr	r3, [pc, #376]	; (810286c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81026f2:	60bb      	str	r3, [r7, #8]
 81026f4:	e001      	b.n	81026fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81026f6:	2300      	movs	r3, #0
 81026f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81026fa:	68bb      	ldr	r3, [r7, #8]
 81026fc:	2b00      	cmp	r3, #0
 81026fe:	d10b      	bne.n	8102718 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102704:	f043 0220 	orr.w	r2, r3, #32
 8102708:	687b      	ldr	r3, [r7, #4]
 810270a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 810270c:	687b      	ldr	r3, [r7, #4]
 810270e:	2200      	movs	r2, #0
 8102710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8102714:	2301      	movs	r3, #1
 8102716:	e0a3      	b.n	8102860 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8102718:	68bb      	ldr	r3, [r7, #8]
 810271a:	4618      	mov	r0, r3
 810271c:	f7ff ffb9 	bl	8102692 <LL_ADC_REG_IsConversionOngoing>
 8102720:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	681b      	ldr	r3, [r3, #0]
 8102726:	4618      	mov	r0, r3
 8102728:	f7ff ffb3 	bl	8102692 <LL_ADC_REG_IsConversionOngoing>
 810272c:	4603      	mov	r3, r0
 810272e:	2b00      	cmp	r3, #0
 8102730:	f040 8085 	bne.w	810283e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8102734:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102736:	2b00      	cmp	r3, #0
 8102738:	f040 8081 	bne.w	810283e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	681b      	ldr	r3, [r3, #0]
 8102740:	4a49      	ldr	r2, [pc, #292]	; (8102868 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102742:	4293      	cmp	r3, r2
 8102744:	d004      	beq.n	8102750 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8102746:	687b      	ldr	r3, [r7, #4]
 8102748:	681b      	ldr	r3, [r3, #0]
 810274a:	4a48      	ldr	r2, [pc, #288]	; (810286c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810274c:	4293      	cmp	r3, r2
 810274e:	d101      	bne.n	8102754 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8102750:	4b47      	ldr	r3, [pc, #284]	; (8102870 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8102752:	e000      	b.n	8102756 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8102754:	4b47      	ldr	r3, [pc, #284]	; (8102874 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8102756:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102758:	683b      	ldr	r3, [r7, #0]
 810275a:	681b      	ldr	r3, [r3, #0]
 810275c:	2b00      	cmp	r3, #0
 810275e:	d03b      	beq.n	81027d8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8102760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102762:	689b      	ldr	r3, [r3, #8]
 8102764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8102768:	683b      	ldr	r3, [r7, #0]
 810276a:	685b      	ldr	r3, [r3, #4]
 810276c:	431a      	orrs	r2, r3
 810276e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102770:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	681b      	ldr	r3, [r3, #0]
 8102776:	4a3c      	ldr	r2, [pc, #240]	; (8102868 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102778:	4293      	cmp	r3, r2
 810277a:	d004      	beq.n	8102786 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	4a3a      	ldr	r2, [pc, #232]	; (810286c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102782:	4293      	cmp	r3, r2
 8102784:	d10e      	bne.n	81027a4 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8102786:	4838      	ldr	r0, [pc, #224]	; (8102868 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8102788:	f7ff ff70 	bl	810266c <LL_ADC_IsEnabled>
 810278c:	4604      	mov	r4, r0
 810278e:	4837      	ldr	r0, [pc, #220]	; (810286c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102790:	f7ff ff6c 	bl	810266c <LL_ADC_IsEnabled>
 8102794:	4603      	mov	r3, r0
 8102796:	4323      	orrs	r3, r4
 8102798:	2b00      	cmp	r3, #0
 810279a:	bf0c      	ite	eq
 810279c:	2301      	moveq	r3, #1
 810279e:	2300      	movne	r3, #0
 81027a0:	b2db      	uxtb	r3, r3
 81027a2:	e008      	b.n	81027b6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 81027a4:	4834      	ldr	r0, [pc, #208]	; (8102878 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81027a6:	f7ff ff61 	bl	810266c <LL_ADC_IsEnabled>
 81027aa:	4603      	mov	r3, r0
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	bf0c      	ite	eq
 81027b0:	2301      	moveq	r3, #1
 81027b2:	2300      	movne	r3, #0
 81027b4:	b2db      	uxtb	r3, r3
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	d04b      	beq.n	8102852 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 81027ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81027bc:	689b      	ldr	r3, [r3, #8]
 81027be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81027c2:	f023 030f 	bic.w	r3, r3, #15
 81027c6:	683a      	ldr	r2, [r7, #0]
 81027c8:	6811      	ldr	r1, [r2, #0]
 81027ca:	683a      	ldr	r2, [r7, #0]
 81027cc:	6892      	ldr	r2, [r2, #8]
 81027ce:	430a      	orrs	r2, r1
 81027d0:	431a      	orrs	r2, r3
 81027d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81027d4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81027d6:	e03c      	b.n	8102852 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81027da:	689b      	ldr	r3, [r3, #8]
 81027dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81027e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	4a1f      	ldr	r2, [pc, #124]	; (8102868 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81027ea:	4293      	cmp	r3, r2
 81027ec:	d004      	beq.n	81027f8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	681b      	ldr	r3, [r3, #0]
 81027f2:	4a1e      	ldr	r2, [pc, #120]	; (810286c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81027f4:	4293      	cmp	r3, r2
 81027f6:	d10e      	bne.n	8102816 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81027f8:	481b      	ldr	r0, [pc, #108]	; (8102868 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81027fa:	f7ff ff37 	bl	810266c <LL_ADC_IsEnabled>
 81027fe:	4604      	mov	r4, r0
 8102800:	481a      	ldr	r0, [pc, #104]	; (810286c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8102802:	f7ff ff33 	bl	810266c <LL_ADC_IsEnabled>
 8102806:	4603      	mov	r3, r0
 8102808:	4323      	orrs	r3, r4
 810280a:	2b00      	cmp	r3, #0
 810280c:	bf0c      	ite	eq
 810280e:	2301      	moveq	r3, #1
 8102810:	2300      	movne	r3, #0
 8102812:	b2db      	uxtb	r3, r3
 8102814:	e008      	b.n	8102828 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8102816:	4818      	ldr	r0, [pc, #96]	; (8102878 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8102818:	f7ff ff28 	bl	810266c <LL_ADC_IsEnabled>
 810281c:	4603      	mov	r3, r0
 810281e:	2b00      	cmp	r3, #0
 8102820:	bf0c      	ite	eq
 8102822:	2301      	moveq	r3, #1
 8102824:	2300      	movne	r3, #0
 8102826:	b2db      	uxtb	r3, r3
 8102828:	2b00      	cmp	r3, #0
 810282a:	d012      	beq.n	8102852 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 810282c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810282e:	689b      	ldr	r3, [r3, #8]
 8102830:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8102834:	f023 030f 	bic.w	r3, r3, #15
 8102838:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810283a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810283c:	e009      	b.n	8102852 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810283e:	687b      	ldr	r3, [r7, #4]
 8102840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102842:	f043 0220 	orr.w	r2, r3, #32
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810284a:	2301      	movs	r3, #1
 810284c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8102850:	e000      	b.n	8102854 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8102852:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	2200      	movs	r2, #0
 8102858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810285c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8102860:	4618      	mov	r0, r3
 8102862:	377c      	adds	r7, #124	; 0x7c
 8102864:	46bd      	mov	sp, r7
 8102866:	bd90      	pop	{r4, r7, pc}
 8102868:	40022000 	.word	0x40022000
 810286c:	40022100 	.word	0x40022100
 8102870:	40022300 	.word	0x40022300
 8102874:	58026300 	.word	0x58026300
 8102878:	58026000 	.word	0x58026000

0810287c <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 810287c:	b580      	push	{r7, lr}
 810287e:	b082      	sub	sp, #8
 8102880:	af00      	add	r7, sp, #0
 8102882:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8102884:	687b      	ldr	r3, [r7, #4]
 8102886:	2b00      	cmp	r3, #0
 8102888:	d003      	beq.n	8102892 <HAL_CEC_Init+0x16>
 810288a:	687b      	ldr	r3, [r7, #4]
 810288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810288e:	2b00      	cmp	r3, #0
 8102890:	d101      	bne.n	8102896 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8102892:	2301      	movs	r3, #1
 8102894:	e050      	b.n	8102938 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810289a:	2b00      	cmp	r3, #0
 810289c:	d106      	bne.n	81028ac <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 810289e:	687b      	ldr	r3, [r7, #4]
 81028a0:	2200      	movs	r2, #0
 81028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 81028a6:	6878      	ldr	r0, [r7, #4]
 81028a8:	f7fe fb16 	bl	8100ed8 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	2224      	movs	r2, #36	; 0x24
 81028b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 81028b2:	687b      	ldr	r3, [r7, #4]
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	681a      	ldr	r2, [r3, #0]
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	f022 0201 	bic.w	r2, r2, #1
 81028c0:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	685a      	ldr	r2, [r3, #4]
 81028c6:	687b      	ldr	r3, [r7, #4]
 81028c8:	689b      	ldr	r3, [r3, #8]
 81028ca:	431a      	orrs	r2, r3
 81028cc:	687b      	ldr	r3, [r7, #4]
 81028ce:	68db      	ldr	r3, [r3, #12]
 81028d0:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81028d6:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	695b      	ldr	r3, [r3, #20]
 81028dc:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 81028e2:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81028e4:	687b      	ldr	r3, [r7, #4]
 81028e6:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 81028e8:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81028ea:	687b      	ldr	r3, [r7, #4]
 81028ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 81028ee:	041b      	lsls	r3, r3, #16
 81028f0:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 81028f4:	687b      	ldr	r3, [r7, #4]
 81028f6:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 81028fc:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 81028fe:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8102900:	687b      	ldr	r3, [r7, #4]
 8102902:	681b      	ldr	r3, [r3, #0]
 8102904:	695b      	ldr	r3, [r3, #20]
 8102906:	687a      	ldr	r2, [r7, #4]
 8102908:	6812      	ldr	r2, [r2, #0]
 810290a:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 810290e:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8102912:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	681a      	ldr	r2, [r3, #0]
 810291a:	687b      	ldr	r3, [r7, #4]
 810291c:	681b      	ldr	r3, [r3, #0]
 810291e:	f042 0201 	orr.w	r2, r2, #1
 8102922:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102924:	687b      	ldr	r3, [r7, #4]
 8102926:	2200      	movs	r2, #0
 8102928:	641a      	str	r2, [r3, #64]	; 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 810292a:	687b      	ldr	r3, [r7, #4]
 810292c:	2220      	movs	r2, #32
 810292e:	639a      	str	r2, [r3, #56]	; 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8102930:	687b      	ldr	r3, [r7, #4]
 8102932:	2220      	movs	r2, #32
 8102934:	63da      	str	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8102936:	2300      	movs	r3, #0
}
 8102938:	4618      	mov	r0, r3
 810293a:	3708      	adds	r7, #8
 810293c:	46bd      	mov	sp, r7
 810293e:	bd80      	pop	{r7, pc}

08102940 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8102940:	b580      	push	{r7, lr}
 8102942:	b084      	sub	sp, #16
 8102944:	af00      	add	r7, sp, #0
 8102946:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8102948:	687b      	ldr	r3, [r7, #4]
 810294a:	681b      	ldr	r3, [r3, #0]
 810294c:	691b      	ldr	r3, [r3, #16]
 810294e:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8102950:	68fb      	ldr	r3, [r7, #12]
 8102952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102956:	2b00      	cmp	r3, #0
 8102958:	d00a      	beq.n	8102970 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 810295a:	687b      	ldr	r3, [r7, #4]
 810295c:	2280      	movs	r2, #128	; 0x80
 810295e:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8102960:	687b      	ldr	r3, [r7, #4]
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	691a      	ldr	r2, [r3, #16]
 8102966:	687b      	ldr	r3, [r7, #4]
 8102968:	681b      	ldr	r3, [r3, #0]
 810296a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810296e:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8102970:	68fb      	ldr	r3, [r7, #12]
 8102972:	f003 0301 	and.w	r3, r3, #1
 8102976:	2b00      	cmp	r3, #0
 8102978:	d01c      	beq.n	81029b4 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 810297a:	687b      	ldr	r3, [r7, #4]
 810297c:	2222      	movs	r2, #34	; 0x22
 810297e:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8102980:	687b      	ldr	r3, [r7, #4]
 8102982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102984:	3301      	adds	r3, #1
 8102986:	b29a      	uxth	r2, r3
 8102988:	687b      	ldr	r3, [r7, #4]
 810298a:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	68da      	ldr	r2, [r3, #12]
 8102992:	687b      	ldr	r3, [r7, #4]
 8102994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102996:	b2d2      	uxtb	r2, r2
 8102998:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 810299a:	687b      	ldr	r3, [r7, #4]
 810299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810299e:	1c5a      	adds	r2, r3, #1
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 81029a4:	687b      	ldr	r3, [r7, #4]
 81029a6:	681b      	ldr	r3, [r3, #0]
 81029a8:	691a      	ldr	r2, [r3, #16]
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	f042 0201 	orr.w	r2, r2, #1
 81029b2:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 81029b4:	68fb      	ldr	r3, [r7, #12]
 81029b6:	f003 0302 	and.w	r3, r3, #2
 81029ba:	2b00      	cmp	r3, #0
 81029bc:	d01e      	beq.n	81029fc <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	691a      	ldr	r2, [r3, #16]
 81029c4:	687b      	ldr	r3, [r7, #4]
 81029c6:	681b      	ldr	r3, [r3, #0]
 81029c8:	f042 0202 	orr.w	r2, r2, #2
 81029cc:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 81029ce:	687b      	ldr	r3, [r7, #4]
 81029d0:	2220      	movs	r2, #32
 81029d2:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	2200      	movs	r2, #0
 81029d8:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81029de:	687b      	ldr	r3, [r7, #4]
 81029e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 81029e2:	425b      	negs	r3, r3
 81029e4:	441a      	add	r2, r3
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 81029ee:	4619      	mov	r1, r3
 81029f0:	6878      	ldr	r0, [r7, #4]
 81029f2:	f000 f88c 	bl	8102b0e <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 81029f6:	687b      	ldr	r3, [r7, #4]
 81029f8:	2200      	movs	r2, #0
 81029fa:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 81029fc:	68fb      	ldr	r3, [r7, #12]
 81029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102a02:	2b00      	cmp	r3, #0
 8102a04:	d024      	beq.n	8102a50 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8102a0a:	3b01      	subs	r3, #1
 8102a0c:	b29a      	uxth	r2, r3
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8102a12:	687b      	ldr	r3, [r7, #4]
 8102a14:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8102a16:	2b00      	cmp	r3, #0
 8102a18:	d107      	bne.n	8102a2a <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8102a1a:	687b      	ldr	r3, [r7, #4]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	681a      	ldr	r2, [r3, #0]
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	f042 0204 	orr.w	r2, r2, #4
 8102a28:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a2e:	781a      	ldrb	r2, [r3, #0]
 8102a30:	687b      	ldr	r3, [r7, #4]
 8102a32:	681b      	ldr	r3, [r3, #0]
 8102a34:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a3a:	1c5a      	adds	r2, r3, #1
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8102a40:	687b      	ldr	r3, [r7, #4]
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	691a      	ldr	r2, [r3, #16]
 8102a46:	687b      	ldr	r3, [r7, #4]
 8102a48:	681b      	ldr	r3, [r3, #0]
 8102a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102a4e:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8102a50:	68fb      	ldr	r3, [r7, #12]
 8102a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102a56:	2b00      	cmp	r3, #0
 8102a58:	d014      	beq.n	8102a84 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8102a5a:	687b      	ldr	r3, [r7, #4]
 8102a5c:	681b      	ldr	r3, [r3, #0]
 8102a5e:	691a      	ldr	r2, [r3, #16]
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	681b      	ldr	r3, [r3, #0]
 8102a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102a68:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8102a6a:	687b      	ldr	r3, [r7, #4]
 8102a6c:	2220      	movs	r2, #32
 8102a6e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	2200      	movs	r2, #0
 8102a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	2200      	movs	r2, #0
 8102a7c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8102a7e:	6878      	ldr	r0, [r7, #4]
 8102a80:	f000 f83b 	bl	8102afa <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8102a84:	68fa      	ldr	r2, [r7, #12]
 8102a86:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8102a8a:	4013      	ands	r3, r2
 8102a8c:	2b00      	cmp	r3, #0
 8102a8e:	d030      	beq.n	8102af2 <HAL_CEC_IRQHandler+0x1b2>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8102a90:	687b      	ldr	r3, [r7, #4]
 8102a92:	68fa      	ldr	r2, [r7, #12]
 8102a94:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8102a96:	687b      	ldr	r3, [r7, #4]
 8102a98:	681b      	ldr	r3, [r3, #0]
 8102a9a:	691b      	ldr	r3, [r3, #16]
 8102a9c:	687a      	ldr	r2, [r7, #4]
 8102a9e:	6812      	ldr	r2, [r2, #0]
 8102aa0:	f443 53e3 	orr.w	r3, r3, #7264	; 0x1c60
 8102aa4:	f043 031c 	orr.w	r3, r3, #28
 8102aa8:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8102aaa:	68fb      	ldr	r3, [r7, #12]
 8102aac:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8102ab0:	2b00      	cmp	r3, #0
 8102ab2:	d00e      	beq.n	8102ad2 <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8102ab4:	687b      	ldr	r3, [r7, #4]
 8102ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8102ab8:	687b      	ldr	r3, [r7, #4]
 8102aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8102abc:	425b      	negs	r3, r3
 8102abe:	441a      	add	r2, r3
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8102ac4:	687b      	ldr	r3, [r7, #4]
 8102ac6:	2200      	movs	r2, #0
 8102ac8:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	2220      	movs	r2, #32
 8102ace:	63da      	str	r2, [r3, #60]	; 0x3c
 8102ad0:	e00c      	b.n	8102aec <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8102ad2:	68fb      	ldr	r3, [r7, #12]
 8102ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102ad8:	2b00      	cmp	r3, #0
 8102ada:	d107      	bne.n	8102aec <HAL_CEC_IRQHandler+0x1ac>
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8102ae2:	2b00      	cmp	r3, #0
 8102ae4:	d002      	beq.n	8102aec <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8102ae6:	687b      	ldr	r3, [r7, #4]
 8102ae8:	2220      	movs	r2, #32
 8102aea:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8102aec:	6878      	ldr	r0, [r7, #4]
 8102aee:	f000 f819 	bl	8102b24 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8102af2:	bf00      	nop
 8102af4:	3710      	adds	r7, #16
 8102af6:	46bd      	mov	sp, r7
 8102af8:	bd80      	pop	{r7, pc}

08102afa <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8102afa:	b480      	push	{r7}
 8102afc:	b083      	sub	sp, #12
 8102afe:	af00      	add	r7, sp, #0
 8102b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8102b02:	bf00      	nop
 8102b04:	370c      	adds	r7, #12
 8102b06:	46bd      	mov	sp, r7
 8102b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b0c:	4770      	bx	lr

08102b0e <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8102b0e:	b480      	push	{r7}
 8102b10:	b083      	sub	sp, #12
 8102b12:	af00      	add	r7, sp, #0
 8102b14:	6078      	str	r0, [r7, #4]
 8102b16:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8102b18:	bf00      	nop
 8102b1a:	370c      	adds	r7, #12
 8102b1c:	46bd      	mov	sp, r7
 8102b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b22:	4770      	bx	lr

08102b24 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8102b24:	b480      	push	{r7}
 8102b26:	b083      	sub	sp, #12
 8102b28:	af00      	add	r7, sp, #0
 8102b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8102b2c:	bf00      	nop
 8102b2e:	370c      	adds	r7, #12
 8102b30:	46bd      	mov	sp, r7
 8102b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b36:	4770      	bx	lr

08102b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102b38:	b480      	push	{r7}
 8102b3a:	b085      	sub	sp, #20
 8102b3c:	af00      	add	r7, sp, #0
 8102b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	f003 0307 	and.w	r3, r3, #7
 8102b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102b48:	4b0c      	ldr	r3, [pc, #48]	; (8102b7c <__NVIC_SetPriorityGrouping+0x44>)
 8102b4a:	68db      	ldr	r3, [r3, #12]
 8102b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102b4e:	68ba      	ldr	r2, [r7, #8]
 8102b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102b54:	4013      	ands	r3, r2
 8102b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102b58:	68fb      	ldr	r3, [r7, #12]
 8102b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102b5c:	68bb      	ldr	r3, [r7, #8]
 8102b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102b6a:	4a04      	ldr	r2, [pc, #16]	; (8102b7c <__NVIC_SetPriorityGrouping+0x44>)
 8102b6c:	68bb      	ldr	r3, [r7, #8]
 8102b6e:	60d3      	str	r3, [r2, #12]
}
 8102b70:	bf00      	nop
 8102b72:	3714      	adds	r7, #20
 8102b74:	46bd      	mov	sp, r7
 8102b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b7a:	4770      	bx	lr
 8102b7c:	e000ed00 	.word	0xe000ed00

08102b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102b80:	b480      	push	{r7}
 8102b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102b84:	4b04      	ldr	r3, [pc, #16]	; (8102b98 <__NVIC_GetPriorityGrouping+0x18>)
 8102b86:	68db      	ldr	r3, [r3, #12]
 8102b88:	0a1b      	lsrs	r3, r3, #8
 8102b8a:	f003 0307 	and.w	r3, r3, #7
}
 8102b8e:	4618      	mov	r0, r3
 8102b90:	46bd      	mov	sp, r7
 8102b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b96:	4770      	bx	lr
 8102b98:	e000ed00 	.word	0xe000ed00

08102b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102b9c:	b480      	push	{r7}
 8102b9e:	b083      	sub	sp, #12
 8102ba0:	af00      	add	r7, sp, #0
 8102ba2:	4603      	mov	r3, r0
 8102ba4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102baa:	2b00      	cmp	r3, #0
 8102bac:	db0b      	blt.n	8102bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102bae:	88fb      	ldrh	r3, [r7, #6]
 8102bb0:	f003 021f 	and.w	r2, r3, #31
 8102bb4:	4907      	ldr	r1, [pc, #28]	; (8102bd4 <__NVIC_EnableIRQ+0x38>)
 8102bb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bba:	095b      	lsrs	r3, r3, #5
 8102bbc:	2001      	movs	r0, #1
 8102bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8102bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102bc6:	bf00      	nop
 8102bc8:	370c      	adds	r7, #12
 8102bca:	46bd      	mov	sp, r7
 8102bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bd0:	4770      	bx	lr
 8102bd2:	bf00      	nop
 8102bd4:	e000e100 	.word	0xe000e100

08102bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102bd8:	b480      	push	{r7}
 8102bda:	b083      	sub	sp, #12
 8102bdc:	af00      	add	r7, sp, #0
 8102bde:	4603      	mov	r3, r0
 8102be0:	6039      	str	r1, [r7, #0]
 8102be2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102be8:	2b00      	cmp	r3, #0
 8102bea:	db0a      	blt.n	8102c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102bec:	683b      	ldr	r3, [r7, #0]
 8102bee:	b2da      	uxtb	r2, r3
 8102bf0:	490c      	ldr	r1, [pc, #48]	; (8102c24 <__NVIC_SetPriority+0x4c>)
 8102bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bf6:	0112      	lsls	r2, r2, #4
 8102bf8:	b2d2      	uxtb	r2, r2
 8102bfa:	440b      	add	r3, r1
 8102bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102c00:	e00a      	b.n	8102c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102c02:	683b      	ldr	r3, [r7, #0]
 8102c04:	b2da      	uxtb	r2, r3
 8102c06:	4908      	ldr	r1, [pc, #32]	; (8102c28 <__NVIC_SetPriority+0x50>)
 8102c08:	88fb      	ldrh	r3, [r7, #6]
 8102c0a:	f003 030f 	and.w	r3, r3, #15
 8102c0e:	3b04      	subs	r3, #4
 8102c10:	0112      	lsls	r2, r2, #4
 8102c12:	b2d2      	uxtb	r2, r2
 8102c14:	440b      	add	r3, r1
 8102c16:	761a      	strb	r2, [r3, #24]
}
 8102c18:	bf00      	nop
 8102c1a:	370c      	adds	r7, #12
 8102c1c:	46bd      	mov	sp, r7
 8102c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c22:	4770      	bx	lr
 8102c24:	e000e100 	.word	0xe000e100
 8102c28:	e000ed00 	.word	0xe000ed00

08102c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102c2c:	b480      	push	{r7}
 8102c2e:	b089      	sub	sp, #36	; 0x24
 8102c30:	af00      	add	r7, sp, #0
 8102c32:	60f8      	str	r0, [r7, #12]
 8102c34:	60b9      	str	r1, [r7, #8]
 8102c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102c38:	68fb      	ldr	r3, [r7, #12]
 8102c3a:	f003 0307 	and.w	r3, r3, #7
 8102c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102c40:	69fb      	ldr	r3, [r7, #28]
 8102c42:	f1c3 0307 	rsb	r3, r3, #7
 8102c46:	2b04      	cmp	r3, #4
 8102c48:	bf28      	it	cs
 8102c4a:	2304      	movcs	r3, #4
 8102c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102c4e:	69fb      	ldr	r3, [r7, #28]
 8102c50:	3304      	adds	r3, #4
 8102c52:	2b06      	cmp	r3, #6
 8102c54:	d902      	bls.n	8102c5c <NVIC_EncodePriority+0x30>
 8102c56:	69fb      	ldr	r3, [r7, #28]
 8102c58:	3b03      	subs	r3, #3
 8102c5a:	e000      	b.n	8102c5e <NVIC_EncodePriority+0x32>
 8102c5c:	2300      	movs	r3, #0
 8102c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102c64:	69bb      	ldr	r3, [r7, #24]
 8102c66:	fa02 f303 	lsl.w	r3, r2, r3
 8102c6a:	43da      	mvns	r2, r3
 8102c6c:	68bb      	ldr	r3, [r7, #8]
 8102c6e:	401a      	ands	r2, r3
 8102c70:	697b      	ldr	r3, [r7, #20]
 8102c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102c74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8102c78:	697b      	ldr	r3, [r7, #20]
 8102c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8102c7e:	43d9      	mvns	r1, r3
 8102c80:	687b      	ldr	r3, [r7, #4]
 8102c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102c84:	4313      	orrs	r3, r2
         );
}
 8102c86:	4618      	mov	r0, r3
 8102c88:	3724      	adds	r7, #36	; 0x24
 8102c8a:	46bd      	mov	sp, r7
 8102c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c90:	4770      	bx	lr
	...

08102c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102c94:	b580      	push	{r7, lr}
 8102c96:	b082      	sub	sp, #8
 8102c98:	af00      	add	r7, sp, #0
 8102c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102c9c:	687b      	ldr	r3, [r7, #4]
 8102c9e:	3b01      	subs	r3, #1
 8102ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102ca4:	d301      	bcc.n	8102caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102ca6:	2301      	movs	r3, #1
 8102ca8:	e00f      	b.n	8102cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102caa:	4a0a      	ldr	r2, [pc, #40]	; (8102cd4 <SysTick_Config+0x40>)
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	3b01      	subs	r3, #1
 8102cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102cb2:	210f      	movs	r1, #15
 8102cb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8102cb8:	f7ff ff8e 	bl	8102bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102cbc:	4b05      	ldr	r3, [pc, #20]	; (8102cd4 <SysTick_Config+0x40>)
 8102cbe:	2200      	movs	r2, #0
 8102cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102cc2:	4b04      	ldr	r3, [pc, #16]	; (8102cd4 <SysTick_Config+0x40>)
 8102cc4:	2207      	movs	r2, #7
 8102cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102cc8:	2300      	movs	r3, #0
}
 8102cca:	4618      	mov	r0, r3
 8102ccc:	3708      	adds	r7, #8
 8102cce:	46bd      	mov	sp, r7
 8102cd0:	bd80      	pop	{r7, pc}
 8102cd2:	bf00      	nop
 8102cd4:	e000e010 	.word	0xe000e010

08102cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102cd8:	b580      	push	{r7, lr}
 8102cda:	b082      	sub	sp, #8
 8102cdc:	af00      	add	r7, sp, #0
 8102cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102ce0:	6878      	ldr	r0, [r7, #4]
 8102ce2:	f7ff ff29 	bl	8102b38 <__NVIC_SetPriorityGrouping>
}
 8102ce6:	bf00      	nop
 8102ce8:	3708      	adds	r7, #8
 8102cea:	46bd      	mov	sp, r7
 8102cec:	bd80      	pop	{r7, pc}

08102cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102cee:	b580      	push	{r7, lr}
 8102cf0:	b086      	sub	sp, #24
 8102cf2:	af00      	add	r7, sp, #0
 8102cf4:	4603      	mov	r3, r0
 8102cf6:	60b9      	str	r1, [r7, #8]
 8102cf8:	607a      	str	r2, [r7, #4]
 8102cfa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102cfc:	f7ff ff40 	bl	8102b80 <__NVIC_GetPriorityGrouping>
 8102d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102d02:	687a      	ldr	r2, [r7, #4]
 8102d04:	68b9      	ldr	r1, [r7, #8]
 8102d06:	6978      	ldr	r0, [r7, #20]
 8102d08:	f7ff ff90 	bl	8102c2c <NVIC_EncodePriority>
 8102d0c:	4602      	mov	r2, r0
 8102d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102d12:	4611      	mov	r1, r2
 8102d14:	4618      	mov	r0, r3
 8102d16:	f7ff ff5f 	bl	8102bd8 <__NVIC_SetPriority>
}
 8102d1a:	bf00      	nop
 8102d1c:	3718      	adds	r7, #24
 8102d1e:	46bd      	mov	sp, r7
 8102d20:	bd80      	pop	{r7, pc}

08102d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102d22:	b580      	push	{r7, lr}
 8102d24:	b082      	sub	sp, #8
 8102d26:	af00      	add	r7, sp, #0
 8102d28:	4603      	mov	r3, r0
 8102d2a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102d30:	4618      	mov	r0, r3
 8102d32:	f7ff ff33 	bl	8102b9c <__NVIC_EnableIRQ>
}
 8102d36:	bf00      	nop
 8102d38:	3708      	adds	r7, #8
 8102d3a:	46bd      	mov	sp, r7
 8102d3c:	bd80      	pop	{r7, pc}

08102d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102d3e:	b580      	push	{r7, lr}
 8102d40:	b082      	sub	sp, #8
 8102d42:	af00      	add	r7, sp, #0
 8102d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102d46:	6878      	ldr	r0, [r7, #4]
 8102d48:	f7ff ffa4 	bl	8102c94 <SysTick_Config>
 8102d4c:	4603      	mov	r3, r0
}
 8102d4e:	4618      	mov	r0, r3
 8102d50:	3708      	adds	r7, #8
 8102d52:	46bd      	mov	sp, r7
 8102d54:	bd80      	pop	{r7, pc}
	...

08102d58 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102d58:	b480      	push	{r7}
 8102d5a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102d5c:	4b07      	ldr	r3, [pc, #28]	; (8102d7c <HAL_GetCurrentCPUID+0x24>)
 8102d5e:	681b      	ldr	r3, [r3, #0]
 8102d60:	091b      	lsrs	r3, r3, #4
 8102d62:	f003 030f 	and.w	r3, r3, #15
 8102d66:	2b07      	cmp	r3, #7
 8102d68:	d101      	bne.n	8102d6e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102d6a:	2303      	movs	r3, #3
 8102d6c:	e000      	b.n	8102d70 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102d6e:	2301      	movs	r3, #1
  }
}
 8102d70:	4618      	mov	r0, r3
 8102d72:	46bd      	mov	sp, r7
 8102d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d78:	4770      	bx	lr
 8102d7a:	bf00      	nop
 8102d7c:	e000ed00 	.word	0xe000ed00

08102d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102d80:	b480      	push	{r7}
 8102d82:	b089      	sub	sp, #36	; 0x24
 8102d84:	af00      	add	r7, sp, #0
 8102d86:	6078      	str	r0, [r7, #4]
 8102d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102d8a:	2300      	movs	r3, #0
 8102d8c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102d8e:	4b89      	ldr	r3, [pc, #548]	; (8102fb4 <HAL_GPIO_Init+0x234>)
 8102d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102d92:	e194      	b.n	81030be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102d94:	683b      	ldr	r3, [r7, #0]
 8102d96:	681a      	ldr	r2, [r3, #0]
 8102d98:	2101      	movs	r1, #1
 8102d9a:	69fb      	ldr	r3, [r7, #28]
 8102d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8102da0:	4013      	ands	r3, r2
 8102da2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102da4:	693b      	ldr	r3, [r7, #16]
 8102da6:	2b00      	cmp	r3, #0
 8102da8:	f000 8186 	beq.w	81030b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102dac:	683b      	ldr	r3, [r7, #0]
 8102dae:	685b      	ldr	r3, [r3, #4]
 8102db0:	f003 0303 	and.w	r3, r3, #3
 8102db4:	2b01      	cmp	r3, #1
 8102db6:	d005      	beq.n	8102dc4 <HAL_GPIO_Init+0x44>
 8102db8:	683b      	ldr	r3, [r7, #0]
 8102dba:	685b      	ldr	r3, [r3, #4]
 8102dbc:	f003 0303 	and.w	r3, r3, #3
 8102dc0:	2b02      	cmp	r3, #2
 8102dc2:	d130      	bne.n	8102e26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102dc4:	687b      	ldr	r3, [r7, #4]
 8102dc6:	689b      	ldr	r3, [r3, #8]
 8102dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102dca:	69fb      	ldr	r3, [r7, #28]
 8102dcc:	005b      	lsls	r3, r3, #1
 8102dce:	2203      	movs	r2, #3
 8102dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8102dd4:	43db      	mvns	r3, r3
 8102dd6:	69ba      	ldr	r2, [r7, #24]
 8102dd8:	4013      	ands	r3, r2
 8102dda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102ddc:	683b      	ldr	r3, [r7, #0]
 8102dde:	68da      	ldr	r2, [r3, #12]
 8102de0:	69fb      	ldr	r3, [r7, #28]
 8102de2:	005b      	lsls	r3, r3, #1
 8102de4:	fa02 f303 	lsl.w	r3, r2, r3
 8102de8:	69ba      	ldr	r2, [r7, #24]
 8102dea:	4313      	orrs	r3, r2
 8102dec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	69ba      	ldr	r2, [r7, #24]
 8102df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102df4:	687b      	ldr	r3, [r7, #4]
 8102df6:	685b      	ldr	r3, [r3, #4]
 8102df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102dfa:	2201      	movs	r2, #1
 8102dfc:	69fb      	ldr	r3, [r7, #28]
 8102dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8102e02:	43db      	mvns	r3, r3
 8102e04:	69ba      	ldr	r2, [r7, #24]
 8102e06:	4013      	ands	r3, r2
 8102e08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102e0a:	683b      	ldr	r3, [r7, #0]
 8102e0c:	685b      	ldr	r3, [r3, #4]
 8102e0e:	091b      	lsrs	r3, r3, #4
 8102e10:	f003 0201 	and.w	r2, r3, #1
 8102e14:	69fb      	ldr	r3, [r7, #28]
 8102e16:	fa02 f303 	lsl.w	r3, r2, r3
 8102e1a:	69ba      	ldr	r2, [r7, #24]
 8102e1c:	4313      	orrs	r3, r2
 8102e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	69ba      	ldr	r2, [r7, #24]
 8102e24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102e26:	683b      	ldr	r3, [r7, #0]
 8102e28:	685b      	ldr	r3, [r3, #4]
 8102e2a:	f003 0303 	and.w	r3, r3, #3
 8102e2e:	2b03      	cmp	r3, #3
 8102e30:	d017      	beq.n	8102e62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	68db      	ldr	r3, [r3, #12]
 8102e36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102e38:	69fb      	ldr	r3, [r7, #28]
 8102e3a:	005b      	lsls	r3, r3, #1
 8102e3c:	2203      	movs	r2, #3
 8102e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8102e42:	43db      	mvns	r3, r3
 8102e44:	69ba      	ldr	r2, [r7, #24]
 8102e46:	4013      	ands	r3, r2
 8102e48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102e4a:	683b      	ldr	r3, [r7, #0]
 8102e4c:	689a      	ldr	r2, [r3, #8]
 8102e4e:	69fb      	ldr	r3, [r7, #28]
 8102e50:	005b      	lsls	r3, r3, #1
 8102e52:	fa02 f303 	lsl.w	r3, r2, r3
 8102e56:	69ba      	ldr	r2, [r7, #24]
 8102e58:	4313      	orrs	r3, r2
 8102e5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	69ba      	ldr	r2, [r7, #24]
 8102e60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102e62:	683b      	ldr	r3, [r7, #0]
 8102e64:	685b      	ldr	r3, [r3, #4]
 8102e66:	f003 0303 	and.w	r3, r3, #3
 8102e6a:	2b02      	cmp	r3, #2
 8102e6c:	d123      	bne.n	8102eb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102e6e:	69fb      	ldr	r3, [r7, #28]
 8102e70:	08da      	lsrs	r2, r3, #3
 8102e72:	687b      	ldr	r3, [r7, #4]
 8102e74:	3208      	adds	r2, #8
 8102e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102e7c:	69fb      	ldr	r3, [r7, #28]
 8102e7e:	f003 0307 	and.w	r3, r3, #7
 8102e82:	009b      	lsls	r3, r3, #2
 8102e84:	220f      	movs	r2, #15
 8102e86:	fa02 f303 	lsl.w	r3, r2, r3
 8102e8a:	43db      	mvns	r3, r3
 8102e8c:	69ba      	ldr	r2, [r7, #24]
 8102e8e:	4013      	ands	r3, r2
 8102e90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102e92:	683b      	ldr	r3, [r7, #0]
 8102e94:	691a      	ldr	r2, [r3, #16]
 8102e96:	69fb      	ldr	r3, [r7, #28]
 8102e98:	f003 0307 	and.w	r3, r3, #7
 8102e9c:	009b      	lsls	r3, r3, #2
 8102e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8102ea2:	69ba      	ldr	r2, [r7, #24]
 8102ea4:	4313      	orrs	r3, r2
 8102ea6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102ea8:	69fb      	ldr	r3, [r7, #28]
 8102eaa:	08da      	lsrs	r2, r3, #3
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	3208      	adds	r2, #8
 8102eb0:	69b9      	ldr	r1, [r7, #24]
 8102eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102ebc:	69fb      	ldr	r3, [r7, #28]
 8102ebe:	005b      	lsls	r3, r3, #1
 8102ec0:	2203      	movs	r2, #3
 8102ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8102ec6:	43db      	mvns	r3, r3
 8102ec8:	69ba      	ldr	r2, [r7, #24]
 8102eca:	4013      	ands	r3, r2
 8102ecc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102ece:	683b      	ldr	r3, [r7, #0]
 8102ed0:	685b      	ldr	r3, [r3, #4]
 8102ed2:	f003 0203 	and.w	r2, r3, #3
 8102ed6:	69fb      	ldr	r3, [r7, #28]
 8102ed8:	005b      	lsls	r3, r3, #1
 8102eda:	fa02 f303 	lsl.w	r3, r2, r3
 8102ede:	69ba      	ldr	r2, [r7, #24]
 8102ee0:	4313      	orrs	r3, r2
 8102ee2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102ee4:	687b      	ldr	r3, [r7, #4]
 8102ee6:	69ba      	ldr	r2, [r7, #24]
 8102ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102eea:	683b      	ldr	r3, [r7, #0]
 8102eec:	685b      	ldr	r3, [r3, #4]
 8102eee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102ef2:	2b00      	cmp	r3, #0
 8102ef4:	f000 80e0 	beq.w	81030b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102ef8:	4b2f      	ldr	r3, [pc, #188]	; (8102fb8 <HAL_GPIO_Init+0x238>)
 8102efa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102efe:	4a2e      	ldr	r2, [pc, #184]	; (8102fb8 <HAL_GPIO_Init+0x238>)
 8102f00:	f043 0302 	orr.w	r3, r3, #2
 8102f04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102f08:	4b2b      	ldr	r3, [pc, #172]	; (8102fb8 <HAL_GPIO_Init+0x238>)
 8102f0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102f0e:	f003 0302 	and.w	r3, r3, #2
 8102f12:	60fb      	str	r3, [r7, #12]
 8102f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102f16:	4a29      	ldr	r2, [pc, #164]	; (8102fbc <HAL_GPIO_Init+0x23c>)
 8102f18:	69fb      	ldr	r3, [r7, #28]
 8102f1a:	089b      	lsrs	r3, r3, #2
 8102f1c:	3302      	adds	r3, #2
 8102f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102f24:	69fb      	ldr	r3, [r7, #28]
 8102f26:	f003 0303 	and.w	r3, r3, #3
 8102f2a:	009b      	lsls	r3, r3, #2
 8102f2c:	220f      	movs	r2, #15
 8102f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8102f32:	43db      	mvns	r3, r3
 8102f34:	69ba      	ldr	r2, [r7, #24]
 8102f36:	4013      	ands	r3, r2
 8102f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102f3a:	687b      	ldr	r3, [r7, #4]
 8102f3c:	4a20      	ldr	r2, [pc, #128]	; (8102fc0 <HAL_GPIO_Init+0x240>)
 8102f3e:	4293      	cmp	r3, r2
 8102f40:	d052      	beq.n	8102fe8 <HAL_GPIO_Init+0x268>
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	4a1f      	ldr	r2, [pc, #124]	; (8102fc4 <HAL_GPIO_Init+0x244>)
 8102f46:	4293      	cmp	r3, r2
 8102f48:	d031      	beq.n	8102fae <HAL_GPIO_Init+0x22e>
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	4a1e      	ldr	r2, [pc, #120]	; (8102fc8 <HAL_GPIO_Init+0x248>)
 8102f4e:	4293      	cmp	r3, r2
 8102f50:	d02b      	beq.n	8102faa <HAL_GPIO_Init+0x22a>
 8102f52:	687b      	ldr	r3, [r7, #4]
 8102f54:	4a1d      	ldr	r2, [pc, #116]	; (8102fcc <HAL_GPIO_Init+0x24c>)
 8102f56:	4293      	cmp	r3, r2
 8102f58:	d025      	beq.n	8102fa6 <HAL_GPIO_Init+0x226>
 8102f5a:	687b      	ldr	r3, [r7, #4]
 8102f5c:	4a1c      	ldr	r2, [pc, #112]	; (8102fd0 <HAL_GPIO_Init+0x250>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d01f      	beq.n	8102fa2 <HAL_GPIO_Init+0x222>
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	4a1b      	ldr	r2, [pc, #108]	; (8102fd4 <HAL_GPIO_Init+0x254>)
 8102f66:	4293      	cmp	r3, r2
 8102f68:	d019      	beq.n	8102f9e <HAL_GPIO_Init+0x21e>
 8102f6a:	687b      	ldr	r3, [r7, #4]
 8102f6c:	4a1a      	ldr	r2, [pc, #104]	; (8102fd8 <HAL_GPIO_Init+0x258>)
 8102f6e:	4293      	cmp	r3, r2
 8102f70:	d013      	beq.n	8102f9a <HAL_GPIO_Init+0x21a>
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	4a19      	ldr	r2, [pc, #100]	; (8102fdc <HAL_GPIO_Init+0x25c>)
 8102f76:	4293      	cmp	r3, r2
 8102f78:	d00d      	beq.n	8102f96 <HAL_GPIO_Init+0x216>
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	4a18      	ldr	r2, [pc, #96]	; (8102fe0 <HAL_GPIO_Init+0x260>)
 8102f7e:	4293      	cmp	r3, r2
 8102f80:	d007      	beq.n	8102f92 <HAL_GPIO_Init+0x212>
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	4a17      	ldr	r2, [pc, #92]	; (8102fe4 <HAL_GPIO_Init+0x264>)
 8102f86:	4293      	cmp	r3, r2
 8102f88:	d101      	bne.n	8102f8e <HAL_GPIO_Init+0x20e>
 8102f8a:	2309      	movs	r3, #9
 8102f8c:	e02d      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102f8e:	230a      	movs	r3, #10
 8102f90:	e02b      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102f92:	2308      	movs	r3, #8
 8102f94:	e029      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102f96:	2307      	movs	r3, #7
 8102f98:	e027      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102f9a:	2306      	movs	r3, #6
 8102f9c:	e025      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102f9e:	2305      	movs	r3, #5
 8102fa0:	e023      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102fa2:	2304      	movs	r3, #4
 8102fa4:	e021      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102fa6:	2303      	movs	r3, #3
 8102fa8:	e01f      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102faa:	2302      	movs	r3, #2
 8102fac:	e01d      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102fae:	2301      	movs	r3, #1
 8102fb0:	e01b      	b.n	8102fea <HAL_GPIO_Init+0x26a>
 8102fb2:	bf00      	nop
 8102fb4:	580000c0 	.word	0x580000c0
 8102fb8:	58024400 	.word	0x58024400
 8102fbc:	58000400 	.word	0x58000400
 8102fc0:	58020000 	.word	0x58020000
 8102fc4:	58020400 	.word	0x58020400
 8102fc8:	58020800 	.word	0x58020800
 8102fcc:	58020c00 	.word	0x58020c00
 8102fd0:	58021000 	.word	0x58021000
 8102fd4:	58021400 	.word	0x58021400
 8102fd8:	58021800 	.word	0x58021800
 8102fdc:	58021c00 	.word	0x58021c00
 8102fe0:	58022000 	.word	0x58022000
 8102fe4:	58022400 	.word	0x58022400
 8102fe8:	2300      	movs	r3, #0
 8102fea:	69fa      	ldr	r2, [r7, #28]
 8102fec:	f002 0203 	and.w	r2, r2, #3
 8102ff0:	0092      	lsls	r2, r2, #2
 8102ff2:	4093      	lsls	r3, r2
 8102ff4:	69ba      	ldr	r2, [r7, #24]
 8102ff6:	4313      	orrs	r3, r2
 8102ff8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102ffa:	4938      	ldr	r1, [pc, #224]	; (81030dc <HAL_GPIO_Init+0x35c>)
 8102ffc:	69fb      	ldr	r3, [r7, #28]
 8102ffe:	089b      	lsrs	r3, r3, #2
 8103000:	3302      	adds	r3, #2
 8103002:	69ba      	ldr	r2, [r7, #24]
 8103004:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810300c:	681b      	ldr	r3, [r3, #0]
 810300e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103010:	693b      	ldr	r3, [r7, #16]
 8103012:	43db      	mvns	r3, r3
 8103014:	69ba      	ldr	r2, [r7, #24]
 8103016:	4013      	ands	r3, r2
 8103018:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 810301a:	683b      	ldr	r3, [r7, #0]
 810301c:	685b      	ldr	r3, [r3, #4]
 810301e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103022:	2b00      	cmp	r3, #0
 8103024:	d003      	beq.n	810302e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103026:	69ba      	ldr	r2, [r7, #24]
 8103028:	693b      	ldr	r3, [r7, #16]
 810302a:	4313      	orrs	r3, r2
 810302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810302e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103032:	69bb      	ldr	r3, [r7, #24]
 8103034:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810303a:	685b      	ldr	r3, [r3, #4]
 810303c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810303e:	693b      	ldr	r3, [r7, #16]
 8103040:	43db      	mvns	r3, r3
 8103042:	69ba      	ldr	r2, [r7, #24]
 8103044:	4013      	ands	r3, r2
 8103046:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103048:	683b      	ldr	r3, [r7, #0]
 810304a:	685b      	ldr	r3, [r3, #4]
 810304c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103050:	2b00      	cmp	r3, #0
 8103052:	d003      	beq.n	810305c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103054:	69ba      	ldr	r2, [r7, #24]
 8103056:	693b      	ldr	r3, [r7, #16]
 8103058:	4313      	orrs	r3, r2
 810305a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810305c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103060:	69bb      	ldr	r3, [r7, #24]
 8103062:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103064:	697b      	ldr	r3, [r7, #20]
 8103066:	685b      	ldr	r3, [r3, #4]
 8103068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810306a:	693b      	ldr	r3, [r7, #16]
 810306c:	43db      	mvns	r3, r3
 810306e:	69ba      	ldr	r2, [r7, #24]
 8103070:	4013      	ands	r3, r2
 8103072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103074:	683b      	ldr	r3, [r7, #0]
 8103076:	685b      	ldr	r3, [r3, #4]
 8103078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810307c:	2b00      	cmp	r3, #0
 810307e:	d003      	beq.n	8103088 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103080:	69ba      	ldr	r2, [r7, #24]
 8103082:	693b      	ldr	r3, [r7, #16]
 8103084:	4313      	orrs	r3, r2
 8103086:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103088:	697b      	ldr	r3, [r7, #20]
 810308a:	69ba      	ldr	r2, [r7, #24]
 810308c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810308e:	697b      	ldr	r3, [r7, #20]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103094:	693b      	ldr	r3, [r7, #16]
 8103096:	43db      	mvns	r3, r3
 8103098:	69ba      	ldr	r2, [r7, #24]
 810309a:	4013      	ands	r3, r2
 810309c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810309e:	683b      	ldr	r3, [r7, #0]
 81030a0:	685b      	ldr	r3, [r3, #4]
 81030a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81030a6:	2b00      	cmp	r3, #0
 81030a8:	d003      	beq.n	81030b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81030aa:	69ba      	ldr	r2, [r7, #24]
 81030ac:	693b      	ldr	r3, [r7, #16]
 81030ae:	4313      	orrs	r3, r2
 81030b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81030b2:	697b      	ldr	r3, [r7, #20]
 81030b4:	69ba      	ldr	r2, [r7, #24]
 81030b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81030b8:	69fb      	ldr	r3, [r7, #28]
 81030ba:	3301      	adds	r3, #1
 81030bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81030be:	683b      	ldr	r3, [r7, #0]
 81030c0:	681a      	ldr	r2, [r3, #0]
 81030c2:	69fb      	ldr	r3, [r7, #28]
 81030c4:	fa22 f303 	lsr.w	r3, r2, r3
 81030c8:	2b00      	cmp	r3, #0
 81030ca:	f47f ae63 	bne.w	8102d94 <HAL_GPIO_Init+0x14>
  }
}
 81030ce:	bf00      	nop
 81030d0:	bf00      	nop
 81030d2:	3724      	adds	r7, #36	; 0x24
 81030d4:	46bd      	mov	sp, r7
 81030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030da:	4770      	bx	lr
 81030dc:	58000400 	.word	0x58000400

081030e0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 81030e0:	b480      	push	{r7}
 81030e2:	b083      	sub	sp, #12
 81030e4:	af00      	add	r7, sp, #0
 81030e6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 81030e8:	4a08      	ldr	r2, [pc, #32]	; (810310c <HAL_HSEM_FastTake+0x2c>)
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	3320      	adds	r3, #32
 81030ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81030f2:	4a07      	ldr	r2, [pc, #28]	; (8103110 <HAL_HSEM_FastTake+0x30>)
 81030f4:	4293      	cmp	r3, r2
 81030f6:	d101      	bne.n	81030fc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 81030f8:	2300      	movs	r3, #0
 81030fa:	e000      	b.n	81030fe <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 81030fc:	2301      	movs	r3, #1
}
 81030fe:	4618      	mov	r0, r3
 8103100:	370c      	adds	r7, #12
 8103102:	46bd      	mov	sp, r7
 8103104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103108:	4770      	bx	lr
 810310a:	bf00      	nop
 810310c:	58026400 	.word	0x58026400
 8103110:	80000100 	.word	0x80000100

08103114 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8103114:	b480      	push	{r7}
 8103116:	b083      	sub	sp, #12
 8103118:	af00      	add	r7, sp, #0
 810311a:	6078      	str	r0, [r7, #4]
 810311c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 810311e:	4906      	ldr	r1, [pc, #24]	; (8103138 <HAL_HSEM_Release+0x24>)
 8103120:	683b      	ldr	r3, [r7, #0]
 8103122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 810312c:	bf00      	nop
 810312e:	370c      	adds	r7, #12
 8103130:	46bd      	mov	sp, r7
 8103132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103136:	4770      	bx	lr
 8103138:	58026400 	.word	0x58026400

0810313c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810313c:	b480      	push	{r7}
 810313e:	b083      	sub	sp, #12
 8103140:	af00      	add	r7, sp, #0
 8103142:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103144:	4b05      	ldr	r3, [pc, #20]	; (810315c <HAL_HSEM_ActivateNotification+0x20>)
 8103146:	681a      	ldr	r2, [r3, #0]
 8103148:	4904      	ldr	r1, [pc, #16]	; (810315c <HAL_HSEM_ActivateNotification+0x20>)
 810314a:	687b      	ldr	r3, [r7, #4]
 810314c:	4313      	orrs	r3, r2
 810314e:	600b      	str	r3, [r1, #0]
#endif
}
 8103150:	bf00      	nop
 8103152:	370c      	adds	r7, #12
 8103154:	46bd      	mov	sp, r7
 8103156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810315a:	4770      	bx	lr
 810315c:	58026510 	.word	0x58026510

08103160 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8103160:	b580      	push	{r7, lr}
 8103162:	b082      	sub	sp, #8
 8103164:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8103166:	4b0a      	ldr	r3, [pc, #40]	; (8103190 <HAL_HSEM_IRQHandler+0x30>)
 8103168:	68db      	ldr	r3, [r3, #12]
 810316a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 810316c:	4b08      	ldr	r3, [pc, #32]	; (8103190 <HAL_HSEM_IRQHandler+0x30>)
 810316e:	681a      	ldr	r2, [r3, #0]
 8103170:	687b      	ldr	r3, [r7, #4]
 8103172:	43db      	mvns	r3, r3
 8103174:	4906      	ldr	r1, [pc, #24]	; (8103190 <HAL_HSEM_IRQHandler+0x30>)
 8103176:	4013      	ands	r3, r2
 8103178:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 810317a:	4a05      	ldr	r2, [pc, #20]	; (8103190 <HAL_HSEM_IRQHandler+0x30>)
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8103180:	6878      	ldr	r0, [r7, #4]
 8103182:	f006 fe79 	bl	8109e78 <HAL_HSEM_FreeCallback>
}
 8103186:	bf00      	nop
 8103188:	3708      	adds	r7, #8
 810318a:	46bd      	mov	sp, r7
 810318c:	bd80      	pop	{r7, pc}
 810318e:	bf00      	nop
 8103190:	58026510 	.word	0x58026510

08103194 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103194:	b580      	push	{r7, lr}
 8103196:	b084      	sub	sp, #16
 8103198:	af00      	add	r7, sp, #0
 810319a:	60f8      	str	r0, [r7, #12]
 810319c:	460b      	mov	r3, r1
 810319e:	607a      	str	r2, [r7, #4]
 81031a0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81031a2:	4b37      	ldr	r3, [pc, #220]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031a4:	681b      	ldr	r3, [r3, #0]
 81031a6:	f023 0201 	bic.w	r2, r3, #1
 81031aa:	4935      	ldr	r1, [pc, #212]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031ac:	68fb      	ldr	r3, [r7, #12]
 81031ae:	4313      	orrs	r3, r2
 81031b0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81031b2:	687b      	ldr	r3, [r7, #4]
 81031b4:	2b00      	cmp	r3, #0
 81031b6:	d123      	bne.n	8103200 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81031b8:	f7ff fdce 	bl	8102d58 <HAL_GetCurrentCPUID>
 81031bc:	4603      	mov	r3, r0
 81031be:	2b03      	cmp	r3, #3
 81031c0:	d158      	bne.n	8103274 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81031c2:	4b2f      	ldr	r3, [pc, #188]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031c4:	691b      	ldr	r3, [r3, #16]
 81031c6:	4a2e      	ldr	r2, [pc, #184]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 81031c8:	f023 0301 	bic.w	r3, r3, #1
 81031cc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81031ce:	4b2d      	ldr	r3, [pc, #180]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031d0:	691b      	ldr	r3, [r3, #16]
 81031d2:	4a2c      	ldr	r2, [pc, #176]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031d4:	f043 0304 	orr.w	r3, r3, #4
 81031d8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81031da:	f3bf 8f4f 	dsb	sy
}
 81031de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81031e0:	f3bf 8f6f 	isb	sy
}
 81031e4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81031e6:	7afb      	ldrb	r3, [r7, #11]
 81031e8:	2b01      	cmp	r3, #1
 81031ea:	d101      	bne.n	81031f0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81031ec:	bf30      	wfi
 81031ee:	e000      	b.n	81031f2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81031f0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81031f2:	4b24      	ldr	r3, [pc, #144]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031f4:	691b      	ldr	r3, [r3, #16]
 81031f6:	4a23      	ldr	r2, [pc, #140]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81031f8:	f023 0304 	bic.w	r3, r3, #4
 81031fc:	6113      	str	r3, [r2, #16]
 81031fe:	e03c      	b.n	810327a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	2b01      	cmp	r3, #1
 8103204:	d123      	bne.n	810324e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103206:	f7ff fda7 	bl	8102d58 <HAL_GetCurrentCPUID>
 810320a:	4603      	mov	r3, r0
 810320c:	2b01      	cmp	r3, #1
 810320e:	d133      	bne.n	8103278 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103210:	4b1b      	ldr	r3, [pc, #108]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103212:	695b      	ldr	r3, [r3, #20]
 8103214:	4a1a      	ldr	r2, [pc, #104]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103216:	f023 0302 	bic.w	r3, r3, #2
 810321a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810321c:	4b19      	ldr	r3, [pc, #100]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810321e:	691b      	ldr	r3, [r3, #16]
 8103220:	4a18      	ldr	r2, [pc, #96]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103222:	f043 0304 	orr.w	r3, r3, #4
 8103226:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103228:	f3bf 8f4f 	dsb	sy
}
 810322c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810322e:	f3bf 8f6f 	isb	sy
}
 8103232:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103234:	7afb      	ldrb	r3, [r7, #11]
 8103236:	2b01      	cmp	r3, #1
 8103238:	d101      	bne.n	810323e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810323a:	bf30      	wfi
 810323c:	e000      	b.n	8103240 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810323e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103240:	4b10      	ldr	r3, [pc, #64]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103242:	691b      	ldr	r3, [r3, #16]
 8103244:	4a0f      	ldr	r2, [pc, #60]	; (8103284 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103246:	f023 0304 	bic.w	r3, r3, #4
 810324a:	6113      	str	r3, [r2, #16]
 810324c:	e015      	b.n	810327a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810324e:	f7ff fd83 	bl	8102d58 <HAL_GetCurrentCPUID>
 8103252:	4603      	mov	r3, r0
 8103254:	2b03      	cmp	r3, #3
 8103256:	d106      	bne.n	8103266 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103258:	4b09      	ldr	r3, [pc, #36]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 810325a:	691b      	ldr	r3, [r3, #16]
 810325c:	4a08      	ldr	r2, [pc, #32]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 810325e:	f023 0304 	bic.w	r3, r3, #4
 8103262:	6113      	str	r3, [r2, #16]
 8103264:	e009      	b.n	810327a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103266:	4b06      	ldr	r3, [pc, #24]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103268:	695b      	ldr	r3, [r3, #20]
 810326a:	4a05      	ldr	r2, [pc, #20]	; (8103280 <HAL_PWREx_EnterSTOPMode+0xec>)
 810326c:	f023 0304 	bic.w	r3, r3, #4
 8103270:	6153      	str	r3, [r2, #20]
 8103272:	e002      	b.n	810327a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103274:	bf00      	nop
 8103276:	e000      	b.n	810327a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103278:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810327a:	3710      	adds	r7, #16
 810327c:	46bd      	mov	sp, r7
 810327e:	bd80      	pop	{r7, pc}
 8103280:	58024800 	.word	0x58024800
 8103284:	e000ed00 	.word	0xe000ed00

08103288 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103288:	b580      	push	{r7, lr}
 810328a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810328c:	f7ff fd64 	bl	8102d58 <HAL_GetCurrentCPUID>
 8103290:	4603      	mov	r3, r0
 8103292:	2b03      	cmp	r3, #3
 8103294:	d101      	bne.n	810329a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103296:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103298:	e001      	b.n	810329e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810329a:	bf40      	sev
    __WFE ();
 810329c:	bf20      	wfe
}
 810329e:	bf00      	nop
 81032a0:	bd80      	pop	{r7, pc}
	...

081032a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81032a4:	b480      	push	{r7}
 81032a6:	b089      	sub	sp, #36	; 0x24
 81032a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81032aa:	4bb3      	ldr	r3, [pc, #716]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032ac:	691b      	ldr	r3, [r3, #16]
 81032ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81032b2:	2b18      	cmp	r3, #24
 81032b4:	f200 8155 	bhi.w	8103562 <HAL_RCC_GetSysClockFreq+0x2be>
 81032b8:	a201      	add	r2, pc, #4	; (adr r2, 81032c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81032ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032be:	bf00      	nop
 81032c0:	08103325 	.word	0x08103325
 81032c4:	08103563 	.word	0x08103563
 81032c8:	08103563 	.word	0x08103563
 81032cc:	08103563 	.word	0x08103563
 81032d0:	08103563 	.word	0x08103563
 81032d4:	08103563 	.word	0x08103563
 81032d8:	08103563 	.word	0x08103563
 81032dc:	08103563 	.word	0x08103563
 81032e0:	0810334b 	.word	0x0810334b
 81032e4:	08103563 	.word	0x08103563
 81032e8:	08103563 	.word	0x08103563
 81032ec:	08103563 	.word	0x08103563
 81032f0:	08103563 	.word	0x08103563
 81032f4:	08103563 	.word	0x08103563
 81032f8:	08103563 	.word	0x08103563
 81032fc:	08103563 	.word	0x08103563
 8103300:	08103351 	.word	0x08103351
 8103304:	08103563 	.word	0x08103563
 8103308:	08103563 	.word	0x08103563
 810330c:	08103563 	.word	0x08103563
 8103310:	08103563 	.word	0x08103563
 8103314:	08103563 	.word	0x08103563
 8103318:	08103563 	.word	0x08103563
 810331c:	08103563 	.word	0x08103563
 8103320:	08103357 	.word	0x08103357
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103324:	4b94      	ldr	r3, [pc, #592]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	f003 0320 	and.w	r3, r3, #32
 810332c:	2b00      	cmp	r3, #0
 810332e:	d009      	beq.n	8103344 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103330:	4b91      	ldr	r3, [pc, #580]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103332:	681b      	ldr	r3, [r3, #0]
 8103334:	08db      	lsrs	r3, r3, #3
 8103336:	f003 0303 	and.w	r3, r3, #3
 810333a:	4a90      	ldr	r2, [pc, #576]	; (810357c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810333c:	fa22 f303 	lsr.w	r3, r2, r3
 8103340:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8103342:	e111      	b.n	8103568 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103344:	4b8d      	ldr	r3, [pc, #564]	; (810357c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103346:	61bb      	str	r3, [r7, #24]
      break;
 8103348:	e10e      	b.n	8103568 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810334a:	4b8d      	ldr	r3, [pc, #564]	; (8103580 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810334c:	61bb      	str	r3, [r7, #24]
      break;
 810334e:	e10b      	b.n	8103568 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8103350:	4b8c      	ldr	r3, [pc, #560]	; (8103584 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103352:	61bb      	str	r3, [r7, #24]
      break;
 8103354:	e108      	b.n	8103568 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103356:	4b88      	ldr	r3, [pc, #544]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810335a:	f003 0303 	and.w	r3, r3, #3
 810335e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8103360:	4b85      	ldr	r3, [pc, #532]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103364:	091b      	lsrs	r3, r3, #4
 8103366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810336a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 810336c:	4b82      	ldr	r3, [pc, #520]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103370:	f003 0301 	and.w	r3, r3, #1
 8103374:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103376:	4b80      	ldr	r3, [pc, #512]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810337a:	08db      	lsrs	r3, r3, #3
 810337c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103380:	68fa      	ldr	r2, [r7, #12]
 8103382:	fb02 f303 	mul.w	r3, r2, r3
 8103386:	ee07 3a90 	vmov	s15, r3
 810338a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810338e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103392:	693b      	ldr	r3, [r7, #16]
 8103394:	2b00      	cmp	r3, #0
 8103396:	f000 80e1 	beq.w	810355c <HAL_RCC_GetSysClockFreq+0x2b8>
 810339a:	697b      	ldr	r3, [r7, #20]
 810339c:	2b02      	cmp	r3, #2
 810339e:	f000 8083 	beq.w	81034a8 <HAL_RCC_GetSysClockFreq+0x204>
 81033a2:	697b      	ldr	r3, [r7, #20]
 81033a4:	2b02      	cmp	r3, #2
 81033a6:	f200 80a1 	bhi.w	81034ec <HAL_RCC_GetSysClockFreq+0x248>
 81033aa:	697b      	ldr	r3, [r7, #20]
 81033ac:	2b00      	cmp	r3, #0
 81033ae:	d003      	beq.n	81033b8 <HAL_RCC_GetSysClockFreq+0x114>
 81033b0:	697b      	ldr	r3, [r7, #20]
 81033b2:	2b01      	cmp	r3, #1
 81033b4:	d056      	beq.n	8103464 <HAL_RCC_GetSysClockFreq+0x1c0>
 81033b6:	e099      	b.n	81034ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81033b8:	4b6f      	ldr	r3, [pc, #444]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	f003 0320 	and.w	r3, r3, #32
 81033c0:	2b00      	cmp	r3, #0
 81033c2:	d02d      	beq.n	8103420 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81033c4:	4b6c      	ldr	r3, [pc, #432]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033c6:	681b      	ldr	r3, [r3, #0]
 81033c8:	08db      	lsrs	r3, r3, #3
 81033ca:	f003 0303 	and.w	r3, r3, #3
 81033ce:	4a6b      	ldr	r2, [pc, #428]	; (810357c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81033d0:	fa22 f303 	lsr.w	r3, r2, r3
 81033d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	ee07 3a90 	vmov	s15, r3
 81033dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033e0:	693b      	ldr	r3, [r7, #16]
 81033e2:	ee07 3a90 	vmov	s15, r3
 81033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033ee:	4b62      	ldr	r3, [pc, #392]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81033f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033f6:	ee07 3a90 	vmov	s15, r3
 81033fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8103402:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103588 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810340a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810340e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103416:	ee67 7a27 	vmul.f32	s15, s14, s15
 810341a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810341e:	e087      	b.n	8103530 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103420:	693b      	ldr	r3, [r7, #16]
 8103422:	ee07 3a90 	vmov	s15, r3
 8103426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810342a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810358c <HAL_RCC_GetSysClockFreq+0x2e8>
 810342e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103432:	4b51      	ldr	r3, [pc, #324]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810343a:	ee07 3a90 	vmov	s15, r3
 810343e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103442:	ed97 6a02 	vldr	s12, [r7, #8]
 8103446:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103588 <HAL_RCC_GetSysClockFreq+0x2e4>
 810344a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810344e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810345a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810345e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103462:	e065      	b.n	8103530 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103464:	693b      	ldr	r3, [r7, #16]
 8103466:	ee07 3a90 	vmov	s15, r3
 810346a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810346e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103590 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103476:	4b40      	ldr	r3, [pc, #256]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810347a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810347e:	ee07 3a90 	vmov	s15, r3
 8103482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103486:	ed97 6a02 	vldr	s12, [r7, #8]
 810348a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103588 <HAL_RCC_GetSysClockFreq+0x2e4>
 810348e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810349a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810349e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81034a6:	e043      	b.n	8103530 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81034a8:	693b      	ldr	r3, [r7, #16]
 81034aa:	ee07 3a90 	vmov	s15, r3
 81034ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103594 <HAL_RCC_GetSysClockFreq+0x2f0>
 81034b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034ba:	4b2f      	ldr	r3, [pc, #188]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81034be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034c2:	ee07 3a90 	vmov	s15, r3
 81034c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81034ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103588 <HAL_RCC_GetSysClockFreq+0x2e4>
 81034d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81034ea:	e021      	b.n	8103530 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81034ec:	693b      	ldr	r3, [r7, #16]
 81034ee:	ee07 3a90 	vmov	s15, r3
 81034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103590 <HAL_RCC_GetSysClockFreq+0x2ec>
 81034fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034fe:	4b1e      	ldr	r3, [pc, #120]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103506:	ee07 3a90 	vmov	s15, r3
 810350a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810350e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103512:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103588 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810351a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810351e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103526:	ee67 7a27 	vmul.f32	s15, s14, s15
 810352a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810352e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8103530:	4b11      	ldr	r3, [pc, #68]	; (8103578 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103534:	0a5b      	lsrs	r3, r3, #9
 8103536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810353a:	3301      	adds	r3, #1
 810353c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810353e:	683b      	ldr	r3, [r7, #0]
 8103540:	ee07 3a90 	vmov	s15, r3
 8103544:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103548:	edd7 6a07 	vldr	s13, [r7, #28]
 810354c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103554:	ee17 3a90 	vmov	r3, s15
 8103558:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810355a:	e005      	b.n	8103568 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810355c:	2300      	movs	r3, #0
 810355e:	61bb      	str	r3, [r7, #24]
      break;
 8103560:	e002      	b.n	8103568 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8103562:	4b07      	ldr	r3, [pc, #28]	; (8103580 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103564:	61bb      	str	r3, [r7, #24]
      break;
 8103566:	bf00      	nop
  }

  return sysclockfreq;
 8103568:	69bb      	ldr	r3, [r7, #24]
}
 810356a:	4618      	mov	r0, r3
 810356c:	3724      	adds	r7, #36	; 0x24
 810356e:	46bd      	mov	sp, r7
 8103570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103574:	4770      	bx	lr
 8103576:	bf00      	nop
 8103578:	58024400 	.word	0x58024400
 810357c:	03d09000 	.word	0x03d09000
 8103580:	003d0900 	.word	0x003d0900
 8103584:	017d7840 	.word	0x017d7840
 8103588:	46000000 	.word	0x46000000
 810358c:	4c742400 	.word	0x4c742400
 8103590:	4a742400 	.word	0x4a742400
 8103594:	4bbebc20 	.word	0x4bbebc20

08103598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103598:	b580      	push	{r7, lr}
 810359a:	b082      	sub	sp, #8
 810359c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810359e:	f7ff fe81 	bl	81032a4 <HAL_RCC_GetSysClockFreq>
 81035a2:	4602      	mov	r2, r0
 81035a4:	4b11      	ldr	r3, [pc, #68]	; (81035ec <HAL_RCC_GetHCLKFreq+0x54>)
 81035a6:	699b      	ldr	r3, [r3, #24]
 81035a8:	0a1b      	lsrs	r3, r3, #8
 81035aa:	f003 030f 	and.w	r3, r3, #15
 81035ae:	4910      	ldr	r1, [pc, #64]	; (81035f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81035b0:	5ccb      	ldrb	r3, [r1, r3]
 81035b2:	f003 031f 	and.w	r3, r3, #31
 81035b6:	fa22 f303 	lsr.w	r3, r2, r3
 81035ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81035bc:	4b0b      	ldr	r3, [pc, #44]	; (81035ec <HAL_RCC_GetHCLKFreq+0x54>)
 81035be:	699b      	ldr	r3, [r3, #24]
 81035c0:	f003 030f 	and.w	r3, r3, #15
 81035c4:	4a0a      	ldr	r2, [pc, #40]	; (81035f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81035c6:	5cd3      	ldrb	r3, [r2, r3]
 81035c8:	f003 031f 	and.w	r3, r3, #31
 81035cc:	687a      	ldr	r2, [r7, #4]
 81035ce:	fa22 f303 	lsr.w	r3, r2, r3
 81035d2:	4a08      	ldr	r2, [pc, #32]	; (81035f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81035d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81035d6:	4b07      	ldr	r3, [pc, #28]	; (81035f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	4a07      	ldr	r2, [pc, #28]	; (81035f8 <HAL_RCC_GetHCLKFreq+0x60>)
 81035dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81035de:	4b05      	ldr	r3, [pc, #20]	; (81035f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81035e0:	681b      	ldr	r3, [r3, #0]
}
 81035e2:	4618      	mov	r0, r3
 81035e4:	3708      	adds	r7, #8
 81035e6:	46bd      	mov	sp, r7
 81035e8:	bd80      	pop	{r7, pc}
 81035ea:	bf00      	nop
 81035ec:	58024400 	.word	0x58024400
 81035f0:	0810b568 	.word	0x0810b568
 81035f4:	10000004 	.word	0x10000004
 81035f8:	10000000 	.word	0x10000000

081035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81035fc:	b580      	push	{r7, lr}
 81035fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103600:	f7ff ffca 	bl	8103598 <HAL_RCC_GetHCLKFreq>
 8103604:	4602      	mov	r2, r0
 8103606:	4b06      	ldr	r3, [pc, #24]	; (8103620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103608:	69db      	ldr	r3, [r3, #28]
 810360a:	091b      	lsrs	r3, r3, #4
 810360c:	f003 0307 	and.w	r3, r3, #7
 8103610:	4904      	ldr	r1, [pc, #16]	; (8103624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103612:	5ccb      	ldrb	r3, [r1, r3]
 8103614:	f003 031f 	and.w	r3, r3, #31
 8103618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810361c:	4618      	mov	r0, r3
 810361e:	bd80      	pop	{r7, pc}
 8103620:	58024400 	.word	0x58024400
 8103624:	0810b568 	.word	0x0810b568

08103628 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810362c:	b0cc      	sub	sp, #304	; 0x130
 810362e:	af00      	add	r7, sp, #0
 8103630:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103634:	2300      	movs	r3, #0
 8103636:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810363a:	2300      	movs	r3, #0
 810363c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103640:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103648:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 810364c:	2500      	movs	r5, #0
 810364e:	ea54 0305 	orrs.w	r3, r4, r5
 8103652:	d049      	beq.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103654:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810365a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810365e:	d02f      	beq.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103660:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103664:	d828      	bhi.n	81036b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103666:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810366a:	d01a      	beq.n	81036a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810366c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103670:	d822      	bhi.n	81036b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103672:	2b00      	cmp	r3, #0
 8103674:	d003      	beq.n	810367e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810367a:	d007      	beq.n	810368c <HAL_RCCEx_PeriphCLKConfig+0x64>
 810367c:	e01c      	b.n	81036b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810367e:	4bb8      	ldr	r3, [pc, #736]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103682:	4ab7      	ldr	r2, [pc, #732]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103688:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810368a:	e01a      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810368c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103690:	3308      	adds	r3, #8
 8103692:	2102      	movs	r1, #2
 8103694:	4618      	mov	r0, r3
 8103696:	f002 fba1 	bl	8105ddc <RCCEx_PLL2_Config>
 810369a:	4603      	mov	r3, r0
 810369c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81036a0:	e00f      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81036a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036a6:	3328      	adds	r3, #40	; 0x28
 81036a8:	2102      	movs	r1, #2
 81036aa:	4618      	mov	r0, r3
 81036ac:	f002 fc48 	bl	8105f40 <RCCEx_PLL3_Config>
 81036b0:	4603      	mov	r3, r0
 81036b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81036b6:	e004      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036b8:	2301      	movs	r3, #1
 81036ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81036be:	e000      	b.n	81036c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81036c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81036c6:	2b00      	cmp	r3, #0
 81036c8:	d10a      	bne.n	81036e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81036ca:	4ba5      	ldr	r3, [pc, #660]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81036ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81036d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81036d8:	4aa1      	ldr	r2, [pc, #644]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81036da:	430b      	orrs	r3, r1
 81036dc:	6513      	str	r3, [r2, #80]	; 0x50
 81036de:	e003      	b.n	81036e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81036e4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81036e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81036f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81036f4:	f04f 0900 	mov.w	r9, #0
 81036f8:	ea58 0309 	orrs.w	r3, r8, r9
 81036fc:	d047      	beq.n	810378e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81036fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103704:	2b04      	cmp	r3, #4
 8103706:	d82a      	bhi.n	810375e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103708:	a201      	add	r2, pc, #4	; (adr r2, 8103710 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810370a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810370e:	bf00      	nop
 8103710:	08103725 	.word	0x08103725
 8103714:	08103733 	.word	0x08103733
 8103718:	08103749 	.word	0x08103749
 810371c:	08103767 	.word	0x08103767
 8103720:	08103767 	.word	0x08103767
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103724:	4b8e      	ldr	r3, [pc, #568]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103728:	4a8d      	ldr	r2, [pc, #564]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810372e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103730:	e01a      	b.n	8103768 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103732:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103736:	3308      	adds	r3, #8
 8103738:	2100      	movs	r1, #0
 810373a:	4618      	mov	r0, r3
 810373c:	f002 fb4e 	bl	8105ddc <RCCEx_PLL2_Config>
 8103740:	4603      	mov	r3, r0
 8103742:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103746:	e00f      	b.n	8103768 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103748:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810374c:	3328      	adds	r3, #40	; 0x28
 810374e:	2100      	movs	r1, #0
 8103750:	4618      	mov	r0, r3
 8103752:	f002 fbf5 	bl	8105f40 <RCCEx_PLL3_Config>
 8103756:	4603      	mov	r3, r0
 8103758:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810375c:	e004      	b.n	8103768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810375e:	2301      	movs	r3, #1
 8103760:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103764:	e000      	b.n	8103768 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103768:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810376c:	2b00      	cmp	r3, #0
 810376e:	d10a      	bne.n	8103786 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103770:	4b7b      	ldr	r3, [pc, #492]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103774:	f023 0107 	bic.w	r1, r3, #7
 8103778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810377c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810377e:	4a78      	ldr	r2, [pc, #480]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103780:	430b      	orrs	r3, r1
 8103782:	6513      	str	r3, [r2, #80]	; 0x50
 8103784:	e003      	b.n	810378e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103786:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810378a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810378e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103796:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 810379a:	f04f 0b00 	mov.w	fp, #0
 810379e:	ea5a 030b 	orrs.w	r3, sl, fp
 81037a2:	d04c      	beq.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81037a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81037ae:	d030      	beq.n	8103812 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81037b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81037b4:	d829      	bhi.n	810380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81037b6:	2bc0      	cmp	r3, #192	; 0xc0
 81037b8:	d02d      	beq.n	8103816 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81037ba:	2bc0      	cmp	r3, #192	; 0xc0
 81037bc:	d825      	bhi.n	810380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81037be:	2b80      	cmp	r3, #128	; 0x80
 81037c0:	d018      	beq.n	81037f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81037c2:	2b80      	cmp	r3, #128	; 0x80
 81037c4:	d821      	bhi.n	810380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81037c6:	2b00      	cmp	r3, #0
 81037c8:	d002      	beq.n	81037d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81037ca:	2b40      	cmp	r3, #64	; 0x40
 81037cc:	d007      	beq.n	81037de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81037ce:	e01c      	b.n	810380a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81037d0:	4b63      	ldr	r3, [pc, #396]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037d4:	4a62      	ldr	r2, [pc, #392]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81037da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81037dc:	e01c      	b.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81037de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037e2:	3308      	adds	r3, #8
 81037e4:	2100      	movs	r1, #0
 81037e6:	4618      	mov	r0, r3
 81037e8:	f002 faf8 	bl	8105ddc <RCCEx_PLL2_Config>
 81037ec:	4603      	mov	r3, r0
 81037ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81037f2:	e011      	b.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81037f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81037f8:	3328      	adds	r3, #40	; 0x28
 81037fa:	2100      	movs	r1, #0
 81037fc:	4618      	mov	r0, r3
 81037fe:	f002 fb9f 	bl	8105f40 <RCCEx_PLL3_Config>
 8103802:	4603      	mov	r3, r0
 8103804:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103808:	e006      	b.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810380a:	2301      	movs	r3, #1
 810380c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103810:	e002      	b.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103812:	bf00      	nop
 8103814:	e000      	b.n	8103818 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8103816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103818:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810381c:	2b00      	cmp	r3, #0
 810381e:	d10a      	bne.n	8103836 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103820:	4b4f      	ldr	r3, [pc, #316]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103824:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8103828:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810382c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810382e:	4a4c      	ldr	r2, [pc, #304]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103830:	430b      	orrs	r3, r1
 8103832:	6513      	str	r3, [r2, #80]	; 0x50
 8103834:	e003      	b.n	810383e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103836:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810383a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810383e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103846:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 810384a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 810384e:	2300      	movs	r3, #0
 8103850:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8103854:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8103858:	460b      	mov	r3, r1
 810385a:	4313      	orrs	r3, r2
 810385c:	d053      	beq.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810385e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103862:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103866:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810386a:	d035      	beq.n	81038d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 810386c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103870:	d82e      	bhi.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103872:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103876:	d031      	beq.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103878:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810387c:	d828      	bhi.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810387e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103882:	d01a      	beq.n	81038ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103888:	d822      	bhi.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810388a:	2b00      	cmp	r3, #0
 810388c:	d003      	beq.n	8103896 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 810388e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103892:	d007      	beq.n	81038a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103894:	e01c      	b.n	81038d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103896:	4b32      	ldr	r3, [pc, #200]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810389a:	4a31      	ldr	r2, [pc, #196]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810389c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81038a2:	e01c      	b.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81038a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038a8:	3308      	adds	r3, #8
 81038aa:	2100      	movs	r1, #0
 81038ac:	4618      	mov	r0, r3
 81038ae:	f002 fa95 	bl	8105ddc <RCCEx_PLL2_Config>
 81038b2:	4603      	mov	r3, r0
 81038b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81038b8:	e011      	b.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81038ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038be:	3328      	adds	r3, #40	; 0x28
 81038c0:	2100      	movs	r1, #0
 81038c2:	4618      	mov	r0, r3
 81038c4:	f002 fb3c 	bl	8105f40 <RCCEx_PLL3_Config>
 81038c8:	4603      	mov	r3, r0
 81038ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81038ce:	e006      	b.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81038d0:	2301      	movs	r3, #1
 81038d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81038d6:	e002      	b.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81038d8:	bf00      	nop
 81038da:	e000      	b.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81038de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81038e2:	2b00      	cmp	r3, #0
 81038e4:	d10b      	bne.n	81038fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81038e6:	4b1e      	ldr	r3, [pc, #120]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038ea:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81038ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81038f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81038f6:	4a1a      	ldr	r2, [pc, #104]	; (8103960 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038f8:	430b      	orrs	r3, r1
 81038fa:	6593      	str	r3, [r2, #88]	; 0x58
 81038fc:	e003      	b.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103902:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810390e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8103912:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8103916:	2300      	movs	r3, #0
 8103918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 810391c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8103920:	460b      	mov	r3, r1
 8103922:	4313      	orrs	r3, r2
 8103924:	d056      	beq.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810392a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810392e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103932:	d038      	beq.n	81039a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103934:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103938:	d831      	bhi.n	810399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810393a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810393e:	d034      	beq.n	81039aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103940:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103944:	d82b      	bhi.n	810399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810394a:	d01d      	beq.n	8103988 <HAL_RCCEx_PeriphCLKConfig+0x360>
 810394c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103950:	d825      	bhi.n	810399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103952:	2b00      	cmp	r3, #0
 8103954:	d006      	beq.n	8103964 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103956:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810395a:	d00a      	beq.n	8103972 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 810395c:	e01f      	b.n	810399e <HAL_RCCEx_PeriphCLKConfig+0x376>
 810395e:	bf00      	nop
 8103960:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103964:	4ba2      	ldr	r3, [pc, #648]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103968:	4aa1      	ldr	r2, [pc, #644]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810396a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810396e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103970:	e01c      	b.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103972:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103976:	3308      	adds	r3, #8
 8103978:	2100      	movs	r1, #0
 810397a:	4618      	mov	r0, r3
 810397c:	f002 fa2e 	bl	8105ddc <RCCEx_PLL2_Config>
 8103980:	4603      	mov	r3, r0
 8103982:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103986:	e011      	b.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810398c:	3328      	adds	r3, #40	; 0x28
 810398e:	2100      	movs	r1, #0
 8103990:	4618      	mov	r0, r3
 8103992:	f002 fad5 	bl	8105f40 <RCCEx_PLL3_Config>
 8103996:	4603      	mov	r3, r0
 8103998:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810399c:	e006      	b.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810399e:	2301      	movs	r3, #1
 81039a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81039a4:	e002      	b.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81039a6:	bf00      	nop
 81039a8:	e000      	b.n	81039ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81039aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81039b0:	2b00      	cmp	r3, #0
 81039b2:	d10b      	bne.n	81039cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81039b4:	4b8e      	ldr	r3, [pc, #568]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039b8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 81039bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81039c4:	4a8a      	ldr	r2, [pc, #552]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81039c6:	430b      	orrs	r3, r1
 81039c8:	6593      	str	r3, [r2, #88]	; 0x58
 81039ca:	e003      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81039d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81039d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039dc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 81039e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 81039e4:	2300      	movs	r3, #0
 81039e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 81039ea:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 81039ee:	460b      	mov	r3, r1
 81039f0:	4313      	orrs	r3, r2
 81039f2:	d03a      	beq.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81039f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039fa:	2b30      	cmp	r3, #48	; 0x30
 81039fc:	d01f      	beq.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0x416>
 81039fe:	2b30      	cmp	r3, #48	; 0x30
 8103a00:	d819      	bhi.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103a02:	2b20      	cmp	r3, #32
 8103a04:	d00c      	beq.n	8103a20 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103a06:	2b20      	cmp	r3, #32
 8103a08:	d815      	bhi.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103a0a:	2b00      	cmp	r3, #0
 8103a0c:	d019      	beq.n	8103a42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103a0e:	2b10      	cmp	r3, #16
 8103a10:	d111      	bne.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a12:	4b77      	ldr	r3, [pc, #476]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a16:	4a76      	ldr	r2, [pc, #472]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103a1e:	e011      	b.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103a20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a24:	3308      	adds	r3, #8
 8103a26:	2102      	movs	r1, #2
 8103a28:	4618      	mov	r0, r3
 8103a2a:	f002 f9d7 	bl	8105ddc <RCCEx_PLL2_Config>
 8103a2e:	4603      	mov	r3, r0
 8103a30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103a34:	e006      	b.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103a36:	2301      	movs	r3, #1
 8103a38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103a3c:	e002      	b.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103a3e:	bf00      	nop
 8103a40:	e000      	b.n	8103a44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d10a      	bne.n	8103a62 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103a4c:	4b68      	ldr	r3, [pc, #416]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a50:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8103a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a5a:	4a65      	ldr	r2, [pc, #404]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a5c:	430b      	orrs	r3, r1
 8103a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103a60:	e003      	b.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103a66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a72:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8103a76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8103a7a:	2300      	movs	r3, #0
 8103a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8103a80:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8103a84:	460b      	mov	r3, r1
 8103a86:	4313      	orrs	r3, r2
 8103a88:	d051      	beq.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a94:	d035      	beq.n	8103b02 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103a9a:	d82e      	bhi.n	8103afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103aa0:	d031      	beq.n	8103b06 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103aa6:	d828      	bhi.n	8103afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103aac:	d01a      	beq.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ab2:	d822      	bhi.n	8103afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103ab4:	2b00      	cmp	r3, #0
 8103ab6:	d003      	beq.n	8103ac0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103abc:	d007      	beq.n	8103ace <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103abe:	e01c      	b.n	8103afa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ac0:	4b4b      	ldr	r3, [pc, #300]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ac4:	4a4a      	ldr	r2, [pc, #296]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103aca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103acc:	e01c      	b.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103ace:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ad2:	3308      	adds	r3, #8
 8103ad4:	2100      	movs	r1, #0
 8103ad6:	4618      	mov	r0, r3
 8103ad8:	f002 f980 	bl	8105ddc <RCCEx_PLL2_Config>
 8103adc:	4603      	mov	r3, r0
 8103ade:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103ae2:	e011      	b.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ae8:	3328      	adds	r3, #40	; 0x28
 8103aea:	2100      	movs	r1, #0
 8103aec:	4618      	mov	r0, r3
 8103aee:	f002 fa27 	bl	8105f40 <RCCEx_PLL3_Config>
 8103af2:	4603      	mov	r3, r0
 8103af4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103af8:	e006      	b.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103afa:	2301      	movs	r3, #1
 8103afc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103b00:	e002      	b.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103b02:	bf00      	nop
 8103b04:	e000      	b.n	8103b08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b08:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d10a      	bne.n	8103b26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103b10:	4b37      	ldr	r3, [pc, #220]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b14:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8103b18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103b1e:	4a34      	ldr	r2, [pc, #208]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b20:	430b      	orrs	r3, r1
 8103b22:	6513      	str	r3, [r2, #80]	; 0x50
 8103b24:	e003      	b.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103b2a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103b2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b36:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8103b3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8103b3e:	2300      	movs	r3, #0
 8103b40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8103b44:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8103b48:	460b      	mov	r3, r1
 8103b4a:	4313      	orrs	r3, r2
 8103b4c:	d056      	beq.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103b58:	d033      	beq.n	8103bc2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103b5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103b5e:	d82c      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103b64:	d02f      	beq.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103b66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103b6a:	d826      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103b6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103b70:	d02b      	beq.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103b72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103b76:	d820      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b7c:	d012      	beq.n	8103ba4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103b82:	d81a      	bhi.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	d022      	beq.n	8103bce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103b8c:	d115      	bne.n	8103bba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103b8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103b92:	3308      	adds	r3, #8
 8103b94:	2101      	movs	r1, #1
 8103b96:	4618      	mov	r0, r3
 8103b98:	f002 f920 	bl	8105ddc <RCCEx_PLL2_Config>
 8103b9c:	4603      	mov	r3, r0
 8103b9e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103ba2:	e015      	b.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ba8:	3328      	adds	r3, #40	; 0x28
 8103baa:	2101      	movs	r1, #1
 8103bac:	4618      	mov	r0, r3
 8103bae:	f002 f9c7 	bl	8105f40 <RCCEx_PLL3_Config>
 8103bb2:	4603      	mov	r3, r0
 8103bb4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103bb8:	e00a      	b.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103bba:	2301      	movs	r3, #1
 8103bbc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103bc0:	e006      	b.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103bc2:	bf00      	nop
 8103bc4:	e004      	b.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103bc6:	bf00      	nop
 8103bc8:	e002      	b.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103bca:	bf00      	nop
 8103bcc:	e000      	b.n	8103bd0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103bd0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103bd4:	2b00      	cmp	r3, #0
 8103bd6:	d10d      	bne.n	8103bf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103bd8:	4b05      	ldr	r3, [pc, #20]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103bdc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8103be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103be6:	4a02      	ldr	r2, [pc, #8]	; (8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103be8:	430b      	orrs	r3, r1
 8103bea:	6513      	str	r3, [r2, #80]	; 0x50
 8103bec:	e006      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103bee:	bf00      	nop
 8103bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bf4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103bf8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103bfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c04:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8103c08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8103c0c:	2300      	movs	r3, #0
 8103c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8103c12:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8103c16:	460b      	mov	r3, r1
 8103c18:	4313      	orrs	r3, r2
 8103c1a:	d055      	beq.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103c28:	d033      	beq.n	8103c92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103c2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103c2e:	d82c      	bhi.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103c34:	d02f      	beq.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103c3a:	d826      	bhi.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103c3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103c40:	d02b      	beq.n	8103c9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103c42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103c46:	d820      	bhi.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103c4c:	d012      	beq.n	8103c74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103c52:	d81a      	bhi.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103c54:	2b00      	cmp	r3, #0
 8103c56:	d022      	beq.n	8103c9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103c58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103c5c:	d115      	bne.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c62:	3308      	adds	r3, #8
 8103c64:	2101      	movs	r1, #1
 8103c66:	4618      	mov	r0, r3
 8103c68:	f002 f8b8 	bl	8105ddc <RCCEx_PLL2_Config>
 8103c6c:	4603      	mov	r3, r0
 8103c6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103c72:	e015      	b.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103c74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103c78:	3328      	adds	r3, #40	; 0x28
 8103c7a:	2101      	movs	r1, #1
 8103c7c:	4618      	mov	r0, r3
 8103c7e:	f002 f95f 	bl	8105f40 <RCCEx_PLL3_Config>
 8103c82:	4603      	mov	r3, r0
 8103c84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103c88:	e00a      	b.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103c8a:	2301      	movs	r3, #1
 8103c8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103c90:	e006      	b.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103c92:	bf00      	nop
 8103c94:	e004      	b.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103c96:	bf00      	nop
 8103c98:	e002      	b.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103c9a:	bf00      	nop
 8103c9c:	e000      	b.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ca0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103ca4:	2b00      	cmp	r3, #0
 8103ca6:	d10b      	bne.n	8103cc0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103ca8:	4bb7      	ldr	r3, [pc, #732]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103cac:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103cb8:	4ab3      	ldr	r2, [pc, #716]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103cba:	430b      	orrs	r3, r1
 8103cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8103cbe:	e003      	b.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cc0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103cc4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8103cc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cd0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8103cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8103cd8:	2300      	movs	r3, #0
 8103cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8103cde:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8103ce2:	460b      	mov	r3, r1
 8103ce4:	4313      	orrs	r3, r2
 8103ce6:	d02a      	beq.n	8103d3e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8103ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cee:	2b00      	cmp	r3, #0
 8103cf0:	d011      	beq.n	8103d16 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8103cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103cf6:	d10a      	bne.n	8103d0e <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103cfc:	3308      	adds	r3, #8
 8103cfe:	2101      	movs	r1, #1
 8103d00:	4618      	mov	r0, r3
 8103d02:	f002 f86b 	bl	8105ddc <RCCEx_PLL2_Config>
 8103d06:	4603      	mov	r3, r0
 8103d08:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8103d0c:	e004      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d0e:	2301      	movs	r3, #1
 8103d10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103d14:	e000      	b.n	8103d18 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8103d16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d18:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d1c:	2b00      	cmp	r3, #0
 8103d1e:	d10a      	bne.n	8103d36 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8103d20:	4b99      	ldr	r3, [pc, #612]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d24:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8103d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d2e:	4a96      	ldr	r2, [pc, #600]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d30:	430b      	orrs	r3, r1
 8103d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103d34:	e003      	b.n	8103d3e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103d3a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d46:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8103d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8103d4e:	2300      	movs	r3, #0
 8103d50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8103d54:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8103d58:	460b      	mov	r3, r1
 8103d5a:	4313      	orrs	r3, r2
 8103d5c:	d037      	beq.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103d64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103d68:	d00e      	beq.n	8103d88 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8103d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103d6e:	d816      	bhi.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8103d70:	2b00      	cmp	r3, #0
 8103d72:	d018      	beq.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8103d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103d78:	d111      	bne.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d7a:	4b83      	ldr	r3, [pc, #524]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d7e:	4a82      	ldr	r2, [pc, #520]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103d86:	e00f      	b.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103d8c:	3308      	adds	r3, #8
 8103d8e:	2101      	movs	r1, #1
 8103d90:	4618      	mov	r0, r3
 8103d92:	f002 f823 	bl	8105ddc <RCCEx_PLL2_Config>
 8103d96:	4603      	mov	r3, r0
 8103d98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103d9c:	e004      	b.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d9e:	2301      	movs	r3, #1
 8103da0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103da4:	e000      	b.n	8103da8 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8103da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103da8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103dac:	2b00      	cmp	r3, #0
 8103dae:	d10a      	bne.n	8103dc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103db0:	4b75      	ldr	r3, [pc, #468]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103db4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8103db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103dbe:	4a72      	ldr	r2, [pc, #456]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103dc0:	430b      	orrs	r3, r1
 8103dc2:	6513      	str	r3, [r2, #80]	; 0x50
 8103dc4:	e003      	b.n	8103dce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103dca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dd6:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8103dda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8103dde:	2300      	movs	r3, #0
 8103de0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8103de4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8103de8:	460b      	mov	r3, r1
 8103dea:	4313      	orrs	r3, r2
 8103dec:	d03a      	beq.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103dee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103df4:	2b03      	cmp	r3, #3
 8103df6:	d81d      	bhi.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8103df8:	a201      	add	r2, pc, #4	; (adr r2, 8103e00 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8103dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103dfe:	bf00      	nop
 8103e00:	08103e3d 	.word	0x08103e3d
 8103e04:	08103e11 	.word	0x08103e11
 8103e08:	08103e1f 	.word	0x08103e1f
 8103e0c:	08103e3d 	.word	0x08103e3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e10:	4b5d      	ldr	r3, [pc, #372]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e14:	4a5c      	ldr	r2, [pc, #368]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103e1c:	e00f      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103e1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e22:	3308      	adds	r3, #8
 8103e24:	2102      	movs	r1, #2
 8103e26:	4618      	mov	r0, r3
 8103e28:	f001 ffd8 	bl	8105ddc <RCCEx_PLL2_Config>
 8103e2c:	4603      	mov	r3, r0
 8103e2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103e32:	e004      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103e34:	2301      	movs	r3, #1
 8103e36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103e3a:	e000      	b.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8103e3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e3e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e42:	2b00      	cmp	r3, #0
 8103e44:	d10a      	bne.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103e46:	4b50      	ldr	r3, [pc, #320]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103e4a:	f023 0103 	bic.w	r1, r3, #3
 8103e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103e54:	4a4c      	ldr	r2, [pc, #304]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103e56:	430b      	orrs	r3, r1
 8103e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103e5a:	e003      	b.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103e60:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103e64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8103e70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8103e74:	2300      	movs	r3, #0
 8103e76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8103e7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8103e7e:	460b      	mov	r3, r1
 8103e80:	4313      	orrs	r3, r2
 8103e82:	f000 80a0 	beq.w	8103fc6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103e86:	4b41      	ldr	r3, [pc, #260]	; (8103f8c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103e88:	681b      	ldr	r3, [r3, #0]
 8103e8a:	4a40      	ldr	r2, [pc, #256]	; (8103f8c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103e90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103e92:	f7fd fc33 	bl	81016fc <HAL_GetTick>
 8103e96:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103e9a:	e00b      	b.n	8103eb4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103e9c:	f7fd fc2e 	bl	81016fc <HAL_GetTick>
 8103ea0:	4602      	mov	r2, r0
 8103ea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8103ea6:	1ad3      	subs	r3, r2, r3
 8103ea8:	2b64      	cmp	r3, #100	; 0x64
 8103eaa:	d903      	bls.n	8103eb4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8103eac:	2303      	movs	r3, #3
 8103eae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8103eb2:	e005      	b.n	8103ec0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103eb4:	4b35      	ldr	r3, [pc, #212]	; (8103f8c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8103eb6:	681b      	ldr	r3, [r3, #0]
 8103eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d0ed      	beq.n	8103e9c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8103ec0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	d17a      	bne.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103ec8:	4b2f      	ldr	r3, [pc, #188]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103eca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103ed0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103ed4:	4053      	eors	r3, r2
 8103ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d015      	beq.n	8103f0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103ede:	4b2a      	ldr	r3, [pc, #168]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103ee6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103eea:	4b27      	ldr	r3, [pc, #156]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103eee:	4a26      	ldr	r2, [pc, #152]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103ef4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103ef6:	4b24      	ldr	r3, [pc, #144]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103efa:	4a23      	ldr	r2, [pc, #140]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103f00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103f02:	4a21      	ldr	r2, [pc, #132]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8103f08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103f16:	d118      	bne.n	8103f4a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103f18:	f7fd fbf0 	bl	81016fc <HAL_GetTick>
 8103f1c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103f20:	e00d      	b.n	8103f3e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103f22:	f7fd fbeb 	bl	81016fc <HAL_GetTick>
 8103f26:	4602      	mov	r2, r0
 8103f28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8103f2c:	1ad2      	subs	r2, r2, r3
 8103f2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8103f32:	429a      	cmp	r2, r3
 8103f34:	d903      	bls.n	8103f3e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8103f36:	2303      	movs	r3, #3
 8103f38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8103f3c:	e005      	b.n	8103f4a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103f3e:	4b12      	ldr	r3, [pc, #72]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f42:	f003 0302 	and.w	r3, r3, #2
 8103f46:	2b00      	cmp	r3, #0
 8103f48:	d0eb      	beq.n	8103f22 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8103f4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103f4e:	2b00      	cmp	r3, #0
 8103f50:	d130      	bne.n	8103fb4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103f62:	d115      	bne.n	8103f90 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8103f64:	4b08      	ldr	r3, [pc, #32]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f66:	691b      	ldr	r3, [r3, #16]
 8103f68:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8103f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103f74:	091b      	lsrs	r3, r3, #4
 8103f76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103f7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103f7e:	4a02      	ldr	r2, [pc, #8]	; (8103f88 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8103f80:	430b      	orrs	r3, r1
 8103f82:	6113      	str	r3, [r2, #16]
 8103f84:	e00a      	b.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8103f86:	bf00      	nop
 8103f88:	58024400 	.word	0x58024400
 8103f8c:	58024800 	.word	0x58024800
 8103f90:	4bd4      	ldr	r3, [pc, #848]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103f92:	691b      	ldr	r3, [r3, #16]
 8103f94:	4ad3      	ldr	r2, [pc, #844]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103f96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103f9a:	6113      	str	r3, [r2, #16]
 8103f9c:	4bd1      	ldr	r3, [pc, #836]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103f9e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8103fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103fac:	4acd      	ldr	r2, [pc, #820]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8103fae:	430b      	orrs	r3, r1
 8103fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8103fb2:	e008      	b.n	8103fc6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103fb4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103fb8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8103fbc:	e003      	b.n	8103fc6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fbe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8103fc2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fce:	f002 0301 	and.w	r3, r2, #1
 8103fd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8103fd6:	2300      	movs	r3, #0
 8103fd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8103fdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8103fe0:	460b      	mov	r3, r1
 8103fe2:	4313      	orrs	r3, r2
 8103fe4:	f000 808b 	beq.w	81040fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103fe8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103ff0:	2b28      	cmp	r3, #40	; 0x28
 8103ff2:	d86b      	bhi.n	81040cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8103ff4:	a201      	add	r2, pc, #4	; (adr r2, 8103ffc <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8103ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ffa:	bf00      	nop
 8103ffc:	081040d5 	.word	0x081040d5
 8104000:	081040cd 	.word	0x081040cd
 8104004:	081040cd 	.word	0x081040cd
 8104008:	081040cd 	.word	0x081040cd
 810400c:	081040cd 	.word	0x081040cd
 8104010:	081040cd 	.word	0x081040cd
 8104014:	081040cd 	.word	0x081040cd
 8104018:	081040cd 	.word	0x081040cd
 810401c:	081040a1 	.word	0x081040a1
 8104020:	081040cd 	.word	0x081040cd
 8104024:	081040cd 	.word	0x081040cd
 8104028:	081040cd 	.word	0x081040cd
 810402c:	081040cd 	.word	0x081040cd
 8104030:	081040cd 	.word	0x081040cd
 8104034:	081040cd 	.word	0x081040cd
 8104038:	081040cd 	.word	0x081040cd
 810403c:	081040b7 	.word	0x081040b7
 8104040:	081040cd 	.word	0x081040cd
 8104044:	081040cd 	.word	0x081040cd
 8104048:	081040cd 	.word	0x081040cd
 810404c:	081040cd 	.word	0x081040cd
 8104050:	081040cd 	.word	0x081040cd
 8104054:	081040cd 	.word	0x081040cd
 8104058:	081040cd 	.word	0x081040cd
 810405c:	081040d5 	.word	0x081040d5
 8104060:	081040cd 	.word	0x081040cd
 8104064:	081040cd 	.word	0x081040cd
 8104068:	081040cd 	.word	0x081040cd
 810406c:	081040cd 	.word	0x081040cd
 8104070:	081040cd 	.word	0x081040cd
 8104074:	081040cd 	.word	0x081040cd
 8104078:	081040cd 	.word	0x081040cd
 810407c:	081040d5 	.word	0x081040d5
 8104080:	081040cd 	.word	0x081040cd
 8104084:	081040cd 	.word	0x081040cd
 8104088:	081040cd 	.word	0x081040cd
 810408c:	081040cd 	.word	0x081040cd
 8104090:	081040cd 	.word	0x081040cd
 8104094:	081040cd 	.word	0x081040cd
 8104098:	081040cd 	.word	0x081040cd
 810409c:	081040d5 	.word	0x081040d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81040a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040a4:	3308      	adds	r3, #8
 81040a6:	2101      	movs	r1, #1
 81040a8:	4618      	mov	r0, r3
 81040aa:	f001 fe97 	bl	8105ddc <RCCEx_PLL2_Config>
 81040ae:	4603      	mov	r3, r0
 81040b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81040b4:	e00f      	b.n	81040d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81040b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040ba:	3328      	adds	r3, #40	; 0x28
 81040bc:	2101      	movs	r1, #1
 81040be:	4618      	mov	r0, r3
 81040c0:	f001 ff3e 	bl	8105f40 <RCCEx_PLL3_Config>
 81040c4:	4603      	mov	r3, r0
 81040c6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81040ca:	e004      	b.n	81040d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81040cc:	2301      	movs	r3, #1
 81040ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81040d2:	e000      	b.n	81040d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 81040d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81040d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81040da:	2b00      	cmp	r3, #0
 81040dc:	d10b      	bne.n	81040f6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81040de:	4b81      	ldr	r3, [pc, #516]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81040e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 81040e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81040ee:	4a7d      	ldr	r2, [pc, #500]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81040f0:	430b      	orrs	r3, r1
 81040f2:	6553      	str	r3, [r2, #84]	; 0x54
 81040f4:	e003      	b.n	81040fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81040fa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81040fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104106:	f002 0302 	and.w	r3, r2, #2
 810410a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810410e:	2300      	movs	r3, #0
 8104110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8104114:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8104118:	460b      	mov	r3, r1
 810411a:	4313      	orrs	r3, r2
 810411c:	d042      	beq.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810411e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104124:	2b05      	cmp	r3, #5
 8104126:	d825      	bhi.n	8104174 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8104128:	a201      	add	r2, pc, #4	; (adr r2, 8104130 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 810412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810412e:	bf00      	nop
 8104130:	0810417d 	.word	0x0810417d
 8104134:	08104149 	.word	0x08104149
 8104138:	0810415f 	.word	0x0810415f
 810413c:	0810417d 	.word	0x0810417d
 8104140:	0810417d 	.word	0x0810417d
 8104144:	0810417d 	.word	0x0810417d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104148:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810414c:	3308      	adds	r3, #8
 810414e:	2101      	movs	r1, #1
 8104150:	4618      	mov	r0, r3
 8104152:	f001 fe43 	bl	8105ddc <RCCEx_PLL2_Config>
 8104156:	4603      	mov	r3, r0
 8104158:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810415c:	e00f      	b.n	810417e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810415e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104162:	3328      	adds	r3, #40	; 0x28
 8104164:	2101      	movs	r1, #1
 8104166:	4618      	mov	r0, r3
 8104168:	f001 feea 	bl	8105f40 <RCCEx_PLL3_Config>
 810416c:	4603      	mov	r3, r0
 810416e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8104172:	e004      	b.n	810417e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104174:	2301      	movs	r3, #1
 8104176:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810417a:	e000      	b.n	810417e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 810417c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810417e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104182:	2b00      	cmp	r3, #0
 8104184:	d10a      	bne.n	810419c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8104186:	4b57      	ldr	r3, [pc, #348]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810418a:	f023 0107 	bic.w	r1, r3, #7
 810418e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104192:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104194:	4a53      	ldr	r2, [pc, #332]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104196:	430b      	orrs	r3, r1
 8104198:	6553      	str	r3, [r2, #84]	; 0x54
 810419a:	e003      	b.n	81041a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810419c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81041a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81041a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81041ac:	f002 0304 	and.w	r3, r2, #4
 81041b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81041b4:	2300      	movs	r3, #0
 81041b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81041ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81041be:	460b      	mov	r3, r1
 81041c0:	4313      	orrs	r3, r2
 81041c2:	d044      	beq.n	810424e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 81041c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81041cc:	2b05      	cmp	r3, #5
 81041ce:	d825      	bhi.n	810421c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 81041d0:	a201      	add	r2, pc, #4	; (adr r2, 81041d8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 81041d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041d6:	bf00      	nop
 81041d8:	08104225 	.word	0x08104225
 81041dc:	081041f1 	.word	0x081041f1
 81041e0:	08104207 	.word	0x08104207
 81041e4:	08104225 	.word	0x08104225
 81041e8:	08104225 	.word	0x08104225
 81041ec:	08104225 	.word	0x08104225
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81041f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81041f4:	3308      	adds	r3, #8
 81041f6:	2101      	movs	r1, #1
 81041f8:	4618      	mov	r0, r3
 81041fa:	f001 fdef 	bl	8105ddc <RCCEx_PLL2_Config>
 81041fe:	4603      	mov	r3, r0
 8104200:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104204:	e00f      	b.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104206:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810420a:	3328      	adds	r3, #40	; 0x28
 810420c:	2101      	movs	r1, #1
 810420e:	4618      	mov	r0, r3
 8104210:	f001 fe96 	bl	8105f40 <RCCEx_PLL3_Config>
 8104214:	4603      	mov	r3, r0
 8104216:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810421a:	e004      	b.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810421c:	2301      	movs	r3, #1
 810421e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104222:	e000      	b.n	8104226 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8104224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104226:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810422a:	2b00      	cmp	r3, #0
 810422c:	d10b      	bne.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810422e:	4b2d      	ldr	r3, [pc, #180]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104232:	f023 0107 	bic.w	r1, r3, #7
 8104236:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810423a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810423e:	4a29      	ldr	r2, [pc, #164]	; (81042e4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8104240:	430b      	orrs	r3, r1
 8104242:	6593      	str	r3, [r2, #88]	; 0x58
 8104244:	e003      	b.n	810424e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104246:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810424a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810424e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104256:	f002 0320 	and.w	r3, r2, #32
 810425a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 810425e:	2300      	movs	r3, #0
 8104260:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104264:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8104268:	460b      	mov	r3, r1
 810426a:	4313      	orrs	r3, r2
 810426c:	d057      	beq.n	810431e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810426e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104276:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810427a:	d035      	beq.n	81042e8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 810427c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104280:	d82c      	bhi.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8104282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104286:	d031      	beq.n	81042ec <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8104288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810428c:	d826      	bhi.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810428e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104292:	d02d      	beq.n	81042f0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8104294:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104298:	d820      	bhi.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810429a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810429e:	d012      	beq.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 81042a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81042a4:	d81a      	bhi.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 81042a6:	2b00      	cmp	r3, #0
 81042a8:	d024      	beq.n	81042f4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 81042aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81042ae:	d115      	bne.n	81042dc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81042b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042b4:	3308      	adds	r3, #8
 81042b6:	2100      	movs	r1, #0
 81042b8:	4618      	mov	r0, r3
 81042ba:	f001 fd8f 	bl	8105ddc <RCCEx_PLL2_Config>
 81042be:	4603      	mov	r3, r0
 81042c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81042c4:	e017      	b.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81042c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81042ca:	3328      	adds	r3, #40	; 0x28
 81042cc:	2102      	movs	r1, #2
 81042ce:	4618      	mov	r0, r3
 81042d0:	f001 fe36 	bl	8105f40 <RCCEx_PLL3_Config>
 81042d4:	4603      	mov	r3, r0
 81042d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 81042da:	e00c      	b.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042dc:	2301      	movs	r3, #1
 81042de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81042e2:	e008      	b.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 81042e4:	58024400 	.word	0x58024400
        break;
 81042e8:	bf00      	nop
 81042ea:	e004      	b.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81042ec:	bf00      	nop
 81042ee:	e002      	b.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81042f0:	bf00      	nop
 81042f2:	e000      	b.n	81042f6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 81042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81042fa:	2b00      	cmp	r3, #0
 81042fc:	d10b      	bne.n	8104316 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81042fe:	4bc2      	ldr	r3, [pc, #776]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104302:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8104306:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810430a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810430e:	4abe      	ldr	r2, [pc, #760]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104310:	430b      	orrs	r3, r1
 8104312:	6553      	str	r3, [r2, #84]	; 0x54
 8104314:	e003      	b.n	810431e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104316:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810431a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810431e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104326:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810432a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 810432e:	2300      	movs	r3, #0
 8104330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8104334:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8104338:	460b      	mov	r3, r1
 810433a:	4313      	orrs	r3, r2
 810433c:	d055      	beq.n	81043ea <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810433e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104342:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104346:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810434a:	d033      	beq.n	81043b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 810434c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104350:	d82c      	bhi.n	81043ac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104356:	d02f      	beq.n	81043b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8104358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810435c:	d826      	bhi.n	81043ac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810435e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104362:	d02b      	beq.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8104364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104368:	d820      	bhi.n	81043ac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810436a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810436e:	d012      	beq.n	8104396 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8104370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104374:	d81a      	bhi.n	81043ac <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8104376:	2b00      	cmp	r3, #0
 8104378:	d022      	beq.n	81043c0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 810437a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810437e:	d115      	bne.n	81043ac <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104380:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104384:	3308      	adds	r3, #8
 8104386:	2100      	movs	r1, #0
 8104388:	4618      	mov	r0, r3
 810438a:	f001 fd27 	bl	8105ddc <RCCEx_PLL2_Config>
 810438e:	4603      	mov	r3, r0
 8104390:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104394:	e015      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104396:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810439a:	3328      	adds	r3, #40	; 0x28
 810439c:	2102      	movs	r1, #2
 810439e:	4618      	mov	r0, r3
 81043a0:	f001 fdce 	bl	8105f40 <RCCEx_PLL3_Config>
 81043a4:	4603      	mov	r3, r0
 81043a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81043aa:	e00a      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81043ac:	2301      	movs	r3, #1
 81043ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81043b2:	e006      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81043b4:	bf00      	nop
 81043b6:	e004      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81043b8:	bf00      	nop
 81043ba:	e002      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81043bc:	bf00      	nop
 81043be:	e000      	b.n	81043c2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 81043c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81043c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81043c6:	2b00      	cmp	r3, #0
 81043c8:	d10b      	bne.n	81043e2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 81043ca:	4b8f      	ldr	r3, [pc, #572]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81043ce:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 81043d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81043da:	4a8b      	ldr	r2, [pc, #556]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81043dc:	430b      	orrs	r3, r1
 81043de:	6593      	str	r3, [r2, #88]	; 0x58
 81043e0:	e003      	b.n	81043ea <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81043e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 81043ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043f2:	f002 0380 	and.w	r3, r2, #128	; 0x80
 81043f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81043fa:	2300      	movs	r3, #0
 81043fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8104400:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8104404:	460b      	mov	r3, r1
 8104406:	4313      	orrs	r3, r2
 8104408:	d055      	beq.n	81044b6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810440a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810440e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104412:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104416:	d033      	beq.n	8104480 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8104418:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810441c:	d82c      	bhi.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810441e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104422:	d02f      	beq.n	8104484 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8104424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104428:	d826      	bhi.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 810442a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810442e:	d02b      	beq.n	8104488 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8104430:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104434:	d820      	bhi.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104436:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810443a:	d012      	beq.n	8104462 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 810443c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104440:	d81a      	bhi.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8104442:	2b00      	cmp	r3, #0
 8104444:	d022      	beq.n	810448c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8104446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810444a:	d115      	bne.n	8104478 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810444c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104450:	3308      	adds	r3, #8
 8104452:	2100      	movs	r1, #0
 8104454:	4618      	mov	r0, r3
 8104456:	f001 fcc1 	bl	8105ddc <RCCEx_PLL2_Config>
 810445a:	4603      	mov	r3, r0
 810445c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104460:	e015      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104462:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104466:	3328      	adds	r3, #40	; 0x28
 8104468:	2102      	movs	r1, #2
 810446a:	4618      	mov	r0, r3
 810446c:	f001 fd68 	bl	8105f40 <RCCEx_PLL3_Config>
 8104470:	4603      	mov	r3, r0
 8104472:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8104476:	e00a      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104478:	2301      	movs	r3, #1
 810447a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810447e:	e006      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104480:	bf00      	nop
 8104482:	e004      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104484:	bf00      	nop
 8104486:	e002      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8104488:	bf00      	nop
 810448a:	e000      	b.n	810448e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810448e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104492:	2b00      	cmp	r3, #0
 8104494:	d10b      	bne.n	81044ae <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104496:	4b5c      	ldr	r3, [pc, #368]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810449a:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 810449e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81044a6:	4a58      	ldr	r2, [pc, #352]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81044a8:	430b      	orrs	r3, r1
 81044aa:	6593      	str	r3, [r2, #88]	; 0x58
 81044ac:	e003      	b.n	81044b6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81044ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81044b2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81044b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81044be:	f002 0308 	and.w	r3, r2, #8
 81044c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 81044c6:	2300      	movs	r3, #0
 81044c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 81044cc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 81044d0:	460b      	mov	r3, r1
 81044d2:	4313      	orrs	r3, r2
 81044d4:	d01e      	beq.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 81044d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81044de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81044e2:	d10c      	bne.n	81044fe <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81044e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81044e8:	3328      	adds	r3, #40	; 0x28
 81044ea:	2102      	movs	r1, #2
 81044ec:	4618      	mov	r0, r3
 81044ee:	f001 fd27 	bl	8105f40 <RCCEx_PLL3_Config>
 81044f2:	4603      	mov	r3, r0
 81044f4:	2b00      	cmp	r3, #0
 81044f6:	d002      	beq.n	81044fe <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 81044f8:	2301      	movs	r3, #1
 81044fa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81044fe:	4b42      	ldr	r3, [pc, #264]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104502:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104506:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810450e:	4a3e      	ldr	r2, [pc, #248]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104510:	430b      	orrs	r3, r1
 8104512:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104518:	e9d3 2300 	ldrd	r2, r3, [r3]
 810451c:	f002 0310 	and.w	r3, r2, #16
 8104520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8104524:	2300      	movs	r3, #0
 8104526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 810452a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 810452e:	460b      	mov	r3, r1
 8104530:	4313      	orrs	r3, r2
 8104532:	d01e      	beq.n	8104572 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104534:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810453c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104540:	d10c      	bne.n	810455c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104542:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104546:	3328      	adds	r3, #40	; 0x28
 8104548:	2102      	movs	r1, #2
 810454a:	4618      	mov	r0, r3
 810454c:	f001 fcf8 	bl	8105f40 <RCCEx_PLL3_Config>
 8104550:	4603      	mov	r3, r0
 8104552:	2b00      	cmp	r3, #0
 8104554:	d002      	beq.n	810455c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8104556:	2301      	movs	r3, #1
 8104558:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810455c:	4b2a      	ldr	r3, [pc, #168]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104560:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104564:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810456c:	4a26      	ldr	r2, [pc, #152]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810456e:	430b      	orrs	r3, r1
 8104570:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104576:	e9d3 2300 	ldrd	r2, r3, [r3]
 810457a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 810457e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8104582:	2300      	movs	r3, #0
 8104584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8104588:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 810458c:	460b      	mov	r3, r1
 810458e:	4313      	orrs	r3, r2
 8104590:	d040      	beq.n	8104614 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8104592:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810459a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810459e:	d022      	beq.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 81045a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045a4:	d81b      	bhi.n	81045de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81045a6:	2b00      	cmp	r3, #0
 81045a8:	d003      	beq.n	81045b2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 81045aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81045ae:	d00b      	beq.n	81045c8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 81045b0:	e015      	b.n	81045de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81045b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045b6:	3308      	adds	r3, #8
 81045b8:	2100      	movs	r1, #0
 81045ba:	4618      	mov	r0, r3
 81045bc:	f001 fc0e 	bl	8105ddc <RCCEx_PLL2_Config>
 81045c0:	4603      	mov	r3, r0
 81045c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81045c6:	e00f      	b.n	81045e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81045c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045cc:	3328      	adds	r3, #40	; 0x28
 81045ce:	2102      	movs	r1, #2
 81045d0:	4618      	mov	r0, r3
 81045d2:	f001 fcb5 	bl	8105f40 <RCCEx_PLL3_Config>
 81045d6:	4603      	mov	r3, r0
 81045d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 81045dc:	e004      	b.n	81045e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81045de:	2301      	movs	r3, #1
 81045e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81045e4:	e000      	b.n	81045e8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 81045e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81045e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81045ec:	2b00      	cmp	r3, #0
 81045ee:	d10d      	bne.n	810460c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81045f0:	4b05      	ldr	r3, [pc, #20]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045f4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81045f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81045fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104600:	4a01      	ldr	r2, [pc, #4]	; (8104608 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8104602:	430b      	orrs	r3, r1
 8104604:	6593      	str	r3, [r2, #88]	; 0x58
 8104606:	e005      	b.n	8104614 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8104608:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810460c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104610:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104614:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104618:	e9d3 2300 	ldrd	r2, r3, [r3]
 810461c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8104620:	67bb      	str	r3, [r7, #120]	; 0x78
 8104622:	2300      	movs	r3, #0
 8104624:	67fb      	str	r3, [r7, #124]	; 0x7c
 8104626:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 810462a:	460b      	mov	r3, r1
 810462c:	4313      	orrs	r3, r2
 810462e:	d03b      	beq.n	81046a8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8104630:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810463c:	d01f      	beq.n	810467e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 810463e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104642:	d818      	bhi.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8104644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104648:	d003      	beq.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 810464a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810464e:	d007      	beq.n	8104660 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8104650:	e011      	b.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104652:	4b64      	ldr	r3, [pc, #400]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104656:	4a63      	ldr	r2, [pc, #396]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8104658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810465c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 810465e:	e00f      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104660:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104664:	3328      	adds	r3, #40	; 0x28
 8104666:	2101      	movs	r1, #1
 8104668:	4618      	mov	r0, r3
 810466a:	f001 fc69 	bl	8105f40 <RCCEx_PLL3_Config>
 810466e:	4603      	mov	r3, r0
 8104670:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8104674:	e004      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104676:	2301      	movs	r3, #1
 8104678:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 810467c:	e000      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 810467e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104680:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104684:	2b00      	cmp	r3, #0
 8104686:	d10b      	bne.n	81046a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104688:	4b56      	ldr	r3, [pc, #344]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810468c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104690:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104698:	4a52      	ldr	r2, [pc, #328]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810469a:	430b      	orrs	r3, r1
 810469c:	6553      	str	r3, [r2, #84]	; 0x54
 810469e:	e003      	b.n	81046a8 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81046a4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81046a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046b0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 81046b4:	673b      	str	r3, [r7, #112]	; 0x70
 81046b6:	2300      	movs	r3, #0
 81046b8:	677b      	str	r3, [r7, #116]	; 0x74
 81046ba:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 81046be:	460b      	mov	r3, r1
 81046c0:	4313      	orrs	r3, r2
 81046c2:	d031      	beq.n	8104728 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 81046c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81046c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81046ca:	2b00      	cmp	r3, #0
 81046cc:	d003      	beq.n	81046d6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 81046ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81046d2:	d007      	beq.n	81046e4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 81046d4:	e011      	b.n	81046fa <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046d6:	4b43      	ldr	r3, [pc, #268]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046da:	4a42      	ldr	r2, [pc, #264]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81046dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81046e2:	e00e      	b.n	8104702 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81046e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81046e8:	3308      	adds	r3, #8
 81046ea:	2102      	movs	r1, #2
 81046ec:	4618      	mov	r0, r3
 81046ee:	f001 fb75 	bl	8105ddc <RCCEx_PLL2_Config>
 81046f2:	4603      	mov	r3, r0
 81046f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81046f8:	e003      	b.n	8104702 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 81046fa:	2301      	movs	r3, #1
 81046fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8104700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104702:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104706:	2b00      	cmp	r3, #0
 8104708:	d10a      	bne.n	8104720 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810470a:	4b36      	ldr	r3, [pc, #216]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810470c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810470e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8104712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104718:	4a32      	ldr	r2, [pc, #200]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810471a:	430b      	orrs	r3, r1
 810471c:	64d3      	str	r3, [r2, #76]	; 0x4c
 810471e:	e003      	b.n	8104728 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104720:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104724:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8104728:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104730:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8104734:	66bb      	str	r3, [r7, #104]	; 0x68
 8104736:	2300      	movs	r3, #0
 8104738:	66fb      	str	r3, [r7, #108]	; 0x6c
 810473a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 810473e:	460b      	mov	r3, r1
 8104740:	4313      	orrs	r3, r2
 8104742:	d00c      	beq.n	810475e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104748:	3328      	adds	r3, #40	; 0x28
 810474a:	2102      	movs	r1, #2
 810474c:	4618      	mov	r0, r3
 810474e:	f001 fbf7 	bl	8105f40 <RCCEx_PLL3_Config>
 8104752:	4603      	mov	r3, r0
 8104754:	2b00      	cmp	r3, #0
 8104756:	d002      	beq.n	810475e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8104758:	2301      	movs	r3, #1
 810475a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810475e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104766:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 810476a:	663b      	str	r3, [r7, #96]	; 0x60
 810476c:	2300      	movs	r3, #0
 810476e:	667b      	str	r3, [r7, #100]	; 0x64
 8104770:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8104774:	460b      	mov	r3, r1
 8104776:	4313      	orrs	r3, r2
 8104778:	d03a      	beq.n	81047f0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 810477a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104782:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104786:	d018      	beq.n	81047ba <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8104788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810478c:	d811      	bhi.n	81047b2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104792:	d014      	beq.n	81047be <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8104794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104798:	d80b      	bhi.n	81047b2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 810479a:	2b00      	cmp	r3, #0
 810479c:	d011      	beq.n	81047c2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 810479e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81047a2:	d106      	bne.n	81047b2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047a4:	4b0f      	ldr	r3, [pc, #60]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047a8:	4a0e      	ldr	r2, [pc, #56]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81047aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81047ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 81047b0:	e008      	b.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047b2:	2301      	movs	r3, #1
 81047b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 81047b8:	e004      	b.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81047ba:	bf00      	nop
 81047bc:	e002      	b.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81047be:	bf00      	nop
 81047c0:	e000      	b.n	81047c4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 81047c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81047c8:	2b00      	cmp	r3, #0
 81047ca:	d10d      	bne.n	81047e8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 81047cc:	4b05      	ldr	r3, [pc, #20]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81047d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81047d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81047d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047dc:	4a01      	ldr	r2, [pc, #4]	; (81047e4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81047de:	430b      	orrs	r3, r1
 81047e0:	6553      	str	r3, [r2, #84]	; 0x54
 81047e2:	e005      	b.n	81047f0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 81047e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81047ec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81047f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81047f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 81047fc:	65bb      	str	r3, [r7, #88]	; 0x58
 81047fe:	2300      	movs	r3, #0
 8104800:	65fb      	str	r3, [r7, #92]	; 0x5c
 8104802:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8104806:	460b      	mov	r3, r1
 8104808:	4313      	orrs	r3, r2
 810480a:	d009      	beq.n	8104820 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810480c:	4baa      	ldr	r3, [pc, #680]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810480e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104810:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104814:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810481a:	4aa7      	ldr	r2, [pc, #668]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810481c:	430b      	orrs	r3, r1
 810481e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104828:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 810482c:	653b      	str	r3, [r7, #80]	; 0x50
 810482e:	2300      	movs	r3, #0
 8104830:	657b      	str	r3, [r7, #84]	; 0x54
 8104832:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8104836:	460b      	mov	r3, r1
 8104838:	4313      	orrs	r3, r2
 810483a:	d00a      	beq.n	8104852 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810483c:	4b9e      	ldr	r3, [pc, #632]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810483e:	691b      	ldr	r3, [r3, #16]
 8104840:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8104844:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104848:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810484c:	4a9a      	ldr	r2, [pc, #616]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810484e:	430b      	orrs	r3, r1
 8104850:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104852:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104856:	e9d3 2300 	ldrd	r2, r3, [r3]
 810485a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810485e:	64bb      	str	r3, [r7, #72]	; 0x48
 8104860:	2300      	movs	r3, #0
 8104862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8104864:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8104868:	460b      	mov	r3, r1
 810486a:	4313      	orrs	r3, r2
 810486c:	d009      	beq.n	8104882 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810486e:	4b92      	ldr	r3, [pc, #584]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8104870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104872:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8104876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810487c:	4a8e      	ldr	r2, [pc, #568]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810487e:	430b      	orrs	r3, r1
 8104880:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104882:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104886:	e9d3 2300 	ldrd	r2, r3, [r3]
 810488a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 810488e:	643b      	str	r3, [r7, #64]	; 0x40
 8104890:	2300      	movs	r3, #0
 8104892:	647b      	str	r3, [r7, #68]	; 0x44
 8104894:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8104898:	460b      	mov	r3, r1
 810489a:	4313      	orrs	r3, r2
 810489c:	d00e      	beq.n	81048bc <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810489e:	4b86      	ldr	r3, [pc, #536]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81048a0:	691b      	ldr	r3, [r3, #16]
 81048a2:	4a85      	ldr	r2, [pc, #532]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81048a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81048a8:	6113      	str	r3, [r2, #16]
 81048aa:	4b83      	ldr	r3, [pc, #524]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81048ac:	6919      	ldr	r1, [r3, #16]
 81048ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81048b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 81048b6:	4a80      	ldr	r2, [pc, #512]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81048b8:	430b      	orrs	r3, r1
 81048ba:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81048bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81048c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048c4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 81048c8:	63bb      	str	r3, [r7, #56]	; 0x38
 81048ca:	2300      	movs	r3, #0
 81048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81048ce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 81048d2:	460b      	mov	r3, r1
 81048d4:	4313      	orrs	r3, r2
 81048d6:	d009      	beq.n	81048ec <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81048d8:	4b77      	ldr	r3, [pc, #476]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81048da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81048dc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81048e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81048e6:	4a74      	ldr	r2, [pc, #464]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81048e8:	430b      	orrs	r3, r1
 81048ea:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81048ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 81048f8:	633b      	str	r3, [r7, #48]	; 0x30
 81048fa:	2300      	movs	r3, #0
 81048fc:	637b      	str	r3, [r7, #52]	; 0x34
 81048fe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8104902:	460b      	mov	r3, r1
 8104904:	4313      	orrs	r3, r2
 8104906:	d00a      	beq.n	810491e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104908:	4b6b      	ldr	r3, [pc, #428]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810490c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8104910:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104918:	4a67      	ldr	r2, [pc, #412]	; (8104ab8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810491a:	430b      	orrs	r3, r1
 810491c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 810491e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104926:	2100      	movs	r1, #0
 8104928:	62b9      	str	r1, [r7, #40]	; 0x28
 810492a:	f003 0301 	and.w	r3, r3, #1
 810492e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8104930:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8104934:	460b      	mov	r3, r1
 8104936:	4313      	orrs	r3, r2
 8104938:	d011      	beq.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810493a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810493e:	3308      	adds	r3, #8
 8104940:	2100      	movs	r1, #0
 8104942:	4618      	mov	r0, r3
 8104944:	f001 fa4a 	bl	8105ddc <RCCEx_PLL2_Config>
 8104948:	4603      	mov	r3, r0
 810494a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810494e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104952:	2b00      	cmp	r3, #0
 8104954:	d003      	beq.n	810495e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104956:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810495a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810495e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104966:	2100      	movs	r1, #0
 8104968:	6239      	str	r1, [r7, #32]
 810496a:	f003 0302 	and.w	r3, r3, #2
 810496e:	627b      	str	r3, [r7, #36]	; 0x24
 8104970:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104974:	460b      	mov	r3, r1
 8104976:	4313      	orrs	r3, r2
 8104978:	d011      	beq.n	810499e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810497a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810497e:	3308      	adds	r3, #8
 8104980:	2101      	movs	r1, #1
 8104982:	4618      	mov	r0, r3
 8104984:	f001 fa2a 	bl	8105ddc <RCCEx_PLL2_Config>
 8104988:	4603      	mov	r3, r0
 810498a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 810498e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104992:	2b00      	cmp	r3, #0
 8104994:	d003      	beq.n	810499e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104996:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 810499a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810499e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049a6:	2100      	movs	r1, #0
 81049a8:	61b9      	str	r1, [r7, #24]
 81049aa:	f003 0304 	and.w	r3, r3, #4
 81049ae:	61fb      	str	r3, [r7, #28]
 81049b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 81049b4:	460b      	mov	r3, r1
 81049b6:	4313      	orrs	r3, r2
 81049b8:	d011      	beq.n	81049de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81049ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049be:	3308      	adds	r3, #8
 81049c0:	2102      	movs	r1, #2
 81049c2:	4618      	mov	r0, r3
 81049c4:	f001 fa0a 	bl	8105ddc <RCCEx_PLL2_Config>
 81049c8:	4603      	mov	r3, r0
 81049ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 81049ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81049d2:	2b00      	cmp	r3, #0
 81049d4:	d003      	beq.n	81049de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 81049da:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 81049de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049e6:	2100      	movs	r1, #0
 81049e8:	6139      	str	r1, [r7, #16]
 81049ea:	f003 0308 	and.w	r3, r3, #8
 81049ee:	617b      	str	r3, [r7, #20]
 81049f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81049f4:	460b      	mov	r3, r1
 81049f6:	4313      	orrs	r3, r2
 81049f8:	d011      	beq.n	8104a1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81049fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81049fe:	3328      	adds	r3, #40	; 0x28
 8104a00:	2100      	movs	r1, #0
 8104a02:	4618      	mov	r0, r3
 8104a04:	f001 fa9c 	bl	8105f40 <RCCEx_PLL3_Config>
 8104a08:	4603      	mov	r3, r0
 8104a0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8104a0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104a12:	2b00      	cmp	r3, #0
 8104a14:	d003      	beq.n	8104a1e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104a1a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a26:	2100      	movs	r1, #0
 8104a28:	60b9      	str	r1, [r7, #8]
 8104a2a:	f003 0310 	and.w	r3, r3, #16
 8104a2e:	60fb      	str	r3, [r7, #12]
 8104a30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104a34:	460b      	mov	r3, r1
 8104a36:	4313      	orrs	r3, r2
 8104a38:	d011      	beq.n	8104a5e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a3e:	3328      	adds	r3, #40	; 0x28
 8104a40:	2101      	movs	r1, #1
 8104a42:	4618      	mov	r0, r3
 8104a44:	f001 fa7c 	bl	8105f40 <RCCEx_PLL3_Config>
 8104a48:	4603      	mov	r3, r0
 8104a4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104a4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104a52:	2b00      	cmp	r3, #0
 8104a54:	d003      	beq.n	8104a5e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a56:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104a5a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a66:	2100      	movs	r1, #0
 8104a68:	6039      	str	r1, [r7, #0]
 8104a6a:	f003 0320 	and.w	r3, r3, #32
 8104a6e:	607b      	str	r3, [r7, #4]
 8104a70:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104a74:	460b      	mov	r3, r1
 8104a76:	4313      	orrs	r3, r2
 8104a78:	d011      	beq.n	8104a9e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8104a7e:	3328      	adds	r3, #40	; 0x28
 8104a80:	2102      	movs	r1, #2
 8104a82:	4618      	mov	r0, r3
 8104a84:	f001 fa5c 	bl	8105f40 <RCCEx_PLL3_Config>
 8104a88:	4603      	mov	r3, r0
 8104a8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8104a8e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104a92:	2b00      	cmp	r3, #0
 8104a94:	d003      	beq.n	8104a9e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a96:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8104a9a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8104a9e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8104aa2:	2b00      	cmp	r3, #0
 8104aa4:	d101      	bne.n	8104aaa <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8104aa6:	2300      	movs	r3, #0
 8104aa8:	e000      	b.n	8104aac <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8104aaa:	2301      	movs	r3, #1
}
 8104aac:	4618      	mov	r0, r3
 8104aae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8104ab2:	46bd      	mov	sp, r7
 8104ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104ab8:	58024400 	.word	0x58024400

08104abc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8104abc:	b580      	push	{r7, lr}
 8104abe:	b090      	sub	sp, #64	; 0x40
 8104ac0:	af00      	add	r7, sp, #0
 8104ac2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104ac6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104aca:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8104ace:	430b      	orrs	r3, r1
 8104ad0:	f040 8094 	bne.w	8104bfc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8104ad4:	4b9e      	ldr	r3, [pc, #632]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ad8:	f003 0307 	and.w	r3, r3, #7
 8104adc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ae0:	2b04      	cmp	r3, #4
 8104ae2:	f200 8087 	bhi.w	8104bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8104ae6:	a201      	add	r2, pc, #4	; (adr r2, 8104aec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8104ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104aec:	08104b01 	.word	0x08104b01
 8104af0:	08104b29 	.word	0x08104b29
 8104af4:	08104b51 	.word	0x08104b51
 8104af8:	08104bed 	.word	0x08104bed
 8104afc:	08104b79 	.word	0x08104b79
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104b00:	4b93      	ldr	r3, [pc, #588]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b0c:	d108      	bne.n	8104b20 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104b12:	4618      	mov	r0, r3
 8104b14:	f001 f810 	bl	8105b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b1c:	f000 bd45 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b20:	2300      	movs	r3, #0
 8104b22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b24:	f000 bd41 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104b28:	4b89      	ldr	r3, [pc, #548]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b2a:	681b      	ldr	r3, [r3, #0]
 8104b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104b34:	d108      	bne.n	8104b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104b36:	f107 0318 	add.w	r3, r7, #24
 8104b3a:	4618      	mov	r0, r3
 8104b3c:	f000 fd54 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104b40:	69bb      	ldr	r3, [r7, #24]
 8104b42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b44:	f000 bd31 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b48:	2300      	movs	r3, #0
 8104b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b4c:	f000 bd2d 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104b50:	4b7f      	ldr	r3, [pc, #508]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104b5c:	d108      	bne.n	8104b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104b5e:	f107 030c 	add.w	r3, r7, #12
 8104b62:	4618      	mov	r0, r3
 8104b64:	f000 fe94 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104b68:	68fb      	ldr	r3, [r7, #12]
 8104b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104b6c:	f000 bd1d 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104b70:	2300      	movs	r3, #0
 8104b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104b74:	f000 bd19 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104b78:	4b75      	ldr	r3, [pc, #468]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104b7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104b80:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104b82:	4b73      	ldr	r3, [pc, #460]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b84:	681b      	ldr	r3, [r3, #0]
 8104b86:	f003 0304 	and.w	r3, r3, #4
 8104b8a:	2b04      	cmp	r3, #4
 8104b8c:	d10c      	bne.n	8104ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8104b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104b90:	2b00      	cmp	r3, #0
 8104b92:	d109      	bne.n	8104ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104b94:	4b6e      	ldr	r3, [pc, #440]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104b96:	681b      	ldr	r3, [r3, #0]
 8104b98:	08db      	lsrs	r3, r3, #3
 8104b9a:	f003 0303 	and.w	r3, r3, #3
 8104b9e:	4a6d      	ldr	r2, [pc, #436]	; (8104d54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8104ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ba6:	e01f      	b.n	8104be8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104ba8:	4b69      	ldr	r3, [pc, #420]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104baa:	681b      	ldr	r3, [r3, #0]
 8104bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104bb4:	d106      	bne.n	8104bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8104bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104bb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104bbc:	d102      	bne.n	8104bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104bbe:	4b66      	ldr	r3, [pc, #408]	; (8104d58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104bc2:	e011      	b.n	8104be8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104bc4:	4b62      	ldr	r3, [pc, #392]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104bc6:	681b      	ldr	r3, [r3, #0]
 8104bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104bcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104bd0:	d106      	bne.n	8104be0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8104bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104bd8:	d102      	bne.n	8104be0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104bda:	4b60      	ldr	r3, [pc, #384]	; (8104d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104bde:	e003      	b.n	8104be8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104be0:	2300      	movs	r3, #0
 8104be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104be4:	f000 bce1 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104be8:	f000 bcdf 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104bec:	4b5c      	ldr	r3, [pc, #368]	; (8104d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104bf0:	f000 bcdb 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104bf4:	2300      	movs	r3, #0
 8104bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104bf8:	f000 bcd7 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104c00:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8104c04:	430b      	orrs	r3, r1
 8104c06:	f040 80ad 	bne.w	8104d64 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8104c0a:	4b51      	ldr	r3, [pc, #324]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c0e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8104c12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c1a:	d056      	beq.n	8104cca <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8104c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c22:	f200 8090 	bhi.w	8104d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c28:	2bc0      	cmp	r3, #192	; 0xc0
 8104c2a:	f000 8088 	beq.w	8104d3e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8104c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c30:	2bc0      	cmp	r3, #192	; 0xc0
 8104c32:	f200 8088 	bhi.w	8104d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c38:	2b80      	cmp	r3, #128	; 0x80
 8104c3a:	d032      	beq.n	8104ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8104c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c3e:	2b80      	cmp	r3, #128	; 0x80
 8104c40:	f200 8081 	bhi.w	8104d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8104c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c46:	2b00      	cmp	r3, #0
 8104c48:	d003      	beq.n	8104c52 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8104c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c4c:	2b40      	cmp	r3, #64	; 0x40
 8104c4e:	d014      	beq.n	8104c7a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8104c50:	e079      	b.n	8104d46 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104c52:	4b3f      	ldr	r3, [pc, #252]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c54:	681b      	ldr	r3, [r3, #0]
 8104c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104c5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104c5e:	d108      	bne.n	8104c72 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104c64:	4618      	mov	r0, r3
 8104c66:	f000 ff67 	bl	8105b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c6e:	f000 bc9c 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c72:	2300      	movs	r3, #0
 8104c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c76:	f000 bc98 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104c7a:	4b35      	ldr	r3, [pc, #212]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104c7c:	681b      	ldr	r3, [r3, #0]
 8104c7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104c86:	d108      	bne.n	8104c9a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104c88:	f107 0318 	add.w	r3, r7, #24
 8104c8c:	4618      	mov	r0, r3
 8104c8e:	f000 fcab 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104c92:	69bb      	ldr	r3, [r7, #24]
 8104c94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104c96:	f000 bc88 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104c9a:	2300      	movs	r3, #0
 8104c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104c9e:	f000 bc84 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104ca2:	4b2b      	ldr	r3, [pc, #172]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ca4:	681b      	ldr	r3, [r3, #0]
 8104ca6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104caa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104cae:	d108      	bne.n	8104cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104cb0:	f107 030c 	add.w	r3, r7, #12
 8104cb4:	4618      	mov	r0, r3
 8104cb6:	f000 fdeb 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104cba:	68fb      	ldr	r3, [r7, #12]
 8104cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104cbe:	f000 bc74 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104cc2:	2300      	movs	r3, #0
 8104cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104cc6:	f000 bc70 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104cca:	4b21      	ldr	r3, [pc, #132]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104cce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104cd2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104cd4:	4b1e      	ldr	r3, [pc, #120]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	f003 0304 	and.w	r3, r3, #4
 8104cdc:	2b04      	cmp	r3, #4
 8104cde:	d10c      	bne.n	8104cfa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8104ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ce2:	2b00      	cmp	r3, #0
 8104ce4:	d109      	bne.n	8104cfa <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104ce6:	4b1a      	ldr	r3, [pc, #104]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104ce8:	681b      	ldr	r3, [r3, #0]
 8104cea:	08db      	lsrs	r3, r3, #3
 8104cec:	f003 0303 	and.w	r3, r3, #3
 8104cf0:	4a18      	ldr	r2, [pc, #96]	; (8104d54 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8104cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8104cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104cf8:	e01f      	b.n	8104d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104cfa:	4b15      	ldr	r3, [pc, #84]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d06:	d106      	bne.n	8104d16 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8104d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104d0e:	d102      	bne.n	8104d16 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104d10:	4b11      	ldr	r3, [pc, #68]	; (8104d58 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8104d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d14:	e011      	b.n	8104d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104d16:	4b0e      	ldr	r3, [pc, #56]	; (8104d50 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8104d18:	681b      	ldr	r3, [r3, #0]
 8104d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d22:	d106      	bne.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8104d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104d2a:	d102      	bne.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104d2c:	4b0b      	ldr	r3, [pc, #44]	; (8104d5c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8104d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d30:	e003      	b.n	8104d3a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104d32:	2300      	movs	r3, #0
 8104d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104d36:	f000 bc38 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104d3a:	f000 bc36 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104d3e:	4b08      	ldr	r3, [pc, #32]	; (8104d60 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8104d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d42:	f000 bc32 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8104d46:	2300      	movs	r3, #0
 8104d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104d4a:	f000 bc2e 	b.w	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104d4e:	bf00      	nop
 8104d50:	58024400 	.word	0x58024400
 8104d54:	03d09000 	.word	0x03d09000
 8104d58:	003d0900 	.word	0x003d0900
 8104d5c:	017d7840 	.word	0x017d7840
 8104d60:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104d68:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8104d6c:	430b      	orrs	r3, r1
 8104d6e:	f040 809c 	bne.w	8104eaa <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8104d72:	4b9e      	ldr	r3, [pc, #632]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104d76:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8104d7a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104d7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104d82:	d054      	beq.n	8104e2e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8104d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104d8a:	f200 808b 	bhi.w	8104ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104d90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104d94:	f000 8083 	beq.w	8104e9e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8104d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104d9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104d9e:	f200 8081 	bhi.w	8104ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104da4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104da8:	d02f      	beq.n	8104e0a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8104daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104db0:	d878      	bhi.n	8104ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8104db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104db4:	2b00      	cmp	r3, #0
 8104db6:	d004      	beq.n	8104dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8104db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104dbe:	d012      	beq.n	8104de6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8104dc0:	e070      	b.n	8104ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104dc2:	4b8a      	ldr	r3, [pc, #552]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104dc4:	681b      	ldr	r3, [r3, #0]
 8104dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104dce:	d107      	bne.n	8104de0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104dd4:	4618      	mov	r0, r3
 8104dd6:	f000 feaf 	bl	8105b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104dde:	e3e4      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104de0:	2300      	movs	r3, #0
 8104de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104de4:	e3e1      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104de6:	4b81      	ldr	r3, [pc, #516]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104de8:	681b      	ldr	r3, [r3, #0]
 8104dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104df2:	d107      	bne.n	8104e04 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104df4:	f107 0318 	add.w	r3, r7, #24
 8104df8:	4618      	mov	r0, r3
 8104dfa:	f000 fbf5 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104dfe:	69bb      	ldr	r3, [r7, #24]
 8104e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e02:	e3d2      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e04:	2300      	movs	r3, #0
 8104e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e08:	e3cf      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104e0a:	4b78      	ldr	r3, [pc, #480]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e0c:	681b      	ldr	r3, [r3, #0]
 8104e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e16:	d107      	bne.n	8104e28 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e18:	f107 030c 	add.w	r3, r7, #12
 8104e1c:	4618      	mov	r0, r3
 8104e1e:	f000 fd37 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104e22:	68fb      	ldr	r3, [r7, #12]
 8104e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104e26:	e3c0      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104e28:	2300      	movs	r3, #0
 8104e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e2c:	e3bd      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104e2e:	4b6f      	ldr	r3, [pc, #444]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104e36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104e38:	4b6c      	ldr	r3, [pc, #432]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	f003 0304 	and.w	r3, r3, #4
 8104e40:	2b04      	cmp	r3, #4
 8104e42:	d10c      	bne.n	8104e5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8104e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e46:	2b00      	cmp	r3, #0
 8104e48:	d109      	bne.n	8104e5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104e4a:	4b68      	ldr	r3, [pc, #416]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e4c:	681b      	ldr	r3, [r3, #0]
 8104e4e:	08db      	lsrs	r3, r3, #3
 8104e50:	f003 0303 	and.w	r3, r3, #3
 8104e54:	4a66      	ldr	r2, [pc, #408]	; (8104ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104e56:	fa22 f303 	lsr.w	r3, r2, r3
 8104e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104e5c:	e01e      	b.n	8104e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104e5e:	4b63      	ldr	r3, [pc, #396]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e6a:	d106      	bne.n	8104e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8104e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104e72:	d102      	bne.n	8104e7a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104e74:	4b5f      	ldr	r3, [pc, #380]	; (8104ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104e78:	e010      	b.n	8104e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104e7a:	4b5c      	ldr	r3, [pc, #368]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104e86:	d106      	bne.n	8104e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8104e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e8e:	d102      	bne.n	8104e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104e90:	4b59      	ldr	r3, [pc, #356]	; (8104ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104e94:	e002      	b.n	8104e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104e96:	2300      	movs	r3, #0
 8104e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104e9a:	e386      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104e9c:	e385      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104e9e:	4b57      	ldr	r3, [pc, #348]	; (8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104ea2:	e382      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8104ea4:	2300      	movs	r3, #0
 8104ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104ea8:	e37f      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104eae:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8104eb2:	430b      	orrs	r3, r1
 8104eb4:	f040 80a7 	bne.w	8105006 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8104eb8:	4b4c      	ldr	r3, [pc, #304]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ebc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104ec0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8104ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104ec8:	d055      	beq.n	8104f76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8104eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104ed0:	f200 8096 	bhi.w	8105000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ed6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104eda:	f000 8084 	beq.w	8104fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8104ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ee0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ee4:	f200 808c 	bhi.w	8105000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104eea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104eee:	d030      	beq.n	8104f52 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8104ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ef2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104ef6:	f200 8083 	bhi.w	8105000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8104efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104efc:	2b00      	cmp	r3, #0
 8104efe:	d004      	beq.n	8104f0a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8104f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104f06:	d012      	beq.n	8104f2e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8104f08:	e07a      	b.n	8105000 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104f0a:	4b38      	ldr	r3, [pc, #224]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f0c:	681b      	ldr	r3, [r3, #0]
 8104f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f16:	d107      	bne.n	8104f28 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104f1c:	4618      	mov	r0, r3
 8104f1e:	f000 fe0b 	bl	8105b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f26:	e340      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f28:	2300      	movs	r3, #0
 8104f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f2c:	e33d      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104f2e:	4b2f      	ldr	r3, [pc, #188]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f30:	681b      	ldr	r3, [r3, #0]
 8104f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104f3a:	d107      	bne.n	8104f4c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f3c:	f107 0318 	add.w	r3, r7, #24
 8104f40:	4618      	mov	r0, r3
 8104f42:	f000 fb51 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104f46:	69bb      	ldr	r3, [r7, #24]
 8104f48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f4a:	e32e      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f4c:	2300      	movs	r3, #0
 8104f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f50:	e32b      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104f52:	4b26      	ldr	r3, [pc, #152]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f54:	681b      	ldr	r3, [r3, #0]
 8104f56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104f5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104f5e:	d107      	bne.n	8104f70 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104f60:	f107 030c 	add.w	r3, r7, #12
 8104f64:	4618      	mov	r0, r3
 8104f66:	f000 fc93 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104f6a:	68fb      	ldr	r3, [r7, #12]
 8104f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8104f6e:	e31c      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8104f70:	2300      	movs	r3, #0
 8104f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104f74:	e319      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8104f76:	4b1d      	ldr	r3, [pc, #116]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104f7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104f7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104f80:	4b1a      	ldr	r3, [pc, #104]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f82:	681b      	ldr	r3, [r3, #0]
 8104f84:	f003 0304 	and.w	r3, r3, #4
 8104f88:	2b04      	cmp	r3, #4
 8104f8a:	d10c      	bne.n	8104fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8104f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104f8e:	2b00      	cmp	r3, #0
 8104f90:	d109      	bne.n	8104fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104f92:	4b16      	ldr	r3, [pc, #88]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104f94:	681b      	ldr	r3, [r3, #0]
 8104f96:	08db      	lsrs	r3, r3, #3
 8104f98:	f003 0303 	and.w	r3, r3, #3
 8104f9c:	4a14      	ldr	r2, [pc, #80]	; (8104ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8104f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8104fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104fa4:	e01e      	b.n	8104fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104fa6:	4b11      	ldr	r3, [pc, #68]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104fa8:	681b      	ldr	r3, [r3, #0]
 8104faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fb2:	d106      	bne.n	8104fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8104fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104fba:	d102      	bne.n	8104fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8104fbc:	4b0d      	ldr	r3, [pc, #52]	; (8104ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8104fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104fc0:	e010      	b.n	8104fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104fc2:	4b0a      	ldr	r3, [pc, #40]	; (8104fec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104fce:	d106      	bne.n	8104fde <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8104fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104fd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fd6:	d102      	bne.n	8104fde <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8104fd8:	4b07      	ldr	r3, [pc, #28]	; (8104ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8104fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104fdc:	e002      	b.n	8104fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8104fde:	2300      	movs	r3, #0
 8104fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8104fe2:	e2e2      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104fe4:	e2e1      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8104fe6:	4b05      	ldr	r3, [pc, #20]	; (8104ffc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8104fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104fea:	e2de      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8104fec:	58024400 	.word	0x58024400
 8104ff0:	03d09000 	.word	0x03d09000
 8104ff4:	003d0900 	.word	0x003d0900
 8104ff8:	017d7840 	.word	0x017d7840
 8104ffc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8105000:	2300      	movs	r3, #0
 8105002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105004:	e2d1      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8105006:	e9d7 2300 	ldrd	r2, r3, [r7]
 810500a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 810500e:	430b      	orrs	r3, r1
 8105010:	f040 809c 	bne.w	810514c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8105014:	4b93      	ldr	r3, [pc, #588]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105018:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 810501c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105020:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105024:	d054      	beq.n	81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8105026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810502c:	f200 808b 	bhi.w	8105146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105032:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105036:	f000 8083 	beq.w	8105140 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 810503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810503c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105040:	f200 8081 	bhi.w	8105146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810504a:	d02f      	beq.n	81050ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 810504c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810504e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105052:	d878      	bhi.n	8105146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8105054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105056:	2b00      	cmp	r3, #0
 8105058:	d004      	beq.n	8105064 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 810505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810505c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105060:	d012      	beq.n	8105088 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8105062:	e070      	b.n	8105146 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105064:	4b7f      	ldr	r3, [pc, #508]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105066:	681b      	ldr	r3, [r3, #0]
 8105068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810506c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105070:	d107      	bne.n	8105082 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105076:	4618      	mov	r0, r3
 8105078:	f000 fd5e 	bl	8105b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 810507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810507e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105080:	e293      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105082:	2300      	movs	r3, #0
 8105084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105086:	e290      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105088:	4b76      	ldr	r3, [pc, #472]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105090:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105094:	d107      	bne.n	81050a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105096:	f107 0318 	add.w	r3, r7, #24
 810509a:	4618      	mov	r0, r3
 810509c:	f000 faa4 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81050a0:	69bb      	ldr	r3, [r7, #24]
 81050a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81050a4:	e281      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81050a6:	2300      	movs	r3, #0
 81050a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050aa:	e27e      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81050ac:	4b6d      	ldr	r3, [pc, #436]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81050ae:	681b      	ldr	r3, [r3, #0]
 81050b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81050b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81050b8:	d107      	bne.n	81050ca <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81050ba:	f107 030c 	add.w	r3, r7, #12
 81050be:	4618      	mov	r0, r3
 81050c0:	f000 fbe6 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81050c4:	68fb      	ldr	r3, [r7, #12]
 81050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81050c8:	e26f      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81050ca:	2300      	movs	r3, #0
 81050cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81050ce:	e26c      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81050d0:	4b64      	ldr	r3, [pc, #400]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81050d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81050d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81050da:	4b62      	ldr	r3, [pc, #392]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81050dc:	681b      	ldr	r3, [r3, #0]
 81050de:	f003 0304 	and.w	r3, r3, #4
 81050e2:	2b04      	cmp	r3, #4
 81050e4:	d10c      	bne.n	8105100 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81050e8:	2b00      	cmp	r3, #0
 81050ea:	d109      	bne.n	8105100 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81050ec:	4b5d      	ldr	r3, [pc, #372]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81050ee:	681b      	ldr	r3, [r3, #0]
 81050f0:	08db      	lsrs	r3, r3, #3
 81050f2:	f003 0303 	and.w	r3, r3, #3
 81050f6:	4a5c      	ldr	r2, [pc, #368]	; (8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81050f8:	fa22 f303 	lsr.w	r3, r2, r3
 81050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81050fe:	e01e      	b.n	810513e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105100:	4b58      	ldr	r3, [pc, #352]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105102:	681b      	ldr	r3, [r3, #0]
 8105104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810510c:	d106      	bne.n	810511c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 810510e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105114:	d102      	bne.n	810511c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8105116:	4b55      	ldr	r3, [pc, #340]	; (810526c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8105118:	63fb      	str	r3, [r7, #60]	; 0x3c
 810511a:	e010      	b.n	810513e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810511c:	4b51      	ldr	r3, [pc, #324]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810511e:	681b      	ldr	r3, [r3, #0]
 8105120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105128:	d106      	bne.n	8105138 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 810512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810512c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105130:	d102      	bne.n	8105138 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105132:	4b4f      	ldr	r3, [pc, #316]	; (8105270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105136:	e002      	b.n	810513e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8105138:	2300      	movs	r3, #0
 810513a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 810513c:	e235      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810513e:	e234      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8105140:	4b4c      	ldr	r3, [pc, #304]	; (8105274 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8105142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105144:	e231      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8105146:	2300      	movs	r3, #0
 8105148:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810514a:	e22e      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 810514c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105150:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8105154:	430b      	orrs	r3, r1
 8105156:	f040 808f 	bne.w	8105278 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 810515a:	4b42      	ldr	r3, [pc, #264]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810515e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8105162:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8105164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105166:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810516a:	d06b      	beq.n	8105244 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 810516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810516e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105172:	d874      	bhi.n	810525e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105176:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810517a:	d056      	beq.n	810522a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 810517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810517e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105182:	d86c      	bhi.n	810525e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105186:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810518a:	d03b      	beq.n	8105204 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 810518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810518e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105192:	d864      	bhi.n	810525e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8105194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105196:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810519a:	d021      	beq.n	81051e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810519e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81051a2:	d85c      	bhi.n	810525e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 81051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051a6:	2b00      	cmp	r3, #0
 81051a8:	d004      	beq.n	81051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 81051aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81051b0:	d004      	beq.n	81051bc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 81051b2:	e054      	b.n	810525e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 81051b4:	f7fe fa22 	bl	81035fc <HAL_RCC_GetPCLK1Freq>
 81051b8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81051ba:	e1f6      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81051bc:	4b29      	ldr	r3, [pc, #164]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81051be:	681b      	ldr	r3, [r3, #0]
 81051c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81051c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81051c8:	d107      	bne.n	81051da <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81051ca:	f107 0318 	add.w	r3, r7, #24
 81051ce:	4618      	mov	r0, r3
 81051d0:	f000 fa0a 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81051d4:	69fb      	ldr	r3, [r7, #28]
 81051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051d8:	e1e7      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051da:	2300      	movs	r3, #0
 81051dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81051de:	e1e4      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81051e0:	4b20      	ldr	r3, [pc, #128]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81051e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81051ec:	d107      	bne.n	81051fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81051ee:	f107 030c 	add.w	r3, r7, #12
 81051f2:	4618      	mov	r0, r3
 81051f4:	f000 fb4c 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81051f8:	693b      	ldr	r3, [r7, #16]
 81051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81051fc:	e1d5      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81051fe:	2300      	movs	r3, #0
 8105200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105202:	e1d2      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105204:	4b17      	ldr	r3, [pc, #92]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105206:	681b      	ldr	r3, [r3, #0]
 8105208:	f003 0304 	and.w	r3, r3, #4
 810520c:	2b04      	cmp	r3, #4
 810520e:	d109      	bne.n	8105224 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105210:	4b14      	ldr	r3, [pc, #80]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105212:	681b      	ldr	r3, [r3, #0]
 8105214:	08db      	lsrs	r3, r3, #3
 8105216:	f003 0303 	and.w	r3, r3, #3
 810521a:	4a13      	ldr	r2, [pc, #76]	; (8105268 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 810521c:	fa22 f303 	lsr.w	r3, r2, r3
 8105220:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105222:	e1c2      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105224:	2300      	movs	r3, #0
 8105226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105228:	e1bf      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 810522a:	4b0e      	ldr	r3, [pc, #56]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810522c:	681b      	ldr	r3, [r3, #0]
 810522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105236:	d102      	bne.n	810523e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8105238:	4b0c      	ldr	r3, [pc, #48]	; (810526c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 810523a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810523c:	e1b5      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810523e:	2300      	movs	r3, #0
 8105240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105242:	e1b2      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105244:	4b07      	ldr	r3, [pc, #28]	; (8105264 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8105246:	681b      	ldr	r3, [r3, #0]
 8105248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810524c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105250:	d102      	bne.n	8105258 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8105252:	4b07      	ldr	r3, [pc, #28]	; (8105270 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8105254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105256:	e1a8      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105258:	2300      	movs	r3, #0
 810525a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810525c:	e1a5      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810525e:	2300      	movs	r3, #0
 8105260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105262:	e1a2      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105264:	58024400 	.word	0x58024400
 8105268:	03d09000 	.word	0x03d09000
 810526c:	003d0900 	.word	0x003d0900
 8105270:	017d7840 	.word	0x017d7840
 8105274:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8105278:	e9d7 2300 	ldrd	r2, r3, [r7]
 810527c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8105280:	430b      	orrs	r3, r1
 8105282:	d173      	bne.n	810536c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8105284:	4b9c      	ldr	r3, [pc, #624]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810528c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810528e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105294:	d02f      	beq.n	81052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8105296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810529c:	d863      	bhi.n	8105366 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81052a0:	2b00      	cmp	r3, #0
 81052a2:	d004      	beq.n	81052ae <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 81052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81052a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81052aa:	d012      	beq.n	81052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 81052ac:	e05b      	b.n	8105366 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81052ae:	4b92      	ldr	r3, [pc, #584]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81052b0:	681b      	ldr	r3, [r3, #0]
 81052b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81052b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81052ba:	d107      	bne.n	81052cc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052bc:	f107 0318 	add.w	r3, r7, #24
 81052c0:	4618      	mov	r0, r3
 81052c2:	f000 f991 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81052c6:	69bb      	ldr	r3, [r7, #24]
 81052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052ca:	e16e      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052cc:	2300      	movs	r3, #0
 81052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052d0:	e16b      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81052d2:	4b89      	ldr	r3, [pc, #548]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81052d4:	681b      	ldr	r3, [r3, #0]
 81052d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81052da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81052de:	d107      	bne.n	81052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81052e0:	f107 030c 	add.w	r3, r7, #12
 81052e4:	4618      	mov	r0, r3
 81052e6:	f000 fad3 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81052ea:	697b      	ldr	r3, [r7, #20]
 81052ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81052ee:	e15c      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81052f0:	2300      	movs	r3, #0
 81052f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81052f4:	e159      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81052f6:	4b80      	ldr	r3, [pc, #512]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81052fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 81052fe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105300:	4b7d      	ldr	r3, [pc, #500]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105302:	681b      	ldr	r3, [r3, #0]
 8105304:	f003 0304 	and.w	r3, r3, #4
 8105308:	2b04      	cmp	r3, #4
 810530a:	d10c      	bne.n	8105326 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 810530c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810530e:	2b00      	cmp	r3, #0
 8105310:	d109      	bne.n	8105326 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105312:	4b79      	ldr	r3, [pc, #484]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105314:	681b      	ldr	r3, [r3, #0]
 8105316:	08db      	lsrs	r3, r3, #3
 8105318:	f003 0303 	and.w	r3, r3, #3
 810531c:	4a77      	ldr	r2, [pc, #476]	; (81054fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 810531e:	fa22 f303 	lsr.w	r3, r2, r3
 8105322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105324:	e01e      	b.n	8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105326:	4b74      	ldr	r3, [pc, #464]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105328:	681b      	ldr	r3, [r3, #0]
 810532a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810532e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105332:	d106      	bne.n	8105342 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8105334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810533a:	d102      	bne.n	8105342 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810533c:	4b70      	ldr	r3, [pc, #448]	; (8105500 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 810533e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105340:	e010      	b.n	8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105342:	4b6d      	ldr	r3, [pc, #436]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810534a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810534e:	d106      	bne.n	810535e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8105350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105356:	d102      	bne.n	810535e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8105358:	4b6a      	ldr	r3, [pc, #424]	; (8105504 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 810535a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810535c:	e002      	b.n	8105364 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810535e:	2300      	movs	r3, #0
 8105360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8105362:	e122      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8105364:	e121      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8105366:	2300      	movs	r3, #0
 8105368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810536a:	e11e      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 810536c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105370:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8105374:	430b      	orrs	r3, r1
 8105376:	d133      	bne.n	81053e0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8105378:	4b5f      	ldr	r3, [pc, #380]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810537a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810537c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105380:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8105382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105384:	2b00      	cmp	r3, #0
 8105386:	d004      	beq.n	8105392 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8105388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810538a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810538e:	d012      	beq.n	81053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8105390:	e023      	b.n	81053da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105392:	4b59      	ldr	r3, [pc, #356]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810539a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810539e:	d107      	bne.n	81053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81053a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81053a4:	4618      	mov	r0, r3
 81053a6:	f000 fbc7 	bl	8105b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81053ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81053ae:	e0fc      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81053b0:	2300      	movs	r3, #0
 81053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81053b4:	e0f9      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81053b6:	4b50      	ldr	r3, [pc, #320]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81053b8:	681b      	ldr	r3, [r3, #0]
 81053ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81053be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81053c2:	d107      	bne.n	81053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81053c4:	f107 0318 	add.w	r3, r7, #24
 81053c8:	4618      	mov	r0, r3
 81053ca:	f000 f90d 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81053ce:	6a3b      	ldr	r3, [r7, #32]
 81053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81053d2:	e0ea      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81053d4:	2300      	movs	r3, #0
 81053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81053d8:	e0e7      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81053da:	2300      	movs	r3, #0
 81053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81053de:	e0e4      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 81053e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81053e4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 81053e8:	430b      	orrs	r3, r1
 81053ea:	f040 808d 	bne.w	8105508 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 81053ee:	4b42      	ldr	r3, [pc, #264]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81053f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 81053f6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 81053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81053fe:	d06b      	beq.n	81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8105400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105402:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105406:	d874      	bhi.n	81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810540a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810540e:	d056      	beq.n	81054be <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8105410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105416:	d86c      	bhi.n	81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810541a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810541e:	d03b      	beq.n	8105498 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8105420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105422:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105426:	d864      	bhi.n	81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810542a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810542e:	d021      	beq.n	8105474 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8105430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105432:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105436:	d85c      	bhi.n	81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8105438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810543a:	2b00      	cmp	r3, #0
 810543c:	d004      	beq.n	8105448 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 810543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105444:	d004      	beq.n	8105450 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8105446:	e054      	b.n	81054f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8105448:	f000 f8b8 	bl	81055bc <HAL_RCCEx_GetD3PCLK1Freq>
 810544c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 810544e:	e0ac      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105450:	4b29      	ldr	r3, [pc, #164]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105452:	681b      	ldr	r3, [r3, #0]
 8105454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 810545c:	d107      	bne.n	810546e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810545e:	f107 0318 	add.w	r3, r7, #24
 8105462:	4618      	mov	r0, r3
 8105464:	f000 f8c0 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105468:	69fb      	ldr	r3, [r7, #28]
 810546a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810546c:	e09d      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810546e:	2300      	movs	r3, #0
 8105470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105472:	e09a      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105474:	4b20      	ldr	r3, [pc, #128]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8105476:	681b      	ldr	r3, [r3, #0]
 8105478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810547c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105480:	d107      	bne.n	8105492 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105482:	f107 030c 	add.w	r3, r7, #12
 8105486:	4618      	mov	r0, r3
 8105488:	f000 fa02 	bl	8105890 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 810548c:	693b      	ldr	r3, [r7, #16]
 810548e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105490:	e08b      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105492:	2300      	movs	r3, #0
 8105494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105496:	e088      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105498:	4b17      	ldr	r3, [pc, #92]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810549a:	681b      	ldr	r3, [r3, #0]
 810549c:	f003 0304 	and.w	r3, r3, #4
 81054a0:	2b04      	cmp	r3, #4
 81054a2:	d109      	bne.n	81054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81054a4:	4b14      	ldr	r3, [pc, #80]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81054a6:	681b      	ldr	r3, [r3, #0]
 81054a8:	08db      	lsrs	r3, r3, #3
 81054aa:	f003 0303 	and.w	r3, r3, #3
 81054ae:	4a13      	ldr	r2, [pc, #76]	; (81054fc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81054b0:	fa22 f303 	lsr.w	r3, r2, r3
 81054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054b6:	e078      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054b8:	2300      	movs	r3, #0
 81054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054bc:	e075      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81054be:	4b0e      	ldr	r3, [pc, #56]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81054c0:	681b      	ldr	r3, [r3, #0]
 81054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81054c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81054ca:	d102      	bne.n	81054d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 81054cc:	4b0c      	ldr	r3, [pc, #48]	; (8105500 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054d0:	e06b      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054d2:	2300      	movs	r3, #0
 81054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054d6:	e068      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81054d8:	4b07      	ldr	r3, [pc, #28]	; (81054f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81054e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81054e4:	d102      	bne.n	81054ec <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 81054e6:	4b07      	ldr	r3, [pc, #28]	; (8105504 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81054ea:	e05e      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81054ec:	2300      	movs	r3, #0
 81054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054f0:	e05b      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 81054f2:	2300      	movs	r3, #0
 81054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81054f6:	e058      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81054f8:	58024400 	.word	0x58024400
 81054fc:	03d09000 	.word	0x03d09000
 8105500:	003d0900 	.word	0x003d0900
 8105504:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105508:	e9d7 2300 	ldrd	r2, r3, [r7]
 810550c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8105510:	430b      	orrs	r3, r1
 8105512:	d148      	bne.n	81055a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8105514:	4b27      	ldr	r3, [pc, #156]	; (81055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810551c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 810551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105524:	d02a      	beq.n	810557c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8105526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810552c:	d838      	bhi.n	81055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 810552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105530:	2b00      	cmp	r3, #0
 8105532:	d004      	beq.n	810553e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8105534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810553a:	d00d      	beq.n	8105558 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 810553c:	e030      	b.n	81055a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 810553e:	4b1d      	ldr	r3, [pc, #116]	; (81055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810554a:	d102      	bne.n	8105552 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 810554c:	4b1a      	ldr	r3, [pc, #104]	; (81055b8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 810554e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105550:	e02b      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105552:	2300      	movs	r3, #0
 8105554:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105556:	e028      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8105558:	4b16      	ldr	r3, [pc, #88]	; (81055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105564:	d107      	bne.n	8105576 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810556a:	4618      	mov	r0, r3
 810556c:	f000 fae4 	bl	8105b38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105574:	e019      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8105576:	2300      	movs	r3, #0
 8105578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810557a:	e016      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810557c:	4b0d      	ldr	r3, [pc, #52]	; (81055b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 810557e:	681b      	ldr	r3, [r3, #0]
 8105580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105588:	d107      	bne.n	810559a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810558a:	f107 0318 	add.w	r3, r7, #24
 810558e:	4618      	mov	r0, r3
 8105590:	f000 f82a 	bl	81055e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8105594:	69fb      	ldr	r3, [r7, #28]
 8105596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8105598:	e007      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810559a:	2300      	movs	r3, #0
 810559c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810559e:	e004      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81055a0:	2300      	movs	r3, #0
 81055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81055a4:	e001      	b.n	81055aa <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 81055a6:	2300      	movs	r3, #0
 81055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 81055aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81055ac:	4618      	mov	r0, r3
 81055ae:	3740      	adds	r7, #64	; 0x40
 81055b0:	46bd      	mov	sp, r7
 81055b2:	bd80      	pop	{r7, pc}
 81055b4:	58024400 	.word	0x58024400
 81055b8:	017d7840 	.word	0x017d7840

081055bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81055bc:	b580      	push	{r7, lr}
 81055be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81055c0:	f7fd ffea 	bl	8103598 <HAL_RCC_GetHCLKFreq>
 81055c4:	4602      	mov	r2, r0
 81055c6:	4b06      	ldr	r3, [pc, #24]	; (81055e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81055c8:	6a1b      	ldr	r3, [r3, #32]
 81055ca:	091b      	lsrs	r3, r3, #4
 81055cc:	f003 0307 	and.w	r3, r3, #7
 81055d0:	4904      	ldr	r1, [pc, #16]	; (81055e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81055d2:	5ccb      	ldrb	r3, [r1, r3]
 81055d4:	f003 031f 	and.w	r3, r3, #31
 81055d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81055dc:	4618      	mov	r0, r3
 81055de:	bd80      	pop	{r7, pc}
 81055e0:	58024400 	.word	0x58024400
 81055e4:	0810b568 	.word	0x0810b568

081055e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81055e8:	b480      	push	{r7}
 81055ea:	b089      	sub	sp, #36	; 0x24
 81055ec:	af00      	add	r7, sp, #0
 81055ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81055f0:	4ba1      	ldr	r3, [pc, #644]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055f4:	f003 0303 	and.w	r3, r3, #3
 81055f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81055fa:	4b9f      	ldr	r3, [pc, #636]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81055fe:	0b1b      	lsrs	r3, r3, #12
 8105600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105604:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105606:	4b9c      	ldr	r3, [pc, #624]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810560a:	091b      	lsrs	r3, r3, #4
 810560c:	f003 0301 	and.w	r3, r3, #1
 8105610:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8105612:	4b99      	ldr	r3, [pc, #612]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105616:	08db      	lsrs	r3, r3, #3
 8105618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810561c:	693a      	ldr	r2, [r7, #16]
 810561e:	fb02 f303 	mul.w	r3, r2, r3
 8105622:	ee07 3a90 	vmov	s15, r3
 8105626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810562a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810562e:	697b      	ldr	r3, [r7, #20]
 8105630:	2b00      	cmp	r3, #0
 8105632:	f000 8111 	beq.w	8105858 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105636:	69bb      	ldr	r3, [r7, #24]
 8105638:	2b02      	cmp	r3, #2
 810563a:	f000 8083 	beq.w	8105744 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810563e:	69bb      	ldr	r3, [r7, #24]
 8105640:	2b02      	cmp	r3, #2
 8105642:	f200 80a1 	bhi.w	8105788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105646:	69bb      	ldr	r3, [r7, #24]
 8105648:	2b00      	cmp	r3, #0
 810564a:	d003      	beq.n	8105654 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 810564c:	69bb      	ldr	r3, [r7, #24]
 810564e:	2b01      	cmp	r3, #1
 8105650:	d056      	beq.n	8105700 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8105652:	e099      	b.n	8105788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105654:	4b88      	ldr	r3, [pc, #544]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	f003 0320 	and.w	r3, r3, #32
 810565c:	2b00      	cmp	r3, #0
 810565e:	d02d      	beq.n	81056bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105660:	4b85      	ldr	r3, [pc, #532]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	08db      	lsrs	r3, r3, #3
 8105666:	f003 0303 	and.w	r3, r3, #3
 810566a:	4a84      	ldr	r2, [pc, #528]	; (810587c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 810566c:	fa22 f303 	lsr.w	r3, r2, r3
 8105670:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105672:	68bb      	ldr	r3, [r7, #8]
 8105674:	ee07 3a90 	vmov	s15, r3
 8105678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810567c:	697b      	ldr	r3, [r7, #20]
 810567e:	ee07 3a90 	vmov	s15, r3
 8105682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810568a:	4b7b      	ldr	r3, [pc, #492]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810568e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105692:	ee07 3a90 	vmov	s15, r3
 8105696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810569a:	ed97 6a03 	vldr	s12, [r7, #12]
 810569e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81056a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81056ba:	e087      	b.n	81057cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81056bc:	697b      	ldr	r3, [r7, #20]
 81056be:	ee07 3a90 	vmov	s15, r3
 81056c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105884 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81056ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056ce:	4b6a      	ldr	r3, [pc, #424]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81056d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056d6:	ee07 3a90 	vmov	s15, r3
 81056da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056de:	ed97 6a03 	vldr	s12, [r7, #12]
 81056e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81056e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81056fe:	e065      	b.n	81057cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105700:	697b      	ldr	r3, [r7, #20]
 8105702:	ee07 3a90 	vmov	s15, r3
 8105706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810570a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810570e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105712:	4b59      	ldr	r3, [pc, #356]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810571a:	ee07 3a90 	vmov	s15, r3
 810571e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105722:	ed97 6a03 	vldr	s12, [r7, #12]
 8105726:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810572a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810572e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810573a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810573e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105742:	e043      	b.n	81057cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105744:	697b      	ldr	r3, [r7, #20]
 8105746:	ee07 3a90 	vmov	s15, r3
 810574a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810574e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810588c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8105752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105756:	4b48      	ldr	r3, [pc, #288]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810575a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810575e:	ee07 3a90 	vmov	s15, r3
 8105762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105766:	ed97 6a03 	vldr	s12, [r7, #12]
 810576a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810576e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810577a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810577e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105786:	e021      	b.n	81057cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105788:	697b      	ldr	r3, [r7, #20]
 810578a:	ee07 3a90 	vmov	s15, r3
 810578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105792:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8105796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810579a:	4b37      	ldr	r3, [pc, #220]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810579c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810579e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057a2:	ee07 3a90 	vmov	s15, r3
 81057a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81057ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81057b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81057be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81057ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 81057cc:	4b2a      	ldr	r3, [pc, #168]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81057d0:	0a5b      	lsrs	r3, r3, #9
 81057d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81057d6:	ee07 3a90 	vmov	s15, r3
 81057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81057e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81057e6:	edd7 6a07 	vldr	s13, [r7, #28]
 81057ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81057ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81057f2:	ee17 2a90 	vmov	r2, s15
 81057f6:	687b      	ldr	r3, [r7, #4]
 81057f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81057fa:	4b1f      	ldr	r3, [pc, #124]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81057fe:	0c1b      	lsrs	r3, r3, #16
 8105800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105804:	ee07 3a90 	vmov	s15, r3
 8105808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810580c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105814:	edd7 6a07 	vldr	s13, [r7, #28]
 8105818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810581c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105820:	ee17 2a90 	vmov	r2, s15
 8105824:	687b      	ldr	r3, [r7, #4]
 8105826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8105828:	4b13      	ldr	r3, [pc, #76]	; (8105878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810582a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810582c:	0e1b      	lsrs	r3, r3, #24
 810582e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105832:	ee07 3a90 	vmov	s15, r3
 8105836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810583a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810583e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105842:	edd7 6a07 	vldr	s13, [r7, #28]
 8105846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810584a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810584e:	ee17 2a90 	vmov	r2, s15
 8105852:	687b      	ldr	r3, [r7, #4]
 8105854:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105856:	e008      	b.n	810586a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105858:	687b      	ldr	r3, [r7, #4]
 810585a:	2200      	movs	r2, #0
 810585c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810585e:	687b      	ldr	r3, [r7, #4]
 8105860:	2200      	movs	r2, #0
 8105862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105864:	687b      	ldr	r3, [r7, #4]
 8105866:	2200      	movs	r2, #0
 8105868:	609a      	str	r2, [r3, #8]
}
 810586a:	bf00      	nop
 810586c:	3724      	adds	r7, #36	; 0x24
 810586e:	46bd      	mov	sp, r7
 8105870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105874:	4770      	bx	lr
 8105876:	bf00      	nop
 8105878:	58024400 	.word	0x58024400
 810587c:	03d09000 	.word	0x03d09000
 8105880:	46000000 	.word	0x46000000
 8105884:	4c742400 	.word	0x4c742400
 8105888:	4a742400 	.word	0x4a742400
 810588c:	4bbebc20 	.word	0x4bbebc20

08105890 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105890:	b480      	push	{r7}
 8105892:	b089      	sub	sp, #36	; 0x24
 8105894:	af00      	add	r7, sp, #0
 8105896:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105898:	4ba1      	ldr	r3, [pc, #644]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810589a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810589c:	f003 0303 	and.w	r3, r3, #3
 81058a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81058a2:	4b9f      	ldr	r3, [pc, #636]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81058a6:	0d1b      	lsrs	r3, r3, #20
 81058a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81058ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81058ae:	4b9c      	ldr	r3, [pc, #624]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058b2:	0a1b      	lsrs	r3, r3, #8
 81058b4:	f003 0301 	and.w	r3, r3, #1
 81058b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81058ba:	4b99      	ldr	r3, [pc, #612]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81058be:	08db      	lsrs	r3, r3, #3
 81058c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81058c4:	693a      	ldr	r2, [r7, #16]
 81058c6:	fb02 f303 	mul.w	r3, r2, r3
 81058ca:	ee07 3a90 	vmov	s15, r3
 81058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81058d6:	697b      	ldr	r3, [r7, #20]
 81058d8:	2b00      	cmp	r3, #0
 81058da:	f000 8111 	beq.w	8105b00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81058de:	69bb      	ldr	r3, [r7, #24]
 81058e0:	2b02      	cmp	r3, #2
 81058e2:	f000 8083 	beq.w	81059ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81058e6:	69bb      	ldr	r3, [r7, #24]
 81058e8:	2b02      	cmp	r3, #2
 81058ea:	f200 80a1 	bhi.w	8105a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81058ee:	69bb      	ldr	r3, [r7, #24]
 81058f0:	2b00      	cmp	r3, #0
 81058f2:	d003      	beq.n	81058fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81058f4:	69bb      	ldr	r3, [r7, #24]
 81058f6:	2b01      	cmp	r3, #1
 81058f8:	d056      	beq.n	81059a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81058fa:	e099      	b.n	8105a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81058fc:	4b88      	ldr	r3, [pc, #544]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	f003 0320 	and.w	r3, r3, #32
 8105904:	2b00      	cmp	r3, #0
 8105906:	d02d      	beq.n	8105964 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105908:	4b85      	ldr	r3, [pc, #532]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810590a:	681b      	ldr	r3, [r3, #0]
 810590c:	08db      	lsrs	r3, r3, #3
 810590e:	f003 0303 	and.w	r3, r3, #3
 8105912:	4a84      	ldr	r2, [pc, #528]	; (8105b24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105914:	fa22 f303 	lsr.w	r3, r2, r3
 8105918:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810591a:	68bb      	ldr	r3, [r7, #8]
 810591c:	ee07 3a90 	vmov	s15, r3
 8105920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105924:	697b      	ldr	r3, [r7, #20]
 8105926:	ee07 3a90 	vmov	s15, r3
 810592a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810592e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105932:	4b7b      	ldr	r3, [pc, #492]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810593a:	ee07 3a90 	vmov	s15, r3
 810593e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105942:	ed97 6a03 	vldr	s12, [r7, #12]
 8105946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810594a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810594e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810595a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810595e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105962:	e087      	b.n	8105a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105964:	697b      	ldr	r3, [r7, #20]
 8105966:	ee07 3a90 	vmov	s15, r3
 810596a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810596e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105b2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8105972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105976:	4b6a      	ldr	r3, [pc, #424]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810597a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810597e:	ee07 3a90 	vmov	s15, r3
 8105982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105986:	ed97 6a03 	vldr	s12, [r7, #12]
 810598a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810598e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810599a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810599e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81059a6:	e065      	b.n	8105a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059a8:	697b      	ldr	r3, [r7, #20]
 81059aa:	ee07 3a90 	vmov	s15, r3
 81059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81059b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059ba:	4b59      	ldr	r3, [pc, #356]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81059be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81059c2:	ee07 3a90 	vmov	s15, r3
 81059c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81059ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81059ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81059d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81059d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81059da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81059de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81059e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81059e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81059ea:	e043      	b.n	8105a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81059ec:	697b      	ldr	r3, [r7, #20]
 81059ee:	ee07 3a90 	vmov	s15, r3
 81059f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81059fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81059fe:	4b48      	ldr	r3, [pc, #288]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a06:	ee07 3a90 	vmov	s15, r3
 8105a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a2e:	e021      	b.n	8105a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105a30:	697b      	ldr	r3, [r7, #20]
 8105a32:	ee07 3a90 	vmov	s15, r3
 8105a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8105a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105a42:	4b37      	ldr	r3, [pc, #220]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a4a:	ee07 3a90 	vmov	s15, r3
 8105a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8105a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105a72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8105a74:	4b2a      	ldr	r3, [pc, #168]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a78:	0a5b      	lsrs	r3, r3, #9
 8105a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a7e:	ee07 3a90 	vmov	s15, r3
 8105a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a9a:	ee17 2a90 	vmov	r2, s15
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8105aa2:	4b1f      	ldr	r3, [pc, #124]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105aa6:	0c1b      	lsrs	r3, r3, #16
 8105aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105aac:	ee07 3a90 	vmov	s15, r3
 8105ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8105ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105ac8:	ee17 2a90 	vmov	r2, s15
 8105acc:	687b      	ldr	r3, [r7, #4]
 8105ace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105ad0:	4b13      	ldr	r3, [pc, #76]	; (8105b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105ad4:	0e1b      	lsrs	r3, r3, #24
 8105ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105ada:	ee07 3a90 	vmov	s15, r3
 8105ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8105aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105af6:	ee17 2a90 	vmov	r2, s15
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105afe:	e008      	b.n	8105b12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105b00:	687b      	ldr	r3, [r7, #4]
 8105b02:	2200      	movs	r2, #0
 8105b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	2200      	movs	r2, #0
 8105b0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	2200      	movs	r2, #0
 8105b10:	609a      	str	r2, [r3, #8]
}
 8105b12:	bf00      	nop
 8105b14:	3724      	adds	r7, #36	; 0x24
 8105b16:	46bd      	mov	sp, r7
 8105b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b1c:	4770      	bx	lr
 8105b1e:	bf00      	nop
 8105b20:	58024400 	.word	0x58024400
 8105b24:	03d09000 	.word	0x03d09000
 8105b28:	46000000 	.word	0x46000000
 8105b2c:	4c742400 	.word	0x4c742400
 8105b30:	4a742400 	.word	0x4a742400
 8105b34:	4bbebc20 	.word	0x4bbebc20

08105b38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8105b38:	b480      	push	{r7}
 8105b3a:	b089      	sub	sp, #36	; 0x24
 8105b3c:	af00      	add	r7, sp, #0
 8105b3e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105b40:	4ba0      	ldr	r3, [pc, #640]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b44:	f003 0303 	and.w	r3, r3, #3
 8105b48:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8105b4a:	4b9e      	ldr	r3, [pc, #632]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105b4e:	091b      	lsrs	r3, r3, #4
 8105b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105b54:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105b56:	4b9b      	ldr	r3, [pc, #620]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105b5a:	f003 0301 	and.w	r3, r3, #1
 8105b5e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105b60:	4b98      	ldr	r3, [pc, #608]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105b64:	08db      	lsrs	r3, r3, #3
 8105b66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105b6a:	693a      	ldr	r2, [r7, #16]
 8105b6c:	fb02 f303 	mul.w	r3, r2, r3
 8105b70:	ee07 3a90 	vmov	s15, r3
 8105b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b78:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105b7c:	697b      	ldr	r3, [r7, #20]
 8105b7e:	2b00      	cmp	r3, #0
 8105b80:	f000 8111 	beq.w	8105da6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105b84:	69bb      	ldr	r3, [r7, #24]
 8105b86:	2b02      	cmp	r3, #2
 8105b88:	f000 8083 	beq.w	8105c92 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105b8c:	69bb      	ldr	r3, [r7, #24]
 8105b8e:	2b02      	cmp	r3, #2
 8105b90:	f200 80a1 	bhi.w	8105cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105b94:	69bb      	ldr	r3, [r7, #24]
 8105b96:	2b00      	cmp	r3, #0
 8105b98:	d003      	beq.n	8105ba2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105b9a:	69bb      	ldr	r3, [r7, #24]
 8105b9c:	2b01      	cmp	r3, #1
 8105b9e:	d056      	beq.n	8105c4e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105ba0:	e099      	b.n	8105cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ba2:	4b88      	ldr	r3, [pc, #544]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105ba4:	681b      	ldr	r3, [r3, #0]
 8105ba6:	f003 0320 	and.w	r3, r3, #32
 8105baa:	2b00      	cmp	r3, #0
 8105bac:	d02d      	beq.n	8105c0a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105bae:	4b85      	ldr	r3, [pc, #532]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105bb0:	681b      	ldr	r3, [r3, #0]
 8105bb2:	08db      	lsrs	r3, r3, #3
 8105bb4:	f003 0303 	and.w	r3, r3, #3
 8105bb8:	4a83      	ldr	r2, [pc, #524]	; (8105dc8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105bba:	fa22 f303 	lsr.w	r3, r2, r3
 8105bbe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105bc0:	68bb      	ldr	r3, [r7, #8]
 8105bc2:	ee07 3a90 	vmov	s15, r3
 8105bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105bca:	697b      	ldr	r3, [r7, #20]
 8105bcc:	ee07 3a90 	vmov	s15, r3
 8105bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bd8:	4b7a      	ldr	r3, [pc, #488]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105be0:	ee07 3a90 	vmov	s15, r3
 8105be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105be8:	ed97 6a03 	vldr	s12, [r7, #12]
 8105bec:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105dcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8105c08:	e087      	b.n	8105d1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105c0a:	697b      	ldr	r3, [r7, #20]
 8105c0c:	ee07 3a90 	vmov	s15, r3
 8105c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c14:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c1c:	4b69      	ldr	r3, [pc, #420]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c24:	ee07 3a90 	vmov	s15, r3
 8105c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c30:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105dcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c4c:	e065      	b.n	8105d1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105c4e:	697b      	ldr	r3, [r7, #20]
 8105c50:	ee07 3a90 	vmov	s15, r3
 8105c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c58:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105dd4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c60:	4b58      	ldr	r3, [pc, #352]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c68:	ee07 3a90 	vmov	s15, r3
 8105c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c70:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c74:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105dcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105c90:	e043      	b.n	8105d1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105c92:	697b      	ldr	r3, [r7, #20]
 8105c94:	ee07 3a90 	vmov	s15, r3
 8105c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c9c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105dd8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ca4:	4b47      	ldr	r3, [pc, #284]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cac:	ee07 3a90 	vmov	s15, r3
 8105cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8105cb8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105dcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105cd4:	e021      	b.n	8105d1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105cd6:	697b      	ldr	r3, [r7, #20]
 8105cd8:	ee07 3a90 	vmov	s15, r3
 8105cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ce0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8105dd0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ce8:	4b36      	ldr	r3, [pc, #216]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cf0:	ee07 3a90 	vmov	s15, r3
 8105cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8105cfc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105dcc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105d14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8105d18:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8105d1a:	4b2a      	ldr	r3, [pc, #168]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d1e:	0a5b      	lsrs	r3, r3, #9
 8105d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105d24:	ee07 3a90 	vmov	s15, r3
 8105d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d40:	ee17 2a90 	vmov	r2, s15
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8105d48:	4b1e      	ldr	r3, [pc, #120]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d4c:	0c1b      	lsrs	r3, r3, #16
 8105d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105d52:	ee07 3a90 	vmov	s15, r3
 8105d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d6e:	ee17 2a90 	vmov	r2, s15
 8105d72:	687b      	ldr	r3, [r7, #4]
 8105d74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8105d76:	4b13      	ldr	r3, [pc, #76]	; (8105dc4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105d7a:	0e1b      	lsrs	r3, r3, #24
 8105d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105d80:	ee07 3a90 	vmov	s15, r3
 8105d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d9c:	ee17 2a90 	vmov	r2, s15
 8105da0:	687b      	ldr	r3, [r7, #4]
 8105da2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105da4:	e008      	b.n	8105db8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105da6:	687b      	ldr	r3, [r7, #4]
 8105da8:	2200      	movs	r2, #0
 8105daa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	2200      	movs	r2, #0
 8105db0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105db2:	687b      	ldr	r3, [r7, #4]
 8105db4:	2200      	movs	r2, #0
 8105db6:	609a      	str	r2, [r3, #8]
}
 8105db8:	bf00      	nop
 8105dba:	3724      	adds	r7, #36	; 0x24
 8105dbc:	46bd      	mov	sp, r7
 8105dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc2:	4770      	bx	lr
 8105dc4:	58024400 	.word	0x58024400
 8105dc8:	03d09000 	.word	0x03d09000
 8105dcc:	46000000 	.word	0x46000000
 8105dd0:	4c742400 	.word	0x4c742400
 8105dd4:	4a742400 	.word	0x4a742400
 8105dd8:	4bbebc20 	.word	0x4bbebc20

08105ddc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105ddc:	b580      	push	{r7, lr}
 8105dde:	b084      	sub	sp, #16
 8105de0:	af00      	add	r7, sp, #0
 8105de2:	6078      	str	r0, [r7, #4]
 8105de4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105de6:	2300      	movs	r3, #0
 8105de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105dea:	4b54      	ldr	r3, [pc, #336]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105dee:	f003 0303 	and.w	r3, r3, #3
 8105df2:	2b03      	cmp	r3, #3
 8105df4:	d101      	bne.n	8105dfa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105df6:	2301      	movs	r3, #1
 8105df8:	e09b      	b.n	8105f32 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105dfa:	4b50      	ldr	r3, [pc, #320]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	4a4f      	ldr	r2, [pc, #316]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105e06:	f7fb fc79 	bl	81016fc <HAL_GetTick>
 8105e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105e0c:	e008      	b.n	8105e20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105e0e:	f7fb fc75 	bl	81016fc <HAL_GetTick>
 8105e12:	4602      	mov	r2, r0
 8105e14:	68bb      	ldr	r3, [r7, #8]
 8105e16:	1ad3      	subs	r3, r2, r3
 8105e18:	2b02      	cmp	r3, #2
 8105e1a:	d901      	bls.n	8105e20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105e1c:	2303      	movs	r3, #3
 8105e1e:	e088      	b.n	8105f32 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105e20:	4b46      	ldr	r3, [pc, #280]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e22:	681b      	ldr	r3, [r3, #0]
 8105e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105e28:	2b00      	cmp	r3, #0
 8105e2a:	d1f0      	bne.n	8105e0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105e2c:	4b43      	ldr	r3, [pc, #268]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	681b      	ldr	r3, [r3, #0]
 8105e38:	031b      	lsls	r3, r3, #12
 8105e3a:	4940      	ldr	r1, [pc, #256]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e3c:	4313      	orrs	r3, r2
 8105e3e:	628b      	str	r3, [r1, #40]	; 0x28
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	685b      	ldr	r3, [r3, #4]
 8105e44:	3b01      	subs	r3, #1
 8105e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105e4a:	687b      	ldr	r3, [r7, #4]
 8105e4c:	689b      	ldr	r3, [r3, #8]
 8105e4e:	3b01      	subs	r3, #1
 8105e50:	025b      	lsls	r3, r3, #9
 8105e52:	b29b      	uxth	r3, r3
 8105e54:	431a      	orrs	r2, r3
 8105e56:	687b      	ldr	r3, [r7, #4]
 8105e58:	68db      	ldr	r3, [r3, #12]
 8105e5a:	3b01      	subs	r3, #1
 8105e5c:	041b      	lsls	r3, r3, #16
 8105e5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105e62:	431a      	orrs	r2, r3
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	691b      	ldr	r3, [r3, #16]
 8105e68:	3b01      	subs	r3, #1
 8105e6a:	061b      	lsls	r3, r3, #24
 8105e6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105e70:	4932      	ldr	r1, [pc, #200]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e72:	4313      	orrs	r3, r2
 8105e74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105e76:	4b31      	ldr	r3, [pc, #196]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105e7e:	687b      	ldr	r3, [r7, #4]
 8105e80:	695b      	ldr	r3, [r3, #20]
 8105e82:	492e      	ldr	r1, [pc, #184]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e84:	4313      	orrs	r3, r2
 8105e86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105e88:	4b2c      	ldr	r3, [pc, #176]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e8c:	f023 0220 	bic.w	r2, r3, #32
 8105e90:	687b      	ldr	r3, [r7, #4]
 8105e92:	699b      	ldr	r3, [r3, #24]
 8105e94:	4929      	ldr	r1, [pc, #164]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e96:	4313      	orrs	r3, r2
 8105e98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105e9a:	4b28      	ldr	r3, [pc, #160]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e9e:	4a27      	ldr	r2, [pc, #156]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ea0:	f023 0310 	bic.w	r3, r3, #16
 8105ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105ea6:	4b25      	ldr	r3, [pc, #148]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105eae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105eb2:	687a      	ldr	r2, [r7, #4]
 8105eb4:	69d2      	ldr	r2, [r2, #28]
 8105eb6:	00d2      	lsls	r2, r2, #3
 8105eb8:	4920      	ldr	r1, [pc, #128]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105eba:	4313      	orrs	r3, r2
 8105ebc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105ebe:	4b1f      	ldr	r3, [pc, #124]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ec2:	4a1e      	ldr	r2, [pc, #120]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ec4:	f043 0310 	orr.w	r3, r3, #16
 8105ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105eca:	683b      	ldr	r3, [r7, #0]
 8105ecc:	2b00      	cmp	r3, #0
 8105ece:	d106      	bne.n	8105ede <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105ed0:	4b1a      	ldr	r3, [pc, #104]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ed4:	4a19      	ldr	r2, [pc, #100]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ed6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105edc:	e00f      	b.n	8105efe <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105ede:	683b      	ldr	r3, [r7, #0]
 8105ee0:	2b01      	cmp	r3, #1
 8105ee2:	d106      	bne.n	8105ef2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105ee4:	4b15      	ldr	r3, [pc, #84]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ee8:	4a14      	ldr	r2, [pc, #80]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105ef0:	e005      	b.n	8105efe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105ef2:	4b12      	ldr	r3, [pc, #72]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ef6:	4a11      	ldr	r2, [pc, #68]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105efc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105efe:	4b0f      	ldr	r3, [pc, #60]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	4a0e      	ldr	r2, [pc, #56]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105f04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105f0a:	f7fb fbf7 	bl	81016fc <HAL_GetTick>
 8105f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105f10:	e008      	b.n	8105f24 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8105f12:	f7fb fbf3 	bl	81016fc <HAL_GetTick>
 8105f16:	4602      	mov	r2, r0
 8105f18:	68bb      	ldr	r3, [r7, #8]
 8105f1a:	1ad3      	subs	r3, r2, r3
 8105f1c:	2b02      	cmp	r3, #2
 8105f1e:	d901      	bls.n	8105f24 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105f20:	2303      	movs	r3, #3
 8105f22:	e006      	b.n	8105f32 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105f24:	4b05      	ldr	r3, [pc, #20]	; (8105f3c <RCCEx_PLL2_Config+0x160>)
 8105f26:	681b      	ldr	r3, [r3, #0]
 8105f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105f2c:	2b00      	cmp	r3, #0
 8105f2e:	d0f0      	beq.n	8105f12 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8105f32:	4618      	mov	r0, r3
 8105f34:	3710      	adds	r7, #16
 8105f36:	46bd      	mov	sp, r7
 8105f38:	bd80      	pop	{r7, pc}
 8105f3a:	bf00      	nop
 8105f3c:	58024400 	.word	0x58024400

08105f40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105f40:	b580      	push	{r7, lr}
 8105f42:	b084      	sub	sp, #16
 8105f44:	af00      	add	r7, sp, #0
 8105f46:	6078      	str	r0, [r7, #4]
 8105f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105f4a:	2300      	movs	r3, #0
 8105f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105f4e:	4b54      	ldr	r3, [pc, #336]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f52:	f003 0303 	and.w	r3, r3, #3
 8105f56:	2b03      	cmp	r3, #3
 8105f58:	d101      	bne.n	8105f5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105f5a:	2301      	movs	r3, #1
 8105f5c:	e09b      	b.n	8106096 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105f5e:	4b50      	ldr	r3, [pc, #320]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105f60:	681b      	ldr	r3, [r3, #0]
 8105f62:	4a4f      	ldr	r2, [pc, #316]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105f68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105f6a:	f7fb fbc7 	bl	81016fc <HAL_GetTick>
 8105f6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105f70:	e008      	b.n	8105f84 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105f72:	f7fb fbc3 	bl	81016fc <HAL_GetTick>
 8105f76:	4602      	mov	r2, r0
 8105f78:	68bb      	ldr	r3, [r7, #8]
 8105f7a:	1ad3      	subs	r3, r2, r3
 8105f7c:	2b02      	cmp	r3, #2
 8105f7e:	d901      	bls.n	8105f84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105f80:	2303      	movs	r3, #3
 8105f82:	e088      	b.n	8106096 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105f84:	4b46      	ldr	r3, [pc, #280]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105f86:	681b      	ldr	r3, [r3, #0]
 8105f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	d1f0      	bne.n	8105f72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105f90:	4b43      	ldr	r3, [pc, #268]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105f94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	681b      	ldr	r3, [r3, #0]
 8105f9c:	051b      	lsls	r3, r3, #20
 8105f9e:	4940      	ldr	r1, [pc, #256]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105fa0:	4313      	orrs	r3, r2
 8105fa2:	628b      	str	r3, [r1, #40]	; 0x28
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	685b      	ldr	r3, [r3, #4]
 8105fa8:	3b01      	subs	r3, #1
 8105faa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	689b      	ldr	r3, [r3, #8]
 8105fb2:	3b01      	subs	r3, #1
 8105fb4:	025b      	lsls	r3, r3, #9
 8105fb6:	b29b      	uxth	r3, r3
 8105fb8:	431a      	orrs	r2, r3
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	68db      	ldr	r3, [r3, #12]
 8105fbe:	3b01      	subs	r3, #1
 8105fc0:	041b      	lsls	r3, r3, #16
 8105fc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105fc6:	431a      	orrs	r2, r3
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	691b      	ldr	r3, [r3, #16]
 8105fcc:	3b01      	subs	r3, #1
 8105fce:	061b      	lsls	r3, r3, #24
 8105fd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105fd4:	4932      	ldr	r1, [pc, #200]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105fd6:	4313      	orrs	r3, r2
 8105fd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105fda:	4b31      	ldr	r3, [pc, #196]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105fde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	695b      	ldr	r3, [r3, #20]
 8105fe6:	492e      	ldr	r1, [pc, #184]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105fe8:	4313      	orrs	r3, r2
 8105fea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105fec:	4b2c      	ldr	r3, [pc, #176]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ff0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	699b      	ldr	r3, [r3, #24]
 8105ff8:	4929      	ldr	r1, [pc, #164]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8105ffa:	4313      	orrs	r3, r2
 8105ffc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105ffe:	4b28      	ldr	r3, [pc, #160]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106002:	4a27      	ldr	r2, [pc, #156]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106008:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810600a:	4b25      	ldr	r3, [pc, #148]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 810600c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810600e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106012:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8106016:	687a      	ldr	r2, [r7, #4]
 8106018:	69d2      	ldr	r2, [r2, #28]
 810601a:	00d2      	lsls	r2, r2, #3
 810601c:	4920      	ldr	r1, [pc, #128]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 810601e:	4313      	orrs	r3, r2
 8106020:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8106022:	4b1f      	ldr	r3, [pc, #124]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106026:	4a1e      	ldr	r2, [pc, #120]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810602c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810602e:	683b      	ldr	r3, [r7, #0]
 8106030:	2b00      	cmp	r3, #0
 8106032:	d106      	bne.n	8106042 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8106034:	4b1a      	ldr	r3, [pc, #104]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106038:	4a19      	ldr	r2, [pc, #100]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 810603a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810603e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106040:	e00f      	b.n	8106062 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106042:	683b      	ldr	r3, [r7, #0]
 8106044:	2b01      	cmp	r3, #1
 8106046:	d106      	bne.n	8106056 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8106048:	4b15      	ldr	r3, [pc, #84]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 810604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810604c:	4a14      	ldr	r2, [pc, #80]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 810604e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8106052:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106054:	e005      	b.n	8106062 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8106056:	4b12      	ldr	r3, [pc, #72]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810605a:	4a11      	ldr	r2, [pc, #68]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 810605c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8106060:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8106062:	4b0f      	ldr	r3, [pc, #60]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106064:	681b      	ldr	r3, [r3, #0]
 8106066:	4a0e      	ldr	r2, [pc, #56]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 8106068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810606c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810606e:	f7fb fb45 	bl	81016fc <HAL_GetTick>
 8106072:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106074:	e008      	b.n	8106088 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8106076:	f7fb fb41 	bl	81016fc <HAL_GetTick>
 810607a:	4602      	mov	r2, r0
 810607c:	68bb      	ldr	r3, [r7, #8]
 810607e:	1ad3      	subs	r3, r2, r3
 8106080:	2b02      	cmp	r3, #2
 8106082:	d901      	bls.n	8106088 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8106084:	2303      	movs	r3, #3
 8106086:	e006      	b.n	8106096 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106088:	4b05      	ldr	r3, [pc, #20]	; (81060a0 <RCCEx_PLL3_Config+0x160>)
 810608a:	681b      	ldr	r3, [r3, #0]
 810608c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106090:	2b00      	cmp	r3, #0
 8106092:	d0f0      	beq.n	8106076 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8106094:	7bfb      	ldrb	r3, [r7, #15]
}
 8106096:	4618      	mov	r0, r3
 8106098:	3710      	adds	r7, #16
 810609a:	46bd      	mov	sp, r7
 810609c:	bd80      	pop	{r7, pc}
 810609e:	bf00      	nop
 81060a0:	58024400 	.word	0x58024400

081060a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 81060a4:	b580      	push	{r7, lr}
 81060a6:	b084      	sub	sp, #16
 81060a8:	af00      	add	r7, sp, #0
 81060aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 81060ac:	2301      	movs	r3, #1
 81060ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 81060b0:	687b      	ldr	r3, [r7, #4]
 81060b2:	2b00      	cmp	r3, #0
 81060b4:	d073      	beq.n	810619e <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 81060bc:	b2db      	uxtb	r3, r3
 81060be:	2b00      	cmp	r3, #0
 81060c0:	d106      	bne.n	81060d0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	2200      	movs	r2, #0
 81060c6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 81060ca:	6878      	ldr	r0, [r7, #4]
 81060cc:	f7fa ff76 	bl	8100fbc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	2202      	movs	r2, #2
 81060d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	681b      	ldr	r3, [r3, #0]
 81060dc:	68db      	ldr	r3, [r3, #12]
 81060de:	f003 0310 	and.w	r3, r3, #16
 81060e2:	2b10      	cmp	r3, #16
 81060e4:	d052      	beq.n	810618c <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	681b      	ldr	r3, [r3, #0]
 81060ea:	22ca      	movs	r2, #202	; 0xca
 81060ec:	625a      	str	r2, [r3, #36]	; 0x24
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	681b      	ldr	r3, [r3, #0]
 81060f2:	2253      	movs	r2, #83	; 0x53
 81060f4:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 81060f6:	6878      	ldr	r0, [r7, #4]
 81060f8:	f000 f87a 	bl	81061f0 <RTC_EnterInitMode>
 81060fc:	4603      	mov	r3, r0
 81060fe:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8106100:	7bfb      	ldrb	r3, [r7, #15]
 8106102:	2b00      	cmp	r3, #0
 8106104:	d126      	bne.n	8106154 <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	689b      	ldr	r3, [r3, #8]
 810610c:	687a      	ldr	r2, [r7, #4]
 810610e:	6812      	ldr	r2, [r2, #0]
 8106110:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8106114:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106118:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	681b      	ldr	r3, [r3, #0]
 810611e:	6899      	ldr	r1, [r3, #8]
 8106120:	687b      	ldr	r3, [r7, #4]
 8106122:	685a      	ldr	r2, [r3, #4]
 8106124:	687b      	ldr	r3, [r7, #4]
 8106126:	691b      	ldr	r3, [r3, #16]
 8106128:	431a      	orrs	r2, r3
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	699b      	ldr	r3, [r3, #24]
 810612e:	431a      	orrs	r2, r3
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	681b      	ldr	r3, [r3, #0]
 8106134:	430a      	orrs	r2, r1
 8106136:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	689b      	ldr	r3, [r3, #8]
 810613c:	0419      	lsls	r1, r3, #16
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	68da      	ldr	r2, [r3, #12]
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	681b      	ldr	r3, [r3, #0]
 8106146:	430a      	orrs	r2, r1
 8106148:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 810614a:	6878      	ldr	r0, [r7, #4]
 810614c:	f000 f884 	bl	8106258 <RTC_ExitInitMode>
 8106150:	4603      	mov	r3, r0
 8106152:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8106154:	7bfb      	ldrb	r3, [r7, #15]
 8106156:	2b00      	cmp	r3, #0
 8106158:	d113      	bne.n	8106182 <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 810615a:	687b      	ldr	r3, [r7, #4]
 810615c:	681b      	ldr	r3, [r3, #0]
 810615e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106160:	687b      	ldr	r3, [r7, #4]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	f022 0203 	bic.w	r2, r2, #3
 8106168:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 810616a:	687b      	ldr	r3, [r7, #4]
 810616c:	681b      	ldr	r3, [r3, #0]
 810616e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	69da      	ldr	r2, [r3, #28]
 8106174:	687b      	ldr	r3, [r7, #4]
 8106176:	695b      	ldr	r3, [r3, #20]
 8106178:	431a      	orrs	r2, r3
 810617a:	687b      	ldr	r3, [r7, #4]
 810617c:	681b      	ldr	r3, [r3, #0]
 810617e:	430a      	orrs	r2, r1
 8106180:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	681b      	ldr	r3, [r3, #0]
 8106186:	22ff      	movs	r2, #255	; 0xff
 8106188:	625a      	str	r2, [r3, #36]	; 0x24
 810618a:	e001      	b.n	8106190 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 810618c:	2300      	movs	r3, #0
 810618e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8106190:	7bfb      	ldrb	r3, [r7, #15]
 8106192:	2b00      	cmp	r3, #0
 8106194:	d103      	bne.n	810619e <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8106196:	687b      	ldr	r3, [r7, #4]
 8106198:	2201      	movs	r2, #1
 810619a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 810619e:	7bfb      	ldrb	r3, [r7, #15]
}
 81061a0:	4618      	mov	r0, r3
 81061a2:	3710      	adds	r7, #16
 81061a4:	46bd      	mov	sp, r7
 81061a6:	bd80      	pop	{r7, pc}

081061a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 81061a8:	b580      	push	{r7, lr}
 81061aa:	b084      	sub	sp, #16
 81061ac:	af00      	add	r7, sp, #0
 81061ae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 81061b0:	687b      	ldr	r3, [r7, #4]
 81061b2:	681b      	ldr	r3, [r3, #0]
 81061b4:	4a0d      	ldr	r2, [pc, #52]	; (81061ec <HAL_RTC_WaitForSynchro+0x44>)
 81061b6:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 81061b8:	f7fb faa0 	bl	81016fc <HAL_GetTick>
 81061bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81061be:	e009      	b.n	81061d4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 81061c0:	f7fb fa9c 	bl	81016fc <HAL_GetTick>
 81061c4:	4602      	mov	r2, r0
 81061c6:	68fb      	ldr	r3, [r7, #12]
 81061c8:	1ad3      	subs	r3, r2, r3
 81061ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 81061ce:	d901      	bls.n	81061d4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 81061d0:	2303      	movs	r3, #3
 81061d2:	e007      	b.n	81061e4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 81061d4:	687b      	ldr	r3, [r7, #4]
 81061d6:	681b      	ldr	r3, [r3, #0]
 81061d8:	68db      	ldr	r3, [r3, #12]
 81061da:	f003 0320 	and.w	r3, r3, #32
 81061de:	2b00      	cmp	r3, #0
 81061e0:	d0ee      	beq.n	81061c0 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 81061e2:	2300      	movs	r3, #0
}
 81061e4:	4618      	mov	r0, r3
 81061e6:	3710      	adds	r7, #16
 81061e8:	46bd      	mov	sp, r7
 81061ea:	bd80      	pop	{r7, pc}
 81061ec:	0003ff5f 	.word	0x0003ff5f

081061f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 81061f0:	b580      	push	{r7, lr}
 81061f2:	b084      	sub	sp, #16
 81061f4:	af00      	add	r7, sp, #0
 81061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81061f8:	2300      	movs	r3, #0
 81061fa:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 81061fc:	687b      	ldr	r3, [r7, #4]
 81061fe:	681b      	ldr	r3, [r3, #0]
 8106200:	68db      	ldr	r3, [r3, #12]
 8106202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106206:	2b00      	cmp	r3, #0
 8106208:	d120      	bne.n	810624c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8106212:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8106214:	f7fb fa72 	bl	81016fc <HAL_GetTick>
 8106218:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 810621a:	e00d      	b.n	8106238 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 810621c:	f7fb fa6e 	bl	81016fc <HAL_GetTick>
 8106220:	4602      	mov	r2, r0
 8106222:	68bb      	ldr	r3, [r7, #8]
 8106224:	1ad3      	subs	r3, r2, r3
 8106226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 810622a:	d905      	bls.n	8106238 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 810622c:	2303      	movs	r3, #3
 810622e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	2203      	movs	r2, #3
 8106234:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	681b      	ldr	r3, [r3, #0]
 810623c:	68db      	ldr	r3, [r3, #12]
 810623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106242:	2b00      	cmp	r3, #0
 8106244:	d102      	bne.n	810624c <RTC_EnterInitMode+0x5c>
 8106246:	7bfb      	ldrb	r3, [r7, #15]
 8106248:	2b03      	cmp	r3, #3
 810624a:	d1e7      	bne.n	810621c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 810624c:	7bfb      	ldrb	r3, [r7, #15]
}
 810624e:	4618      	mov	r0, r3
 8106250:	3710      	adds	r7, #16
 8106252:	46bd      	mov	sp, r7
 8106254:	bd80      	pop	{r7, pc}
	...

08106258 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8106258:	b580      	push	{r7, lr}
 810625a:	b084      	sub	sp, #16
 810625c:	af00      	add	r7, sp, #0
 810625e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106260:	2300      	movs	r3, #0
 8106262:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8106264:	4b1a      	ldr	r3, [pc, #104]	; (81062d0 <RTC_ExitInitMode+0x78>)
 8106266:	68db      	ldr	r3, [r3, #12]
 8106268:	4a19      	ldr	r2, [pc, #100]	; (81062d0 <RTC_ExitInitMode+0x78>)
 810626a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810626e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8106270:	4b17      	ldr	r3, [pc, #92]	; (81062d0 <RTC_ExitInitMode+0x78>)
 8106272:	689b      	ldr	r3, [r3, #8]
 8106274:	f003 0320 	and.w	r3, r3, #32
 8106278:	2b00      	cmp	r3, #0
 810627a:	d10c      	bne.n	8106296 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810627c:	6878      	ldr	r0, [r7, #4]
 810627e:	f7ff ff93 	bl	81061a8 <HAL_RTC_WaitForSynchro>
 8106282:	4603      	mov	r3, r0
 8106284:	2b00      	cmp	r3, #0
 8106286:	d01e      	beq.n	81062c6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8106288:	687b      	ldr	r3, [r7, #4]
 810628a:	2203      	movs	r2, #3
 810628c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8106290:	2303      	movs	r3, #3
 8106292:	73fb      	strb	r3, [r7, #15]
 8106294:	e017      	b.n	81062c6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8106296:	4b0e      	ldr	r3, [pc, #56]	; (81062d0 <RTC_ExitInitMode+0x78>)
 8106298:	689b      	ldr	r3, [r3, #8]
 810629a:	4a0d      	ldr	r2, [pc, #52]	; (81062d0 <RTC_ExitInitMode+0x78>)
 810629c:	f023 0320 	bic.w	r3, r3, #32
 81062a0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 81062a2:	6878      	ldr	r0, [r7, #4]
 81062a4:	f7ff ff80 	bl	81061a8 <HAL_RTC_WaitForSynchro>
 81062a8:	4603      	mov	r3, r0
 81062aa:	2b00      	cmp	r3, #0
 81062ac:	d005      	beq.n	81062ba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	2203      	movs	r2, #3
 81062b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 81062b6:	2303      	movs	r3, #3
 81062b8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 81062ba:	4b05      	ldr	r3, [pc, #20]	; (81062d0 <RTC_ExitInitMode+0x78>)
 81062bc:	689b      	ldr	r3, [r3, #8]
 81062be:	4a04      	ldr	r2, [pc, #16]	; (81062d0 <RTC_ExitInitMode+0x78>)
 81062c0:	f043 0320 	orr.w	r3, r3, #32
 81062c4:	6093      	str	r3, [r2, #8]
  }

  return status;
 81062c6:	7bfb      	ldrb	r3, [r7, #15]
}
 81062c8:	4618      	mov	r0, r3
 81062ca:	3710      	adds	r7, #16
 81062cc:	46bd      	mov	sp, r7
 81062ce:	bd80      	pop	{r7, pc}
 81062d0:	58004000 	.word	0x58004000

081062d4 <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, RTC_TamperTypeDef * sTamper)
{
 81062d4:	b480      	push	{r7}
 81062d6:	b085      	sub	sp, #20
 81062d8:	af00      	add	r7, sp, #0
 81062da:	6078      	str	r0, [r7, #4]
 81062dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 81062de:	687b      	ldr	r3, [r7, #4]
 81062e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 81062e4:	2b01      	cmp	r3, #1
 81062e6:	d101      	bne.n	81062ec <HAL_RTCEx_SetTamper+0x18>
 81062e8:	2302      	movs	r3, #2
 81062ea:	e0cc      	b.n	8106486 <HAL_RTCEx_SetTamper+0x1b2>
 81062ec:	687b      	ldr	r3, [r7, #4]
 81062ee:	2201      	movs	r2, #1
 81062f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 81062f4:	687b      	ldr	r3, [r7, #4]
 81062f6:	2202      	movs	r2, #2
 81062f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106302:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 8106304:	683b      	ldr	r3, [r7, #0]
 8106306:	681b      	ldr	r3, [r3, #0]
 8106308:	68fa      	ldr	r2, [r7, #12]
 810630a:	4313      	orrs	r3, r2
 810630c:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 810630e:	683b      	ldr	r3, [r7, #0]
 8106310:	689b      	ldr	r3, [r3, #8]
 8106312:	2b08      	cmp	r3, #8
 8106314:	d003      	beq.n	810631e <HAL_RTCEx_SetTamper+0x4a>
 8106316:	683b      	ldr	r3, [r7, #0]
 8106318:	689b      	ldr	r3, [r3, #8]
 810631a:	2b02      	cmp	r3, #2
 810631c:	d106      	bne.n	810632c <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 810631e:	683b      	ldr	r3, [r7, #0]
 8106320:	681b      	ldr	r3, [r3, #0]
 8106322:	005b      	lsls	r3, r3, #1
 8106324:	68fa      	ldr	r2, [r7, #12]
 8106326:	4313      	orrs	r3, r2
 8106328:	60fb      	str	r3, [r7, #12]
 810632a:	e006      	b.n	810633a <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 810632c:	683b      	ldr	r3, [r7, #0]
 810632e:	681b      	ldr	r3, [r3, #0]
 8106330:	005b      	lsls	r3, r3, #1
 8106332:	43db      	mvns	r3, r3
 8106334:	68fa      	ldr	r2, [r7, #12]
 8106336:	4013      	ands	r3, r2
 8106338:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 810633a:	683b      	ldr	r3, [r7, #0]
 810633c:	68db      	ldr	r3, [r3, #12]
 810633e:	2b00      	cmp	r3, #0
 8106340:	d01e      	beq.n	8106380 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106342:	683b      	ldr	r3, [r7, #0]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	f003 0301 	and.w	r3, r3, #1
 810634a:	2b00      	cmp	r3, #0
 810634c:	d003      	beq.n	8106356 <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 810634e:	68fb      	ldr	r3, [r7, #12]
 8106350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8106354:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106356:	683b      	ldr	r3, [r7, #0]
 8106358:	681b      	ldr	r3, [r3, #0]
 810635a:	f003 0308 	and.w	r3, r3, #8
 810635e:	2b00      	cmp	r3, #0
 8106360:	d003      	beq.n	810636a <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 8106362:	68fb      	ldr	r3, [r7, #12]
 8106364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106368:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810636a:	683b      	ldr	r3, [r7, #0]
 810636c:	681b      	ldr	r3, [r3, #0]
 810636e:	f003 0320 	and.w	r3, r3, #32
 8106372:	2b00      	cmp	r3, #0
 8106374:	d022      	beq.n	81063bc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 8106376:	68fb      	ldr	r3, [r7, #12]
 8106378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810637c:	60fb      	str	r3, [r7, #12]
 810637e:	e01d      	b.n	81063bc <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106380:	683b      	ldr	r3, [r7, #0]
 8106382:	681b      	ldr	r3, [r3, #0]
 8106384:	f003 0301 	and.w	r3, r3, #1
 8106388:	2b00      	cmp	r3, #0
 810638a:	d003      	beq.n	8106394 <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 810638c:	68fb      	ldr	r3, [r7, #12]
 810638e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8106392:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106394:	683b      	ldr	r3, [r7, #0]
 8106396:	681b      	ldr	r3, [r3, #0]
 8106398:	f003 0308 	and.w	r3, r3, #8
 810639c:	2b00      	cmp	r3, #0
 810639e:	d003      	beq.n	81063a8 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 81063a0:	68fb      	ldr	r3, [r7, #12]
 81063a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81063a6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81063a8:	683b      	ldr	r3, [r7, #0]
 81063aa:	681b      	ldr	r3, [r3, #0]
 81063ac:	f003 0320 	and.w	r3, r3, #32
 81063b0:	2b00      	cmp	r3, #0
 81063b2:	d003      	beq.n	81063bc <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 81063b4:	68fb      	ldr	r3, [r7, #12]
 81063b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 81063ba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 81063bc:	683b      	ldr	r3, [r7, #0]
 81063be:	691b      	ldr	r3, [r3, #16]
 81063c0:	2b00      	cmp	r3, #0
 81063c2:	d01e      	beq.n	8106402 <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81063c4:	683b      	ldr	r3, [r7, #0]
 81063c6:	681b      	ldr	r3, [r3, #0]
 81063c8:	f003 0301 	and.w	r3, r3, #1
 81063cc:	2b00      	cmp	r3, #0
 81063ce:	d003      	beq.n	81063d8 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 81063d0:	68fb      	ldr	r3, [r7, #12]
 81063d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81063d6:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81063d8:	683b      	ldr	r3, [r7, #0]
 81063da:	681b      	ldr	r3, [r3, #0]
 81063dc:	f003 0308 	and.w	r3, r3, #8
 81063e0:	2b00      	cmp	r3, #0
 81063e2:	d003      	beq.n	81063ec <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 81063e4:	68fb      	ldr	r3, [r7, #12]
 81063e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81063ea:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81063ec:	683b      	ldr	r3, [r7, #0]
 81063ee:	681b      	ldr	r3, [r3, #0]
 81063f0:	f003 0320 	and.w	r3, r3, #32
 81063f4:	2b00      	cmp	r3, #0
 81063f6:	d022      	beq.n	810643e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 81063f8:	68fb      	ldr	r3, [r7, #12]
 81063fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81063fe:	60fb      	str	r3, [r7, #12]
 8106400:	e01d      	b.n	810643e <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8106402:	683b      	ldr	r3, [r7, #0]
 8106404:	681b      	ldr	r3, [r3, #0]
 8106406:	f003 0301 	and.w	r3, r3, #1
 810640a:	2b00      	cmp	r3, #0
 810640c:	d003      	beq.n	8106416 <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 810640e:	68fb      	ldr	r3, [r7, #12]
 8106410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8106414:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8106416:	683b      	ldr	r3, [r7, #0]
 8106418:	681b      	ldr	r3, [r3, #0]
 810641a:	f003 0308 	and.w	r3, r3, #8
 810641e:	2b00      	cmp	r3, #0
 8106420:	d003      	beq.n	810642a <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 8106422:	68fb      	ldr	r3, [r7, #12]
 8106424:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8106428:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 810642a:	683b      	ldr	r3, [r7, #0]
 810642c:	681b      	ldr	r3, [r3, #0]
 810642e:	f003 0320 	and.w	r3, r3, #32
 8106432:	2b00      	cmp	r3, #0
 8106434:	d003      	beq.n	810643e <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 8106436:	68fb      	ldr	r3, [r7, #12]
 8106438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810643c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 810643e:	68fb      	ldr	r3, [r7, #12]
 8106440:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106448:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 810644a:	683b      	ldr	r3, [r7, #0]
 810644c:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 810644e:	683b      	ldr	r3, [r7, #0]
 8106450:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8106452:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 8106454:	683b      	ldr	r3, [r7, #0]
 8106456:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 8106458:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 810645a:	683b      	ldr	r3, [r7, #0]
 810645c:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 810645e:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 8106460:	683b      	ldr	r3, [r7, #0]
 8106462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 8106464:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 8106466:	68fa      	ldr	r2, [r7, #12]
 8106468:	4313      	orrs	r3, r2
 810646a:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	681b      	ldr	r3, [r3, #0]
 8106470:	68fa      	ldr	r2, [r7, #12]
 8106472:	641a      	str	r2, [r3, #64]	; 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	2201      	movs	r2, #1
 8106478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	2200      	movs	r2, #0
 8106480:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8106484:	2300      	movs	r3, #0
}
 8106486:	4618      	mov	r0, r3
 8106488:	3714      	adds	r7, #20
 810648a:	46bd      	mov	sp, r7
 810648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106490:	4770      	bx	lr
	...

08106494 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8106494:	b580      	push	{r7, lr}
 8106496:	b08a      	sub	sp, #40	; 0x28
 8106498:	af00      	add	r7, sp, #0
 810649a:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 810649c:	687b      	ldr	r3, [r7, #4]
 810649e:	2b00      	cmp	r3, #0
 81064a0:	d101      	bne.n	81064a6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 81064a2:	2301      	movs	r3, #1
 81064a4:	e290      	b.n	81069c8 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81064a6:	f7fb f935 	bl	8101714 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 81064b0:	2b01      	cmp	r3, #1
 81064b2:	d113      	bne.n	81064dc <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81064b4:	687b      	ldr	r3, [r7, #4]
 81064b6:	681b      	ldr	r3, [r3, #0]
 81064b8:	4a96      	ldr	r2, [pc, #600]	; (8106714 <HAL_SAI_Init+0x280>)
 81064ba:	4293      	cmp	r3, r2
 81064bc:	d004      	beq.n	81064c8 <HAL_SAI_Init+0x34>
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	4a95      	ldr	r2, [pc, #596]	; (8106718 <HAL_SAI_Init+0x284>)
 81064c4:	4293      	cmp	r3, r2
 81064c6:	d107      	bne.n	81064d8 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 81064cc:	2b01      	cmp	r3, #1
 81064ce:	d103      	bne.n	81064d8 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 81064d4:	2b00      	cmp	r3, #0
 81064d6:	d001      	beq.n	81064dc <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 81064d8:	2301      	movs	r3, #1
 81064da:	e275      	b.n	81069c8 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	681b      	ldr	r3, [r3, #0]
 81064e0:	4a8c      	ldr	r2, [pc, #560]	; (8106714 <HAL_SAI_Init+0x280>)
 81064e2:	4293      	cmp	r3, r2
 81064e4:	d004      	beq.n	81064f0 <HAL_SAI_Init+0x5c>
 81064e6:	687b      	ldr	r3, [r7, #4]
 81064e8:	681b      	ldr	r3, [r3, #0]
 81064ea:	4a8c      	ldr	r2, [pc, #560]	; (810671c <HAL_SAI_Init+0x288>)
 81064ec:	4293      	cmp	r3, r2
 81064ee:	d102      	bne.n	81064f6 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 81064f0:	4b8b      	ldr	r3, [pc, #556]	; (8106720 <HAL_SAI_Init+0x28c>)
 81064f2:	61bb      	str	r3, [r7, #24]
 81064f4:	e028      	b.n	8106548 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81064f6:	687b      	ldr	r3, [r7, #4]
 81064f8:	681b      	ldr	r3, [r3, #0]
 81064fa:	4a8a      	ldr	r2, [pc, #552]	; (8106724 <HAL_SAI_Init+0x290>)
 81064fc:	4293      	cmp	r3, r2
 81064fe:	d004      	beq.n	810650a <HAL_SAI_Init+0x76>
 8106500:	687b      	ldr	r3, [r7, #4]
 8106502:	681b      	ldr	r3, [r3, #0]
 8106504:	4a88      	ldr	r2, [pc, #544]	; (8106728 <HAL_SAI_Init+0x294>)
 8106506:	4293      	cmp	r3, r2
 8106508:	d102      	bne.n	8106510 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 810650a:	4b88      	ldr	r3, [pc, #544]	; (810672c <HAL_SAI_Init+0x298>)
 810650c:	61bb      	str	r3, [r7, #24]
 810650e:	e01b      	b.n	8106548 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	4a86      	ldr	r2, [pc, #536]	; (8106730 <HAL_SAI_Init+0x29c>)
 8106516:	4293      	cmp	r3, r2
 8106518:	d004      	beq.n	8106524 <HAL_SAI_Init+0x90>
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	4a85      	ldr	r2, [pc, #532]	; (8106734 <HAL_SAI_Init+0x2a0>)
 8106520:	4293      	cmp	r3, r2
 8106522:	d102      	bne.n	810652a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8106524:	4b84      	ldr	r3, [pc, #528]	; (8106738 <HAL_SAI_Init+0x2a4>)
 8106526:	61bb      	str	r3, [r7, #24]
 8106528:	e00e      	b.n	8106548 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 810652a:	687b      	ldr	r3, [r7, #4]
 810652c:	681b      	ldr	r3, [r3, #0]
 810652e:	4a7a      	ldr	r2, [pc, #488]	; (8106718 <HAL_SAI_Init+0x284>)
 8106530:	4293      	cmp	r3, r2
 8106532:	d004      	beq.n	810653e <HAL_SAI_Init+0xaa>
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	4a80      	ldr	r2, [pc, #512]	; (810673c <HAL_SAI_Init+0x2a8>)
 810653a:	4293      	cmp	r3, r2
 810653c:	d102      	bne.n	8106544 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 810653e:	4b80      	ldr	r3, [pc, #512]	; (8106740 <HAL_SAI_Init+0x2ac>)
 8106540:	61bb      	str	r3, [r7, #24]
 8106542:	e001      	b.n	8106548 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8106544:	2301      	movs	r3, #1
 8106546:	e23f      	b.n	81069c8 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 810654e:	b2db      	uxtb	r3, r3
 8106550:	2b00      	cmp	r3, #0
 8106552:	d106      	bne.n	8106562 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	2200      	movs	r2, #0
 8106558:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 810655c:	6878      	ldr	r0, [r7, #4]
 810655e:	f7fa fe7d 	bl	810125c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 8106562:	6878      	ldr	r0, [r7, #4]
 8106564:	f000 fa40 	bl	81069e8 <SAI_Disable>
 8106568:	4603      	mov	r3, r0
 810656a:	2b00      	cmp	r3, #0
 810656c:	d001      	beq.n	8106572 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 810656e:	2301      	movs	r3, #1
 8106570:	e22a      	b.n	81069c8 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	2202      	movs	r2, #2
 8106576:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	68db      	ldr	r3, [r3, #12]
 810657e:	2b02      	cmp	r3, #2
 8106580:	d00c      	beq.n	810659c <HAL_SAI_Init+0x108>
 8106582:	2b02      	cmp	r3, #2
 8106584:	d80d      	bhi.n	81065a2 <HAL_SAI_Init+0x10e>
 8106586:	2b00      	cmp	r3, #0
 8106588:	d002      	beq.n	8106590 <HAL_SAI_Init+0xfc>
 810658a:	2b01      	cmp	r3, #1
 810658c:	d003      	beq.n	8106596 <HAL_SAI_Init+0x102>
 810658e:	e008      	b.n	81065a2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8106590:	2300      	movs	r3, #0
 8106592:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106594:	e008      	b.n	81065a8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8106596:	2310      	movs	r3, #16
 8106598:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 810659a:	e005      	b.n	81065a8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 810659c:	2320      	movs	r3, #32
 810659e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81065a0:	e002      	b.n	81065a8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 81065a2:	2300      	movs	r3, #0
 81065a4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81065a6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	689b      	ldr	r3, [r3, #8]
 81065ac:	2b05      	cmp	r3, #5
 81065ae:	d832      	bhi.n	8106616 <HAL_SAI_Init+0x182>
 81065b0:	a201      	add	r2, pc, #4	; (adr r2, 81065b8 <HAL_SAI_Init+0x124>)
 81065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81065b6:	bf00      	nop
 81065b8:	081065d1 	.word	0x081065d1
 81065bc:	081065d7 	.word	0x081065d7
 81065c0:	081065df 	.word	0x081065df
 81065c4:	081065e7 	.word	0x081065e7
 81065c8:	081065f7 	.word	0x081065f7
 81065cc:	08106607 	.word	0x08106607
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 81065d0:	2300      	movs	r3, #0
 81065d2:	61fb      	str	r3, [r7, #28]
      break;
 81065d4:	e022      	b.n	810661c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 81065d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81065da:	61fb      	str	r3, [r7, #28]
      break;
 81065dc:	e01e      	b.n	810661c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81065de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81065e2:	61fb      	str	r3, [r7, #28]
      break;
 81065e4:	e01a      	b.n	810661c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81065e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81065ea:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 81065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81065ee:	f043 0301 	orr.w	r3, r3, #1
 81065f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 81065f4:	e012      	b.n	810661c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 81065f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81065fa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 81065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81065fe:	f043 0302 	orr.w	r3, r3, #2
 8106602:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106604:	e00a      	b.n	810661c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8106606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810660a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 810660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810660e:	f043 0303 	orr.w	r3, r3, #3
 8106612:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8106614:	e002      	b.n	810661c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8106616:	2300      	movs	r3, #0
 8106618:	61fb      	str	r3, [r7, #28]
      break;
 810661a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 810661c:	69bb      	ldr	r3, [r7, #24]
 810661e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8106620:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	6a1b      	ldr	r3, [r3, #32]
 8106626:	2b00      	cmp	r3, #0
 8106628:	f000 80c5 	beq.w	81067b6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 810662c:	2300      	movs	r3, #0
 810662e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8106630:	687b      	ldr	r3, [r7, #4]
 8106632:	681b      	ldr	r3, [r3, #0]
 8106634:	4a37      	ldr	r2, [pc, #220]	; (8106714 <HAL_SAI_Init+0x280>)
 8106636:	4293      	cmp	r3, r2
 8106638:	d004      	beq.n	8106644 <HAL_SAI_Init+0x1b0>
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	681b      	ldr	r3, [r3, #0]
 810663e:	4a37      	ldr	r2, [pc, #220]	; (810671c <HAL_SAI_Init+0x288>)
 8106640:	4293      	cmp	r3, r2
 8106642:	d106      	bne.n	8106652 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8106644:	f44f 7080 	mov.w	r0, #256	; 0x100
 8106648:	f04f 0100 	mov.w	r1, #0
 810664c:	f7fe fa36 	bl	8104abc <HAL_RCCEx_GetPeriphCLKFreq>
 8106650:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8106652:	687b      	ldr	r3, [r7, #4]
 8106654:	681b      	ldr	r3, [r3, #0]
 8106656:	4a33      	ldr	r2, [pc, #204]	; (8106724 <HAL_SAI_Init+0x290>)
 8106658:	4293      	cmp	r3, r2
 810665a:	d004      	beq.n	8106666 <HAL_SAI_Init+0x1d2>
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	681b      	ldr	r3, [r3, #0]
 8106660:	4a31      	ldr	r2, [pc, #196]	; (8106728 <HAL_SAI_Init+0x294>)
 8106662:	4293      	cmp	r3, r2
 8106664:	d106      	bne.n	8106674 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8106666:	f44f 7000 	mov.w	r0, #512	; 0x200
 810666a:	f04f 0100 	mov.w	r1, #0
 810666e:	f7fe fa25 	bl	8104abc <HAL_RCCEx_GetPeriphCLKFreq>
 8106672:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8106674:	687b      	ldr	r3, [r7, #4]
 8106676:	681b      	ldr	r3, [r3, #0]
 8106678:	4a2d      	ldr	r2, [pc, #180]	; (8106730 <HAL_SAI_Init+0x29c>)
 810667a:	4293      	cmp	r3, r2
 810667c:	d004      	beq.n	8106688 <HAL_SAI_Init+0x1f4>
 810667e:	687b      	ldr	r3, [r7, #4]
 8106680:	681b      	ldr	r3, [r3, #0]
 8106682:	4a2c      	ldr	r2, [pc, #176]	; (8106734 <HAL_SAI_Init+0x2a0>)
 8106684:	4293      	cmp	r3, r2
 8106686:	d106      	bne.n	8106696 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8106688:	f44f 7000 	mov.w	r0, #512	; 0x200
 810668c:	f04f 0100 	mov.w	r1, #0
 8106690:	f7fe fa14 	bl	8104abc <HAL_RCCEx_GetPeriphCLKFreq>
 8106694:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	681b      	ldr	r3, [r3, #0]
 810669a:	4a1f      	ldr	r2, [pc, #124]	; (8106718 <HAL_SAI_Init+0x284>)
 810669c:	4293      	cmp	r3, r2
 810669e:	d106      	bne.n	81066ae <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 81066a0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 81066a4:	f04f 0100 	mov.w	r1, #0
 81066a8:	f7fe fa08 	bl	8104abc <HAL_RCCEx_GetPeriphCLKFreq>
 81066ac:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 81066ae:	687b      	ldr	r3, [r7, #4]
 81066b0:	681b      	ldr	r3, [r3, #0]
 81066b2:	4a22      	ldr	r2, [pc, #136]	; (810673c <HAL_SAI_Init+0x2a8>)
 81066b4:	4293      	cmp	r3, r2
 81066b6:	d106      	bne.n	81066c6 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 81066b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 81066bc:	f04f 0100 	mov.w	r1, #0
 81066c0:	f7fe f9fc 	bl	8104abc <HAL_RCCEx_GetPeriphCLKFreq>
 81066c4:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 81066c6:	687b      	ldr	r3, [r7, #4]
 81066c8:	699b      	ldr	r3, [r3, #24]
 81066ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81066ce:	d139      	bne.n	8106744 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81066d4:	2b04      	cmp	r3, #4
 81066d6:	d102      	bne.n	81066de <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 81066d8:	2340      	movs	r3, #64	; 0x40
 81066da:	60fb      	str	r3, [r7, #12]
 81066dc:	e00a      	b.n	81066f4 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81066e2:	2b08      	cmp	r3, #8
 81066e4:	d103      	bne.n	81066ee <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 81066e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 81066ea:	60fb      	str	r3, [r7, #12]
 81066ec:	e002      	b.n	81066f4 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066f2:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 81066f4:	697a      	ldr	r2, [r7, #20]
 81066f6:	4613      	mov	r3, r2
 81066f8:	009b      	lsls	r3, r3, #2
 81066fa:	4413      	add	r3, r2
 81066fc:	005b      	lsls	r3, r3, #1
 81066fe:	4619      	mov	r1, r3
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	6a1b      	ldr	r3, [r3, #32]
 8106704:	68fa      	ldr	r2, [r7, #12]
 8106706:	fb02 f303 	mul.w	r3, r2, r3
 810670a:	fbb1 f3f3 	udiv	r3, r1, r3
 810670e:	613b      	str	r3, [r7, #16]
 8106710:	e030      	b.n	8106774 <HAL_SAI_Init+0x2e0>
 8106712:	bf00      	nop
 8106714:	40015804 	.word	0x40015804
 8106718:	58005404 	.word	0x58005404
 810671c:	40015824 	.word	0x40015824
 8106720:	40015800 	.word	0x40015800
 8106724:	40015c04 	.word	0x40015c04
 8106728:	40015c24 	.word	0x40015c24
 810672c:	40015c00 	.word	0x40015c00
 8106730:	40016004 	.word	0x40016004
 8106734:	40016024 	.word	0x40016024
 8106738:	40016000 	.word	0x40016000
 810673c:	58005424 	.word	0x58005424
 8106740:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106748:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810674c:	d101      	bne.n	8106752 <HAL_SAI_Init+0x2be>
 810674e:	2302      	movs	r3, #2
 8106750:	e000      	b.n	8106754 <HAL_SAI_Init+0x2c0>
 8106752:	2301      	movs	r3, #1
 8106754:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8106756:	697a      	ldr	r2, [r7, #20]
 8106758:	4613      	mov	r3, r2
 810675a:	009b      	lsls	r3, r3, #2
 810675c:	4413      	add	r3, r2
 810675e:	005b      	lsls	r3, r3, #1
 8106760:	4619      	mov	r1, r3
 8106762:	687b      	ldr	r3, [r7, #4]
 8106764:	6a1b      	ldr	r3, [r3, #32]
 8106766:	68ba      	ldr	r2, [r7, #8]
 8106768:	fb02 f303 	mul.w	r3, r2, r3
 810676c:	021b      	lsls	r3, r3, #8
 810676e:	fbb1 f3f3 	udiv	r3, r1, r3
 8106772:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8106774:	693b      	ldr	r3, [r7, #16]
 8106776:	4a96      	ldr	r2, [pc, #600]	; (81069d0 <HAL_SAI_Init+0x53c>)
 8106778:	fba2 2303 	umull	r2, r3, r2, r3
 810677c:	08da      	lsrs	r2, r3, #3
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8106782:	6939      	ldr	r1, [r7, #16]
 8106784:	4b92      	ldr	r3, [pc, #584]	; (81069d0 <HAL_SAI_Init+0x53c>)
 8106786:	fba3 2301 	umull	r2, r3, r3, r1
 810678a:	08da      	lsrs	r2, r3, #3
 810678c:	4613      	mov	r3, r2
 810678e:	009b      	lsls	r3, r3, #2
 8106790:	4413      	add	r3, r2
 8106792:	005b      	lsls	r3, r3, #1
 8106794:	1aca      	subs	r2, r1, r3
 8106796:	2a08      	cmp	r2, #8
 8106798:	d904      	bls.n	81067a4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 810679a:	687b      	ldr	r3, [r7, #4]
 810679c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810679e:	1c5a      	adds	r2, r3, #1
 81067a0:	687b      	ldr	r3, [r7, #4]
 81067a2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 81067a4:	687b      	ldr	r3, [r7, #4]
 81067a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81067a8:	2b04      	cmp	r3, #4
 81067aa:	d104      	bne.n	81067b6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 81067ac:	687b      	ldr	r3, [r7, #4]
 81067ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81067b0:	085a      	lsrs	r2, r3, #1
 81067b2:	687b      	ldr	r3, [r7, #4]
 81067b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 81067b6:	687b      	ldr	r3, [r7, #4]
 81067b8:	685b      	ldr	r3, [r3, #4]
 81067ba:	2b00      	cmp	r3, #0
 81067bc:	d003      	beq.n	81067c6 <HAL_SAI_Init+0x332>
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	685b      	ldr	r3, [r3, #4]
 81067c2:	2b02      	cmp	r3, #2
 81067c4:	d109      	bne.n	81067da <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 81067c6:	687b      	ldr	r3, [r7, #4]
 81067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067ca:	2b01      	cmp	r3, #1
 81067cc:	d101      	bne.n	81067d2 <HAL_SAI_Init+0x33e>
 81067ce:	2300      	movs	r3, #0
 81067d0:	e001      	b.n	81067d6 <HAL_SAI_Init+0x342>
 81067d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 81067d6:	623b      	str	r3, [r7, #32]
 81067d8:	e008      	b.n	81067ec <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 81067da:	687b      	ldr	r3, [r7, #4]
 81067dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81067de:	2b01      	cmp	r3, #1
 81067e0:	d102      	bne.n	81067e8 <HAL_SAI_Init+0x354>
 81067e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 81067e6:	e000      	b.n	81067ea <HAL_SAI_Init+0x356>
 81067e8:	2300      	movs	r3, #0
 81067ea:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 81067ec:	f7fa ff92 	bl	8101714 <HAL_GetREVID>
 81067f0:	4603      	mov	r3, r0
 81067f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81067f6:	d331      	bcc.n	810685c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	681b      	ldr	r3, [r3, #0]
 81067fc:	6819      	ldr	r1, [r3, #0]
 81067fe:	687b      	ldr	r3, [r7, #4]
 8106800:	681a      	ldr	r2, [r3, #0]
 8106802:	4b74      	ldr	r3, [pc, #464]	; (81069d4 <HAL_SAI_Init+0x540>)
 8106804:	400b      	ands	r3, r1
 8106806:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106808:	687b      	ldr	r3, [r7, #4]
 810680a:	681b      	ldr	r3, [r3, #0]
 810680c:	6819      	ldr	r1, [r3, #0]
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	685a      	ldr	r2, [r3, #4]
 8106812:	687b      	ldr	r3, [r7, #4]
 8106814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106816:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106818:	687b      	ldr	r3, [r7, #4]
 810681a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810681c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106822:	431a      	orrs	r2, r3
 8106824:	6a3b      	ldr	r3, [r7, #32]
 8106826:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8106828:	69fb      	ldr	r3, [r7, #28]
 810682a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106830:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106832:	687b      	ldr	r3, [r7, #4]
 8106834:	695b      	ldr	r3, [r3, #20]
 8106836:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 810683c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106842:	051b      	lsls	r3, r3, #20
 8106844:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810684a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 810684c:	687b      	ldr	r3, [r7, #4]
 810684e:	691b      	ldr	r3, [r3, #16]
 8106850:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	681b      	ldr	r3, [r3, #0]
 8106856:	430a      	orrs	r2, r1
 8106858:	601a      	str	r2, [r3, #0]
 810685a:	e02d      	b.n	81068b8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 810685c:	687b      	ldr	r3, [r7, #4]
 810685e:	681b      	ldr	r3, [r3, #0]
 8106860:	6819      	ldr	r1, [r3, #0]
 8106862:	687b      	ldr	r3, [r7, #4]
 8106864:	681a      	ldr	r2, [r3, #0]
 8106866:	4b5c      	ldr	r3, [pc, #368]	; (81069d8 <HAL_SAI_Init+0x544>)
 8106868:	400b      	ands	r3, r1
 810686a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 810686c:	687b      	ldr	r3, [r7, #4]
 810686e:	681b      	ldr	r3, [r3, #0]
 8106870:	6819      	ldr	r1, [r3, #0]
 8106872:	687b      	ldr	r3, [r7, #4]
 8106874:	685a      	ldr	r2, [r3, #4]
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810687a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 810687c:	687b      	ldr	r3, [r7, #4]
 810687e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8106880:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8106882:	687b      	ldr	r3, [r7, #4]
 8106884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8106886:	431a      	orrs	r2, r3
 8106888:	6a3b      	ldr	r3, [r7, #32]
 810688a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 810688c:	69fb      	ldr	r3, [r7, #28]
 810688e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106890:	687b      	ldr	r3, [r7, #4]
 8106892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8106894:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8106896:	687b      	ldr	r3, [r7, #4]
 8106898:	695b      	ldr	r3, [r3, #20]
 810689a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 81068a0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81068a2:	687b      	ldr	r3, [r7, #4]
 81068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81068a6:	051b      	lsls	r3, r3, #20
 81068a8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 81068aa:	687b      	ldr	r3, [r7, #4]
 81068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 81068ae:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	681b      	ldr	r3, [r3, #0]
 81068b4:	430a      	orrs	r2, r1
 81068b6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 81068b8:	687b      	ldr	r3, [r7, #4]
 81068ba:	681b      	ldr	r3, [r3, #0]
 81068bc:	685b      	ldr	r3, [r3, #4]
 81068be:	687a      	ldr	r2, [r7, #4]
 81068c0:	6812      	ldr	r2, [r2, #0]
 81068c2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 81068c6:	f023 030f 	bic.w	r3, r3, #15
 81068ca:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 81068cc:	687b      	ldr	r3, [r7, #4]
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	6859      	ldr	r1, [r3, #4]
 81068d2:	687b      	ldr	r3, [r7, #4]
 81068d4:	69da      	ldr	r2, [r3, #28]
 81068d6:	687b      	ldr	r3, [r7, #4]
 81068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81068da:	431a      	orrs	r2, r3
 81068dc:	687b      	ldr	r3, [r7, #4]
 81068de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81068e0:	431a      	orrs	r2, r3
 81068e2:	687b      	ldr	r3, [r7, #4]
 81068e4:	681b      	ldr	r3, [r3, #0]
 81068e6:	430a      	orrs	r2, r1
 81068e8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 81068ea:	687b      	ldr	r3, [r7, #4]
 81068ec:	681b      	ldr	r3, [r3, #0]
 81068ee:	6899      	ldr	r1, [r3, #8]
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	681a      	ldr	r2, [r3, #0]
 81068f4:	4b39      	ldr	r3, [pc, #228]	; (81069dc <HAL_SAI_Init+0x548>)
 81068f6:	400b      	ands	r3, r1
 81068f8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 81068fa:	687b      	ldr	r3, [r7, #4]
 81068fc:	681b      	ldr	r3, [r3, #0]
 81068fe:	6899      	ldr	r1, [r3, #8]
 8106900:	687b      	ldr	r3, [r7, #4]
 8106902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106904:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8106906:	687b      	ldr	r3, [r7, #4]
 8106908:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 810690a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 810690c:	687b      	ldr	r3, [r7, #4]
 810690e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8106910:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8106912:	687b      	ldr	r3, [r7, #4]
 8106914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8106916:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8106918:	687b      	ldr	r3, [r7, #4]
 810691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810691c:	3b01      	subs	r3, #1
 810691e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8106920:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8106922:	687b      	ldr	r3, [r7, #4]
 8106924:	681b      	ldr	r3, [r3, #0]
 8106926:	430a      	orrs	r2, r1
 8106928:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 810692a:	687b      	ldr	r3, [r7, #4]
 810692c:	681b      	ldr	r3, [r3, #0]
 810692e:	68d9      	ldr	r1, [r3, #12]
 8106930:	687b      	ldr	r3, [r7, #4]
 8106932:	681a      	ldr	r2, [r3, #0]
 8106934:	f24f 0320 	movw	r3, #61472	; 0xf020
 8106938:	400b      	ands	r3, r1
 810693a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810693c:	687b      	ldr	r3, [r7, #4]
 810693e:	681b      	ldr	r3, [r3, #0]
 8106940:	68d9      	ldr	r1, [r3, #12]
 8106942:	687b      	ldr	r3, [r7, #4]
 8106944:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8106946:	687b      	ldr	r3, [r7, #4]
 8106948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810694a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 810694c:	687b      	ldr	r3, [r7, #4]
 810694e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8106950:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8106952:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8106954:	687b      	ldr	r3, [r7, #4]
 8106956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8106958:	3b01      	subs	r3, #1
 810695a:	021b      	lsls	r3, r3, #8
 810695c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 810695e:	687b      	ldr	r3, [r7, #4]
 8106960:	681b      	ldr	r3, [r3, #0]
 8106962:	430a      	orrs	r2, r1
 8106964:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8106966:	687b      	ldr	r3, [r7, #4]
 8106968:	681b      	ldr	r3, [r3, #0]
 810696a:	4a1d      	ldr	r2, [pc, #116]	; (81069e0 <HAL_SAI_Init+0x54c>)
 810696c:	4293      	cmp	r3, r2
 810696e:	d004      	beq.n	810697a <HAL_SAI_Init+0x4e6>
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	4a1b      	ldr	r2, [pc, #108]	; (81069e4 <HAL_SAI_Init+0x550>)
 8106976:	4293      	cmp	r3, r2
 8106978:	d119      	bne.n	81069ae <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 810697a:	69bb      	ldr	r3, [r7, #24]
 810697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810697e:	f023 0201 	bic.w	r2, r3, #1
 8106982:	69bb      	ldr	r3, [r7, #24]
 8106984:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8106986:	687b      	ldr	r3, [r7, #4]
 8106988:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 810698c:	2b01      	cmp	r3, #1
 810698e:	d10e      	bne.n	81069ae <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8106994:	687b      	ldr	r3, [r7, #4]
 8106996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106998:	3b01      	subs	r3, #1
 810699a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 810699c:	431a      	orrs	r2, r3
 810699e:	69bb      	ldr	r3, [r7, #24]
 81069a0:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 81069a2:	69bb      	ldr	r3, [r7, #24]
 81069a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81069a6:	f043 0201 	orr.w	r2, r3, #1
 81069aa:	69bb      	ldr	r3, [r7, #24]
 81069ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 81069ae:	687b      	ldr	r3, [r7, #4]
 81069b0:	2200      	movs	r2, #0
 81069b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 81069b6:	687b      	ldr	r3, [r7, #4]
 81069b8:	2201      	movs	r2, #1
 81069ba:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 81069be:	687b      	ldr	r3, [r7, #4]
 81069c0:	2200      	movs	r2, #0
 81069c2:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 81069c6:	2300      	movs	r3, #0
}
 81069c8:	4618      	mov	r0, r3
 81069ca:	3728      	adds	r7, #40	; 0x28
 81069cc:	46bd      	mov	sp, r7
 81069ce:	bd80      	pop	{r7, pc}
 81069d0:	cccccccd 	.word	0xcccccccd
 81069d4:	f005c010 	.word	0xf005c010
 81069d8:	f805c010 	.word	0xf805c010
 81069dc:	fff88000 	.word	0xfff88000
 81069e0:	40015804 	.word	0x40015804
 81069e4:	58005404 	.word	0x58005404

081069e8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 81069e8:	b480      	push	{r7}
 81069ea:	b085      	sub	sp, #20
 81069ec:	af00      	add	r7, sp, #0
 81069ee:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 81069f0:	4b18      	ldr	r3, [pc, #96]	; (8106a54 <SAI_Disable+0x6c>)
 81069f2:	681b      	ldr	r3, [r3, #0]
 81069f4:	4a18      	ldr	r2, [pc, #96]	; (8106a58 <SAI_Disable+0x70>)
 81069f6:	fba2 2303 	umull	r2, r3, r2, r3
 81069fa:	0b1b      	lsrs	r3, r3, #12
 81069fc:	009b      	lsls	r3, r3, #2
 81069fe:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8106a00:	2300      	movs	r3, #0
 8106a02:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	681b      	ldr	r3, [r3, #0]
 8106a08:	681a      	ldr	r2, [r3, #0]
 8106a0a:	687b      	ldr	r3, [r7, #4]
 8106a0c:	681b      	ldr	r3, [r3, #0]
 8106a0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8106a12:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8106a14:	68fb      	ldr	r3, [r7, #12]
 8106a16:	2b00      	cmp	r3, #0
 8106a18:	d10a      	bne.n	8106a30 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8106a1a:	687b      	ldr	r3, [r7, #4]
 8106a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8106a20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8106a24:	687b      	ldr	r3, [r7, #4]
 8106a26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8106a2a:	2303      	movs	r3, #3
 8106a2c:	72fb      	strb	r3, [r7, #11]
      break;
 8106a2e:	e009      	b.n	8106a44 <SAI_Disable+0x5c>
    }
    count--;
 8106a30:	68fb      	ldr	r3, [r7, #12]
 8106a32:	3b01      	subs	r3, #1
 8106a34:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8106a36:	687b      	ldr	r3, [r7, #4]
 8106a38:	681b      	ldr	r3, [r3, #0]
 8106a3a:	681b      	ldr	r3, [r3, #0]
 8106a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8106a40:	2b00      	cmp	r3, #0
 8106a42:	d1e7      	bne.n	8106a14 <SAI_Disable+0x2c>

  return status;
 8106a44:	7afb      	ldrb	r3, [r7, #11]
}
 8106a46:	4618      	mov	r0, r3
 8106a48:	3714      	adds	r7, #20
 8106a4a:	46bd      	mov	sp, r7
 8106a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106a50:	4770      	bx	lr
 8106a52:	bf00      	nop
 8106a54:	10000000 	.word	0x10000000
 8106a58:	95cbec1b 	.word	0x95cbec1b

08106a5c <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8106a5c:	b580      	push	{r7, lr}
 8106a5e:	b084      	sub	sp, #16
 8106a60:	af00      	add	r7, sp, #0
 8106a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8106a64:	687b      	ldr	r3, [r7, #4]
 8106a66:	2b00      	cmp	r3, #0
 8106a68:	d101      	bne.n	8106a6e <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8106a6a:	2301      	movs	r3, #1
 8106a6c:	e05e      	b.n	8106b2c <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8106a74:	b2db      	uxtb	r3, r3
 8106a76:	2b00      	cmp	r3, #0
 8106a78:	d106      	bne.n	8106a88 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8106a7a:	687b      	ldr	r3, [r7, #4]
 8106a7c:	2200      	movs	r2, #0
 8106a7e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8106a82:	6878      	ldr	r0, [r7, #4]
 8106a84:	f7fa facc 	bl	8101020 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	2202      	movs	r2, #2
 8106a8c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8106a90:	687b      	ldr	r3, [r7, #4]
 8106a92:	681b      	ldr	r3, [r3, #0]
 8106a94:	681a      	ldr	r2, [r3, #0]
 8106a96:	687b      	ldr	r3, [r7, #4]
 8106a98:	681b      	ldr	r3, [r3, #0]
 8106a9a:	f022 0203 	bic.w	r2, r2, #3
 8106a9e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8106aa0:	687b      	ldr	r3, [r7, #4]
 8106aa2:	681b      	ldr	r3, [r3, #0]
 8106aa4:	681b      	ldr	r3, [r3, #0]
 8106aa6:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8106aa8:	68fa      	ldr	r2, [r7, #12]
 8106aaa:	4b22      	ldr	r3, [pc, #136]	; (8106b34 <HAL_SPDIFRX_Init+0xd8>)
 8106aac:	4013      	ands	r3, r2
 8106aae:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8106ab0:	687b      	ldr	r3, [r7, #4]
 8106ab2:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8106ab4:	687b      	ldr	r3, [r7, #4]
 8106ab6:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8106ab8:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8106aba:	687b      	ldr	r3, [r7, #4]
 8106abc:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8106abe:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8106ac0:	687b      	ldr	r3, [r7, #4]
 8106ac2:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8106ac4:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8106ac6:	687b      	ldr	r3, [r7, #4]
 8106ac8:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8106aca:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8106acc:	687b      	ldr	r3, [r7, #4]
 8106ace:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8106ad0:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8106ad2:	687b      	ldr	r3, [r7, #4]
 8106ad4:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8106ad6:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8106ad8:	687b      	ldr	r3, [r7, #4]
 8106ada:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8106adc:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8106ade:	687b      	ldr	r3, [r7, #4]
 8106ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8106ae2:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8106ae8:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8106aea:	68fa      	ldr	r2, [r7, #12]
 8106aec:	4313      	orrs	r3, r2
 8106aee:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8106af0:	687b      	ldr	r3, [r7, #4]
 8106af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8106af6:	2b01      	cmp	r3, #1
 8106af8:	d103      	bne.n	8106b02 <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8106afa:	68fb      	ldr	r3, [r7, #12]
 8106afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106b00:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8106b02:	687b      	ldr	r3, [r7, #4]
 8106b04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8106b08:	2b01      	cmp	r3, #1
 8106b0a:	d103      	bne.n	8106b14 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8106b0c:	68fb      	ldr	r3, [r7, #12]
 8106b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106b12:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	681b      	ldr	r3, [r3, #0]
 8106b18:	68fa      	ldr	r2, [r7, #12]
 8106b1a:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8106b1c:	687b      	ldr	r3, [r7, #4]
 8106b1e:	2200      	movs	r2, #0
 8106b20:	64da      	str	r2, [r3, #76]	; 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8106b22:	687b      	ldr	r3, [r7, #4]
 8106b24:	2201      	movs	r2, #1
 8106b26:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8106b2a:	2300      	movs	r3, #0
}
 8106b2c:	4618      	mov	r0, r3
 8106b2e:	3710      	adds	r7, #16
 8106b30:	46bd      	mov	sp, r7
 8106b32:	bd80      	pop	{r7, pc}
 8106b34:	ffc88407 	.word	0xffc88407

08106b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8106b38:	b580      	push	{r7, lr}
 8106b3a:	b082      	sub	sp, #8
 8106b3c:	af00      	add	r7, sp, #0
 8106b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	2b00      	cmp	r3, #0
 8106b44:	d101      	bne.n	8106b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106b46:	2301      	movs	r3, #1
 8106b48:	e049      	b.n	8106bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106b50:	b2db      	uxtb	r3, r3
 8106b52:	2b00      	cmp	r3, #0
 8106b54:	d106      	bne.n	8106b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106b56:	687b      	ldr	r3, [r7, #4]
 8106b58:	2200      	movs	r2, #0
 8106b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106b5e:	6878      	ldr	r0, [r7, #4]
 8106b60:	f7fa faf8 	bl	8101154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106b64:	687b      	ldr	r3, [r7, #4]
 8106b66:	2202      	movs	r2, #2
 8106b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106b6c:	687b      	ldr	r3, [r7, #4]
 8106b6e:	681a      	ldr	r2, [r3, #0]
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	3304      	adds	r3, #4
 8106b74:	4619      	mov	r1, r3
 8106b76:	4610      	mov	r0, r2
 8106b78:	f000 fa04 	bl	8106f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106b7c:	687b      	ldr	r3, [r7, #4]
 8106b7e:	2201      	movs	r2, #1
 8106b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b84:	687b      	ldr	r3, [r7, #4]
 8106b86:	2201      	movs	r2, #1
 8106b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106b8c:	687b      	ldr	r3, [r7, #4]
 8106b8e:	2201      	movs	r2, #1
 8106b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106b94:	687b      	ldr	r3, [r7, #4]
 8106b96:	2201      	movs	r2, #1
 8106b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106b9c:	687b      	ldr	r3, [r7, #4]
 8106b9e:	2201      	movs	r2, #1
 8106ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106ba4:	687b      	ldr	r3, [r7, #4]
 8106ba6:	2201      	movs	r2, #1
 8106ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106bac:	687b      	ldr	r3, [r7, #4]
 8106bae:	2201      	movs	r2, #1
 8106bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	2201      	movs	r2, #1
 8106bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	2201      	movs	r2, #1
 8106bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	2201      	movs	r2, #1
 8106bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	2201      	movs	r2, #1
 8106bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	2201      	movs	r2, #1
 8106bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106bdc:	2300      	movs	r3, #0
}
 8106bde:	4618      	mov	r0, r3
 8106be0:	3708      	adds	r7, #8
 8106be2:	46bd      	mov	sp, r7
 8106be4:	bd80      	pop	{r7, pc}

08106be6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8106be6:	b580      	push	{r7, lr}
 8106be8:	b082      	sub	sp, #8
 8106bea:	af00      	add	r7, sp, #0
 8106bec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	2b00      	cmp	r3, #0
 8106bf2:	d101      	bne.n	8106bf8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8106bf4:	2301      	movs	r3, #1
 8106bf6:	e049      	b.n	8106c8c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106bf8:	687b      	ldr	r3, [r7, #4]
 8106bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106bfe:	b2db      	uxtb	r3, r3
 8106c00:	2b00      	cmp	r3, #0
 8106c02:	d106      	bne.n	8106c12 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106c04:	687b      	ldr	r3, [r7, #4]
 8106c06:	2200      	movs	r2, #0
 8106c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8106c0c:	6878      	ldr	r0, [r7, #4]
 8106c0e:	f7fa fa7f 	bl	8101110 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	2202      	movs	r2, #2
 8106c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8106c1a:	687b      	ldr	r3, [r7, #4]
 8106c1c:	681a      	ldr	r2, [r3, #0]
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	3304      	adds	r3, #4
 8106c22:	4619      	mov	r1, r3
 8106c24:	4610      	mov	r0, r2
 8106c26:	f000 f9ad 	bl	8106f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106c2a:	687b      	ldr	r3, [r7, #4]
 8106c2c:	2201      	movs	r2, #1
 8106c2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106c32:	687b      	ldr	r3, [r7, #4]
 8106c34:	2201      	movs	r2, #1
 8106c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106c3a:	687b      	ldr	r3, [r7, #4]
 8106c3c:	2201      	movs	r2, #1
 8106c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106c42:	687b      	ldr	r3, [r7, #4]
 8106c44:	2201      	movs	r2, #1
 8106c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	2201      	movs	r2, #1
 8106c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106c52:	687b      	ldr	r3, [r7, #4]
 8106c54:	2201      	movs	r2, #1
 8106c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	2201      	movs	r2, #1
 8106c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106c62:	687b      	ldr	r3, [r7, #4]
 8106c64:	2201      	movs	r2, #1
 8106c66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106c6a:	687b      	ldr	r3, [r7, #4]
 8106c6c:	2201      	movs	r2, #1
 8106c6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106c72:	687b      	ldr	r3, [r7, #4]
 8106c74:	2201      	movs	r2, #1
 8106c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106c7a:	687b      	ldr	r3, [r7, #4]
 8106c7c:	2201      	movs	r2, #1
 8106c7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106c82:	687b      	ldr	r3, [r7, #4]
 8106c84:	2201      	movs	r2, #1
 8106c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106c8a:	2300      	movs	r3, #0
}
 8106c8c:	4618      	mov	r0, r3
 8106c8e:	3708      	adds	r7, #8
 8106c90:	46bd      	mov	sp, r7
 8106c92:	bd80      	pop	{r7, pc}

08106c94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8106c94:	b580      	push	{r7, lr}
 8106c96:	b082      	sub	sp, #8
 8106c98:	af00      	add	r7, sp, #0
 8106c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	2b00      	cmp	r3, #0
 8106ca0:	d101      	bne.n	8106ca6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8106ca2:	2301      	movs	r3, #1
 8106ca4:	e049      	b.n	8106d3a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106ca6:	687b      	ldr	r3, [r7, #4]
 8106ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106cac:	b2db      	uxtb	r3, r3
 8106cae:	2b00      	cmp	r3, #0
 8106cb0:	d106      	bne.n	8106cc0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106cb2:	687b      	ldr	r3, [r7, #4]
 8106cb4:	2200      	movs	r2, #0
 8106cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8106cba:	6878      	ldr	r0, [r7, #4]
 8106cbc:	f000 f841 	bl	8106d42 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	2202      	movs	r2, #2
 8106cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106cc8:	687b      	ldr	r3, [r7, #4]
 8106cca:	681a      	ldr	r2, [r3, #0]
 8106ccc:	687b      	ldr	r3, [r7, #4]
 8106cce:	3304      	adds	r3, #4
 8106cd0:	4619      	mov	r1, r3
 8106cd2:	4610      	mov	r0, r2
 8106cd4:	f000 f956 	bl	8106f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106cd8:	687b      	ldr	r3, [r7, #4]
 8106cda:	2201      	movs	r2, #1
 8106cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106ce0:	687b      	ldr	r3, [r7, #4]
 8106ce2:	2201      	movs	r2, #1
 8106ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	2201      	movs	r2, #1
 8106cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	2201      	movs	r2, #1
 8106cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	2201      	movs	r2, #1
 8106cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106d00:	687b      	ldr	r3, [r7, #4]
 8106d02:	2201      	movs	r2, #1
 8106d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106d08:	687b      	ldr	r3, [r7, #4]
 8106d0a:	2201      	movs	r2, #1
 8106d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106d10:	687b      	ldr	r3, [r7, #4]
 8106d12:	2201      	movs	r2, #1
 8106d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106d18:	687b      	ldr	r3, [r7, #4]
 8106d1a:	2201      	movs	r2, #1
 8106d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	2201      	movs	r2, #1
 8106d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	2201      	movs	r2, #1
 8106d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	2201      	movs	r2, #1
 8106d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106d38:	2300      	movs	r3, #0
}
 8106d3a:	4618      	mov	r0, r3
 8106d3c:	3708      	adds	r7, #8
 8106d3e:	46bd      	mov	sp, r7
 8106d40:	bd80      	pop	{r7, pc}

08106d42 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8106d42:	b480      	push	{r7}
 8106d44:	b083      	sub	sp, #12
 8106d46:	af00      	add	r7, sp, #0
 8106d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8106d4a:	bf00      	nop
 8106d4c:	370c      	adds	r7, #12
 8106d4e:	46bd      	mov	sp, r7
 8106d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106d54:	4770      	bx	lr
	...

08106d58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8106d58:	b580      	push	{r7, lr}
 8106d5a:	b086      	sub	sp, #24
 8106d5c:	af00      	add	r7, sp, #0
 8106d5e:	60f8      	str	r0, [r7, #12]
 8106d60:	60b9      	str	r1, [r7, #8]
 8106d62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106d64:	2300      	movs	r3, #0
 8106d66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106d68:	68fb      	ldr	r3, [r7, #12]
 8106d6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106d6e:	2b01      	cmp	r3, #1
 8106d70:	d101      	bne.n	8106d76 <HAL_TIM_OC_ConfigChannel+0x1e>
 8106d72:	2302      	movs	r3, #2
 8106d74:	e066      	b.n	8106e44 <HAL_TIM_OC_ConfigChannel+0xec>
 8106d76:	68fb      	ldr	r3, [r7, #12]
 8106d78:	2201      	movs	r2, #1
 8106d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8106d7e:	687b      	ldr	r3, [r7, #4]
 8106d80:	2b14      	cmp	r3, #20
 8106d82:	d857      	bhi.n	8106e34 <HAL_TIM_OC_ConfigChannel+0xdc>
 8106d84:	a201      	add	r2, pc, #4	; (adr r2, 8106d8c <HAL_TIM_OC_ConfigChannel+0x34>)
 8106d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d8a:	bf00      	nop
 8106d8c:	08106de1 	.word	0x08106de1
 8106d90:	08106e35 	.word	0x08106e35
 8106d94:	08106e35 	.word	0x08106e35
 8106d98:	08106e35 	.word	0x08106e35
 8106d9c:	08106def 	.word	0x08106def
 8106da0:	08106e35 	.word	0x08106e35
 8106da4:	08106e35 	.word	0x08106e35
 8106da8:	08106e35 	.word	0x08106e35
 8106dac:	08106dfd 	.word	0x08106dfd
 8106db0:	08106e35 	.word	0x08106e35
 8106db4:	08106e35 	.word	0x08106e35
 8106db8:	08106e35 	.word	0x08106e35
 8106dbc:	08106e0b 	.word	0x08106e0b
 8106dc0:	08106e35 	.word	0x08106e35
 8106dc4:	08106e35 	.word	0x08106e35
 8106dc8:	08106e35 	.word	0x08106e35
 8106dcc:	08106e19 	.word	0x08106e19
 8106dd0:	08106e35 	.word	0x08106e35
 8106dd4:	08106e35 	.word	0x08106e35
 8106dd8:	08106e35 	.word	0x08106e35
 8106ddc:	08106e27 	.word	0x08106e27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8106de0:	68fb      	ldr	r3, [r7, #12]
 8106de2:	681b      	ldr	r3, [r3, #0]
 8106de4:	68b9      	ldr	r1, [r7, #8]
 8106de6:	4618      	mov	r0, r3
 8106de8:	f000 f966 	bl	81070b8 <TIM_OC1_SetConfig>
      break;
 8106dec:	e025      	b.n	8106e3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106dee:	68fb      	ldr	r3, [r7, #12]
 8106df0:	681b      	ldr	r3, [r3, #0]
 8106df2:	68b9      	ldr	r1, [r7, #8]
 8106df4:	4618      	mov	r0, r3
 8106df6:	f000 f9ef 	bl	81071d8 <TIM_OC2_SetConfig>
      break;
 8106dfa:	e01e      	b.n	8106e3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8106dfc:	68fb      	ldr	r3, [r7, #12]
 8106dfe:	681b      	ldr	r3, [r3, #0]
 8106e00:	68b9      	ldr	r1, [r7, #8]
 8106e02:	4618      	mov	r0, r3
 8106e04:	f000 fa72 	bl	81072ec <TIM_OC3_SetConfig>
      break;
 8106e08:	e017      	b.n	8106e3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8106e0a:	68fb      	ldr	r3, [r7, #12]
 8106e0c:	681b      	ldr	r3, [r3, #0]
 8106e0e:	68b9      	ldr	r1, [r7, #8]
 8106e10:	4618      	mov	r0, r3
 8106e12:	f000 faf3 	bl	81073fc <TIM_OC4_SetConfig>
      break;
 8106e16:	e010      	b.n	8106e3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8106e18:	68fb      	ldr	r3, [r7, #12]
 8106e1a:	681b      	ldr	r3, [r3, #0]
 8106e1c:	68b9      	ldr	r1, [r7, #8]
 8106e1e:	4618      	mov	r0, r3
 8106e20:	f000 fb56 	bl	81074d0 <TIM_OC5_SetConfig>
      break;
 8106e24:	e009      	b.n	8106e3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8106e26:	68fb      	ldr	r3, [r7, #12]
 8106e28:	681b      	ldr	r3, [r3, #0]
 8106e2a:	68b9      	ldr	r1, [r7, #8]
 8106e2c:	4618      	mov	r0, r3
 8106e2e:	f000 fbb3 	bl	8107598 <TIM_OC6_SetConfig>
      break;
 8106e32:	e002      	b.n	8106e3a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8106e34:	2301      	movs	r3, #1
 8106e36:	75fb      	strb	r3, [r7, #23]
      break;
 8106e38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106e3a:	68fb      	ldr	r3, [r7, #12]
 8106e3c:	2200      	movs	r2, #0
 8106e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8106e44:	4618      	mov	r0, r3
 8106e46:	3718      	adds	r7, #24
 8106e48:	46bd      	mov	sp, r7
 8106e4a:	bd80      	pop	{r7, pc}

08106e4c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8106e4c:	b580      	push	{r7, lr}
 8106e4e:	b086      	sub	sp, #24
 8106e50:	af00      	add	r7, sp, #0
 8106e52:	60f8      	str	r0, [r7, #12]
 8106e54:	60b9      	str	r1, [r7, #8]
 8106e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8106e58:	2300      	movs	r3, #0
 8106e5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106e5c:	68fb      	ldr	r3, [r7, #12]
 8106e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106e62:	2b01      	cmp	r3, #1
 8106e64:	d101      	bne.n	8106e6a <HAL_TIM_IC_ConfigChannel+0x1e>
 8106e66:	2302      	movs	r3, #2
 8106e68:	e088      	b.n	8106f7c <HAL_TIM_IC_ConfigChannel+0x130>
 8106e6a:	68fb      	ldr	r3, [r7, #12]
 8106e6c:	2201      	movs	r2, #1
 8106e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8106e72:	687b      	ldr	r3, [r7, #4]
 8106e74:	2b00      	cmp	r3, #0
 8106e76:	d11b      	bne.n	8106eb0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8106e78:	68fb      	ldr	r3, [r7, #12]
 8106e7a:	6818      	ldr	r0, [r3, #0]
 8106e7c:	68bb      	ldr	r3, [r7, #8]
 8106e7e:	6819      	ldr	r1, [r3, #0]
 8106e80:	68bb      	ldr	r3, [r7, #8]
 8106e82:	685a      	ldr	r2, [r3, #4]
 8106e84:	68bb      	ldr	r3, [r7, #8]
 8106e86:	68db      	ldr	r3, [r3, #12]
 8106e88:	f000 fbec 	bl	8107664 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8106e8c:	68fb      	ldr	r3, [r7, #12]
 8106e8e:	681b      	ldr	r3, [r3, #0]
 8106e90:	699a      	ldr	r2, [r3, #24]
 8106e92:	68fb      	ldr	r3, [r7, #12]
 8106e94:	681b      	ldr	r3, [r3, #0]
 8106e96:	f022 020c 	bic.w	r2, r2, #12
 8106e9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8106e9c:	68fb      	ldr	r3, [r7, #12]
 8106e9e:	681b      	ldr	r3, [r3, #0]
 8106ea0:	6999      	ldr	r1, [r3, #24]
 8106ea2:	68bb      	ldr	r3, [r7, #8]
 8106ea4:	689a      	ldr	r2, [r3, #8]
 8106ea6:	68fb      	ldr	r3, [r7, #12]
 8106ea8:	681b      	ldr	r3, [r3, #0]
 8106eaa:	430a      	orrs	r2, r1
 8106eac:	619a      	str	r2, [r3, #24]
 8106eae:	e060      	b.n	8106f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	2b04      	cmp	r3, #4
 8106eb4:	d11c      	bne.n	8106ef0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8106eb6:	68fb      	ldr	r3, [r7, #12]
 8106eb8:	6818      	ldr	r0, [r3, #0]
 8106eba:	68bb      	ldr	r3, [r7, #8]
 8106ebc:	6819      	ldr	r1, [r3, #0]
 8106ebe:	68bb      	ldr	r3, [r7, #8]
 8106ec0:	685a      	ldr	r2, [r3, #4]
 8106ec2:	68bb      	ldr	r3, [r7, #8]
 8106ec4:	68db      	ldr	r3, [r3, #12]
 8106ec6:	f000 fc41 	bl	810774c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8106eca:	68fb      	ldr	r3, [r7, #12]
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	699a      	ldr	r2, [r3, #24]
 8106ed0:	68fb      	ldr	r3, [r7, #12]
 8106ed2:	681b      	ldr	r3, [r3, #0]
 8106ed4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106ed8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8106eda:	68fb      	ldr	r3, [r7, #12]
 8106edc:	681b      	ldr	r3, [r3, #0]
 8106ede:	6999      	ldr	r1, [r3, #24]
 8106ee0:	68bb      	ldr	r3, [r7, #8]
 8106ee2:	689b      	ldr	r3, [r3, #8]
 8106ee4:	021a      	lsls	r2, r3, #8
 8106ee6:	68fb      	ldr	r3, [r7, #12]
 8106ee8:	681b      	ldr	r3, [r3, #0]
 8106eea:	430a      	orrs	r2, r1
 8106eec:	619a      	str	r2, [r3, #24]
 8106eee:	e040      	b.n	8106f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8106ef0:	687b      	ldr	r3, [r7, #4]
 8106ef2:	2b08      	cmp	r3, #8
 8106ef4:	d11b      	bne.n	8106f2e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8106ef6:	68fb      	ldr	r3, [r7, #12]
 8106ef8:	6818      	ldr	r0, [r3, #0]
 8106efa:	68bb      	ldr	r3, [r7, #8]
 8106efc:	6819      	ldr	r1, [r3, #0]
 8106efe:	68bb      	ldr	r3, [r7, #8]
 8106f00:	685a      	ldr	r2, [r3, #4]
 8106f02:	68bb      	ldr	r3, [r7, #8]
 8106f04:	68db      	ldr	r3, [r3, #12]
 8106f06:	f000 fc5e 	bl	81077c6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8106f0a:	68fb      	ldr	r3, [r7, #12]
 8106f0c:	681b      	ldr	r3, [r3, #0]
 8106f0e:	69da      	ldr	r2, [r3, #28]
 8106f10:	68fb      	ldr	r3, [r7, #12]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	f022 020c 	bic.w	r2, r2, #12
 8106f18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8106f1a:	68fb      	ldr	r3, [r7, #12]
 8106f1c:	681b      	ldr	r3, [r3, #0]
 8106f1e:	69d9      	ldr	r1, [r3, #28]
 8106f20:	68bb      	ldr	r3, [r7, #8]
 8106f22:	689a      	ldr	r2, [r3, #8]
 8106f24:	68fb      	ldr	r3, [r7, #12]
 8106f26:	681b      	ldr	r3, [r3, #0]
 8106f28:	430a      	orrs	r2, r1
 8106f2a:	61da      	str	r2, [r3, #28]
 8106f2c:	e021      	b.n	8106f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	2b0c      	cmp	r3, #12
 8106f32:	d11c      	bne.n	8106f6e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8106f34:	68fb      	ldr	r3, [r7, #12]
 8106f36:	6818      	ldr	r0, [r3, #0]
 8106f38:	68bb      	ldr	r3, [r7, #8]
 8106f3a:	6819      	ldr	r1, [r3, #0]
 8106f3c:	68bb      	ldr	r3, [r7, #8]
 8106f3e:	685a      	ldr	r2, [r3, #4]
 8106f40:	68bb      	ldr	r3, [r7, #8]
 8106f42:	68db      	ldr	r3, [r3, #12]
 8106f44:	f000 fc7b 	bl	810783e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8106f48:	68fb      	ldr	r3, [r7, #12]
 8106f4a:	681b      	ldr	r3, [r3, #0]
 8106f4c:	69da      	ldr	r2, [r3, #28]
 8106f4e:	68fb      	ldr	r3, [r7, #12]
 8106f50:	681b      	ldr	r3, [r3, #0]
 8106f52:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8106f56:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8106f58:	68fb      	ldr	r3, [r7, #12]
 8106f5a:	681b      	ldr	r3, [r3, #0]
 8106f5c:	69d9      	ldr	r1, [r3, #28]
 8106f5e:	68bb      	ldr	r3, [r7, #8]
 8106f60:	689b      	ldr	r3, [r3, #8]
 8106f62:	021a      	lsls	r2, r3, #8
 8106f64:	68fb      	ldr	r3, [r7, #12]
 8106f66:	681b      	ldr	r3, [r3, #0]
 8106f68:	430a      	orrs	r2, r1
 8106f6a:	61da      	str	r2, [r3, #28]
 8106f6c:	e001      	b.n	8106f72 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8106f6e:	2301      	movs	r3, #1
 8106f70:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8106f72:	68fb      	ldr	r3, [r7, #12]
 8106f74:	2200      	movs	r2, #0
 8106f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8106f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8106f7c:	4618      	mov	r0, r3
 8106f7e:	3718      	adds	r7, #24
 8106f80:	46bd      	mov	sp, r7
 8106f82:	bd80      	pop	{r7, pc}

08106f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8106f84:	b480      	push	{r7}
 8106f86:	b085      	sub	sp, #20
 8106f88:	af00      	add	r7, sp, #0
 8106f8a:	6078      	str	r0, [r7, #4]
 8106f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	681b      	ldr	r3, [r3, #0]
 8106f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106f94:	687b      	ldr	r3, [r7, #4]
 8106f96:	4a40      	ldr	r2, [pc, #256]	; (8107098 <TIM_Base_SetConfig+0x114>)
 8106f98:	4293      	cmp	r3, r2
 8106f9a:	d013      	beq.n	8106fc4 <TIM_Base_SetConfig+0x40>
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106fa2:	d00f      	beq.n	8106fc4 <TIM_Base_SetConfig+0x40>
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	4a3d      	ldr	r2, [pc, #244]	; (810709c <TIM_Base_SetConfig+0x118>)
 8106fa8:	4293      	cmp	r3, r2
 8106faa:	d00b      	beq.n	8106fc4 <TIM_Base_SetConfig+0x40>
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	4a3c      	ldr	r2, [pc, #240]	; (81070a0 <TIM_Base_SetConfig+0x11c>)
 8106fb0:	4293      	cmp	r3, r2
 8106fb2:	d007      	beq.n	8106fc4 <TIM_Base_SetConfig+0x40>
 8106fb4:	687b      	ldr	r3, [r7, #4]
 8106fb6:	4a3b      	ldr	r2, [pc, #236]	; (81070a4 <TIM_Base_SetConfig+0x120>)
 8106fb8:	4293      	cmp	r3, r2
 8106fba:	d003      	beq.n	8106fc4 <TIM_Base_SetConfig+0x40>
 8106fbc:	687b      	ldr	r3, [r7, #4]
 8106fbe:	4a3a      	ldr	r2, [pc, #232]	; (81070a8 <TIM_Base_SetConfig+0x124>)
 8106fc0:	4293      	cmp	r3, r2
 8106fc2:	d108      	bne.n	8106fd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106fc4:	68fb      	ldr	r3, [r7, #12]
 8106fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106fca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106fcc:	683b      	ldr	r3, [r7, #0]
 8106fce:	685b      	ldr	r3, [r3, #4]
 8106fd0:	68fa      	ldr	r2, [r7, #12]
 8106fd2:	4313      	orrs	r3, r2
 8106fd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	4a2f      	ldr	r2, [pc, #188]	; (8107098 <TIM_Base_SetConfig+0x114>)
 8106fda:	4293      	cmp	r3, r2
 8106fdc:	d01f      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 8106fde:	687b      	ldr	r3, [r7, #4]
 8106fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106fe4:	d01b      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	4a2c      	ldr	r2, [pc, #176]	; (810709c <TIM_Base_SetConfig+0x118>)
 8106fea:	4293      	cmp	r3, r2
 8106fec:	d017      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 8106fee:	687b      	ldr	r3, [r7, #4]
 8106ff0:	4a2b      	ldr	r2, [pc, #172]	; (81070a0 <TIM_Base_SetConfig+0x11c>)
 8106ff2:	4293      	cmp	r3, r2
 8106ff4:	d013      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 8106ff6:	687b      	ldr	r3, [r7, #4]
 8106ff8:	4a2a      	ldr	r2, [pc, #168]	; (81070a4 <TIM_Base_SetConfig+0x120>)
 8106ffa:	4293      	cmp	r3, r2
 8106ffc:	d00f      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	4a29      	ldr	r2, [pc, #164]	; (81070a8 <TIM_Base_SetConfig+0x124>)
 8107002:	4293      	cmp	r3, r2
 8107004:	d00b      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 8107006:	687b      	ldr	r3, [r7, #4]
 8107008:	4a28      	ldr	r2, [pc, #160]	; (81070ac <TIM_Base_SetConfig+0x128>)
 810700a:	4293      	cmp	r3, r2
 810700c:	d007      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 810700e:	687b      	ldr	r3, [r7, #4]
 8107010:	4a27      	ldr	r2, [pc, #156]	; (81070b0 <TIM_Base_SetConfig+0x12c>)
 8107012:	4293      	cmp	r3, r2
 8107014:	d003      	beq.n	810701e <TIM_Base_SetConfig+0x9a>
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	4a26      	ldr	r2, [pc, #152]	; (81070b4 <TIM_Base_SetConfig+0x130>)
 810701a:	4293      	cmp	r3, r2
 810701c:	d108      	bne.n	8107030 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810701e:	68fb      	ldr	r3, [r7, #12]
 8107020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107026:	683b      	ldr	r3, [r7, #0]
 8107028:	68db      	ldr	r3, [r3, #12]
 810702a:	68fa      	ldr	r2, [r7, #12]
 810702c:	4313      	orrs	r3, r2
 810702e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107030:	68fb      	ldr	r3, [r7, #12]
 8107032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107036:	683b      	ldr	r3, [r7, #0]
 8107038:	695b      	ldr	r3, [r3, #20]
 810703a:	4313      	orrs	r3, r2
 810703c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810703e:	687b      	ldr	r3, [r7, #4]
 8107040:	68fa      	ldr	r2, [r7, #12]
 8107042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107044:	683b      	ldr	r3, [r7, #0]
 8107046:	689a      	ldr	r2, [r3, #8]
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810704c:	683b      	ldr	r3, [r7, #0]
 810704e:	681a      	ldr	r2, [r3, #0]
 8107050:	687b      	ldr	r3, [r7, #4]
 8107052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107054:	687b      	ldr	r3, [r7, #4]
 8107056:	4a10      	ldr	r2, [pc, #64]	; (8107098 <TIM_Base_SetConfig+0x114>)
 8107058:	4293      	cmp	r3, r2
 810705a:	d00f      	beq.n	810707c <TIM_Base_SetConfig+0xf8>
 810705c:	687b      	ldr	r3, [r7, #4]
 810705e:	4a12      	ldr	r2, [pc, #72]	; (81070a8 <TIM_Base_SetConfig+0x124>)
 8107060:	4293      	cmp	r3, r2
 8107062:	d00b      	beq.n	810707c <TIM_Base_SetConfig+0xf8>
 8107064:	687b      	ldr	r3, [r7, #4]
 8107066:	4a11      	ldr	r2, [pc, #68]	; (81070ac <TIM_Base_SetConfig+0x128>)
 8107068:	4293      	cmp	r3, r2
 810706a:	d007      	beq.n	810707c <TIM_Base_SetConfig+0xf8>
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	4a10      	ldr	r2, [pc, #64]	; (81070b0 <TIM_Base_SetConfig+0x12c>)
 8107070:	4293      	cmp	r3, r2
 8107072:	d003      	beq.n	810707c <TIM_Base_SetConfig+0xf8>
 8107074:	687b      	ldr	r3, [r7, #4]
 8107076:	4a0f      	ldr	r2, [pc, #60]	; (81070b4 <TIM_Base_SetConfig+0x130>)
 8107078:	4293      	cmp	r3, r2
 810707a:	d103      	bne.n	8107084 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810707c:	683b      	ldr	r3, [r7, #0]
 810707e:	691a      	ldr	r2, [r3, #16]
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	2201      	movs	r2, #1
 8107088:	615a      	str	r2, [r3, #20]
}
 810708a:	bf00      	nop
 810708c:	3714      	adds	r7, #20
 810708e:	46bd      	mov	sp, r7
 8107090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107094:	4770      	bx	lr
 8107096:	bf00      	nop
 8107098:	40010000 	.word	0x40010000
 810709c:	40000400 	.word	0x40000400
 81070a0:	40000800 	.word	0x40000800
 81070a4:	40000c00 	.word	0x40000c00
 81070a8:	40010400 	.word	0x40010400
 81070ac:	40014000 	.word	0x40014000
 81070b0:	40014400 	.word	0x40014400
 81070b4:	40014800 	.word	0x40014800

081070b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81070b8:	b480      	push	{r7}
 81070ba:	b087      	sub	sp, #28
 81070bc:	af00      	add	r7, sp, #0
 81070be:	6078      	str	r0, [r7, #4]
 81070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81070c2:	687b      	ldr	r3, [r7, #4]
 81070c4:	6a1b      	ldr	r3, [r3, #32]
 81070c6:	f023 0201 	bic.w	r2, r3, #1
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	6a1b      	ldr	r3, [r3, #32]
 81070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81070d4:	687b      	ldr	r3, [r7, #4]
 81070d6:	685b      	ldr	r3, [r3, #4]
 81070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81070da:	687b      	ldr	r3, [r7, #4]
 81070dc:	699b      	ldr	r3, [r3, #24]
 81070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 81070e0:	68fb      	ldr	r3, [r7, #12]
 81070e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81070e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81070ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 81070ec:	68fb      	ldr	r3, [r7, #12]
 81070ee:	f023 0303 	bic.w	r3, r3, #3
 81070f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 81070f4:	683b      	ldr	r3, [r7, #0]
 81070f6:	681b      	ldr	r3, [r3, #0]
 81070f8:	68fa      	ldr	r2, [r7, #12]
 81070fa:	4313      	orrs	r3, r2
 81070fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 81070fe:	697b      	ldr	r3, [r7, #20]
 8107100:	f023 0302 	bic.w	r3, r3, #2
 8107104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107106:	683b      	ldr	r3, [r7, #0]
 8107108:	689b      	ldr	r3, [r3, #8]
 810710a:	697a      	ldr	r2, [r7, #20]
 810710c:	4313      	orrs	r3, r2
 810710e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107110:	687b      	ldr	r3, [r7, #4]
 8107112:	4a2c      	ldr	r2, [pc, #176]	; (81071c4 <TIM_OC1_SetConfig+0x10c>)
 8107114:	4293      	cmp	r3, r2
 8107116:	d00f      	beq.n	8107138 <TIM_OC1_SetConfig+0x80>
 8107118:	687b      	ldr	r3, [r7, #4]
 810711a:	4a2b      	ldr	r2, [pc, #172]	; (81071c8 <TIM_OC1_SetConfig+0x110>)
 810711c:	4293      	cmp	r3, r2
 810711e:	d00b      	beq.n	8107138 <TIM_OC1_SetConfig+0x80>
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	4a2a      	ldr	r2, [pc, #168]	; (81071cc <TIM_OC1_SetConfig+0x114>)
 8107124:	4293      	cmp	r3, r2
 8107126:	d007      	beq.n	8107138 <TIM_OC1_SetConfig+0x80>
 8107128:	687b      	ldr	r3, [r7, #4]
 810712a:	4a29      	ldr	r2, [pc, #164]	; (81071d0 <TIM_OC1_SetConfig+0x118>)
 810712c:	4293      	cmp	r3, r2
 810712e:	d003      	beq.n	8107138 <TIM_OC1_SetConfig+0x80>
 8107130:	687b      	ldr	r3, [r7, #4]
 8107132:	4a28      	ldr	r2, [pc, #160]	; (81071d4 <TIM_OC1_SetConfig+0x11c>)
 8107134:	4293      	cmp	r3, r2
 8107136:	d10c      	bne.n	8107152 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107138:	697b      	ldr	r3, [r7, #20]
 810713a:	f023 0308 	bic.w	r3, r3, #8
 810713e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107140:	683b      	ldr	r3, [r7, #0]
 8107142:	68db      	ldr	r3, [r3, #12]
 8107144:	697a      	ldr	r2, [r7, #20]
 8107146:	4313      	orrs	r3, r2
 8107148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810714a:	697b      	ldr	r3, [r7, #20]
 810714c:	f023 0304 	bic.w	r3, r3, #4
 8107150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107152:	687b      	ldr	r3, [r7, #4]
 8107154:	4a1b      	ldr	r2, [pc, #108]	; (81071c4 <TIM_OC1_SetConfig+0x10c>)
 8107156:	4293      	cmp	r3, r2
 8107158:	d00f      	beq.n	810717a <TIM_OC1_SetConfig+0xc2>
 810715a:	687b      	ldr	r3, [r7, #4]
 810715c:	4a1a      	ldr	r2, [pc, #104]	; (81071c8 <TIM_OC1_SetConfig+0x110>)
 810715e:	4293      	cmp	r3, r2
 8107160:	d00b      	beq.n	810717a <TIM_OC1_SetConfig+0xc2>
 8107162:	687b      	ldr	r3, [r7, #4]
 8107164:	4a19      	ldr	r2, [pc, #100]	; (81071cc <TIM_OC1_SetConfig+0x114>)
 8107166:	4293      	cmp	r3, r2
 8107168:	d007      	beq.n	810717a <TIM_OC1_SetConfig+0xc2>
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	4a18      	ldr	r2, [pc, #96]	; (81071d0 <TIM_OC1_SetConfig+0x118>)
 810716e:	4293      	cmp	r3, r2
 8107170:	d003      	beq.n	810717a <TIM_OC1_SetConfig+0xc2>
 8107172:	687b      	ldr	r3, [r7, #4]
 8107174:	4a17      	ldr	r2, [pc, #92]	; (81071d4 <TIM_OC1_SetConfig+0x11c>)
 8107176:	4293      	cmp	r3, r2
 8107178:	d111      	bne.n	810719e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810717a:	693b      	ldr	r3, [r7, #16]
 810717c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107182:	693b      	ldr	r3, [r7, #16]
 8107184:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810718a:	683b      	ldr	r3, [r7, #0]
 810718c:	695b      	ldr	r3, [r3, #20]
 810718e:	693a      	ldr	r2, [r7, #16]
 8107190:	4313      	orrs	r3, r2
 8107192:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107194:	683b      	ldr	r3, [r7, #0]
 8107196:	699b      	ldr	r3, [r3, #24]
 8107198:	693a      	ldr	r2, [r7, #16]
 810719a:	4313      	orrs	r3, r2
 810719c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810719e:	687b      	ldr	r3, [r7, #4]
 81071a0:	693a      	ldr	r2, [r7, #16]
 81071a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81071a4:	687b      	ldr	r3, [r7, #4]
 81071a6:	68fa      	ldr	r2, [r7, #12]
 81071a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 81071aa:	683b      	ldr	r3, [r7, #0]
 81071ac:	685a      	ldr	r2, [r3, #4]
 81071ae:	687b      	ldr	r3, [r7, #4]
 81071b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81071b2:	687b      	ldr	r3, [r7, #4]
 81071b4:	697a      	ldr	r2, [r7, #20]
 81071b6:	621a      	str	r2, [r3, #32]
}
 81071b8:	bf00      	nop
 81071ba:	371c      	adds	r7, #28
 81071bc:	46bd      	mov	sp, r7
 81071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81071c2:	4770      	bx	lr
 81071c4:	40010000 	.word	0x40010000
 81071c8:	40010400 	.word	0x40010400
 81071cc:	40014000 	.word	0x40014000
 81071d0:	40014400 	.word	0x40014400
 81071d4:	40014800 	.word	0x40014800

081071d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81071d8:	b480      	push	{r7}
 81071da:	b087      	sub	sp, #28
 81071dc:	af00      	add	r7, sp, #0
 81071de:	6078      	str	r0, [r7, #4]
 81071e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81071e2:	687b      	ldr	r3, [r7, #4]
 81071e4:	6a1b      	ldr	r3, [r3, #32]
 81071e6:	f023 0210 	bic.w	r2, r3, #16
 81071ea:	687b      	ldr	r3, [r7, #4]
 81071ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81071ee:	687b      	ldr	r3, [r7, #4]
 81071f0:	6a1b      	ldr	r3, [r3, #32]
 81071f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	685b      	ldr	r3, [r3, #4]
 81071f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 81071fa:	687b      	ldr	r3, [r7, #4]
 81071fc:	699b      	ldr	r3, [r3, #24]
 81071fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107200:	68fb      	ldr	r3, [r7, #12]
 8107202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810720a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810720c:	68fb      	ldr	r3, [r7, #12]
 810720e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107214:	683b      	ldr	r3, [r7, #0]
 8107216:	681b      	ldr	r3, [r3, #0]
 8107218:	021b      	lsls	r3, r3, #8
 810721a:	68fa      	ldr	r2, [r7, #12]
 810721c:	4313      	orrs	r3, r2
 810721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107220:	697b      	ldr	r3, [r7, #20]
 8107222:	f023 0320 	bic.w	r3, r3, #32
 8107226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107228:	683b      	ldr	r3, [r7, #0]
 810722a:	689b      	ldr	r3, [r3, #8]
 810722c:	011b      	lsls	r3, r3, #4
 810722e:	697a      	ldr	r2, [r7, #20]
 8107230:	4313      	orrs	r3, r2
 8107232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107234:	687b      	ldr	r3, [r7, #4]
 8107236:	4a28      	ldr	r2, [pc, #160]	; (81072d8 <TIM_OC2_SetConfig+0x100>)
 8107238:	4293      	cmp	r3, r2
 810723a:	d003      	beq.n	8107244 <TIM_OC2_SetConfig+0x6c>
 810723c:	687b      	ldr	r3, [r7, #4]
 810723e:	4a27      	ldr	r2, [pc, #156]	; (81072dc <TIM_OC2_SetConfig+0x104>)
 8107240:	4293      	cmp	r3, r2
 8107242:	d10d      	bne.n	8107260 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107244:	697b      	ldr	r3, [r7, #20]
 8107246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810724a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810724c:	683b      	ldr	r3, [r7, #0]
 810724e:	68db      	ldr	r3, [r3, #12]
 8107250:	011b      	lsls	r3, r3, #4
 8107252:	697a      	ldr	r2, [r7, #20]
 8107254:	4313      	orrs	r3, r2
 8107256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107258:	697b      	ldr	r3, [r7, #20]
 810725a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810725e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107260:	687b      	ldr	r3, [r7, #4]
 8107262:	4a1d      	ldr	r2, [pc, #116]	; (81072d8 <TIM_OC2_SetConfig+0x100>)
 8107264:	4293      	cmp	r3, r2
 8107266:	d00f      	beq.n	8107288 <TIM_OC2_SetConfig+0xb0>
 8107268:	687b      	ldr	r3, [r7, #4]
 810726a:	4a1c      	ldr	r2, [pc, #112]	; (81072dc <TIM_OC2_SetConfig+0x104>)
 810726c:	4293      	cmp	r3, r2
 810726e:	d00b      	beq.n	8107288 <TIM_OC2_SetConfig+0xb0>
 8107270:	687b      	ldr	r3, [r7, #4]
 8107272:	4a1b      	ldr	r2, [pc, #108]	; (81072e0 <TIM_OC2_SetConfig+0x108>)
 8107274:	4293      	cmp	r3, r2
 8107276:	d007      	beq.n	8107288 <TIM_OC2_SetConfig+0xb0>
 8107278:	687b      	ldr	r3, [r7, #4]
 810727a:	4a1a      	ldr	r2, [pc, #104]	; (81072e4 <TIM_OC2_SetConfig+0x10c>)
 810727c:	4293      	cmp	r3, r2
 810727e:	d003      	beq.n	8107288 <TIM_OC2_SetConfig+0xb0>
 8107280:	687b      	ldr	r3, [r7, #4]
 8107282:	4a19      	ldr	r2, [pc, #100]	; (81072e8 <TIM_OC2_SetConfig+0x110>)
 8107284:	4293      	cmp	r3, r2
 8107286:	d113      	bne.n	81072b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107288:	693b      	ldr	r3, [r7, #16]
 810728a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 810728e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107290:	693b      	ldr	r3, [r7, #16]
 8107292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107298:	683b      	ldr	r3, [r7, #0]
 810729a:	695b      	ldr	r3, [r3, #20]
 810729c:	009b      	lsls	r3, r3, #2
 810729e:	693a      	ldr	r2, [r7, #16]
 81072a0:	4313      	orrs	r3, r2
 81072a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 81072a4:	683b      	ldr	r3, [r7, #0]
 81072a6:	699b      	ldr	r3, [r3, #24]
 81072a8:	009b      	lsls	r3, r3, #2
 81072aa:	693a      	ldr	r2, [r7, #16]
 81072ac:	4313      	orrs	r3, r2
 81072ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81072b0:	687b      	ldr	r3, [r7, #4]
 81072b2:	693a      	ldr	r2, [r7, #16]
 81072b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 81072b6:	687b      	ldr	r3, [r7, #4]
 81072b8:	68fa      	ldr	r2, [r7, #12]
 81072ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 81072bc:	683b      	ldr	r3, [r7, #0]
 81072be:	685a      	ldr	r2, [r3, #4]
 81072c0:	687b      	ldr	r3, [r7, #4]
 81072c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81072c4:	687b      	ldr	r3, [r7, #4]
 81072c6:	697a      	ldr	r2, [r7, #20]
 81072c8:	621a      	str	r2, [r3, #32]
}
 81072ca:	bf00      	nop
 81072cc:	371c      	adds	r7, #28
 81072ce:	46bd      	mov	sp, r7
 81072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072d4:	4770      	bx	lr
 81072d6:	bf00      	nop
 81072d8:	40010000 	.word	0x40010000
 81072dc:	40010400 	.word	0x40010400
 81072e0:	40014000 	.word	0x40014000
 81072e4:	40014400 	.word	0x40014400
 81072e8:	40014800 	.word	0x40014800

081072ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81072ec:	b480      	push	{r7}
 81072ee:	b087      	sub	sp, #28
 81072f0:	af00      	add	r7, sp, #0
 81072f2:	6078      	str	r0, [r7, #4]
 81072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	6a1b      	ldr	r3, [r3, #32]
 81072fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81072fe:	687b      	ldr	r3, [r7, #4]
 8107300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107302:	687b      	ldr	r3, [r7, #4]
 8107304:	6a1b      	ldr	r3, [r3, #32]
 8107306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	685b      	ldr	r3, [r3, #4]
 810730c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	69db      	ldr	r3, [r3, #28]
 8107312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107314:	68fb      	ldr	r3, [r7, #12]
 8107316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810731e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107320:	68fb      	ldr	r3, [r7, #12]
 8107322:	f023 0303 	bic.w	r3, r3, #3
 8107326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107328:	683b      	ldr	r3, [r7, #0]
 810732a:	681b      	ldr	r3, [r3, #0]
 810732c:	68fa      	ldr	r2, [r7, #12]
 810732e:	4313      	orrs	r3, r2
 8107330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107332:	697b      	ldr	r3, [r7, #20]
 8107334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810733a:	683b      	ldr	r3, [r7, #0]
 810733c:	689b      	ldr	r3, [r3, #8]
 810733e:	021b      	lsls	r3, r3, #8
 8107340:	697a      	ldr	r2, [r7, #20]
 8107342:	4313      	orrs	r3, r2
 8107344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107346:	687b      	ldr	r3, [r7, #4]
 8107348:	4a27      	ldr	r2, [pc, #156]	; (81073e8 <TIM_OC3_SetConfig+0xfc>)
 810734a:	4293      	cmp	r3, r2
 810734c:	d003      	beq.n	8107356 <TIM_OC3_SetConfig+0x6a>
 810734e:	687b      	ldr	r3, [r7, #4]
 8107350:	4a26      	ldr	r2, [pc, #152]	; (81073ec <TIM_OC3_SetConfig+0x100>)
 8107352:	4293      	cmp	r3, r2
 8107354:	d10d      	bne.n	8107372 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107356:	697b      	ldr	r3, [r7, #20]
 8107358:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 810735c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810735e:	683b      	ldr	r3, [r7, #0]
 8107360:	68db      	ldr	r3, [r3, #12]
 8107362:	021b      	lsls	r3, r3, #8
 8107364:	697a      	ldr	r2, [r7, #20]
 8107366:	4313      	orrs	r3, r2
 8107368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810736a:	697b      	ldr	r3, [r7, #20]
 810736c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107372:	687b      	ldr	r3, [r7, #4]
 8107374:	4a1c      	ldr	r2, [pc, #112]	; (81073e8 <TIM_OC3_SetConfig+0xfc>)
 8107376:	4293      	cmp	r3, r2
 8107378:	d00f      	beq.n	810739a <TIM_OC3_SetConfig+0xae>
 810737a:	687b      	ldr	r3, [r7, #4]
 810737c:	4a1b      	ldr	r2, [pc, #108]	; (81073ec <TIM_OC3_SetConfig+0x100>)
 810737e:	4293      	cmp	r3, r2
 8107380:	d00b      	beq.n	810739a <TIM_OC3_SetConfig+0xae>
 8107382:	687b      	ldr	r3, [r7, #4]
 8107384:	4a1a      	ldr	r2, [pc, #104]	; (81073f0 <TIM_OC3_SetConfig+0x104>)
 8107386:	4293      	cmp	r3, r2
 8107388:	d007      	beq.n	810739a <TIM_OC3_SetConfig+0xae>
 810738a:	687b      	ldr	r3, [r7, #4]
 810738c:	4a19      	ldr	r2, [pc, #100]	; (81073f4 <TIM_OC3_SetConfig+0x108>)
 810738e:	4293      	cmp	r3, r2
 8107390:	d003      	beq.n	810739a <TIM_OC3_SetConfig+0xae>
 8107392:	687b      	ldr	r3, [r7, #4]
 8107394:	4a18      	ldr	r2, [pc, #96]	; (81073f8 <TIM_OC3_SetConfig+0x10c>)
 8107396:	4293      	cmp	r3, r2
 8107398:	d113      	bne.n	81073c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810739a:	693b      	ldr	r3, [r7, #16]
 810739c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 81073a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 81073a2:	693b      	ldr	r3, [r7, #16]
 81073a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81073a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 81073aa:	683b      	ldr	r3, [r7, #0]
 81073ac:	695b      	ldr	r3, [r3, #20]
 81073ae:	011b      	lsls	r3, r3, #4
 81073b0:	693a      	ldr	r2, [r7, #16]
 81073b2:	4313      	orrs	r3, r2
 81073b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 81073b6:	683b      	ldr	r3, [r7, #0]
 81073b8:	699b      	ldr	r3, [r3, #24]
 81073ba:	011b      	lsls	r3, r3, #4
 81073bc:	693a      	ldr	r2, [r7, #16]
 81073be:	4313      	orrs	r3, r2
 81073c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81073c2:	687b      	ldr	r3, [r7, #4]
 81073c4:	693a      	ldr	r2, [r7, #16]
 81073c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81073c8:	687b      	ldr	r3, [r7, #4]
 81073ca:	68fa      	ldr	r2, [r7, #12]
 81073cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 81073ce:	683b      	ldr	r3, [r7, #0]
 81073d0:	685a      	ldr	r2, [r3, #4]
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81073d6:	687b      	ldr	r3, [r7, #4]
 81073d8:	697a      	ldr	r2, [r7, #20]
 81073da:	621a      	str	r2, [r3, #32]
}
 81073dc:	bf00      	nop
 81073de:	371c      	adds	r7, #28
 81073e0:	46bd      	mov	sp, r7
 81073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073e6:	4770      	bx	lr
 81073e8:	40010000 	.word	0x40010000
 81073ec:	40010400 	.word	0x40010400
 81073f0:	40014000 	.word	0x40014000
 81073f4:	40014400 	.word	0x40014400
 81073f8:	40014800 	.word	0x40014800

081073fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 81073fc:	b480      	push	{r7}
 81073fe:	b087      	sub	sp, #28
 8107400:	af00      	add	r7, sp, #0
 8107402:	6078      	str	r0, [r7, #4]
 8107404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	6a1b      	ldr	r3, [r3, #32]
 810740a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810740e:	687b      	ldr	r3, [r7, #4]
 8107410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	6a1b      	ldr	r3, [r3, #32]
 8107416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	685b      	ldr	r3, [r3, #4]
 810741c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810741e:	687b      	ldr	r3, [r7, #4]
 8107420:	69db      	ldr	r3, [r3, #28]
 8107422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107424:	68fb      	ldr	r3, [r7, #12]
 8107426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810742a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810742e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107430:	68fb      	ldr	r3, [r7, #12]
 8107432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107438:	683b      	ldr	r3, [r7, #0]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	021b      	lsls	r3, r3, #8
 810743e:	68fa      	ldr	r2, [r7, #12]
 8107440:	4313      	orrs	r3, r2
 8107442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107444:	693b      	ldr	r3, [r7, #16]
 8107446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810744a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810744c:	683b      	ldr	r3, [r7, #0]
 810744e:	689b      	ldr	r3, [r3, #8]
 8107450:	031b      	lsls	r3, r3, #12
 8107452:	693a      	ldr	r2, [r7, #16]
 8107454:	4313      	orrs	r3, r2
 8107456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107458:	687b      	ldr	r3, [r7, #4]
 810745a:	4a18      	ldr	r2, [pc, #96]	; (81074bc <TIM_OC4_SetConfig+0xc0>)
 810745c:	4293      	cmp	r3, r2
 810745e:	d00f      	beq.n	8107480 <TIM_OC4_SetConfig+0x84>
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	4a17      	ldr	r2, [pc, #92]	; (81074c0 <TIM_OC4_SetConfig+0xc4>)
 8107464:	4293      	cmp	r3, r2
 8107466:	d00b      	beq.n	8107480 <TIM_OC4_SetConfig+0x84>
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	4a16      	ldr	r2, [pc, #88]	; (81074c4 <TIM_OC4_SetConfig+0xc8>)
 810746c:	4293      	cmp	r3, r2
 810746e:	d007      	beq.n	8107480 <TIM_OC4_SetConfig+0x84>
 8107470:	687b      	ldr	r3, [r7, #4]
 8107472:	4a15      	ldr	r2, [pc, #84]	; (81074c8 <TIM_OC4_SetConfig+0xcc>)
 8107474:	4293      	cmp	r3, r2
 8107476:	d003      	beq.n	8107480 <TIM_OC4_SetConfig+0x84>
 8107478:	687b      	ldr	r3, [r7, #4]
 810747a:	4a14      	ldr	r2, [pc, #80]	; (81074cc <TIM_OC4_SetConfig+0xd0>)
 810747c:	4293      	cmp	r3, r2
 810747e:	d109      	bne.n	8107494 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107480:	697b      	ldr	r3, [r7, #20]
 8107482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107488:	683b      	ldr	r3, [r7, #0]
 810748a:	695b      	ldr	r3, [r3, #20]
 810748c:	019b      	lsls	r3, r3, #6
 810748e:	697a      	ldr	r2, [r7, #20]
 8107490:	4313      	orrs	r3, r2
 8107492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	697a      	ldr	r2, [r7, #20]
 8107498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	68fa      	ldr	r2, [r7, #12]
 810749e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81074a0:	683b      	ldr	r3, [r7, #0]
 81074a2:	685a      	ldr	r2, [r3, #4]
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81074a8:	687b      	ldr	r3, [r7, #4]
 81074aa:	693a      	ldr	r2, [r7, #16]
 81074ac:	621a      	str	r2, [r3, #32]
}
 81074ae:	bf00      	nop
 81074b0:	371c      	adds	r7, #28
 81074b2:	46bd      	mov	sp, r7
 81074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074b8:	4770      	bx	lr
 81074ba:	bf00      	nop
 81074bc:	40010000 	.word	0x40010000
 81074c0:	40010400 	.word	0x40010400
 81074c4:	40014000 	.word	0x40014000
 81074c8:	40014400 	.word	0x40014400
 81074cc:	40014800 	.word	0x40014800

081074d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81074d0:	b480      	push	{r7}
 81074d2:	b087      	sub	sp, #28
 81074d4:	af00      	add	r7, sp, #0
 81074d6:	6078      	str	r0, [r7, #4]
 81074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81074da:	687b      	ldr	r3, [r7, #4]
 81074dc:	6a1b      	ldr	r3, [r3, #32]
 81074de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81074e2:	687b      	ldr	r3, [r7, #4]
 81074e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	6a1b      	ldr	r3, [r3, #32]
 81074ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81074ec:	687b      	ldr	r3, [r7, #4]
 81074ee:	685b      	ldr	r3, [r3, #4]
 81074f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81074f2:	687b      	ldr	r3, [r7, #4]
 81074f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 81074f8:	68fb      	ldr	r3, [r7, #12]
 81074fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107504:	683b      	ldr	r3, [r7, #0]
 8107506:	681b      	ldr	r3, [r3, #0]
 8107508:	68fa      	ldr	r2, [r7, #12]
 810750a:	4313      	orrs	r3, r2
 810750c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810750e:	693b      	ldr	r3, [r7, #16]
 8107510:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107514:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107516:	683b      	ldr	r3, [r7, #0]
 8107518:	689b      	ldr	r3, [r3, #8]
 810751a:	041b      	lsls	r3, r3, #16
 810751c:	693a      	ldr	r2, [r7, #16]
 810751e:	4313      	orrs	r3, r2
 8107520:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107522:	687b      	ldr	r3, [r7, #4]
 8107524:	4a17      	ldr	r2, [pc, #92]	; (8107584 <TIM_OC5_SetConfig+0xb4>)
 8107526:	4293      	cmp	r3, r2
 8107528:	d00f      	beq.n	810754a <TIM_OC5_SetConfig+0x7a>
 810752a:	687b      	ldr	r3, [r7, #4]
 810752c:	4a16      	ldr	r2, [pc, #88]	; (8107588 <TIM_OC5_SetConfig+0xb8>)
 810752e:	4293      	cmp	r3, r2
 8107530:	d00b      	beq.n	810754a <TIM_OC5_SetConfig+0x7a>
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	4a15      	ldr	r2, [pc, #84]	; (810758c <TIM_OC5_SetConfig+0xbc>)
 8107536:	4293      	cmp	r3, r2
 8107538:	d007      	beq.n	810754a <TIM_OC5_SetConfig+0x7a>
 810753a:	687b      	ldr	r3, [r7, #4]
 810753c:	4a14      	ldr	r2, [pc, #80]	; (8107590 <TIM_OC5_SetConfig+0xc0>)
 810753e:	4293      	cmp	r3, r2
 8107540:	d003      	beq.n	810754a <TIM_OC5_SetConfig+0x7a>
 8107542:	687b      	ldr	r3, [r7, #4]
 8107544:	4a13      	ldr	r2, [pc, #76]	; (8107594 <TIM_OC5_SetConfig+0xc4>)
 8107546:	4293      	cmp	r3, r2
 8107548:	d109      	bne.n	810755e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810754a:	697b      	ldr	r3, [r7, #20]
 810754c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8107552:	683b      	ldr	r3, [r7, #0]
 8107554:	695b      	ldr	r3, [r3, #20]
 8107556:	021b      	lsls	r3, r3, #8
 8107558:	697a      	ldr	r2, [r7, #20]
 810755a:	4313      	orrs	r3, r2
 810755c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810755e:	687b      	ldr	r3, [r7, #4]
 8107560:	697a      	ldr	r2, [r7, #20]
 8107562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107564:	687b      	ldr	r3, [r7, #4]
 8107566:	68fa      	ldr	r2, [r7, #12]
 8107568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810756a:	683b      	ldr	r3, [r7, #0]
 810756c:	685a      	ldr	r2, [r3, #4]
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107572:	687b      	ldr	r3, [r7, #4]
 8107574:	693a      	ldr	r2, [r7, #16]
 8107576:	621a      	str	r2, [r3, #32]
}
 8107578:	bf00      	nop
 810757a:	371c      	adds	r7, #28
 810757c:	46bd      	mov	sp, r7
 810757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107582:	4770      	bx	lr
 8107584:	40010000 	.word	0x40010000
 8107588:	40010400 	.word	0x40010400
 810758c:	40014000 	.word	0x40014000
 8107590:	40014400 	.word	0x40014400
 8107594:	40014800 	.word	0x40014800

08107598 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8107598:	b480      	push	{r7}
 810759a:	b087      	sub	sp, #28
 810759c:	af00      	add	r7, sp, #0
 810759e:	6078      	str	r0, [r7, #4]
 81075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	6a1b      	ldr	r3, [r3, #32]
 81075a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81075aa:	687b      	ldr	r3, [r7, #4]
 81075ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81075ae:	687b      	ldr	r3, [r7, #4]
 81075b0:	6a1b      	ldr	r3, [r3, #32]
 81075b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81075b4:	687b      	ldr	r3, [r7, #4]
 81075b6:	685b      	ldr	r3, [r3, #4]
 81075b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81075ba:	687b      	ldr	r3, [r7, #4]
 81075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81075c0:	68fb      	ldr	r3, [r7, #12]
 81075c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 81075c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81075ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81075cc:	683b      	ldr	r3, [r7, #0]
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	021b      	lsls	r3, r3, #8
 81075d2:	68fa      	ldr	r2, [r7, #12]
 81075d4:	4313      	orrs	r3, r2
 81075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81075d8:	693b      	ldr	r3, [r7, #16]
 81075da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81075de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81075e0:	683b      	ldr	r3, [r7, #0]
 81075e2:	689b      	ldr	r3, [r3, #8]
 81075e4:	051b      	lsls	r3, r3, #20
 81075e6:	693a      	ldr	r2, [r7, #16]
 81075e8:	4313      	orrs	r3, r2
 81075ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81075ec:	687b      	ldr	r3, [r7, #4]
 81075ee:	4a18      	ldr	r2, [pc, #96]	; (8107650 <TIM_OC6_SetConfig+0xb8>)
 81075f0:	4293      	cmp	r3, r2
 81075f2:	d00f      	beq.n	8107614 <TIM_OC6_SetConfig+0x7c>
 81075f4:	687b      	ldr	r3, [r7, #4]
 81075f6:	4a17      	ldr	r2, [pc, #92]	; (8107654 <TIM_OC6_SetConfig+0xbc>)
 81075f8:	4293      	cmp	r3, r2
 81075fa:	d00b      	beq.n	8107614 <TIM_OC6_SetConfig+0x7c>
 81075fc:	687b      	ldr	r3, [r7, #4]
 81075fe:	4a16      	ldr	r2, [pc, #88]	; (8107658 <TIM_OC6_SetConfig+0xc0>)
 8107600:	4293      	cmp	r3, r2
 8107602:	d007      	beq.n	8107614 <TIM_OC6_SetConfig+0x7c>
 8107604:	687b      	ldr	r3, [r7, #4]
 8107606:	4a15      	ldr	r2, [pc, #84]	; (810765c <TIM_OC6_SetConfig+0xc4>)
 8107608:	4293      	cmp	r3, r2
 810760a:	d003      	beq.n	8107614 <TIM_OC6_SetConfig+0x7c>
 810760c:	687b      	ldr	r3, [r7, #4]
 810760e:	4a14      	ldr	r2, [pc, #80]	; (8107660 <TIM_OC6_SetConfig+0xc8>)
 8107610:	4293      	cmp	r3, r2
 8107612:	d109      	bne.n	8107628 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8107614:	697b      	ldr	r3, [r7, #20]
 8107616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810761a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810761c:	683b      	ldr	r3, [r7, #0]
 810761e:	695b      	ldr	r3, [r3, #20]
 8107620:	029b      	lsls	r3, r3, #10
 8107622:	697a      	ldr	r2, [r7, #20]
 8107624:	4313      	orrs	r3, r2
 8107626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107628:	687b      	ldr	r3, [r7, #4]
 810762a:	697a      	ldr	r2, [r7, #20]
 810762c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810762e:	687b      	ldr	r3, [r7, #4]
 8107630:	68fa      	ldr	r2, [r7, #12]
 8107632:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8107634:	683b      	ldr	r3, [r7, #0]
 8107636:	685a      	ldr	r2, [r3, #4]
 8107638:	687b      	ldr	r3, [r7, #4]
 810763a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810763c:	687b      	ldr	r3, [r7, #4]
 810763e:	693a      	ldr	r2, [r7, #16]
 8107640:	621a      	str	r2, [r3, #32]
}
 8107642:	bf00      	nop
 8107644:	371c      	adds	r7, #28
 8107646:	46bd      	mov	sp, r7
 8107648:	f85d 7b04 	ldr.w	r7, [sp], #4
 810764c:	4770      	bx	lr
 810764e:	bf00      	nop
 8107650:	40010000 	.word	0x40010000
 8107654:	40010400 	.word	0x40010400
 8107658:	40014000 	.word	0x40014000
 810765c:	40014400 	.word	0x40014400
 8107660:	40014800 	.word	0x40014800

08107664 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8107664:	b480      	push	{r7}
 8107666:	b087      	sub	sp, #28
 8107668:	af00      	add	r7, sp, #0
 810766a:	60f8      	str	r0, [r7, #12]
 810766c:	60b9      	str	r1, [r7, #8]
 810766e:	607a      	str	r2, [r7, #4]
 8107670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107672:	68fb      	ldr	r3, [r7, #12]
 8107674:	6a1b      	ldr	r3, [r3, #32]
 8107676:	f023 0201 	bic.w	r2, r3, #1
 810767a:	68fb      	ldr	r3, [r7, #12]
 810767c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810767e:	68fb      	ldr	r3, [r7, #12]
 8107680:	699b      	ldr	r3, [r3, #24]
 8107682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8107684:	68fb      	ldr	r3, [r7, #12]
 8107686:	6a1b      	ldr	r3, [r3, #32]
 8107688:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810768a:	68fb      	ldr	r3, [r7, #12]
 810768c:	4a28      	ldr	r2, [pc, #160]	; (8107730 <TIM_TI1_SetConfig+0xcc>)
 810768e:	4293      	cmp	r3, r2
 8107690:	d01b      	beq.n	81076ca <TIM_TI1_SetConfig+0x66>
 8107692:	68fb      	ldr	r3, [r7, #12]
 8107694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107698:	d017      	beq.n	81076ca <TIM_TI1_SetConfig+0x66>
 810769a:	68fb      	ldr	r3, [r7, #12]
 810769c:	4a25      	ldr	r2, [pc, #148]	; (8107734 <TIM_TI1_SetConfig+0xd0>)
 810769e:	4293      	cmp	r3, r2
 81076a0:	d013      	beq.n	81076ca <TIM_TI1_SetConfig+0x66>
 81076a2:	68fb      	ldr	r3, [r7, #12]
 81076a4:	4a24      	ldr	r2, [pc, #144]	; (8107738 <TIM_TI1_SetConfig+0xd4>)
 81076a6:	4293      	cmp	r3, r2
 81076a8:	d00f      	beq.n	81076ca <TIM_TI1_SetConfig+0x66>
 81076aa:	68fb      	ldr	r3, [r7, #12]
 81076ac:	4a23      	ldr	r2, [pc, #140]	; (810773c <TIM_TI1_SetConfig+0xd8>)
 81076ae:	4293      	cmp	r3, r2
 81076b0:	d00b      	beq.n	81076ca <TIM_TI1_SetConfig+0x66>
 81076b2:	68fb      	ldr	r3, [r7, #12]
 81076b4:	4a22      	ldr	r2, [pc, #136]	; (8107740 <TIM_TI1_SetConfig+0xdc>)
 81076b6:	4293      	cmp	r3, r2
 81076b8:	d007      	beq.n	81076ca <TIM_TI1_SetConfig+0x66>
 81076ba:	68fb      	ldr	r3, [r7, #12]
 81076bc:	4a21      	ldr	r2, [pc, #132]	; (8107744 <TIM_TI1_SetConfig+0xe0>)
 81076be:	4293      	cmp	r3, r2
 81076c0:	d003      	beq.n	81076ca <TIM_TI1_SetConfig+0x66>
 81076c2:	68fb      	ldr	r3, [r7, #12]
 81076c4:	4a20      	ldr	r2, [pc, #128]	; (8107748 <TIM_TI1_SetConfig+0xe4>)
 81076c6:	4293      	cmp	r3, r2
 81076c8:	d101      	bne.n	81076ce <TIM_TI1_SetConfig+0x6a>
 81076ca:	2301      	movs	r3, #1
 81076cc:	e000      	b.n	81076d0 <TIM_TI1_SetConfig+0x6c>
 81076ce:	2300      	movs	r3, #0
 81076d0:	2b00      	cmp	r3, #0
 81076d2:	d008      	beq.n	81076e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 81076d4:	697b      	ldr	r3, [r7, #20]
 81076d6:	f023 0303 	bic.w	r3, r3, #3
 81076da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 81076dc:	697a      	ldr	r2, [r7, #20]
 81076de:	687b      	ldr	r3, [r7, #4]
 81076e0:	4313      	orrs	r3, r2
 81076e2:	617b      	str	r3, [r7, #20]
 81076e4:	e003      	b.n	81076ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 81076e6:	697b      	ldr	r3, [r7, #20]
 81076e8:	f043 0301 	orr.w	r3, r3, #1
 81076ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81076ee:	697b      	ldr	r3, [r7, #20]
 81076f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81076f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 81076f6:	683b      	ldr	r3, [r7, #0]
 81076f8:	011b      	lsls	r3, r3, #4
 81076fa:	b2db      	uxtb	r3, r3
 81076fc:	697a      	ldr	r2, [r7, #20]
 81076fe:	4313      	orrs	r3, r2
 8107700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8107702:	693b      	ldr	r3, [r7, #16]
 8107704:	f023 030a 	bic.w	r3, r3, #10
 8107708:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810770a:	68bb      	ldr	r3, [r7, #8]
 810770c:	f003 030a 	and.w	r3, r3, #10
 8107710:	693a      	ldr	r2, [r7, #16]
 8107712:	4313      	orrs	r3, r2
 8107714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8107716:	68fb      	ldr	r3, [r7, #12]
 8107718:	697a      	ldr	r2, [r7, #20]
 810771a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810771c:	68fb      	ldr	r3, [r7, #12]
 810771e:	693a      	ldr	r2, [r7, #16]
 8107720:	621a      	str	r2, [r3, #32]
}
 8107722:	bf00      	nop
 8107724:	371c      	adds	r7, #28
 8107726:	46bd      	mov	sp, r7
 8107728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810772c:	4770      	bx	lr
 810772e:	bf00      	nop
 8107730:	40010000 	.word	0x40010000
 8107734:	40000400 	.word	0x40000400
 8107738:	40000800 	.word	0x40000800
 810773c:	40000c00 	.word	0x40000c00
 8107740:	40010400 	.word	0x40010400
 8107744:	40001800 	.word	0x40001800
 8107748:	40014000 	.word	0x40014000

0810774c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810774c:	b480      	push	{r7}
 810774e:	b087      	sub	sp, #28
 8107750:	af00      	add	r7, sp, #0
 8107752:	60f8      	str	r0, [r7, #12]
 8107754:	60b9      	str	r1, [r7, #8]
 8107756:	607a      	str	r2, [r7, #4]
 8107758:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810775a:	68fb      	ldr	r3, [r7, #12]
 810775c:	6a1b      	ldr	r3, [r3, #32]
 810775e:	f023 0210 	bic.w	r2, r3, #16
 8107762:	68fb      	ldr	r3, [r7, #12]
 8107764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8107766:	68fb      	ldr	r3, [r7, #12]
 8107768:	699b      	ldr	r3, [r3, #24]
 810776a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810776c:	68fb      	ldr	r3, [r7, #12]
 810776e:	6a1b      	ldr	r3, [r3, #32]
 8107770:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8107772:	697b      	ldr	r3, [r7, #20]
 8107774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810777a:	687b      	ldr	r3, [r7, #4]
 810777c:	021b      	lsls	r3, r3, #8
 810777e:	697a      	ldr	r2, [r7, #20]
 8107780:	4313      	orrs	r3, r2
 8107782:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8107784:	697b      	ldr	r3, [r7, #20]
 8107786:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810778a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810778c:	683b      	ldr	r3, [r7, #0]
 810778e:	031b      	lsls	r3, r3, #12
 8107790:	b29b      	uxth	r3, r3
 8107792:	697a      	ldr	r2, [r7, #20]
 8107794:	4313      	orrs	r3, r2
 8107796:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8107798:	693b      	ldr	r3, [r7, #16]
 810779a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 810779e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 81077a0:	68bb      	ldr	r3, [r7, #8]
 81077a2:	011b      	lsls	r3, r3, #4
 81077a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 81077a8:	693a      	ldr	r2, [r7, #16]
 81077aa:	4313      	orrs	r3, r2
 81077ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81077ae:	68fb      	ldr	r3, [r7, #12]
 81077b0:	697a      	ldr	r2, [r7, #20]
 81077b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81077b4:	68fb      	ldr	r3, [r7, #12]
 81077b6:	693a      	ldr	r2, [r7, #16]
 81077b8:	621a      	str	r2, [r3, #32]
}
 81077ba:	bf00      	nop
 81077bc:	371c      	adds	r7, #28
 81077be:	46bd      	mov	sp, r7
 81077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077c4:	4770      	bx	lr

081077c6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81077c6:	b480      	push	{r7}
 81077c8:	b087      	sub	sp, #28
 81077ca:	af00      	add	r7, sp, #0
 81077cc:	60f8      	str	r0, [r7, #12]
 81077ce:	60b9      	str	r1, [r7, #8]
 81077d0:	607a      	str	r2, [r7, #4]
 81077d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81077d4:	68fb      	ldr	r3, [r7, #12]
 81077d6:	6a1b      	ldr	r3, [r3, #32]
 81077d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81077dc:	68fb      	ldr	r3, [r7, #12]
 81077de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81077e0:	68fb      	ldr	r3, [r7, #12]
 81077e2:	69db      	ldr	r3, [r3, #28]
 81077e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81077e6:	68fb      	ldr	r3, [r7, #12]
 81077e8:	6a1b      	ldr	r3, [r3, #32]
 81077ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 81077ec:	697b      	ldr	r3, [r7, #20]
 81077ee:	f023 0303 	bic.w	r3, r3, #3
 81077f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 81077f4:	697a      	ldr	r2, [r7, #20]
 81077f6:	687b      	ldr	r3, [r7, #4]
 81077f8:	4313      	orrs	r3, r2
 81077fa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 81077fc:	697b      	ldr	r3, [r7, #20]
 81077fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107802:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8107804:	683b      	ldr	r3, [r7, #0]
 8107806:	011b      	lsls	r3, r3, #4
 8107808:	b2db      	uxtb	r3, r3
 810780a:	697a      	ldr	r2, [r7, #20]
 810780c:	4313      	orrs	r3, r2
 810780e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8107810:	693b      	ldr	r3, [r7, #16]
 8107812:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8107816:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8107818:	68bb      	ldr	r3, [r7, #8]
 810781a:	021b      	lsls	r3, r3, #8
 810781c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8107820:	693a      	ldr	r2, [r7, #16]
 8107822:	4313      	orrs	r3, r2
 8107824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8107826:	68fb      	ldr	r3, [r7, #12]
 8107828:	697a      	ldr	r2, [r7, #20]
 810782a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810782c:	68fb      	ldr	r3, [r7, #12]
 810782e:	693a      	ldr	r2, [r7, #16]
 8107830:	621a      	str	r2, [r3, #32]
}
 8107832:	bf00      	nop
 8107834:	371c      	adds	r7, #28
 8107836:	46bd      	mov	sp, r7
 8107838:	f85d 7b04 	ldr.w	r7, [sp], #4
 810783c:	4770      	bx	lr

0810783e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810783e:	b480      	push	{r7}
 8107840:	b087      	sub	sp, #28
 8107842:	af00      	add	r7, sp, #0
 8107844:	60f8      	str	r0, [r7, #12]
 8107846:	60b9      	str	r1, [r7, #8]
 8107848:	607a      	str	r2, [r7, #4]
 810784a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810784c:	68fb      	ldr	r3, [r7, #12]
 810784e:	6a1b      	ldr	r3, [r3, #32]
 8107850:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107854:	68fb      	ldr	r3, [r7, #12]
 8107856:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8107858:	68fb      	ldr	r3, [r7, #12]
 810785a:	69db      	ldr	r3, [r3, #28]
 810785c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 810785e:	68fb      	ldr	r3, [r7, #12]
 8107860:	6a1b      	ldr	r3, [r3, #32]
 8107862:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8107864:	697b      	ldr	r3, [r7, #20]
 8107866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810786a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810786c:	687b      	ldr	r3, [r7, #4]
 810786e:	021b      	lsls	r3, r3, #8
 8107870:	697a      	ldr	r2, [r7, #20]
 8107872:	4313      	orrs	r3, r2
 8107874:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8107876:	697b      	ldr	r3, [r7, #20]
 8107878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 810787c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810787e:	683b      	ldr	r3, [r7, #0]
 8107880:	031b      	lsls	r3, r3, #12
 8107882:	b29b      	uxth	r3, r3
 8107884:	697a      	ldr	r2, [r7, #20]
 8107886:	4313      	orrs	r3, r2
 8107888:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810788a:	693b      	ldr	r3, [r7, #16]
 810788c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8107890:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8107892:	68bb      	ldr	r3, [r7, #8]
 8107894:	031b      	lsls	r3, r3, #12
 8107896:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 810789a:	693a      	ldr	r2, [r7, #16]
 810789c:	4313      	orrs	r3, r2
 810789e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 81078a0:	68fb      	ldr	r3, [r7, #12]
 81078a2:	697a      	ldr	r2, [r7, #20]
 81078a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 81078a6:	68fb      	ldr	r3, [r7, #12]
 81078a8:	693a      	ldr	r2, [r7, #16]
 81078aa:	621a      	str	r2, [r3, #32]
}
 81078ac:	bf00      	nop
 81078ae:	371c      	adds	r7, #28
 81078b0:	46bd      	mov	sp, r7
 81078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81078b6:	4770      	bx	lr

081078b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 81078b8:	b480      	push	{r7}
 81078ba:	b085      	sub	sp, #20
 81078bc:	af00      	add	r7, sp, #0
 81078be:	6078      	str	r0, [r7, #4]
 81078c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81078c8:	2b01      	cmp	r3, #1
 81078ca:	d101      	bne.n	81078d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 81078cc:	2302      	movs	r3, #2
 81078ce:	e06d      	b.n	81079ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 81078d0:	687b      	ldr	r3, [r7, #4]
 81078d2:	2201      	movs	r2, #1
 81078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 81078d8:	687b      	ldr	r3, [r7, #4]
 81078da:	2202      	movs	r2, #2
 81078dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 81078e0:	687b      	ldr	r3, [r7, #4]
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	685b      	ldr	r3, [r3, #4]
 81078e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81078e8:	687b      	ldr	r3, [r7, #4]
 81078ea:	681b      	ldr	r3, [r3, #0]
 81078ec:	689b      	ldr	r3, [r3, #8]
 81078ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81078f0:	687b      	ldr	r3, [r7, #4]
 81078f2:	681b      	ldr	r3, [r3, #0]
 81078f4:	4a30      	ldr	r2, [pc, #192]	; (81079b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81078f6:	4293      	cmp	r3, r2
 81078f8:	d004      	beq.n	8107904 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81078fa:	687b      	ldr	r3, [r7, #4]
 81078fc:	681b      	ldr	r3, [r3, #0]
 81078fe:	4a2f      	ldr	r2, [pc, #188]	; (81079bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107900:	4293      	cmp	r3, r2
 8107902:	d108      	bne.n	8107916 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8107904:	68fb      	ldr	r3, [r7, #12]
 8107906:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 810790a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810790c:	683b      	ldr	r3, [r7, #0]
 810790e:	685b      	ldr	r3, [r3, #4]
 8107910:	68fa      	ldr	r2, [r7, #12]
 8107912:	4313      	orrs	r3, r2
 8107914:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8107916:	68fb      	ldr	r3, [r7, #12]
 8107918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810791c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810791e:	683b      	ldr	r3, [r7, #0]
 8107920:	681b      	ldr	r3, [r3, #0]
 8107922:	68fa      	ldr	r2, [r7, #12]
 8107924:	4313      	orrs	r3, r2
 8107926:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107928:	687b      	ldr	r3, [r7, #4]
 810792a:	681b      	ldr	r3, [r3, #0]
 810792c:	68fa      	ldr	r2, [r7, #12]
 810792e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107930:	687b      	ldr	r3, [r7, #4]
 8107932:	681b      	ldr	r3, [r3, #0]
 8107934:	4a20      	ldr	r2, [pc, #128]	; (81079b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107936:	4293      	cmp	r3, r2
 8107938:	d022      	beq.n	8107980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	681b      	ldr	r3, [r3, #0]
 810793e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107942:	d01d      	beq.n	8107980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107944:	687b      	ldr	r3, [r7, #4]
 8107946:	681b      	ldr	r3, [r3, #0]
 8107948:	4a1d      	ldr	r2, [pc, #116]	; (81079c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810794a:	4293      	cmp	r3, r2
 810794c:	d018      	beq.n	8107980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810794e:	687b      	ldr	r3, [r7, #4]
 8107950:	681b      	ldr	r3, [r3, #0]
 8107952:	4a1c      	ldr	r2, [pc, #112]	; (81079c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8107954:	4293      	cmp	r3, r2
 8107956:	d013      	beq.n	8107980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107958:	687b      	ldr	r3, [r7, #4]
 810795a:	681b      	ldr	r3, [r3, #0]
 810795c:	4a1a      	ldr	r2, [pc, #104]	; (81079c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810795e:	4293      	cmp	r3, r2
 8107960:	d00e      	beq.n	8107980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107962:	687b      	ldr	r3, [r7, #4]
 8107964:	681b      	ldr	r3, [r3, #0]
 8107966:	4a15      	ldr	r2, [pc, #84]	; (81079bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8107968:	4293      	cmp	r3, r2
 810796a:	d009      	beq.n	8107980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810796c:	687b      	ldr	r3, [r7, #4]
 810796e:	681b      	ldr	r3, [r3, #0]
 8107970:	4a16      	ldr	r2, [pc, #88]	; (81079cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8107972:	4293      	cmp	r3, r2
 8107974:	d004      	beq.n	8107980 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8107976:	687b      	ldr	r3, [r7, #4]
 8107978:	681b      	ldr	r3, [r3, #0]
 810797a:	4a15      	ldr	r2, [pc, #84]	; (81079d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810797c:	4293      	cmp	r3, r2
 810797e:	d10c      	bne.n	810799a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8107980:	68bb      	ldr	r3, [r7, #8]
 8107982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107986:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8107988:	683b      	ldr	r3, [r7, #0]
 810798a:	689b      	ldr	r3, [r3, #8]
 810798c:	68ba      	ldr	r2, [r7, #8]
 810798e:	4313      	orrs	r3, r2
 8107990:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	681b      	ldr	r3, [r3, #0]
 8107996:	68ba      	ldr	r2, [r7, #8]
 8107998:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810799a:	687b      	ldr	r3, [r7, #4]
 810799c:	2201      	movs	r2, #1
 810799e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81079a2:	687b      	ldr	r3, [r7, #4]
 81079a4:	2200      	movs	r2, #0
 81079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81079aa:	2300      	movs	r3, #0
}
 81079ac:	4618      	mov	r0, r3
 81079ae:	3714      	adds	r7, #20
 81079b0:	46bd      	mov	sp, r7
 81079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079b6:	4770      	bx	lr
 81079b8:	40010000 	.word	0x40010000
 81079bc:	40010400 	.word	0x40010400
 81079c0:	40000400 	.word	0x40000400
 81079c4:	40000800 	.word	0x40000800
 81079c8:	40000c00 	.word	0x40000c00
 81079cc:	40001800 	.word	0x40001800
 81079d0:	40014000 	.word	0x40014000

081079d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 81079d4:	b480      	push	{r7}
 81079d6:	b085      	sub	sp, #20
 81079d8:	af00      	add	r7, sp, #0
 81079da:	6078      	str	r0, [r7, #4]
 81079dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 81079de:	2300      	movs	r3, #0
 81079e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 81079e2:	687b      	ldr	r3, [r7, #4]
 81079e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81079e8:	2b01      	cmp	r3, #1
 81079ea:	d101      	bne.n	81079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 81079ec:	2302      	movs	r3, #2
 81079ee:	e065      	b.n	8107abc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 81079f0:	687b      	ldr	r3, [r7, #4]
 81079f2:	2201      	movs	r2, #1
 81079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 81079f8:	68fb      	ldr	r3, [r7, #12]
 81079fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 81079fe:	683b      	ldr	r3, [r7, #0]
 8107a00:	68db      	ldr	r3, [r3, #12]
 8107a02:	4313      	orrs	r3, r2
 8107a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107a06:	68fb      	ldr	r3, [r7, #12]
 8107a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107a0c:	683b      	ldr	r3, [r7, #0]
 8107a0e:	689b      	ldr	r3, [r3, #8]
 8107a10:	4313      	orrs	r3, r2
 8107a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107a14:	68fb      	ldr	r3, [r7, #12]
 8107a16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107a1a:	683b      	ldr	r3, [r7, #0]
 8107a1c:	685b      	ldr	r3, [r3, #4]
 8107a1e:	4313      	orrs	r3, r2
 8107a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8107a22:	68fb      	ldr	r3, [r7, #12]
 8107a24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107a28:	683b      	ldr	r3, [r7, #0]
 8107a2a:	681b      	ldr	r3, [r3, #0]
 8107a2c:	4313      	orrs	r3, r2
 8107a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8107a30:	68fb      	ldr	r3, [r7, #12]
 8107a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107a36:	683b      	ldr	r3, [r7, #0]
 8107a38:	691b      	ldr	r3, [r3, #16]
 8107a3a:	4313      	orrs	r3, r2
 8107a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8107a3e:	68fb      	ldr	r3, [r7, #12]
 8107a40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107a44:	683b      	ldr	r3, [r7, #0]
 8107a46:	695b      	ldr	r3, [r3, #20]
 8107a48:	4313      	orrs	r3, r2
 8107a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107a4c:	68fb      	ldr	r3, [r7, #12]
 8107a4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8107a52:	683b      	ldr	r3, [r7, #0]
 8107a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107a56:	4313      	orrs	r3, r2
 8107a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107a5a:	68fb      	ldr	r3, [r7, #12]
 8107a5c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8107a60:	683b      	ldr	r3, [r7, #0]
 8107a62:	699b      	ldr	r3, [r3, #24]
 8107a64:	041b      	lsls	r3, r3, #16
 8107a66:	4313      	orrs	r3, r2
 8107a68:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107a6a:	687b      	ldr	r3, [r7, #4]
 8107a6c:	681b      	ldr	r3, [r3, #0]
 8107a6e:	4a16      	ldr	r2, [pc, #88]	; (8107ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8107a70:	4293      	cmp	r3, r2
 8107a72:	d004      	beq.n	8107a7e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8107a74:	687b      	ldr	r3, [r7, #4]
 8107a76:	681b      	ldr	r3, [r3, #0]
 8107a78:	4a14      	ldr	r2, [pc, #80]	; (8107acc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8107a7a:	4293      	cmp	r3, r2
 8107a7c:	d115      	bne.n	8107aaa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8107a7e:	68fb      	ldr	r3, [r7, #12]
 8107a80:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8107a84:	683b      	ldr	r3, [r7, #0]
 8107a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8107a88:	051b      	lsls	r3, r3, #20
 8107a8a:	4313      	orrs	r3, r2
 8107a8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8107a8e:	68fb      	ldr	r3, [r7, #12]
 8107a90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8107a94:	683b      	ldr	r3, [r7, #0]
 8107a96:	69db      	ldr	r3, [r3, #28]
 8107a98:	4313      	orrs	r3, r2
 8107a9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8107a9c:	68fb      	ldr	r3, [r7, #12]
 8107a9e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8107aa2:	683b      	ldr	r3, [r7, #0]
 8107aa4:	6a1b      	ldr	r3, [r3, #32]
 8107aa6:	4313      	orrs	r3, r2
 8107aa8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8107aaa:	687b      	ldr	r3, [r7, #4]
 8107aac:	681b      	ldr	r3, [r3, #0]
 8107aae:	68fa      	ldr	r2, [r7, #12]
 8107ab0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8107ab2:	687b      	ldr	r3, [r7, #4]
 8107ab4:	2200      	movs	r2, #0
 8107ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107aba:	2300      	movs	r3, #0
}
 8107abc:	4618      	mov	r0, r3
 8107abe:	3714      	adds	r7, #20
 8107ac0:	46bd      	mov	sp, r7
 8107ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ac6:	4770      	bx	lr
 8107ac8:	40010000 	.word	0x40010000
 8107acc:	40010400 	.word	0x40010400

08107ad0 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 8107ad0:	b480      	push	{r7}
 8107ad2:	b083      	sub	sp, #12
 8107ad4:	af00      	add	r7, sp, #0
 8107ad6:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	687a      	ldr	r2, [r7, #4]
 8107adc:	605a      	str	r2, [r3, #4]
 8107ade:	687b      	ldr	r3, [r7, #4]
 8107ae0:	685a      	ldr	r2, [r3, #4]
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	601a      	str	r2, [r3, #0]
}
 8107ae6:	bf00      	nop
 8107ae8:	370c      	adds	r7, #12
 8107aea:	46bd      	mov	sp, r7
 8107aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107af0:	4770      	bx	lr

08107af2 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 8107af2:	b480      	push	{r7}
 8107af4:	b083      	sub	sp, #12
 8107af6:	af00      	add	r7, sp, #0
 8107af8:	6078      	str	r0, [r7, #4]
 8107afa:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8107afc:	687b      	ldr	r3, [r7, #4]
 8107afe:	685a      	ldr	r2, [r3, #4]
 8107b00:	683b      	ldr	r3, [r7, #0]
 8107b02:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8107b04:	683b      	ldr	r3, [r7, #0]
 8107b06:	687a      	ldr	r2, [r7, #4]
 8107b08:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8107b0a:	683b      	ldr	r3, [r7, #0]
 8107b0c:	681b      	ldr	r3, [r3, #0]
 8107b0e:	683a      	ldr	r2, [r7, #0]
 8107b10:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8107b12:	683b      	ldr	r3, [r7, #0]
 8107b14:	685b      	ldr	r3, [r3, #4]
 8107b16:	683a      	ldr	r2, [r7, #0]
 8107b18:	601a      	str	r2, [r3, #0]
}
 8107b1a:	bf00      	nop
 8107b1c:	370c      	adds	r7, #12
 8107b1e:	46bd      	mov	sp, r7
 8107b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b24:	4770      	bx	lr

08107b26 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8107b26:	b580      	push	{r7, lr}
 8107b28:	b082      	sub	sp, #8
 8107b2a:	af00      	add	r7, sp, #0
 8107b2c:	6078      	str	r0, [r7, #4]
 8107b2e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8107b30:	6839      	ldr	r1, [r7, #0]
 8107b32:	6878      	ldr	r0, [r7, #4]
 8107b34:	f7ff ffdd 	bl	8107af2 <metal_list_add_before>
}
 8107b38:	bf00      	nop
 8107b3a:	3708      	adds	r7, #8
 8107b3c:	46bd      	mov	sp, r7
 8107b3e:	bd80      	pop	{r7, pc}

08107b40 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8107b40:	b480      	push	{r7}
 8107b42:	b083      	sub	sp, #12
 8107b44:	af00      	add	r7, sp, #0
 8107b46:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8107b48:	687b      	ldr	r3, [r7, #4]
 8107b4a:	681b      	ldr	r3, [r3, #0]
 8107b4c:	687a      	ldr	r2, [r7, #4]
 8107b4e:	6852      	ldr	r2, [r2, #4]
 8107b50:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8107b52:	687b      	ldr	r3, [r7, #4]
 8107b54:	685b      	ldr	r3, [r3, #4]
 8107b56:	687a      	ldr	r2, [r7, #4]
 8107b58:	6812      	ldr	r2, [r2, #0]
 8107b5a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	687a      	ldr	r2, [r7, #4]
 8107b60:	605a      	str	r2, [r3, #4]
 8107b62:	687b      	ldr	r3, [r7, #4]
 8107b64:	685a      	ldr	r2, [r3, #4]
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	601a      	str	r2, [r3, #0]
}
 8107b6a:	bf00      	nop
 8107b6c:	370c      	adds	r7, #12
 8107b6e:	46bd      	mov	sp, r7
 8107b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b74:	4770      	bx	lr

08107b76 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8107b76:	b580      	push	{r7, lr}
 8107b78:	b082      	sub	sp, #8
 8107b7a:	af00      	add	r7, sp, #0
 8107b7c:	6078      	str	r0, [r7, #4]
 8107b7e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8107b80:	6839      	ldr	r1, [r7, #0]
 8107b82:	6878      	ldr	r0, [r7, #4]
 8107b84:	f001 fe72 	bl	810986c <metal_machine_cache_flush>
}
 8107b88:	bf00      	nop
 8107b8a:	3708      	adds	r7, #8
 8107b8c:	46bd      	mov	sp, r7
 8107b8e:	bd80      	pop	{r7, pc}

08107b90 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8107b90:	b580      	push	{r7, lr}
 8107b92:	b082      	sub	sp, #8
 8107b94:	af00      	add	r7, sp, #0
 8107b96:	6078      	str	r0, [r7, #4]
 8107b98:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8107b9a:	6839      	ldr	r1, [r7, #0]
 8107b9c:	6878      	ldr	r0, [r7, #4]
 8107b9e:	f001 fe70 	bl	8109882 <metal_machine_cache_invalidate>
}
 8107ba2:	bf00      	nop
 8107ba4:	3708      	adds	r7, #8
 8107ba6:	46bd      	mov	sp, r7
 8107ba8:	bd80      	pop	{r7, pc}

08107baa <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8107baa:	b580      	push	{r7, lr}
 8107bac:	b082      	sub	sp, #8
 8107bae:	af00      	add	r7, sp, #0
 8107bb0:	6078      	str	r0, [r7, #4]
 8107bb2:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 8107bb4:	6839      	ldr	r1, [r7, #0]
 8107bb6:	6878      	ldr	r0, [r7, #4]
 8107bb8:	f7ff ffdd 	bl	8107b76 <__metal_cache_flush>
}
 8107bbc:	bf00      	nop
 8107bbe:	3708      	adds	r7, #8
 8107bc0:	46bd      	mov	sp, r7
 8107bc2:	bd80      	pop	{r7, pc}

08107bc4 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 8107bc4:	b580      	push	{r7, lr}
 8107bc6:	b082      	sub	sp, #8
 8107bc8:	af00      	add	r7, sp, #0
 8107bca:	6078      	str	r0, [r7, #4]
 8107bcc:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8107bce:	6839      	ldr	r1, [r7, #0]
 8107bd0:	6878      	ldr	r0, [r7, #4]
 8107bd2:	f7ff ffdd 	bl	8107b90 <__metal_cache_invalidate>
}
 8107bd6:	bf00      	nop
 8107bd8:	3708      	adds	r7, #8
 8107bda:	46bd      	mov	sp, r7
 8107bdc:	bd80      	pop	{r7, pc}
	...

08107be0 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 8107be0:	b580      	push	{r7, lr}
 8107be2:	b082      	sub	sp, #8
 8107be4:	af00      	add	r7, sp, #0
 8107be6:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	2b00      	cmp	r3, #0
 8107bec:	d008      	beq.n	8107c00 <metal_bus_register+0x20>
 8107bee:	687b      	ldr	r3, [r7, #4]
 8107bf0:	681b      	ldr	r3, [r3, #0]
 8107bf2:	2b00      	cmp	r3, #0
 8107bf4:	d004      	beq.n	8107c00 <metal_bus_register+0x20>
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	681b      	ldr	r3, [r3, #0]
 8107bfa:	781b      	ldrb	r3, [r3, #0]
 8107bfc:	2b00      	cmp	r3, #0
 8107bfe:	d102      	bne.n	8107c06 <metal_bus_register+0x26>
		return -EINVAL;
 8107c00:	f06f 0315 	mvn.w	r3, #21
 8107c04:	e026      	b.n	8107c54 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 8107c06:	687b      	ldr	r3, [r7, #4]
 8107c08:	681b      	ldr	r3, [r3, #0]
 8107c0a:	2100      	movs	r1, #0
 8107c0c:	4618      	mov	r0, r3
 8107c0e:	f000 f855 	bl	8107cbc <metal_bus_find>
 8107c12:	4603      	mov	r3, r0
 8107c14:	2b00      	cmp	r3, #0
 8107c16:	d102      	bne.n	8107c1e <metal_bus_register+0x3e>
		return -EEXIST;
 8107c18:	f06f 0310 	mvn.w	r3, #16
 8107c1c:	e01a      	b.n	8107c54 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 8107c1e:	687b      	ldr	r3, [r7, #4]
 8107c20:	331c      	adds	r3, #28
 8107c22:	4618      	mov	r0, r3
 8107c24:	f7ff ff54 	bl	8107ad0 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8107c28:	687b      	ldr	r3, [r7, #4]
 8107c2a:	3324      	adds	r3, #36	; 0x24
 8107c2c:	4619      	mov	r1, r3
 8107c2e:	480b      	ldr	r0, [pc, #44]	; (8107c5c <metal_bus_register+0x7c>)
 8107c30:	f7ff ff79 	bl	8107b26 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8107c34:	4b0a      	ldr	r3, [pc, #40]	; (8107c60 <metal_bus_register+0x80>)
 8107c36:	781b      	ldrb	r3, [r3, #0]
 8107c38:	2b06      	cmp	r3, #6
 8107c3a:	d90a      	bls.n	8107c52 <metal_bus_register+0x72>
 8107c3c:	4b08      	ldr	r3, [pc, #32]	; (8107c60 <metal_bus_register+0x80>)
 8107c3e:	685b      	ldr	r3, [r3, #4]
 8107c40:	2b00      	cmp	r3, #0
 8107c42:	d006      	beq.n	8107c52 <metal_bus_register+0x72>
 8107c44:	4b06      	ldr	r3, [pc, #24]	; (8107c60 <metal_bus_register+0x80>)
 8107c46:	685b      	ldr	r3, [r3, #4]
 8107c48:	687a      	ldr	r2, [r7, #4]
 8107c4a:	6812      	ldr	r2, [r2, #0]
 8107c4c:	4905      	ldr	r1, [pc, #20]	; (8107c64 <metal_bus_register+0x84>)
 8107c4e:	2007      	movs	r0, #7
 8107c50:	4798      	blx	r3
	return 0;
 8107c52:	2300      	movs	r3, #0
}
 8107c54:	4618      	mov	r0, r3
 8107c56:	3708      	adds	r7, #8
 8107c58:	46bd      	mov	sp, r7
 8107c5a:	bd80      	pop	{r7, pc}
 8107c5c:	100004f0 	.word	0x100004f0
 8107c60:	100004e8 	.word	0x100004e8
 8107c64:	0810b36c 	.word	0x0810b36c

08107c68 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 8107c68:	b580      	push	{r7, lr}
 8107c6a:	b082      	sub	sp, #8
 8107c6c:	af00      	add	r7, sp, #0
 8107c6e:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 8107c70:	687b      	ldr	r3, [r7, #4]
 8107c72:	3324      	adds	r3, #36	; 0x24
 8107c74:	4618      	mov	r0, r3
 8107c76:	f7ff ff63 	bl	8107b40 <metal_list_del>
	if (bus->ops.bus_close)
 8107c7a:	687b      	ldr	r3, [r7, #4]
 8107c7c:	685b      	ldr	r3, [r3, #4]
 8107c7e:	2b00      	cmp	r3, #0
 8107c80:	d003      	beq.n	8107c8a <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 8107c82:	687b      	ldr	r3, [r7, #4]
 8107c84:	685b      	ldr	r3, [r3, #4]
 8107c86:	6878      	ldr	r0, [r7, #4]
 8107c88:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 8107c8a:	4b0a      	ldr	r3, [pc, #40]	; (8107cb4 <metal_bus_unregister+0x4c>)
 8107c8c:	781b      	ldrb	r3, [r3, #0]
 8107c8e:	2b06      	cmp	r3, #6
 8107c90:	d90a      	bls.n	8107ca8 <metal_bus_unregister+0x40>
 8107c92:	4b08      	ldr	r3, [pc, #32]	; (8107cb4 <metal_bus_unregister+0x4c>)
 8107c94:	685b      	ldr	r3, [r3, #4]
 8107c96:	2b00      	cmp	r3, #0
 8107c98:	d006      	beq.n	8107ca8 <metal_bus_unregister+0x40>
 8107c9a:	4b06      	ldr	r3, [pc, #24]	; (8107cb4 <metal_bus_unregister+0x4c>)
 8107c9c:	685b      	ldr	r3, [r3, #4]
 8107c9e:	687a      	ldr	r2, [r7, #4]
 8107ca0:	6812      	ldr	r2, [r2, #0]
 8107ca2:	4905      	ldr	r1, [pc, #20]	; (8107cb8 <metal_bus_unregister+0x50>)
 8107ca4:	2007      	movs	r0, #7
 8107ca6:	4798      	blx	r3
	return 0;
 8107ca8:	2300      	movs	r3, #0
}
 8107caa:	4618      	mov	r0, r3
 8107cac:	3708      	adds	r7, #8
 8107cae:	46bd      	mov	sp, r7
 8107cb0:	bd80      	pop	{r7, pc}
 8107cb2:	bf00      	nop
 8107cb4:	100004e8 	.word	0x100004e8
 8107cb8:	0810b380 	.word	0x0810b380

08107cbc <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 8107cbc:	b580      	push	{r7, lr}
 8107cbe:	b084      	sub	sp, #16
 8107cc0:	af00      	add	r7, sp, #0
 8107cc2:	6078      	str	r0, [r7, #4]
 8107cc4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8107cc6:	4b13      	ldr	r3, [pc, #76]	; (8107d14 <metal_bus_find+0x58>)
 8107cc8:	689b      	ldr	r3, [r3, #8]
 8107cca:	60fb      	str	r3, [r7, #12]
 8107ccc:	e017      	b.n	8107cfe <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 8107cce:	68fb      	ldr	r3, [r7, #12]
 8107cd0:	3b24      	subs	r3, #36	; 0x24
 8107cd2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8107cd4:	68bb      	ldr	r3, [r7, #8]
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	6879      	ldr	r1, [r7, #4]
 8107cda:	4618      	mov	r0, r3
 8107cdc:	f7f8 fb00 	bl	81002e0 <strcmp>
 8107ce0:	4603      	mov	r3, r0
 8107ce2:	2b00      	cmp	r3, #0
 8107ce4:	d003      	beq.n	8107cee <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8107ce6:	68fb      	ldr	r3, [r7, #12]
 8107ce8:	681b      	ldr	r3, [r3, #0]
 8107cea:	60fb      	str	r3, [r7, #12]
 8107cec:	e007      	b.n	8107cfe <metal_bus_find+0x42>
			continue;
		if (result)
 8107cee:	683b      	ldr	r3, [r7, #0]
 8107cf0:	2b00      	cmp	r3, #0
 8107cf2:	d002      	beq.n	8107cfa <metal_bus_find+0x3e>
			*result = bus;
 8107cf4:	683b      	ldr	r3, [r7, #0]
 8107cf6:	68ba      	ldr	r2, [r7, #8]
 8107cf8:	601a      	str	r2, [r3, #0]
		return 0;
 8107cfa:	2300      	movs	r3, #0
 8107cfc:	e005      	b.n	8107d0a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8107cfe:	68fb      	ldr	r3, [r7, #12]
 8107d00:	4a05      	ldr	r2, [pc, #20]	; (8107d18 <metal_bus_find+0x5c>)
 8107d02:	4293      	cmp	r3, r2
 8107d04:	d1e3      	bne.n	8107cce <metal_bus_find+0x12>
	}
	return -ENOENT;
 8107d06:	f06f 0301 	mvn.w	r3, #1
}
 8107d0a:	4618      	mov	r0, r3
 8107d0c:	3710      	adds	r7, #16
 8107d0e:	46bd      	mov	sp, r7
 8107d10:	bd80      	pop	{r7, pc}
 8107d12:	bf00      	nop
 8107d14:	100004e8 	.word	0x100004e8
 8107d18:	100004f0 	.word	0x100004f0

08107d1c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 8107d1c:	b580      	push	{r7, lr}
 8107d1e:	b086      	sub	sp, #24
 8107d20:	af00      	add	r7, sp, #0
 8107d22:	60f8      	str	r0, [r7, #12]
 8107d24:	60b9      	str	r1, [r7, #8]
 8107d26:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8107d28:	68fb      	ldr	r3, [r7, #12]
 8107d2a:	2b00      	cmp	r3, #0
 8107d2c:	d00d      	beq.n	8107d4a <metal_device_open+0x2e>
 8107d2e:	68fb      	ldr	r3, [r7, #12]
 8107d30:	781b      	ldrb	r3, [r3, #0]
 8107d32:	2b00      	cmp	r3, #0
 8107d34:	d009      	beq.n	8107d4a <metal_device_open+0x2e>
 8107d36:	68bb      	ldr	r3, [r7, #8]
 8107d38:	2b00      	cmp	r3, #0
 8107d3a:	d006      	beq.n	8107d4a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 8107d3c:	68bb      	ldr	r3, [r7, #8]
 8107d3e:	781b      	ldrb	r3, [r3, #0]
 8107d40:	2b00      	cmp	r3, #0
 8107d42:	d002      	beq.n	8107d4a <metal_device_open+0x2e>
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	2b00      	cmp	r3, #0
 8107d48:	d102      	bne.n	8107d50 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 8107d4a:	f06f 0315 	mvn.w	r3, #21
 8107d4e:	e01f      	b.n	8107d90 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8107d50:	f107 0310 	add.w	r3, r7, #16
 8107d54:	4619      	mov	r1, r3
 8107d56:	68f8      	ldr	r0, [r7, #12]
 8107d58:	f7ff ffb0 	bl	8107cbc <metal_bus_find>
 8107d5c:	6178      	str	r0, [r7, #20]
	if (error)
 8107d5e:	697b      	ldr	r3, [r7, #20]
 8107d60:	2b00      	cmp	r3, #0
 8107d62:	d001      	beq.n	8107d68 <metal_device_open+0x4c>
		return error;
 8107d64:	697b      	ldr	r3, [r7, #20]
 8107d66:	e013      	b.n	8107d90 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8107d68:	693b      	ldr	r3, [r7, #16]
 8107d6a:	689b      	ldr	r3, [r3, #8]
 8107d6c:	2b00      	cmp	r3, #0
 8107d6e:	d102      	bne.n	8107d76 <metal_device_open+0x5a>
		return -ENODEV;
 8107d70:	f06f 0312 	mvn.w	r3, #18
 8107d74:	e00c      	b.n	8107d90 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8107d76:	693b      	ldr	r3, [r7, #16]
 8107d78:	689b      	ldr	r3, [r3, #8]
 8107d7a:	6938      	ldr	r0, [r7, #16]
 8107d7c:	687a      	ldr	r2, [r7, #4]
 8107d7e:	68b9      	ldr	r1, [r7, #8]
 8107d80:	4798      	blx	r3
 8107d82:	6178      	str	r0, [r7, #20]
	if (error)
 8107d84:	697b      	ldr	r3, [r7, #20]
 8107d86:	2b00      	cmp	r3, #0
 8107d88:	d001      	beq.n	8107d8e <metal_device_open+0x72>
		return error;
 8107d8a:	697b      	ldr	r3, [r7, #20]
 8107d8c:	e000      	b.n	8107d90 <metal_device_open+0x74>

	return 0;
 8107d8e:	2300      	movs	r3, #0
}
 8107d90:	4618      	mov	r0, r3
 8107d92:	3718      	adds	r7, #24
 8107d94:	46bd      	mov	sp, r7
 8107d96:	bd80      	pop	{r7, pc}

08107d98 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8107d98:	b580      	push	{r7, lr}
 8107d9a:	b082      	sub	sp, #8
 8107d9c:	af00      	add	r7, sp, #0
 8107d9e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8107da0:	687b      	ldr	r3, [r7, #4]
 8107da2:	681b      	ldr	r3, [r3, #0]
 8107da4:	2b00      	cmp	r3, #0
 8107da6:	d008      	beq.n	8107dba <metal_register_generic_device+0x22>
 8107da8:	687b      	ldr	r3, [r7, #4]
 8107daa:	681b      	ldr	r3, [r3, #0]
 8107dac:	781b      	ldrb	r3, [r3, #0]
 8107dae:	2b00      	cmp	r3, #0
 8107db0:	d003      	beq.n	8107dba <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8107db2:	687b      	ldr	r3, [r7, #4]
 8107db4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8107db6:	2b02      	cmp	r3, #2
 8107db8:	d902      	bls.n	8107dc0 <metal_register_generic_device+0x28>
		return -EINVAL;
 8107dba:	f06f 0315 	mvn.w	r3, #21
 8107dbe:	e009      	b.n	8107dd4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8107dc0:	687b      	ldr	r3, [r7, #4]
 8107dc2:	4a06      	ldr	r2, [pc, #24]	; (8107ddc <metal_register_generic_device+0x44>)
 8107dc4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8107dc6:	687b      	ldr	r3, [r7, #4]
 8107dc8:	336c      	adds	r3, #108	; 0x6c
 8107dca:	4619      	mov	r1, r3
 8107dcc:	4804      	ldr	r0, [pc, #16]	; (8107de0 <metal_register_generic_device+0x48>)
 8107dce:	f7ff feaa 	bl	8107b26 <metal_list_add_tail>
			    &device->node);
	return 0;
 8107dd2:	2300      	movs	r3, #0
}
 8107dd4:	4618      	mov	r0, r3
 8107dd6:	3708      	adds	r7, #8
 8107dd8:	46bd      	mov	sp, r7
 8107dda:	bd80      	pop	{r7, pc}
 8107ddc:	10000010 	.word	0x10000010
 8107de0:	10000500 	.word	0x10000500

08107de4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8107de4:	b580      	push	{r7, lr}
 8107de6:	b086      	sub	sp, #24
 8107de8:	af00      	add	r7, sp, #0
 8107dea:	60f8      	str	r0, [r7, #12]
 8107dec:	60b9      	str	r1, [r7, #8]
 8107dee:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8107df0:	4b12      	ldr	r3, [pc, #72]	; (8107e3c <metal_generic_dev_open+0x58>)
 8107df2:	699b      	ldr	r3, [r3, #24]
 8107df4:	617b      	str	r3, [r7, #20]
 8107df6:	e017      	b.n	8107e28 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8107df8:	697b      	ldr	r3, [r7, #20]
 8107dfa:	3b6c      	subs	r3, #108	; 0x6c
 8107dfc:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 8107dfe:	693b      	ldr	r3, [r7, #16]
 8107e00:	681b      	ldr	r3, [r3, #0]
 8107e02:	68b9      	ldr	r1, [r7, #8]
 8107e04:	4618      	mov	r0, r3
 8107e06:	f7f8 fa6b 	bl	81002e0 <strcmp>
 8107e0a:	4603      	mov	r3, r0
 8107e0c:	2b00      	cmp	r3, #0
 8107e0e:	d003      	beq.n	8107e18 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8107e10:	697b      	ldr	r3, [r7, #20]
 8107e12:	681b      	ldr	r3, [r3, #0]
 8107e14:	617b      	str	r3, [r7, #20]
 8107e16:	e007      	b.n	8107e28 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8107e18:	687b      	ldr	r3, [r7, #4]
 8107e1a:	693a      	ldr	r2, [r7, #16]
 8107e1c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 8107e1e:	6938      	ldr	r0, [r7, #16]
 8107e20:	f000 f88c 	bl	8107f3c <metal_generic_dev_sys_open>
 8107e24:	4603      	mov	r3, r0
 8107e26:	e005      	b.n	8107e34 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8107e28:	697b      	ldr	r3, [r7, #20]
 8107e2a:	4a05      	ldr	r2, [pc, #20]	; (8107e40 <metal_generic_dev_open+0x5c>)
 8107e2c:	4293      	cmp	r3, r2
 8107e2e:	d1e3      	bne.n	8107df8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8107e30:	f06f 0312 	mvn.w	r3, #18
}
 8107e34:	4618      	mov	r0, r3
 8107e36:	3718      	adds	r7, #24
 8107e38:	46bd      	mov	sp, r7
 8107e3a:	bd80      	pop	{r7, pc}
 8107e3c:	100004e8 	.word	0x100004e8
 8107e40:	10000500 	.word	0x10000500

08107e44 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8107e44:	b580      	push	{r7, lr}
 8107e46:	b086      	sub	sp, #24
 8107e48:	af00      	add	r7, sp, #0
 8107e4a:	60f8      	str	r0, [r7, #12]
 8107e4c:	60b9      	str	r1, [r7, #8]
 8107e4e:	607a      	str	r2, [r7, #4]
 8107e50:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8107e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8107e54:	683b      	ldr	r3, [r7, #0]
 8107e56:	429a      	cmp	r2, r3
 8107e58:	d009      	beq.n	8107e6e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 8107e5a:	6a3a      	ldr	r2, [r7, #32]
 8107e5c:	4613      	mov	r3, r2
 8107e5e:	005b      	lsls	r3, r3, #1
 8107e60:	4413      	add	r3, r2
 8107e62:	009b      	lsls	r3, r3, #2
 8107e64:	461a      	mov	r2, r3
 8107e66:	6839      	ldr	r1, [r7, #0]
 8107e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8107e6a:	f002 fa69 	bl	810a340 <memcpy>
	for (i = 0; i < nents_in; i++) {
 8107e6e:	2300      	movs	r3, #0
 8107e70:	617b      	str	r3, [r7, #20]
 8107e72:	e02f      	b.n	8107ed4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8107e74:	687b      	ldr	r3, [r7, #4]
 8107e76:	2b02      	cmp	r3, #2
 8107e78:	d114      	bne.n	8107ea4 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 8107e7a:	697a      	ldr	r2, [r7, #20]
 8107e7c:	4613      	mov	r3, r2
 8107e7e:	005b      	lsls	r3, r3, #1
 8107e80:	4413      	add	r3, r2
 8107e82:	009b      	lsls	r3, r3, #2
 8107e84:	461a      	mov	r2, r3
 8107e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107e88:	4413      	add	r3, r2
 8107e8a:	6818      	ldr	r0, [r3, #0]
 8107e8c:	697a      	ldr	r2, [r7, #20]
 8107e8e:	4613      	mov	r3, r2
 8107e90:	005b      	lsls	r3, r3, #1
 8107e92:	4413      	add	r3, r2
 8107e94:	009b      	lsls	r3, r3, #2
 8107e96:	461a      	mov	r2, r3
 8107e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107e9a:	4413      	add	r3, r2
 8107e9c:	689b      	ldr	r3, [r3, #8]
 8107e9e:	4619      	mov	r1, r3
 8107ea0:	f7ff fe83 	bl	8107baa <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8107ea4:	697a      	ldr	r2, [r7, #20]
 8107ea6:	4613      	mov	r3, r2
 8107ea8:	005b      	lsls	r3, r3, #1
 8107eaa:	4413      	add	r3, r2
 8107eac:	009b      	lsls	r3, r3, #2
 8107eae:	461a      	mov	r2, r3
 8107eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107eb2:	4413      	add	r3, r2
 8107eb4:	6818      	ldr	r0, [r3, #0]
 8107eb6:	697a      	ldr	r2, [r7, #20]
 8107eb8:	4613      	mov	r3, r2
 8107eba:	005b      	lsls	r3, r3, #1
 8107ebc:	4413      	add	r3, r2
 8107ebe:	009b      	lsls	r3, r3, #2
 8107ec0:	461a      	mov	r2, r3
 8107ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8107ec4:	4413      	add	r3, r2
 8107ec6:	689b      	ldr	r3, [r3, #8]
 8107ec8:	4619      	mov	r1, r3
 8107eca:	f7ff fe7b 	bl	8107bc4 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 8107ece:	697b      	ldr	r3, [r7, #20]
 8107ed0:	3301      	adds	r3, #1
 8107ed2:	617b      	str	r3, [r7, #20]
 8107ed4:	697a      	ldr	r2, [r7, #20]
 8107ed6:	6a3b      	ldr	r3, [r7, #32]
 8107ed8:	429a      	cmp	r2, r3
 8107eda:	dbcb      	blt.n	8107e74 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 8107edc:	6a3b      	ldr	r3, [r7, #32]
}
 8107ede:	4618      	mov	r0, r3
 8107ee0:	3718      	adds	r7, #24
 8107ee2:	46bd      	mov	sp, r7
 8107ee4:	bd80      	pop	{r7, pc}

08107ee6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8107ee6:	b580      	push	{r7, lr}
 8107ee8:	b086      	sub	sp, #24
 8107eea:	af00      	add	r7, sp, #0
 8107eec:	60f8      	str	r0, [r7, #12]
 8107eee:	60b9      	str	r1, [r7, #8]
 8107ef0:	607a      	str	r2, [r7, #4]
 8107ef2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8107ef4:	2300      	movs	r3, #0
 8107ef6:	617b      	str	r3, [r7, #20]
 8107ef8:	e017      	b.n	8107f2a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 8107efa:	697a      	ldr	r2, [r7, #20]
 8107efc:	4613      	mov	r3, r2
 8107efe:	005b      	lsls	r3, r3, #1
 8107f00:	4413      	add	r3, r2
 8107f02:	009b      	lsls	r3, r3, #2
 8107f04:	461a      	mov	r2, r3
 8107f06:	683b      	ldr	r3, [r7, #0]
 8107f08:	4413      	add	r3, r2
 8107f0a:	6818      	ldr	r0, [r3, #0]
 8107f0c:	697a      	ldr	r2, [r7, #20]
 8107f0e:	4613      	mov	r3, r2
 8107f10:	005b      	lsls	r3, r3, #1
 8107f12:	4413      	add	r3, r2
 8107f14:	009b      	lsls	r3, r3, #2
 8107f16:	461a      	mov	r2, r3
 8107f18:	683b      	ldr	r3, [r7, #0]
 8107f1a:	4413      	add	r3, r2
 8107f1c:	689b      	ldr	r3, [r3, #8]
 8107f1e:	4619      	mov	r1, r3
 8107f20:	f7ff fe50 	bl	8107bc4 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8107f24:	697b      	ldr	r3, [r7, #20]
 8107f26:	3301      	adds	r3, #1
 8107f28:	617b      	str	r3, [r7, #20]
 8107f2a:	697a      	ldr	r2, [r7, #20]
 8107f2c:	6a3b      	ldr	r3, [r7, #32]
 8107f2e:	429a      	cmp	r2, r3
 8107f30:	dbe3      	blt.n	8107efa <metal_generic_dev_dma_unmap+0x14>
	}
}
 8107f32:	bf00      	nop
 8107f34:	bf00      	nop
 8107f36:	3718      	adds	r7, #24
 8107f38:	46bd      	mov	sp, r7
 8107f3a:	bd80      	pop	{r7, pc}

08107f3c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 8107f3c:	b580      	push	{r7, lr}
 8107f3e:	b084      	sub	sp, #16
 8107f40:	af00      	add	r7, sp, #0
 8107f42:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8107f44:	2300      	movs	r3, #0
 8107f46:	60fb      	str	r3, [r7, #12]
 8107f48:	e013      	b.n	8107f72 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 8107f4a:	68fa      	ldr	r2, [r7, #12]
 8107f4c:	4613      	mov	r3, r2
 8107f4e:	005b      	lsls	r3, r3, #1
 8107f50:	4413      	add	r3, r2
 8107f52:	011b      	lsls	r3, r3, #4
 8107f54:	3308      	adds	r3, #8
 8107f56:	687a      	ldr	r2, [r7, #4]
 8107f58:	4413      	add	r3, r2
 8107f5a:	3304      	adds	r3, #4
 8107f5c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 8107f5e:	68bb      	ldr	r3, [r7, #8]
 8107f60:	689b      	ldr	r3, [r3, #8]
 8107f62:	2b00      	cmp	r3, #0
 8107f64:	d00b      	beq.n	8107f7e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8107f66:	68b8      	ldr	r0, [r7, #8]
 8107f68:	f000 f828 	bl	8107fbc <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 8107f6c:	68fb      	ldr	r3, [r7, #12]
 8107f6e:	3301      	adds	r3, #1
 8107f70:	60fb      	str	r3, [r7, #12]
 8107f72:	687b      	ldr	r3, [r7, #4]
 8107f74:	689b      	ldr	r3, [r3, #8]
 8107f76:	68fa      	ldr	r2, [r7, #12]
 8107f78:	429a      	cmp	r2, r3
 8107f7a:	d3e6      	bcc.n	8107f4a <metal_generic_dev_sys_open+0xe>
 8107f7c:	e000      	b.n	8107f80 <metal_generic_dev_sys_open+0x44>
			break;
 8107f7e:	bf00      	nop
	}

	return 0;
 8107f80:	2300      	movs	r3, #0
}
 8107f82:	4618      	mov	r0, r3
 8107f84:	3710      	adds	r7, #16
 8107f86:	46bd      	mov	sp, r7
 8107f88:	bd80      	pop	{r7, pc}
	...

08107f8c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 8107f8c:	b580      	push	{r7, lr}
 8107f8e:	b082      	sub	sp, #8
 8107f90:	af00      	add	r7, sp, #0
 8107f92:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8107f94:	4803      	ldr	r0, [pc, #12]	; (8107fa4 <metal_sys_init+0x18>)
 8107f96:	f7ff fe23 	bl	8107be0 <metal_bus_register>
	return 0;
 8107f9a:	2300      	movs	r3, #0
}
 8107f9c:	4618      	mov	r0, r3
 8107f9e:	3708      	adds	r7, #8
 8107fa0:	46bd      	mov	sp, r7
 8107fa2:	bd80      	pop	{r7, pc}
 8107fa4:	10000010 	.word	0x10000010

08107fa8 <metal_sys_finish>:

void metal_sys_finish(void)
{
 8107fa8:	b580      	push	{r7, lr}
 8107faa:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 8107fac:	4802      	ldr	r0, [pc, #8]	; (8107fb8 <metal_sys_finish+0x10>)
 8107fae:	f7ff fe5b 	bl	8107c68 <metal_bus_unregister>
}
 8107fb2:	bf00      	nop
 8107fb4:	bd80      	pop	{r7, pc}
 8107fb6:	bf00      	nop
 8107fb8:	10000010 	.word	0x10000010

08107fbc <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8107fbc:	b580      	push	{r7, lr}
 8107fbe:	b086      	sub	sp, #24
 8107fc0:	af00      	add	r7, sp, #0
 8107fc2:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8107fc4:	687b      	ldr	r3, [r7, #4]
 8107fc6:	681b      	ldr	r3, [r3, #0]
 8107fc8:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8107fca:	687b      	ldr	r3, [r7, #4]
 8107fcc:	689b      	ldr	r3, [r3, #8]
 8107fce:	613b      	str	r3, [r7, #16]
	if (psize) {
 8107fd0:	693b      	ldr	r3, [r7, #16]
 8107fd2:	2b00      	cmp	r3, #0
 8107fd4:	d02c      	beq.n	8108030 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	68db      	ldr	r3, [r3, #12]
 8107fda:	693a      	ldr	r2, [r7, #16]
 8107fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8107fe0:	2b00      	cmp	r3, #0
 8107fe2:	d005      	beq.n	8107ff0 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8107fe4:	687b      	ldr	r3, [r7, #4]
 8107fe6:	68db      	ldr	r3, [r3, #12]
 8107fe8:	2201      	movs	r2, #1
 8107fea:	fa02 f303 	lsl.w	r3, r2, r3
 8107fee:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8107ff0:	2300      	movs	r3, #0
 8107ff2:	617b      	str	r3, [r7, #20]
 8107ff4:	e013      	b.n	810801e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	685a      	ldr	r2, [r3, #4]
 8107ffa:	697b      	ldr	r3, [r7, #20]
 8107ffc:	009b      	lsls	r3, r3, #2
 8107ffe:	4413      	add	r3, r2
 8108000:	6819      	ldr	r1, [r3, #0]
 8108002:	687b      	ldr	r3, [r7, #4]
 8108004:	695b      	ldr	r3, [r3, #20]
 8108006:	693a      	ldr	r2, [r7, #16]
 8108008:	68f8      	ldr	r0, [r7, #12]
 810800a:	f001 fc45 	bl	8109898 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 810800e:	693b      	ldr	r3, [r7, #16]
 8108010:	009b      	lsls	r3, r3, #2
 8108012:	68fa      	ldr	r2, [r7, #12]
 8108014:	4413      	add	r3, r2
 8108016:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8108018:	697b      	ldr	r3, [r7, #20]
 810801a:	3301      	adds	r3, #1
 810801c:	617b      	str	r3, [r7, #20]
 810801e:	687b      	ldr	r3, [r7, #4]
 8108020:	689a      	ldr	r2, [r3, #8]
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	68db      	ldr	r3, [r3, #12]
 8108026:	fa22 f303 	lsr.w	r3, r2, r3
 810802a:	697a      	ldr	r2, [r7, #20]
 810802c:	429a      	cmp	r2, r3
 810802e:	d9e2      	bls.n	8107ff6 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8108030:	bf00      	nop
 8108032:	3718      	adds	r7, #24
 8108034:	46bd      	mov	sp, r7
 8108036:	bd80      	pop	{r7, pc}

08108038 <metal_list_init>:
{
 8108038:	b480      	push	{r7}
 810803a:	b083      	sub	sp, #12
 810803c:	af00      	add	r7, sp, #0
 810803e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8108040:	687b      	ldr	r3, [r7, #4]
 8108042:	687a      	ldr	r2, [r7, #4]
 8108044:	605a      	str	r2, [r3, #4]
 8108046:	687b      	ldr	r3, [r7, #4]
 8108048:	685a      	ldr	r2, [r3, #4]
 810804a:	687b      	ldr	r3, [r7, #4]
 810804c:	601a      	str	r2, [r3, #0]
}
 810804e:	bf00      	nop
 8108050:	370c      	adds	r7, #12
 8108052:	46bd      	mov	sp, r7
 8108054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108058:	4770      	bx	lr
	...

0810805c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 810805c:	b580      	push	{r7, lr}
 810805e:	b084      	sub	sp, #16
 8108060:	af00      	add	r7, sp, #0
 8108062:	6078      	str	r0, [r7, #4]
	int error = 0;
 8108064:	2300      	movs	r3, #0
 8108066:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8108068:	2220      	movs	r2, #32
 810806a:	2100      	movs	r1, #0
 810806c:	4810      	ldr	r0, [pc, #64]	; (81080b0 <metal_init+0x54>)
 810806e:	f002 f975 	bl	810a35c <memset>

	_metal.common.log_handler   = params->log_handler;
 8108072:	687b      	ldr	r3, [r7, #4]
 8108074:	681b      	ldr	r3, [r3, #0]
 8108076:	4a0e      	ldr	r2, [pc, #56]	; (81080b0 <metal_init+0x54>)
 8108078:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 810807a:	687b      	ldr	r3, [r7, #4]
 810807c:	791a      	ldrb	r2, [r3, #4]
 810807e:	4b0c      	ldr	r3, [pc, #48]	; (81080b0 <metal_init+0x54>)
 8108080:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8108082:	480c      	ldr	r0, [pc, #48]	; (81080b4 <metal_init+0x58>)
 8108084:	f7ff ffd8 	bl	8108038 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8108088:	480b      	ldr	r0, [pc, #44]	; (81080b8 <metal_init+0x5c>)
 810808a:	f7ff ffd5 	bl	8108038 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 810808e:	480b      	ldr	r0, [pc, #44]	; (81080bc <metal_init+0x60>)
 8108090:	f7ff ffd2 	bl	8108038 <metal_list_init>

	error = metal_sys_init(params);
 8108094:	6878      	ldr	r0, [r7, #4]
 8108096:	f7ff ff79 	bl	8107f8c <metal_sys_init>
 810809a:	60f8      	str	r0, [r7, #12]
	if (error)
 810809c:	68fb      	ldr	r3, [r7, #12]
 810809e:	2b00      	cmp	r3, #0
 81080a0:	d001      	beq.n	81080a6 <metal_init+0x4a>
		return error;
 81080a2:	68fb      	ldr	r3, [r7, #12]
 81080a4:	e000      	b.n	81080a8 <metal_init+0x4c>

	return error;
 81080a6:	68fb      	ldr	r3, [r7, #12]
}
 81080a8:	4618      	mov	r0, r3
 81080aa:	3710      	adds	r7, #16
 81080ac:	46bd      	mov	sp, r7
 81080ae:	bd80      	pop	{r7, pc}
 81080b0:	100004e8 	.word	0x100004e8
 81080b4:	100004f0 	.word	0x100004f0
 81080b8:	100004f8 	.word	0x100004f8
 81080bc:	10000500 	.word	0x10000500

081080c0 <metal_finish>:

void metal_finish(void)
{
 81080c0:	b580      	push	{r7, lr}
 81080c2:	af00      	add	r7, sp, #0
	metal_sys_finish();
 81080c4:	f7ff ff70 	bl	8107fa8 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 81080c8:	2220      	movs	r2, #32
 81080ca:	2100      	movs	r1, #0
 81080cc:	4802      	ldr	r0, [pc, #8]	; (81080d8 <metal_finish+0x18>)
 81080ce:	f002 f945 	bl	810a35c <memset>
}
 81080d2:	bf00      	nop
 81080d4:	bd80      	pop	{r7, pc}
 81080d6:	bf00      	nop
 81080d8:	100004e8 	.word	0x100004e8

081080dc <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 81080dc:	b480      	push	{r7}
 81080de:	b083      	sub	sp, #12
 81080e0:	af00      	add	r7, sp, #0
 81080e2:	6078      	str	r0, [r7, #4]
 81080e4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81080e6:	687b      	ldr	r3, [r7, #4]
 81080e8:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 81080ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81080ee:	d009      	beq.n	8108104 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81080f0:	687b      	ldr	r3, [r7, #4]
 81080f2:	689b      	ldr	r3, [r3, #8]
 81080f4:	683a      	ldr	r2, [r7, #0]
 81080f6:	429a      	cmp	r2, r3
 81080f8:	d804      	bhi.n	8108104 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81080fa:	687b      	ldr	r3, [r7, #4]
 81080fc:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81080fe:	683b      	ldr	r3, [r7, #0]
 8108100:	4413      	add	r3, r2
 8108102:	e000      	b.n	8108106 <metal_io_virt+0x2a>
 8108104:	2300      	movs	r3, #0
}
 8108106:	4618      	mov	r0, r3
 8108108:	370c      	adds	r7, #12
 810810a:	46bd      	mov	sp, r7
 810810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108110:	4770      	bx	lr

08108112 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8108112:	b5b0      	push	{r4, r5, r7, lr}
 8108114:	b08a      	sub	sp, #40	; 0x28
 8108116:	af00      	add	r7, sp, #0
 8108118:	60f8      	str	r0, [r7, #12]
 810811a:	60b9      	str	r1, [r7, #8]
 810811c:	607a      	str	r2, [r7, #4]
 810811e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8108120:	f107 0310 	add.w	r3, r7, #16
 8108124:	2200      	movs	r2, #0
 8108126:	601a      	str	r2, [r3, #0]
 8108128:	605a      	str	r2, [r3, #4]
 810812a:	609a      	str	r2, [r3, #8]
 810812c:	60da      	str	r2, [r3, #12]
 810812e:	611a      	str	r2, [r3, #16]
 8108130:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8108132:	68fb      	ldr	r3, [r7, #12]
 8108134:	68ba      	ldr	r2, [r7, #8]
 8108136:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8108138:	68fb      	ldr	r3, [r7, #12]
 810813a:	687a      	ldr	r2, [r7, #4]
 810813c:	605a      	str	r2, [r3, #4]
	io->size = size;
 810813e:	68fb      	ldr	r3, [r7, #12]
 8108140:	683a      	ldr	r2, [r7, #0]
 8108142:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8108144:	68fb      	ldr	r3, [r7, #12]
 8108146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8108148:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 810814a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810814c:	2b1f      	cmp	r3, #31
 810814e:	d904      	bls.n	810815a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8108150:	68fb      	ldr	r3, [r7, #12]
 8108152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8108156:	611a      	str	r2, [r3, #16]
 8108158:	e006      	b.n	8108168 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 810815a:	2201      	movs	r2, #1
 810815c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810815e:	fa02 f303 	lsl.w	r3, r2, r3
 8108162:	1e5a      	subs	r2, r3, #1
 8108164:	68fb      	ldr	r3, [r7, #12]
 8108166:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8108168:	68fb      	ldr	r3, [r7, #12]
 810816a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 810816c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 810816e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8108170:	2b00      	cmp	r3, #0
 8108172:	d00b      	beq.n	810818c <metal_io_init+0x7a>
 8108174:	68fb      	ldr	r3, [r7, #12]
 8108176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108178:	f103 0418 	add.w	r4, r3, #24
 810817c:	4615      	mov	r5, r2
 810817e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108182:	e895 0003 	ldmia.w	r5, {r0, r1}
 8108186:	e884 0003 	stmia.w	r4, {r0, r1}
 810818a:	e00a      	b.n	81081a2 <metal_io_init+0x90>
 810818c:	68fb      	ldr	r3, [r7, #12]
 810818e:	f103 0418 	add.w	r4, r3, #24
 8108192:	f107 0510 	add.w	r5, r7, #16
 8108196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810819a:	e895 0003 	ldmia.w	r5, {r0, r1}
 810819e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 81081a2:	68f8      	ldr	r0, [r7, #12]
 81081a4:	f7ff ff0a 	bl	8107fbc <metal_sys_io_mem_map>
}
 81081a8:	bf00      	nop
 81081aa:	3728      	adds	r7, #40	; 0x28
 81081ac:	46bd      	mov	sp, r7
 81081ae:	bdb0      	pop	{r4, r5, r7, pc}

081081b0 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 81081b0:	b590      	push	{r4, r7, lr}
 81081b2:	b08b      	sub	sp, #44	; 0x2c
 81081b4:	af02      	add	r7, sp, #8
 81081b6:	60f8      	str	r0, [r7, #12]
 81081b8:	60b9      	str	r1, [r7, #8]
 81081ba:	607a      	str	r2, [r7, #4]
 81081bc:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 81081be:	68b9      	ldr	r1, [r7, #8]
 81081c0:	68f8      	ldr	r0, [r7, #12]
 81081c2:	f7ff ff8b 	bl	81080dc <metal_io_virt>
 81081c6:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 81081cc:	68fb      	ldr	r3, [r7, #12]
 81081ce:	689b      	ldr	r3, [r3, #8]
 81081d0:	68ba      	ldr	r2, [r7, #8]
 81081d2:	429a      	cmp	r2, r3
 81081d4:	d902      	bls.n	81081dc <metal_io_block_read+0x2c>
		return -ERANGE;
 81081d6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 81081da:	e05c      	b.n	8108296 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 81081dc:	683a      	ldr	r2, [r7, #0]
 81081de:	68bb      	ldr	r3, [r7, #8]
 81081e0:	441a      	add	r2, r3
 81081e2:	68fb      	ldr	r3, [r7, #12]
 81081e4:	689b      	ldr	r3, [r3, #8]
 81081e6:	429a      	cmp	r2, r3
 81081e8:	d904      	bls.n	81081f4 <metal_io_block_read+0x44>
		len = io->size - offset;
 81081ea:	68fb      	ldr	r3, [r7, #12]
 81081ec:	689a      	ldr	r2, [r3, #8]
 81081ee:	68bb      	ldr	r3, [r7, #8]
 81081f0:	1ad3      	subs	r3, r2, r3
 81081f2:	603b      	str	r3, [r7, #0]
	retlen = len;
 81081f4:	683b      	ldr	r3, [r7, #0]
 81081f6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 81081f8:	68fb      	ldr	r3, [r7, #12]
 81081fa:	6a1b      	ldr	r3, [r3, #32]
 81081fc:	2b00      	cmp	r3, #0
 81081fe:	d00a      	beq.n	8108216 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8108200:	68fb      	ldr	r3, [r7, #12]
 8108202:	6a1c      	ldr	r4, [r3, #32]
 8108204:	683b      	ldr	r3, [r7, #0]
 8108206:	9300      	str	r3, [sp, #0]
 8108208:	2305      	movs	r3, #5
 810820a:	687a      	ldr	r2, [r7, #4]
 810820c:	68b9      	ldr	r1, [r7, #8]
 810820e:	68f8      	ldr	r0, [r7, #12]
 8108210:	47a0      	blx	r4
 8108212:	6178      	str	r0, [r7, #20]
 8108214:	e03e      	b.n	8108294 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8108216:	f3bf 8f5b 	dmb	ish
		while ( len && (
 810821a:	e00c      	b.n	8108236 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810821c:	69fb      	ldr	r3, [r7, #28]
 810821e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8108220:	69bb      	ldr	r3, [r7, #24]
 8108222:	701a      	strb	r2, [r3, #0]
			dest++;
 8108224:	69bb      	ldr	r3, [r7, #24]
 8108226:	3301      	adds	r3, #1
 8108228:	61bb      	str	r3, [r7, #24]
			ptr++;
 810822a:	69fb      	ldr	r3, [r7, #28]
 810822c:	3301      	adds	r3, #1
 810822e:	61fb      	str	r3, [r7, #28]
			len--;
 8108230:	683b      	ldr	r3, [r7, #0]
 8108232:	3b01      	subs	r3, #1
 8108234:	603b      	str	r3, [r7, #0]
		while ( len && (
 8108236:	683b      	ldr	r3, [r7, #0]
 8108238:	2b00      	cmp	r3, #0
 810823a:	d017      	beq.n	810826c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 810823c:	69bb      	ldr	r3, [r7, #24]
 810823e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8108242:	2b00      	cmp	r3, #0
 8108244:	d1ea      	bne.n	810821c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8108246:	69fb      	ldr	r3, [r7, #28]
 8108248:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 810824c:	2b00      	cmp	r3, #0
 810824e:	d1e5      	bne.n	810821c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8108250:	e00c      	b.n	810826c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8108252:	69fb      	ldr	r3, [r7, #28]
 8108254:	681a      	ldr	r2, [r3, #0]
 8108256:	69bb      	ldr	r3, [r7, #24]
 8108258:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810825a:	69bb      	ldr	r3, [r7, #24]
 810825c:	3304      	adds	r3, #4
 810825e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8108260:	69fb      	ldr	r3, [r7, #28]
 8108262:	3304      	adds	r3, #4
 8108264:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8108266:	683b      	ldr	r3, [r7, #0]
 8108268:	3b04      	subs	r3, #4
 810826a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810826c:	683b      	ldr	r3, [r7, #0]
 810826e:	2b03      	cmp	r3, #3
 8108270:	dcef      	bgt.n	8108252 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8108272:	e00c      	b.n	810828e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8108274:	69fb      	ldr	r3, [r7, #28]
 8108276:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8108278:	69bb      	ldr	r3, [r7, #24]
 810827a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 810827c:	69bb      	ldr	r3, [r7, #24]
 810827e:	3301      	adds	r3, #1
 8108280:	61bb      	str	r3, [r7, #24]
 8108282:	69fb      	ldr	r3, [r7, #28]
 8108284:	3301      	adds	r3, #1
 8108286:	61fb      	str	r3, [r7, #28]
 8108288:	683b      	ldr	r3, [r7, #0]
 810828a:	3b01      	subs	r3, #1
 810828c:	603b      	str	r3, [r7, #0]
 810828e:	683b      	ldr	r3, [r7, #0]
 8108290:	2b00      	cmp	r3, #0
 8108292:	d1ef      	bne.n	8108274 <metal_io_block_read+0xc4>
	}
	return retlen;
 8108294:	697b      	ldr	r3, [r7, #20]
}
 8108296:	4618      	mov	r0, r3
 8108298:	3724      	adds	r7, #36	; 0x24
 810829a:	46bd      	mov	sp, r7
 810829c:	bd90      	pop	{r4, r7, pc}

0810829e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 810829e:	b590      	push	{r4, r7, lr}
 81082a0:	b08b      	sub	sp, #44	; 0x2c
 81082a2:	af02      	add	r7, sp, #8
 81082a4:	60f8      	str	r0, [r7, #12]
 81082a6:	60b9      	str	r1, [r7, #8]
 81082a8:	607a      	str	r2, [r7, #4]
 81082aa:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 81082ac:	68b9      	ldr	r1, [r7, #8]
 81082ae:	68f8      	ldr	r0, [r7, #12]
 81082b0:	f7ff ff14 	bl	81080dc <metal_io_virt>
 81082b4:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 81082b6:	687b      	ldr	r3, [r7, #4]
 81082b8:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 81082ba:	68fb      	ldr	r3, [r7, #12]
 81082bc:	689b      	ldr	r3, [r3, #8]
 81082be:	68ba      	ldr	r2, [r7, #8]
 81082c0:	429a      	cmp	r2, r3
 81082c2:	d902      	bls.n	81082ca <metal_io_block_write+0x2c>
		return -ERANGE;
 81082c4:	f06f 0321 	mvn.w	r3, #33	; 0x21
 81082c8:	e05b      	b.n	8108382 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 81082ca:	683a      	ldr	r2, [r7, #0]
 81082cc:	68bb      	ldr	r3, [r7, #8]
 81082ce:	441a      	add	r2, r3
 81082d0:	68fb      	ldr	r3, [r7, #12]
 81082d2:	689b      	ldr	r3, [r3, #8]
 81082d4:	429a      	cmp	r2, r3
 81082d6:	d904      	bls.n	81082e2 <metal_io_block_write+0x44>
		len = io->size - offset;
 81082d8:	68fb      	ldr	r3, [r7, #12]
 81082da:	689a      	ldr	r2, [r3, #8]
 81082dc:	68bb      	ldr	r3, [r7, #8]
 81082de:	1ad3      	subs	r3, r2, r3
 81082e0:	603b      	str	r3, [r7, #0]
	retlen = len;
 81082e2:	683b      	ldr	r3, [r7, #0]
 81082e4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 81082e6:	68fb      	ldr	r3, [r7, #12]
 81082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81082ea:	2b00      	cmp	r3, #0
 81082ec:	d017      	beq.n	810831e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 81082ee:	68fb      	ldr	r3, [r7, #12]
 81082f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 81082f2:	683b      	ldr	r3, [r7, #0]
 81082f4:	9300      	str	r3, [sp, #0]
 81082f6:	2305      	movs	r3, #5
 81082f8:	687a      	ldr	r2, [r7, #4]
 81082fa:	68b9      	ldr	r1, [r7, #8]
 81082fc:	68f8      	ldr	r0, [r7, #12]
 81082fe:	47a0      	blx	r4
 8108300:	6178      	str	r0, [r7, #20]
 8108302:	e03d      	b.n	8108380 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8108304:	69bb      	ldr	r3, [r7, #24]
 8108306:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8108308:	69fb      	ldr	r3, [r7, #28]
 810830a:	701a      	strb	r2, [r3, #0]
			ptr++;
 810830c:	69fb      	ldr	r3, [r7, #28]
 810830e:	3301      	adds	r3, #1
 8108310:	61fb      	str	r3, [r7, #28]
			source++;
 8108312:	69bb      	ldr	r3, [r7, #24]
 8108314:	3301      	adds	r3, #1
 8108316:	61bb      	str	r3, [r7, #24]
			len--;
 8108318:	683b      	ldr	r3, [r7, #0]
 810831a:	3b01      	subs	r3, #1
 810831c:	603b      	str	r3, [r7, #0]
		while ( len && (
 810831e:	683b      	ldr	r3, [r7, #0]
 8108320:	2b00      	cmp	r3, #0
 8108322:	d017      	beq.n	8108354 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8108324:	69fb      	ldr	r3, [r7, #28]
 8108326:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810832a:	2b00      	cmp	r3, #0
 810832c:	d1ea      	bne.n	8108304 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 810832e:	69bb      	ldr	r3, [r7, #24]
 8108330:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8108334:	2b00      	cmp	r3, #0
 8108336:	d1e5      	bne.n	8108304 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8108338:	e00c      	b.n	8108354 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810833a:	69bb      	ldr	r3, [r7, #24]
 810833c:	681a      	ldr	r2, [r3, #0]
 810833e:	69fb      	ldr	r3, [r7, #28]
 8108340:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8108342:	69fb      	ldr	r3, [r7, #28]
 8108344:	3304      	adds	r3, #4
 8108346:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8108348:	69bb      	ldr	r3, [r7, #24]
 810834a:	3304      	adds	r3, #4
 810834c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 810834e:	683b      	ldr	r3, [r7, #0]
 8108350:	3b04      	subs	r3, #4
 8108352:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8108354:	683b      	ldr	r3, [r7, #0]
 8108356:	2b03      	cmp	r3, #3
 8108358:	dcef      	bgt.n	810833a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 810835a:	e00c      	b.n	8108376 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810835c:	69bb      	ldr	r3, [r7, #24]
 810835e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8108360:	69fb      	ldr	r3, [r7, #28]
 8108362:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8108364:	69fb      	ldr	r3, [r7, #28]
 8108366:	3301      	adds	r3, #1
 8108368:	61fb      	str	r3, [r7, #28]
 810836a:	69bb      	ldr	r3, [r7, #24]
 810836c:	3301      	adds	r3, #1
 810836e:	61bb      	str	r3, [r7, #24]
 8108370:	683b      	ldr	r3, [r7, #0]
 8108372:	3b01      	subs	r3, #1
 8108374:	603b      	str	r3, [r7, #0]
 8108376:	683b      	ldr	r3, [r7, #0]
 8108378:	2b00      	cmp	r3, #0
 810837a:	d1ef      	bne.n	810835c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 810837c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8108380:	697b      	ldr	r3, [r7, #20]
}
 8108382:	4618      	mov	r0, r3
 8108384:	3724      	adds	r7, #36	; 0x24
 8108386:	46bd      	mov	sp, r7
 8108388:	bd90      	pop	{r4, r7, pc}

0810838a <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 810838a:	b40e      	push	{r1, r2, r3}
 810838c:	b480      	push	{r7}
 810838e:	b082      	sub	sp, #8
 8108390:	af00      	add	r7, sp, #0
 8108392:	4603      	mov	r3, r0
 8108394:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8108396:	bf00      	nop
 8108398:	3708      	adds	r7, #8
 810839a:	46bd      	mov	sp, r7
 810839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083a0:	b003      	add	sp, #12
 81083a2:	4770      	bx	lr

081083a4 <metal_io_virt>:
{
 81083a4:	b480      	push	{r7}
 81083a6:	b083      	sub	sp, #12
 81083a8:	af00      	add	r7, sp, #0
 81083aa:	6078      	str	r0, [r7, #4]
 81083ac:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81083ae:	687b      	ldr	r3, [r7, #4]
 81083b0:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81083b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81083b6:	d009      	beq.n	81083cc <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81083b8:	687b      	ldr	r3, [r7, #4]
 81083ba:	689b      	ldr	r3, [r3, #8]
 81083bc:	683a      	ldr	r2, [r7, #0]
 81083be:	429a      	cmp	r2, r3
 81083c0:	d804      	bhi.n	81083cc <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81083c2:	687b      	ldr	r3, [r7, #4]
 81083c4:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81083c6:	683b      	ldr	r3, [r7, #0]
 81083c8:	4413      	add	r3, r2
 81083ca:	e000      	b.n	81083ce <metal_io_virt+0x2a>
 81083cc:	2300      	movs	r3, #0
}
 81083ce:	4618      	mov	r0, r3
 81083d0:	370c      	adds	r7, #12
 81083d2:	46bd      	mov	sp, r7
 81083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083d8:	4770      	bx	lr

081083da <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 81083da:	b480      	push	{r7}
 81083dc:	b085      	sub	sp, #20
 81083de:	af00      	add	r7, sp, #0
 81083e0:	6078      	str	r0, [r7, #4]
 81083e2:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81083e4:	687b      	ldr	r3, [r7, #4]
 81083e6:	681b      	ldr	r3, [r3, #0]
 81083e8:	683a      	ldr	r2, [r7, #0]
 81083ea:	1ad3      	subs	r3, r2, r3
 81083ec:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81083ee:	687b      	ldr	r3, [r7, #4]
 81083f0:	689b      	ldr	r3, [r3, #8]
 81083f2:	68fa      	ldr	r2, [r7, #12]
 81083f4:	429a      	cmp	r2, r3
 81083f6:	d201      	bcs.n	81083fc <metal_io_virt_to_offset+0x22>
 81083f8:	68fb      	ldr	r3, [r7, #12]
 81083fa:	e001      	b.n	8108400 <metal_io_virt_to_offset+0x26>
 81083fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8108400:	4618      	mov	r0, r3
 8108402:	3714      	adds	r7, #20
 8108404:	46bd      	mov	sp, r7
 8108406:	f85d 7b04 	ldr.w	r7, [sp], #4
 810840a:	4770      	bx	lr

0810840c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 810840c:	b5b0      	push	{r4, r5, r7, lr}
 810840e:	b08c      	sub	sp, #48	; 0x30
 8108410:	af00      	add	r7, sp, #0
 8108412:	60f8      	str	r0, [r7, #12]
 8108414:	60b9      	str	r1, [r7, #8]
 8108416:	603b      	str	r3, [r7, #0]
 8108418:	4613      	mov	r3, r2
 810841a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 810841c:	68b9      	ldr	r1, [r7, #8]
 810841e:	68f8      	ldr	r0, [r7, #12]
 8108420:	f7ff ffc0 	bl	81083a4 <metal_io_virt>
 8108424:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8108426:	68fb      	ldr	r3, [r7, #12]
 8108428:	699b      	ldr	r3, [r3, #24]
 810842a:	2b00      	cmp	r3, #0
 810842c:	d009      	beq.n	8108442 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 810842e:	68fb      	ldr	r3, [r7, #12]
 8108430:	699c      	ldr	r4, [r3, #24]
 8108432:	79fa      	ldrb	r2, [r7, #7]
 8108434:	683b      	ldr	r3, [r7, #0]
 8108436:	68b9      	ldr	r1, [r7, #8]
 8108438:	68f8      	ldr	r0, [r7, #12]
 810843a:	47a0      	blx	r4
 810843c:	4604      	mov	r4, r0
 810843e:	460d      	mov	r5, r1
 8108440:	e059      	b.n	81084f6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8108442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108444:	2b00      	cmp	r3, #0
 8108446:	d012      	beq.n	810846e <metal_io_read+0x62>
 8108448:	683b      	ldr	r3, [r7, #0]
 810844a:	2b01      	cmp	r3, #1
 810844c:	d10f      	bne.n	810846e <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 810844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108450:	62bb      	str	r3, [r7, #40]	; 0x28
 8108452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108454:	f3bf 8f5b 	dmb	ish
 8108458:	781b      	ldrb	r3, [r3, #0]
 810845a:	f3bf 8f5b 	dmb	ish
 810845e:	b2db      	uxtb	r3, r3
 8108460:	76fb      	strb	r3, [r7, #27]
 8108462:	7efb      	ldrb	r3, [r7, #27]
 8108464:	b2db      	uxtb	r3, r3
 8108466:	2200      	movs	r2, #0
 8108468:	461c      	mov	r4, r3
 810846a:	4615      	mov	r5, r2
 810846c:	e043      	b.n	81084f6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 810846e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108470:	2b00      	cmp	r3, #0
 8108472:	d012      	beq.n	810849a <metal_io_read+0x8e>
 8108474:	683b      	ldr	r3, [r7, #0]
 8108476:	2b02      	cmp	r3, #2
 8108478:	d10f      	bne.n	810849a <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 810847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810847c:	627b      	str	r3, [r7, #36]	; 0x24
 810847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108480:	f3bf 8f5b 	dmb	ish
 8108484:	881b      	ldrh	r3, [r3, #0]
 8108486:	f3bf 8f5b 	dmb	ish
 810848a:	b29b      	uxth	r3, r3
 810848c:	833b      	strh	r3, [r7, #24]
 810848e:	8b3b      	ldrh	r3, [r7, #24]
 8108490:	b29b      	uxth	r3, r3
 8108492:	2200      	movs	r2, #0
 8108494:	461c      	mov	r4, r3
 8108496:	4615      	mov	r5, r2
 8108498:	e02d      	b.n	81084f6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 810849a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810849c:	2b00      	cmp	r3, #0
 810849e:	d010      	beq.n	81084c2 <metal_io_read+0xb6>
 81084a0:	683b      	ldr	r3, [r7, #0]
 81084a2:	2b04      	cmp	r3, #4
 81084a4:	d10d      	bne.n	81084c2 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 81084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81084a8:	623b      	str	r3, [r7, #32]
 81084aa:	6a3b      	ldr	r3, [r7, #32]
 81084ac:	f3bf 8f5b 	dmb	ish
 81084b0:	681b      	ldr	r3, [r3, #0]
 81084b2:	f3bf 8f5b 	dmb	ish
 81084b6:	617b      	str	r3, [r7, #20]
 81084b8:	697b      	ldr	r3, [r7, #20]
 81084ba:	2200      	movs	r2, #0
 81084bc:	461c      	mov	r4, r3
 81084be:	4615      	mov	r5, r2
 81084c0:	e019      	b.n	81084f6 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 81084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81084c4:	2b00      	cmp	r3, #0
 81084c6:	d010      	beq.n	81084ea <metal_io_read+0xde>
 81084c8:	683b      	ldr	r3, [r7, #0]
 81084ca:	2b04      	cmp	r3, #4
 81084cc:	d10d      	bne.n	81084ea <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 81084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81084d0:	61fb      	str	r3, [r7, #28]
 81084d2:	69fb      	ldr	r3, [r7, #28]
 81084d4:	f3bf 8f5b 	dmb	ish
 81084d8:	681b      	ldr	r3, [r3, #0]
 81084da:	f3bf 8f5b 	dmb	ish
 81084de:	613b      	str	r3, [r7, #16]
 81084e0:	693b      	ldr	r3, [r7, #16]
 81084e2:	2200      	movs	r2, #0
 81084e4:	461c      	mov	r4, r3
 81084e6:	4615      	mov	r5, r2
 81084e8:	e005      	b.n	81084f6 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 81084ea:	4b06      	ldr	r3, [pc, #24]	; (8108504 <metal_io_read+0xf8>)
 81084ec:	4a06      	ldr	r2, [pc, #24]	; (8108508 <metal_io_read+0xfc>)
 81084ee:	21f0      	movs	r1, #240	; 0xf0
 81084f0:	4806      	ldr	r0, [pc, #24]	; (810850c <metal_io_read+0x100>)
 81084f2:	f001 febb 	bl	810a26c <__assert_func>
	return 0; /* quiet compiler */
}
 81084f6:	4622      	mov	r2, r4
 81084f8:	462b      	mov	r3, r5
 81084fa:	4610      	mov	r0, r2
 81084fc:	4619      	mov	r1, r3
 81084fe:	3730      	adds	r7, #48	; 0x30
 8108500:	46bd      	mov	sp, r7
 8108502:	bdb0      	pop	{r4, r5, r7, pc}
 8108504:	0810b438 	.word	0x0810b438
 8108508:	0810b5bc 	.word	0x0810b5bc
 810850c:	0810b43c 	.word	0x0810b43c

08108510 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8108510:	b580      	push	{r7, lr}
 8108512:	b082      	sub	sp, #8
 8108514:	af00      	add	r7, sp, #0
 8108516:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8108518:	6878      	ldr	r0, [r7, #4]
 810851a:	f001 ff01 	bl	810a320 <malloc>
 810851e:	4603      	mov	r3, r0
}
 8108520:	4618      	mov	r0, r3
 8108522:	3708      	adds	r7, #8
 8108524:	46bd      	mov	sp, r7
 8108526:	bd80      	pop	{r7, pc}

08108528 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8108528:	b580      	push	{r7, lr}
 810852a:	b082      	sub	sp, #8
 810852c:	af00      	add	r7, sp, #0
 810852e:	6078      	str	r0, [r7, #4]
	free(ptr);
 8108530:	6878      	ldr	r0, [r7, #4]
 8108532:	f001 fefd 	bl	810a330 <free>
}
 8108536:	bf00      	nop
 8108538:	3708      	adds	r7, #8
 810853a:	46bd      	mov	sp, r7
 810853c:	bd80      	pop	{r7, pc}

0810853e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 810853e:	b580      	push	{r7, lr}
 8108540:	b084      	sub	sp, #16
 8108542:	af00      	add	r7, sp, #0
 8108544:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8108546:	687b      	ldr	r3, [r7, #4]
 8108548:	3307      	adds	r3, #7
 810854a:	00db      	lsls	r3, r3, #3
 810854c:	60fb      	str	r3, [r7, #12]
		// num_desc_extra * sizeof(struct vq_desc_extra);
		num_desc_extra * sizeof(vqs-> vq_descx[0]);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 810854e:	68f8      	ldr	r0, [r7, #12]
 8108550:	f7ff ffde 	bl	8108510 <metal_allocate_memory>
 8108554:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8108556:	68bb      	ldr	r3, [r7, #8]
 8108558:	2b00      	cmp	r3, #0
 810855a:	d004      	beq.n	8108566 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 810855c:	68fa      	ldr	r2, [r7, #12]
 810855e:	2100      	movs	r1, #0
 8108560:	68b8      	ldr	r0, [r7, #8]
 8108562:	f001 fefb 	bl	810a35c <memset>
	}

	return vqs;
 8108566:	68bb      	ldr	r3, [r7, #8]
}
 8108568:	4618      	mov	r0, r3
 810856a:	3710      	adds	r7, #16
 810856c:	46bd      	mov	sp, r7
 810856e:	bd80      	pop	{r7, pc}

08108570 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8108570:	b580      	push	{r7, lr}
 8108572:	b086      	sub	sp, #24
 8108574:	af00      	add	r7, sp, #0
 8108576:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8108578:	687b      	ldr	r3, [r7, #4]
 810857a:	891b      	ldrh	r3, [r3, #8]
 810857c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 810857e:	687b      	ldr	r3, [r7, #4]
 8108580:	681b      	ldr	r3, [r3, #0]
 8108582:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8108584:	693b      	ldr	r3, [r7, #16]
 8108586:	3b18      	subs	r3, #24
 8108588:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 810858a:	693b      	ldr	r3, [r7, #16]
 810858c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810858e:	697a      	ldr	r2, [r7, #20]
 8108590:	429a      	cmp	r2, r3
 8108592:	d905      	bls.n	81085a0 <rproc_virtio_virtqueue_notify+0x30>
 8108594:	4b0d      	ldr	r3, [pc, #52]	; (81085cc <rproc_virtio_virtqueue_notify+0x5c>)
 8108596:	4a0e      	ldr	r2, [pc, #56]	; (81085d0 <rproc_virtio_virtqueue_notify+0x60>)
 8108598:	2133      	movs	r1, #51	; 0x33
 810859a:	480e      	ldr	r0, [pc, #56]	; (81085d4 <rproc_virtio_virtqueue_notify+0x64>)
 810859c:	f001 fe66 	bl	810a26c <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 81085a0:	693b      	ldr	r3, [r7, #16]
 81085a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81085a4:	697a      	ldr	r2, [r7, #20]
 81085a6:	4613      	mov	r3, r2
 81085a8:	005b      	lsls	r3, r3, #1
 81085aa:	4413      	add	r3, r2
 81085ac:	00db      	lsls	r3, r3, #3
 81085ae:	440b      	add	r3, r1
 81085b0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 81085b2:	68fb      	ldr	r3, [r7, #12]
 81085b4:	691b      	ldr	r3, [r3, #16]
 81085b6:	68fa      	ldr	r2, [r7, #12]
 81085b8:	6810      	ldr	r0, [r2, #0]
 81085ba:	68ba      	ldr	r2, [r7, #8]
 81085bc:	6912      	ldr	r2, [r2, #16]
 81085be:	4611      	mov	r1, r2
 81085c0:	4798      	blx	r3
}
 81085c2:	bf00      	nop
 81085c4:	3718      	adds	r7, #24
 81085c6:	46bd      	mov	sp, r7
 81085c8:	bd80      	pop	{r7, pc}
 81085ca:	bf00      	nop
 81085cc:	0810b484 	.word	0x0810b484
 81085d0:	0810b59c 	.word	0x0810b59c
 81085d4:	0810b4a0 	.word	0x0810b4a0

081085d8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 81085d8:	b580      	push	{r7, lr}
 81085da:	b086      	sub	sp, #24
 81085dc:	af00      	add	r7, sp, #0
 81085de:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 81085e0:	687b      	ldr	r3, [r7, #4]
 81085e2:	3b18      	subs	r3, #24
 81085e4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 81085e6:	697b      	ldr	r3, [r7, #20]
 81085e8:	689b      	ldr	r3, [r3, #8]
 81085ea:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 81085ec:	697b      	ldr	r3, [r7, #20]
 81085ee:	68db      	ldr	r3, [r3, #12]
 81085f0:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 81085f2:	693b      	ldr	r3, [r7, #16]
 81085f4:	3318      	adds	r3, #24
 81085f6:	4619      	mov	r1, r3
 81085f8:	68f8      	ldr	r0, [r7, #12]
 81085fa:	f7ff feee 	bl	81083da <metal_io_virt_to_offset>
 81085fe:	4601      	mov	r1, r0
 8108600:	2301      	movs	r3, #1
 8108602:	2205      	movs	r2, #5
 8108604:	68f8      	ldr	r0, [r7, #12]
 8108606:	f7ff ff01 	bl	810840c <metal_io_read>
 810860a:	4602      	mov	r2, r0
 810860c:	460b      	mov	r3, r1
 810860e:	4613      	mov	r3, r2
 8108610:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8108612:	7afb      	ldrb	r3, [r7, #11]
}
 8108614:	4618      	mov	r0, r3
 8108616:	3718      	adds	r7, #24
 8108618:	46bd      	mov	sp, r7
 810861a:	bd80      	pop	{r7, pc}

0810861c <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 810861c:	b580      	push	{r7, lr}
 810861e:	b086      	sub	sp, #24
 8108620:	af00      	add	r7, sp, #0
 8108622:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8108624:	687b      	ldr	r3, [r7, #4]
 8108626:	3b18      	subs	r3, #24
 8108628:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 810862a:	697b      	ldr	r3, [r7, #20]
 810862c:	689b      	ldr	r3, [r3, #8]
 810862e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8108630:	697b      	ldr	r3, [r7, #20]
 8108632:	68db      	ldr	r3, [r3, #12]
 8108634:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8108636:	693b      	ldr	r3, [r7, #16]
 8108638:	330c      	adds	r3, #12
 810863a:	4619      	mov	r1, r3
 810863c:	68f8      	ldr	r0, [r7, #12]
 810863e:	f7ff fecc 	bl	81083da <metal_io_virt_to_offset>
 8108642:	4601      	mov	r1, r0
 8108644:	2304      	movs	r3, #4
 8108646:	2205      	movs	r2, #5
 8108648:	68f8      	ldr	r0, [r7, #12]
 810864a:	f7ff fedf 	bl	810840c <metal_io_read>
 810864e:	4602      	mov	r2, r0
 8108650:	460b      	mov	r3, r1
 8108652:	4613      	mov	r3, r2
 8108654:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8108656:	68bb      	ldr	r3, [r7, #8]
}
 8108658:	4618      	mov	r0, r3
 810865a:	3718      	adds	r7, #24
 810865c:	46bd      	mov	sp, r7
 810865e:	bd80      	pop	{r7, pc}

08108660 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8108660:	b480      	push	{r7}
 8108662:	b083      	sub	sp, #12
 8108664:	af00      	add	r7, sp, #0
 8108666:	6078      	str	r0, [r7, #4]
 8108668:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 810866a:	2300      	movs	r3, #0
}
 810866c:	4618      	mov	r0, r3
 810866e:	370c      	adds	r7, #12
 8108670:	46bd      	mov	sp, r7
 8108672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108676:	4770      	bx	lr

08108678 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8108678:	b480      	push	{r7}
 810867a:	b085      	sub	sp, #20
 810867c:	af00      	add	r7, sp, #0
 810867e:	60f8      	str	r0, [r7, #12]
 8108680:	60b9      	str	r1, [r7, #8]
 8108682:	607a      	str	r2, [r7, #4]
 8108684:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8108686:	bf00      	nop
 8108688:	3714      	adds	r7, #20
 810868a:	46bd      	mov	sp, r7
 810868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108690:	4770      	bx	lr
	...

08108694 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8108694:	b580      	push	{r7, lr}
 8108696:	b08e      	sub	sp, #56	; 0x38
 8108698:	af00      	add	r7, sp, #0
 810869a:	60f8      	str	r0, [r7, #12]
 810869c:	60b9      	str	r1, [r7, #8]
 810869e:	607a      	str	r2, [r7, #4]
 81086a0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 81086a2:	687b      	ldr	r3, [r7, #4]
 81086a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 81086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81086a8:	7e5b      	ldrb	r3, [r3, #25]
 81086aa:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 81086ac:	2050      	movs	r0, #80	; 0x50
 81086ae:	f7ff ff2f 	bl	8108510 <metal_allocate_memory>
 81086b2:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 81086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81086b6:	2b00      	cmp	r3, #0
 81086b8:	d101      	bne.n	81086be <rproc_virtio_create_vdev+0x2a>
		return NULL;
 81086ba:	2300      	movs	r3, #0
 81086bc:	e092      	b.n	81087e4 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 81086be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81086c0:	4613      	mov	r3, r2
 81086c2:	005b      	lsls	r3, r3, #1
 81086c4:	4413      	add	r3, r2
 81086c6:	00db      	lsls	r3, r3, #3
 81086c8:	4618      	mov	r0, r3
 81086ca:	f7ff ff21 	bl	8108510 <metal_allocate_memory>
 81086ce:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 81086d0:	6a3b      	ldr	r3, [r7, #32]
 81086d2:	2b00      	cmp	r3, #0
 81086d4:	f000 8081 	beq.w	81087da <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 81086d8:	2250      	movs	r2, #80	; 0x50
 81086da:	2100      	movs	r1, #0
 81086dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81086de:	f001 fe3d 	bl	810a35c <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 81086e2:	2218      	movs	r2, #24
 81086e4:	2100      	movs	r1, #0
 81086e6:	6a38      	ldr	r0, [r7, #32]
 81086e8:	f001 fe38 	bl	810a35c <memset>
	vdev = &rpvdev->vdev;
 81086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81086ee:	3318      	adds	r3, #24
 81086f0:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 81086f2:	2300      	movs	r3, #0
 81086f4:	637b      	str	r3, [r7, #52]	; 0x34
 81086f6:	e025      	b.n	8108744 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 81086f8:	2300      	movs	r3, #0
 81086fa:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 81086fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81086fe:	4613      	mov	r3, r2
 8108700:	009b      	lsls	r3, r3, #2
 8108702:	4413      	add	r3, r2
 8108704:	009b      	lsls	r3, r3, #2
 8108706:	3318      	adds	r3, #24
 8108708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810870a:	4413      	add	r3, r2
 810870c:	3304      	adds	r3, #4
 810870e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8108710:	68fb      	ldr	r3, [r7, #12]
 8108712:	2b00      	cmp	r3, #0
 8108714:	d102      	bne.n	810871c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8108716:	69bb      	ldr	r3, [r7, #24]
 8108718:	689b      	ldr	r3, [r3, #8]
 810871a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 810871c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 810871e:	f7ff ff0e 	bl	810853e <virtqueue_allocate>
 8108722:	6178      	str	r0, [r7, #20]
		if (!vq)
 8108724:	697b      	ldr	r3, [r7, #20]
 8108726:	2b00      	cmp	r3, #0
 8108728:	d031      	beq.n	810878e <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 810872a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810872c:	4613      	mov	r3, r2
 810872e:	005b      	lsls	r3, r3, #1
 8108730:	4413      	add	r3, r2
 8108732:	00db      	lsls	r3, r3, #3
 8108734:	461a      	mov	r2, r3
 8108736:	6a3b      	ldr	r3, [r7, #32]
 8108738:	4413      	add	r3, r2
 810873a:	697a      	ldr	r2, [r7, #20]
 810873c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 810873e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108740:	3301      	adds	r3, #1
 8108742:	637b      	str	r3, [r7, #52]	; 0x34
 8108744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108748:	429a      	cmp	r2, r3
 810874a:	d3d5      	bcc.n	81086f8 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 810874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810874e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108750:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8108752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8108756:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8108758:	69fb      	ldr	r3, [r7, #28]
 810875a:	6a3a      	ldr	r2, [r7, #32]
 810875c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 810875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108760:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8108762:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8108764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108766:	683a      	ldr	r2, [r7, #0]
 8108768:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 810876a:	69fb      	ldr	r3, [r7, #28]
 810876c:	68ba      	ldr	r2, [r7, #8]
 810876e:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8108770:	69fb      	ldr	r3, [r7, #28]
 8108772:	68fa      	ldr	r2, [r7, #12]
 8108774:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8108776:	69fb      	ldr	r3, [r7, #28]
 8108778:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810877a:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 810877c:	69fb      	ldr	r3, [r7, #28]
 810877e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108780:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8108782:	69fb      	ldr	r3, [r7, #28]
 8108784:	4a19      	ldr	r2, [pc, #100]	; (81087ec <rproc_virtio_create_vdev+0x158>)
 8108786:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8108788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810878a:	3318      	adds	r3, #24
 810878c:	e02a      	b.n	81087e4 <rproc_virtio_create_vdev+0x150>
			goto err1;
 810878e:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8108790:	2300      	movs	r3, #0
 8108792:	637b      	str	r3, [r7, #52]	; 0x34
 8108794:	e019      	b.n	81087ca <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8108796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8108798:	4613      	mov	r3, r2
 810879a:	005b      	lsls	r3, r3, #1
 810879c:	4413      	add	r3, r2
 810879e:	00db      	lsls	r3, r3, #3
 81087a0:	461a      	mov	r2, r3
 81087a2:	6a3b      	ldr	r3, [r7, #32]
 81087a4:	4413      	add	r3, r2
 81087a6:	681b      	ldr	r3, [r3, #0]
 81087a8:	2b00      	cmp	r3, #0
 81087aa:	d00b      	beq.n	81087c4 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 81087ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81087ae:	4613      	mov	r3, r2
 81087b0:	005b      	lsls	r3, r3, #1
 81087b2:	4413      	add	r3, r2
 81087b4:	00db      	lsls	r3, r3, #3
 81087b6:	461a      	mov	r2, r3
 81087b8:	6a3b      	ldr	r3, [r7, #32]
 81087ba:	4413      	add	r3, r2
 81087bc:	681b      	ldr	r3, [r3, #0]
 81087be:	4618      	mov	r0, r3
 81087c0:	f7ff feb2 	bl	8108528 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 81087c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81087c6:	3301      	adds	r3, #1
 81087c8:	637b      	str	r3, [r7, #52]	; 0x34
 81087ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81087ce:	429a      	cmp	r2, r3
 81087d0:	d3e1      	bcc.n	8108796 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 81087d2:	6a38      	ldr	r0, [r7, #32]
 81087d4:	f7ff fea8 	bl	8108528 <metal_free_memory>
 81087d8:	e000      	b.n	81087dc <rproc_virtio_create_vdev+0x148>
		goto err0;
 81087da:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 81087dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81087de:	f7ff fea3 	bl	8108528 <metal_free_memory>
	return NULL;
 81087e2:	2300      	movs	r3, #0
}
 81087e4:	4618      	mov	r0, r3
 81087e6:	3738      	adds	r7, #56	; 0x38
 81087e8:	46bd      	mov	sp, r7
 81087ea:	bd80      	pop	{r7, pc}
 81087ec:	0810b578 	.word	0x0810b578

081087f0 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 81087f0:	b480      	push	{r7}
 81087f2:	b087      	sub	sp, #28
 81087f4:	af00      	add	r7, sp, #0
 81087f6:	60f8      	str	r0, [r7, #12]
 81087f8:	60b9      	str	r1, [r7, #8]
 81087fa:	607a      	str	r2, [r7, #4]
 81087fc:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 81087fe:	68fb      	ldr	r3, [r7, #12]
 8108800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108802:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8108804:	68ba      	ldr	r2, [r7, #8]
 8108806:	697b      	ldr	r3, [r7, #20]
 8108808:	429a      	cmp	r2, r3
 810880a:	d302      	bcc.n	8108812 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 810880c:	f06f 0301 	mvn.w	r3, #1
 8108810:	e019      	b.n	8108846 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8108812:	68fb      	ldr	r3, [r7, #12]
 8108814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8108816:	68ba      	ldr	r2, [r7, #8]
 8108818:	4613      	mov	r3, r2
 810881a:	005b      	lsls	r3, r3, #1
 810881c:	4413      	add	r3, r2
 810881e:	00db      	lsls	r3, r3, #3
 8108820:	440b      	add	r3, r1
 8108822:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8108824:	693b      	ldr	r3, [r7, #16]
 8108826:	6a3a      	ldr	r2, [r7, #32]
 8108828:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 810882a:	693b      	ldr	r3, [r7, #16]
 810882c:	687a      	ldr	r2, [r7, #4]
 810882e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8108830:	693b      	ldr	r3, [r7, #16]
 8108832:	683a      	ldr	r2, [r7, #0]
 8108834:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8108836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108838:	b29a      	uxth	r2, r3
 810883a:	693b      	ldr	r3, [r7, #16]
 810883c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 810883e:	693b      	ldr	r3, [r7, #16]
 8108840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8108842:	609a      	str	r2, [r3, #8]

	return 0;
 8108844:	2300      	movs	r3, #0
}
 8108846:	4618      	mov	r0, r3
 8108848:	371c      	adds	r7, #28
 810884a:	46bd      	mov	sp, r7
 810884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108850:	4770      	bx	lr

08108852 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8108852:	b580      	push	{r7, lr}
 8108854:	b086      	sub	sp, #24
 8108856:	af00      	add	r7, sp, #0
 8108858:	6078      	str	r0, [r7, #4]
 810885a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 810885c:	687b      	ldr	r3, [r7, #4]
 810885e:	2b00      	cmp	r3, #0
 8108860:	d102      	bne.n	8108868 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8108862:	f06f 0315 	mvn.w	r3, #21
 8108866:	e02c      	b.n	81088c2 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	683a      	ldr	r2, [r7, #0]
 810886e:	429a      	cmp	r2, r3
 8108870:	d101      	bne.n	8108876 <rproc_virtio_notified+0x24>
		return 0;
 8108872:	2300      	movs	r3, #0
 8108874:	e025      	b.n	81088c2 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8108876:	687b      	ldr	r3, [r7, #4]
 8108878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810887a:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 810887c:	2300      	movs	r3, #0
 810887e:	617b      	str	r3, [r7, #20]
 8108880:	e01a      	b.n	81088b8 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8108882:	687b      	ldr	r3, [r7, #4]
 8108884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8108886:	697a      	ldr	r2, [r7, #20]
 8108888:	4613      	mov	r3, r2
 810888a:	005b      	lsls	r3, r3, #1
 810888c:	4413      	add	r3, r2
 810888e:	00db      	lsls	r3, r3, #3
 8108890:	440b      	add	r3, r1
 8108892:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8108894:	68fb      	ldr	r3, [r7, #12]
 8108896:	691b      	ldr	r3, [r3, #16]
 8108898:	683a      	ldr	r2, [r7, #0]
 810889a:	429a      	cmp	r2, r3
 810889c:	d003      	beq.n	81088a6 <rproc_virtio_notified+0x54>
 810889e:	683b      	ldr	r3, [r7, #0]
 81088a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81088a4:	d105      	bne.n	81088b2 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 81088a6:	68fb      	ldr	r3, [r7, #12]
 81088a8:	681b      	ldr	r3, [r3, #0]
 81088aa:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 81088ac:	68b8      	ldr	r0, [r7, #8]
 81088ae:	f001 fa8b 	bl	8109dc8 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 81088b2:	697b      	ldr	r3, [r7, #20]
 81088b4:	3301      	adds	r3, #1
 81088b6:	617b      	str	r3, [r7, #20]
 81088b8:	697a      	ldr	r2, [r7, #20]
 81088ba:	693b      	ldr	r3, [r7, #16]
 81088bc:	429a      	cmp	r2, r3
 81088be:	d3e0      	bcc.n	8108882 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 81088c0:	2300      	movs	r3, #0
}
 81088c2:	4618      	mov	r0, r3
 81088c4:	3718      	adds	r7, #24
 81088c6:	46bd      	mov	sp, r7
 81088c8:	bd80      	pop	{r7, pc}

081088ca <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 81088ca:	b580      	push	{r7, lr}
 81088cc:	b084      	sub	sp, #16
 81088ce:	af00      	add	r7, sp, #0
 81088d0:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 81088d2:	687b      	ldr	r3, [r7, #4]
 81088d4:	699b      	ldr	r3, [r3, #24]
 81088d6:	2b00      	cmp	r3, #0
 81088d8:	d00a      	beq.n	81088f0 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 81088da:	6878      	ldr	r0, [r7, #4]
 81088dc:	f7ff fe7c 	bl	81085d8 <rproc_virtio_get_status>
 81088e0:	4603      	mov	r3, r0
 81088e2:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 81088e4:	7bfb      	ldrb	r3, [r7, #15]
 81088e6:	f003 0304 	and.w	r3, r3, #4
 81088ea:	2b00      	cmp	r3, #0
 81088ec:	d102      	bne.n	81088f4 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 81088ee:	e7f4      	b.n	81088da <rproc_virtio_wait_remote_ready+0x10>
		return;
 81088f0:	bf00      	nop
 81088f2:	e000      	b.n	81088f6 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 81088f4:	bf00      	nop
	}
}
 81088f6:	3710      	adds	r7, #16
 81088f8:	46bd      	mov	sp, r7
 81088fa:	bd80      	pop	{r7, pc}

081088fc <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 81088fc:	b480      	push	{r7}
 81088fe:	b083      	sub	sp, #12
 8108900:	af00      	add	r7, sp, #0
 8108902:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8108904:	bf00      	nop
 8108906:	687b      	ldr	r3, [r7, #4]
 8108908:	2201      	movs	r2, #1
 810890a:	4611      	mov	r1, r2
 810890c:	f3bf 8f5b 	dmb	ish
 8108910:	e8d3 2f4f 	ldrexb	r2, [r3]
 8108914:	e8c3 1f40 	strexb	r0, r1, [r3]
 8108918:	2800      	cmp	r0, #0
 810891a:	d1f9      	bne.n	8108910 <__metal_mutex_acquire+0x14>
 810891c:	f3bf 8f5b 	dmb	ish
 8108920:	b2d3      	uxtb	r3, r2
 8108922:	2b00      	cmp	r3, #0
 8108924:	d1ef      	bne.n	8108906 <__metal_mutex_acquire+0xa>
		;
	}
}
 8108926:	bf00      	nop
 8108928:	bf00      	nop
 810892a:	370c      	adds	r7, #12
 810892c:	46bd      	mov	sp, r7
 810892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108932:	4770      	bx	lr

08108934 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8108934:	b480      	push	{r7}
 8108936:	b083      	sub	sp, #12
 8108938:	af00      	add	r7, sp, #0
 810893a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 810893c:	687b      	ldr	r3, [r7, #4]
 810893e:	f3bf 8f5b 	dmb	ish
 8108942:	2200      	movs	r2, #0
 8108944:	701a      	strb	r2, [r3, #0]
 8108946:	f3bf 8f5b 	dmb	ish
}
 810894a:	bf00      	nop
 810894c:	370c      	adds	r7, #12
 810894e:	46bd      	mov	sp, r7
 8108950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108954:	4770      	bx	lr

08108956 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8108956:	b580      	push	{r7, lr}
 8108958:	b082      	sub	sp, #8
 810895a:	af00      	add	r7, sp, #0
 810895c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 810895e:	6878      	ldr	r0, [r7, #4]
 8108960:	f7ff ffcc 	bl	81088fc <__metal_mutex_acquire>
}
 8108964:	bf00      	nop
 8108966:	3708      	adds	r7, #8
 8108968:	46bd      	mov	sp, r7
 810896a:	bd80      	pop	{r7, pc}

0810896c <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 810896c:	b580      	push	{r7, lr}
 810896e:	b082      	sub	sp, #8
 8108970:	af00      	add	r7, sp, #0
 8108972:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8108974:	6878      	ldr	r0, [r7, #4]
 8108976:	f7ff ffdd 	bl	8108934 <__metal_mutex_release>
}
 810897a:	bf00      	nop
 810897c:	3708      	adds	r7, #8
 810897e:	46bd      	mov	sp, r7
 8108980:	bd80      	pop	{r7, pc}

08108982 <metal_list_add_before>:
{
 8108982:	b480      	push	{r7}
 8108984:	b083      	sub	sp, #12
 8108986:	af00      	add	r7, sp, #0
 8108988:	6078      	str	r0, [r7, #4]
 810898a:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 810898c:	687b      	ldr	r3, [r7, #4]
 810898e:	685a      	ldr	r2, [r3, #4]
 8108990:	683b      	ldr	r3, [r7, #0]
 8108992:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8108994:	683b      	ldr	r3, [r7, #0]
 8108996:	687a      	ldr	r2, [r7, #4]
 8108998:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 810899a:	683b      	ldr	r3, [r7, #0]
 810899c:	681b      	ldr	r3, [r3, #0]
 810899e:	683a      	ldr	r2, [r7, #0]
 81089a0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 81089a2:	683b      	ldr	r3, [r7, #0]
 81089a4:	685b      	ldr	r3, [r3, #4]
 81089a6:	683a      	ldr	r2, [r7, #0]
 81089a8:	601a      	str	r2, [r3, #0]
}
 81089aa:	bf00      	nop
 81089ac:	370c      	adds	r7, #12
 81089ae:	46bd      	mov	sp, r7
 81089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089b4:	4770      	bx	lr

081089b6 <metal_list_add_tail>:
{
 81089b6:	b580      	push	{r7, lr}
 81089b8:	b082      	sub	sp, #8
 81089ba:	af00      	add	r7, sp, #0
 81089bc:	6078      	str	r0, [r7, #4]
 81089be:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 81089c0:	6839      	ldr	r1, [r7, #0]
 81089c2:	6878      	ldr	r0, [r7, #4]
 81089c4:	f7ff ffdd 	bl	8108982 <metal_list_add_before>
}
 81089c8:	bf00      	nop
 81089ca:	3708      	adds	r7, #8
 81089cc:	46bd      	mov	sp, r7
 81089ce:	bd80      	pop	{r7, pc}

081089d0 <metal_list_del>:
{
 81089d0:	b480      	push	{r7}
 81089d2:	b083      	sub	sp, #12
 81089d4:	af00      	add	r7, sp, #0
 81089d6:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 81089d8:	687b      	ldr	r3, [r7, #4]
 81089da:	681b      	ldr	r3, [r3, #0]
 81089dc:	687a      	ldr	r2, [r7, #4]
 81089de:	6852      	ldr	r2, [r2, #4]
 81089e0:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	685b      	ldr	r3, [r3, #4]
 81089e6:	687a      	ldr	r2, [r7, #4]
 81089e8:	6812      	ldr	r2, [r2, #0]
 81089ea:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 81089ec:	687b      	ldr	r3, [r7, #4]
 81089ee:	687a      	ldr	r2, [r7, #4]
 81089f0:	605a      	str	r2, [r3, #4]
 81089f2:	687b      	ldr	r3, [r7, #4]
 81089f4:	685a      	ldr	r2, [r3, #4]
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	601a      	str	r2, [r3, #0]
}
 81089fa:	bf00      	nop
 81089fc:	370c      	adds	r7, #12
 81089fe:	46bd      	mov	sp, r7
 8108a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a04:	4770      	bx	lr

08108a06 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8108a06:	b480      	push	{r7}
 8108a08:	b083      	sub	sp, #12
 8108a0a:	af00      	add	r7, sp, #0
 8108a0c:	6078      	str	r0, [r7, #4]
 8108a0e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8108a10:	683b      	ldr	r3, [r7, #0]
 8108a12:	095b      	lsrs	r3, r3, #5
 8108a14:	009a      	lsls	r2, r3, #2
 8108a16:	6879      	ldr	r1, [r7, #4]
 8108a18:	440a      	add	r2, r1
 8108a1a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8108a1c:	683a      	ldr	r2, [r7, #0]
 8108a1e:	f002 021f 	and.w	r2, r2, #31
 8108a22:	2001      	movs	r0, #1
 8108a24:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8108a28:	009b      	lsls	r3, r3, #2
 8108a2a:	6878      	ldr	r0, [r7, #4]
 8108a2c:	4403      	add	r3, r0
 8108a2e:	430a      	orrs	r2, r1
 8108a30:	601a      	str	r2, [r3, #0]
}
 8108a32:	bf00      	nop
 8108a34:	370c      	adds	r7, #12
 8108a36:	46bd      	mov	sp, r7
 8108a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a3c:	4770      	bx	lr

08108a3e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8108a3e:	b480      	push	{r7}
 8108a40:	b083      	sub	sp, #12
 8108a42:	af00      	add	r7, sp, #0
 8108a44:	6078      	str	r0, [r7, #4]
 8108a46:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8108a48:	683b      	ldr	r3, [r7, #0]
 8108a4a:	095b      	lsrs	r3, r3, #5
 8108a4c:	009b      	lsls	r3, r3, #2
 8108a4e:	687a      	ldr	r2, [r7, #4]
 8108a50:	4413      	add	r3, r2
 8108a52:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8108a54:	683b      	ldr	r3, [r7, #0]
 8108a56:	f003 031f 	and.w	r3, r3, #31
 8108a5a:	2101      	movs	r1, #1
 8108a5c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8108a60:	4013      	ands	r3, r2
}
 8108a62:	4618      	mov	r0, r3
 8108a64:	370c      	adds	r7, #12
 8108a66:	46bd      	mov	sp, r7
 8108a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a6c:	4770      	bx	lr

08108a6e <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8108a6e:	b480      	push	{r7}
 8108a70:	b083      	sub	sp, #12
 8108a72:	af00      	add	r7, sp, #0
 8108a74:	6078      	str	r0, [r7, #4]
 8108a76:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8108a78:	683b      	ldr	r3, [r7, #0]
 8108a7a:	095b      	lsrs	r3, r3, #5
 8108a7c:	009a      	lsls	r2, r3, #2
 8108a7e:	6879      	ldr	r1, [r7, #4]
 8108a80:	440a      	add	r2, r1
 8108a82:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8108a84:	683a      	ldr	r2, [r7, #0]
 8108a86:	f002 021f 	and.w	r2, r2, #31
 8108a8a:	2001      	movs	r0, #1
 8108a8c:	fa00 f202 	lsl.w	r2, r0, r2
 8108a90:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8108a92:	009b      	lsls	r3, r3, #2
 8108a94:	6878      	ldr	r0, [r7, #4]
 8108a96:	4403      	add	r3, r0
 8108a98:	400a      	ands	r2, r1
 8108a9a:	601a      	str	r2, [r3, #0]
}
 8108a9c:	bf00      	nop
 8108a9e:	370c      	adds	r7, #12
 8108aa0:	46bd      	mov	sp, r7
 8108aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108aa6:	4770      	bx	lr

08108aa8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 8108aa8:	b580      	push	{r7, lr}
 8108aaa:	b082      	sub	sp, #8
 8108aac:	af00      	add	r7, sp, #0
 8108aae:	6078      	str	r0, [r7, #4]
 8108ab0:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8108ab2:	6839      	ldr	r1, [r7, #0]
 8108ab4:	6878      	ldr	r0, [r7, #4]
 8108ab6:	f7ff ffc2 	bl	8108a3e <metal_bitmap_is_bit_set>
 8108aba:	4603      	mov	r3, r0
 8108abc:	2b00      	cmp	r3, #0
 8108abe:	bf0c      	ite	eq
 8108ac0:	2301      	moveq	r3, #1
 8108ac2:	2300      	movne	r3, #0
 8108ac4:	b2db      	uxtb	r3, r3
}
 8108ac6:	4618      	mov	r0, r3
 8108ac8:	3708      	adds	r7, #8
 8108aca:	46bd      	mov	sp, r7
 8108acc:	bd80      	pop	{r7, pc}

08108ace <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8108ace:	b580      	push	{r7, lr}
 8108ad0:	b086      	sub	sp, #24
 8108ad2:	af00      	add	r7, sp, #0
 8108ad4:	60f8      	str	r0, [r7, #12]
 8108ad6:	60b9      	str	r1, [r7, #8]
 8108ad8:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 8108ada:	68bb      	ldr	r3, [r7, #8]
 8108adc:	617b      	str	r3, [r7, #20]
 8108ade:	e002      	b.n	8108ae6 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8108ae0:	697b      	ldr	r3, [r7, #20]
 8108ae2:	3301      	adds	r3, #1
 8108ae4:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8108ae6:	697a      	ldr	r2, [r7, #20]
 8108ae8:	687b      	ldr	r3, [r7, #4]
 8108aea:	429a      	cmp	r2, r3
 8108aec:	d207      	bcs.n	8108afe <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 8108aee:	697b      	ldr	r3, [r7, #20]
 8108af0:	4619      	mov	r1, r3
 8108af2:	68f8      	ldr	r0, [r7, #12]
 8108af4:	f7ff ffd8 	bl	8108aa8 <metal_bitmap_is_bit_clear>
 8108af8:	4603      	mov	r3, r0
 8108afa:	2b00      	cmp	r3, #0
 8108afc:	d0f0      	beq.n	8108ae0 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 8108afe:	697b      	ldr	r3, [r7, #20]
}
 8108b00:	4618      	mov	r0, r3
 8108b02:	3718      	adds	r7, #24
 8108b04:	46bd      	mov	sp, r7
 8108b06:	bd80      	pop	{r7, pc}

08108b08 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8108b08:	b580      	push	{r7, lr}
 8108b0a:	b084      	sub	sp, #16
 8108b0c:	af00      	add	r7, sp, #0
 8108b0e:	60f8      	str	r0, [r7, #12]
 8108b10:	60b9      	str	r1, [r7, #8]
 8108b12:	607a      	str	r2, [r7, #4]
 8108b14:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8108b16:	68fb      	ldr	r3, [r7, #12]
 8108b18:	2220      	movs	r2, #32
 8108b1a:	68b9      	ldr	r1, [r7, #8]
 8108b1c:	4618      	mov	r0, r3
 8108b1e:	f002 f817 	bl	810ab50 <strncpy>
	ept->addr = src;
 8108b22:	68fb      	ldr	r3, [r7, #12]
 8108b24:	687a      	ldr	r2, [r7, #4]
 8108b26:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8108b28:	68fb      	ldr	r3, [r7, #12]
 8108b2a:	683a      	ldr	r2, [r7, #0]
 8108b2c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8108b2e:	68fb      	ldr	r3, [r7, #12]
 8108b30:	69ba      	ldr	r2, [r7, #24]
 8108b32:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8108b34:	68fb      	ldr	r3, [r7, #12]
 8108b36:	69fa      	ldr	r2, [r7, #28]
 8108b38:	631a      	str	r2, [r3, #48]	; 0x30
}
 8108b3a:	bf00      	nop
 8108b3c:	3710      	adds	r7, #16
 8108b3e:	46bd      	mov	sp, r7
 8108b40:	bd80      	pop	{r7, pc}

08108b42 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8108b42:	b580      	push	{r7, lr}
 8108b44:	b084      	sub	sp, #16
 8108b46:	af00      	add	r7, sp, #0
 8108b48:	6078      	str	r0, [r7, #4]
 8108b4a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8108b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8108b50:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8108b52:	683b      	ldr	r3, [r7, #0]
 8108b54:	461a      	mov	r2, r3
 8108b56:	2100      	movs	r1, #0
 8108b58:	6878      	ldr	r0, [r7, #4]
 8108b5a:	f7ff ffb8 	bl	8108ace <metal_bitmap_next_clear_bit>
 8108b5e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8108b60:	683b      	ldr	r3, [r7, #0]
 8108b62:	68ba      	ldr	r2, [r7, #8]
 8108b64:	429a      	cmp	r2, r3
 8108b66:	d206      	bcs.n	8108b76 <rpmsg_get_address+0x34>
		addr = nextbit;
 8108b68:	68bb      	ldr	r3, [r7, #8]
 8108b6a:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8108b6c:	68bb      	ldr	r3, [r7, #8]
 8108b6e:	4619      	mov	r1, r3
 8108b70:	6878      	ldr	r0, [r7, #4]
 8108b72:	f7ff ff48 	bl	8108a06 <metal_bitmap_set_bit>
	}

	return addr;
 8108b76:	68fb      	ldr	r3, [r7, #12]
}
 8108b78:	4618      	mov	r0, r3
 8108b7a:	3710      	adds	r7, #16
 8108b7c:	46bd      	mov	sp, r7
 8108b7e:	bd80      	pop	{r7, pc}

08108b80 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8108b80:	b580      	push	{r7, lr}
 8108b82:	b084      	sub	sp, #16
 8108b84:	af00      	add	r7, sp, #0
 8108b86:	60f8      	str	r0, [r7, #12]
 8108b88:	60b9      	str	r1, [r7, #8]
 8108b8a:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8108b8c:	687a      	ldr	r2, [r7, #4]
 8108b8e:	68bb      	ldr	r3, [r7, #8]
 8108b90:	429a      	cmp	r2, r3
 8108b92:	da03      	bge.n	8108b9c <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8108b94:	6879      	ldr	r1, [r7, #4]
 8108b96:	68f8      	ldr	r0, [r7, #12]
 8108b98:	f7ff ff69 	bl	8108a6e <metal_bitmap_clear_bit>
}
 8108b9c:	bf00      	nop
 8108b9e:	3710      	adds	r7, #16
 8108ba0:	46bd      	mov	sp, r7
 8108ba2:	bd80      	pop	{r7, pc}

08108ba4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8108ba4:	b580      	push	{r7, lr}
 8108ba6:	b084      	sub	sp, #16
 8108ba8:	af00      	add	r7, sp, #0
 8108baa:	60f8      	str	r0, [r7, #12]
 8108bac:	60b9      	str	r1, [r7, #8]
 8108bae:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8108bb0:	687a      	ldr	r2, [r7, #4]
 8108bb2:	68bb      	ldr	r3, [r7, #8]
 8108bb4:	429a      	cmp	r2, r3
 8108bb6:	da05      	bge.n	8108bc4 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 8108bb8:	6879      	ldr	r1, [r7, #4]
 8108bba:	68f8      	ldr	r0, [r7, #12]
 8108bbc:	f7ff ff3f 	bl	8108a3e <metal_bitmap_is_bit_set>
 8108bc0:	4603      	mov	r3, r0
 8108bc2:	e000      	b.n	8108bc6 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8108bc4:	4b02      	ldr	r3, [pc, #8]	; (8108bd0 <rpmsg_is_address_set+0x2c>)
}
 8108bc6:	4618      	mov	r0, r3
 8108bc8:	3710      	adds	r7, #16
 8108bca:	46bd      	mov	sp, r7
 8108bcc:	bd80      	pop	{r7, pc}
 8108bce:	bf00      	nop
 8108bd0:	fffff82d 	.word	0xfffff82d

08108bd4 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8108bd4:	b580      	push	{r7, lr}
 8108bd6:	b084      	sub	sp, #16
 8108bd8:	af00      	add	r7, sp, #0
 8108bda:	60f8      	str	r0, [r7, #12]
 8108bdc:	60b9      	str	r1, [r7, #8]
 8108bde:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8108be0:	687a      	ldr	r2, [r7, #4]
 8108be2:	68bb      	ldr	r3, [r7, #8]
 8108be4:	429a      	cmp	r2, r3
 8108be6:	da05      	bge.n	8108bf4 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8108be8:	6879      	ldr	r1, [r7, #4]
 8108bea:	68f8      	ldr	r0, [r7, #12]
 8108bec:	f7ff ff0b 	bl	8108a06 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8108bf0:	2300      	movs	r3, #0
 8108bf2:	e000      	b.n	8108bf6 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8108bf4:	4b02      	ldr	r3, [pc, #8]	; (8108c00 <rpmsg_set_address+0x2c>)
	}
}
 8108bf6:	4618      	mov	r0, r3
 8108bf8:	3710      	adds	r7, #16
 8108bfa:	46bd      	mov	sp, r7
 8108bfc:	bd80      	pop	{r7, pc}
 8108bfe:	bf00      	nop
 8108c00:	fffff82d 	.word	0xfffff82d

08108c04 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8108c04:	b590      	push	{r4, r7, lr}
 8108c06:	b089      	sub	sp, #36	; 0x24
 8108c08:	af02      	add	r7, sp, #8
 8108c0a:	60f8      	str	r0, [r7, #12]
 8108c0c:	60b9      	str	r1, [r7, #8]
 8108c0e:	607a      	str	r2, [r7, #4]
 8108c10:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8108c12:	68fb      	ldr	r3, [r7, #12]
 8108c14:	2b00      	cmp	r3, #0
 8108c16:	d00a      	beq.n	8108c2e <rpmsg_send_offchannel_raw+0x2a>
 8108c18:	68fb      	ldr	r3, [r7, #12]
 8108c1a:	6a1b      	ldr	r3, [r3, #32]
 8108c1c:	2b00      	cmp	r3, #0
 8108c1e:	d006      	beq.n	8108c2e <rpmsg_send_offchannel_raw+0x2a>
 8108c20:	683b      	ldr	r3, [r7, #0]
 8108c22:	2b00      	cmp	r3, #0
 8108c24:	d003      	beq.n	8108c2e <rpmsg_send_offchannel_raw+0x2a>
 8108c26:	687b      	ldr	r3, [r7, #4]
 8108c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108c2c:	d101      	bne.n	8108c32 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 8108c2e:	4b0d      	ldr	r3, [pc, #52]	; (8108c64 <rpmsg_send_offchannel_raw+0x60>)
 8108c30:	e014      	b.n	8108c5c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8108c32:	68fb      	ldr	r3, [r7, #12]
 8108c34:	6a1b      	ldr	r3, [r3, #32]
 8108c36:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8108c38:	697b      	ldr	r3, [r7, #20]
 8108c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8108c3c:	2b00      	cmp	r3, #0
 8108c3e:	d00c      	beq.n	8108c5a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8108c40:	697b      	ldr	r3, [r7, #20]
 8108c42:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8108c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8108c46:	9301      	str	r3, [sp, #4]
 8108c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108c4a:	9300      	str	r3, [sp, #0]
 8108c4c:	683b      	ldr	r3, [r7, #0]
 8108c4e:	687a      	ldr	r2, [r7, #4]
 8108c50:	68b9      	ldr	r1, [r7, #8]
 8108c52:	6978      	ldr	r0, [r7, #20]
 8108c54:	47a0      	blx	r4
 8108c56:	4603      	mov	r3, r0
 8108c58:	e000      	b.n	8108c5c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 8108c5a:	4b02      	ldr	r3, [pc, #8]	; (8108c64 <rpmsg_send_offchannel_raw+0x60>)
}
 8108c5c:	4618      	mov	r0, r3
 8108c5e:	371c      	adds	r7, #28
 8108c60:	46bd      	mov	sp, r7
 8108c62:	bd90      	pop	{r4, r7, pc}
 8108c64:	fffff82d 	.word	0xfffff82d

08108c68 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 8108c68:	b580      	push	{r7, lr}
 8108c6a:	b090      	sub	sp, #64	; 0x40
 8108c6c:	af02      	add	r7, sp, #8
 8108c6e:	6078      	str	r0, [r7, #4]
 8108c70:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8108c72:	683b      	ldr	r3, [r7, #0]
 8108c74:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8108c7c:	6879      	ldr	r1, [r7, #4]
 8108c7e:	f107 030c 	add.w	r3, r7, #12
 8108c82:	2220      	movs	r2, #32
 8108c84:	4618      	mov	r0, r3
 8108c86:	f001 ff63 	bl	810ab50 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 8108c8a:	687b      	ldr	r3, [r7, #4]
 8108c8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8108c8e:	f107 030c 	add.w	r3, r7, #12
 8108c92:	2201      	movs	r2, #1
 8108c94:	9201      	str	r2, [sp, #4]
 8108c96:	2228      	movs	r2, #40	; 0x28
 8108c98:	9200      	str	r2, [sp, #0]
 8108c9a:	2235      	movs	r2, #53	; 0x35
 8108c9c:	6878      	ldr	r0, [r7, #4]
 8108c9e:	f7ff ffb1 	bl	8108c04 <rpmsg_send_offchannel_raw>
 8108ca2:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8108ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108ca6:	2b00      	cmp	r3, #0
 8108ca8:	da01      	bge.n	8108cae <rpmsg_send_ns_message+0x46>
		return ret;
 8108caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8108cac:	e000      	b.n	8108cb0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8108cae:	2300      	movs	r3, #0
}
 8108cb0:	4618      	mov	r0, r3
 8108cb2:	3738      	adds	r7, #56	; 0x38
 8108cb4:	46bd      	mov	sp, r7
 8108cb6:	bd80      	pop	{r7, pc}

08108cb8 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 8108cb8:	b580      	push	{r7, lr}
 8108cba:	b088      	sub	sp, #32
 8108cbc:	af00      	add	r7, sp, #0
 8108cbe:	60f8      	str	r0, [r7, #12]
 8108cc0:	60b9      	str	r1, [r7, #8]
 8108cc2:	607a      	str	r2, [r7, #4]
 8108cc4:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8108cc6:	68fb      	ldr	r3, [r7, #12]
 8108cc8:	681b      	ldr	r3, [r3, #0]
 8108cca:	61fb      	str	r3, [r7, #28]
 8108ccc:	e04b      	b.n	8108d66 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8108cce:	2300      	movs	r3, #0
 8108cd0:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8108cd2:	69fb      	ldr	r3, [r7, #28]
 8108cd4:	3b34      	subs	r3, #52	; 0x34
 8108cd6:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8108cd8:	687b      	ldr	r3, [r7, #4]
 8108cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108cde:	d006      	beq.n	8108cee <rpmsg_get_endpoint+0x36>
 8108ce0:	697b      	ldr	r3, [r7, #20]
 8108ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ce4:	687a      	ldr	r2, [r7, #4]
 8108ce6:	429a      	cmp	r2, r3
 8108ce8:	d101      	bne.n	8108cee <rpmsg_get_endpoint+0x36>
			return ept;
 8108cea:	697b      	ldr	r3, [r7, #20]
 8108cec:	e040      	b.n	8108d70 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 8108cee:	697b      	ldr	r3, [r7, #20]
 8108cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108cf2:	687a      	ldr	r2, [r7, #4]
 8108cf4:	429a      	cmp	r2, r3
 8108cf6:	d106      	bne.n	8108d06 <rpmsg_get_endpoint+0x4e>
 8108cf8:	697b      	ldr	r3, [r7, #20]
 8108cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108cfc:	683a      	ldr	r2, [r7, #0]
 8108cfe:	429a      	cmp	r2, r3
 8108d00:	d101      	bne.n	8108d06 <rpmsg_get_endpoint+0x4e>
			return ept;
 8108d02:	697b      	ldr	r3, [r7, #20]
 8108d04:	e034      	b.n	8108d70 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8108d06:	68bb      	ldr	r3, [r7, #8]
 8108d08:	2b00      	cmp	r3, #0
 8108d0a:	d00c      	beq.n	8108d26 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 8108d0c:	697b      	ldr	r3, [r7, #20]
 8108d0e:	2220      	movs	r2, #32
 8108d10:	68b9      	ldr	r1, [r7, #8]
 8108d12:	4618      	mov	r0, r3
 8108d14:	f001 ff08 	bl	810ab28 <strncmp>
 8108d18:	4603      	mov	r3, r0
 8108d1a:	2b00      	cmp	r3, #0
 8108d1c:	bf0c      	ite	eq
 8108d1e:	2301      	moveq	r3, #1
 8108d20:	2300      	movne	r3, #0
 8108d22:	b2db      	uxtb	r3, r3
 8108d24:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8108d26:	68bb      	ldr	r3, [r7, #8]
 8108d28:	2b00      	cmp	r3, #0
 8108d2a:	d018      	beq.n	8108d5e <rpmsg_get_endpoint+0xa6>
 8108d2c:	69bb      	ldr	r3, [r7, #24]
 8108d2e:	2b00      	cmp	r3, #0
 8108d30:	d015      	beq.n	8108d5e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8108d32:	683b      	ldr	r3, [r7, #0]
 8108d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108d38:	d006      	beq.n	8108d48 <rpmsg_get_endpoint+0x90>
 8108d3a:	697b      	ldr	r3, [r7, #20]
 8108d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d3e:	683a      	ldr	r2, [r7, #0]
 8108d40:	429a      	cmp	r2, r3
 8108d42:	d101      	bne.n	8108d48 <rpmsg_get_endpoint+0x90>
			return ept;
 8108d44:	697b      	ldr	r3, [r7, #20]
 8108d46:	e013      	b.n	8108d70 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8108d48:	687b      	ldr	r3, [r7, #4]
 8108d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108d4e:	d107      	bne.n	8108d60 <rpmsg_get_endpoint+0xa8>
 8108d50:	697b      	ldr	r3, [r7, #20]
 8108d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108d58:	d102      	bne.n	8108d60 <rpmsg_get_endpoint+0xa8>
			return ept;
 8108d5a:	697b      	ldr	r3, [r7, #20]
 8108d5c:	e008      	b.n	8108d70 <rpmsg_get_endpoint+0xb8>
			continue;
 8108d5e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8108d60:	69fb      	ldr	r3, [r7, #28]
 8108d62:	681b      	ldr	r3, [r3, #0]
 8108d64:	61fb      	str	r3, [r7, #28]
 8108d66:	68fb      	ldr	r3, [r7, #12]
 8108d68:	69fa      	ldr	r2, [r7, #28]
 8108d6a:	429a      	cmp	r2, r3
 8108d6c:	d1af      	bne.n	8108cce <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8108d6e:	2300      	movs	r3, #0
}
 8108d70:	4618      	mov	r0, r3
 8108d72:	3720      	adds	r7, #32
 8108d74:	46bd      	mov	sp, r7
 8108d76:	bd80      	pop	{r7, pc}

08108d78 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 8108d78:	b580      	push	{r7, lr}
 8108d7a:	b084      	sub	sp, #16
 8108d7c:	af00      	add	r7, sp, #0
 8108d7e:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8108d80:	687b      	ldr	r3, [r7, #4]
 8108d82:	2b00      	cmp	r3, #0
 8108d84:	d016      	beq.n	8108db4 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 8108d86:	687b      	ldr	r3, [r7, #4]
 8108d88:	6a1b      	ldr	r3, [r3, #32]
 8108d8a:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8108d8c:	687b      	ldr	r3, [r7, #4]
 8108d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108d94:	d008      	beq.n	8108da8 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8108d96:	68fb      	ldr	r3, [r7, #12]
 8108d98:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8108da0:	461a      	mov	r2, r3
 8108da2:	2180      	movs	r1, #128	; 0x80
 8108da4:	f7ff feec 	bl	8108b80 <rpmsg_release_address>
	metal_list_del(&ept->node);
 8108da8:	687b      	ldr	r3, [r7, #4]
 8108daa:	3334      	adds	r3, #52	; 0x34
 8108dac:	4618      	mov	r0, r3
 8108dae:	f7ff fe0f 	bl	81089d0 <metal_list_del>
 8108db2:	e000      	b.n	8108db6 <rpmsg_unregister_endpoint+0x3e>
		return;
 8108db4:	bf00      	nop
}
 8108db6:	3710      	adds	r7, #16
 8108db8:	46bd      	mov	sp, r7
 8108dba:	bd80      	pop	{r7, pc}

08108dbc <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8108dbc:	b580      	push	{r7, lr}
 8108dbe:	b082      	sub	sp, #8
 8108dc0:	af00      	add	r7, sp, #0
 8108dc2:	6078      	str	r0, [r7, #4]
 8108dc4:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8108dc6:	683b      	ldr	r3, [r7, #0]
 8108dc8:	687a      	ldr	r2, [r7, #4]
 8108dca:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8108dcc:	687a      	ldr	r2, [r7, #4]
 8108dce:	683b      	ldr	r3, [r7, #0]
 8108dd0:	3334      	adds	r3, #52	; 0x34
 8108dd2:	4619      	mov	r1, r3
 8108dd4:	4610      	mov	r0, r2
 8108dd6:	f7ff fdee 	bl	81089b6 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 8108dda:	2300      	movs	r3, #0
}
 8108ddc:	4618      	mov	r0, r3
 8108dde:	3708      	adds	r7, #8
 8108de0:	46bd      	mov	sp, r7
 8108de2:	bd80      	pop	{r7, pc}

08108de4 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8108de4:	b580      	push	{r7, lr}
 8108de6:	b088      	sub	sp, #32
 8108de8:	af02      	add	r7, sp, #8
 8108dea:	60f8      	str	r0, [r7, #12]
 8108dec:	60b9      	str	r1, [r7, #8]
 8108dee:	607a      	str	r2, [r7, #4]
 8108df0:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8108df2:	683b      	ldr	r3, [r7, #0]
 8108df4:	613b      	str	r3, [r7, #16]

	if (!ept)
 8108df6:	68fb      	ldr	r3, [r7, #12]
 8108df8:	2b00      	cmp	r3, #0
 8108dfa:	d101      	bne.n	8108e00 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 8108dfc:	4b37      	ldr	r3, [pc, #220]	; (8108edc <rpmsg_create_ept+0xf8>)
 8108dfe:	e068      	b.n	8108ed2 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8108e00:	68bb      	ldr	r3, [r7, #8]
 8108e02:	3358      	adds	r3, #88	; 0x58
 8108e04:	4618      	mov	r0, r3
 8108e06:	f7ff fda6 	bl	8108956 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 8108e0a:	683b      	ldr	r3, [r7, #0]
 8108e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108e10:	d018      	beq.n	8108e44 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8108e12:	68bb      	ldr	r3, [r7, #8]
 8108e14:	3348      	adds	r3, #72	; 0x48
 8108e16:	683a      	ldr	r2, [r7, #0]
 8108e18:	2180      	movs	r1, #128	; 0x80
 8108e1a:	4618      	mov	r0, r3
 8108e1c:	f7ff fec2 	bl	8108ba4 <rpmsg_is_address_set>
 8108e20:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8108e22:	697b      	ldr	r3, [r7, #20]
 8108e24:	2b00      	cmp	r3, #0
 8108e26:	d107      	bne.n	8108e38 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8108e28:	68bb      	ldr	r3, [r7, #8]
 8108e2a:	3348      	adds	r3, #72	; 0x48
 8108e2c:	683a      	ldr	r2, [r7, #0]
 8108e2e:	2180      	movs	r1, #128	; 0x80
 8108e30:	4618      	mov	r0, r3
 8108e32:	f7ff fecf 	bl	8108bd4 <rpmsg_set_address>
 8108e36:	e00c      	b.n	8108e52 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8108e38:	697b      	ldr	r3, [r7, #20]
 8108e3a:	2b00      	cmp	r3, #0
 8108e3c:	dd40      	ble.n	8108ec0 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8108e3e:	2300      	movs	r3, #0
 8108e40:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8108e42:	e040      	b.n	8108ec6 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8108e44:	68bb      	ldr	r3, [r7, #8]
 8108e46:	3348      	adds	r3, #72	; 0x48
 8108e48:	2180      	movs	r1, #128	; 0x80
 8108e4a:	4618      	mov	r0, r3
 8108e4c:	f7ff fe79 	bl	8108b42 <rpmsg_get_address>
 8108e50:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8108e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8108e54:	9301      	str	r3, [sp, #4]
 8108e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8108e58:	9300      	str	r3, [sp, #0]
 8108e5a:	6a3b      	ldr	r3, [r7, #32]
 8108e5c:	693a      	ldr	r2, [r7, #16]
 8108e5e:	6879      	ldr	r1, [r7, #4]
 8108e60:	68f8      	ldr	r0, [r7, #12]
 8108e62:	f7ff fe51 	bl	8108b08 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 8108e66:	68f9      	ldr	r1, [r7, #12]
 8108e68:	68b8      	ldr	r0, [r7, #8]
 8108e6a:	f7ff ffa7 	bl	8108dbc <rpmsg_register_endpoint>
 8108e6e:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8108e70:	697b      	ldr	r3, [r7, #20]
 8108e72:	2b00      	cmp	r3, #0
 8108e74:	da06      	bge.n	8108e84 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 8108e76:	68bb      	ldr	r3, [r7, #8]
 8108e78:	3348      	adds	r3, #72	; 0x48
 8108e7a:	693a      	ldr	r2, [r7, #16]
 8108e7c:	2180      	movs	r1, #128	; 0x80
 8108e7e:	4618      	mov	r0, r3
 8108e80:	f7ff fe7e 	bl	8108b80 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8108e84:	697b      	ldr	r3, [r7, #20]
 8108e86:	2b00      	cmp	r3, #0
 8108e88:	d11c      	bne.n	8108ec4 <rpmsg_create_ept+0xe0>
 8108e8a:	68fb      	ldr	r3, [r7, #12]
 8108e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8108e92:	d117      	bne.n	8108ec4 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8108e94:	68bb      	ldr	r3, [r7, #8]
 8108e96:	3358      	adds	r3, #88	; 0x58
 8108e98:	4618      	mov	r0, r3
 8108e9a:	f7ff fd67 	bl	810896c <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8108e9e:	2100      	movs	r1, #0
 8108ea0:	68f8      	ldr	r0, [r7, #12]
 8108ea2:	f7ff fee1 	bl	8108c68 <rpmsg_send_ns_message>
 8108ea6:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 8108ea8:	68bb      	ldr	r3, [r7, #8]
 8108eaa:	3358      	adds	r3, #88	; 0x58
 8108eac:	4618      	mov	r0, r3
 8108eae:	f7ff fd52 	bl	8108956 <metal_mutex_acquire>
		if (status)
 8108eb2:	697b      	ldr	r3, [r7, #20]
 8108eb4:	2b00      	cmp	r3, #0
 8108eb6:	d005      	beq.n	8108ec4 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 8108eb8:	68f8      	ldr	r0, [r7, #12]
 8108eba:	f7ff ff5d 	bl	8108d78 <rpmsg_unregister_endpoint>
 8108ebe:	e002      	b.n	8108ec6 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8108ec0:	bf00      	nop
 8108ec2:	e000      	b.n	8108ec6 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8108ec4:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8108ec6:	68bb      	ldr	r3, [r7, #8]
 8108ec8:	3358      	adds	r3, #88	; 0x58
 8108eca:	4618      	mov	r0, r3
 8108ecc:	f7ff fd4e 	bl	810896c <metal_mutex_release>
	return status;
 8108ed0:	697b      	ldr	r3, [r7, #20]
}
 8108ed2:	4618      	mov	r0, r3
 8108ed4:	3718      	adds	r7, #24
 8108ed6:	46bd      	mov	sp, r7
 8108ed8:	bd80      	pop	{r7, pc}
 8108eda:	bf00      	nop
 8108edc:	fffff82d 	.word	0xfffff82d

08108ee0 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 8108ee0:	b580      	push	{r7, lr}
 8108ee2:	b084      	sub	sp, #16
 8108ee4:	af00      	add	r7, sp, #0
 8108ee6:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	2b00      	cmp	r3, #0
 8108eec:	d018      	beq.n	8108f20 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 8108eee:	687b      	ldr	r3, [r7, #4]
 8108ef0:	6a1b      	ldr	r3, [r3, #32]
 8108ef2:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 8108ef4:	687b      	ldr	r3, [r7, #4]
 8108ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8108ef8:	2b35      	cmp	r3, #53	; 0x35
 8108efa:	d003      	beq.n	8108f04 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 8108efc:	2101      	movs	r1, #1
 8108efe:	6878      	ldr	r0, [r7, #4]
 8108f00:	f7ff feb2 	bl	8108c68 <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 8108f04:	68fb      	ldr	r3, [r7, #12]
 8108f06:	3358      	adds	r3, #88	; 0x58
 8108f08:	4618      	mov	r0, r3
 8108f0a:	f7ff fd24 	bl	8108956 <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 8108f0e:	6878      	ldr	r0, [r7, #4]
 8108f10:	f7ff ff32 	bl	8108d78 <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 8108f14:	68fb      	ldr	r3, [r7, #12]
 8108f16:	3358      	adds	r3, #88	; 0x58
 8108f18:	4618      	mov	r0, r3
 8108f1a:	f7ff fd27 	bl	810896c <metal_mutex_release>
 8108f1e:	e000      	b.n	8108f22 <rpmsg_destroy_ept+0x42>
		return;
 8108f20:	bf00      	nop
}
 8108f22:	3710      	adds	r7, #16
 8108f24:	46bd      	mov	sp, r7
 8108f26:	bd80      	pop	{r7, pc}

08108f28 <__metal_cache_invalidate>:
{
 8108f28:	b580      	push	{r7, lr}
 8108f2a:	b082      	sub	sp, #8
 8108f2c:	af00      	add	r7, sp, #0
 8108f2e:	6078      	str	r0, [r7, #4]
 8108f30:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8108f32:	6839      	ldr	r1, [r7, #0]
 8108f34:	6878      	ldr	r0, [r7, #4]
 8108f36:	f000 fca4 	bl	8109882 <metal_machine_cache_invalidate>
}
 8108f3a:	bf00      	nop
 8108f3c:	3708      	adds	r7, #8
 8108f3e:	46bd      	mov	sp, r7
 8108f40:	bd80      	pop	{r7, pc}

08108f42 <metal_cache_invalidate>:
{
 8108f42:	b580      	push	{r7, lr}
 8108f44:	b082      	sub	sp, #8
 8108f46:	af00      	add	r7, sp, #0
 8108f48:	6078      	str	r0, [r7, #4]
 8108f4a:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8108f4c:	6839      	ldr	r1, [r7, #0]
 8108f4e:	6878      	ldr	r0, [r7, #4]
 8108f50:	f7ff ffea 	bl	8108f28 <__metal_cache_invalidate>
}
 8108f54:	bf00      	nop
 8108f56:	3708      	adds	r7, #8
 8108f58:	46bd      	mov	sp, r7
 8108f5a:	bd80      	pop	{r7, pc}

08108f5c <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8108f5c:	b480      	push	{r7}
 8108f5e:	b083      	sub	sp, #12
 8108f60:	af00      	add	r7, sp, #0
 8108f62:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8108f64:	2300      	movs	r3, #0
}
 8108f66:	4618      	mov	r0, r3
 8108f68:	370c      	adds	r7, #12
 8108f6a:	46bd      	mov	sp, r7
 8108f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f70:	4770      	bx	lr

08108f72 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8108f72:	b580      	push	{r7, lr}
 8108f74:	b082      	sub	sp, #8
 8108f76:	af00      	add	r7, sp, #0
 8108f78:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8108f7a:	6878      	ldr	r0, [r7, #4]
 8108f7c:	f7ff ffee 	bl	8108f5c <__metal_sleep_usec>
 8108f80:	4603      	mov	r3, r0
}
 8108f82:	4618      	mov	r0, r3
 8108f84:	3708      	adds	r7, #8
 8108f86:	46bd      	mov	sp, r7
 8108f88:	bd80      	pop	{r7, pc}

08108f8a <metal_list_init>:
{
 8108f8a:	b480      	push	{r7}
 8108f8c:	b083      	sub	sp, #12
 8108f8e:	af00      	add	r7, sp, #0
 8108f90:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8108f92:	687b      	ldr	r3, [r7, #4]
 8108f94:	687a      	ldr	r2, [r7, #4]
 8108f96:	605a      	str	r2, [r3, #4]
 8108f98:	687b      	ldr	r3, [r7, #4]
 8108f9a:	685a      	ldr	r2, [r3, #4]
 8108f9c:	687b      	ldr	r3, [r7, #4]
 8108f9e:	601a      	str	r2, [r3, #0]
}
 8108fa0:	bf00      	nop
 8108fa2:	370c      	adds	r7, #12
 8108fa4:	46bd      	mov	sp, r7
 8108fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108faa:	4770      	bx	lr

08108fac <metal_list_is_empty>:
{
 8108fac:	b480      	push	{r7}
 8108fae:	b083      	sub	sp, #12
 8108fb0:	af00      	add	r7, sp, #0
 8108fb2:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8108fb4:	687b      	ldr	r3, [r7, #4]
 8108fb6:	681b      	ldr	r3, [r3, #0]
 8108fb8:	687a      	ldr	r2, [r7, #4]
 8108fba:	429a      	cmp	r2, r3
 8108fbc:	bf0c      	ite	eq
 8108fbe:	2301      	moveq	r3, #1
 8108fc0:	2300      	movne	r3, #0
 8108fc2:	b2db      	uxtb	r3, r3
}
 8108fc4:	4618      	mov	r0, r3
 8108fc6:	370c      	adds	r7, #12
 8108fc8:	46bd      	mov	sp, r7
 8108fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fce:	4770      	bx	lr

08108fd0 <metal_io_virt_to_offset>:
{
 8108fd0:	b480      	push	{r7}
 8108fd2:	b085      	sub	sp, #20
 8108fd4:	af00      	add	r7, sp, #0
 8108fd6:	6078      	str	r0, [r7, #4]
 8108fd8:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8108fda:	687b      	ldr	r3, [r7, #4]
 8108fdc:	681b      	ldr	r3, [r3, #0]
 8108fde:	683a      	ldr	r2, [r7, #0]
 8108fe0:	1ad3      	subs	r3, r2, r3
 8108fe2:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8108fe4:	687b      	ldr	r3, [r7, #4]
 8108fe6:	689b      	ldr	r3, [r3, #8]
 8108fe8:	68fa      	ldr	r2, [r7, #12]
 8108fea:	429a      	cmp	r2, r3
 8108fec:	d201      	bcs.n	8108ff2 <metal_io_virt_to_offset+0x22>
 8108fee:	68fb      	ldr	r3, [r7, #12]
 8108ff0:	e001      	b.n	8108ff6 <metal_io_virt_to_offset+0x26>
 8108ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8108ff6:	4618      	mov	r0, r3
 8108ff8:	3714      	adds	r7, #20
 8108ffa:	46bd      	mov	sp, r7
 8108ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109000:	4770      	bx	lr

08109002 <__metal_mutex_init>:
{
 8109002:	b480      	push	{r7}
 8109004:	b085      	sub	sp, #20
 8109006:	af00      	add	r7, sp, #0
 8109008:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 810900a:	687b      	ldr	r3, [r7, #4]
 810900c:	60fb      	str	r3, [r7, #12]
 810900e:	2300      	movs	r3, #0
 8109010:	60bb      	str	r3, [r7, #8]
 8109012:	68bb      	ldr	r3, [r7, #8]
 8109014:	461a      	mov	r2, r3
 8109016:	68fb      	ldr	r3, [r7, #12]
 8109018:	f3bf 8f5b 	dmb	ish
 810901c:	601a      	str	r2, [r3, #0]
 810901e:	f3bf 8f5b 	dmb	ish
}
 8109022:	bf00      	nop
 8109024:	3714      	adds	r7, #20
 8109026:	46bd      	mov	sp, r7
 8109028:	f85d 7b04 	ldr.w	r7, [sp], #4
 810902c:	4770      	bx	lr

0810902e <__metal_mutex_deinit>:
{
 810902e:	b480      	push	{r7}
 8109030:	b083      	sub	sp, #12
 8109032:	af00      	add	r7, sp, #0
 8109034:	6078      	str	r0, [r7, #4]
}
 8109036:	bf00      	nop
 8109038:	370c      	adds	r7, #12
 810903a:	46bd      	mov	sp, r7
 810903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109040:	4770      	bx	lr

08109042 <__metal_mutex_acquire>:
{
 8109042:	b480      	push	{r7}
 8109044:	b083      	sub	sp, #12
 8109046:	af00      	add	r7, sp, #0
 8109048:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 810904a:	bf00      	nop
 810904c:	687b      	ldr	r3, [r7, #4]
 810904e:	2201      	movs	r2, #1
 8109050:	4611      	mov	r1, r2
 8109052:	f3bf 8f5b 	dmb	ish
 8109056:	e8d3 2f4f 	ldrexb	r2, [r3]
 810905a:	e8c3 1f40 	strexb	r0, r1, [r3]
 810905e:	2800      	cmp	r0, #0
 8109060:	d1f9      	bne.n	8109056 <__metal_mutex_acquire+0x14>
 8109062:	f3bf 8f5b 	dmb	ish
 8109066:	b2d3      	uxtb	r3, r2
 8109068:	2b00      	cmp	r3, #0
 810906a:	d1ef      	bne.n	810904c <__metal_mutex_acquire+0xa>
}
 810906c:	bf00      	nop
 810906e:	bf00      	nop
 8109070:	370c      	adds	r7, #12
 8109072:	46bd      	mov	sp, r7
 8109074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109078:	4770      	bx	lr

0810907a <__metal_mutex_release>:
{
 810907a:	b480      	push	{r7}
 810907c:	b083      	sub	sp, #12
 810907e:	af00      	add	r7, sp, #0
 8109080:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8109082:	687b      	ldr	r3, [r7, #4]
 8109084:	f3bf 8f5b 	dmb	ish
 8109088:	2200      	movs	r2, #0
 810908a:	701a      	strb	r2, [r3, #0]
 810908c:	f3bf 8f5b 	dmb	ish
}
 8109090:	bf00      	nop
 8109092:	370c      	adds	r7, #12
 8109094:	46bd      	mov	sp, r7
 8109096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810909a:	4770      	bx	lr

0810909c <metal_mutex_init>:
{
 810909c:	b580      	push	{r7, lr}
 810909e:	b082      	sub	sp, #8
 81090a0:	af00      	add	r7, sp, #0
 81090a2:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 81090a4:	6878      	ldr	r0, [r7, #4]
 81090a6:	f7ff ffac 	bl	8109002 <__metal_mutex_init>
}
 81090aa:	bf00      	nop
 81090ac:	3708      	adds	r7, #8
 81090ae:	46bd      	mov	sp, r7
 81090b0:	bd80      	pop	{r7, pc}

081090b2 <metal_mutex_deinit>:
{
 81090b2:	b580      	push	{r7, lr}
 81090b4:	b082      	sub	sp, #8
 81090b6:	af00      	add	r7, sp, #0
 81090b8:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 81090ba:	6878      	ldr	r0, [r7, #4]
 81090bc:	f7ff ffb7 	bl	810902e <__metal_mutex_deinit>
}
 81090c0:	bf00      	nop
 81090c2:	3708      	adds	r7, #8
 81090c4:	46bd      	mov	sp, r7
 81090c6:	bd80      	pop	{r7, pc}

081090c8 <metal_mutex_acquire>:
{
 81090c8:	b580      	push	{r7, lr}
 81090ca:	b082      	sub	sp, #8
 81090cc:	af00      	add	r7, sp, #0
 81090ce:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 81090d0:	6878      	ldr	r0, [r7, #4]
 81090d2:	f7ff ffb6 	bl	8109042 <__metal_mutex_acquire>
}
 81090d6:	bf00      	nop
 81090d8:	3708      	adds	r7, #8
 81090da:	46bd      	mov	sp, r7
 81090dc:	bd80      	pop	{r7, pc}

081090de <metal_mutex_release>:
{
 81090de:	b580      	push	{r7, lr}
 81090e0:	b082      	sub	sp, #8
 81090e2:	af00      	add	r7, sp, #0
 81090e4:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 81090e6:	6878      	ldr	r0, [r7, #4]
 81090e8:	f7ff ffc7 	bl	810907a <__metal_mutex_release>
}
 81090ec:	bf00      	nop
 81090ee:	3708      	adds	r7, #8
 81090f0:	46bd      	mov	sp, r7
 81090f2:	bd80      	pop	{r7, pc}

081090f4 <rpmsg_init_ept>:
{
 81090f4:	b580      	push	{r7, lr}
 81090f6:	b084      	sub	sp, #16
 81090f8:	af00      	add	r7, sp, #0
 81090fa:	60f8      	str	r0, [r7, #12]
 81090fc:	60b9      	str	r1, [r7, #8]
 81090fe:	607a      	str	r2, [r7, #4]
 8109100:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8109102:	68fb      	ldr	r3, [r7, #12]
 8109104:	2220      	movs	r2, #32
 8109106:	68b9      	ldr	r1, [r7, #8]
 8109108:	4618      	mov	r0, r3
 810910a:	f001 fd21 	bl	810ab50 <strncpy>
	ept->addr = src;
 810910e:	68fb      	ldr	r3, [r7, #12]
 8109110:	687a      	ldr	r2, [r7, #4]
 8109112:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8109114:	68fb      	ldr	r3, [r7, #12]
 8109116:	683a      	ldr	r2, [r7, #0]
 8109118:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 810911a:	68fb      	ldr	r3, [r7, #12]
 810911c:	69ba      	ldr	r2, [r7, #24]
 810911e:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8109120:	68fb      	ldr	r3, [r7, #12]
 8109122:	69fa      	ldr	r2, [r7, #28]
 8109124:	631a      	str	r2, [r3, #48]	; 0x30
}
 8109126:	bf00      	nop
 8109128:	3710      	adds	r7, #16
 810912a:	46bd      	mov	sp, r7
 810912c:	bd80      	pop	{r7, pc}

0810912e <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 810912e:	b480      	push	{r7}
 8109130:	b083      	sub	sp, #12
 8109132:	af00      	add	r7, sp, #0
 8109134:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 8109136:	687b      	ldr	r3, [r7, #4]
 8109138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810913a:	699b      	ldr	r3, [r3, #24]
}
 810913c:	4618      	mov	r0, r3
 810913e:	370c      	adds	r7, #12
 8109140:	46bd      	mov	sp, r7
 8109142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109146:	4770      	bx	lr

08109148 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8109148:	b580      	push	{r7, lr}
 810914a:	b082      	sub	sp, #8
 810914c:	af00      	add	r7, sp, #0
 810914e:	6078      	str	r0, [r7, #4]
 8109150:	460b      	mov	r3, r1
 8109152:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8109154:	687b      	ldr	r3, [r7, #4]
 8109156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109158:	6a1b      	ldr	r3, [r3, #32]
 810915a:	685b      	ldr	r3, [r3, #4]
 810915c:	687a      	ldr	r2, [r7, #4]
 810915e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8109160:	78f9      	ldrb	r1, [r7, #3]
 8109162:	4610      	mov	r0, r2
 8109164:	4798      	blx	r3
}
 8109166:	bf00      	nop
 8109168:	3708      	adds	r7, #8
 810916a:	46bd      	mov	sp, r7
 810916c:	bd80      	pop	{r7, pc}

0810916e <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 810916e:	b580      	push	{r7, lr}
 8109170:	b082      	sub	sp, #8
 8109172:	af00      	add	r7, sp, #0
 8109174:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8109176:	687b      	ldr	r3, [r7, #4]
 8109178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810917a:	6a1b      	ldr	r3, [r3, #32]
 810917c:	681b      	ldr	r3, [r3, #0]
 810917e:	687a      	ldr	r2, [r7, #4]
 8109180:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8109182:	4610      	mov	r0, r2
 8109184:	4798      	blx	r3
 8109186:	4603      	mov	r3, r0
}
 8109188:	4618      	mov	r0, r3
 810918a:	3708      	adds	r7, #8
 810918c:	46bd      	mov	sp, r7
 810918e:	bd80      	pop	{r7, pc}

08109190 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8109190:	b580      	push	{r7, lr}
 8109192:	b082      	sub	sp, #8
 8109194:	af00      	add	r7, sp, #0
 8109196:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8109198:	687b      	ldr	r3, [r7, #4]
 810919a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810919c:	6a1b      	ldr	r3, [r3, #32]
 810919e:	689b      	ldr	r3, [r3, #8]
 81091a0:	687a      	ldr	r2, [r7, #4]
 81091a2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 81091a4:	4610      	mov	r0, r2
 81091a6:	4798      	blx	r3
 81091a8:	4603      	mov	r3, r0
}
 81091aa:	4618      	mov	r0, r3
 81091ac:	3708      	adds	r7, #8
 81091ae:	46bd      	mov	sp, r7
 81091b0:	bd80      	pop	{r7, pc}

081091b2 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 81091b2:	b580      	push	{r7, lr}
 81091b4:	b086      	sub	sp, #24
 81091b6:	af02      	add	r7, sp, #8
 81091b8:	60f8      	str	r0, [r7, #12]
 81091ba:	60b9      	str	r1, [r7, #8]
 81091bc:	607a      	str	r2, [r7, #4]
 81091be:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 81091c0:	68fb      	ldr	r3, [r7, #12]
 81091c2:	6e58      	ldr	r0, [r3, #100]	; 0x64
 81091c4:	68b9      	ldr	r1, [r7, #8]
 81091c6:	69bb      	ldr	r3, [r7, #24]
 81091c8:	9300      	str	r3, [sp, #0]
 81091ca:	683b      	ldr	r3, [r7, #0]
 81091cc:	687a      	ldr	r2, [r7, #4]
 81091ce:	f000 fb71 	bl	81098b4 <virtio_create_virtqueues>
 81091d2:	4603      	mov	r3, r0
					callbacks);
}
 81091d4:	4618      	mov	r0, r3
 81091d6:	3710      	adds	r7, #16
 81091d8:	46bd      	mov	sp, r7
 81091da:	bd80      	pop	{r7, pc}

081091dc <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 81091dc:	b580      	push	{r7, lr}
 81091de:	b082      	sub	sp, #8
 81091e0:	af00      	add	r7, sp, #0
 81091e2:	6078      	str	r0, [r7, #4]
 81091e4:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 81091e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81091ea:	683a      	ldr	r2, [r7, #0]
 81091ec:	2100      	movs	r1, #0
 81091ee:	6878      	ldr	r0, [r7, #4]
 81091f0:	f7ff fd62 	bl	8108cb8 <rpmsg_get_endpoint>
 81091f4:	4603      	mov	r3, r0
}
 81091f6:	4618      	mov	r0, r3
 81091f8:	3708      	adds	r7, #8
 81091fa:	46bd      	mov	sp, r7
 81091fc:	bd80      	pop	{r7, pc}

081091fe <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 81091fe:	b480      	push	{r7}
 8109200:	b085      	sub	sp, #20
 8109202:	af00      	add	r7, sp, #0
 8109204:	60f8      	str	r0, [r7, #12]
 8109206:	60b9      	str	r1, [r7, #8]
 8109208:	607a      	str	r2, [r7, #4]
	if (!shpool)
 810920a:	68fb      	ldr	r3, [r7, #12]
 810920c:	2b00      	cmp	r3, #0
 810920e:	d01d      	beq.n	810924c <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8109210:	68fb      	ldr	r3, [r7, #12]
 8109212:	68ba      	ldr	r2, [r7, #8]
 8109214:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8109216:	687b      	ldr	r3, [r7, #4]
 8109218:	f003 0303 	and.w	r3, r3, #3
 810921c:	2b00      	cmp	r3, #0
 810921e:	d004      	beq.n	810922a <rpmsg_virtio_init_shm_pool+0x2c>
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	f023 0303 	bic.w	r3, r3, #3
 8109226:	3304      	adds	r3, #4
 8109228:	e000      	b.n	810922c <rpmsg_virtio_init_shm_pool+0x2e>
 810922a:	687b      	ldr	r3, [r7, #4]
 810922c:	68fa      	ldr	r2, [r7, #12]
 810922e:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8109230:	687b      	ldr	r3, [r7, #4]
 8109232:	f003 0303 	and.w	r3, r3, #3
 8109236:	2b00      	cmp	r3, #0
 8109238:	d004      	beq.n	8109244 <rpmsg_virtio_init_shm_pool+0x46>
 810923a:	687b      	ldr	r3, [r7, #4]
 810923c:	f023 0303 	bic.w	r3, r3, #3
 8109240:	3304      	adds	r3, #4
 8109242:	e000      	b.n	8109246 <rpmsg_virtio_init_shm_pool+0x48>
 8109244:	687b      	ldr	r3, [r7, #4]
 8109246:	68fa      	ldr	r2, [r7, #12]
 8109248:	6053      	str	r3, [r2, #4]
 810924a:	e000      	b.n	810924e <rpmsg_virtio_init_shm_pool+0x50>
		return;
 810924c:	bf00      	nop
}
 810924e:	3714      	adds	r7, #20
 8109250:	46bd      	mov	sp, r7
 8109252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109256:	4770      	bx	lr

08109258 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8109258:	b580      	push	{r7, lr}
 810925a:	b086      	sub	sp, #24
 810925c:	af00      	add	r7, sp, #0
 810925e:	60f8      	str	r0, [r7, #12]
 8109260:	60b9      	str	r1, [r7, #8]
 8109262:	607a      	str	r2, [r7, #4]
 8109264:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109266:	68f8      	ldr	r0, [r7, #12]
 8109268:	f7ff ff61 	bl	810912e <rpmsg_virtio_get_role>
 810926c:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810926e:	697b      	ldr	r3, [r7, #20]
 8109270:	2b01      	cmp	r3, #1
 8109272:	d106      	bne.n	8109282 <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 8109274:	68fb      	ldr	r3, [r7, #12]
 8109276:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8109278:	8879      	ldrh	r1, [r7, #2]
 810927a:	687a      	ldr	r2, [r7, #4]
 810927c:	4618      	mov	r0, r3
 810927e:	f000 fcc3 	bl	8109c08 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8109282:	bf00      	nop
 8109284:	3718      	adds	r7, #24
 8109286:	46bd      	mov	sp, r7
 8109288:	bd80      	pop	{r7, pc}

0810928a <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 810928a:	b580      	push	{r7, lr}
 810928c:	b086      	sub	sp, #24
 810928e:	af00      	add	r7, sp, #0
 8109290:	60f8      	str	r0, [r7, #12]
 8109292:	60b9      	str	r1, [r7, #8]
 8109294:	607a      	str	r2, [r7, #4]
 8109296:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109298:	68f8      	ldr	r0, [r7, #12]
 810929a:	f7ff ff48 	bl	810912e <rpmsg_virtio_get_role>
 810929e:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81092a0:	697b      	ldr	r3, [r7, #20]
 81092a2:	2b01      	cmp	r3, #1
 81092a4:	d108      	bne.n	81092b8 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 81092a6:	68fb      	ldr	r3, [r7, #12]
 81092a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81092aa:	8879      	ldrh	r1, [r7, #2]
 81092ac:	687a      	ldr	r2, [r7, #4]
 81092ae:	4618      	mov	r0, r3
 81092b0:	f000 fcaa 	bl	8109c08 <virtqueue_add_consumed_buffer>
 81092b4:	4603      	mov	r3, r0
 81092b6:	e000      	b.n	81092ba <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 81092b8:	2300      	movs	r3, #0
}
 81092ba:	4618      	mov	r0, r3
 81092bc:	3718      	adds	r7, #24
 81092be:	46bd      	mov	sp, r7
 81092c0:	bd80      	pop	{r7, pc}

081092c2 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81092c2:	b580      	push	{r7, lr}
 81092c4:	b086      	sub	sp, #24
 81092c6:	af00      	add	r7, sp, #0
 81092c8:	60f8      	str	r0, [r7, #12]
 81092ca:	60b9      	str	r1, [r7, #8]
 81092cc:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81092ce:	68f8      	ldr	r0, [r7, #12]
 81092d0:	f7ff ff2d 	bl	810912e <rpmsg_virtio_get_role>
 81092d4:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81092d6:	2300      	movs	r3, #0
 81092d8:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81092da:	693b      	ldr	r3, [r7, #16]
 81092dc:	2b01      	cmp	r3, #1
 81092de:	d107      	bne.n	81092f0 <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 81092e0:	68fb      	ldr	r3, [r7, #12]
 81092e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81092e4:	68ba      	ldr	r2, [r7, #8]
 81092e6:	6879      	ldr	r1, [r7, #4]
 81092e8:	4618      	mov	r0, r3
 81092ea:	f000 fc47 	bl	8109b7c <virtqueue_get_available_buffer>
 81092ee:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 81092f0:	697b      	ldr	r3, [r7, #20]
}
 81092f2:	4618      	mov	r0, r3
 81092f4:	3718      	adds	r7, #24
 81092f6:	46bd      	mov	sp, r7
 81092f8:	bd80      	pop	{r7, pc}

081092fa <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81092fa:	b580      	push	{r7, lr}
 81092fc:	b086      	sub	sp, #24
 81092fe:	af00      	add	r7, sp, #0
 8109300:	60f8      	str	r0, [r7, #12]
 8109302:	60b9      	str	r1, [r7, #8]
 8109304:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109306:	68f8      	ldr	r0, [r7, #12]
 8109308:	f7ff ff11 	bl	810912e <rpmsg_virtio_get_role>
 810930c:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 810930e:	2300      	movs	r3, #0
 8109310:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109312:	693b      	ldr	r3, [r7, #16]
 8109314:	2b01      	cmp	r3, #1
 8109316:	d107      	bne.n	8109328 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 8109318:	68fb      	ldr	r3, [r7, #12]
 810931a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 810931c:	68ba      	ldr	r2, [r7, #8]
 810931e:	6879      	ldr	r1, [r7, #4]
 8109320:	4618      	mov	r0, r3
 8109322:	f000 fc2b 	bl	8109b7c <virtqueue_get_available_buffer>
 8109326:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8109328:	697b      	ldr	r3, [r7, #20]
 810932a:	2b00      	cmp	r3, #0
 810932c:	d005      	beq.n	810933a <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 810932e:	68bb      	ldr	r3, [r7, #8]
 8109330:	681b      	ldr	r3, [r3, #0]
 8109332:	4619      	mov	r1, r3
 8109334:	6978      	ldr	r0, [r7, #20]
 8109336:	f7ff fe04 	bl	8108f42 <metal_cache_invalidate>
	}

	return data;
 810933a:	697b      	ldr	r3, [r7, #20]
}
 810933c:	4618      	mov	r0, r3
 810933e:	3718      	adds	r7, #24
 8109340:	46bd      	mov	sp, r7
 8109342:	bd80      	pop	{r7, pc}

08109344 <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 8109344:	b580      	push	{r7, lr}
 8109346:	b084      	sub	sp, #16
 8109348:	af00      	add	r7, sp, #0
 810934a:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 810934c:	6878      	ldr	r0, [r7, #4]
 810934e:	f7ff ff0e 	bl	810916e <rpmsg_virtio_get_status>
 8109352:	4603      	mov	r3, r0
 8109354:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8109356:	7bfb      	ldrb	r3, [r7, #15]
 8109358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810935c:	2b00      	cmp	r3, #0
 810935e:	d004      	beq.n	810936a <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 8109360:	2100      	movs	r1, #0
 8109362:	6878      	ldr	r0, [r7, #4]
 8109364:	f7ff fef0 	bl	8109148 <rpmsg_virtio_set_status>
 8109368:	e7f0      	b.n	810934c <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 810936a:	7bfb      	ldrb	r3, [r7, #15]
 810936c:	f003 0304 	and.w	r3, r3, #4
 8109370:	2b00      	cmp	r3, #0
 8109372:	d0eb      	beq.n	810934c <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 8109374:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8109376:	4618      	mov	r0, r3
 8109378:	3710      	adds	r7, #16
 810937a:	46bd      	mov	sp, r7
 810937c:	bd80      	pop	{r7, pc}

0810937e <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 810937e:	b580      	push	{r7, lr}
 8109380:	b084      	sub	sp, #16
 8109382:	af00      	add	r7, sp, #0
 8109384:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8109386:	6878      	ldr	r0, [r7, #4]
 8109388:	f7ff fed1 	bl	810912e <rpmsg_virtio_get_role>
 810938c:	60b8      	str	r0, [r7, #8]
	int length = 0;
 810938e:	2300      	movs	r3, #0
 8109390:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109392:	68bb      	ldr	r3, [r7, #8]
 8109394:	2b01      	cmp	r3, #1
 8109396:	d107      	bne.n	81093a8 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8109398:	687b      	ldr	r3, [r7, #4]
 810939a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810939c:	4618      	mov	r0, r3
 810939e:	f000 fcad 	bl	8109cfc <virtqueue_get_desc_size>
 81093a2:	4603      	mov	r3, r0
 81093a4:	3b10      	subs	r3, #16
		length =
 81093a6:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 81093a8:	68fb      	ldr	r3, [r7, #12]
}
 81093aa:	4618      	mov	r0, r3
 81093ac:	3710      	adds	r7, #16
 81093ae:	46bd      	mov	sp, r7
 81093b0:	bd80      	pop	{r7, pc}
	...

081093b4 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 81093b4:	b580      	push	{r7, lr}
 81093b6:	b090      	sub	sp, #64	; 0x40
 81093b8:	af00      	add	r7, sp, #0
 81093ba:	60f8      	str	r0, [r7, #12]
 81093bc:	60b9      	str	r1, [r7, #8]
 81093be:	607a      	str	r2, [r7, #4]
 81093c0:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 81093c2:	2300      	movs	r3, #0
 81093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 81093c6:	2300      	movs	r3, #0
 81093c8:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 81093ca:	68fb      	ldr	r3, [r7, #12]
 81093cc:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 81093ce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81093d0:	f7ff fecd 	bl	810916e <rpmsg_virtio_get_status>
 81093d4:	4603      	mov	r3, r0
 81093d6:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 81093d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81093da:	f003 0304 	and.w	r3, r3, #4
 81093de:	2b00      	cmp	r3, #0
 81093e0:	d101      	bne.n	81093e6 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 81093e2:	4b45      	ldr	r3, [pc, #276]	; (81094f8 <rpmsg_virtio_send_offchannel_raw+0x144>)
 81093e4:	e083      	b.n	81094ee <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 81093e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81093e8:	2b00      	cmp	r3, #0
 81093ea:	d003      	beq.n	81093f4 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 81093ec:	f240 53dc 	movw	r3, #1500	; 0x5dc
 81093f0:	63bb      	str	r3, [r7, #56]	; 0x38
 81093f2:	e001      	b.n	81093f8 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 81093f4:	2300      	movs	r3, #0
 81093f6:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 81093f8:	68fb      	ldr	r3, [r7, #12]
 81093fa:	3358      	adds	r3, #88	; 0x58
 81093fc:	4618      	mov	r0, r3
 81093fe:	f7ff fe63 	bl	81090c8 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8109402:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8109404:	f7ff ffbb 	bl	810937e <_rpmsg_virtio_get_buffer_size>
 8109408:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 810940a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810940c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810940e:	429a      	cmp	r2, r3
 8109410:	dc08      	bgt.n	8109424 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8109412:	f107 0216 	add.w	r2, r7, #22
 8109416:	f107 0310 	add.w	r3, r7, #16
 810941a:	4619      	mov	r1, r3
 810941c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810941e:	f7ff ff50 	bl	81092c2 <rpmsg_virtio_get_tx_buffer>
 8109422:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8109424:	68fb      	ldr	r3, [r7, #12]
 8109426:	3358      	adds	r3, #88	; 0x58
 8109428:	4618      	mov	r0, r3
 810942a:	f7ff fe58 	bl	81090de <metal_mutex_release>
		if (buffer || !tick_count)
 810942e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109430:	2b00      	cmp	r3, #0
 8109432:	d10e      	bne.n	8109452 <rpmsg_virtio_send_offchannel_raw+0x9e>
 8109434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109436:	2b00      	cmp	r3, #0
 8109438:	d00b      	beq.n	8109452 <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 810943a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810943c:	2b00      	cmp	r3, #0
 810943e:	d001      	beq.n	8109444 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8109440:	4b2e      	ldr	r3, [pc, #184]	; (81094fc <rpmsg_virtio_send_offchannel_raw+0x148>)
 8109442:	e054      	b.n	81094ee <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8109444:	200a      	movs	r0, #10
 8109446:	f7ff fd94 	bl	8108f72 <metal_sleep_usec>
		tick_count--;
 810944a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810944c:	3b01      	subs	r3, #1
 810944e:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8109450:	e7d2      	b.n	81093f8 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8109452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109454:	2b00      	cmp	r3, #0
 8109456:	d101      	bne.n	810945c <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8109458:	4b29      	ldr	r3, [pc, #164]	; (8109500 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 810945a:	e048      	b.n	81094ee <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 810945c:	687b      	ldr	r3, [r7, #4]
 810945e:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8109460:	68bb      	ldr	r3, [r7, #8]
 8109462:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8109464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8109466:	b29b      	uxth	r3, r3
 8109468:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 810946a:	2300      	movs	r3, #0
 810946c:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 810946e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8109472:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8109474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8109476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109478:	f7ff fdaa 	bl	8108fd0 <metal_io_virt_to_offset>
 810947c:	4601      	mov	r1, r0
 810947e:	f107 0218 	add.w	r2, r7, #24
 8109482:	2310      	movs	r3, #16
 8109484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109486:	f7fe ff0a 	bl	810829e <metal_io_block_write>
 810948a:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 810948c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810948e:	2b10      	cmp	r3, #16
 8109490:	d000      	beq.n	8109494 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8109492:	e7fe      	b.n	8109492 <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8109494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109496:	3310      	adds	r3, #16
 8109498:	4619      	mov	r1, r3
 810949a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810949c:	f7ff fd98 	bl	8108fd0 <metal_io_virt_to_offset>
 81094a0:	4601      	mov	r1, r0
 81094a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81094a4:	683a      	ldr	r2, [r7, #0]
 81094a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81094a8:	f7fe fef9 	bl	810829e <metal_io_block_write>
 81094ac:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 81094ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81094b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81094b2:	429a      	cmp	r2, r3
 81094b4:	d000      	beq.n	81094b8 <rpmsg_virtio_send_offchannel_raw+0x104>
 81094b6:	e7fe      	b.n	81094b6 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 81094b8:	68fb      	ldr	r3, [r7, #12]
 81094ba:	3358      	adds	r3, #88	; 0x58
 81094bc:	4618      	mov	r0, r3
 81094be:	f7ff fe03 	bl	81090c8 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 81094c2:	693a      	ldr	r2, [r7, #16]
 81094c4:	8afb      	ldrh	r3, [r7, #22]
 81094c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81094c8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81094ca:	f7ff fede 	bl	810928a <rpmsg_virtio_enqueue_buffer>
 81094ce:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 81094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81094d2:	2b00      	cmp	r3, #0
 81094d4:	d000      	beq.n	81094d8 <rpmsg_virtio_send_offchannel_raw+0x124>
 81094d6:	e7fe      	b.n	81094d6 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 81094d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81094da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81094dc:	4618      	mov	r0, r3
 81094de:	f000 fbf7 	bl	8109cd0 <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 81094e2:	68fb      	ldr	r3, [r7, #12]
 81094e4:	3358      	adds	r3, #88	; 0x58
 81094e6:	4618      	mov	r0, r3
 81094e8:	f7ff fdf9 	bl	81090de <metal_mutex_release>

	return size;
 81094ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 81094ee:	4618      	mov	r0, r3
 81094f0:	3740      	adds	r7, #64	; 0x40
 81094f2:	46bd      	mov	sp, r7
 81094f4:	bd80      	pop	{r7, pc}
 81094f6:	bf00      	nop
 81094f8:	fffff82c 	.word	0xfffff82c
 81094fc:	fffff82b 	.word	0xfffff82b
 8109500:	fffff82e 	.word	0xfffff82e

08109504 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8109504:	b480      	push	{r7}
 8109506:	b083      	sub	sp, #12
 8109508:	af00      	add	r7, sp, #0
 810950a:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 810950c:	bf00      	nop
 810950e:	370c      	adds	r7, #12
 8109510:	46bd      	mov	sp, r7
 8109512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109516:	4770      	bx	lr

08109518 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8109518:	b590      	push	{r4, r7, lr}
 810951a:	b08d      	sub	sp, #52	; 0x34
 810951c:	af02      	add	r7, sp, #8
 810951e:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8109520:	687b      	ldr	r3, [r7, #4]
 8109522:	681b      	ldr	r3, [r3, #0]
 8109524:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8109526:	6a3b      	ldr	r3, [r7, #32]
 8109528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810952a:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 810952c:	69fb      	ldr	r3, [r7, #28]
 810952e:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8109530:	69bb      	ldr	r3, [r7, #24]
 8109532:	3358      	adds	r3, #88	; 0x58
 8109534:	4618      	mov	r0, r3
 8109536:	f7ff fdc7 	bl	81090c8 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 810953a:	f107 020a 	add.w	r2, r7, #10
 810953e:	f107 030c 	add.w	r3, r7, #12
 8109542:	4619      	mov	r1, r3
 8109544:	69f8      	ldr	r0, [r7, #28]
 8109546:	f7ff fed8 	bl	81092fa <rpmsg_virtio_get_rx_buffer>
 810954a:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 810954c:	69bb      	ldr	r3, [r7, #24]
 810954e:	3358      	adds	r3, #88	; 0x58
 8109550:	4618      	mov	r0, r3
 8109552:	f7ff fdc4 	bl	81090de <metal_mutex_release>

	while (rp_hdr) {
 8109556:	e04c      	b.n	81095f2 <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8109558:	69bb      	ldr	r3, [r7, #24]
 810955a:	3358      	adds	r3, #88	; 0x58
 810955c:	4618      	mov	r0, r3
 810955e:	f7ff fdb3 	bl	81090c8 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8109562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109564:	685b      	ldr	r3, [r3, #4]
 8109566:	4619      	mov	r1, r3
 8109568:	69b8      	ldr	r0, [r7, #24]
 810956a:	f7ff fe37 	bl	81091dc <rpmsg_get_ept_from_addr>
 810956e:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8109570:	69bb      	ldr	r3, [r7, #24]
 8109572:	3358      	adds	r3, #88	; 0x58
 8109574:	4618      	mov	r0, r3
 8109576:	f7ff fdb2 	bl	81090de <metal_mutex_release>

		if (!ept)
 810957a:	697b      	ldr	r3, [r7, #20]
 810957c:	2b00      	cmp	r3, #0
 810957e:	d03c      	beq.n	81095fa <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8109580:	697b      	ldr	r3, [r7, #20]
 8109582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109588:	d103      	bne.n	8109592 <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 810958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810958c:	681a      	ldr	r2, [r3, #0]
 810958e:	697b      	ldr	r3, [r7, #20]
 8109590:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8109592:	697b      	ldr	r3, [r7, #20]
 8109594:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8109596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109598:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 810959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810959e:	899b      	ldrh	r3, [r3, #12]
 81095a0:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 81095a2:	4618      	mov	r0, r3
 81095a4:	697b      	ldr	r3, [r7, #20]
 81095a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81095a8:	697b      	ldr	r3, [r7, #20]
 81095aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81095ac:	9300      	str	r3, [sp, #0]
 81095ae:	4613      	mov	r3, r2
 81095b0:	4602      	mov	r2, r0
 81095b2:	6978      	ldr	r0, [r7, #20]
 81095b4:	47a0      	blx	r4
 81095b6:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 81095b8:	693b      	ldr	r3, [r7, #16]
 81095ba:	2b00      	cmp	r3, #0
 81095bc:	d000      	beq.n	81095c0 <rpmsg_virtio_rx_callback+0xa8>
 81095be:	e7fe      	b.n	81095be <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 81095c0:	69bb      	ldr	r3, [r7, #24]
 81095c2:	3358      	adds	r3, #88	; 0x58
 81095c4:	4618      	mov	r0, r3
 81095c6:	f7ff fd7f 	bl	81090c8 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 81095ca:	68fa      	ldr	r2, [r7, #12]
 81095cc:	897b      	ldrh	r3, [r7, #10]
 81095ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 81095d0:	69f8      	ldr	r0, [r7, #28]
 81095d2:	f7ff fe41 	bl	8109258 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 81095d6:	f107 020a 	add.w	r2, r7, #10
 81095da:	f107 030c 	add.w	r3, r7, #12
 81095de:	4619      	mov	r1, r3
 81095e0:	69f8      	ldr	r0, [r7, #28]
 81095e2:	f7ff fe8a 	bl	81092fa <rpmsg_virtio_get_rx_buffer>
 81095e6:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 81095e8:	69bb      	ldr	r3, [r7, #24]
 81095ea:	3358      	adds	r3, #88	; 0x58
 81095ec:	4618      	mov	r0, r3
 81095ee:	f7ff fd76 	bl	81090de <metal_mutex_release>
	while (rp_hdr) {
 81095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095f4:	2b00      	cmp	r3, #0
 81095f6:	d1af      	bne.n	8109558 <rpmsg_virtio_rx_callback+0x40>
 81095f8:	e000      	b.n	81095fc <rpmsg_virtio_rx_callback+0xe4>
			return;
 81095fa:	bf00      	nop
	}
}
 81095fc:	372c      	adds	r7, #44	; 0x2c
 81095fe:	46bd      	mov	sp, r7
 8109600:	bd90      	pop	{r4, r7, pc}

08109602 <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8109602:	b580      	push	{r7, lr}
 8109604:	b092      	sub	sp, #72	; 0x48
 8109606:	af00      	add	r7, sp, #0
 8109608:	60f8      	str	r0, [r7, #12]
 810960a:	60b9      	str	r1, [r7, #8]
 810960c:	607a      	str	r2, [r7, #4]
 810960e:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8109610:	68fb      	ldr	r3, [r7, #12]
 8109612:	6a1b      	ldr	r3, [r3, #32]
 8109614:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8109616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8109618:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 810961a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810961c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810961e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8109620:	68bb      	ldr	r3, [r7, #8]
 8109622:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8109624:	687b      	ldr	r3, [r7, #4]
 8109626:	2b28      	cmp	r3, #40	; 0x28
 8109628:	d001      	beq.n	810962e <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 810962a:	2300      	movs	r3, #0
 810962c:	e057      	b.n	81096de <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 810962e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8109630:	4619      	mov	r1, r3
 8109632:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8109634:	f7ff fccc 	bl	8108fd0 <metal_io_virt_to_offset>
 8109638:	4601      	mov	r1, r0
 810963a:	f107 0210 	add.w	r2, r7, #16
 810963e:	2320      	movs	r3, #32
 8109640:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8109642:	f7fe fdb5 	bl	81081b0 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8109646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109648:	6a1b      	ldr	r3, [r3, #32]
 810964a:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 810964c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810964e:	3358      	adds	r3, #88	; 0x58
 8109650:	4618      	mov	r0, r3
 8109652:	f7ff fd39 	bl	81090c8 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8109656:	f107 0110 	add.w	r1, r7, #16
 810965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810965c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109660:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8109662:	f7ff fb29 	bl	8108cb8 <rpmsg_get_endpoint>
 8109666:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8109668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810966c:	f003 0301 	and.w	r3, r3, #1
 8109670:	2b00      	cmp	r3, #0
 8109672:	d017      	beq.n	81096a4 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8109674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109676:	2b00      	cmp	r3, #0
 8109678:	d003      	beq.n	8109682 <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 810967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810967c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8109680:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8109682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8109684:	3358      	adds	r3, #88	; 0x58
 8109686:	4618      	mov	r0, r3
 8109688:	f7ff fd29 	bl	81090de <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 810968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810968e:	2b00      	cmp	r3, #0
 8109690:	d024      	beq.n	81096dc <rpmsg_virtio_ns_callback+0xda>
 8109692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8109696:	2b00      	cmp	r3, #0
 8109698:	d020      	beq.n	81096dc <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 810969a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810969e:	68f8      	ldr	r0, [r7, #12]
 81096a0:	4798      	blx	r3
 81096a2:	e01b      	b.n	81096dc <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 81096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096a6:	2b00      	cmp	r3, #0
 81096a8:	d110      	bne.n	81096cc <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 81096aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81096ac:	3358      	adds	r3, #88	; 0x58
 81096ae:	4618      	mov	r0, r3
 81096b0:	f7ff fd15 	bl	81090de <metal_mutex_release>
			if (rdev->ns_bind_cb)
 81096b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81096b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81096b8:	2b00      	cmp	r3, #0
 81096ba:	d00f      	beq.n	81096dc <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 81096bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81096be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81096c0:	f107 0110 	add.w	r1, r7, #16
 81096c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81096c6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 81096c8:	4798      	blx	r3
 81096ca:	e007      	b.n	81096dc <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 81096cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81096ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81096d0:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 81096d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81096d4:	3358      	adds	r3, #88	; 0x58
 81096d6:	4618      	mov	r0, r3
 81096d8:	f7ff fd01 	bl	81090de <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 81096dc:	2300      	movs	r3, #0
}
 81096de:	4618      	mov	r0, r3
 81096e0:	3748      	adds	r7, #72	; 0x48
 81096e2:	46bd      	mov	sp, r7
 81096e4:	bd80      	pop	{r7, pc}
	...

081096e8 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 81096e8:	b580      	push	{r7, lr}
 81096ea:	b090      	sub	sp, #64	; 0x40
 81096ec:	af02      	add	r7, sp, #8
 81096ee:	60f8      	str	r0, [r7, #12]
 81096f0:	60b9      	str	r1, [r7, #8]
 81096f2:	607a      	str	r2, [r7, #4]
 81096f4:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 81096f6:	68fb      	ldr	r3, [r7, #12]
 81096f8:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 81096fa:	2264      	movs	r2, #100	; 0x64
 81096fc:	2100      	movs	r1, #0
 81096fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8109700:	f000 fe2c 	bl	810a35c <memset>
	metal_mutex_init(&rdev->lock);
 8109704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109706:	3358      	adds	r3, #88	; 0x58
 8109708:	4618      	mov	r0, r3
 810970a:	f7ff fcc7 	bl	810909c <metal_mutex_init>
	rvdev->vdev = vdev;
 810970e:	68fb      	ldr	r3, [r7, #12]
 8109710:	68ba      	ldr	r2, [r7, #8]
 8109712:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8109714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109716:	687a      	ldr	r2, [r7, #4]
 8109718:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 810971a:	68bb      	ldr	r3, [r7, #8]
 810971c:	68fa      	ldr	r2, [r7, #12]
 810971e:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8109720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109722:	4a38      	ldr	r2, [pc, #224]	; (8109804 <rpmsg_init_vdev+0x11c>)
 8109724:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8109726:	68f8      	ldr	r0, [r7, #12]
 8109728:	f7ff fd01 	bl	810912e <rpmsg_virtio_get_role>
 810972c:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 810972e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109730:	2b01      	cmp	r3, #1
 8109732:	d112      	bne.n	810975a <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8109734:	4b34      	ldr	r3, [pc, #208]	; (8109808 <rpmsg_init_vdev+0x120>)
 8109736:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8109738:	4b34      	ldr	r3, [pc, #208]	; (810980c <rpmsg_init_vdev+0x124>)
 810973a:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 810973c:	4b34      	ldr	r3, [pc, #208]	; (8109810 <rpmsg_init_vdev+0x128>)
 810973e:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8109740:	4b34      	ldr	r3, [pc, #208]	; (8109814 <rpmsg_init_vdev+0x12c>)
 8109742:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8109744:	68bb      	ldr	r3, [r7, #8]
 8109746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109748:	3318      	adds	r3, #24
 810974a:	681a      	ldr	r2, [r3, #0]
 810974c:	68fb      	ldr	r3, [r7, #12]
 810974e:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8109750:	68bb      	ldr	r3, [r7, #8]
 8109752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109754:	681a      	ldr	r2, [r3, #0]
 8109756:	68fb      	ldr	r3, [r7, #12]
 8109758:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 810975a:	68fb      	ldr	r3, [r7, #12]
 810975c:	683a      	ldr	r2, [r7, #0]
 810975e:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8109760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8109762:	2b01      	cmp	r3, #1
 8109764:	d102      	bne.n	810976c <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 8109766:	68f8      	ldr	r0, [r7, #12]
 8109768:	f7ff fdec 	bl	8109344 <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 810976c:	f107 0218 	add.w	r2, r7, #24
 8109770:	f107 0310 	add.w	r3, r7, #16
 8109774:	9300      	str	r3, [sp, #0]
 8109776:	4613      	mov	r3, r2
 8109778:	2202      	movs	r2, #2
 810977a:	2100      	movs	r1, #0
 810977c:	68f8      	ldr	r0, [r7, #12]
 810977e:	f7ff fd18 	bl	81091b2 <rpmsg_virtio_create_virtqueues>
 8109782:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8109784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109786:	2b00      	cmp	r3, #0
 8109788:	d001      	beq.n	810978e <rpmsg_init_vdev+0xa6>
		return status;
 810978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810978c:	e035      	b.n	81097fa <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 810978e:	2300      	movs	r3, #0
 8109790:	637b      	str	r3, [r7, #52]	; 0x34
 8109792:	e00f      	b.n	81097b4 <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8109794:	68bb      	ldr	r3, [r7, #8]
 8109796:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8109798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810979a:	4613      	mov	r3, r2
 810979c:	005b      	lsls	r3, r3, #1
 810979e:	4413      	add	r3, r2
 81097a0:	00db      	lsls	r3, r3, #3
 81097a2:	440b      	add	r3, r1
 81097a4:	681b      	ldr	r3, [r3, #0]
 81097a6:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 81097a8:	6a3b      	ldr	r3, [r7, #32]
 81097aa:	683a      	ldr	r2, [r7, #0]
 81097ac:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 81097ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81097b0:	3301      	adds	r3, #1
 81097b2:	637b      	str	r3, [r7, #52]	; 0x34
 81097b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81097b6:	2b01      	cmp	r3, #1
 81097b8:	d9ec      	bls.n	8109794 <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 81097ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81097bc:	4618      	mov	r0, r3
 81097be:	f7ff fbe4 	bl	8108f8a <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 81097c2:	68f8      	ldr	r0, [r7, #12]
 81097c4:	f7ff fce4 	bl	8109190 <rpmsg_virtio_get_features>
 81097c8:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 81097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81097cc:	f003 0301 	and.w	r3, r3, #1
 81097d0:	2b00      	cmp	r3, #0
 81097d2:	d011      	beq.n	81097f8 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 81097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81097d6:	f103 0008 	add.w	r0, r3, #8
 81097da:	2300      	movs	r3, #0
 81097dc:	9301      	str	r3, [sp, #4]
 81097de:	4b0e      	ldr	r3, [pc, #56]	; (8109818 <rpmsg_init_vdev+0x130>)
 81097e0:	9300      	str	r3, [sp, #0]
 81097e2:	2335      	movs	r3, #53	; 0x35
 81097e4:	2235      	movs	r2, #53	; 0x35
 81097e6:	490d      	ldr	r1, [pc, #52]	; (810981c <rpmsg_init_vdev+0x134>)
 81097e8:	f7ff fc84 	bl	81090f4 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 81097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81097ee:	3308      	adds	r3, #8
 81097f0:	4619      	mov	r1, r3
 81097f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 81097f4:	f7ff fae2 	bl	8108dbc <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 81097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 81097fa:	4618      	mov	r0, r3
 81097fc:	3738      	adds	r7, #56	; 0x38
 81097fe:	46bd      	mov	sp, r7
 8109800:	bd80      	pop	{r7, pc}
 8109802:	bf00      	nop
 8109804:	081093b5 	.word	0x081093b5
 8109808:	0810b534 	.word	0x0810b534
 810980c:	0810b53c 	.word	0x0810b53c
 8109810:	08109505 	.word	0x08109505
 8109814:	08109519 	.word	0x08109519
 8109818:	08109603 	.word	0x08109603
 810981c:	0810b544 	.word	0x0810b544

08109820 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 8109820:	b580      	push	{r7, lr}
 8109822:	b086      	sub	sp, #24
 8109824:	af00      	add	r7, sp, #0
 8109826:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 8109828:	687b      	ldr	r3, [r7, #4]
 810982a:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 810982c:	e008      	b.n	8109840 <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 810982e:	697b      	ldr	r3, [r7, #20]
 8109830:	681b      	ldr	r3, [r3, #0]
 8109832:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8109834:	693b      	ldr	r3, [r7, #16]
 8109836:	3b34      	subs	r3, #52	; 0x34
 8109838:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 810983a:	68f8      	ldr	r0, [r7, #12]
 810983c:	f7ff fb50 	bl	8108ee0 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 8109840:	697b      	ldr	r3, [r7, #20]
 8109842:	4618      	mov	r0, r3
 8109844:	f7ff fbb2 	bl	8108fac <metal_list_is_empty>
 8109848:	4603      	mov	r3, r0
 810984a:	2b00      	cmp	r3, #0
 810984c:	d0ef      	beq.n	810982e <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 810984e:	687b      	ldr	r3, [r7, #4]
 8109850:	2200      	movs	r2, #0
 8109852:	669a      	str	r2, [r3, #104]	; 0x68
	rvdev->svq = 0;
 8109854:	687b      	ldr	r3, [r7, #4]
 8109856:	2200      	movs	r2, #0
 8109858:	66da      	str	r2, [r3, #108]	; 0x6c

	metal_mutex_deinit(&rdev->lock);
 810985a:	697b      	ldr	r3, [r7, #20]
 810985c:	3358      	adds	r3, #88	; 0x58
 810985e:	4618      	mov	r0, r3
 8109860:	f7ff fc27 	bl	81090b2 <metal_mutex_deinit>
}
 8109864:	bf00      	nop
 8109866:	3718      	adds	r7, #24
 8109868:	46bd      	mov	sp, r7
 810986a:	bd80      	pop	{r7, pc}

0810986c <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 810986c:	b480      	push	{r7}
 810986e:	b083      	sub	sp, #12
 8109870:	af00      	add	r7, sp, #0
 8109872:	6078      	str	r0, [r7, #4]
 8109874:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8109876:	bf00      	nop
 8109878:	370c      	adds	r7, #12
 810987a:	46bd      	mov	sp, r7
 810987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109880:	4770      	bx	lr

08109882 <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8109882:	b480      	push	{r7}
 8109884:	b083      	sub	sp, #12
 8109886:	af00      	add	r7, sp, #0
 8109888:	6078      	str	r0, [r7, #4]
 810988a:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 810988c:	bf00      	nop
 810988e:	370c      	adds	r7, #12
 8109890:	46bd      	mov	sp, r7
 8109892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109896:	4770      	bx	lr

08109898 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8109898:	b480      	push	{r7}
 810989a:	b085      	sub	sp, #20
 810989c:	af00      	add	r7, sp, #0
 810989e:	60f8      	str	r0, [r7, #12]
 81098a0:	60b9      	str	r1, [r7, #8]
 81098a2:	607a      	str	r2, [r7, #4]
 81098a4:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 81098a6:	68fb      	ldr	r3, [r7, #12]
}
 81098a8:	4618      	mov	r0, r3
 81098aa:	3714      	adds	r7, #20
 81098ac:	46bd      	mov	sp, r7
 81098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098b2:	4770      	bx	lr

081098b4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 81098b4:	b590      	push	{r4, r7, lr}
 81098b6:	b08f      	sub	sp, #60	; 0x3c
 81098b8:	af04      	add	r7, sp, #16
 81098ba:	60f8      	str	r0, [r7, #12]
 81098bc:	60b9      	str	r1, [r7, #8]
 81098be:	607a      	str	r2, [r7, #4]
 81098c0:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 81098c2:	68fb      	ldr	r3, [r7, #12]
 81098c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81098c6:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 81098c8:	687a      	ldr	r2, [r7, #4]
 81098ca:	6a3b      	ldr	r3, [r7, #32]
 81098cc:	429a      	cmp	r2, r3
 81098ce:	d902      	bls.n	81098d6 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 81098d0:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 81098d4:	e036      	b.n	8109944 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 81098d6:	2300      	movs	r3, #0
 81098d8:	627b      	str	r3, [r7, #36]	; 0x24
 81098da:	e02e      	b.n	810993a <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 81098dc:	68fb      	ldr	r3, [r7, #12]
 81098de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 81098e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81098e2:	4613      	mov	r3, r2
 81098e4:	005b      	lsls	r3, r3, #1
 81098e6:	4413      	add	r3, r2
 81098e8:	00db      	lsls	r3, r3, #3
 81098ea:	440b      	add	r3, r1
 81098ec:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 81098ee:	69fb      	ldr	r3, [r7, #28]
 81098f0:	3304      	adds	r3, #4
 81098f2:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 81098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81098f6:	b298      	uxth	r0, r3
 81098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81098fa:	009b      	lsls	r3, r3, #2
 81098fc:	683a      	ldr	r2, [r7, #0]
 81098fe:	4413      	add	r3, r2
 8109900:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8109902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109904:	009b      	lsls	r3, r3, #2
 8109906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8109908:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 810990a:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 810990c:	68fa      	ldr	r2, [r7, #12]
 810990e:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8109910:	6a12      	ldr	r2, [r2, #32]
 8109912:	69f9      	ldr	r1, [r7, #28]
 8109914:	6809      	ldr	r1, [r1, #0]
 8109916:	9102      	str	r1, [sp, #8]
 8109918:	9201      	str	r2, [sp, #4]
 810991a:	9300      	str	r3, [sp, #0]
 810991c:	69bb      	ldr	r3, [r7, #24]
 810991e:	4622      	mov	r2, r4
 8109920:	4601      	mov	r1, r0
 8109922:	68f8      	ldr	r0, [r7, #12]
 8109924:	f000 f8f6 	bl	8109b14 <virtqueue_create>
 8109928:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 810992a:	697b      	ldr	r3, [r7, #20]
 810992c:	2b00      	cmp	r3, #0
 810992e:	d001      	beq.n	8109934 <virtio_create_virtqueues+0x80>
			return ret;
 8109930:	697b      	ldr	r3, [r7, #20]
 8109932:	e007      	b.n	8109944 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8109934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109936:	3301      	adds	r3, #1
 8109938:	627b      	str	r3, [r7, #36]	; 0x24
 810993a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	429a      	cmp	r2, r3
 8109940:	d3cc      	bcc.n	81098dc <virtio_create_virtqueues+0x28>
	}
	return 0;
 8109942:	2300      	movs	r3, #0
}
 8109944:	4618      	mov	r0, r3
 8109946:	372c      	adds	r7, #44	; 0x2c
 8109948:	46bd      	mov	sp, r7
 810994a:	bd90      	pop	{r4, r7, pc}

0810994c <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 810994c:	b480      	push	{r7}
 810994e:	b085      	sub	sp, #20
 8109950:	af00      	add	r7, sp, #0
 8109952:	60f8      	str	r0, [r7, #12]
 8109954:	60b9      	str	r1, [r7, #8]
 8109956:	607a      	str	r2, [r7, #4]
 8109958:	603b      	str	r3, [r7, #0]
	vr->num = num;
 810995a:	68fb      	ldr	r3, [r7, #12]
 810995c:	68ba      	ldr	r2, [r7, #8]
 810995e:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8109960:	68fb      	ldr	r3, [r7, #12]
 8109962:	687a      	ldr	r2, [r7, #4]
 8109964:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8109966:	68bb      	ldr	r3, [r7, #8]
 8109968:	011b      	lsls	r3, r3, #4
 810996a:	687a      	ldr	r2, [r7, #4]
 810996c:	441a      	add	r2, r3
 810996e:	68fb      	ldr	r3, [r7, #12]
 8109970:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8109972:	68fb      	ldr	r3, [r7, #12]
 8109974:	689a      	ldr	r2, [r3, #8]
 8109976:	68bb      	ldr	r3, [r7, #8]
 8109978:	005b      	lsls	r3, r3, #1
 810997a:	4413      	add	r3, r2
 810997c:	3304      	adds	r3, #4
 810997e:	461a      	mov	r2, r3
 8109980:	683b      	ldr	r3, [r7, #0]
 8109982:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8109984:	1c5a      	adds	r2, r3, #1
 8109986:	683b      	ldr	r3, [r7, #0]
 8109988:	425b      	negs	r3, r3
 810998a:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 810998c:	461a      	mov	r2, r3
 810998e:	68fb      	ldr	r3, [r7, #12]
 8109990:	60da      	str	r2, [r3, #12]
}
 8109992:	bf00      	nop
 8109994:	3714      	adds	r7, #20
 8109996:	46bd      	mov	sp, r7
 8109998:	f85d 7b04 	ldr.w	r7, [sp], #4
 810999c:	4770      	bx	lr

0810999e <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 810999e:	b480      	push	{r7}
 81099a0:	b083      	sub	sp, #12
 81099a2:	af00      	add	r7, sp, #0
 81099a4:	4603      	mov	r3, r0
 81099a6:	80fb      	strh	r3, [r7, #6]
 81099a8:	460b      	mov	r3, r1
 81099aa:	80bb      	strh	r3, [r7, #4]
 81099ac:	4613      	mov	r3, r2
 81099ae:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 81099b0:	88ba      	ldrh	r2, [r7, #4]
 81099b2:	88fb      	ldrh	r3, [r7, #6]
 81099b4:	1ad3      	subs	r3, r2, r3
 81099b6:	b29b      	uxth	r3, r3
 81099b8:	3b01      	subs	r3, #1
 81099ba:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 81099bc:	88b9      	ldrh	r1, [r7, #4]
 81099be:	887b      	ldrh	r3, [r7, #2]
 81099c0:	1acb      	subs	r3, r1, r3
 81099c2:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 81099c4:	429a      	cmp	r2, r3
 81099c6:	bf34      	ite	cc
 81099c8:	2301      	movcc	r3, #1
 81099ca:	2300      	movcs	r3, #0
 81099cc:	b2db      	uxtb	r3, r3
}
 81099ce:	4618      	mov	r0, r3
 81099d0:	370c      	adds	r7, #12
 81099d2:	46bd      	mov	sp, r7
 81099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099d8:	4770      	bx	lr

081099da <metal_io_virt>:
{
 81099da:	b480      	push	{r7}
 81099dc:	b083      	sub	sp, #12
 81099de:	af00      	add	r7, sp, #0
 81099e0:	6078      	str	r0, [r7, #4]
 81099e2:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81099e4:	687b      	ldr	r3, [r7, #4]
 81099e6:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81099e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81099ec:	d009      	beq.n	8109a02 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81099ee:	687b      	ldr	r3, [r7, #4]
 81099f0:	689b      	ldr	r3, [r3, #8]
 81099f2:	683a      	ldr	r2, [r7, #0]
 81099f4:	429a      	cmp	r2, r3
 81099f6:	d804      	bhi.n	8109a02 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	681a      	ldr	r2, [r3, #0]
		: NULL);
 81099fc:	683b      	ldr	r3, [r7, #0]
 81099fe:	4413      	add	r3, r2
 8109a00:	e000      	b.n	8109a04 <metal_io_virt+0x2a>
 8109a02:	2300      	movs	r3, #0
}
 8109a04:	4618      	mov	r0, r3
 8109a06:	370c      	adds	r7, #12
 8109a08:	46bd      	mov	sp, r7
 8109a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a0e:	4770      	bx	lr

08109a10 <metal_io_phys>:
{
 8109a10:	b480      	push	{r7}
 8109a12:	b085      	sub	sp, #20
 8109a14:	af00      	add	r7, sp, #0
 8109a16:	6078      	str	r0, [r7, #4]
 8109a18:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8109a1a:	687b      	ldr	r3, [r7, #4]
 8109a1c:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8109a1e:	2b1f      	cmp	r3, #31
 8109a20:	d805      	bhi.n	8109a2e <metal_io_phys+0x1e>
 8109a22:	687b      	ldr	r3, [r7, #4]
 8109a24:	68db      	ldr	r3, [r3, #12]
 8109a26:	683a      	ldr	r2, [r7, #0]
 8109a28:	fa22 f303 	lsr.w	r3, r2, r3
 8109a2c:	e000      	b.n	8109a30 <metal_io_phys+0x20>
 8109a2e:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8109a30:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8109a32:	687b      	ldr	r3, [r7, #4]
 8109a34:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8109a36:	2b00      	cmp	r3, #0
 8109a38:	d010      	beq.n	8109a5c <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8109a3a:	687b      	ldr	r3, [r7, #4]
 8109a3c:	689b      	ldr	r3, [r3, #8]
 8109a3e:	683a      	ldr	r2, [r7, #0]
 8109a40:	429a      	cmp	r2, r3
 8109a42:	d80b      	bhi.n	8109a5c <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8109a44:	687b      	ldr	r3, [r7, #4]
 8109a46:	685a      	ldr	r2, [r3, #4]
 8109a48:	68fb      	ldr	r3, [r7, #12]
 8109a4a:	009b      	lsls	r3, r3, #2
 8109a4c:	4413      	add	r3, r2
 8109a4e:	681a      	ldr	r2, [r3, #0]
 8109a50:	687b      	ldr	r3, [r7, #4]
 8109a52:	6919      	ldr	r1, [r3, #16]
 8109a54:	683b      	ldr	r3, [r7, #0]
 8109a56:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8109a58:	4413      	add	r3, r2
 8109a5a:	e001      	b.n	8109a60 <metal_io_phys+0x50>
 8109a5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8109a60:	4618      	mov	r0, r3
 8109a62:	3714      	adds	r7, #20
 8109a64:	46bd      	mov	sp, r7
 8109a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a6a:	4770      	bx	lr

08109a6c <metal_io_phys_to_offset>:
{
 8109a6c:	b580      	push	{r7, lr}
 8109a6e:	b084      	sub	sp, #16
 8109a70:	af00      	add	r7, sp, #0
 8109a72:	6078      	str	r0, [r7, #4]
 8109a74:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8109a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8109a7e:	d105      	bne.n	8109a8c <metal_io_phys_to_offset+0x20>
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	685b      	ldr	r3, [r3, #4]
 8109a84:	681b      	ldr	r3, [r3, #0]
 8109a86:	683a      	ldr	r2, [r7, #0]
 8109a88:	1ad3      	subs	r3, r2, r3
 8109a8a:	e003      	b.n	8109a94 <metal_io_phys_to_offset+0x28>
 8109a8c:	687b      	ldr	r3, [r7, #4]
 8109a8e:	691a      	ldr	r2, [r3, #16]
 8109a90:	683b      	ldr	r3, [r7, #0]
 8109a92:	4013      	ands	r3, r2
	unsigned long offset =
 8109a94:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8109a96:	68f9      	ldr	r1, [r7, #12]
 8109a98:	6878      	ldr	r0, [r7, #4]
 8109a9a:	f7ff ffb9 	bl	8109a10 <metal_io_phys>
 8109a9e:	4602      	mov	r2, r0
 8109aa0:	683b      	ldr	r3, [r7, #0]
 8109aa2:	4293      	cmp	r3, r2
 8109aa4:	d101      	bne.n	8109aaa <metal_io_phys_to_offset+0x3e>
			return offset;
 8109aa6:	68fb      	ldr	r3, [r7, #12]
 8109aa8:	e00c      	b.n	8109ac4 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8109aaa:	687b      	ldr	r3, [r7, #4]
 8109aac:	691a      	ldr	r2, [r3, #16]
 8109aae:	68fb      	ldr	r3, [r7, #12]
 8109ab0:	4413      	add	r3, r2
 8109ab2:	3301      	adds	r3, #1
 8109ab4:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8109ab6:	687b      	ldr	r3, [r7, #4]
 8109ab8:	689b      	ldr	r3, [r3, #8]
 8109aba:	68fa      	ldr	r2, [r7, #12]
 8109abc:	429a      	cmp	r2, r3
 8109abe:	d3ea      	bcc.n	8109a96 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 8109ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8109ac4:	4618      	mov	r0, r3
 8109ac6:	3710      	adds	r7, #16
 8109ac8:	46bd      	mov	sp, r7
 8109aca:	bd80      	pop	{r7, pc}

08109acc <metal_io_phys_to_virt>:
{
 8109acc:	b580      	push	{r7, lr}
 8109ace:	b082      	sub	sp, #8
 8109ad0:	af00      	add	r7, sp, #0
 8109ad2:	6078      	str	r0, [r7, #4]
 8109ad4:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8109ad6:	6839      	ldr	r1, [r7, #0]
 8109ad8:	6878      	ldr	r0, [r7, #4]
 8109ada:	f7ff ffc7 	bl	8109a6c <metal_io_phys_to_offset>
 8109ade:	4603      	mov	r3, r0
 8109ae0:	4619      	mov	r1, r3
 8109ae2:	6878      	ldr	r0, [r7, #4]
 8109ae4:	f7ff ff79 	bl	81099da <metal_io_virt>
 8109ae8:	4603      	mov	r3, r0
}
 8109aea:	4618      	mov	r0, r3
 8109aec:	3708      	adds	r7, #8
 8109aee:	46bd      	mov	sp, r7
 8109af0:	bd80      	pop	{r7, pc}

08109af2 <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 8109af2:	b580      	push	{r7, lr}
 8109af4:	b084      	sub	sp, #16
 8109af6:	af00      	add	r7, sp, #0
 8109af8:	6078      	str	r0, [r7, #4]
 8109afa:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8109afc:	687b      	ldr	r3, [r7, #4]
 8109afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8109b00:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 8109b02:	6839      	ldr	r1, [r7, #0]
 8109b04:	68f8      	ldr	r0, [r7, #12]
 8109b06:	f7ff ffe1 	bl	8109acc <metal_io_phys_to_virt>
 8109b0a:	4603      	mov	r3, r0
}
 8109b0c:	4618      	mov	r0, r3
 8109b0e:	3710      	adds	r7, #16
 8109b10:	46bd      	mov	sp, r7
 8109b12:	bd80      	pop	{r7, pc}

08109b14 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8109b14:	b580      	push	{r7, lr}
 8109b16:	b086      	sub	sp, #24
 8109b18:	af00      	add	r7, sp, #0
 8109b1a:	60f8      	str	r0, [r7, #12]
 8109b1c:	607a      	str	r2, [r7, #4]
 8109b1e:	603b      	str	r3, [r7, #0]
 8109b20:	460b      	mov	r3, r1
 8109b22:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8109b24:	2300      	movs	r3, #0
 8109b26:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8109b28:	697b      	ldr	r3, [r7, #20]
 8109b2a:	2b00      	cmp	r3, #0
 8109b2c:	d121      	bne.n	8109b72 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8109b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b30:	68fa      	ldr	r2, [r7, #12]
 8109b32:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8109b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b36:	687a      	ldr	r2, [r7, #4]
 8109b38:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8109b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b3c:	897a      	ldrh	r2, [r7, #10]
 8109b3e:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8109b40:	683b      	ldr	r3, [r7, #0]
 8109b42:	891a      	ldrh	r2, [r3, #8]
 8109b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b46:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 8109b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b4a:	895a      	ldrh	r2, [r3, #10]
 8109b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b4e:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8109b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b52:	6a3a      	ldr	r2, [r7, #32]
 8109b54:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 8109b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8109b5a:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8109b5c:	683b      	ldr	r3, [r7, #0]
 8109b5e:	6819      	ldr	r1, [r3, #0]
 8109b60:	683b      	ldr	r3, [r7, #0]
 8109b62:	685b      	ldr	r3, [r3, #4]
 8109b64:	461a      	mov	r2, r3
 8109b66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109b68:	f000 f8fb 	bl	8109d62 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8109b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8109b6e:	f000 f885 	bl	8109c7c <virtqueue_disable_cb>
	}

	return (status);
 8109b72:	697b      	ldr	r3, [r7, #20]
}
 8109b74:	4618      	mov	r0, r3
 8109b76:	3718      	adds	r7, #24
 8109b78:	46bd      	mov	sp, r7
 8109b7a:	bd80      	pop	{r7, pc}

08109b7c <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 8109b7c:	b580      	push	{r7, lr}
 8109b7e:	b086      	sub	sp, #24
 8109b80:	af00      	add	r7, sp, #0
 8109b82:	60f8      	str	r0, [r7, #12]
 8109b84:	60b9      	str	r1, [r7, #8]
 8109b86:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 8109b88:	2300      	movs	r3, #0
 8109b8a:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 8109b8c:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8109b90:	68fb      	ldr	r3, [r7, #12]
 8109b92:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8109b94:	68fb      	ldr	r3, [r7, #12]
 8109b96:	6a1b      	ldr	r3, [r3, #32]
 8109b98:	885b      	ldrh	r3, [r3, #2]
 8109b9a:	429a      	cmp	r2, r3
 8109b9c:	d101      	bne.n	8109ba2 <virtqueue_get_available_buffer+0x26>
		return NULL;
 8109b9e:	2300      	movs	r3, #0
 8109ba0:	e02e      	b.n	8109c00 <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 8109ba2:	68fb      	ldr	r3, [r7, #12]
 8109ba4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8109ba6:	1c5a      	adds	r2, r3, #1
 8109ba8:	b291      	uxth	r1, r2
 8109baa:	68fa      	ldr	r2, [r7, #12]
 8109bac:	8691      	strh	r1, [r2, #52]	; 0x34
 8109bae:	b21a      	sxth	r2, r3
 8109bb0:	68fb      	ldr	r3, [r7, #12]
 8109bb2:	895b      	ldrh	r3, [r3, #10]
 8109bb4:	3b01      	subs	r3, #1
 8109bb6:	b29b      	uxth	r3, r3
 8109bb8:	b21b      	sxth	r3, r3
 8109bba:	4013      	ands	r3, r2
 8109bbc:	b21b      	sxth	r3, r3
 8109bbe:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 8109bc0:	68fb      	ldr	r3, [r7, #12]
 8109bc2:	6a1a      	ldr	r2, [r3, #32]
 8109bc4:	8afb      	ldrh	r3, [r7, #22]
 8109bc6:	005b      	lsls	r3, r3, #1
 8109bc8:	4413      	add	r3, r2
 8109bca:	889a      	ldrh	r2, [r3, #4]
 8109bcc:	68bb      	ldr	r3, [r7, #8]
 8109bce:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 8109bd0:	68fb      	ldr	r3, [r7, #12]
 8109bd2:	69da      	ldr	r2, [r3, #28]
 8109bd4:	68bb      	ldr	r3, [r7, #8]
 8109bd6:	881b      	ldrh	r3, [r3, #0]
 8109bd8:	011b      	lsls	r3, r3, #4
 8109bda:	4413      	add	r3, r2
 8109bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109be0:	4613      	mov	r3, r2
 8109be2:	4619      	mov	r1, r3
 8109be4:	68f8      	ldr	r0, [r7, #12]
 8109be6:	f7ff ff84 	bl	8109af2 <virtqueue_phys_to_virt>
 8109bea:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8109bec:	68fb      	ldr	r3, [r7, #12]
 8109bee:	69da      	ldr	r2, [r3, #28]
 8109bf0:	68bb      	ldr	r3, [r7, #8]
 8109bf2:	881b      	ldrh	r3, [r3, #0]
 8109bf4:	011b      	lsls	r3, r3, #4
 8109bf6:	4413      	add	r3, r2
 8109bf8:	689a      	ldr	r2, [r3, #8]
 8109bfa:	687b      	ldr	r3, [r7, #4]
 8109bfc:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 8109bfe:	693b      	ldr	r3, [r7, #16]
}
 8109c00:	4618      	mov	r0, r3
 8109c02:	3718      	adds	r7, #24
 8109c04:	46bd      	mov	sp, r7
 8109c06:	bd80      	pop	{r7, pc}

08109c08 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8109c08:	b480      	push	{r7}
 8109c0a:	b087      	sub	sp, #28
 8109c0c:	af00      	add	r7, sp, #0
 8109c0e:	60f8      	str	r0, [r7, #12]
 8109c10:	460b      	mov	r3, r1
 8109c12:	607a      	str	r2, [r7, #4]
 8109c14:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8109c16:	2300      	movs	r3, #0
 8109c18:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8109c1a:	68fb      	ldr	r3, [r7, #12]
 8109c1c:	895b      	ldrh	r3, [r3, #10]
 8109c1e:	897a      	ldrh	r2, [r7, #10]
 8109c20:	429a      	cmp	r2, r3
 8109c22:	d901      	bls.n	8109c28 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8109c24:	4b14      	ldr	r3, [pc, #80]	; (8109c78 <virtqueue_add_consumed_buffer+0x70>)
 8109c26:	e021      	b.n	8109c6c <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8109c28:	68fb      	ldr	r3, [r7, #12]
 8109c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c2c:	885b      	ldrh	r3, [r3, #2]
 8109c2e:	b21a      	sxth	r2, r3
 8109c30:	68fb      	ldr	r3, [r7, #12]
 8109c32:	895b      	ldrh	r3, [r3, #10]
 8109c34:	3b01      	subs	r3, #1
 8109c36:	b29b      	uxth	r3, r3
 8109c38:	b21b      	sxth	r3, r3
 8109c3a:	4013      	ands	r3, r2
 8109c3c:	b21b      	sxth	r3, r3
 8109c3e:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 8109c40:	68fb      	ldr	r3, [r7, #12]
 8109c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109c44:	8a7b      	ldrh	r3, [r7, #18]
 8109c46:	00db      	lsls	r3, r3, #3
 8109c48:	4413      	add	r3, r2
 8109c4a:	3304      	adds	r3, #4
 8109c4c:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 8109c4e:	897a      	ldrh	r2, [r7, #10]
 8109c50:	697b      	ldr	r3, [r7, #20]
 8109c52:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 8109c54:	697b      	ldr	r3, [r7, #20]
 8109c56:	687a      	ldr	r2, [r7, #4]
 8109c58:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 8109c5a:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 8109c5e:	68fb      	ldr	r3, [r7, #12]
 8109c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109c62:	885a      	ldrh	r2, [r3, #2]
 8109c64:	3201      	adds	r2, #1
 8109c66:	b292      	uxth	r2, r2
 8109c68:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 8109c6a:	2300      	movs	r3, #0
}
 8109c6c:	4618      	mov	r0, r3
 8109c6e:	371c      	adds	r7, #28
 8109c70:	46bd      	mov	sp, r7
 8109c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c76:	4770      	bx	lr
 8109c78:	fffff441 	.word	0xfffff441

08109c7c <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 8109c7c:	b480      	push	{r7}
 8109c7e:	b083      	sub	sp, #12
 8109c80:	af00      	add	r7, sp, #0
 8109c82:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8109c84:	687b      	ldr	r3, [r7, #4]
 8109c86:	68db      	ldr	r3, [r3, #12]
 8109c88:	f003 0302 	and.w	r3, r3, #2
 8109c8c:	2b00      	cmp	r3, #0
 8109c8e:	d010      	beq.n	8109cb2 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8109c90:	687b      	ldr	r3, [r7, #4]
 8109c92:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8109c94:	687b      	ldr	r3, [r7, #4]
 8109c96:	895b      	ldrh	r3, [r3, #10]
 8109c98:	1ad3      	subs	r3, r2, r3
 8109c9a:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 8109c9c:	687b      	ldr	r3, [r7, #4]
 8109c9e:	6a1a      	ldr	r2, [r3, #32]
 8109ca0:	687b      	ldr	r3, [r7, #4]
 8109ca2:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8109ca4:	3901      	subs	r1, #1
 8109ca6:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8109ca8:	005b      	lsls	r3, r3, #1
 8109caa:	4413      	add	r3, r2
 8109cac:	460a      	mov	r2, r1
 8109cae:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 8109cb0:	e008      	b.n	8109cc4 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 8109cb2:	687b      	ldr	r3, [r7, #4]
 8109cb4:	6a1b      	ldr	r3, [r3, #32]
 8109cb6:	881a      	ldrh	r2, [r3, #0]
 8109cb8:	687b      	ldr	r3, [r7, #4]
 8109cba:	6a1b      	ldr	r3, [r3, #32]
 8109cbc:	f042 0201 	orr.w	r2, r2, #1
 8109cc0:	b292      	uxth	r2, r2
 8109cc2:	801a      	strh	r2, [r3, #0]
}
 8109cc4:	bf00      	nop
 8109cc6:	370c      	adds	r7, #12
 8109cc8:	46bd      	mov	sp, r7
 8109cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109cce:	4770      	bx	lr

08109cd0 <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 8109cd0:	b580      	push	{r7, lr}
 8109cd2:	b082      	sub	sp, #8
 8109cd4:	af00      	add	r7, sp, #0
 8109cd6:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8109cd8:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8109cdc:	6878      	ldr	r0, [r7, #4]
 8109cde:	f000 f885 	bl	8109dec <vq_ring_must_notify_host>
 8109ce2:	4603      	mov	r3, r0
 8109ce4:	2b00      	cmp	r3, #0
 8109ce6:	d002      	beq.n	8109cee <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8109ce8:	6878      	ldr	r0, [r7, #4]
 8109cea:	f000 f8b5 	bl	8109e58 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 8109cee:	687b      	ldr	r3, [r7, #4]
 8109cf0:	2200      	movs	r2, #0
 8109cf2:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8109cf4:	bf00      	nop
 8109cf6:	3708      	adds	r7, #8
 8109cf8:	46bd      	mov	sp, r7
 8109cfa:	bd80      	pop	{r7, pc}

08109cfc <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8109cfc:	b480      	push	{r7}
 8109cfe:	b085      	sub	sp, #20
 8109d00:	af00      	add	r7, sp, #0
 8109d02:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8109d04:	2300      	movs	r3, #0
 8109d06:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8109d08:	2300      	movs	r3, #0
 8109d0a:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8109d0c:	2300      	movs	r3, #0
 8109d0e:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 8109d10:	687b      	ldr	r3, [r7, #4]
 8109d12:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8109d14:	687b      	ldr	r3, [r7, #4]
 8109d16:	6a1b      	ldr	r3, [r3, #32]
 8109d18:	885b      	ldrh	r3, [r3, #2]
 8109d1a:	429a      	cmp	r2, r3
 8109d1c:	d101      	bne.n	8109d22 <virtqueue_get_desc_size+0x26>
		return 0;
 8109d1e:	2300      	movs	r3, #0
 8109d20:	e019      	b.n	8109d56 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 8109d22:	687b      	ldr	r3, [r7, #4]
 8109d24:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8109d26:	b21a      	sxth	r2, r3
 8109d28:	687b      	ldr	r3, [r7, #4]
 8109d2a:	895b      	ldrh	r3, [r3, #10]
 8109d2c:	3b01      	subs	r3, #1
 8109d2e:	b29b      	uxth	r3, r3
 8109d30:	b21b      	sxth	r3, r3
 8109d32:	4013      	ands	r3, r2
 8109d34:	b21b      	sxth	r3, r3
 8109d36:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8109d38:	687b      	ldr	r3, [r7, #4]
 8109d3a:	6a1a      	ldr	r2, [r3, #32]
 8109d3c:	89fb      	ldrh	r3, [r7, #14]
 8109d3e:	005b      	lsls	r3, r3, #1
 8109d40:	4413      	add	r3, r2
 8109d42:	889b      	ldrh	r3, [r3, #4]
 8109d44:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 8109d46:	687b      	ldr	r3, [r7, #4]
 8109d48:	69da      	ldr	r2, [r3, #28]
 8109d4a:	89bb      	ldrh	r3, [r7, #12]
 8109d4c:	011b      	lsls	r3, r3, #4
 8109d4e:	4413      	add	r3, r2
 8109d50:	689b      	ldr	r3, [r3, #8]
 8109d52:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 8109d54:	68bb      	ldr	r3, [r7, #8]
}
 8109d56:	4618      	mov	r0, r3
 8109d58:	3714      	adds	r7, #20
 8109d5a:	46bd      	mov	sp, r7
 8109d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d60:	4770      	bx	lr

08109d62 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8109d62:	b580      	push	{r7, lr}
 8109d64:	b088      	sub	sp, #32
 8109d66:	af00      	add	r7, sp, #0
 8109d68:	60f8      	str	r0, [r7, #12]
 8109d6a:	60b9      	str	r1, [r7, #8]
 8109d6c:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8109d6e:	68fb      	ldr	r3, [r7, #12]
 8109d70:	895b      	ldrh	r3, [r3, #10]
 8109d72:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8109d74:	68fb      	ldr	r3, [r7, #12]
 8109d76:	3318      	adds	r3, #24
 8109d78:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 8109d7a:	69b9      	ldr	r1, [r7, #24]
 8109d7c:	687b      	ldr	r3, [r7, #4]
 8109d7e:	68ba      	ldr	r2, [r7, #8]
 8109d80:	6978      	ldr	r0, [r7, #20]
 8109d82:	f7ff fde3 	bl	810994c <vring_init>

	for (i = 0; i < size - 1; i++)
 8109d86:	2300      	movs	r3, #0
 8109d88:	61fb      	str	r3, [r7, #28]
 8109d8a:	e00c      	b.n	8109da6 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8109d8c:	69fb      	ldr	r3, [r7, #28]
 8109d8e:	b29a      	uxth	r2, r3
 8109d90:	697b      	ldr	r3, [r7, #20]
 8109d92:	6859      	ldr	r1, [r3, #4]
 8109d94:	69fb      	ldr	r3, [r7, #28]
 8109d96:	011b      	lsls	r3, r3, #4
 8109d98:	440b      	add	r3, r1
 8109d9a:	3201      	adds	r2, #1
 8109d9c:	b292      	uxth	r2, r2
 8109d9e:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8109da0:	69fb      	ldr	r3, [r7, #28]
 8109da2:	3301      	adds	r3, #1
 8109da4:	61fb      	str	r3, [r7, #28]
 8109da6:	69bb      	ldr	r3, [r7, #24]
 8109da8:	3b01      	subs	r3, #1
 8109daa:	69fa      	ldr	r2, [r7, #28]
 8109dac:	429a      	cmp	r2, r3
 8109dae:	dbed      	blt.n	8109d8c <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8109db0:	697b      	ldr	r3, [r7, #20]
 8109db2:	685a      	ldr	r2, [r3, #4]
 8109db4:	69fb      	ldr	r3, [r7, #28]
 8109db6:	011b      	lsls	r3, r3, #4
 8109db8:	4413      	add	r3, r2
 8109dba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8109dbe:	81da      	strh	r2, [r3, #14]
}
 8109dc0:	bf00      	nop
 8109dc2:	3720      	adds	r7, #32
 8109dc4:	46bd      	mov	sp, r7
 8109dc6:	bd80      	pop	{r7, pc}

08109dc8 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8109dc8:	b580      	push	{r7, lr}
 8109dca:	b082      	sub	sp, #8
 8109dcc:	af00      	add	r7, sp, #0
 8109dce:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 8109dd0:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8109dd4:	687b      	ldr	r3, [r7, #4]
 8109dd6:	691b      	ldr	r3, [r3, #16]
 8109dd8:	2b00      	cmp	r3, #0
 8109dda:	d003      	beq.n	8109de4 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8109ddc:	687b      	ldr	r3, [r7, #4]
 8109dde:	691b      	ldr	r3, [r3, #16]
 8109de0:	6878      	ldr	r0, [r7, #4]
 8109de2:	4798      	blx	r3
}
 8109de4:	bf00      	nop
 8109de6:	3708      	adds	r7, #8
 8109de8:	46bd      	mov	sp, r7
 8109dea:	bd80      	pop	{r7, pc}

08109dec <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8109dec:	b580      	push	{r7, lr}
 8109dee:	b084      	sub	sp, #16
 8109df0:	af00      	add	r7, sp, #0
 8109df2:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8109df4:	687b      	ldr	r3, [r7, #4]
 8109df6:	68db      	ldr	r3, [r3, #12]
 8109df8:	f003 0302 	and.w	r3, r3, #2
 8109dfc:	2b00      	cmp	r3, #0
 8109dfe:	d01d      	beq.n	8109e3c <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 8109e00:	687b      	ldr	r3, [r7, #4]
 8109e02:	6a1b      	ldr	r3, [r3, #32]
 8109e04:	885b      	ldrh	r3, [r3, #2]
 8109e06:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8109e08:	687b      	ldr	r3, [r7, #4]
 8109e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8109e0c:	89fa      	ldrh	r2, [r7, #14]
 8109e0e:	1ad3      	subs	r3, r2, r3
 8109e10:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8109e12:	687b      	ldr	r3, [r7, #4]
 8109e14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8109e16:	687b      	ldr	r3, [r7, #4]
 8109e18:	699b      	ldr	r3, [r3, #24]
 8109e1a:	00db      	lsls	r3, r3, #3
 8109e1c:	4413      	add	r3, r2
 8109e1e:	685b      	ldr	r3, [r3, #4]
 8109e20:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8109e22:	89ba      	ldrh	r2, [r7, #12]
 8109e24:	89f9      	ldrh	r1, [r7, #14]
 8109e26:	897b      	ldrh	r3, [r7, #10]
 8109e28:	4618      	mov	r0, r3
 8109e2a:	f7ff fdb8 	bl	810999e <vring_need_event>
 8109e2e:	4603      	mov	r3, r0
 8109e30:	2b00      	cmp	r3, #0
 8109e32:	bf14      	ite	ne
 8109e34:	2301      	movne	r3, #1
 8109e36:	2300      	moveq	r3, #0
 8109e38:	b2db      	uxtb	r3, r3
 8109e3a:	e009      	b.n	8109e50 <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109e40:	881b      	ldrh	r3, [r3, #0]
 8109e42:	f003 0301 	and.w	r3, r3, #1
 8109e46:	2b00      	cmp	r3, #0
 8109e48:	bf0c      	ite	eq
 8109e4a:	2301      	moveq	r3, #1
 8109e4c:	2300      	movne	r3, #0
 8109e4e:	b2db      	uxtb	r3, r3
}
 8109e50:	4618      	mov	r0, r3
 8109e52:	3710      	adds	r7, #16
 8109e54:	46bd      	mov	sp, r7
 8109e56:	bd80      	pop	{r7, pc}

08109e58 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8109e58:	b580      	push	{r7, lr}
 8109e5a:	b082      	sub	sp, #8
 8109e5c:	af00      	add	r7, sp, #0
 8109e5e:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 8109e60:	687b      	ldr	r3, [r7, #4]
 8109e62:	695b      	ldr	r3, [r3, #20]
 8109e64:	2b00      	cmp	r3, #0
 8109e66:	d003      	beq.n	8109e70 <vq_ring_notify_host+0x18>
		vq->notify(vq);
 8109e68:	687b      	ldr	r3, [r7, #4]
 8109e6a:	695b      	ldr	r3, [r3, #20]
 8109e6c:	6878      	ldr	r0, [r7, #4]
 8109e6e:	4798      	blx	r3
}
 8109e70:	bf00      	nop
 8109e72:	3708      	adds	r7, #8
 8109e74:	46bd      	mov	sp, r7
 8109e76:	bd80      	pop	{r7, pc}

08109e78 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8109e78:	b580      	push	{r7, lr}
 8109e7a:	b082      	sub	sp, #8
 8109e7c:	af00      	add	r7, sp, #0
 8109e7e:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 8109e80:	4b04      	ldr	r3, [pc, #16]	; (8109e94 <HAL_HSEM_FreeCallback+0x1c>)
 8109e82:	2201      	movs	r2, #1
 8109e84:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8109e86:	2001      	movs	r0, #1
 8109e88:	f7f9 f958 	bl	810313c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 8109e8c:	bf00      	nop
 8109e8e:	3708      	adds	r7, #8
 8109e90:	46bd      	mov	sp, r7
 8109e92:	bd80      	pop	{r7, pc}
 8109e94:	10000508 	.word	0x10000508

08109e98 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 8109e98:	b580      	push	{r7, lr}
 8109e9a:	b082      	sub	sp, #8
 8109e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8109e9e:	4b0b      	ldr	r3, [pc, #44]	; (8109ecc <MAILBOX_Init+0x34>)
 8109ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8109ea4:	4a09      	ldr	r2, [pc, #36]	; (8109ecc <MAILBOX_Init+0x34>)
 8109ea6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8109eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8109eae:	4b07      	ldr	r3, [pc, #28]	; (8109ecc <MAILBOX_Init+0x34>)
 8109eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8109eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109eb8:	607b      	str	r3, [r7, #4]
 8109eba:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8109ebc:	2001      	movs	r0, #1
 8109ebe:	f7f9 f93d 	bl	810313c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8109ec2:	2300      	movs	r3, #0
}
 8109ec4:	4618      	mov	r0, r3
 8109ec6:	3708      	adds	r7, #8
 8109ec8:	46bd      	mov	sp, r7
 8109eca:	bd80      	pop	{r7, pc}
 8109ecc:	58024400 	.word	0x58024400

08109ed0 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8109ed0:	b580      	push	{r7, lr}
 8109ed2:	b082      	sub	sp, #8
 8109ed4:	af00      	add	r7, sp, #0
 8109ed6:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8109ed8:	4b09      	ldr	r3, [pc, #36]	; (8109f00 <MAILBOX_Poll+0x30>)
 8109eda:	681b      	ldr	r3, [r3, #0]
 8109edc:	2b01      	cmp	r3, #1
 8109ede:	d108      	bne.n	8109ef2 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 8109ee0:	2101      	movs	r1, #1
 8109ee2:	6878      	ldr	r0, [r7, #4]
 8109ee4:	f7fe fcb5 	bl	8108852 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8109ee8:	4b05      	ldr	r3, [pc, #20]	; (8109f00 <MAILBOX_Poll+0x30>)
 8109eea:	2200      	movs	r2, #0
 8109eec:	601a      	str	r2, [r3, #0]
    return 0;
 8109eee:	2300      	movs	r3, #0
 8109ef0:	e001      	b.n	8109ef6 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8109ef2:	f06f 030a 	mvn.w	r3, #10
}
 8109ef6:	4618      	mov	r0, r3
 8109ef8:	3708      	adds	r7, #8
 8109efa:	46bd      	mov	sp, r7
 8109efc:	bd80      	pop	{r7, pc}
 8109efe:	bf00      	nop
 8109f00:	10000508 	.word	0x10000508

08109f04 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8109f04:	b580      	push	{r7, lr}
 8109f06:	b082      	sub	sp, #8
 8109f08:	af00      	add	r7, sp, #0
 8109f0a:	6078      	str	r0, [r7, #4]
 8109f0c:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 8109f0e:	2001      	movs	r0, #1
 8109f10:	f7f9 f8e6 	bl	81030e0 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8109f14:	2100      	movs	r1, #0
 8109f16:	2001      	movs	r0, #1
 8109f18:	f7f9 f8fc 	bl	8103114 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8109f1c:	2300      	movs	r3, #0
}
 8109f1e:	4618      	mov	r0, r3
 8109f20:	3708      	adds	r7, #8
 8109f22:	46bd      	mov	sp, r7
 8109f24:	bd80      	pop	{r7, pc}

08109f26 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8109f26:	b480      	push	{r7}
 8109f28:	b083      	sub	sp, #12
 8109f2a:	af00      	add	r7, sp, #0
 8109f2c:	6078      	str	r0, [r7, #4]
 8109f2e:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8109f30:	687b      	ldr	r3, [r7, #4]
 8109f32:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8109f34:	683a      	ldr	r2, [r7, #0]
 8109f36:	429a      	cmp	r2, r3
 8109f38:	d209      	bcs.n	8109f4e <metal_device_io_region+0x28>
 8109f3a:	683a      	ldr	r2, [r7, #0]
 8109f3c:	4613      	mov	r3, r2
 8109f3e:	005b      	lsls	r3, r3, #1
 8109f40:	4413      	add	r3, r2
 8109f42:	011b      	lsls	r3, r3, #4
 8109f44:	3308      	adds	r3, #8
 8109f46:	687a      	ldr	r2, [r7, #4]
 8109f48:	4413      	add	r3, r2
 8109f4a:	3304      	adds	r3, #4
 8109f4c:	e000      	b.n	8109f50 <metal_device_io_region+0x2a>
 8109f4e:	2300      	movs	r3, #0
}
 8109f50:	4618      	mov	r0, r3
 8109f52:	370c      	adds	r7, #12
 8109f54:	46bd      	mov	sp, r7
 8109f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109f5a:	4770      	bx	lr

08109f5c <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8109f5c:	b590      	push	{r4, r7, lr}
 8109f5e:	b08d      	sub	sp, #52	; 0x34
 8109f60:	af04      	add	r7, sp, #16
 8109f62:	6078      	str	r0, [r7, #4]
  int status = 0;
 8109f64:	2300      	movs	r3, #0
 8109f66:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8109f68:	2300      	movs	r3, #0
 8109f6a:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8109f6c:	4a41      	ldr	r2, [pc, #260]	; (810a074 <OPENAMP_shmem_init+0x118>)
 8109f6e:	f107 0310 	add.w	r3, r7, #16
 8109f72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8109f76:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8109f7a:	2300      	movs	r3, #0
 8109f7c:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8109f7e:	2300      	movs	r3, #0
 8109f80:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8109f82:	f107 0310 	add.w	r3, r7, #16
 8109f86:	4618      	mov	r0, r3
 8109f88:	f7fe f868 	bl	810805c <metal_init>

  status = metal_register_generic_device(&shm_device);
 8109f8c:	483a      	ldr	r0, [pc, #232]	; (810a078 <OPENAMP_shmem_init+0x11c>)
 8109f8e:	f7fd ff03 	bl	8107d98 <metal_register_generic_device>
 8109f92:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8109f94:	69fb      	ldr	r3, [r7, #28]
 8109f96:	2b00      	cmp	r3, #0
 8109f98:	d001      	beq.n	8109f9e <OPENAMP_shmem_init+0x42>
    return status;
 8109f9a:	69fb      	ldr	r3, [r7, #28]
 8109f9c:	e066      	b.n	810a06c <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8109f9e:	f107 0318 	add.w	r3, r7, #24
 8109fa2:	461a      	mov	r2, r3
 8109fa4:	4935      	ldr	r1, [pc, #212]	; (810a07c <OPENAMP_shmem_init+0x120>)
 8109fa6:	4836      	ldr	r0, [pc, #216]	; (810a080 <OPENAMP_shmem_init+0x124>)
 8109fa8:	f7fd feb8 	bl	8107d1c <metal_device_open>
 8109fac:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8109fae:	69fb      	ldr	r3, [r7, #28]
 8109fb0:	2b00      	cmp	r3, #0
 8109fb2:	d001      	beq.n	8109fb8 <OPENAMP_shmem_init+0x5c>
    return status;
 8109fb4:	69fb      	ldr	r3, [r7, #28]
 8109fb6:	e059      	b.n	810a06c <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8109fb8:	4a32      	ldr	r2, [pc, #200]	; (810a084 <OPENAMP_shmem_init+0x128>)
 8109fba:	4b33      	ldr	r3, [pc, #204]	; (810a088 <OPENAMP_shmem_init+0x12c>)
 8109fbc:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8109fbe:	69bb      	ldr	r3, [r7, #24]
 8109fc0:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8109fc4:	4a31      	ldr	r2, [pc, #196]	; (810a08c <OPENAMP_shmem_init+0x130>)
 8109fc6:	4b2f      	ldr	r3, [pc, #188]	; (810a084 <OPENAMP_shmem_init+0x128>)
 8109fc8:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8109fca:	461a      	mov	r2, r3
 8109fcc:	2300      	movs	r3, #0
 8109fce:	9302      	str	r3, [sp, #8]
 8109fd0:	2300      	movs	r3, #0
 8109fd2:	9301      	str	r3, [sp, #4]
 8109fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8109fd8:	9300      	str	r3, [sp, #0]
 8109fda:	4613      	mov	r3, r2
 8109fdc:	4a2a      	ldr	r2, [pc, #168]	; (810a088 <OPENAMP_shmem_init+0x12c>)
 8109fde:	4929      	ldr	r1, [pc, #164]	; (810a084 <OPENAMP_shmem_init+0x128>)
 8109fe0:	f7fe f897 	bl	8108112 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8109fe4:	69bb      	ldr	r3, [r7, #24]
 8109fe6:	2100      	movs	r1, #0
 8109fe8:	4618      	mov	r0, r3
 8109fea:	f7ff ff9c 	bl	8109f26 <metal_device_io_region>
 8109fee:	4603      	mov	r3, r0
 8109ff0:	4a27      	ldr	r2, [pc, #156]	; (810a090 <OPENAMP_shmem_init+0x134>)
 8109ff2:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8109ff4:	4b26      	ldr	r3, [pc, #152]	; (810a090 <OPENAMP_shmem_init+0x134>)
 8109ff6:	681b      	ldr	r3, [r3, #0]
 8109ff8:	2b00      	cmp	r3, #0
 8109ffa:	d102      	bne.n	810a002 <OPENAMP_shmem_init+0xa6>
    return -1;
 8109ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a000:	e034      	b.n	810a06c <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 810a002:	f107 0208 	add.w	r2, r7, #8
 810a006:	f107 030c 	add.w	r3, r7, #12
 810a00a:	4619      	mov	r1, r3
 810a00c:	6878      	ldr	r0, [r7, #4]
 810a00e:	f000 f911 	bl	810a234 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 810a012:	68fb      	ldr	r3, [r7, #12]
 810a014:	4a1f      	ldr	r2, [pc, #124]	; (810a094 <OPENAMP_shmem_init+0x138>)
 810a016:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 810a018:	4b1e      	ldr	r3, [pc, #120]	; (810a094 <OPENAMP_shmem_init+0x138>)
 810a01a:	681b      	ldr	r3, [r3, #0]
 810a01c:	2b00      	cmp	r3, #0
 810a01e:	d102      	bne.n	810a026 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 810a020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a024:	e022      	b.n	810a06c <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 810a026:	69bb      	ldr	r3, [r7, #24]
 810a028:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 810a02c:	4b19      	ldr	r3, [pc, #100]	; (810a094 <OPENAMP_shmem_init+0x138>)
 810a02e:	6819      	ldr	r1, [r3, #0]
 810a030:	4b18      	ldr	r3, [pc, #96]	; (810a094 <OPENAMP_shmem_init+0x138>)
 810a032:	681a      	ldr	r2, [r3, #0]
 810a034:	68bb      	ldr	r3, [r7, #8]
 810a036:	461c      	mov	r4, r3
 810a038:	2300      	movs	r3, #0
 810a03a:	9302      	str	r3, [sp, #8]
 810a03c:	2300      	movs	r3, #0
 810a03e:	9301      	str	r3, [sp, #4]
 810a040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a044:	9300      	str	r3, [sp, #0]
 810a046:	4623      	mov	r3, r4
 810a048:	f7fe f863 	bl	8108112 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 810a04c:	69bb      	ldr	r3, [r7, #24]
 810a04e:	2101      	movs	r1, #1
 810a050:	4618      	mov	r0, r3
 810a052:	f7ff ff68 	bl	8109f26 <metal_device_io_region>
 810a056:	4603      	mov	r3, r0
 810a058:	4a0f      	ldr	r2, [pc, #60]	; (810a098 <OPENAMP_shmem_init+0x13c>)
 810a05a:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 810a05c:	4b0e      	ldr	r3, [pc, #56]	; (810a098 <OPENAMP_shmem_init+0x13c>)
 810a05e:	681b      	ldr	r3, [r3, #0]
 810a060:	2b00      	cmp	r3, #0
 810a062:	d102      	bne.n	810a06a <OPENAMP_shmem_init+0x10e>
    return -1;
 810a064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a068:	e000      	b.n	810a06c <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 810a06a:	2300      	movs	r3, #0
}
 810a06c:	4618      	mov	r0, r3
 810a06e:	3724      	adds	r7, #36	; 0x24
 810a070:	46bd      	mov	sp, r7
 810a072:	bd90      	pop	{r4, r7, pc}
 810a074:	0810b55c 	.word	0x0810b55c
 810a078:	1000003c 	.word	0x1000003c
 810a07c:	0810b548 	.word	0x0810b548
 810a080:	0810b554 	.word	0x0810b554
 810a084:	38000400 	.word	0x38000400
 810a088:	1000059c 	.word	0x1000059c
 810a08c:	38010000 	.word	0x38010000
 810a090:	1000050c 	.word	0x1000050c
 810a094:	10000514 	.word	0x10000514
 810a098:	10000510 	.word	0x10000510

0810a09c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 810a09c:	b590      	push	{r4, r7, lr}
 810a09e:	b08b      	sub	sp, #44	; 0x2c
 810a0a0:	af04      	add	r7, sp, #16
 810a0a2:	6078      	str	r0, [r7, #4]
 810a0a4:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 810a0a6:	2300      	movs	r3, #0
 810a0a8:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 810a0aa:	2300      	movs	r3, #0
 810a0ac:	613b      	str	r3, [r7, #16]
  int status = 0;
 810a0ae:	2300      	movs	r3, #0
 810a0b0:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810a0b2:	f7ff fef1 	bl	8109e98 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 810a0b6:	6878      	ldr	r0, [r7, #4]
 810a0b8:	f7ff ff50 	bl	8109f5c <OPENAMP_shmem_init>
 810a0bc:	60f8      	str	r0, [r7, #12]
  if(status)
 810a0be:	68fb      	ldr	r3, [r7, #12]
 810a0c0:	2b00      	cmp	r3, #0
 810a0c2:	d001      	beq.n	810a0c8 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 810a0c4:	68fb      	ldr	r3, [r7, #12]
 810a0c6:	e06a      	b.n	810a19e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 810a0c8:	6878      	ldr	r0, [r7, #4]
 810a0ca:	4b37      	ldr	r3, [pc, #220]	; (810a1a8 <MX_OPENAMP_Init+0x10c>)
 810a0cc:	681b      	ldr	r3, [r3, #0]
 810a0ce:	f103 0218 	add.w	r2, r3, #24
 810a0d2:	4b36      	ldr	r3, [pc, #216]	; (810a1ac <MX_OPENAMP_Init+0x110>)
 810a0d4:	681b      	ldr	r3, [r3, #0]
 810a0d6:	2100      	movs	r1, #0
 810a0d8:	9102      	str	r1, [sp, #8]
 810a0da:	4935      	ldr	r1, [pc, #212]	; (810a1b0 <MX_OPENAMP_Init+0x114>)
 810a0dc:	9101      	str	r1, [sp, #4]
 810a0de:	2100      	movs	r1, #0
 810a0e0:	9100      	str	r1, [sp, #0]
 810a0e2:	21ff      	movs	r1, #255	; 0xff
 810a0e4:	f7fe fad6 	bl	8108694 <rproc_virtio_create_vdev>
 810a0e8:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 810a0ea:	693b      	ldr	r3, [r7, #16]
 810a0ec:	2b00      	cmp	r3, #0
 810a0ee:	d102      	bne.n	810a0f6 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 810a0f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a0f4:	e053      	b.n	810a19e <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 810a0f6:	6938      	ldr	r0, [r7, #16]
 810a0f8:	f7fe fbe7 	bl	81088ca <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 810a0fc:	4b2a      	ldr	r3, [pc, #168]	; (810a1a8 <MX_OPENAMP_Init+0x10c>)
 810a0fe:	681b      	ldr	r3, [r3, #0]
 810a100:	3334      	adds	r3, #52	; 0x34
 810a102:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810a104:	697b      	ldr	r3, [r7, #20]
 810a106:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810a108:	697b      	ldr	r3, [r7, #20]
 810a10a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810a10c:	461c      	mov	r4, r3
 810a10e:	4b29      	ldr	r3, [pc, #164]	; (810a1b4 <MX_OPENAMP_Init+0x118>)
 810a110:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810a112:	697a      	ldr	r2, [r7, #20]
 810a114:	6892      	ldr	r2, [r2, #8]
 810a116:	6979      	ldr	r1, [r7, #20]
 810a118:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 810a11a:	9102      	str	r1, [sp, #8]
 810a11c:	9201      	str	r2, [sp, #4]
 810a11e:	9300      	str	r3, [sp, #0]
 810a120:	4623      	mov	r3, r4
 810a122:	4602      	mov	r2, r0
 810a124:	2100      	movs	r1, #0
 810a126:	6938      	ldr	r0, [r7, #16]
 810a128:	f7fe fb62 	bl	81087f0 <rproc_virtio_init_vring>
 810a12c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810a12e:	68fb      	ldr	r3, [r7, #12]
 810a130:	2b00      	cmp	r3, #0
 810a132:	d001      	beq.n	810a138 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 810a134:	68fb      	ldr	r3, [r7, #12]
 810a136:	e032      	b.n	810a19e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 810a138:	4b1b      	ldr	r3, [pc, #108]	; (810a1a8 <MX_OPENAMP_Init+0x10c>)
 810a13a:	681b      	ldr	r3, [r3, #0]
 810a13c:	3348      	adds	r3, #72	; 0x48
 810a13e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810a140:	697b      	ldr	r3, [r7, #20]
 810a142:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 810a144:	697b      	ldr	r3, [r7, #20]
 810a146:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810a148:	461c      	mov	r4, r3
 810a14a:	4b1a      	ldr	r3, [pc, #104]	; (810a1b4 <MX_OPENAMP_Init+0x118>)
 810a14c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810a14e:	697a      	ldr	r2, [r7, #20]
 810a150:	6892      	ldr	r2, [r2, #8]
 810a152:	6979      	ldr	r1, [r7, #20]
 810a154:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810a156:	9102      	str	r1, [sp, #8]
 810a158:	9201      	str	r2, [sp, #4]
 810a15a:	9300      	str	r3, [sp, #0]
 810a15c:	4623      	mov	r3, r4
 810a15e:	4602      	mov	r2, r0
 810a160:	2101      	movs	r1, #1
 810a162:	6938      	ldr	r0, [r7, #16]
 810a164:	f7fe fb44 	bl	81087f0 <rproc_virtio_init_vring>
 810a168:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810a16a:	68fb      	ldr	r3, [r7, #12]
 810a16c:	2b00      	cmp	r3, #0
 810a16e:	d001      	beq.n	810a174 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 810a170:	68fb      	ldr	r3, [r7, #12]
 810a172:	e014      	b.n	810a19e <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810a174:	4b10      	ldr	r3, [pc, #64]	; (810a1b8 <MX_OPENAMP_Init+0x11c>)
 810a176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 810a17a:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 810a17c:	4a0f      	ldr	r2, [pc, #60]	; (810a1bc <MX_OPENAMP_Init+0x120>)
 810a17e:	4b0e      	ldr	r3, [pc, #56]	; (810a1b8 <MX_OPENAMP_Init+0x11c>)
 810a180:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 810a182:	461a      	mov	r2, r3
 810a184:	480e      	ldr	r0, [pc, #56]	; (810a1c0 <MX_OPENAMP_Init+0x124>)
 810a186:	f7ff f83a 	bl	81091fe <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 810a18a:	4b0a      	ldr	r3, [pc, #40]	; (810a1b4 <MX_OPENAMP_Init+0x118>)
 810a18c:	681b      	ldr	r3, [r3, #0]
 810a18e:	4a0c      	ldr	r2, [pc, #48]	; (810a1c0 <MX_OPENAMP_Init+0x124>)
 810a190:	9200      	str	r2, [sp, #0]
 810a192:	683a      	ldr	r2, [r7, #0]
 810a194:	6939      	ldr	r1, [r7, #16]
 810a196:	480b      	ldr	r0, [pc, #44]	; (810a1c4 <MX_OPENAMP_Init+0x128>)
 810a198:	f7ff faa6 	bl	81096e8 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 810a19c:	2300      	movs	r3, #0
}
 810a19e:	4618      	mov	r0, r3
 810a1a0:	371c      	adds	r7, #28
 810a1a2:	46bd      	mov	sp, r7
 810a1a4:	bd90      	pop	{r4, r7, pc}
 810a1a6:	bf00      	nop
 810a1a8:	10000514 	.word	0x10000514
 810a1ac:	10000510 	.word	0x10000510
 810a1b0:	08109f05 	.word	0x08109f05
 810a1b4:	1000050c 	.word	0x1000050c
 810a1b8:	38000400 	.word	0x38000400
 810a1bc:	38010000 	.word	0x38010000
 810a1c0:	10000518 	.word	0x10000518
 810a1c4:	10000524 	.word	0x10000524

0810a1c8 <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 810a1c8:	b580      	push	{r7, lr}
 810a1ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 810a1cc:	4803      	ldr	r0, [pc, #12]	; (810a1dc <OPENAMP_DeInit+0x14>)
 810a1ce:	f7ff fb27 	bl	8109820 <rpmsg_deinit_vdev>

  metal_finish();
 810a1d2:	f7fd ff75 	bl	81080c0 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 810a1d6:	bf00      	nop
 810a1d8:	bd80      	pop	{r7, pc}
 810a1da:	bf00      	nop
 810a1dc:	10000524 	.word	0x10000524

0810a1e0 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 810a1e0:	b580      	push	{r7, lr}
 810a1e2:	b08a      	sub	sp, #40	; 0x28
 810a1e4:	af04      	add	r7, sp, #16
 810a1e6:	60f8      	str	r0, [r7, #12]
 810a1e8:	60b9      	str	r1, [r7, #8]
 810a1ea:	607a      	str	r2, [r7, #4]
 810a1ec:	603b      	str	r3, [r7, #0]
  int ret = 0;
 810a1ee:	2300      	movs	r3, #0
 810a1f0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 810a1f2:	6a3b      	ldr	r3, [r7, #32]
 810a1f4:	9302      	str	r3, [sp, #8]
 810a1f6:	683b      	ldr	r3, [r7, #0]
 810a1f8:	9301      	str	r3, [sp, #4]
 810a1fa:	687b      	ldr	r3, [r7, #4]
 810a1fc:	9300      	str	r3, [sp, #0]
 810a1fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810a202:	68ba      	ldr	r2, [r7, #8]
 810a204:	4904      	ldr	r1, [pc, #16]	; (810a218 <OPENAMP_create_endpoint+0x38>)
 810a206:	68f8      	ldr	r0, [r7, #12]
 810a208:	f7fe fdec 	bl	8108de4 <rpmsg_create_ept>
 810a20c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 810a20e:	697b      	ldr	r3, [r7, #20]
}
 810a210:	4618      	mov	r0, r3
 810a212:	3718      	adds	r7, #24
 810a214:	46bd      	mov	sp, r7
 810a216:	bd80      	pop	{r7, pc}
 810a218:	10000524 	.word	0x10000524

0810a21c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 810a21c:	b580      	push	{r7, lr}
 810a21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 810a220:	4b03      	ldr	r3, [pc, #12]	; (810a230 <OPENAMP_check_for_message+0x14>)
 810a222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a224:	4618      	mov	r0, r3
 810a226:	f7ff fe53 	bl	8109ed0 <MAILBOX_Poll>
}
 810a22a:	bf00      	nop
 810a22c:	bd80      	pop	{r7, pc}
 810a22e:	bf00      	nop
 810a230:	10000524 	.word	0x10000524

0810a234 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 810a234:	b480      	push	{r7}
 810a236:	b085      	sub	sp, #20
 810a238:	af00      	add	r7, sp, #0
 810a23a:	60f8      	str	r0, [r7, #12]
 810a23c:	60b9      	str	r1, [r7, #8]
 810a23e:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 810a240:	bf00      	nop
 810a242:	4b08      	ldr	r3, [pc, #32]	; (810a264 <resource_table_init+0x30>)
 810a244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810a246:	4a08      	ldr	r2, [pc, #32]	; (810a268 <resource_table_init+0x34>)
 810a248:	4293      	cmp	r3, r2
 810a24a:	d1fa      	bne.n	810a242 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 810a24c:	687b      	ldr	r3, [r7, #4]
 810a24e:	228c      	movs	r2, #140	; 0x8c
 810a250:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 810a252:	68bb      	ldr	r3, [r7, #8]
 810a254:	4a03      	ldr	r2, [pc, #12]	; (810a264 <resource_table_init+0x30>)
 810a256:	601a      	str	r2, [r3, #0]
}
 810a258:	bf00      	nop
 810a25a:	3714      	adds	r7, #20
 810a25c:	46bd      	mov	sp, r7
 810a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a262:	4770      	bx	lr
 810a264:	38000000 	.word	0x38000000
 810a268:	38000400 	.word	0x38000400

0810a26c <__assert_func>:
 810a26c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810a26e:	4614      	mov	r4, r2
 810a270:	461a      	mov	r2, r3
 810a272:	4b09      	ldr	r3, [pc, #36]	; (810a298 <__assert_func+0x2c>)
 810a274:	681b      	ldr	r3, [r3, #0]
 810a276:	4605      	mov	r5, r0
 810a278:	68d8      	ldr	r0, [r3, #12]
 810a27a:	b14c      	cbz	r4, 810a290 <__assert_func+0x24>
 810a27c:	4b07      	ldr	r3, [pc, #28]	; (810a29c <__assert_func+0x30>)
 810a27e:	9100      	str	r1, [sp, #0]
 810a280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810a284:	4906      	ldr	r1, [pc, #24]	; (810a2a0 <__assert_func+0x34>)
 810a286:	462b      	mov	r3, r5
 810a288:	f000 f814 	bl	810a2b4 <fiprintf>
 810a28c:	f000 fd34 	bl	810acf8 <abort>
 810a290:	4b04      	ldr	r3, [pc, #16]	; (810a2a4 <__assert_func+0x38>)
 810a292:	461c      	mov	r4, r3
 810a294:	e7f3      	b.n	810a27e <__assert_func+0x12>
 810a296:	bf00      	nop
 810a298:	100000b8 	.word	0x100000b8
 810a29c:	0810b5ca 	.word	0x0810b5ca
 810a2a0:	0810b5d7 	.word	0x0810b5d7
 810a2a4:	0810b605 	.word	0x0810b605

0810a2a8 <__errno>:
 810a2a8:	4b01      	ldr	r3, [pc, #4]	; (810a2b0 <__errno+0x8>)
 810a2aa:	6818      	ldr	r0, [r3, #0]
 810a2ac:	4770      	bx	lr
 810a2ae:	bf00      	nop
 810a2b0:	100000b8 	.word	0x100000b8

0810a2b4 <fiprintf>:
 810a2b4:	b40e      	push	{r1, r2, r3}
 810a2b6:	b503      	push	{r0, r1, lr}
 810a2b8:	4601      	mov	r1, r0
 810a2ba:	ab03      	add	r3, sp, #12
 810a2bc:	4805      	ldr	r0, [pc, #20]	; (810a2d4 <fiprintf+0x20>)
 810a2be:	f853 2b04 	ldr.w	r2, [r3], #4
 810a2c2:	6800      	ldr	r0, [r0, #0]
 810a2c4:	9301      	str	r3, [sp, #4]
 810a2c6:	f000 f95b 	bl	810a580 <_vfiprintf_r>
 810a2ca:	b002      	add	sp, #8
 810a2cc:	f85d eb04 	ldr.w	lr, [sp], #4
 810a2d0:	b003      	add	sp, #12
 810a2d2:	4770      	bx	lr
 810a2d4:	100000b8 	.word	0x100000b8

0810a2d8 <__libc_init_array>:
 810a2d8:	b570      	push	{r4, r5, r6, lr}
 810a2da:	4d0d      	ldr	r5, [pc, #52]	; (810a310 <__libc_init_array+0x38>)
 810a2dc:	4c0d      	ldr	r4, [pc, #52]	; (810a314 <__libc_init_array+0x3c>)
 810a2de:	1b64      	subs	r4, r4, r5
 810a2e0:	10a4      	asrs	r4, r4, #2
 810a2e2:	2600      	movs	r6, #0
 810a2e4:	42a6      	cmp	r6, r4
 810a2e6:	d109      	bne.n	810a2fc <__libc_init_array+0x24>
 810a2e8:	4d0b      	ldr	r5, [pc, #44]	; (810a318 <__libc_init_array+0x40>)
 810a2ea:	4c0c      	ldr	r4, [pc, #48]	; (810a31c <__libc_init_array+0x44>)
 810a2ec:	f001 f828 	bl	810b340 <_init>
 810a2f0:	1b64      	subs	r4, r4, r5
 810a2f2:	10a4      	asrs	r4, r4, #2
 810a2f4:	2600      	movs	r6, #0
 810a2f6:	42a6      	cmp	r6, r4
 810a2f8:	d105      	bne.n	810a306 <__libc_init_array+0x2e>
 810a2fa:	bd70      	pop	{r4, r5, r6, pc}
 810a2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 810a300:	4798      	blx	r3
 810a302:	3601      	adds	r6, #1
 810a304:	e7ee      	b.n	810a2e4 <__libc_init_array+0xc>
 810a306:	f855 3b04 	ldr.w	r3, [r5], #4
 810a30a:	4798      	blx	r3
 810a30c:	3601      	adds	r6, #1
 810a30e:	e7f2      	b.n	810a2f6 <__libc_init_array+0x1e>
 810a310:	0810b6a0 	.word	0x0810b6a0
 810a314:	0810b6a0 	.word	0x0810b6a0
 810a318:	0810b6a0 	.word	0x0810b6a0
 810a31c:	0810b6a4 	.word	0x0810b6a4

0810a320 <malloc>:
 810a320:	4b02      	ldr	r3, [pc, #8]	; (810a32c <malloc+0xc>)
 810a322:	4601      	mov	r1, r0
 810a324:	6818      	ldr	r0, [r3, #0]
 810a326:	f000 b88d 	b.w	810a444 <_malloc_r>
 810a32a:	bf00      	nop
 810a32c:	100000b8 	.word	0x100000b8

0810a330 <free>:
 810a330:	4b02      	ldr	r3, [pc, #8]	; (810a33c <free+0xc>)
 810a332:	4601      	mov	r1, r0
 810a334:	6818      	ldr	r0, [r3, #0]
 810a336:	f000 b819 	b.w	810a36c <_free_r>
 810a33a:	bf00      	nop
 810a33c:	100000b8 	.word	0x100000b8

0810a340 <memcpy>:
 810a340:	440a      	add	r2, r1
 810a342:	4291      	cmp	r1, r2
 810a344:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810a348:	d100      	bne.n	810a34c <memcpy+0xc>
 810a34a:	4770      	bx	lr
 810a34c:	b510      	push	{r4, lr}
 810a34e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a352:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a356:	4291      	cmp	r1, r2
 810a358:	d1f9      	bne.n	810a34e <memcpy+0xe>
 810a35a:	bd10      	pop	{r4, pc}

0810a35c <memset>:
 810a35c:	4402      	add	r2, r0
 810a35e:	4603      	mov	r3, r0
 810a360:	4293      	cmp	r3, r2
 810a362:	d100      	bne.n	810a366 <memset+0xa>
 810a364:	4770      	bx	lr
 810a366:	f803 1b01 	strb.w	r1, [r3], #1
 810a36a:	e7f9      	b.n	810a360 <memset+0x4>

0810a36c <_free_r>:
 810a36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a36e:	2900      	cmp	r1, #0
 810a370:	d044      	beq.n	810a3fc <_free_r+0x90>
 810a372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810a376:	9001      	str	r0, [sp, #4]
 810a378:	2b00      	cmp	r3, #0
 810a37a:	f1a1 0404 	sub.w	r4, r1, #4
 810a37e:	bfb8      	it	lt
 810a380:	18e4      	addlt	r4, r4, r3
 810a382:	f000 fee1 	bl	810b148 <__malloc_lock>
 810a386:	4a1e      	ldr	r2, [pc, #120]	; (810a400 <_free_r+0x94>)
 810a388:	9801      	ldr	r0, [sp, #4]
 810a38a:	6813      	ldr	r3, [r2, #0]
 810a38c:	b933      	cbnz	r3, 810a39c <_free_r+0x30>
 810a38e:	6063      	str	r3, [r4, #4]
 810a390:	6014      	str	r4, [r2, #0]
 810a392:	b003      	add	sp, #12
 810a394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810a398:	f000 bedc 	b.w	810b154 <__malloc_unlock>
 810a39c:	42a3      	cmp	r3, r4
 810a39e:	d908      	bls.n	810a3b2 <_free_r+0x46>
 810a3a0:	6825      	ldr	r5, [r4, #0]
 810a3a2:	1961      	adds	r1, r4, r5
 810a3a4:	428b      	cmp	r3, r1
 810a3a6:	bf01      	itttt	eq
 810a3a8:	6819      	ldreq	r1, [r3, #0]
 810a3aa:	685b      	ldreq	r3, [r3, #4]
 810a3ac:	1949      	addeq	r1, r1, r5
 810a3ae:	6021      	streq	r1, [r4, #0]
 810a3b0:	e7ed      	b.n	810a38e <_free_r+0x22>
 810a3b2:	461a      	mov	r2, r3
 810a3b4:	685b      	ldr	r3, [r3, #4]
 810a3b6:	b10b      	cbz	r3, 810a3bc <_free_r+0x50>
 810a3b8:	42a3      	cmp	r3, r4
 810a3ba:	d9fa      	bls.n	810a3b2 <_free_r+0x46>
 810a3bc:	6811      	ldr	r1, [r2, #0]
 810a3be:	1855      	adds	r5, r2, r1
 810a3c0:	42a5      	cmp	r5, r4
 810a3c2:	d10b      	bne.n	810a3dc <_free_r+0x70>
 810a3c4:	6824      	ldr	r4, [r4, #0]
 810a3c6:	4421      	add	r1, r4
 810a3c8:	1854      	adds	r4, r2, r1
 810a3ca:	42a3      	cmp	r3, r4
 810a3cc:	6011      	str	r1, [r2, #0]
 810a3ce:	d1e0      	bne.n	810a392 <_free_r+0x26>
 810a3d0:	681c      	ldr	r4, [r3, #0]
 810a3d2:	685b      	ldr	r3, [r3, #4]
 810a3d4:	6053      	str	r3, [r2, #4]
 810a3d6:	4421      	add	r1, r4
 810a3d8:	6011      	str	r1, [r2, #0]
 810a3da:	e7da      	b.n	810a392 <_free_r+0x26>
 810a3dc:	d902      	bls.n	810a3e4 <_free_r+0x78>
 810a3de:	230c      	movs	r3, #12
 810a3e0:	6003      	str	r3, [r0, #0]
 810a3e2:	e7d6      	b.n	810a392 <_free_r+0x26>
 810a3e4:	6825      	ldr	r5, [r4, #0]
 810a3e6:	1961      	adds	r1, r4, r5
 810a3e8:	428b      	cmp	r3, r1
 810a3ea:	bf04      	itt	eq
 810a3ec:	6819      	ldreq	r1, [r3, #0]
 810a3ee:	685b      	ldreq	r3, [r3, #4]
 810a3f0:	6063      	str	r3, [r4, #4]
 810a3f2:	bf04      	itt	eq
 810a3f4:	1949      	addeq	r1, r1, r5
 810a3f6:	6021      	streq	r1, [r4, #0]
 810a3f8:	6054      	str	r4, [r2, #4]
 810a3fa:	e7ca      	b.n	810a392 <_free_r+0x26>
 810a3fc:	b003      	add	sp, #12
 810a3fe:	bd30      	pop	{r4, r5, pc}
 810a400:	100005a0 	.word	0x100005a0

0810a404 <sbrk_aligned>:
 810a404:	b570      	push	{r4, r5, r6, lr}
 810a406:	4e0e      	ldr	r6, [pc, #56]	; (810a440 <sbrk_aligned+0x3c>)
 810a408:	460c      	mov	r4, r1
 810a40a:	6831      	ldr	r1, [r6, #0]
 810a40c:	4605      	mov	r5, r0
 810a40e:	b911      	cbnz	r1, 810a416 <sbrk_aligned+0x12>
 810a410:	f000 fb7a 	bl	810ab08 <_sbrk_r>
 810a414:	6030      	str	r0, [r6, #0]
 810a416:	4621      	mov	r1, r4
 810a418:	4628      	mov	r0, r5
 810a41a:	f000 fb75 	bl	810ab08 <_sbrk_r>
 810a41e:	1c43      	adds	r3, r0, #1
 810a420:	d00a      	beq.n	810a438 <sbrk_aligned+0x34>
 810a422:	1cc4      	adds	r4, r0, #3
 810a424:	f024 0403 	bic.w	r4, r4, #3
 810a428:	42a0      	cmp	r0, r4
 810a42a:	d007      	beq.n	810a43c <sbrk_aligned+0x38>
 810a42c:	1a21      	subs	r1, r4, r0
 810a42e:	4628      	mov	r0, r5
 810a430:	f000 fb6a 	bl	810ab08 <_sbrk_r>
 810a434:	3001      	adds	r0, #1
 810a436:	d101      	bne.n	810a43c <sbrk_aligned+0x38>
 810a438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 810a43c:	4620      	mov	r0, r4
 810a43e:	bd70      	pop	{r4, r5, r6, pc}
 810a440:	100005a4 	.word	0x100005a4

0810a444 <_malloc_r>:
 810a444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a448:	1ccd      	adds	r5, r1, #3
 810a44a:	f025 0503 	bic.w	r5, r5, #3
 810a44e:	3508      	adds	r5, #8
 810a450:	2d0c      	cmp	r5, #12
 810a452:	bf38      	it	cc
 810a454:	250c      	movcc	r5, #12
 810a456:	2d00      	cmp	r5, #0
 810a458:	4607      	mov	r7, r0
 810a45a:	db01      	blt.n	810a460 <_malloc_r+0x1c>
 810a45c:	42a9      	cmp	r1, r5
 810a45e:	d905      	bls.n	810a46c <_malloc_r+0x28>
 810a460:	230c      	movs	r3, #12
 810a462:	603b      	str	r3, [r7, #0]
 810a464:	2600      	movs	r6, #0
 810a466:	4630      	mov	r0, r6
 810a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a46c:	4e2e      	ldr	r6, [pc, #184]	; (810a528 <_malloc_r+0xe4>)
 810a46e:	f000 fe6b 	bl	810b148 <__malloc_lock>
 810a472:	6833      	ldr	r3, [r6, #0]
 810a474:	461c      	mov	r4, r3
 810a476:	bb34      	cbnz	r4, 810a4c6 <_malloc_r+0x82>
 810a478:	4629      	mov	r1, r5
 810a47a:	4638      	mov	r0, r7
 810a47c:	f7ff ffc2 	bl	810a404 <sbrk_aligned>
 810a480:	1c43      	adds	r3, r0, #1
 810a482:	4604      	mov	r4, r0
 810a484:	d14d      	bne.n	810a522 <_malloc_r+0xde>
 810a486:	6834      	ldr	r4, [r6, #0]
 810a488:	4626      	mov	r6, r4
 810a48a:	2e00      	cmp	r6, #0
 810a48c:	d140      	bne.n	810a510 <_malloc_r+0xcc>
 810a48e:	6823      	ldr	r3, [r4, #0]
 810a490:	4631      	mov	r1, r6
 810a492:	4638      	mov	r0, r7
 810a494:	eb04 0803 	add.w	r8, r4, r3
 810a498:	f000 fb36 	bl	810ab08 <_sbrk_r>
 810a49c:	4580      	cmp	r8, r0
 810a49e:	d13a      	bne.n	810a516 <_malloc_r+0xd2>
 810a4a0:	6821      	ldr	r1, [r4, #0]
 810a4a2:	3503      	adds	r5, #3
 810a4a4:	1a6d      	subs	r5, r5, r1
 810a4a6:	f025 0503 	bic.w	r5, r5, #3
 810a4aa:	3508      	adds	r5, #8
 810a4ac:	2d0c      	cmp	r5, #12
 810a4ae:	bf38      	it	cc
 810a4b0:	250c      	movcc	r5, #12
 810a4b2:	4629      	mov	r1, r5
 810a4b4:	4638      	mov	r0, r7
 810a4b6:	f7ff ffa5 	bl	810a404 <sbrk_aligned>
 810a4ba:	3001      	adds	r0, #1
 810a4bc:	d02b      	beq.n	810a516 <_malloc_r+0xd2>
 810a4be:	6823      	ldr	r3, [r4, #0]
 810a4c0:	442b      	add	r3, r5
 810a4c2:	6023      	str	r3, [r4, #0]
 810a4c4:	e00e      	b.n	810a4e4 <_malloc_r+0xa0>
 810a4c6:	6822      	ldr	r2, [r4, #0]
 810a4c8:	1b52      	subs	r2, r2, r5
 810a4ca:	d41e      	bmi.n	810a50a <_malloc_r+0xc6>
 810a4cc:	2a0b      	cmp	r2, #11
 810a4ce:	d916      	bls.n	810a4fe <_malloc_r+0xba>
 810a4d0:	1961      	adds	r1, r4, r5
 810a4d2:	42a3      	cmp	r3, r4
 810a4d4:	6025      	str	r5, [r4, #0]
 810a4d6:	bf18      	it	ne
 810a4d8:	6059      	strne	r1, [r3, #4]
 810a4da:	6863      	ldr	r3, [r4, #4]
 810a4dc:	bf08      	it	eq
 810a4de:	6031      	streq	r1, [r6, #0]
 810a4e0:	5162      	str	r2, [r4, r5]
 810a4e2:	604b      	str	r3, [r1, #4]
 810a4e4:	4638      	mov	r0, r7
 810a4e6:	f104 060b 	add.w	r6, r4, #11
 810a4ea:	f000 fe33 	bl	810b154 <__malloc_unlock>
 810a4ee:	f026 0607 	bic.w	r6, r6, #7
 810a4f2:	1d23      	adds	r3, r4, #4
 810a4f4:	1af2      	subs	r2, r6, r3
 810a4f6:	d0b6      	beq.n	810a466 <_malloc_r+0x22>
 810a4f8:	1b9b      	subs	r3, r3, r6
 810a4fa:	50a3      	str	r3, [r4, r2]
 810a4fc:	e7b3      	b.n	810a466 <_malloc_r+0x22>
 810a4fe:	6862      	ldr	r2, [r4, #4]
 810a500:	42a3      	cmp	r3, r4
 810a502:	bf0c      	ite	eq
 810a504:	6032      	streq	r2, [r6, #0]
 810a506:	605a      	strne	r2, [r3, #4]
 810a508:	e7ec      	b.n	810a4e4 <_malloc_r+0xa0>
 810a50a:	4623      	mov	r3, r4
 810a50c:	6864      	ldr	r4, [r4, #4]
 810a50e:	e7b2      	b.n	810a476 <_malloc_r+0x32>
 810a510:	4634      	mov	r4, r6
 810a512:	6876      	ldr	r6, [r6, #4]
 810a514:	e7b9      	b.n	810a48a <_malloc_r+0x46>
 810a516:	230c      	movs	r3, #12
 810a518:	603b      	str	r3, [r7, #0]
 810a51a:	4638      	mov	r0, r7
 810a51c:	f000 fe1a 	bl	810b154 <__malloc_unlock>
 810a520:	e7a1      	b.n	810a466 <_malloc_r+0x22>
 810a522:	6025      	str	r5, [r4, #0]
 810a524:	e7de      	b.n	810a4e4 <_malloc_r+0xa0>
 810a526:	bf00      	nop
 810a528:	100005a0 	.word	0x100005a0

0810a52c <__sfputc_r>:
 810a52c:	6893      	ldr	r3, [r2, #8]
 810a52e:	3b01      	subs	r3, #1
 810a530:	2b00      	cmp	r3, #0
 810a532:	b410      	push	{r4}
 810a534:	6093      	str	r3, [r2, #8]
 810a536:	da08      	bge.n	810a54a <__sfputc_r+0x1e>
 810a538:	6994      	ldr	r4, [r2, #24]
 810a53a:	42a3      	cmp	r3, r4
 810a53c:	db01      	blt.n	810a542 <__sfputc_r+0x16>
 810a53e:	290a      	cmp	r1, #10
 810a540:	d103      	bne.n	810a54a <__sfputc_r+0x1e>
 810a542:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a546:	f000 bb17 	b.w	810ab78 <__swbuf_r>
 810a54a:	6813      	ldr	r3, [r2, #0]
 810a54c:	1c58      	adds	r0, r3, #1
 810a54e:	6010      	str	r0, [r2, #0]
 810a550:	7019      	strb	r1, [r3, #0]
 810a552:	4608      	mov	r0, r1
 810a554:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a558:	4770      	bx	lr

0810a55a <__sfputs_r>:
 810a55a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a55c:	4606      	mov	r6, r0
 810a55e:	460f      	mov	r7, r1
 810a560:	4614      	mov	r4, r2
 810a562:	18d5      	adds	r5, r2, r3
 810a564:	42ac      	cmp	r4, r5
 810a566:	d101      	bne.n	810a56c <__sfputs_r+0x12>
 810a568:	2000      	movs	r0, #0
 810a56a:	e007      	b.n	810a57c <__sfputs_r+0x22>
 810a56c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a570:	463a      	mov	r2, r7
 810a572:	4630      	mov	r0, r6
 810a574:	f7ff ffda 	bl	810a52c <__sfputc_r>
 810a578:	1c43      	adds	r3, r0, #1
 810a57a:	d1f3      	bne.n	810a564 <__sfputs_r+0xa>
 810a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a580 <_vfiprintf_r>:
 810a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a584:	460d      	mov	r5, r1
 810a586:	b09d      	sub	sp, #116	; 0x74
 810a588:	4614      	mov	r4, r2
 810a58a:	4698      	mov	r8, r3
 810a58c:	4606      	mov	r6, r0
 810a58e:	b118      	cbz	r0, 810a598 <_vfiprintf_r+0x18>
 810a590:	6983      	ldr	r3, [r0, #24]
 810a592:	b90b      	cbnz	r3, 810a598 <_vfiprintf_r+0x18>
 810a594:	f000 fcd2 	bl	810af3c <__sinit>
 810a598:	4b89      	ldr	r3, [pc, #548]	; (810a7c0 <_vfiprintf_r+0x240>)
 810a59a:	429d      	cmp	r5, r3
 810a59c:	d11b      	bne.n	810a5d6 <_vfiprintf_r+0x56>
 810a59e:	6875      	ldr	r5, [r6, #4]
 810a5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a5a2:	07d9      	lsls	r1, r3, #31
 810a5a4:	d405      	bmi.n	810a5b2 <_vfiprintf_r+0x32>
 810a5a6:	89ab      	ldrh	r3, [r5, #12]
 810a5a8:	059a      	lsls	r2, r3, #22
 810a5aa:	d402      	bmi.n	810a5b2 <_vfiprintf_r+0x32>
 810a5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a5ae:	f000 fd63 	bl	810b078 <__retarget_lock_acquire_recursive>
 810a5b2:	89ab      	ldrh	r3, [r5, #12]
 810a5b4:	071b      	lsls	r3, r3, #28
 810a5b6:	d501      	bpl.n	810a5bc <_vfiprintf_r+0x3c>
 810a5b8:	692b      	ldr	r3, [r5, #16]
 810a5ba:	b9eb      	cbnz	r3, 810a5f8 <_vfiprintf_r+0x78>
 810a5bc:	4629      	mov	r1, r5
 810a5be:	4630      	mov	r0, r6
 810a5c0:	f000 fb2c 	bl	810ac1c <__swsetup_r>
 810a5c4:	b1c0      	cbz	r0, 810a5f8 <_vfiprintf_r+0x78>
 810a5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a5c8:	07dc      	lsls	r4, r3, #31
 810a5ca:	d50e      	bpl.n	810a5ea <_vfiprintf_r+0x6a>
 810a5cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810a5d0:	b01d      	add	sp, #116	; 0x74
 810a5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a5d6:	4b7b      	ldr	r3, [pc, #492]	; (810a7c4 <_vfiprintf_r+0x244>)
 810a5d8:	429d      	cmp	r5, r3
 810a5da:	d101      	bne.n	810a5e0 <_vfiprintf_r+0x60>
 810a5dc:	68b5      	ldr	r5, [r6, #8]
 810a5de:	e7df      	b.n	810a5a0 <_vfiprintf_r+0x20>
 810a5e0:	4b79      	ldr	r3, [pc, #484]	; (810a7c8 <_vfiprintf_r+0x248>)
 810a5e2:	429d      	cmp	r5, r3
 810a5e4:	bf08      	it	eq
 810a5e6:	68f5      	ldreq	r5, [r6, #12]
 810a5e8:	e7da      	b.n	810a5a0 <_vfiprintf_r+0x20>
 810a5ea:	89ab      	ldrh	r3, [r5, #12]
 810a5ec:	0598      	lsls	r0, r3, #22
 810a5ee:	d4ed      	bmi.n	810a5cc <_vfiprintf_r+0x4c>
 810a5f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a5f2:	f000 fd42 	bl	810b07a <__retarget_lock_release_recursive>
 810a5f6:	e7e9      	b.n	810a5cc <_vfiprintf_r+0x4c>
 810a5f8:	2300      	movs	r3, #0
 810a5fa:	9309      	str	r3, [sp, #36]	; 0x24
 810a5fc:	2320      	movs	r3, #32
 810a5fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a602:	f8cd 800c 	str.w	r8, [sp, #12]
 810a606:	2330      	movs	r3, #48	; 0x30
 810a608:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810a7cc <_vfiprintf_r+0x24c>
 810a60c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a610:	f04f 0901 	mov.w	r9, #1
 810a614:	4623      	mov	r3, r4
 810a616:	469a      	mov	sl, r3
 810a618:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a61c:	b10a      	cbz	r2, 810a622 <_vfiprintf_r+0xa2>
 810a61e:	2a25      	cmp	r2, #37	; 0x25
 810a620:	d1f9      	bne.n	810a616 <_vfiprintf_r+0x96>
 810a622:	ebba 0b04 	subs.w	fp, sl, r4
 810a626:	d00b      	beq.n	810a640 <_vfiprintf_r+0xc0>
 810a628:	465b      	mov	r3, fp
 810a62a:	4622      	mov	r2, r4
 810a62c:	4629      	mov	r1, r5
 810a62e:	4630      	mov	r0, r6
 810a630:	f7ff ff93 	bl	810a55a <__sfputs_r>
 810a634:	3001      	adds	r0, #1
 810a636:	f000 80aa 	beq.w	810a78e <_vfiprintf_r+0x20e>
 810a63a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a63c:	445a      	add	r2, fp
 810a63e:	9209      	str	r2, [sp, #36]	; 0x24
 810a640:	f89a 3000 	ldrb.w	r3, [sl]
 810a644:	2b00      	cmp	r3, #0
 810a646:	f000 80a2 	beq.w	810a78e <_vfiprintf_r+0x20e>
 810a64a:	2300      	movs	r3, #0
 810a64c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 810a650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a654:	f10a 0a01 	add.w	sl, sl, #1
 810a658:	9304      	str	r3, [sp, #16]
 810a65a:	9307      	str	r3, [sp, #28]
 810a65c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a660:	931a      	str	r3, [sp, #104]	; 0x68
 810a662:	4654      	mov	r4, sl
 810a664:	2205      	movs	r2, #5
 810a666:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a66a:	4858      	ldr	r0, [pc, #352]	; (810a7cc <_vfiprintf_r+0x24c>)
 810a66c:	f7f5 fe48 	bl	8100300 <memchr>
 810a670:	9a04      	ldr	r2, [sp, #16]
 810a672:	b9d8      	cbnz	r0, 810a6ac <_vfiprintf_r+0x12c>
 810a674:	06d1      	lsls	r1, r2, #27
 810a676:	bf44      	itt	mi
 810a678:	2320      	movmi	r3, #32
 810a67a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a67e:	0713      	lsls	r3, r2, #28
 810a680:	bf44      	itt	mi
 810a682:	232b      	movmi	r3, #43	; 0x2b
 810a684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a688:	f89a 3000 	ldrb.w	r3, [sl]
 810a68c:	2b2a      	cmp	r3, #42	; 0x2a
 810a68e:	d015      	beq.n	810a6bc <_vfiprintf_r+0x13c>
 810a690:	9a07      	ldr	r2, [sp, #28]
 810a692:	4654      	mov	r4, sl
 810a694:	2000      	movs	r0, #0
 810a696:	f04f 0c0a 	mov.w	ip, #10
 810a69a:	4621      	mov	r1, r4
 810a69c:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a6a0:	3b30      	subs	r3, #48	; 0x30
 810a6a2:	2b09      	cmp	r3, #9
 810a6a4:	d94e      	bls.n	810a744 <_vfiprintf_r+0x1c4>
 810a6a6:	b1b0      	cbz	r0, 810a6d6 <_vfiprintf_r+0x156>
 810a6a8:	9207      	str	r2, [sp, #28]
 810a6aa:	e014      	b.n	810a6d6 <_vfiprintf_r+0x156>
 810a6ac:	eba0 0308 	sub.w	r3, r0, r8
 810a6b0:	fa09 f303 	lsl.w	r3, r9, r3
 810a6b4:	4313      	orrs	r3, r2
 810a6b6:	9304      	str	r3, [sp, #16]
 810a6b8:	46a2      	mov	sl, r4
 810a6ba:	e7d2      	b.n	810a662 <_vfiprintf_r+0xe2>
 810a6bc:	9b03      	ldr	r3, [sp, #12]
 810a6be:	1d19      	adds	r1, r3, #4
 810a6c0:	681b      	ldr	r3, [r3, #0]
 810a6c2:	9103      	str	r1, [sp, #12]
 810a6c4:	2b00      	cmp	r3, #0
 810a6c6:	bfbb      	ittet	lt
 810a6c8:	425b      	neglt	r3, r3
 810a6ca:	f042 0202 	orrlt.w	r2, r2, #2
 810a6ce:	9307      	strge	r3, [sp, #28]
 810a6d0:	9307      	strlt	r3, [sp, #28]
 810a6d2:	bfb8      	it	lt
 810a6d4:	9204      	strlt	r2, [sp, #16]
 810a6d6:	7823      	ldrb	r3, [r4, #0]
 810a6d8:	2b2e      	cmp	r3, #46	; 0x2e
 810a6da:	d10c      	bne.n	810a6f6 <_vfiprintf_r+0x176>
 810a6dc:	7863      	ldrb	r3, [r4, #1]
 810a6de:	2b2a      	cmp	r3, #42	; 0x2a
 810a6e0:	d135      	bne.n	810a74e <_vfiprintf_r+0x1ce>
 810a6e2:	9b03      	ldr	r3, [sp, #12]
 810a6e4:	1d1a      	adds	r2, r3, #4
 810a6e6:	681b      	ldr	r3, [r3, #0]
 810a6e8:	9203      	str	r2, [sp, #12]
 810a6ea:	2b00      	cmp	r3, #0
 810a6ec:	bfb8      	it	lt
 810a6ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 810a6f2:	3402      	adds	r4, #2
 810a6f4:	9305      	str	r3, [sp, #20]
 810a6f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810a7dc <_vfiprintf_r+0x25c>
 810a6fa:	7821      	ldrb	r1, [r4, #0]
 810a6fc:	2203      	movs	r2, #3
 810a6fe:	4650      	mov	r0, sl
 810a700:	f7f5 fdfe 	bl	8100300 <memchr>
 810a704:	b140      	cbz	r0, 810a718 <_vfiprintf_r+0x198>
 810a706:	2340      	movs	r3, #64	; 0x40
 810a708:	eba0 000a 	sub.w	r0, r0, sl
 810a70c:	fa03 f000 	lsl.w	r0, r3, r0
 810a710:	9b04      	ldr	r3, [sp, #16]
 810a712:	4303      	orrs	r3, r0
 810a714:	3401      	adds	r4, #1
 810a716:	9304      	str	r3, [sp, #16]
 810a718:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a71c:	482c      	ldr	r0, [pc, #176]	; (810a7d0 <_vfiprintf_r+0x250>)
 810a71e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a722:	2206      	movs	r2, #6
 810a724:	f7f5 fdec 	bl	8100300 <memchr>
 810a728:	2800      	cmp	r0, #0
 810a72a:	d03f      	beq.n	810a7ac <_vfiprintf_r+0x22c>
 810a72c:	4b29      	ldr	r3, [pc, #164]	; (810a7d4 <_vfiprintf_r+0x254>)
 810a72e:	bb1b      	cbnz	r3, 810a778 <_vfiprintf_r+0x1f8>
 810a730:	9b03      	ldr	r3, [sp, #12]
 810a732:	3307      	adds	r3, #7
 810a734:	f023 0307 	bic.w	r3, r3, #7
 810a738:	3308      	adds	r3, #8
 810a73a:	9303      	str	r3, [sp, #12]
 810a73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a73e:	443b      	add	r3, r7
 810a740:	9309      	str	r3, [sp, #36]	; 0x24
 810a742:	e767      	b.n	810a614 <_vfiprintf_r+0x94>
 810a744:	fb0c 3202 	mla	r2, ip, r2, r3
 810a748:	460c      	mov	r4, r1
 810a74a:	2001      	movs	r0, #1
 810a74c:	e7a5      	b.n	810a69a <_vfiprintf_r+0x11a>
 810a74e:	2300      	movs	r3, #0
 810a750:	3401      	adds	r4, #1
 810a752:	9305      	str	r3, [sp, #20]
 810a754:	4619      	mov	r1, r3
 810a756:	f04f 0c0a 	mov.w	ip, #10
 810a75a:	4620      	mov	r0, r4
 810a75c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a760:	3a30      	subs	r2, #48	; 0x30
 810a762:	2a09      	cmp	r2, #9
 810a764:	d903      	bls.n	810a76e <_vfiprintf_r+0x1ee>
 810a766:	2b00      	cmp	r3, #0
 810a768:	d0c5      	beq.n	810a6f6 <_vfiprintf_r+0x176>
 810a76a:	9105      	str	r1, [sp, #20]
 810a76c:	e7c3      	b.n	810a6f6 <_vfiprintf_r+0x176>
 810a76e:	fb0c 2101 	mla	r1, ip, r1, r2
 810a772:	4604      	mov	r4, r0
 810a774:	2301      	movs	r3, #1
 810a776:	e7f0      	b.n	810a75a <_vfiprintf_r+0x1da>
 810a778:	ab03      	add	r3, sp, #12
 810a77a:	9300      	str	r3, [sp, #0]
 810a77c:	462a      	mov	r2, r5
 810a77e:	4b16      	ldr	r3, [pc, #88]	; (810a7d8 <_vfiprintf_r+0x258>)
 810a780:	a904      	add	r1, sp, #16
 810a782:	4630      	mov	r0, r6
 810a784:	f3af 8000 	nop.w
 810a788:	4607      	mov	r7, r0
 810a78a:	1c78      	adds	r0, r7, #1
 810a78c:	d1d6      	bne.n	810a73c <_vfiprintf_r+0x1bc>
 810a78e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a790:	07d9      	lsls	r1, r3, #31
 810a792:	d405      	bmi.n	810a7a0 <_vfiprintf_r+0x220>
 810a794:	89ab      	ldrh	r3, [r5, #12]
 810a796:	059a      	lsls	r2, r3, #22
 810a798:	d402      	bmi.n	810a7a0 <_vfiprintf_r+0x220>
 810a79a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a79c:	f000 fc6d 	bl	810b07a <__retarget_lock_release_recursive>
 810a7a0:	89ab      	ldrh	r3, [r5, #12]
 810a7a2:	065b      	lsls	r3, r3, #25
 810a7a4:	f53f af12 	bmi.w	810a5cc <_vfiprintf_r+0x4c>
 810a7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a7aa:	e711      	b.n	810a5d0 <_vfiprintf_r+0x50>
 810a7ac:	ab03      	add	r3, sp, #12
 810a7ae:	9300      	str	r3, [sp, #0]
 810a7b0:	462a      	mov	r2, r5
 810a7b2:	4b09      	ldr	r3, [pc, #36]	; (810a7d8 <_vfiprintf_r+0x258>)
 810a7b4:	a904      	add	r1, sp, #16
 810a7b6:	4630      	mov	r0, r6
 810a7b8:	f000 f880 	bl	810a8bc <_printf_i>
 810a7bc:	e7e4      	b.n	810a788 <_vfiprintf_r+0x208>
 810a7be:	bf00      	nop
 810a7c0:	0810b660 	.word	0x0810b660
 810a7c4:	0810b680 	.word	0x0810b680
 810a7c8:	0810b640 	.word	0x0810b640
 810a7cc:	0810b60c 	.word	0x0810b60c
 810a7d0:	0810b616 	.word	0x0810b616
 810a7d4:	00000000 	.word	0x00000000
 810a7d8:	0810a55b 	.word	0x0810a55b
 810a7dc:	0810b612 	.word	0x0810b612

0810a7e0 <_printf_common>:
 810a7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a7e4:	4616      	mov	r6, r2
 810a7e6:	4699      	mov	r9, r3
 810a7e8:	688a      	ldr	r2, [r1, #8]
 810a7ea:	690b      	ldr	r3, [r1, #16]
 810a7ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a7f0:	4293      	cmp	r3, r2
 810a7f2:	bfb8      	it	lt
 810a7f4:	4613      	movlt	r3, r2
 810a7f6:	6033      	str	r3, [r6, #0]
 810a7f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a7fc:	4607      	mov	r7, r0
 810a7fe:	460c      	mov	r4, r1
 810a800:	b10a      	cbz	r2, 810a806 <_printf_common+0x26>
 810a802:	3301      	adds	r3, #1
 810a804:	6033      	str	r3, [r6, #0]
 810a806:	6823      	ldr	r3, [r4, #0]
 810a808:	0699      	lsls	r1, r3, #26
 810a80a:	bf42      	ittt	mi
 810a80c:	6833      	ldrmi	r3, [r6, #0]
 810a80e:	3302      	addmi	r3, #2
 810a810:	6033      	strmi	r3, [r6, #0]
 810a812:	6825      	ldr	r5, [r4, #0]
 810a814:	f015 0506 	ands.w	r5, r5, #6
 810a818:	d106      	bne.n	810a828 <_printf_common+0x48>
 810a81a:	f104 0a19 	add.w	sl, r4, #25
 810a81e:	68e3      	ldr	r3, [r4, #12]
 810a820:	6832      	ldr	r2, [r6, #0]
 810a822:	1a9b      	subs	r3, r3, r2
 810a824:	42ab      	cmp	r3, r5
 810a826:	dc26      	bgt.n	810a876 <_printf_common+0x96>
 810a828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810a82c:	1e13      	subs	r3, r2, #0
 810a82e:	6822      	ldr	r2, [r4, #0]
 810a830:	bf18      	it	ne
 810a832:	2301      	movne	r3, #1
 810a834:	0692      	lsls	r2, r2, #26
 810a836:	d42b      	bmi.n	810a890 <_printf_common+0xb0>
 810a838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a83c:	4649      	mov	r1, r9
 810a83e:	4638      	mov	r0, r7
 810a840:	47c0      	blx	r8
 810a842:	3001      	adds	r0, #1
 810a844:	d01e      	beq.n	810a884 <_printf_common+0xa4>
 810a846:	6823      	ldr	r3, [r4, #0]
 810a848:	68e5      	ldr	r5, [r4, #12]
 810a84a:	6832      	ldr	r2, [r6, #0]
 810a84c:	f003 0306 	and.w	r3, r3, #6
 810a850:	2b04      	cmp	r3, #4
 810a852:	bf08      	it	eq
 810a854:	1aad      	subeq	r5, r5, r2
 810a856:	68a3      	ldr	r3, [r4, #8]
 810a858:	6922      	ldr	r2, [r4, #16]
 810a85a:	bf0c      	ite	eq
 810a85c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a860:	2500      	movne	r5, #0
 810a862:	4293      	cmp	r3, r2
 810a864:	bfc4      	itt	gt
 810a866:	1a9b      	subgt	r3, r3, r2
 810a868:	18ed      	addgt	r5, r5, r3
 810a86a:	2600      	movs	r6, #0
 810a86c:	341a      	adds	r4, #26
 810a86e:	42b5      	cmp	r5, r6
 810a870:	d11a      	bne.n	810a8a8 <_printf_common+0xc8>
 810a872:	2000      	movs	r0, #0
 810a874:	e008      	b.n	810a888 <_printf_common+0xa8>
 810a876:	2301      	movs	r3, #1
 810a878:	4652      	mov	r2, sl
 810a87a:	4649      	mov	r1, r9
 810a87c:	4638      	mov	r0, r7
 810a87e:	47c0      	blx	r8
 810a880:	3001      	adds	r0, #1
 810a882:	d103      	bne.n	810a88c <_printf_common+0xac>
 810a884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a88c:	3501      	adds	r5, #1
 810a88e:	e7c6      	b.n	810a81e <_printf_common+0x3e>
 810a890:	18e1      	adds	r1, r4, r3
 810a892:	1c5a      	adds	r2, r3, #1
 810a894:	2030      	movs	r0, #48	; 0x30
 810a896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a89a:	4422      	add	r2, r4
 810a89c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a8a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a8a4:	3302      	adds	r3, #2
 810a8a6:	e7c7      	b.n	810a838 <_printf_common+0x58>
 810a8a8:	2301      	movs	r3, #1
 810a8aa:	4622      	mov	r2, r4
 810a8ac:	4649      	mov	r1, r9
 810a8ae:	4638      	mov	r0, r7
 810a8b0:	47c0      	blx	r8
 810a8b2:	3001      	adds	r0, #1
 810a8b4:	d0e6      	beq.n	810a884 <_printf_common+0xa4>
 810a8b6:	3601      	adds	r6, #1
 810a8b8:	e7d9      	b.n	810a86e <_printf_common+0x8e>
	...

0810a8bc <_printf_i>:
 810a8bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a8c0:	7e0f      	ldrb	r7, [r1, #24]
 810a8c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a8c4:	2f78      	cmp	r7, #120	; 0x78
 810a8c6:	4691      	mov	r9, r2
 810a8c8:	4680      	mov	r8, r0
 810a8ca:	460c      	mov	r4, r1
 810a8cc:	469a      	mov	sl, r3
 810a8ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810a8d2:	d807      	bhi.n	810a8e4 <_printf_i+0x28>
 810a8d4:	2f62      	cmp	r7, #98	; 0x62
 810a8d6:	d80a      	bhi.n	810a8ee <_printf_i+0x32>
 810a8d8:	2f00      	cmp	r7, #0
 810a8da:	f000 80d8 	beq.w	810aa8e <_printf_i+0x1d2>
 810a8de:	2f58      	cmp	r7, #88	; 0x58
 810a8e0:	f000 80a3 	beq.w	810aa2a <_printf_i+0x16e>
 810a8e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a8e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810a8ec:	e03a      	b.n	810a964 <_printf_i+0xa8>
 810a8ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810a8f2:	2b15      	cmp	r3, #21
 810a8f4:	d8f6      	bhi.n	810a8e4 <_printf_i+0x28>
 810a8f6:	a101      	add	r1, pc, #4	; (adr r1, 810a8fc <_printf_i+0x40>)
 810a8f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a8fc:	0810a955 	.word	0x0810a955
 810a900:	0810a969 	.word	0x0810a969
 810a904:	0810a8e5 	.word	0x0810a8e5
 810a908:	0810a8e5 	.word	0x0810a8e5
 810a90c:	0810a8e5 	.word	0x0810a8e5
 810a910:	0810a8e5 	.word	0x0810a8e5
 810a914:	0810a969 	.word	0x0810a969
 810a918:	0810a8e5 	.word	0x0810a8e5
 810a91c:	0810a8e5 	.word	0x0810a8e5
 810a920:	0810a8e5 	.word	0x0810a8e5
 810a924:	0810a8e5 	.word	0x0810a8e5
 810a928:	0810aa75 	.word	0x0810aa75
 810a92c:	0810a999 	.word	0x0810a999
 810a930:	0810aa57 	.word	0x0810aa57
 810a934:	0810a8e5 	.word	0x0810a8e5
 810a938:	0810a8e5 	.word	0x0810a8e5
 810a93c:	0810aa97 	.word	0x0810aa97
 810a940:	0810a8e5 	.word	0x0810a8e5
 810a944:	0810a999 	.word	0x0810a999
 810a948:	0810a8e5 	.word	0x0810a8e5
 810a94c:	0810a8e5 	.word	0x0810a8e5
 810a950:	0810aa5f 	.word	0x0810aa5f
 810a954:	682b      	ldr	r3, [r5, #0]
 810a956:	1d1a      	adds	r2, r3, #4
 810a958:	681b      	ldr	r3, [r3, #0]
 810a95a:	602a      	str	r2, [r5, #0]
 810a95c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810a964:	2301      	movs	r3, #1
 810a966:	e0a3      	b.n	810aab0 <_printf_i+0x1f4>
 810a968:	6820      	ldr	r0, [r4, #0]
 810a96a:	6829      	ldr	r1, [r5, #0]
 810a96c:	0606      	lsls	r6, r0, #24
 810a96e:	f101 0304 	add.w	r3, r1, #4
 810a972:	d50a      	bpl.n	810a98a <_printf_i+0xce>
 810a974:	680e      	ldr	r6, [r1, #0]
 810a976:	602b      	str	r3, [r5, #0]
 810a978:	2e00      	cmp	r6, #0
 810a97a:	da03      	bge.n	810a984 <_printf_i+0xc8>
 810a97c:	232d      	movs	r3, #45	; 0x2d
 810a97e:	4276      	negs	r6, r6
 810a980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a984:	485e      	ldr	r0, [pc, #376]	; (810ab00 <_printf_i+0x244>)
 810a986:	230a      	movs	r3, #10
 810a988:	e019      	b.n	810a9be <_printf_i+0x102>
 810a98a:	680e      	ldr	r6, [r1, #0]
 810a98c:	602b      	str	r3, [r5, #0]
 810a98e:	f010 0f40 	tst.w	r0, #64	; 0x40
 810a992:	bf18      	it	ne
 810a994:	b236      	sxthne	r6, r6
 810a996:	e7ef      	b.n	810a978 <_printf_i+0xbc>
 810a998:	682b      	ldr	r3, [r5, #0]
 810a99a:	6820      	ldr	r0, [r4, #0]
 810a99c:	1d19      	adds	r1, r3, #4
 810a99e:	6029      	str	r1, [r5, #0]
 810a9a0:	0601      	lsls	r1, r0, #24
 810a9a2:	d501      	bpl.n	810a9a8 <_printf_i+0xec>
 810a9a4:	681e      	ldr	r6, [r3, #0]
 810a9a6:	e002      	b.n	810a9ae <_printf_i+0xf2>
 810a9a8:	0646      	lsls	r6, r0, #25
 810a9aa:	d5fb      	bpl.n	810a9a4 <_printf_i+0xe8>
 810a9ac:	881e      	ldrh	r6, [r3, #0]
 810a9ae:	4854      	ldr	r0, [pc, #336]	; (810ab00 <_printf_i+0x244>)
 810a9b0:	2f6f      	cmp	r7, #111	; 0x6f
 810a9b2:	bf0c      	ite	eq
 810a9b4:	2308      	moveq	r3, #8
 810a9b6:	230a      	movne	r3, #10
 810a9b8:	2100      	movs	r1, #0
 810a9ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810a9be:	6865      	ldr	r5, [r4, #4]
 810a9c0:	60a5      	str	r5, [r4, #8]
 810a9c2:	2d00      	cmp	r5, #0
 810a9c4:	bfa2      	ittt	ge
 810a9c6:	6821      	ldrge	r1, [r4, #0]
 810a9c8:	f021 0104 	bicge.w	r1, r1, #4
 810a9cc:	6021      	strge	r1, [r4, #0]
 810a9ce:	b90e      	cbnz	r6, 810a9d4 <_printf_i+0x118>
 810a9d0:	2d00      	cmp	r5, #0
 810a9d2:	d04d      	beq.n	810aa70 <_printf_i+0x1b4>
 810a9d4:	4615      	mov	r5, r2
 810a9d6:	fbb6 f1f3 	udiv	r1, r6, r3
 810a9da:	fb03 6711 	mls	r7, r3, r1, r6
 810a9de:	5dc7      	ldrb	r7, [r0, r7]
 810a9e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810a9e4:	4637      	mov	r7, r6
 810a9e6:	42bb      	cmp	r3, r7
 810a9e8:	460e      	mov	r6, r1
 810a9ea:	d9f4      	bls.n	810a9d6 <_printf_i+0x11a>
 810a9ec:	2b08      	cmp	r3, #8
 810a9ee:	d10b      	bne.n	810aa08 <_printf_i+0x14c>
 810a9f0:	6823      	ldr	r3, [r4, #0]
 810a9f2:	07de      	lsls	r6, r3, #31
 810a9f4:	d508      	bpl.n	810aa08 <_printf_i+0x14c>
 810a9f6:	6923      	ldr	r3, [r4, #16]
 810a9f8:	6861      	ldr	r1, [r4, #4]
 810a9fa:	4299      	cmp	r1, r3
 810a9fc:	bfde      	ittt	le
 810a9fe:	2330      	movle	r3, #48	; 0x30
 810aa00:	f805 3c01 	strble.w	r3, [r5, #-1]
 810aa04:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 810aa08:	1b52      	subs	r2, r2, r5
 810aa0a:	6122      	str	r2, [r4, #16]
 810aa0c:	f8cd a000 	str.w	sl, [sp]
 810aa10:	464b      	mov	r3, r9
 810aa12:	aa03      	add	r2, sp, #12
 810aa14:	4621      	mov	r1, r4
 810aa16:	4640      	mov	r0, r8
 810aa18:	f7ff fee2 	bl	810a7e0 <_printf_common>
 810aa1c:	3001      	adds	r0, #1
 810aa1e:	d14c      	bne.n	810aaba <_printf_i+0x1fe>
 810aa20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810aa24:	b004      	add	sp, #16
 810aa26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810aa2a:	4835      	ldr	r0, [pc, #212]	; (810ab00 <_printf_i+0x244>)
 810aa2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 810aa30:	6829      	ldr	r1, [r5, #0]
 810aa32:	6823      	ldr	r3, [r4, #0]
 810aa34:	f851 6b04 	ldr.w	r6, [r1], #4
 810aa38:	6029      	str	r1, [r5, #0]
 810aa3a:	061d      	lsls	r5, r3, #24
 810aa3c:	d514      	bpl.n	810aa68 <_printf_i+0x1ac>
 810aa3e:	07df      	lsls	r7, r3, #31
 810aa40:	bf44      	itt	mi
 810aa42:	f043 0320 	orrmi.w	r3, r3, #32
 810aa46:	6023      	strmi	r3, [r4, #0]
 810aa48:	b91e      	cbnz	r6, 810aa52 <_printf_i+0x196>
 810aa4a:	6823      	ldr	r3, [r4, #0]
 810aa4c:	f023 0320 	bic.w	r3, r3, #32
 810aa50:	6023      	str	r3, [r4, #0]
 810aa52:	2310      	movs	r3, #16
 810aa54:	e7b0      	b.n	810a9b8 <_printf_i+0xfc>
 810aa56:	6823      	ldr	r3, [r4, #0]
 810aa58:	f043 0320 	orr.w	r3, r3, #32
 810aa5c:	6023      	str	r3, [r4, #0]
 810aa5e:	2378      	movs	r3, #120	; 0x78
 810aa60:	4828      	ldr	r0, [pc, #160]	; (810ab04 <_printf_i+0x248>)
 810aa62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 810aa66:	e7e3      	b.n	810aa30 <_printf_i+0x174>
 810aa68:	0659      	lsls	r1, r3, #25
 810aa6a:	bf48      	it	mi
 810aa6c:	b2b6      	uxthmi	r6, r6
 810aa6e:	e7e6      	b.n	810aa3e <_printf_i+0x182>
 810aa70:	4615      	mov	r5, r2
 810aa72:	e7bb      	b.n	810a9ec <_printf_i+0x130>
 810aa74:	682b      	ldr	r3, [r5, #0]
 810aa76:	6826      	ldr	r6, [r4, #0]
 810aa78:	6961      	ldr	r1, [r4, #20]
 810aa7a:	1d18      	adds	r0, r3, #4
 810aa7c:	6028      	str	r0, [r5, #0]
 810aa7e:	0635      	lsls	r5, r6, #24
 810aa80:	681b      	ldr	r3, [r3, #0]
 810aa82:	d501      	bpl.n	810aa88 <_printf_i+0x1cc>
 810aa84:	6019      	str	r1, [r3, #0]
 810aa86:	e002      	b.n	810aa8e <_printf_i+0x1d2>
 810aa88:	0670      	lsls	r0, r6, #25
 810aa8a:	d5fb      	bpl.n	810aa84 <_printf_i+0x1c8>
 810aa8c:	8019      	strh	r1, [r3, #0]
 810aa8e:	2300      	movs	r3, #0
 810aa90:	6123      	str	r3, [r4, #16]
 810aa92:	4615      	mov	r5, r2
 810aa94:	e7ba      	b.n	810aa0c <_printf_i+0x150>
 810aa96:	682b      	ldr	r3, [r5, #0]
 810aa98:	1d1a      	adds	r2, r3, #4
 810aa9a:	602a      	str	r2, [r5, #0]
 810aa9c:	681d      	ldr	r5, [r3, #0]
 810aa9e:	6862      	ldr	r2, [r4, #4]
 810aaa0:	2100      	movs	r1, #0
 810aaa2:	4628      	mov	r0, r5
 810aaa4:	f7f5 fc2c 	bl	8100300 <memchr>
 810aaa8:	b108      	cbz	r0, 810aaae <_printf_i+0x1f2>
 810aaaa:	1b40      	subs	r0, r0, r5
 810aaac:	6060      	str	r0, [r4, #4]
 810aaae:	6863      	ldr	r3, [r4, #4]
 810aab0:	6123      	str	r3, [r4, #16]
 810aab2:	2300      	movs	r3, #0
 810aab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810aab8:	e7a8      	b.n	810aa0c <_printf_i+0x150>
 810aaba:	6923      	ldr	r3, [r4, #16]
 810aabc:	462a      	mov	r2, r5
 810aabe:	4649      	mov	r1, r9
 810aac0:	4640      	mov	r0, r8
 810aac2:	47d0      	blx	sl
 810aac4:	3001      	adds	r0, #1
 810aac6:	d0ab      	beq.n	810aa20 <_printf_i+0x164>
 810aac8:	6823      	ldr	r3, [r4, #0]
 810aaca:	079b      	lsls	r3, r3, #30
 810aacc:	d413      	bmi.n	810aaf6 <_printf_i+0x23a>
 810aace:	68e0      	ldr	r0, [r4, #12]
 810aad0:	9b03      	ldr	r3, [sp, #12]
 810aad2:	4298      	cmp	r0, r3
 810aad4:	bfb8      	it	lt
 810aad6:	4618      	movlt	r0, r3
 810aad8:	e7a4      	b.n	810aa24 <_printf_i+0x168>
 810aada:	2301      	movs	r3, #1
 810aadc:	4632      	mov	r2, r6
 810aade:	4649      	mov	r1, r9
 810aae0:	4640      	mov	r0, r8
 810aae2:	47d0      	blx	sl
 810aae4:	3001      	adds	r0, #1
 810aae6:	d09b      	beq.n	810aa20 <_printf_i+0x164>
 810aae8:	3501      	adds	r5, #1
 810aaea:	68e3      	ldr	r3, [r4, #12]
 810aaec:	9903      	ldr	r1, [sp, #12]
 810aaee:	1a5b      	subs	r3, r3, r1
 810aaf0:	42ab      	cmp	r3, r5
 810aaf2:	dcf2      	bgt.n	810aada <_printf_i+0x21e>
 810aaf4:	e7eb      	b.n	810aace <_printf_i+0x212>
 810aaf6:	2500      	movs	r5, #0
 810aaf8:	f104 0619 	add.w	r6, r4, #25
 810aafc:	e7f5      	b.n	810aaea <_printf_i+0x22e>
 810aafe:	bf00      	nop
 810ab00:	0810b61d 	.word	0x0810b61d
 810ab04:	0810b62e 	.word	0x0810b62e

0810ab08 <_sbrk_r>:
 810ab08:	b538      	push	{r3, r4, r5, lr}
 810ab0a:	4d06      	ldr	r5, [pc, #24]	; (810ab24 <_sbrk_r+0x1c>)
 810ab0c:	2300      	movs	r3, #0
 810ab0e:	4604      	mov	r4, r0
 810ab10:	4608      	mov	r0, r1
 810ab12:	602b      	str	r3, [r5, #0]
 810ab14:	f7f6 fcea 	bl	81014ec <_sbrk>
 810ab18:	1c43      	adds	r3, r0, #1
 810ab1a:	d102      	bne.n	810ab22 <_sbrk_r+0x1a>
 810ab1c:	682b      	ldr	r3, [r5, #0]
 810ab1e:	b103      	cbz	r3, 810ab22 <_sbrk_r+0x1a>
 810ab20:	6023      	str	r3, [r4, #0]
 810ab22:	bd38      	pop	{r3, r4, r5, pc}
 810ab24:	100005ac 	.word	0x100005ac

0810ab28 <strncmp>:
 810ab28:	b510      	push	{r4, lr}
 810ab2a:	b17a      	cbz	r2, 810ab4c <strncmp+0x24>
 810ab2c:	4603      	mov	r3, r0
 810ab2e:	3901      	subs	r1, #1
 810ab30:	1884      	adds	r4, r0, r2
 810ab32:	f813 0b01 	ldrb.w	r0, [r3], #1
 810ab36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810ab3a:	4290      	cmp	r0, r2
 810ab3c:	d101      	bne.n	810ab42 <strncmp+0x1a>
 810ab3e:	42a3      	cmp	r3, r4
 810ab40:	d101      	bne.n	810ab46 <strncmp+0x1e>
 810ab42:	1a80      	subs	r0, r0, r2
 810ab44:	bd10      	pop	{r4, pc}
 810ab46:	2800      	cmp	r0, #0
 810ab48:	d1f3      	bne.n	810ab32 <strncmp+0xa>
 810ab4a:	e7fa      	b.n	810ab42 <strncmp+0x1a>
 810ab4c:	4610      	mov	r0, r2
 810ab4e:	e7f9      	b.n	810ab44 <strncmp+0x1c>

0810ab50 <strncpy>:
 810ab50:	b510      	push	{r4, lr}
 810ab52:	3901      	subs	r1, #1
 810ab54:	4603      	mov	r3, r0
 810ab56:	b132      	cbz	r2, 810ab66 <strncpy+0x16>
 810ab58:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810ab5c:	f803 4b01 	strb.w	r4, [r3], #1
 810ab60:	3a01      	subs	r2, #1
 810ab62:	2c00      	cmp	r4, #0
 810ab64:	d1f7      	bne.n	810ab56 <strncpy+0x6>
 810ab66:	441a      	add	r2, r3
 810ab68:	2100      	movs	r1, #0
 810ab6a:	4293      	cmp	r3, r2
 810ab6c:	d100      	bne.n	810ab70 <strncpy+0x20>
 810ab6e:	bd10      	pop	{r4, pc}
 810ab70:	f803 1b01 	strb.w	r1, [r3], #1
 810ab74:	e7f9      	b.n	810ab6a <strncpy+0x1a>
	...

0810ab78 <__swbuf_r>:
 810ab78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ab7a:	460e      	mov	r6, r1
 810ab7c:	4614      	mov	r4, r2
 810ab7e:	4605      	mov	r5, r0
 810ab80:	b118      	cbz	r0, 810ab8a <__swbuf_r+0x12>
 810ab82:	6983      	ldr	r3, [r0, #24]
 810ab84:	b90b      	cbnz	r3, 810ab8a <__swbuf_r+0x12>
 810ab86:	f000 f9d9 	bl	810af3c <__sinit>
 810ab8a:	4b21      	ldr	r3, [pc, #132]	; (810ac10 <__swbuf_r+0x98>)
 810ab8c:	429c      	cmp	r4, r3
 810ab8e:	d12b      	bne.n	810abe8 <__swbuf_r+0x70>
 810ab90:	686c      	ldr	r4, [r5, #4]
 810ab92:	69a3      	ldr	r3, [r4, #24]
 810ab94:	60a3      	str	r3, [r4, #8]
 810ab96:	89a3      	ldrh	r3, [r4, #12]
 810ab98:	071a      	lsls	r2, r3, #28
 810ab9a:	d52f      	bpl.n	810abfc <__swbuf_r+0x84>
 810ab9c:	6923      	ldr	r3, [r4, #16]
 810ab9e:	b36b      	cbz	r3, 810abfc <__swbuf_r+0x84>
 810aba0:	6923      	ldr	r3, [r4, #16]
 810aba2:	6820      	ldr	r0, [r4, #0]
 810aba4:	1ac0      	subs	r0, r0, r3
 810aba6:	6963      	ldr	r3, [r4, #20]
 810aba8:	b2f6      	uxtb	r6, r6
 810abaa:	4283      	cmp	r3, r0
 810abac:	4637      	mov	r7, r6
 810abae:	dc04      	bgt.n	810abba <__swbuf_r+0x42>
 810abb0:	4621      	mov	r1, r4
 810abb2:	4628      	mov	r0, r5
 810abb4:	f000 f92e 	bl	810ae14 <_fflush_r>
 810abb8:	bb30      	cbnz	r0, 810ac08 <__swbuf_r+0x90>
 810abba:	68a3      	ldr	r3, [r4, #8]
 810abbc:	3b01      	subs	r3, #1
 810abbe:	60a3      	str	r3, [r4, #8]
 810abc0:	6823      	ldr	r3, [r4, #0]
 810abc2:	1c5a      	adds	r2, r3, #1
 810abc4:	6022      	str	r2, [r4, #0]
 810abc6:	701e      	strb	r6, [r3, #0]
 810abc8:	6963      	ldr	r3, [r4, #20]
 810abca:	3001      	adds	r0, #1
 810abcc:	4283      	cmp	r3, r0
 810abce:	d004      	beq.n	810abda <__swbuf_r+0x62>
 810abd0:	89a3      	ldrh	r3, [r4, #12]
 810abd2:	07db      	lsls	r3, r3, #31
 810abd4:	d506      	bpl.n	810abe4 <__swbuf_r+0x6c>
 810abd6:	2e0a      	cmp	r6, #10
 810abd8:	d104      	bne.n	810abe4 <__swbuf_r+0x6c>
 810abda:	4621      	mov	r1, r4
 810abdc:	4628      	mov	r0, r5
 810abde:	f000 f919 	bl	810ae14 <_fflush_r>
 810abe2:	b988      	cbnz	r0, 810ac08 <__swbuf_r+0x90>
 810abe4:	4638      	mov	r0, r7
 810abe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810abe8:	4b0a      	ldr	r3, [pc, #40]	; (810ac14 <__swbuf_r+0x9c>)
 810abea:	429c      	cmp	r4, r3
 810abec:	d101      	bne.n	810abf2 <__swbuf_r+0x7a>
 810abee:	68ac      	ldr	r4, [r5, #8]
 810abf0:	e7cf      	b.n	810ab92 <__swbuf_r+0x1a>
 810abf2:	4b09      	ldr	r3, [pc, #36]	; (810ac18 <__swbuf_r+0xa0>)
 810abf4:	429c      	cmp	r4, r3
 810abf6:	bf08      	it	eq
 810abf8:	68ec      	ldreq	r4, [r5, #12]
 810abfa:	e7ca      	b.n	810ab92 <__swbuf_r+0x1a>
 810abfc:	4621      	mov	r1, r4
 810abfe:	4628      	mov	r0, r5
 810ac00:	f000 f80c 	bl	810ac1c <__swsetup_r>
 810ac04:	2800      	cmp	r0, #0
 810ac06:	d0cb      	beq.n	810aba0 <__swbuf_r+0x28>
 810ac08:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 810ac0c:	e7ea      	b.n	810abe4 <__swbuf_r+0x6c>
 810ac0e:	bf00      	nop
 810ac10:	0810b660 	.word	0x0810b660
 810ac14:	0810b680 	.word	0x0810b680
 810ac18:	0810b640 	.word	0x0810b640

0810ac1c <__swsetup_r>:
 810ac1c:	4b32      	ldr	r3, [pc, #200]	; (810ace8 <__swsetup_r+0xcc>)
 810ac1e:	b570      	push	{r4, r5, r6, lr}
 810ac20:	681d      	ldr	r5, [r3, #0]
 810ac22:	4606      	mov	r6, r0
 810ac24:	460c      	mov	r4, r1
 810ac26:	b125      	cbz	r5, 810ac32 <__swsetup_r+0x16>
 810ac28:	69ab      	ldr	r3, [r5, #24]
 810ac2a:	b913      	cbnz	r3, 810ac32 <__swsetup_r+0x16>
 810ac2c:	4628      	mov	r0, r5
 810ac2e:	f000 f985 	bl	810af3c <__sinit>
 810ac32:	4b2e      	ldr	r3, [pc, #184]	; (810acec <__swsetup_r+0xd0>)
 810ac34:	429c      	cmp	r4, r3
 810ac36:	d10f      	bne.n	810ac58 <__swsetup_r+0x3c>
 810ac38:	686c      	ldr	r4, [r5, #4]
 810ac3a:	89a3      	ldrh	r3, [r4, #12]
 810ac3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810ac40:	0719      	lsls	r1, r3, #28
 810ac42:	d42c      	bmi.n	810ac9e <__swsetup_r+0x82>
 810ac44:	06dd      	lsls	r5, r3, #27
 810ac46:	d411      	bmi.n	810ac6c <__swsetup_r+0x50>
 810ac48:	2309      	movs	r3, #9
 810ac4a:	6033      	str	r3, [r6, #0]
 810ac4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810ac50:	81a3      	strh	r3, [r4, #12]
 810ac52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ac56:	e03e      	b.n	810acd6 <__swsetup_r+0xba>
 810ac58:	4b25      	ldr	r3, [pc, #148]	; (810acf0 <__swsetup_r+0xd4>)
 810ac5a:	429c      	cmp	r4, r3
 810ac5c:	d101      	bne.n	810ac62 <__swsetup_r+0x46>
 810ac5e:	68ac      	ldr	r4, [r5, #8]
 810ac60:	e7eb      	b.n	810ac3a <__swsetup_r+0x1e>
 810ac62:	4b24      	ldr	r3, [pc, #144]	; (810acf4 <__swsetup_r+0xd8>)
 810ac64:	429c      	cmp	r4, r3
 810ac66:	bf08      	it	eq
 810ac68:	68ec      	ldreq	r4, [r5, #12]
 810ac6a:	e7e6      	b.n	810ac3a <__swsetup_r+0x1e>
 810ac6c:	0758      	lsls	r0, r3, #29
 810ac6e:	d512      	bpl.n	810ac96 <__swsetup_r+0x7a>
 810ac70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810ac72:	b141      	cbz	r1, 810ac86 <__swsetup_r+0x6a>
 810ac74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810ac78:	4299      	cmp	r1, r3
 810ac7a:	d002      	beq.n	810ac82 <__swsetup_r+0x66>
 810ac7c:	4630      	mov	r0, r6
 810ac7e:	f7ff fb75 	bl	810a36c <_free_r>
 810ac82:	2300      	movs	r3, #0
 810ac84:	6363      	str	r3, [r4, #52]	; 0x34
 810ac86:	89a3      	ldrh	r3, [r4, #12]
 810ac88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810ac8c:	81a3      	strh	r3, [r4, #12]
 810ac8e:	2300      	movs	r3, #0
 810ac90:	6063      	str	r3, [r4, #4]
 810ac92:	6923      	ldr	r3, [r4, #16]
 810ac94:	6023      	str	r3, [r4, #0]
 810ac96:	89a3      	ldrh	r3, [r4, #12]
 810ac98:	f043 0308 	orr.w	r3, r3, #8
 810ac9c:	81a3      	strh	r3, [r4, #12]
 810ac9e:	6923      	ldr	r3, [r4, #16]
 810aca0:	b94b      	cbnz	r3, 810acb6 <__swsetup_r+0x9a>
 810aca2:	89a3      	ldrh	r3, [r4, #12]
 810aca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810aca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810acac:	d003      	beq.n	810acb6 <__swsetup_r+0x9a>
 810acae:	4621      	mov	r1, r4
 810acb0:	4630      	mov	r0, r6
 810acb2:	f000 fa09 	bl	810b0c8 <__smakebuf_r>
 810acb6:	89a0      	ldrh	r0, [r4, #12]
 810acb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810acbc:	f010 0301 	ands.w	r3, r0, #1
 810acc0:	d00a      	beq.n	810acd8 <__swsetup_r+0xbc>
 810acc2:	2300      	movs	r3, #0
 810acc4:	60a3      	str	r3, [r4, #8]
 810acc6:	6963      	ldr	r3, [r4, #20]
 810acc8:	425b      	negs	r3, r3
 810acca:	61a3      	str	r3, [r4, #24]
 810accc:	6923      	ldr	r3, [r4, #16]
 810acce:	b943      	cbnz	r3, 810ace2 <__swsetup_r+0xc6>
 810acd0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810acd4:	d1ba      	bne.n	810ac4c <__swsetup_r+0x30>
 810acd6:	bd70      	pop	{r4, r5, r6, pc}
 810acd8:	0781      	lsls	r1, r0, #30
 810acda:	bf58      	it	pl
 810acdc:	6963      	ldrpl	r3, [r4, #20]
 810acde:	60a3      	str	r3, [r4, #8]
 810ace0:	e7f4      	b.n	810accc <__swsetup_r+0xb0>
 810ace2:	2000      	movs	r0, #0
 810ace4:	e7f7      	b.n	810acd6 <__swsetup_r+0xba>
 810ace6:	bf00      	nop
 810ace8:	100000b8 	.word	0x100000b8
 810acec:	0810b660 	.word	0x0810b660
 810acf0:	0810b680 	.word	0x0810b680
 810acf4:	0810b640 	.word	0x0810b640

0810acf8 <abort>:
 810acf8:	b508      	push	{r3, lr}
 810acfa:	2006      	movs	r0, #6
 810acfc:	f000 fa58 	bl	810b1b0 <raise>
 810ad00:	2001      	movs	r0, #1
 810ad02:	f7f6 fb7b 	bl	81013fc <_exit>
	...

0810ad08 <__sflush_r>:
 810ad08:	898a      	ldrh	r2, [r1, #12]
 810ad0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ad0e:	4605      	mov	r5, r0
 810ad10:	0710      	lsls	r0, r2, #28
 810ad12:	460c      	mov	r4, r1
 810ad14:	d458      	bmi.n	810adc8 <__sflush_r+0xc0>
 810ad16:	684b      	ldr	r3, [r1, #4]
 810ad18:	2b00      	cmp	r3, #0
 810ad1a:	dc05      	bgt.n	810ad28 <__sflush_r+0x20>
 810ad1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810ad1e:	2b00      	cmp	r3, #0
 810ad20:	dc02      	bgt.n	810ad28 <__sflush_r+0x20>
 810ad22:	2000      	movs	r0, #0
 810ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ad28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810ad2a:	2e00      	cmp	r6, #0
 810ad2c:	d0f9      	beq.n	810ad22 <__sflush_r+0x1a>
 810ad2e:	2300      	movs	r3, #0
 810ad30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810ad34:	682f      	ldr	r7, [r5, #0]
 810ad36:	602b      	str	r3, [r5, #0]
 810ad38:	d032      	beq.n	810ada0 <__sflush_r+0x98>
 810ad3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810ad3c:	89a3      	ldrh	r3, [r4, #12]
 810ad3e:	075a      	lsls	r2, r3, #29
 810ad40:	d505      	bpl.n	810ad4e <__sflush_r+0x46>
 810ad42:	6863      	ldr	r3, [r4, #4]
 810ad44:	1ac0      	subs	r0, r0, r3
 810ad46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810ad48:	b10b      	cbz	r3, 810ad4e <__sflush_r+0x46>
 810ad4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810ad4c:	1ac0      	subs	r0, r0, r3
 810ad4e:	2300      	movs	r3, #0
 810ad50:	4602      	mov	r2, r0
 810ad52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810ad54:	6a21      	ldr	r1, [r4, #32]
 810ad56:	4628      	mov	r0, r5
 810ad58:	47b0      	blx	r6
 810ad5a:	1c43      	adds	r3, r0, #1
 810ad5c:	89a3      	ldrh	r3, [r4, #12]
 810ad5e:	d106      	bne.n	810ad6e <__sflush_r+0x66>
 810ad60:	6829      	ldr	r1, [r5, #0]
 810ad62:	291d      	cmp	r1, #29
 810ad64:	d82c      	bhi.n	810adc0 <__sflush_r+0xb8>
 810ad66:	4a2a      	ldr	r2, [pc, #168]	; (810ae10 <__sflush_r+0x108>)
 810ad68:	40ca      	lsrs	r2, r1
 810ad6a:	07d6      	lsls	r6, r2, #31
 810ad6c:	d528      	bpl.n	810adc0 <__sflush_r+0xb8>
 810ad6e:	2200      	movs	r2, #0
 810ad70:	6062      	str	r2, [r4, #4]
 810ad72:	04d9      	lsls	r1, r3, #19
 810ad74:	6922      	ldr	r2, [r4, #16]
 810ad76:	6022      	str	r2, [r4, #0]
 810ad78:	d504      	bpl.n	810ad84 <__sflush_r+0x7c>
 810ad7a:	1c42      	adds	r2, r0, #1
 810ad7c:	d101      	bne.n	810ad82 <__sflush_r+0x7a>
 810ad7e:	682b      	ldr	r3, [r5, #0]
 810ad80:	b903      	cbnz	r3, 810ad84 <__sflush_r+0x7c>
 810ad82:	6560      	str	r0, [r4, #84]	; 0x54
 810ad84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810ad86:	602f      	str	r7, [r5, #0]
 810ad88:	2900      	cmp	r1, #0
 810ad8a:	d0ca      	beq.n	810ad22 <__sflush_r+0x1a>
 810ad8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810ad90:	4299      	cmp	r1, r3
 810ad92:	d002      	beq.n	810ad9a <__sflush_r+0x92>
 810ad94:	4628      	mov	r0, r5
 810ad96:	f7ff fae9 	bl	810a36c <_free_r>
 810ad9a:	2000      	movs	r0, #0
 810ad9c:	6360      	str	r0, [r4, #52]	; 0x34
 810ad9e:	e7c1      	b.n	810ad24 <__sflush_r+0x1c>
 810ada0:	6a21      	ldr	r1, [r4, #32]
 810ada2:	2301      	movs	r3, #1
 810ada4:	4628      	mov	r0, r5
 810ada6:	47b0      	blx	r6
 810ada8:	1c41      	adds	r1, r0, #1
 810adaa:	d1c7      	bne.n	810ad3c <__sflush_r+0x34>
 810adac:	682b      	ldr	r3, [r5, #0]
 810adae:	2b00      	cmp	r3, #0
 810adb0:	d0c4      	beq.n	810ad3c <__sflush_r+0x34>
 810adb2:	2b1d      	cmp	r3, #29
 810adb4:	d001      	beq.n	810adba <__sflush_r+0xb2>
 810adb6:	2b16      	cmp	r3, #22
 810adb8:	d101      	bne.n	810adbe <__sflush_r+0xb6>
 810adba:	602f      	str	r7, [r5, #0]
 810adbc:	e7b1      	b.n	810ad22 <__sflush_r+0x1a>
 810adbe:	89a3      	ldrh	r3, [r4, #12]
 810adc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810adc4:	81a3      	strh	r3, [r4, #12]
 810adc6:	e7ad      	b.n	810ad24 <__sflush_r+0x1c>
 810adc8:	690f      	ldr	r7, [r1, #16]
 810adca:	2f00      	cmp	r7, #0
 810adcc:	d0a9      	beq.n	810ad22 <__sflush_r+0x1a>
 810adce:	0793      	lsls	r3, r2, #30
 810add0:	680e      	ldr	r6, [r1, #0]
 810add2:	bf08      	it	eq
 810add4:	694b      	ldreq	r3, [r1, #20]
 810add6:	600f      	str	r7, [r1, #0]
 810add8:	bf18      	it	ne
 810adda:	2300      	movne	r3, #0
 810addc:	eba6 0807 	sub.w	r8, r6, r7
 810ade0:	608b      	str	r3, [r1, #8]
 810ade2:	f1b8 0f00 	cmp.w	r8, #0
 810ade6:	dd9c      	ble.n	810ad22 <__sflush_r+0x1a>
 810ade8:	6a21      	ldr	r1, [r4, #32]
 810adea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810adec:	4643      	mov	r3, r8
 810adee:	463a      	mov	r2, r7
 810adf0:	4628      	mov	r0, r5
 810adf2:	47b0      	blx	r6
 810adf4:	2800      	cmp	r0, #0
 810adf6:	dc06      	bgt.n	810ae06 <__sflush_r+0xfe>
 810adf8:	89a3      	ldrh	r3, [r4, #12]
 810adfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810adfe:	81a3      	strh	r3, [r4, #12]
 810ae00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810ae04:	e78e      	b.n	810ad24 <__sflush_r+0x1c>
 810ae06:	4407      	add	r7, r0
 810ae08:	eba8 0800 	sub.w	r8, r8, r0
 810ae0c:	e7e9      	b.n	810ade2 <__sflush_r+0xda>
 810ae0e:	bf00      	nop
 810ae10:	20400001 	.word	0x20400001

0810ae14 <_fflush_r>:
 810ae14:	b538      	push	{r3, r4, r5, lr}
 810ae16:	690b      	ldr	r3, [r1, #16]
 810ae18:	4605      	mov	r5, r0
 810ae1a:	460c      	mov	r4, r1
 810ae1c:	b913      	cbnz	r3, 810ae24 <_fflush_r+0x10>
 810ae1e:	2500      	movs	r5, #0
 810ae20:	4628      	mov	r0, r5
 810ae22:	bd38      	pop	{r3, r4, r5, pc}
 810ae24:	b118      	cbz	r0, 810ae2e <_fflush_r+0x1a>
 810ae26:	6983      	ldr	r3, [r0, #24]
 810ae28:	b90b      	cbnz	r3, 810ae2e <_fflush_r+0x1a>
 810ae2a:	f000 f887 	bl	810af3c <__sinit>
 810ae2e:	4b14      	ldr	r3, [pc, #80]	; (810ae80 <_fflush_r+0x6c>)
 810ae30:	429c      	cmp	r4, r3
 810ae32:	d11b      	bne.n	810ae6c <_fflush_r+0x58>
 810ae34:	686c      	ldr	r4, [r5, #4]
 810ae36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810ae3a:	2b00      	cmp	r3, #0
 810ae3c:	d0ef      	beq.n	810ae1e <_fflush_r+0xa>
 810ae3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810ae40:	07d0      	lsls	r0, r2, #31
 810ae42:	d404      	bmi.n	810ae4e <_fflush_r+0x3a>
 810ae44:	0599      	lsls	r1, r3, #22
 810ae46:	d402      	bmi.n	810ae4e <_fflush_r+0x3a>
 810ae48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810ae4a:	f000 f915 	bl	810b078 <__retarget_lock_acquire_recursive>
 810ae4e:	4628      	mov	r0, r5
 810ae50:	4621      	mov	r1, r4
 810ae52:	f7ff ff59 	bl	810ad08 <__sflush_r>
 810ae56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810ae58:	07da      	lsls	r2, r3, #31
 810ae5a:	4605      	mov	r5, r0
 810ae5c:	d4e0      	bmi.n	810ae20 <_fflush_r+0xc>
 810ae5e:	89a3      	ldrh	r3, [r4, #12]
 810ae60:	059b      	lsls	r3, r3, #22
 810ae62:	d4dd      	bmi.n	810ae20 <_fflush_r+0xc>
 810ae64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810ae66:	f000 f908 	bl	810b07a <__retarget_lock_release_recursive>
 810ae6a:	e7d9      	b.n	810ae20 <_fflush_r+0xc>
 810ae6c:	4b05      	ldr	r3, [pc, #20]	; (810ae84 <_fflush_r+0x70>)
 810ae6e:	429c      	cmp	r4, r3
 810ae70:	d101      	bne.n	810ae76 <_fflush_r+0x62>
 810ae72:	68ac      	ldr	r4, [r5, #8]
 810ae74:	e7df      	b.n	810ae36 <_fflush_r+0x22>
 810ae76:	4b04      	ldr	r3, [pc, #16]	; (810ae88 <_fflush_r+0x74>)
 810ae78:	429c      	cmp	r4, r3
 810ae7a:	bf08      	it	eq
 810ae7c:	68ec      	ldreq	r4, [r5, #12]
 810ae7e:	e7da      	b.n	810ae36 <_fflush_r+0x22>
 810ae80:	0810b660 	.word	0x0810b660
 810ae84:	0810b680 	.word	0x0810b680
 810ae88:	0810b640 	.word	0x0810b640

0810ae8c <std>:
 810ae8c:	2300      	movs	r3, #0
 810ae8e:	b510      	push	{r4, lr}
 810ae90:	4604      	mov	r4, r0
 810ae92:	e9c0 3300 	strd	r3, r3, [r0]
 810ae96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810ae9a:	6083      	str	r3, [r0, #8]
 810ae9c:	8181      	strh	r1, [r0, #12]
 810ae9e:	6643      	str	r3, [r0, #100]	; 0x64
 810aea0:	81c2      	strh	r2, [r0, #14]
 810aea2:	6183      	str	r3, [r0, #24]
 810aea4:	4619      	mov	r1, r3
 810aea6:	2208      	movs	r2, #8
 810aea8:	305c      	adds	r0, #92	; 0x5c
 810aeaa:	f7ff fa57 	bl	810a35c <memset>
 810aeae:	4b05      	ldr	r3, [pc, #20]	; (810aec4 <std+0x38>)
 810aeb0:	6263      	str	r3, [r4, #36]	; 0x24
 810aeb2:	4b05      	ldr	r3, [pc, #20]	; (810aec8 <std+0x3c>)
 810aeb4:	62a3      	str	r3, [r4, #40]	; 0x28
 810aeb6:	4b05      	ldr	r3, [pc, #20]	; (810aecc <std+0x40>)
 810aeb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 810aeba:	4b05      	ldr	r3, [pc, #20]	; (810aed0 <std+0x44>)
 810aebc:	6224      	str	r4, [r4, #32]
 810aebe:	6323      	str	r3, [r4, #48]	; 0x30
 810aec0:	bd10      	pop	{r4, pc}
 810aec2:	bf00      	nop
 810aec4:	0810b1e9 	.word	0x0810b1e9
 810aec8:	0810b20b 	.word	0x0810b20b
 810aecc:	0810b243 	.word	0x0810b243
 810aed0:	0810b267 	.word	0x0810b267

0810aed4 <_cleanup_r>:
 810aed4:	4901      	ldr	r1, [pc, #4]	; (810aedc <_cleanup_r+0x8>)
 810aed6:	f000 b8af 	b.w	810b038 <_fwalk_reent>
 810aeda:	bf00      	nop
 810aedc:	0810ae15 	.word	0x0810ae15

0810aee0 <__sfmoreglue>:
 810aee0:	b570      	push	{r4, r5, r6, lr}
 810aee2:	2268      	movs	r2, #104	; 0x68
 810aee4:	1e4d      	subs	r5, r1, #1
 810aee6:	4355      	muls	r5, r2
 810aee8:	460e      	mov	r6, r1
 810aeea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 810aeee:	f7ff faa9 	bl	810a444 <_malloc_r>
 810aef2:	4604      	mov	r4, r0
 810aef4:	b140      	cbz	r0, 810af08 <__sfmoreglue+0x28>
 810aef6:	2100      	movs	r1, #0
 810aef8:	e9c0 1600 	strd	r1, r6, [r0]
 810aefc:	300c      	adds	r0, #12
 810aefe:	60a0      	str	r0, [r4, #8]
 810af00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810af04:	f7ff fa2a 	bl	810a35c <memset>
 810af08:	4620      	mov	r0, r4
 810af0a:	bd70      	pop	{r4, r5, r6, pc}

0810af0c <__sfp_lock_acquire>:
 810af0c:	4801      	ldr	r0, [pc, #4]	; (810af14 <__sfp_lock_acquire+0x8>)
 810af0e:	f000 b8b3 	b.w	810b078 <__retarget_lock_acquire_recursive>
 810af12:	bf00      	nop
 810af14:	100005a9 	.word	0x100005a9

0810af18 <__sfp_lock_release>:
 810af18:	4801      	ldr	r0, [pc, #4]	; (810af20 <__sfp_lock_release+0x8>)
 810af1a:	f000 b8ae 	b.w	810b07a <__retarget_lock_release_recursive>
 810af1e:	bf00      	nop
 810af20:	100005a9 	.word	0x100005a9

0810af24 <__sinit_lock_acquire>:
 810af24:	4801      	ldr	r0, [pc, #4]	; (810af2c <__sinit_lock_acquire+0x8>)
 810af26:	f000 b8a7 	b.w	810b078 <__retarget_lock_acquire_recursive>
 810af2a:	bf00      	nop
 810af2c:	100005aa 	.word	0x100005aa

0810af30 <__sinit_lock_release>:
 810af30:	4801      	ldr	r0, [pc, #4]	; (810af38 <__sinit_lock_release+0x8>)
 810af32:	f000 b8a2 	b.w	810b07a <__retarget_lock_release_recursive>
 810af36:	bf00      	nop
 810af38:	100005aa 	.word	0x100005aa

0810af3c <__sinit>:
 810af3c:	b510      	push	{r4, lr}
 810af3e:	4604      	mov	r4, r0
 810af40:	f7ff fff0 	bl	810af24 <__sinit_lock_acquire>
 810af44:	69a3      	ldr	r3, [r4, #24]
 810af46:	b11b      	cbz	r3, 810af50 <__sinit+0x14>
 810af48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810af4c:	f7ff bff0 	b.w	810af30 <__sinit_lock_release>
 810af50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 810af54:	6523      	str	r3, [r4, #80]	; 0x50
 810af56:	4b13      	ldr	r3, [pc, #76]	; (810afa4 <__sinit+0x68>)
 810af58:	4a13      	ldr	r2, [pc, #76]	; (810afa8 <__sinit+0x6c>)
 810af5a:	681b      	ldr	r3, [r3, #0]
 810af5c:	62a2      	str	r2, [r4, #40]	; 0x28
 810af5e:	42a3      	cmp	r3, r4
 810af60:	bf04      	itt	eq
 810af62:	2301      	moveq	r3, #1
 810af64:	61a3      	streq	r3, [r4, #24]
 810af66:	4620      	mov	r0, r4
 810af68:	f000 f820 	bl	810afac <__sfp>
 810af6c:	6060      	str	r0, [r4, #4]
 810af6e:	4620      	mov	r0, r4
 810af70:	f000 f81c 	bl	810afac <__sfp>
 810af74:	60a0      	str	r0, [r4, #8]
 810af76:	4620      	mov	r0, r4
 810af78:	f000 f818 	bl	810afac <__sfp>
 810af7c:	2200      	movs	r2, #0
 810af7e:	60e0      	str	r0, [r4, #12]
 810af80:	2104      	movs	r1, #4
 810af82:	6860      	ldr	r0, [r4, #4]
 810af84:	f7ff ff82 	bl	810ae8c <std>
 810af88:	68a0      	ldr	r0, [r4, #8]
 810af8a:	2201      	movs	r2, #1
 810af8c:	2109      	movs	r1, #9
 810af8e:	f7ff ff7d 	bl	810ae8c <std>
 810af92:	68e0      	ldr	r0, [r4, #12]
 810af94:	2202      	movs	r2, #2
 810af96:	2112      	movs	r1, #18
 810af98:	f7ff ff78 	bl	810ae8c <std>
 810af9c:	2301      	movs	r3, #1
 810af9e:	61a3      	str	r3, [r4, #24]
 810afa0:	e7d2      	b.n	810af48 <__sinit+0xc>
 810afa2:	bf00      	nop
 810afa4:	0810b608 	.word	0x0810b608
 810afa8:	0810aed5 	.word	0x0810aed5

0810afac <__sfp>:
 810afac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810afae:	4607      	mov	r7, r0
 810afb0:	f7ff ffac 	bl	810af0c <__sfp_lock_acquire>
 810afb4:	4b1e      	ldr	r3, [pc, #120]	; (810b030 <__sfp+0x84>)
 810afb6:	681e      	ldr	r6, [r3, #0]
 810afb8:	69b3      	ldr	r3, [r6, #24]
 810afba:	b913      	cbnz	r3, 810afc2 <__sfp+0x16>
 810afbc:	4630      	mov	r0, r6
 810afbe:	f7ff ffbd 	bl	810af3c <__sinit>
 810afc2:	3648      	adds	r6, #72	; 0x48
 810afc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810afc8:	3b01      	subs	r3, #1
 810afca:	d503      	bpl.n	810afd4 <__sfp+0x28>
 810afcc:	6833      	ldr	r3, [r6, #0]
 810afce:	b30b      	cbz	r3, 810b014 <__sfp+0x68>
 810afd0:	6836      	ldr	r6, [r6, #0]
 810afd2:	e7f7      	b.n	810afc4 <__sfp+0x18>
 810afd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810afd8:	b9d5      	cbnz	r5, 810b010 <__sfp+0x64>
 810afda:	4b16      	ldr	r3, [pc, #88]	; (810b034 <__sfp+0x88>)
 810afdc:	60e3      	str	r3, [r4, #12]
 810afde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810afe2:	6665      	str	r5, [r4, #100]	; 0x64
 810afe4:	f000 f847 	bl	810b076 <__retarget_lock_init_recursive>
 810afe8:	f7ff ff96 	bl	810af18 <__sfp_lock_release>
 810afec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 810aff0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810aff4:	6025      	str	r5, [r4, #0]
 810aff6:	61a5      	str	r5, [r4, #24]
 810aff8:	2208      	movs	r2, #8
 810affa:	4629      	mov	r1, r5
 810affc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 810b000:	f7ff f9ac 	bl	810a35c <memset>
 810b004:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810b008:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 810b00c:	4620      	mov	r0, r4
 810b00e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b010:	3468      	adds	r4, #104	; 0x68
 810b012:	e7d9      	b.n	810afc8 <__sfp+0x1c>
 810b014:	2104      	movs	r1, #4
 810b016:	4638      	mov	r0, r7
 810b018:	f7ff ff62 	bl	810aee0 <__sfmoreglue>
 810b01c:	4604      	mov	r4, r0
 810b01e:	6030      	str	r0, [r6, #0]
 810b020:	2800      	cmp	r0, #0
 810b022:	d1d5      	bne.n	810afd0 <__sfp+0x24>
 810b024:	f7ff ff78 	bl	810af18 <__sfp_lock_release>
 810b028:	230c      	movs	r3, #12
 810b02a:	603b      	str	r3, [r7, #0]
 810b02c:	e7ee      	b.n	810b00c <__sfp+0x60>
 810b02e:	bf00      	nop
 810b030:	0810b608 	.word	0x0810b608
 810b034:	ffff0001 	.word	0xffff0001

0810b038 <_fwalk_reent>:
 810b038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b03c:	4606      	mov	r6, r0
 810b03e:	4688      	mov	r8, r1
 810b040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810b044:	2700      	movs	r7, #0
 810b046:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810b04a:	f1b9 0901 	subs.w	r9, r9, #1
 810b04e:	d505      	bpl.n	810b05c <_fwalk_reent+0x24>
 810b050:	6824      	ldr	r4, [r4, #0]
 810b052:	2c00      	cmp	r4, #0
 810b054:	d1f7      	bne.n	810b046 <_fwalk_reent+0xe>
 810b056:	4638      	mov	r0, r7
 810b058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b05c:	89ab      	ldrh	r3, [r5, #12]
 810b05e:	2b01      	cmp	r3, #1
 810b060:	d907      	bls.n	810b072 <_fwalk_reent+0x3a>
 810b062:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810b066:	3301      	adds	r3, #1
 810b068:	d003      	beq.n	810b072 <_fwalk_reent+0x3a>
 810b06a:	4629      	mov	r1, r5
 810b06c:	4630      	mov	r0, r6
 810b06e:	47c0      	blx	r8
 810b070:	4307      	orrs	r7, r0
 810b072:	3568      	adds	r5, #104	; 0x68
 810b074:	e7e9      	b.n	810b04a <_fwalk_reent+0x12>

0810b076 <__retarget_lock_init_recursive>:
 810b076:	4770      	bx	lr

0810b078 <__retarget_lock_acquire_recursive>:
 810b078:	4770      	bx	lr

0810b07a <__retarget_lock_release_recursive>:
 810b07a:	4770      	bx	lr

0810b07c <__swhatbuf_r>:
 810b07c:	b570      	push	{r4, r5, r6, lr}
 810b07e:	460e      	mov	r6, r1
 810b080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b084:	2900      	cmp	r1, #0
 810b086:	b096      	sub	sp, #88	; 0x58
 810b088:	4614      	mov	r4, r2
 810b08a:	461d      	mov	r5, r3
 810b08c:	da08      	bge.n	810b0a0 <__swhatbuf_r+0x24>
 810b08e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 810b092:	2200      	movs	r2, #0
 810b094:	602a      	str	r2, [r5, #0]
 810b096:	061a      	lsls	r2, r3, #24
 810b098:	d410      	bmi.n	810b0bc <__swhatbuf_r+0x40>
 810b09a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810b09e:	e00e      	b.n	810b0be <__swhatbuf_r+0x42>
 810b0a0:	466a      	mov	r2, sp
 810b0a2:	f000 f907 	bl	810b2b4 <_fstat_r>
 810b0a6:	2800      	cmp	r0, #0
 810b0a8:	dbf1      	blt.n	810b08e <__swhatbuf_r+0x12>
 810b0aa:	9a01      	ldr	r2, [sp, #4]
 810b0ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810b0b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810b0b4:	425a      	negs	r2, r3
 810b0b6:	415a      	adcs	r2, r3
 810b0b8:	602a      	str	r2, [r5, #0]
 810b0ba:	e7ee      	b.n	810b09a <__swhatbuf_r+0x1e>
 810b0bc:	2340      	movs	r3, #64	; 0x40
 810b0be:	2000      	movs	r0, #0
 810b0c0:	6023      	str	r3, [r4, #0]
 810b0c2:	b016      	add	sp, #88	; 0x58
 810b0c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0810b0c8 <__smakebuf_r>:
 810b0c8:	898b      	ldrh	r3, [r1, #12]
 810b0ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b0cc:	079d      	lsls	r5, r3, #30
 810b0ce:	4606      	mov	r6, r0
 810b0d0:	460c      	mov	r4, r1
 810b0d2:	d507      	bpl.n	810b0e4 <__smakebuf_r+0x1c>
 810b0d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810b0d8:	6023      	str	r3, [r4, #0]
 810b0da:	6123      	str	r3, [r4, #16]
 810b0dc:	2301      	movs	r3, #1
 810b0de:	6163      	str	r3, [r4, #20]
 810b0e0:	b002      	add	sp, #8
 810b0e2:	bd70      	pop	{r4, r5, r6, pc}
 810b0e4:	ab01      	add	r3, sp, #4
 810b0e6:	466a      	mov	r2, sp
 810b0e8:	f7ff ffc8 	bl	810b07c <__swhatbuf_r>
 810b0ec:	9900      	ldr	r1, [sp, #0]
 810b0ee:	4605      	mov	r5, r0
 810b0f0:	4630      	mov	r0, r6
 810b0f2:	f7ff f9a7 	bl	810a444 <_malloc_r>
 810b0f6:	b948      	cbnz	r0, 810b10c <__smakebuf_r+0x44>
 810b0f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810b0fc:	059a      	lsls	r2, r3, #22
 810b0fe:	d4ef      	bmi.n	810b0e0 <__smakebuf_r+0x18>
 810b100:	f023 0303 	bic.w	r3, r3, #3
 810b104:	f043 0302 	orr.w	r3, r3, #2
 810b108:	81a3      	strh	r3, [r4, #12]
 810b10a:	e7e3      	b.n	810b0d4 <__smakebuf_r+0xc>
 810b10c:	4b0d      	ldr	r3, [pc, #52]	; (810b144 <__smakebuf_r+0x7c>)
 810b10e:	62b3      	str	r3, [r6, #40]	; 0x28
 810b110:	89a3      	ldrh	r3, [r4, #12]
 810b112:	6020      	str	r0, [r4, #0]
 810b114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b118:	81a3      	strh	r3, [r4, #12]
 810b11a:	9b00      	ldr	r3, [sp, #0]
 810b11c:	6163      	str	r3, [r4, #20]
 810b11e:	9b01      	ldr	r3, [sp, #4]
 810b120:	6120      	str	r0, [r4, #16]
 810b122:	b15b      	cbz	r3, 810b13c <__smakebuf_r+0x74>
 810b124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b128:	4630      	mov	r0, r6
 810b12a:	f000 f8d5 	bl	810b2d8 <_isatty_r>
 810b12e:	b128      	cbz	r0, 810b13c <__smakebuf_r+0x74>
 810b130:	89a3      	ldrh	r3, [r4, #12]
 810b132:	f023 0303 	bic.w	r3, r3, #3
 810b136:	f043 0301 	orr.w	r3, r3, #1
 810b13a:	81a3      	strh	r3, [r4, #12]
 810b13c:	89a0      	ldrh	r0, [r4, #12]
 810b13e:	4305      	orrs	r5, r0
 810b140:	81a5      	strh	r5, [r4, #12]
 810b142:	e7cd      	b.n	810b0e0 <__smakebuf_r+0x18>
 810b144:	0810aed5 	.word	0x0810aed5

0810b148 <__malloc_lock>:
 810b148:	4801      	ldr	r0, [pc, #4]	; (810b150 <__malloc_lock+0x8>)
 810b14a:	f7ff bf95 	b.w	810b078 <__retarget_lock_acquire_recursive>
 810b14e:	bf00      	nop
 810b150:	100005a8 	.word	0x100005a8

0810b154 <__malloc_unlock>:
 810b154:	4801      	ldr	r0, [pc, #4]	; (810b15c <__malloc_unlock+0x8>)
 810b156:	f7ff bf90 	b.w	810b07a <__retarget_lock_release_recursive>
 810b15a:	bf00      	nop
 810b15c:	100005a8 	.word	0x100005a8

0810b160 <_raise_r>:
 810b160:	291f      	cmp	r1, #31
 810b162:	b538      	push	{r3, r4, r5, lr}
 810b164:	4604      	mov	r4, r0
 810b166:	460d      	mov	r5, r1
 810b168:	d904      	bls.n	810b174 <_raise_r+0x14>
 810b16a:	2316      	movs	r3, #22
 810b16c:	6003      	str	r3, [r0, #0]
 810b16e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810b172:	bd38      	pop	{r3, r4, r5, pc}
 810b174:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b176:	b112      	cbz	r2, 810b17e <_raise_r+0x1e>
 810b178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b17c:	b94b      	cbnz	r3, 810b192 <_raise_r+0x32>
 810b17e:	4620      	mov	r0, r4
 810b180:	f000 f830 	bl	810b1e4 <_getpid_r>
 810b184:	462a      	mov	r2, r5
 810b186:	4601      	mov	r1, r0
 810b188:	4620      	mov	r0, r4
 810b18a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b18e:	f000 b817 	b.w	810b1c0 <_kill_r>
 810b192:	2b01      	cmp	r3, #1
 810b194:	d00a      	beq.n	810b1ac <_raise_r+0x4c>
 810b196:	1c59      	adds	r1, r3, #1
 810b198:	d103      	bne.n	810b1a2 <_raise_r+0x42>
 810b19a:	2316      	movs	r3, #22
 810b19c:	6003      	str	r3, [r0, #0]
 810b19e:	2001      	movs	r0, #1
 810b1a0:	e7e7      	b.n	810b172 <_raise_r+0x12>
 810b1a2:	2400      	movs	r4, #0
 810b1a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b1a8:	4628      	mov	r0, r5
 810b1aa:	4798      	blx	r3
 810b1ac:	2000      	movs	r0, #0
 810b1ae:	e7e0      	b.n	810b172 <_raise_r+0x12>

0810b1b0 <raise>:
 810b1b0:	4b02      	ldr	r3, [pc, #8]	; (810b1bc <raise+0xc>)
 810b1b2:	4601      	mov	r1, r0
 810b1b4:	6818      	ldr	r0, [r3, #0]
 810b1b6:	f7ff bfd3 	b.w	810b160 <_raise_r>
 810b1ba:	bf00      	nop
 810b1bc:	100000b8 	.word	0x100000b8

0810b1c0 <_kill_r>:
 810b1c0:	b538      	push	{r3, r4, r5, lr}
 810b1c2:	4d07      	ldr	r5, [pc, #28]	; (810b1e0 <_kill_r+0x20>)
 810b1c4:	2300      	movs	r3, #0
 810b1c6:	4604      	mov	r4, r0
 810b1c8:	4608      	mov	r0, r1
 810b1ca:	4611      	mov	r1, r2
 810b1cc:	602b      	str	r3, [r5, #0]
 810b1ce:	f7f6 f905 	bl	81013dc <_kill>
 810b1d2:	1c43      	adds	r3, r0, #1
 810b1d4:	d102      	bne.n	810b1dc <_kill_r+0x1c>
 810b1d6:	682b      	ldr	r3, [r5, #0]
 810b1d8:	b103      	cbz	r3, 810b1dc <_kill_r+0x1c>
 810b1da:	6023      	str	r3, [r4, #0]
 810b1dc:	bd38      	pop	{r3, r4, r5, pc}
 810b1de:	bf00      	nop
 810b1e0:	100005ac 	.word	0x100005ac

0810b1e4 <_getpid_r>:
 810b1e4:	f7f6 b8f2 	b.w	81013cc <_getpid>

0810b1e8 <__sread>:
 810b1e8:	b510      	push	{r4, lr}
 810b1ea:	460c      	mov	r4, r1
 810b1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b1f0:	f000 f894 	bl	810b31c <_read_r>
 810b1f4:	2800      	cmp	r0, #0
 810b1f6:	bfab      	itete	ge
 810b1f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810b1fa:	89a3      	ldrhlt	r3, [r4, #12]
 810b1fc:	181b      	addge	r3, r3, r0
 810b1fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810b202:	bfac      	ite	ge
 810b204:	6563      	strge	r3, [r4, #84]	; 0x54
 810b206:	81a3      	strhlt	r3, [r4, #12]
 810b208:	bd10      	pop	{r4, pc}

0810b20a <__swrite>:
 810b20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b20e:	461f      	mov	r7, r3
 810b210:	898b      	ldrh	r3, [r1, #12]
 810b212:	05db      	lsls	r3, r3, #23
 810b214:	4605      	mov	r5, r0
 810b216:	460c      	mov	r4, r1
 810b218:	4616      	mov	r6, r2
 810b21a:	d505      	bpl.n	810b228 <__swrite+0x1e>
 810b21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b220:	2302      	movs	r3, #2
 810b222:	2200      	movs	r2, #0
 810b224:	f000 f868 	bl	810b2f8 <_lseek_r>
 810b228:	89a3      	ldrh	r3, [r4, #12]
 810b22a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810b22e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810b232:	81a3      	strh	r3, [r4, #12]
 810b234:	4632      	mov	r2, r6
 810b236:	463b      	mov	r3, r7
 810b238:	4628      	mov	r0, r5
 810b23a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810b23e:	f000 b817 	b.w	810b270 <_write_r>

0810b242 <__sseek>:
 810b242:	b510      	push	{r4, lr}
 810b244:	460c      	mov	r4, r1
 810b246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b24a:	f000 f855 	bl	810b2f8 <_lseek_r>
 810b24e:	1c43      	adds	r3, r0, #1
 810b250:	89a3      	ldrh	r3, [r4, #12]
 810b252:	bf15      	itete	ne
 810b254:	6560      	strne	r0, [r4, #84]	; 0x54
 810b256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810b25a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810b25e:	81a3      	strheq	r3, [r4, #12]
 810b260:	bf18      	it	ne
 810b262:	81a3      	strhne	r3, [r4, #12]
 810b264:	bd10      	pop	{r4, pc}

0810b266 <__sclose>:
 810b266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810b26a:	f000 b813 	b.w	810b294 <_close_r>
	...

0810b270 <_write_r>:
 810b270:	b538      	push	{r3, r4, r5, lr}
 810b272:	4d07      	ldr	r5, [pc, #28]	; (810b290 <_write_r+0x20>)
 810b274:	4604      	mov	r4, r0
 810b276:	4608      	mov	r0, r1
 810b278:	4611      	mov	r1, r2
 810b27a:	2200      	movs	r2, #0
 810b27c:	602a      	str	r2, [r5, #0]
 810b27e:	461a      	mov	r2, r3
 810b280:	f7f6 f8e3 	bl	810144a <_write>
 810b284:	1c43      	adds	r3, r0, #1
 810b286:	d102      	bne.n	810b28e <_write_r+0x1e>
 810b288:	682b      	ldr	r3, [r5, #0]
 810b28a:	b103      	cbz	r3, 810b28e <_write_r+0x1e>
 810b28c:	6023      	str	r3, [r4, #0]
 810b28e:	bd38      	pop	{r3, r4, r5, pc}
 810b290:	100005ac 	.word	0x100005ac

0810b294 <_close_r>:
 810b294:	b538      	push	{r3, r4, r5, lr}
 810b296:	4d06      	ldr	r5, [pc, #24]	; (810b2b0 <_close_r+0x1c>)
 810b298:	2300      	movs	r3, #0
 810b29a:	4604      	mov	r4, r0
 810b29c:	4608      	mov	r0, r1
 810b29e:	602b      	str	r3, [r5, #0]
 810b2a0:	f7f6 f8ef 	bl	8101482 <_close>
 810b2a4:	1c43      	adds	r3, r0, #1
 810b2a6:	d102      	bne.n	810b2ae <_close_r+0x1a>
 810b2a8:	682b      	ldr	r3, [r5, #0]
 810b2aa:	b103      	cbz	r3, 810b2ae <_close_r+0x1a>
 810b2ac:	6023      	str	r3, [r4, #0]
 810b2ae:	bd38      	pop	{r3, r4, r5, pc}
 810b2b0:	100005ac 	.word	0x100005ac

0810b2b4 <_fstat_r>:
 810b2b4:	b538      	push	{r3, r4, r5, lr}
 810b2b6:	4d07      	ldr	r5, [pc, #28]	; (810b2d4 <_fstat_r+0x20>)
 810b2b8:	2300      	movs	r3, #0
 810b2ba:	4604      	mov	r4, r0
 810b2bc:	4608      	mov	r0, r1
 810b2be:	4611      	mov	r1, r2
 810b2c0:	602b      	str	r3, [r5, #0]
 810b2c2:	f7f6 f8ea 	bl	810149a <_fstat>
 810b2c6:	1c43      	adds	r3, r0, #1
 810b2c8:	d102      	bne.n	810b2d0 <_fstat_r+0x1c>
 810b2ca:	682b      	ldr	r3, [r5, #0]
 810b2cc:	b103      	cbz	r3, 810b2d0 <_fstat_r+0x1c>
 810b2ce:	6023      	str	r3, [r4, #0]
 810b2d0:	bd38      	pop	{r3, r4, r5, pc}
 810b2d2:	bf00      	nop
 810b2d4:	100005ac 	.word	0x100005ac

0810b2d8 <_isatty_r>:
 810b2d8:	b538      	push	{r3, r4, r5, lr}
 810b2da:	4d06      	ldr	r5, [pc, #24]	; (810b2f4 <_isatty_r+0x1c>)
 810b2dc:	2300      	movs	r3, #0
 810b2de:	4604      	mov	r4, r0
 810b2e0:	4608      	mov	r0, r1
 810b2e2:	602b      	str	r3, [r5, #0]
 810b2e4:	f7f6 f8e9 	bl	81014ba <_isatty>
 810b2e8:	1c43      	adds	r3, r0, #1
 810b2ea:	d102      	bne.n	810b2f2 <_isatty_r+0x1a>
 810b2ec:	682b      	ldr	r3, [r5, #0]
 810b2ee:	b103      	cbz	r3, 810b2f2 <_isatty_r+0x1a>
 810b2f0:	6023      	str	r3, [r4, #0]
 810b2f2:	bd38      	pop	{r3, r4, r5, pc}
 810b2f4:	100005ac 	.word	0x100005ac

0810b2f8 <_lseek_r>:
 810b2f8:	b538      	push	{r3, r4, r5, lr}
 810b2fa:	4d07      	ldr	r5, [pc, #28]	; (810b318 <_lseek_r+0x20>)
 810b2fc:	4604      	mov	r4, r0
 810b2fe:	4608      	mov	r0, r1
 810b300:	4611      	mov	r1, r2
 810b302:	2200      	movs	r2, #0
 810b304:	602a      	str	r2, [r5, #0]
 810b306:	461a      	mov	r2, r3
 810b308:	f7f6 f8e2 	bl	81014d0 <_lseek>
 810b30c:	1c43      	adds	r3, r0, #1
 810b30e:	d102      	bne.n	810b316 <_lseek_r+0x1e>
 810b310:	682b      	ldr	r3, [r5, #0]
 810b312:	b103      	cbz	r3, 810b316 <_lseek_r+0x1e>
 810b314:	6023      	str	r3, [r4, #0]
 810b316:	bd38      	pop	{r3, r4, r5, pc}
 810b318:	100005ac 	.word	0x100005ac

0810b31c <_read_r>:
 810b31c:	b538      	push	{r3, r4, r5, lr}
 810b31e:	4d07      	ldr	r5, [pc, #28]	; (810b33c <_read_r+0x20>)
 810b320:	4604      	mov	r4, r0
 810b322:	4608      	mov	r0, r1
 810b324:	4611      	mov	r1, r2
 810b326:	2200      	movs	r2, #0
 810b328:	602a      	str	r2, [r5, #0]
 810b32a:	461a      	mov	r2, r3
 810b32c:	f7f6 f870 	bl	8101410 <_read>
 810b330:	1c43      	adds	r3, r0, #1
 810b332:	d102      	bne.n	810b33a <_read_r+0x1e>
 810b334:	682b      	ldr	r3, [r5, #0]
 810b336:	b103      	cbz	r3, 810b33a <_read_r+0x1e>
 810b338:	6023      	str	r3, [r4, #0]
 810b33a:	bd38      	pop	{r3, r4, r5, pc}
 810b33c:	100005ac 	.word	0x100005ac

0810b340 <_init>:
 810b340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b342:	bf00      	nop
 810b344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b346:	bc08      	pop	{r3}
 810b348:	469e      	mov	lr, r3
 810b34a:	4770      	bx	lr

0810b34c <_fini>:
 810b34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b34e:	bf00      	nop
 810b350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b352:	bc08      	pop	{r3}
 810b354:	469e      	mov	lr, r3
 810b356:	4770      	bx	lr
