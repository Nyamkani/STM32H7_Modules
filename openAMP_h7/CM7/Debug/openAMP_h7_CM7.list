
openAMP_h7_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad7c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  0800b01c  0800b01c  0001b01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3d0  0800b3d0  00020120  2**0
                  CONTENTS
  4 .ARM          00000000  0800b3d0  0800b3d0  00020120  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b3d0  0800b3d0  00020120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3d0  0800b3d0  0001b3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3d4  0800b3d4  0001b3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000120  24000000  0800b3d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008450  24000120  0800b4f8  00020120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24008570  0800b4f8  00028570  2**0
                  ALLOC
 11 .openamp_section 0000008c  38000000  0800b4f8  00030000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002daee  00000000  00000000  0002014e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f9b  00000000  00000000  0004dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e28  00000000  00000000  00053bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b98  00000000  00000000  00055a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019e8f  00000000  00000000  00057598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000c4c0  00000000  00000000  00071427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007d8e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084b4  00000000  00000000  0007d938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b004 	.word	0x0800b004

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	0800b004 	.word	0x0800b004

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003a4:	4b3d      	ldr	r3, [pc, #244]	; (800049c <SystemInit+0xfc>)
 80003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003aa:	4a3c      	ldr	r2, [pc, #240]	; (800049c <SystemInit+0xfc>)
 80003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80003b4:	4b39      	ldr	r3, [pc, #228]	; (800049c <SystemInit+0xfc>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	4a38      	ldr	r2, [pc, #224]	; (800049c <SystemInit+0xfc>)
 80003ba:	f043 0310 	orr.w	r3, r3, #16
 80003be:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003c0:	4b37      	ldr	r3, [pc, #220]	; (80004a0 <SystemInit+0x100>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f003 030f 	and.w	r3, r3, #15
 80003c8:	2b06      	cmp	r3, #6
 80003ca:	d807      	bhi.n	80003dc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003cc:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <SystemInit+0x100>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f023 030f 	bic.w	r3, r3, #15
 80003d4:	4a32      	ldr	r2, [pc, #200]	; (80004a0 <SystemInit+0x100>)
 80003d6:	f043 0307 	orr.w	r3, r3, #7
 80003da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003dc:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <SystemInit+0x104>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a30      	ldr	r2, [pc, #192]	; (80004a4 <SystemInit+0x104>)
 80003e2:	f043 0301 	orr.w	r3, r3, #1
 80003e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e8:	4b2e      	ldr	r3, [pc, #184]	; (80004a4 <SystemInit+0x104>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ee:	4b2d      	ldr	r3, [pc, #180]	; (80004a4 <SystemInit+0x104>)
 80003f0:	681a      	ldr	r2, [r3, #0]
 80003f2:	492c      	ldr	r1, [pc, #176]	; (80004a4 <SystemInit+0x104>)
 80003f4:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <SystemInit+0x108>)
 80003f6:	4013      	ands	r3, r2
 80003f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003fa:	4b29      	ldr	r3, [pc, #164]	; (80004a0 <SystemInit+0x100>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	2b00      	cmp	r3, #0
 8000404:	d007      	beq.n	8000416 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000406:	4b26      	ldr	r3, [pc, #152]	; (80004a0 <SystemInit+0x100>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f023 030f 	bic.w	r3, r3, #15
 800040e:	4a24      	ldr	r2, [pc, #144]	; (80004a0 <SystemInit+0x100>)
 8000410:	f043 0307 	orr.w	r3, r3, #7
 8000414:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000416:	4b23      	ldr	r3, [pc, #140]	; (80004a4 <SystemInit+0x104>)
 8000418:	2200      	movs	r2, #0
 800041a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800041c:	4b21      	ldr	r3, [pc, #132]	; (80004a4 <SystemInit+0x104>)
 800041e:	2200      	movs	r2, #0
 8000420:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000422:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <SystemInit+0x104>)
 8000424:	2200      	movs	r2, #0
 8000426:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000428:	4b1e      	ldr	r3, [pc, #120]	; (80004a4 <SystemInit+0x104>)
 800042a:	4a20      	ldr	r2, [pc, #128]	; (80004ac <SystemInit+0x10c>)
 800042c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800042e:	4b1d      	ldr	r3, [pc, #116]	; (80004a4 <SystemInit+0x104>)
 8000430:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <SystemInit+0x110>)
 8000432:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000434:	4b1b      	ldr	r3, [pc, #108]	; (80004a4 <SystemInit+0x104>)
 8000436:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <SystemInit+0x114>)
 8000438:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800043a:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <SystemInit+0x104>)
 800043c:	2200      	movs	r2, #0
 800043e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000440:	4b18      	ldr	r3, [pc, #96]	; (80004a4 <SystemInit+0x104>)
 8000442:	4a1c      	ldr	r2, [pc, #112]	; (80004b4 <SystemInit+0x114>)
 8000444:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <SystemInit+0x104>)
 8000448:	2200      	movs	r2, #0
 800044a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800044c:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <SystemInit+0x104>)
 800044e:	4a19      	ldr	r2, [pc, #100]	; (80004b4 <SystemInit+0x114>)
 8000450:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000452:	4b14      	ldr	r3, [pc, #80]	; (80004a4 <SystemInit+0x104>)
 8000454:	2200      	movs	r2, #0
 8000456:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <SystemInit+0x104>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a11      	ldr	r2, [pc, #68]	; (80004a4 <SystemInit+0x104>)
 800045e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000462:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <SystemInit+0x104>)
 8000466:	2200      	movs	r2, #0
 8000468:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <SystemInit+0x118>)
 800046c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800046e:	4a12      	ldr	r2, [pc, #72]	; (80004b8 <SystemInit+0x118>)
 8000470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000474:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000476:	4b11      	ldr	r3, [pc, #68]	; (80004bc <SystemInit+0x11c>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <SystemInit+0x120>)
 800047c:	4013      	ands	r3, r2
 800047e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000482:	d202      	bcs.n	800048a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000484:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <SystemInit+0x124>)
 8000486:	2201      	movs	r2, #1
 8000488:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <SystemInit+0x128>)
 800048c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000490:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	e000ed00 	.word	0xe000ed00
 80004a0:	52002000 	.word	0x52002000
 80004a4:	58024400 	.word	0x58024400
 80004a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80004ac:	02020200 	.word	0x02020200
 80004b0:	01ff0000 	.word	0x01ff0000
 80004b4:	01010280 	.word	0x01010280
 80004b8:	580000c0 	.word	0x580000c0
 80004bc:	5c001000 	.word	0x5c001000
 80004c0:	ffff0000 	.word	0xffff0000
 80004c4:	51008108 	.word	0x51008108
 80004c8:	52004000 	.word	0x52004000

080004cc <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80004e0:	d101      	bne.n	80004e6 <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <rpmsg_send+0x3c>)
 80004e4:	e00c      	b.n	8000500 <rpmsg_send+0x34>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80004ee:	2301      	movs	r3, #1
 80004f0:	9301      	str	r3, [sp, #4]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	68f8      	ldr	r0, [r7, #12]
 80004fa:	f007 ffe5 	bl	80084c8 <rpmsg_send_offchannel_raw>
 80004fe:	4603      	mov	r3, r0
					 len, true);
}
 8000500:	4618      	mov	r0, r3
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	fffff829 	.word	0xfffff829

0800050c <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
 8000518:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2220      	movs	r2, #32
 800051e:	68b9      	ldr	r1, [r7, #8]
 8000520:	4618      	mov	r0, r3
 8000522:	f00a fab4 	bl	800aa8e <strncpy>
	ept->addr = src;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	69ba      	ldr	r2, [r7, #24]
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	69fa      	ldr	r2, [r7, #28]
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
	...

08000548 <rpmsg_recv_callback>:
static void StartOpenAMP_Thread(void const *argument);
/* Private functions ---------------------------------------------------------*/

static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
                size_t len, uint32_t src, void *priv)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	60b9      	str	r1, [r7, #8]
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	603b      	str	r3, [r7, #0]
  received_data = *((unsigned int *) data);
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a06      	ldr	r2, [pc, #24]	; (8000574 <rpmsg_recv_callback+0x2c>)
 800055c:	6013      	str	r3, [r2, #0]

  osSemaphoreRelease (osSemaphore_MessageReception);
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <rpmsg_recv_callback+0x30>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4618      	mov	r0, r3
 8000564:	f004 faec 	bl	8004b40 <osSemaphoreRelease>

  return 0;
 8000568:	2300      	movs	r3, #0
}
 800056a:	4618      	mov	r0, r3
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	24000144 	.word	0x24000144
 8000578:	2400018c 	.word	0x2400018c

0800057c <receive_message>:

unsigned int receive_message(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
  received_data = -1U;
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <receive_message+0x4c>)
 8000584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000588:	601a      	str	r2, [r3, #0]
  uint32_t status = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]

  while (received_data == -1U)
 800058e:	e00d      	b.n	80005ac <receive_message+0x30>
  {
    status = osSemaphoreWait(osSemaphore_MessageReception , 0xffff);
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <receive_message+0x50>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000598:	4618      	mov	r0, r3
 800059a:	f004 fa83 	bl	8004aa4 <osSemaphoreWait>
 800059e:	4603      	mov	r3, r0
 80005a0:	607b      	str	r3, [r7, #4]

    if (status != osOK)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d107      	bne.n	80005b8 <receive_message+0x3c>
      break;

    OPENAMP_check_for_message();
 80005a8:	f009 fbf0 	bl	8009d8c <OPENAMP_check_for_message>
  while (received_data == -1U)
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <receive_message+0x4c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005b4:	d0ec      	beq.n	8000590 <receive_message+0x14>
 80005b6:	e000      	b.n	80005ba <receive_message+0x3e>
      break;
 80005b8:	bf00      	nop
  }

  return received_data;
 80005ba:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <receive_message+0x4c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	24000144 	.word	0x24000144
 80005cc:	2400018c 	.word	0x2400018c

080005d0 <service_destroy_cb>:

  void service_destroy_cb(struct rpmsg_endpoint *ept)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* this function is called while remote endpoint as been destroyed, the
   * service is no more available
   */
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <new_service_cb>:

void new_service_cb(struct rpmsg_device *rdev, const char *name, uint32_t dest)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  /* create a endpoint for rmpsg communication */
  OPENAMP_create_endpoint(&rp_endpoint, name, dest, rpmsg_recv_callback,
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <new_service_cb+0x30>)
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	4b08      	ldr	r3, [pc, #32]	; (8000618 <new_service_cb+0x34>)
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	68b9      	ldr	r1, [r7, #8]
 80005fa:	4808      	ldr	r0, [pc, #32]	; (800061c <new_service_cb+0x38>)
 80005fc:	f009 fba8 	bl	8009d50 <OPENAMP_create_endpoint>
                          service_destroy_cb);
  osSemaphoreRelease (osSemaphore_ChannelCreation);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <new_service_cb+0x3c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f004 fa9b 	bl	8004b40 <osSemaphoreRelease>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	080005d1 	.word	0x080005d1
 8000618:	08000549 	.word	0x08000549
 800061c:	24000148 	.word	0x24000148
 8000620:	24000188 	.word	0x24000188

08000624 <StartOpenAMP_Thread>:
  * @brief  Semaphore Test.
  * @param  argument: Not used
  * @retval None
  */
static void StartOpenAMP_Thread(void const *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b08a      	sub	sp, #40	; 0x28
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
  int32_t status;
  //int32_t timeout;

  	/* Define used semaphore */
  	osSemaphoreDef(CHN_CREAT);
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  	osSemaphoreDef(MSG_RECPT);
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]

  	/* Create the semaphore */
  	osSemaphore_ChannelCreation  = osSemaphoreCreate(osSemaphore(CHN_CREAT) , 1);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	2101      	movs	r1, #1
 8000642:	4618      	mov	r0, r3
 8000644:	f004 f9fb 	bl	8004a3e <osSemaphoreCreate>
 8000648:	4603      	mov	r3, r0
 800064a:	4a2f      	ldr	r2, [pc, #188]	; (8000708 <StartOpenAMP_Thread+0xe4>)
 800064c:	6013      	str	r3, [r2, #0]
  	osSemaphore_MessageReception = osSemaphoreCreate(osSemaphore(MSG_RECPT) , 1);
 800064e:	f107 030c 	add.w	r3, r7, #12
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f004 f9f2 	bl	8004a3e <osSemaphoreCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a2b      	ldr	r2, [pc, #172]	; (800070c <StartOpenAMP_Thread+0xe8>)
 800065e:	6013      	str	r3, [r2, #0]

  /* Initialize the mailbox use notify the other core on new message */
  MAILBOX_Init();
 8000660:	f009 f9ba 	bl	80099d8 <MAILBOX_Init>
  //{
  //  Error_Handler();
  //}

  /* Initialize the rpmsg endpoint to set default addresses to RPMSG_ADDR_ANY */
  rpmsg_init_ept(&rp_endpoint, RPMSG_CHAN_NAME, RPMSG_ADDR_ANY, RPMSG_ADDR_ANY,
 8000664:	2300      	movs	r3, #0
 8000666:	9301      	str	r3, [sp, #4]
 8000668:	2300      	movs	r3, #0
 800066a:	9300      	str	r3, [sp, #0]
 800066c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000674:	4926      	ldr	r1, [pc, #152]	; (8000710 <StartOpenAMP_Thread+0xec>)
 8000676:	4827      	ldr	r0, [pc, #156]	; (8000714 <StartOpenAMP_Thread+0xf0>)
 8000678:	f7ff ff48 	bl	800050c <rpmsg_init_ept>
                 NULL, NULL);

  /* Initialize OpenAmp and libmetal libraries */
  if (MX_OPENAMP_Init(RPMSG_MASTER, new_service_cb)!= HAL_OK)
 800067c:	4926      	ldr	r1, [pc, #152]	; (8000718 <StartOpenAMP_Thread+0xf4>)
 800067e:	2000      	movs	r0, #0
 8000680:	f009 fac4 	bl	8009c0c <MX_OPENAMP_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <StartOpenAMP_Thread+0x6a>
    Error_Handler();
 800068a:	f000 fb2d 	bl	8000ce8 <Error_Handler>

  /*
   * The rpmsg service is initiate by the remote processor, on A7 new_service_cb
   * callback is received on service creation. Wait for the callback
   */
  OPENAMP_Wait_EndPointready(&rp_endpoint);
 800068e:	4821      	ldr	r0, [pc, #132]	; (8000714 <StartOpenAMP_Thread+0xf0>)
 8000690:	f009 fb88 	bl	8009da4 <OPENAMP_Wait_EndPointready>

  /* Send the massage to the remote CPU */
  status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 8000694:	2204      	movs	r2, #4
 8000696:	4921      	ldr	r1, [pc, #132]	; (800071c <StartOpenAMP_Thread+0xf8>)
 8000698:	481e      	ldr	r0, [pc, #120]	; (8000714 <StartOpenAMP_Thread+0xf0>)
 800069a:	f7ff ff17 	bl	80004cc <rpmsg_send>
 800069e:	61f8      	str	r0, [r7, #28]
  osDelay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f004 f9b8 	bl	8004a16 <osDelay>

  if (status < 0)
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	da1a      	bge.n	80006e2 <StartOpenAMP_Thread+0xbe>
  {
    Error_Handler();
 80006ac:	f000 fb1c 	bl	8000ce8 <Error_Handler>
  }

  while (message < 100)
 80006b0:	e017      	b.n	80006e2 <StartOpenAMP_Thread+0xbe>
  {
   /* Receive the massage from the remote CPU */
    message = receive_message();
 80006b2:	f7ff ff63 	bl	800057c <receive_message>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4a18      	ldr	r2, [pc, #96]	; (800071c <StartOpenAMP_Thread+0xf8>)
 80006ba:	6013      	str	r3, [r2, #0]
    message++;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <StartOpenAMP_Thread+0xf8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <StartOpenAMP_Thread+0xf8>)
 80006c4:	6013      	str	r3, [r2, #0]

   /* Send the massage to the remote CPU */
    status = OPENAMP_send(&rp_endpoint, &message, sizeof(message));
 80006c6:	2204      	movs	r2, #4
 80006c8:	4914      	ldr	r1, [pc, #80]	; (800071c <StartOpenAMP_Thread+0xf8>)
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <StartOpenAMP_Thread+0xf0>)
 80006cc:	f7ff fefe 	bl	80004cc <rpmsg_send>
 80006d0:	61f8      	str	r0, [r7, #28]
    osDelay(1);
 80006d2:	2001      	movs	r0, #1
 80006d4:	f004 f99f 	bl	8004a16 <osDelay>

    if (status < 0)
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	da01      	bge.n	80006e2 <StartOpenAMP_Thread+0xbe>
    {
      Error_Handler();
 80006de:	f000 fb03 	bl	8000ce8 <Error_Handler>
  while (message < 100)
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <StartOpenAMP_Thread+0xf8>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b63      	cmp	r3, #99	; 0x63
 80006e8:	d9e3      	bls.n	80006b2 <StartOpenAMP_Thread+0x8e>
    }
  }

  /* wait that service is destroyed on remote side */
  while(service_created)
 80006ea:	e001      	b.n	80006f0 <StartOpenAMP_Thread+0xcc>
  {
    OPENAMP_check_for_message();
 80006ec:	f009 fb4e 	bl	8009d8c <OPENAMP_check_for_message>
  while(service_created)
 80006f0:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <StartOpenAMP_Thread+0xfc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1f9      	bne.n	80006ec <StartOpenAMP_Thread+0xc8>
  }

  /* Deinitialize OpenAMP */
  OPENAMP_DeInit();
 80006f8:	f009 fb1e 	bl	8009d38 <OPENAMP_DeInit>

  while(1)
  {
    //BSP_LED_Toggle(LED_GREEN);
    osDelay(400);
 80006fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000700:	f004 f989 	bl	8004a16 <osDelay>
 8000704:	e7fa      	b.n	80006fc <StartOpenAMP_Thread+0xd8>
 8000706:	bf00      	nop
 8000708:	24000188 	.word	0x24000188
 800070c:	2400018c 	.word	0x2400018c
 8000710:	0800b02c 	.word	0x0800b02c
 8000714:	24000148 	.word	0x24000148
 8000718:	080005e5 	.word	0x080005e5
 800071c:	2400013c 	.word	0x2400013c
 8000720:	24000140 	.word	0x24000140

08000724 <OpenAMPInit_M7>:
}



void OpenAMPInit_M7()
{
 8000724:	b5b0      	push	{r4, r5, r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
	/* Create the Thread */
	osThreadDef(OpenAMP_Thread, StartOpenAMP_Thread, osPriorityNormal, 0, appliSTACK_SIZE);
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <OpenAMPInit_M7+0x2c>)
 800072c:	1d3c      	adds	r4, r7, #4
 800072e:	461d      	mov	r5, r3
 8000730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000734:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000738:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	osThreadCreate(osThread(OpenAMP_Thread), NULL);
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f004 f91c 	bl	800497e <osThreadCreate>

	return;
 8000746:	bf00      	nop
}
 8000748:	3720      	adds	r7, #32
 800074a:	46bd      	mov	sp, r7
 800074c:	bdb0      	pop	{r4, r5, r7, pc}
 800074e:	bf00      	nop
 8000750:	0800b040 	.word	0x0800b040

08000754 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <vApplicationGetIdleTaskMemory+0x2c>)
 800077c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <vApplicationGetIdleTaskMemory+0x30>)
 8000782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	24000190 	.word	0x24000190
 800079c:	24000244 	.word	0x24000244

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007a6:	f000 fa1f 	bl	8000be8 <_ZL10MPU_Configv>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007aa:	4b6e      	ldr	r3, [pc, #440]	; (8000964 <main+0x1c4>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d11b      	bne.n	80007f8 <main+0x58>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c0:	f3bf 8f4f 	dsb	sy
}
 80007c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007c6:	f3bf 8f6f 	isb	sy
}
 80007ca:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80007cc:	4b65      	ldr	r3, [pc, #404]	; (8000964 <main+0x1c4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80007d4:	f3bf 8f4f 	dsb	sy
}
 80007d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007da:	f3bf 8f6f 	isb	sy
}
 80007de:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80007e0:	4b60      	ldr	r3, [pc, #384]	; (8000964 <main+0x1c4>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a5f      	ldr	r2, [pc, #380]	; (8000964 <main+0x1c4>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80007ec:	f3bf 8f4f 	dsb	sy
}
 80007f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007f2:	f3bf 8f6f 	isb	sy
}
 80007f6:	e000      	b.n	80007fa <main+0x5a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80007f8:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80007fa:	4b5a      	ldr	r3, [pc, #360]	; (8000964 <main+0x1c4>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000802:	2b00      	cmp	r3, #0
 8000804:	bf14      	ite	ne
 8000806:	2301      	movne	r3, #1
 8000808:	2300      	moveq	r3, #0
 800080a:	b2db      	uxtb	r3, r3
 800080c:	2b00      	cmp	r3, #0
 800080e:	d144      	bne.n	800089a <main+0xfa>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000810:	4b54      	ldr	r3, [pc, #336]	; (8000964 <main+0x1c4>)
 8000812:	2200      	movs	r2, #0
 8000814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000818:	f3bf 8f4f 	dsb	sy
}
 800081c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800081e:	4b51      	ldr	r3, [pc, #324]	; (8000964 <main+0x1c4>)
 8000820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000828:	0b5b      	lsrs	r3, r3, #13
 800082a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000838:	623b      	str	r3, [r7, #32]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	015a      	lsls	r2, r3, #5
 800083e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000842:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000844:	6a3a      	ldr	r2, [r7, #32]
 8000846:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000848:	4946      	ldr	r1, [pc, #280]	; (8000964 <main+0x1c4>)
 800084a:	4313      	orrs	r3, r2
 800084c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000850:	6a3b      	ldr	r3, [r7, #32]
 8000852:	1e5a      	subs	r2, r3, #1
 8000854:	623a      	str	r2, [r7, #32]
 8000856:	2b00      	cmp	r3, #0
 8000858:	bf14      	ite	ne
 800085a:	2301      	movne	r3, #1
 800085c:	2300      	moveq	r3, #0
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d000      	beq.n	8000866 <main+0xc6>
      do {
 8000864:	e7e9      	b.n	800083a <main+0x9a>
    } while(sets-- != 0U);
 8000866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000868:	1e5a      	subs	r2, r3, #1
 800086a:	627a      	str	r2, [r7, #36]	; 0x24
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d000      	beq.n	800087c <main+0xdc>
    do {
 800087a:	e7d9      	b.n	8000830 <main+0x90>
  __ASM volatile ("dsb 0xF":::"memory");
 800087c:	f3bf 8f4f 	dsb	sy
}
 8000880:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <main+0x1c4>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a37      	ldr	r2, [pc, #220]	; (8000964 <main+0x1c4>)
 8000888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800088c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800088e:	f3bf 8f4f 	dsb	sy
}
 8000892:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000894:	f3bf 8f6f 	isb	sy
}
 8000898:	e000      	b.n	800089c <main+0xfc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800089a:	bf00      	nop
  SCB_EnableDCache();


/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800089c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <main+0x1c8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <main+0x11c>
 80008ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dd01      	ble.n	80008bc <main+0x11c>
 80008b8:	2301      	movs	r3, #1
 80008ba:	e000      	b.n	80008be <main+0x11e>
 80008bc:	2300      	movs	r3, #0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d000      	beq.n	80008c4 <main+0x124>
 80008c2:	e7ee      	b.n	80008a2 <main+0x102>
  if ( timeout < 0 )
 80008c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da01      	bge.n	80008ce <main+0x12e>
  {
  Error_Handler();
 80008ca:	f000 fa0d 	bl	8000ce8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f000 fbc7 	bl	8001060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f84f 	bl	8000974 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80008d6:	f000 f8e1 	bl	8000a9c <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <main+0x1c8>)
 80008dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <main+0x1c8>)
 80008e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ea:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <main+0x1c8>)
 80008ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008f8:	2000      	movs	r0, #0
 80008fa:	f001 f889 	bl	8001a10 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f001 f89f 	bl	8001a44 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800090c:	4b16      	ldr	r3, [pc, #88]	; (8000968 <main+0x1c8>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000914:	2b00      	cmp	r3, #0
 8000916:	d106      	bne.n	8000926 <main+0x186>
 8000918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800091a:	1e5a      	subs	r2, r3, #1
 800091c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800091e:	2b00      	cmp	r3, #0
 8000920:	dd01      	ble.n	8000926 <main+0x186>
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <main+0x188>
 8000926:	2300      	movs	r3, #0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d000      	beq.n	800092e <main+0x18e>
 800092c:	e7ee      	b.n	800090c <main+0x16c>
if ( timeout < 0 )
 800092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000930:	2b00      	cmp	r3, #0
 8000932:	da01      	bge.n	8000938 <main+0x198>
{
Error_Handler();
 8000934:	f000 f9d8 	bl	8000ce8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f8ec 	bl	8000b14 <_ZL12MX_GPIO_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <main+0x1cc>)
 800093e:	1d3c      	adds	r4, r7, #4
 8000940:	461d      	mov	r5, r3
 8000942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000946:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f813 	bl	800497e <osThreadCreate>
 8000958:	4603      	mov	r3, r0
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <main+0x1d0>)
 800095c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800095e:	f004 f807 	bl	8004970 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000962:	e7fe      	b.n	8000962 <main+0x1c2>
 8000964:	e000ed00 	.word	0xe000ed00
 8000968:	58024400 	.word	0x58024400
 800096c:	0800b068 	.word	0x0800b068
 8000970:	24000a44 	.word	0x24000a44

08000974 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b09c      	sub	sp, #112	; 0x70
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	224c      	movs	r2, #76	; 0x4c
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f009 fbdc 	bl	800a140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2220      	movs	r2, #32
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f009 fbd6 	bl	800a140 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000994:	2004      	movs	r0, #4
 8000996:	f001 f895 	bl	8001ac4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <_Z18SystemClock_Configv+0x11c>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a3b      	ldr	r2, [pc, #236]	; (8000a90 <_Z18SystemClock_Configv+0x11c>)
 80009a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b39      	ldr	r3, [pc, #228]	; (8000a90 <_Z18SystemClock_Configv+0x11c>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	4b37      	ldr	r3, [pc, #220]	; (8000a94 <_Z18SystemClock_Configv+0x120>)
 80009b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009b8:	4a36      	ldr	r2, [pc, #216]	; (8000a94 <_Z18SystemClock_Configv+0x120>)
 80009ba:	f043 0301 	orr.w	r3, r3, #1
 80009be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009c0:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <_Z18SystemClock_Configv+0x120>)
 80009c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <_Z18SystemClock_Configv+0x11c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d000      	beq.n	80009e6 <_Z18SystemClock_Configv+0x72>
 80009e4:	e7f2      	b.n	80009cc <_Z18SystemClock_Configv+0x58>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <_Z18SystemClock_Configv+0x124>)
 80009e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ea:	4a2b      	ldr	r2, [pc, #172]	; (8000a98 <_Z18SystemClock_Configv+0x124>)
 80009ec:	f023 0303 	bic.w	r3, r3, #3
 80009f0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009f2:	230a      	movs	r3, #10
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009f6:	2301      	movs	r3, #1
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009fe:	2301      	movs	r3, #1
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a02:	2302      	movs	r3, #2
 8000a04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a06:	2300      	movs	r3, #0
 8000a08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a0e:	233c      	movs	r3, #60	; 0x3c
 8000a10:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a12:	2302      	movs	r3, #2
 8000a14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a16:	2302      	movs	r3, #2
 8000a18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 f8a2 	bl	8001b78 <HAL_RCC_OscConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf14      	ite	ne
 8000a3a:	2301      	movne	r3, #1
 8000a3c:	2300      	moveq	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000a44:	f000 f950 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	233f      	movs	r3, #63	; 0x3f
 8000a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a54:	2308      	movs	r3, #8
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fcdc 	bl	800242c <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <_Z18SystemClock_Configv+0x114>
  {
    Error_Handler();
 8000a84:	f000 f930 	bl	8000ce8 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3770      	adds	r7, #112	; 0x70
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	58024800 	.word	0x58024800
 8000a94:	58000400 	.word	0x58000400
 8000a98:	58024400 	.word	0x58024400

08000a9c <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b0b2      	sub	sp, #200	; 0xc8
 8000aa0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000aa2:	463b      	mov	r3, r7
 8000aa4:	22c8      	movs	r2, #200	; 0xc8
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f009 fb49 	bl	800a140 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <_Z24PeriphCommonClock_Configv+0x74>)
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL3.PLL3M = 4;
 8000ab8:	2304      	movs	r3, #4
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 9;
 8000abc:	2309      	movs	r3, #9
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000ac4:	2304      	movs	r3, #4
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000acc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000ad2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ad6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 3072;
 8000ad8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000adc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL3;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f002 f855 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf14      	ite	ne
 8000af8:	2301      	movne	r3, #1
 8000afa:	2300      	moveq	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <_Z24PeriphCommonClock_Configv+0x6a>
  {
    Error_Handler();
 8000b02:	f000 f8f1 	bl	8000ce8 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	37c8      	adds	r7, #200	; 0xc8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	00080100 	.word	0x00080100

08000b14 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6c:	4a17      	ldr	r2, [pc, #92]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b76:	4b15      	ldr	r3, [pc, #84]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b94:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <_ZL12MX_GPIO_Initv+0xb8>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000ba2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <_ZL12MX_GPIO_Initv+0xbc>)
 8000bc0:	f000 fd76 	bl	80016b0 <HAL_GPIO_Init>

}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	58020000 	.word	0x58020000

08000bd4 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  //MX_LWIP_Init();
  /* USER CODE BEGIN 5 */

  /*Start OpenAMP from RTOS_h7*/
  OpenAMPInit_M7();
 8000bdc:	f7ff fda2 	bl	8000724 <OpenAMPInit_M7>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f003 ff18 	bl	8004a16 <osDelay>
 8000be6:	e7fb      	b.n	8000be0 <_Z16StartDefaultTaskPKv+0xc>

08000be8 <_ZL10MPU_Configv>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bfa:	f000 fb79 	bl	80012f0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c0a:	231f      	movs	r3, #31
 8000c0c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c0e:	2387      	movs	r3, #135	; 0x87
 8000c10:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c16:	2300      	movs	r3, #0
 8000c18:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c2a:	463b      	mov	r3, r7
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 fb97 	bl	8001360 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <_ZL10MPU_Configv+0xd4>)
 8000c38:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8000c3a:	2310      	movs	r3, #16
 8000c3c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c46:	2303      	movs	r3, #3
 8000c48:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 fb85 	bl	8001360 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <_ZL10MPU_Configv+0xd8>)
 8000c5c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c6e:	463b      	mov	r3, r7
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 fb75 	bl	8001360 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = D3_SRAM_BASE;
 8000c7a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000c7e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000c80:	230f      	movs	r3, #15
 8000c82:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000c84:	2303      	movs	r3, #3
 8000c86:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c90:	2301      	movs	r3, #1
 8000c92:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fb5a 	bl	8001360 <HAL_MPU_ConfigRegion>


  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000cac:	2004      	movs	r0, #4
 8000cae:	f000 fb37 	bl	8001320 <HAL_MPU_Enable>

}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	30020000 	.word	0x30020000
 8000cc0:	30040000 	.word	0x30040000

08000cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd6:	f000 f9ff 	bl	80010d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40001000 	.word	0x40001000

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <Error_Handler+0x8>
	...

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_MspInit+0x48>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_MspInit+0x48>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_MspInit+0x48>)
 8000d0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	210f      	movs	r1, #15
 8000d1c:	f06f 0001 	mvn.w	r0, #1
 8000d20:	f000 fabe 	bl	80012a0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2105      	movs	r1, #5
 8000d28:	207d      	movs	r0, #125	; 0x7d
 8000d2a:	f000 fab9 	bl	80012a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8000d2e:	207d      	movs	r0, #125	; 0x7d
 8000d30:	f000 fad0 	bl	80012d4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024400 	.word	0x58024400

08000d40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b090      	sub	sp, #64	; 0x40
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b0f      	cmp	r3, #15
 8000d4c:	d827      	bhi.n	8000d9e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	6879      	ldr	r1, [r7, #4]
 8000d52:	2036      	movs	r0, #54	; 0x36
 8000d54:	f000 faa4 	bl	80012a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d58:	2036      	movs	r0, #54	; 0x36
 8000d5a:	f000 fabb 	bl	80012d4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d5e:	4a29      	ldr	r2, [pc, #164]	; (8000e04 <HAL_InitTick+0xc4>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <HAL_InitTick+0xc8>)
 8000d66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d6a:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <HAL_InitTick+0xc8>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <HAL_InitTick+0xc8>)
 8000d76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d7a:	f003 0310 	and.w	r3, r3, #16
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d82:	f107 0210 	add.w	r2, r7, #16
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 fec3 	bl	8002b18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d94:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d106      	bne.n	8000daa <HAL_InitTick+0x6a>
 8000d9c:	e001      	b.n	8000da2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e02b      	b.n	8000dfa <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000da2:	f001 fea3 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8000da6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000da8:	e004      	b.n	8000db4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000daa:	f001 fe9f 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8000dae:	4603      	mov	r3, r0
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db6:	4a15      	ldr	r2, [pc, #84]	; (8000e0c <HAL_InitTick+0xcc>)
 8000db8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbc:	0c9b      	lsrs	r3, r3, #18
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dc2:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <HAL_InitTick+0xd0>)
 8000dc4:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_InitTick+0xd4>)
 8000dc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_InitTick+0xd0>)
 8000dca:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dd0:	4a0f      	ldr	r2, [pc, #60]	; (8000e10 <HAL_InitTick+0xd0>)
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_InitTick+0xd0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_InitTick+0xd0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <HAL_InitTick+0xd0>)
 8000de4:	f003 fa88 	bl	80042f8 <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d104      	bne.n	8000df8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dee:	4808      	ldr	r0, [pc, #32]	; (8000e10 <HAL_InitTick+0xd0>)
 8000df0:	f003 fae4 	bl	80043bc <HAL_TIM_Base_Start_IT>
 8000df4:	4603      	mov	r3, r0
 8000df6:	e000      	b.n	8000dfa <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3740      	adds	r7, #64	; 0x40
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	24000008 	.word	0x24000008
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	431bde83 	.word	0x431bde83
 8000e10:	24000a48 	.word	0x24000a48
 8000e14:	40001000 	.word	0x40001000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <TIM6_DAC_IRQHandler+0x10>)
 8000e4a:	f003 fb2f 	bl	80044ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24000a48 	.word	0x24000a48

08000e58 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <ETH_IRQHandler+0x10>)
 8000e5e:	f000 fad7 	bl	8001410 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	24000aa4 	.word	0x24000aa4

08000e6c <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000e70:	f000 fe0e 	bl	8001a90 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return 1;
 8000e7c:	2301      	movs	r3, #1
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_kill>:

int _kill(int pid, int sig)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <_kill+0x20>)
 8000e94:	2216      	movs	r2, #22
 8000e96:	601a      	str	r2, [r3, #0]
  return -1;
 8000e98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	2400856c 	.word	0x2400856c

08000eac <_exit>:

void _exit (int status)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ffe5 	bl	8000e88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ebe:	e7fe      	b.n	8000ebe <_exit+0x12>

08000ec0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e00a      	b.n	8000ee8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed2:	f3af 8000 	nop.w
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	60ba      	str	r2, [r7, #8]
 8000ede:	b2ca      	uxtb	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dbf0      	blt.n	8000ed2 <_read+0x12>
  }

  return len;
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e009      	b.n	8000f20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf1      	blt.n	8000f0c <_write+0x12>
  }
  return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <_close>:

int _close(int file)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <_isatty>:

int _isatty(int file)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d205      	bcs.n	8000fd8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <_sbrk+0x6c>)
 8000fce:	220c      	movs	r2, #12
 8000fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fd6:	e009      	b.n	8000fec <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fde:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	4a06      	ldr	r2, [pc, #24]	; (8001000 <_sbrk+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fea:	68fb      	ldr	r3, [r7, #12]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	371c      	adds	r7, #28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	24080000 	.word	0x24080000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	24000a94 	.word	0x24000a94
 8001004:	24008570 	.word	0x24008570
 8001008:	2400856c 	.word	0x2400856c

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001010:	f7ff f9c6 	bl	80003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	; (8001048 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	; (800104c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	; (8001058 <LoopFillZerobss+0x22>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f009 f83b 	bl	800a0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f7ff fbaf 	bl	80007a0 <main>
  bx  lr
 8001042:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001044:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001048:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800104c:	24000120 	.word	0x24000120
  ldr r2, =_sidata
 8001050:	0800b3d8 	.word	0x0800b3d8
  ldr r2, =_sbss
 8001054:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001058:	24008570 	.word	0x24008570

0800105c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC3_IRQHandler>
	...

08001060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001066:	2003      	movs	r0, #3
 8001068:	f000 f90f 	bl	800128a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800106c:	f001 fb94 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8001070:	4602      	mov	r2, r0
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_Init+0x68>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	0a1b      	lsrs	r3, r3, #8
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	4913      	ldr	r1, [pc, #76]	; (80010cc <HAL_Init+0x6c>)
 800107e:	5ccb      	ldrb	r3, [r1, r3]
 8001080:	f003 031f 	and.w	r3, r3, #31
 8001084:	fa22 f303 	lsr.w	r3, r2, r3
 8001088:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_Init+0x68>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <HAL_Init+0x6c>)
 8001094:	5cd3      	ldrb	r3, [r2, r3]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	fa22 f303 	lsr.w	r3, r2, r3
 80010a0:	4a0b      	ldr	r2, [pc, #44]	; (80010d0 <HAL_Init+0x70>)
 80010a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010a4:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_Init+0x74>)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff fe48 	bl	8000d40 <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e002      	b.n	80010c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010ba:	f7ff fe1b 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	58024400 	.word	0x58024400
 80010cc:	0800b288 	.word	0x0800b288
 80010d0:	24000004 	.word	0x24000004
 80010d4:	24000000 	.word	0x24000000

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2400000c 	.word	0x2400000c
 80010fc:	24000a98 	.word	0x24000a98

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	24000a98 	.word	0x24000a98

08001118 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetREVID+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0c1b      	lsrs	r3, r3, #16
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	5c001000 	.word	0x5c001000

08001130 <__NVIC_SetPriorityGrouping>:
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	4313      	orrs	r3, r2
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x40>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00
 8001174:	05fa0000 	.word	0x05fa0000

08001178 <__NVIC_GetPriorityGrouping>:
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	88fb      	ldrh	r3, [r7, #6]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff4c 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ae:	f7ff ff63 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	68b9      	ldr	r1, [r7, #8]
 80012b8:	6978      	ldr	r0, [r7, #20]
 80012ba:	f7ff ffb3 	bl	8001224 <NVIC_EncodePriority>
 80012be:	4602      	mov	r2, r0
 80012c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c4:	4611      	mov	r1, r2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff ff82 	bl	80011d0 <__NVIC_SetPriority>
}
 80012cc:	bf00      	nop
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff ff56 	bl	8001194 <__NVIC_EnableIRQ>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012f4:	f3bf 8f5f 	dmb	sy
}
 80012f8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012fa:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_MPU_Disable+0x28>)
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	4a06      	ldr	r2, [pc, #24]	; (8001318 <HAL_MPU_Disable+0x28>)
 8001300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001304:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001306:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_MPU_Disable+0x2c>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00
 800131c:	e000ed90 	.word	0xe000ed90

08001320 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_MPU_Enable+0x38>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_MPU_Enable+0x3c>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <HAL_MPU_Enable+0x3c>)
 8001338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800133c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800133e:	f3bf 8f4f 	dsb	sy
}
 8001342:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001344:	f3bf 8f6f 	isb	sy
}
 8001348:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed90 	.word	0xe000ed90
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	785a      	ldrb	r2, [r3, #1]
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 800136e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d029      	beq.n	80013cc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001378:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7adb      	ldrb	r3, [r3, #11]
 800138a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800138c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	7a9b      	ldrb	r3, [r3, #10]
 8001392:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001394:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	7b5b      	ldrb	r3, [r3, #13]
 800139a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800139c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7b9b      	ldrb	r3, [r3, #14]
 80013a2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7bdb      	ldrb	r3, [r3, #15]
 80013aa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	7a5b      	ldrb	r3, [r3, #9]
 80013b2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7a1b      	ldrb	r3, [r3, #8]
 80013ba:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013bc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013c6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013c8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80013ca:	e005      	b.n	80013d8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_MPU_ConfigRegion+0x84>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed90 	.word	0xe000ed90

080013e8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_GetCurrentCPUID+0x24>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	2b07      	cmp	r3, #7
 80013f8:	d101      	bne.n	80013fe <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e000      	b.n	8001400 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80013fe:	2301      	movs	r3, #1
  }
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001420:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001428:	2b40      	cmp	r3, #64	; 0x40
 800142a:	d115      	bne.n	8001458 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001434:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143c:	2b40      	cmp	r3, #64	; 0x40
 800143e:	d10b      	bne.n	8001458 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001448:	461a      	mov	r2, r3
 800144a:	f248 0340 	movw	r3, #32832	; 0x8040
 800144e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f003 fa2a 	bl	80048ac <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001460:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b01      	cmp	r3, #1
 800146a:	d115      	bne.n	8001498 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001474:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b01      	cmp	r3, #1
 800147e:	d10b      	bne.n	8001498 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	461a      	mov	r2, r3
 800148a:	f248 0301 	movw	r3, #32769	; 0x8001
 800148e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f003 fa1a 	bl	80048cc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80014a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014ac:	d153      	bne.n	8001556 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014c2:	d148      	bne.n	8001556 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	f043 0208 	orr.w	r2, r3, #8
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014dc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80014e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014e8:	d11e      	bne.n	8001528 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014f2:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80014f6:	f241 1302 	movw	r3, #4354	; 0x1102
 80014fa:	4013      	ands	r3, r2
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800150a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001516:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800151a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	22e0      	movs	r2, #224	; 0xe0
 8001522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001526:	e013      	b.n	8001550 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001530:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001534:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001546:	461a      	mov	r2, r3
 8001548:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 800154c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f003 f9cb 	bl	80048ec <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800155e:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d104      	bne.n	8001574 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8001570:	2b00      	cmp	r3, #0
 8001572:	d019      	beq.n	80015a8 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800157a:	f043 0210 	orr.w	r2, r3, #16
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	22e0      	movs	r2, #224	; 0xe0
 8001596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f003 f9a6 	bl	80048ec <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	2b10      	cmp	r3, #16
 80015b6:	d10f      	bne.n	80015d8 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015c0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f000 f844 	bl	8001658 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	2b20      	cmp	r3, #32
 80015e6:	d10f      	bne.n	8001608 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80015f0:	f003 020f 	and.w	r2, r3, #15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f836 	bl	800166c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001608:	f7ff feee 	bl	80013e8 <HAL_GetCurrentCPUID>
 800160c:	4603      	mov	r3, r0
 800160e:	2b03      	cmp	r3, #3
 8001610:	d10d      	bne.n	800162e <HAL_ETH_IRQHandler+0x21e>
  {
    /* check ETH WAKEUP exti flag */
    if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <HAL_ETH_IRQHandler+0x240>)
 8001614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d014      	beq.n	8001648 <HAL_ETH_IRQHandler+0x238>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_ETH_IRQHandler+0x240>)
 8001620:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f82a 	bl	8001680 <HAL_ETH_WakeUpCallback>
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 800162c:	e00c      	b.n	8001648 <HAL_ETH_IRQHandler+0x238>
    if (__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_ETH_IRQHandler+0x244>)
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <HAL_ETH_IRQHandler+0x238>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_ETH_IRQHandler+0x244>)
 800163c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f81c 	bl	8001680 <HAL_ETH_WakeUpCallback>
}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	58000080 	.word	0x58000080
 8001654:	580000c0 	.word	0x580000c0

08001658 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016be:	4b89      	ldr	r3, [pc, #548]	; (80018e4 <HAL_GPIO_Init+0x234>)
 80016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016c2:	e194      	b.n	80019ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8186 	beq.w	80019e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d005      	beq.n	80016f4 <HAL_GPIO_Init+0x44>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d130      	bne.n	8001756 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	2203      	movs	r2, #3
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172a:	2201      	movs	r2, #1
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	f003 0201 	and.w	r2, r3, #1
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b03      	cmp	r3, #3
 8001760:	d017      	beq.n	8001792 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d123      	bne.n	80017e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	08da      	lsrs	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3208      	adds	r2, #8
 80017a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	220f      	movs	r2, #15
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	69b9      	ldr	r1, [r7, #24]
 80017e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0203 	and.w	r2, r3, #3
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 80e0 	beq.w	80019e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001828:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x238>)
 800182a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800182e:	4a2e      	ldr	r2, [pc, #184]	; (80018e8 <HAL_GPIO_Init+0x238>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001838:	4b2b      	ldr	r3, [pc, #172]	; (80018e8 <HAL_GPIO_Init+0x238>)
 800183a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001846:	4a29      	ldr	r2, [pc, #164]	; (80018ec <HAL_GPIO_Init+0x23c>)
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	089b      	lsrs	r3, r3, #2
 800184c:	3302      	adds	r3, #2
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	220f      	movs	r2, #15
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43db      	mvns	r3, r3
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	4013      	ands	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a20      	ldr	r2, [pc, #128]	; (80018f0 <HAL_GPIO_Init+0x240>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d052      	beq.n	8001918 <HAL_GPIO_Init+0x268>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1f      	ldr	r2, [pc, #124]	; (80018f4 <HAL_GPIO_Init+0x244>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d031      	beq.n	80018de <HAL_GPIO_Init+0x22e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1e      	ldr	r2, [pc, #120]	; (80018f8 <HAL_GPIO_Init+0x248>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d02b      	beq.n	80018da <HAL_GPIO_Init+0x22a>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1d      	ldr	r2, [pc, #116]	; (80018fc <HAL_GPIO_Init+0x24c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d025      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <HAL_GPIO_Init+0x250>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d01f      	beq.n	80018d2 <HAL_GPIO_Init+0x222>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a1b      	ldr	r2, [pc, #108]	; (8001904 <HAL_GPIO_Init+0x254>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d019      	beq.n	80018ce <HAL_GPIO_Init+0x21e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <HAL_GPIO_Init+0x258>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x21a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_GPIO_Init+0x25c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x216>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a18      	ldr	r2, [pc, #96]	; (8001910 <HAL_GPIO_Init+0x260>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x212>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_GPIO_Init+0x264>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x20e>
 80018ba:	2309      	movs	r3, #9
 80018bc:	e02d      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018be:	230a      	movs	r3, #10
 80018c0:	e02b      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018c2:	2308      	movs	r3, #8
 80018c4:	e029      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018c6:	2307      	movs	r3, #7
 80018c8:	e027      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018ca:	2306      	movs	r3, #6
 80018cc:	e025      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018ce:	2305      	movs	r3, #5
 80018d0:	e023      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018d2:	2304      	movs	r3, #4
 80018d4:	e021      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e01f      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018da:	2302      	movs	r3, #2
 80018dc:	e01d      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018de:	2301      	movs	r3, #1
 80018e0:	e01b      	b.n	800191a <HAL_GPIO_Init+0x26a>
 80018e2:	bf00      	nop
 80018e4:	58000080 	.word	0x58000080
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58000400 	.word	0x58000400
 80018f0:	58020000 	.word	0x58020000
 80018f4:	58020400 	.word	0x58020400
 80018f8:	58020800 	.word	0x58020800
 80018fc:	58020c00 	.word	0x58020c00
 8001900:	58021000 	.word	0x58021000
 8001904:	58021400 	.word	0x58021400
 8001908:	58021800 	.word	0x58021800
 800190c:	58021c00 	.word	0x58021c00
 8001910:	58022000 	.word	0x58022000
 8001914:	58022400 	.word	0x58022400
 8001918:	2300      	movs	r3, #0
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	f002 0203 	and.w	r2, r2, #3
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	4093      	lsls	r3, r2
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192a:	4938      	ldr	r1, [pc, #224]	; (8001a0c <HAL_GPIO_Init+0x35c>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800195e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800198c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	3301      	adds	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	fa22 f303 	lsr.w	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f47f ae63 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 80019fe:	bf00      	nop
 8001a00:	bf00      	nop
 8001a02:	3724      	adds	r7, #36	; 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	58000400 	.word	0x58000400

08001a10 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_HSEM_FastTake+0x2c>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3320      	adds	r3, #32
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_HSEM_FastTake+0x30>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d101      	bne.n	8001a2c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	58026400 	.word	0x58026400
 8001a40:	80000300 	.word	0x80000300

08001a44 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a4e:	4906      	ldr	r1, [pc, #24]	; (8001a68 <HAL_HSEM_Release+0x24>)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	58026400 	.word	0x58026400

08001a6c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_HSEM_ActivateNotification+0x20>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4904      	ldr	r1, [pc, #16]	; (8001a8c <HAL_HSEM_ActivateNotification+0x20>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
#endif
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58026500 	.word	0x58026500

08001a90 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_HSEM_IRQHandler+0x30>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_HSEM_IRQHandler+0x30>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	4906      	ldr	r1, [pc, #24]	; (8001ac0 <HAL_HSEM_IRQHandler+0x30>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <HAL_HSEM_IRQHandler+0x30>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f007 ff81 	bl	80099b8 <HAL_HSEM_FreeCallback>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	58026500 	.word	0x58026500

08001ac4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d00a      	beq.n	8001aee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ad8:	4b26      	ldr	r3, [pc, #152]	; (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e040      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e03e      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001af6:	491f      	ldr	r1, [pc, #124]	; (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001afe:	f7ff faff 	bl	8001100 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b04:	e009      	b.n	8001b1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b06:	f7ff fafb 	bl	8001100 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b14:	d901      	bls.n	8001b1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e028      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b26:	d1ee      	bne.n	8001b06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b1e      	cmp	r3, #30
 8001b2c:	d008      	beq.n	8001b40 <HAL_PWREx_ConfigSupply+0x7c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b2e      	cmp	r3, #46	; 0x2e
 8001b32:	d005      	beq.n	8001b40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b1d      	cmp	r3, #29
 8001b38:	d002      	beq.n	8001b40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b2d      	cmp	r3, #45	; 0x2d
 8001b3e:	d114      	bne.n	8001b6a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b40:	f7ff fade 	bl	8001100 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b46:	e009      	b.n	8001b5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b48:	f7ff fada 	bl	8001100 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b56:	d901      	bls.n	8001b5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e007      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b68:	d1ee      	bne.n	8001b48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58024800 	.word	0x58024800

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	; 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f000 bc48 	b.w	800241c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8088 	beq.w	8001caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b99      	ldr	r3, [pc, #612]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ba4:	4b96      	ldr	r3, [pc, #600]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d007      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x48>
 8001bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb2:	2b18      	cmp	r3, #24
 8001bb4:	d111      	bne.n	8001bda <HAL_RCC_OscConfig+0x62>
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4b8f      	ldr	r3, [pc, #572]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d06d      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x130>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d169      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f000 bc21 	b.w	800241c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x7a>
 8001be4:	4b86      	ldr	r3, [pc, #536]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a85      	ldr	r2, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e02e      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x9c>
 8001bfa:	4b81      	ldr	r3, [pc, #516]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a80      	ldr	r2, [pc, #512]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b7e      	ldr	r3, [pc, #504]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7d      	ldr	r2, [pc, #500]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0xc0>
 8001c1e:	4b78      	ldr	r3, [pc, #480]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b75      	ldr	r3, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a74      	ldr	r2, [pc, #464]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001c38:	4b71      	ldr	r3, [pc, #452]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a70      	ldr	r2, [pc, #448]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b6e      	ldr	r3, [pc, #440]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6d      	ldr	r2, [pc, #436]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fa52 	bl	8001100 <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fa4e 	bl	8001100 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e3d4      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe8>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa3e 	bl	8001100 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fa3a 	bl	8001100 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e3c0      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c9a:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x110>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80ca 	beq.w	8001e4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb8:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cc2:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_RCC_OscConfig+0x166>
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2b18      	cmp	r3, #24
 8001cd2:	d156      	bne.n	8001d82 <HAL_RCC_OscConfig+0x20a>
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d151      	bne.n	8001d82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cde:	4b48      	ldr	r3, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e392      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cf6:	4b42      	ldr	r3, [pc, #264]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0219 	bic.w	r2, r3, #25
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	493f      	ldr	r1, [pc, #252]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f9fa 	bl	8001100 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff f9f6 	bl	8001100 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e37c      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d22:	4b37      	ldr	r3, [pc, #220]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	f7ff f9f3 	bl	8001118 <HAL_GetREVID>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d817      	bhi.n	8001d6c <HAL_RCC_OscConfig+0x1f4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d108      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1de>
 8001d44:	4b2e      	ldr	r3, [pc, #184]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d54:	e07a      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b2a      	ldr	r3, [pc, #168]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	031b      	lsls	r3, r3, #12
 8001d64:	4926      	ldr	r1, [pc, #152]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d6a:	e06f      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b24      	ldr	r3, [pc, #144]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	4921      	ldr	r1, [pc, #132]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d80:	e064      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d047      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 0219 	bic.w	r2, r3, #25
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	491a      	ldr	r1, [pc, #104]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f9b0 	bl	8001100 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff f9ac 	bl	8001100 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e332      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	f7ff f9a9 	bl	8001118 <HAL_GetREVID>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f241 0203 	movw	r2, #4099	; 0x1003
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d819      	bhi.n	8001e04 <HAL_RCC_OscConfig+0x28c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d108      	bne.n	8001dea <HAL_RCC_OscConfig+0x272>
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de6:	6053      	str	r3, [r2, #4]
 8001de8:	e030      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	031b      	lsls	r3, r3, #12
 8001df8:	4901      	ldr	r1, [pc, #4]	; (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
 8001dfe:	e025      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
 8001e00:	58024400 	.word	0x58024400
 8001e04:	4b9a      	ldr	r3, [pc, #616]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	4997      	ldr	r1, [pc, #604]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e018      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b95      	ldr	r3, [pc, #596]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a94      	ldr	r2, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff f96b 	bl	8001100 <HAL_GetTick>
 8001e2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f967 	bl	8001100 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e2ed      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e40:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a9 	beq.w	8001fac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5a:	4b85      	ldr	r3, [pc, #532]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e64:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d007      	beq.n	8001e80 <HAL_RCC_OscConfig+0x308>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b18      	cmp	r3, #24
 8001e74:	d13a      	bne.n	8001eec <HAL_RCC_OscConfig+0x374>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d135      	bne.n	8001eec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e80:	4b7b      	ldr	r3, [pc, #492]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x320>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e2c1      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e98:	f7ff f93e 	bl	8001118 <HAL_GetREVID>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d817      	bhi.n	8001ed6 <HAL_RCC_OscConfig+0x35e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d108      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x348>
 8001eae:	4b70      	ldr	r3, [pc, #448]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001eb6:	4a6e      	ldr	r2, [pc, #440]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ebc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ebe:	e075      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec0:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	069b      	lsls	r3, r3, #26
 8001ece:	4968      	ldr	r1, [pc, #416]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ed4:	e06a      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ed6:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	4962      	ldr	r1, [pc, #392]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eea:	e05f      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d042      	beq.n	8001f7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f8fe 	bl	8001100 <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f08:	f7ff f8fa 	bl	8001100 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e280      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f1a:	4b55      	ldr	r3, [pc, #340]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f26:	f7ff f8f7 	bl	8001118 <HAL_GetREVID>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d817      	bhi.n	8001f64 <HAL_RCC_OscConfig+0x3ec>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d108      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3d6>
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001f4a:	6053      	str	r3, [r2, #4]
 8001f4c:	e02e      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
 8001f4e:	4b48      	ldr	r3, [pc, #288]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	069b      	lsls	r3, r3, #26
 8001f5c:	4944      	ldr	r1, [pc, #272]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
 8001f62:	e023      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
 8001f64:	4b42      	ldr	r3, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	493f      	ldr	r1, [pc, #252]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
 8001f78:	e018      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff f8bb 	bl	8001100 <HAL_GetTick>
 8001f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f8e:	f7ff f8b7 	bl	8001100 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e23d      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fa0:	4b33      	ldr	r3, [pc, #204]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d036      	beq.n	8002026 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d019      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f898 	bl	8001100 <HAL_GetTick>
 8001fd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff f894 	bl	8001100 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e21a      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x45c>
 8001ff2:	e018      	b.n	8002026 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff f87e 	bl	8001100 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff f87a 	bl	8001100 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e200      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d039      	beq.n	80020a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01c      	beq.n	8002074 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8002040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002044:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002046:	f7ff f85b 	bl	8001100 <HAL_GetTick>
 800204a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800204e:	f7ff f857 	bl	8001100 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1dd      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x4d6>
 800206c:	e01b      	b.n	80020a6 <HAL_RCC_OscConfig+0x52e>
 800206e:	bf00      	nop
 8002070:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002074:	4b9b      	ldr	r3, [pc, #620]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a9a      	ldr	r2, [pc, #616]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800207a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800207e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002080:	f7ff f83e 	bl	8001100 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002088:	f7ff f83a 	bl	8001100 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1c0      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800209a:	4b92      	ldr	r3, [pc, #584]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8081 	beq.w	80021b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b4:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_RCC_OscConfig+0x770>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a8b      	ldr	r2, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x770>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c0:	f7ff f81e 	bl	8001100 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7ff f81a 	bl	8001100 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1a0      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020da:	4b83      	ldr	r3, [pc, #524]	; (80022e8 <HAL_RCC_OscConfig+0x770>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x584>
 80020ee:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f2:	4a7c      	ldr	r2, [pc, #496]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	; 0x70
 80020fa:	e02d      	b.n	8002158 <HAL_RCC_OscConfig+0x5e0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x5a6>
 8002104:	4b77      	ldr	r3, [pc, #476]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a76      	ldr	r2, [pc, #472]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	4b74      	ldr	r3, [pc, #464]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002114:	4a73      	ldr	r2, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	6713      	str	r3, [r2, #112]	; 0x70
 800211c:	e01c      	b.n	8002158 <HAL_RCC_OscConfig+0x5e0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b05      	cmp	r3, #5
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c8>
 8002126:	4b6f      	ldr	r3, [pc, #444]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a6e      	ldr	r2, [pc, #440]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	4b6c      	ldr	r3, [pc, #432]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002136:	4a6b      	ldr	r2, [pc, #428]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6713      	str	r3, [r2, #112]	; 0x70
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0x5e0>
 8002140:	4b68      	ldr	r3, [pc, #416]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a67      	ldr	r2, [pc, #412]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
 800214c:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002150:	4a64      	ldr	r2, [pc, #400]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002152:	f023 0304 	bic.w	r3, r3, #4
 8002156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7fe ffce 	bl	8001100 <HAL_GetTick>
 8002164:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002166:	e00a      	b.n	800217e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7fe ffca 	bl	8001100 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e14e      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800217e:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ee      	beq.n	8002168 <HAL_RCC_OscConfig+0x5f0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7fe ffb8 	bl	8001100 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002192:	e00a      	b.n	80021aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f7fe ffb4 	bl	8001100 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e138      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021aa:	4b4e      	ldr	r3, [pc, #312]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ee      	bne.n	8002194 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 812d 	beq.w	800241a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021c0:	4b48      	ldr	r3, [pc, #288]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c8:	2b18      	cmp	r3, #24
 80021ca:	f000 80bd 	beq.w	8002348 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f040 809e 	bne.w	8002314 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a41      	ldr	r2, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe ff8c 	bl	8001100 <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe ff88 	bl	8001100 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e10e      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800220c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220e:	4b37      	ldr	r3, [pc, #220]	; (80022ec <HAL_RCC_OscConfig+0x774>)
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	430a      	orrs	r2, r1
 800221e:	4931      	ldr	r1, [pc, #196]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	628b      	str	r3, [r1, #40]	; 0x28
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	3b01      	subs	r3, #1
 800222a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002232:	3b01      	subs	r3, #1
 8002234:	025b      	lsls	r3, r3, #9
 8002236:	b29b      	uxth	r3, r3
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800224c:	3b01      	subs	r3, #1
 800224e:	061b      	lsls	r3, r3, #24
 8002250:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002254:	4923      	ldr	r1, [pc, #140]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226a:	4b21      	ldr	r3, [pc, #132]	; (80022f0 <HAL_RCC_OscConfig+0x778>)
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002272:	00d2      	lsls	r2, r2, #3
 8002274:	491b      	ldr	r1, [pc, #108]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f023 020c 	bic.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4917      	ldr	r1, [pc, #92]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f023 0202 	bic.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	4912      	ldr	r1, [pc, #72]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800229e:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	4a10      	ldr	r2, [pc, #64]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022aa:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022b6:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7fe ff11 	bl	8001100 <HAL_GetTick>
 80022de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e0:	e011      	b.n	8002306 <HAL_RCC_OscConfig+0x78e>
 80022e2:	bf00      	nop
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58024800 	.word	0x58024800
 80022ec:	fffffc0c 	.word	0xfffffc0c
 80022f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7fe ff04 	bl	8001100 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e08a      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x77c>
 8002312:	e082      	b.n	800241a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a42      	ldr	r2, [pc, #264]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe feee 	bl	8001100 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7fe feea 	bl	8001100 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e070      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	4b3a      	ldr	r3, [pc, #232]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x7b0>
 8002346:	e068      	b.n	800241a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800234e:	4b35      	ldr	r3, [pc, #212]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	2b01      	cmp	r3, #1
 800235a:	d031      	beq.n	80023c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d12a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d122      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d11a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	0a5b      	lsrs	r3, r3, #9
 800238e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002396:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d111      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0c1b      	lsrs	r3, r3, #16
 80023a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d108      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0e1b      	lsrs	r3, r3, #24
 80023b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e02b      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80023c4:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c8:	08db      	lsrs	r3, r3, #3
 80023ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d01f      	beq.n	800241a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80023da:	4b12      	ldr	r3, [pc, #72]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	4a11      	ldr	r2, [pc, #68]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e6:	f7fe fe8b 	bl	8001100 <HAL_GetTick>
 80023ea:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023ec:	bf00      	nop
 80023ee:	f7fe fe87 	bl	8001100 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d0f9      	beq.n	80023ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_OscConfig+0x8b0>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002406:	00d2      	lsls	r2, r2, #3
 8002408:	4906      	ldr	r1, [pc, #24]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800240a:	4313      	orrs	r3, r2
 800240c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3730      	adds	r7, #48	; 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	58024400 	.word	0x58024400
 8002428:	ffff0007 	.word	0xffff0007

0800242c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e19c      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b8a      	ldr	r3, [pc, #552]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b87      	ldr	r3, [pc, #540]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 020f 	bic.w	r2, r3, #15
 8002456:	4985      	ldr	r1, [pc, #532]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b83      	ldr	r3, [pc, #524]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e184      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d010      	beq.n	800249e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	4b7b      	ldr	r3, [pc, #492]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002488:	429a      	cmp	r2, r3
 800248a:	d908      	bls.n	800249e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800248c:	4b78      	ldr	r3, [pc, #480]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4975      	ldr	r1, [pc, #468]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800249a:	4313      	orrs	r3, r2
 800249c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	4b70      	ldr	r3, [pc, #448]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d908      	bls.n	80024cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024ba:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	496a      	ldr	r1, [pc, #424]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	4b64      	ldr	r3, [pc, #400]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d908      	bls.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024e8:	4b61      	ldr	r3, [pc, #388]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	495e      	ldr	r1, [pc, #376]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d010      	beq.n	8002528 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002512:	429a      	cmp	r2, r3
 8002514:	d908      	bls.n	8002528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002516:	4b56      	ldr	r3, [pc, #344]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4953      	ldr	r1, [pc, #332]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002524:	4313      	orrs	r3, r2
 8002526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b4d      	ldr	r3, [pc, #308]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	429a      	cmp	r2, r3
 8002542:	d908      	bls.n	8002556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f023 020f 	bic.w	r2, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4947      	ldr	r1, [pc, #284]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002552:	4313      	orrs	r3, r2
 8002554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d055      	beq.n	800260e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002562:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4940      	ldr	r1, [pc, #256]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002570:	4313      	orrs	r3, r2
 8002572:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d107      	bne.n	800258c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800257c:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d121      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0f6      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002594:	4b36      	ldr	r3, [pc, #216]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d115      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0ea      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ac:	4b30      	ldr	r3, [pc, #192]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0de      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d6      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025cc:	4b28      	ldr	r3, [pc, #160]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f023 0207 	bic.w	r2, r3, #7
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4925      	ldr	r1, [pc, #148]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025de:	f7fe fd8f 	bl	8001100 <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e6:	f7fe fd8b 	bl	8001100 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0be      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fc:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	429a      	cmp	r2, r3
 800260c:	d1eb      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	429a      	cmp	r2, r3
 8002628:	d208      	bcs.n	800263c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262a:	4b11      	ldr	r3, [pc, #68]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f023 020f 	bic.w	r2, r3, #15
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	490e      	ldr	r1, [pc, #56]	; (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002638:	4313      	orrs	r3, r2
 800263a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d214      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4906      	ldr	r1, [pc, #24]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <HAL_RCC_ClockConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e086      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
 800266c:	52002000 	.word	0x52002000
 8002670:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d010      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800268c:	429a      	cmp	r2, r3
 800268e:	d208      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4939      	ldr	r1, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d010      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	4b34      	ldr	r3, [pc, #208]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d208      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	492e      	ldr	r1, [pc, #184]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d208      	bcs.n	80026fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4922      	ldr	r1, [pc, #136]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002716:	429a      	cmp	r2, r3
 8002718:	d208      	bcs.n	800272c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800271a:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4917      	ldr	r1, [pc, #92]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002728:	4313      	orrs	r3, r2
 800272a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800272c:	f000 f834 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b14      	ldr	r3, [pc, #80]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	4912      	ldr	r1, [pc, #72]	; (8002788 <HAL_RCC_ClockConfig+0x35c>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x358>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a0d      	ldr	r2, [pc, #52]	; (8002788 <HAL_RCC_ClockConfig+0x35c>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_RCC_ClockConfig+0x360>)
 8002762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002764:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <HAL_RCC_ClockConfig+0x364>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_RCC_ClockConfig+0x368>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fae6 	bl	8000d40 <HAL_InitTick>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	58024400 	.word	0x58024400
 8002788:	0800b288 	.word	0x0800b288
 800278c:	24000004 	.word	0x24000004
 8002790:	24000000 	.word	0x24000000
 8002794:	24000008 	.word	0x24000008

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279e:	4bb3      	ldr	r3, [pc, #716]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027a6:	2b18      	cmp	r3, #24
 80027a8:	f200 8155 	bhi.w	8002a56 <HAL_RCC_GetSysClockFreq+0x2be>
 80027ac:	a201      	add	r2, pc, #4	; (adr r2, 80027b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	08002819 	.word	0x08002819
 80027b8:	08002a57 	.word	0x08002a57
 80027bc:	08002a57 	.word	0x08002a57
 80027c0:	08002a57 	.word	0x08002a57
 80027c4:	08002a57 	.word	0x08002a57
 80027c8:	08002a57 	.word	0x08002a57
 80027cc:	08002a57 	.word	0x08002a57
 80027d0:	08002a57 	.word	0x08002a57
 80027d4:	0800283f 	.word	0x0800283f
 80027d8:	08002a57 	.word	0x08002a57
 80027dc:	08002a57 	.word	0x08002a57
 80027e0:	08002a57 	.word	0x08002a57
 80027e4:	08002a57 	.word	0x08002a57
 80027e8:	08002a57 	.word	0x08002a57
 80027ec:	08002a57 	.word	0x08002a57
 80027f0:	08002a57 	.word	0x08002a57
 80027f4:	08002845 	.word	0x08002845
 80027f8:	08002a57 	.word	0x08002a57
 80027fc:	08002a57 	.word	0x08002a57
 8002800:	08002a57 	.word	0x08002a57
 8002804:	08002a57 	.word	0x08002a57
 8002808:	08002a57 	.word	0x08002a57
 800280c:	08002a57 	.word	0x08002a57
 8002810:	08002a57 	.word	0x08002a57
 8002814:	0800284b 	.word	0x0800284b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002818:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002824:	4b91      	ldr	r3, [pc, #580]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	4a90      	ldr	r2, [pc, #576]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002836:	e111      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002838:	4b8d      	ldr	r3, [pc, #564]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800283a:	61bb      	str	r3, [r7, #24]
      break;
 800283c:	e10e      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800283e:	4b8d      	ldr	r3, [pc, #564]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002840:	61bb      	str	r3, [r7, #24]
      break;
 8002842:	e10b      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002844:	4b8c      	ldr	r3, [pc, #560]	; (8002a78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002846:	61bb      	str	r3, [r7, #24]
      break;
 8002848:	e108      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800284a:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002854:	4b85      	ldr	r3, [pc, #532]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800285e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002860:	4b82      	ldr	r3, [pc, #520]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800286a:	4b80      	ldr	r3, [pc, #512]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002882:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80e1 	beq.w	8002a50 <HAL_RCC_GetSysClockFreq+0x2b8>
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b02      	cmp	r3, #2
 8002892:	f000 8083 	beq.w	800299c <HAL_RCC_GetSysClockFreq+0x204>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b02      	cmp	r3, #2
 800289a:	f200 80a1 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x248>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x114>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d056      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028aa:	e099      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02d      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028b8:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	4a6b      	ldr	r2, [pc, #428]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
 80028c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e2:	4b62      	ldr	r3, [pc, #392]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002912:	e087      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002a80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002926:	4b51      	ldr	r3, [pc, #324]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002936:	ed97 6a02 	vldr	s12, [r7, #8]
 800293a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002956:	e065      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297a:	ed97 6a02 	vldr	s12, [r7, #8]
 800297e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800298e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800299a:	e043      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002a88 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029be:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029de:	e021      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f2:	4b1e      	ldr	r3, [pc, #120]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a06:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a24:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	0a5b      	lsrs	r3, r3, #9
 8002a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a2e:	3301      	adds	r3, #1
 8002a30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 3a90 	vmov	r3, s15
 8002a4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a58:	61bb      	str	r3, [r7, #24]
      break;
 8002a5a:	bf00      	nop
  }

  return sysclockfreq;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	; 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	03d09000 	.word	0x03d09000
 8002a74:	003d0900 	.word	0x003d0900
 8002a78:	017d7840 	.word	0x017d7840
 8002a7c:	46000000 	.word	0x46000000
 8002a80:	4c742400 	.word	0x4c742400
 8002a84:	4a742400 	.word	0x4a742400
 8002a88:	4bbebc20 	.word	0x4bbebc20

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a92:	f7ff fe81 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b10      	ldr	r3, [pc, #64]	; (8002adc <HAL_RCC_GetHCLKFreq+0x50>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490f      	ldr	r1, [pc, #60]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_RCC_GetHCLKFreq+0x50>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ac8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aca:	4a07      	ldr	r2, [pc, #28]	; (8002ae8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	0800b288 	.word	0x0800b288
 8002ae4:	24000004 	.word	0x24000004
 8002ae8:	24000000 	.word	0x24000000

08002aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002af0:	f7ff ffcc 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4904      	ldr	r1, [pc, #16]	; (8002b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	58024400 	.word	0x58024400
 8002b14:	0800b288 	.word	0x0800b288

08002b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	223f      	movs	r2, #63	; 0x3f
 8002b26:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b28:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCC_GetClockConfig+0x7c>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0207 	and.w	r2, r3, #7
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002b34:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_RCC_GetClockConfig+0x7c>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002b40:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_RCC_GetClockConfig+0x7c>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <HAL_RCC_GetClockConfig+0x7c>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_RCC_GetClockConfig+0x7c>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002b64:	4b0b      	ldr	r3, [pc, #44]	; (8002b94 <HAL_RCC_GetClockConfig+0x7c>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_RCC_GetClockConfig+0x7c>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_GetClockConfig+0x80>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	601a      	str	r2, [r3, #0]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	58024400 	.word	0x58024400
 8002b98:	52002000 	.word	0x52002000

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba0:	b0cc      	sub	sp, #304	; 0x130
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002bc0:	2500      	movs	r5, #0
 8002bc2:	ea54 0305 	orrs.w	r3, r4, r5
 8002bc6:	d049      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002bc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bd2:	d02f      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002bd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002bd8:	d828      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002bda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002bde:	d01a      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002be0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002be4:	d822      	bhi.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bee:	d007      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf2:	4bb8      	ldr	r3, [pc, #736]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	4ab7      	ldr	r2, [pc, #732]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002bfe:	e01a      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c04:	3308      	adds	r3, #8
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fa11 	bl	8004030 <RCCEx_PLL2_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c14:	e00f      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c1a:	3328      	adds	r3, #40	; 0x28
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f001 fab8 	bl	8004194 <RCCEx_PLL3_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002c2a:	e004      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c32:	e000      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c36:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10a      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002c3e:	4ba5      	ldr	r3, [pc, #660]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4c:	4aa1      	ldr	r2, [pc, #644]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c4e:	430b      	orrs	r3, r1
 8002c50:	6513      	str	r3, [r2, #80]	; 0x50
 8002c52:	e003      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c54:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c58:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002c68:	f04f 0900 	mov.w	r9, #0
 8002c6c:	ea58 0309 	orrs.w	r3, r8, r9
 8002c70:	d047      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d82a      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002c7c:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c82:	bf00      	nop
 8002c84:	08002c99 	.word	0x08002c99
 8002c88:	08002ca7 	.word	0x08002ca7
 8002c8c:	08002cbd 	.word	0x08002cbd
 8002c90:	08002cdb 	.word	0x08002cdb
 8002c94:	08002cdb 	.word	0x08002cdb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c98:	4b8e      	ldr	r3, [pc, #568]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9c:	4a8d      	ldr	r2, [pc, #564]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ca4:	e01a      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ca6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002caa:	3308      	adds	r3, #8
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f9be 	bl	8004030 <RCCEx_PLL2_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cba:	e00f      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cc0:	3328      	adds	r3, #40	; 0x28
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 fa65 	bl	8004194 <RCCEx_PLL3_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002cd0:	e004      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002cd8:	e000      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ce4:	4b7b      	ldr	r3, [pc, #492]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce8:	f023 0107 	bic.w	r1, r3, #7
 8002cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	4a78      	ldr	r2, [pc, #480]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6513      	str	r3, [r2, #80]	; 0x50
 8002cf8:	e003      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002cfe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002d0e:	f04f 0b00 	mov.w	fp, #0
 8002d12:	ea5a 030b 	orrs.w	r3, sl, fp
 8002d16:	d04c      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d22:	d030      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d28:	d829      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d2c:	d02d      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8002d30:	d825      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d32:	2b80      	cmp	r3, #128	; 0x80
 8002d34:	d018      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d36:	2b80      	cmp	r3, #128	; 0x80
 8002d38:	d821      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d007      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002d42:	e01c      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d44:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	4a62      	ldr	r2, [pc, #392]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d50:	e01c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d56:	3308      	adds	r3, #8
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 f968 	bl	8004030 <RCCEx_PLL2_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d66:	e011      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d6c:	3328      	adds	r3, #40	; 0x28
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 fa0f 	bl	8004194 <RCCEx_PLL3_Config>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002d7c:	e006      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002d84:	e002      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d98:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da2:	4a4c      	ldr	r2, [pc, #304]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da4:	430b      	orrs	r3, r1
 8002da6:	6513      	str	r3, [r2, #80]	; 0x50
 8002da8:	e003      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002daa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002dae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002dbe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002dc8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	d053      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002dda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002dde:	d035      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002de0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002de4:	d82e      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002de6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002dea:	d031      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002dec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002df0:	d828      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df6:	d01a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfc:	d822      	bhi.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002e02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e06:	d007      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002e08:	e01c      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e0a:	4b32      	ldr	r3, [pc, #200]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e16:	e01c      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f905 	bl	8004030 <RCCEx_PLL2_Config>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e2c:	e011      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e32:	3328      	adds	r3, #40	; 0x28
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f9ac 	bl	8004194 <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e42:	e006      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002e4a:	e002      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002e62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e70:	e003      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002e76:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002e86:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002e90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002e94:	460b      	mov	r3, r1
 8002e96:	4313      	orrs	r3, r2
 8002e98:	d056      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ea2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ea6:	d038      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ea8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eac:	d831      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eb2:	d034      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002eb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eb8:	d82b      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ebe:	d01d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ec0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ec4:	d825      	bhi.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ece:	d00a      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ed0:	e01f      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002ed2:	bf00      	nop
 8002ed4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ed8:	4ba2      	ldr	r3, [pc, #648]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	4aa1      	ldr	r2, [pc, #644]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ee4:	e01c      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eea:	3308      	adds	r3, #8
 8002eec:	2100      	movs	r1, #0
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 f89e 	bl	8004030 <RCCEx_PLL2_Config>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002efa:	e011      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f00:	3328      	adds	r3, #40	; 0x28
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f001 f945 	bl	8004194 <RCCEx_PLL3_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f10:	e006      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f18:	e002      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f28:	4b8e      	ldr	r3, [pc, #568]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f38:	4a8a      	ldr	r2, [pc, #552]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3e:	e003      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f44:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002f54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f5e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002f62:	460b      	mov	r3, r1
 8002f64:	4313      	orrs	r3, r2
 8002f66:	d03a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	2b30      	cmp	r3, #48	; 0x30
 8002f70:	d01f      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002f72:	2b30      	cmp	r3, #48	; 0x30
 8002f74:	d819      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d00c      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d815      	bhi.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d019      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d111      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	4a76      	ldr	r2, [pc, #472]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002f92:	e011      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f98:	3308      	adds	r3, #8
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f847 	bl	8004030 <RCCEx_PLL2_Config>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002fa8:	e006      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002fb0:	e002      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002fc0:	4b68      	ldr	r3, [pc, #416]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002fc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	4a65      	ldr	r2, [pc, #404]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fd4:	e003      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002fda:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002fde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002fea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ff4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	d051      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002ffe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003008:	d035      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800300a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800300e:	d82e      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003010:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003014:	d031      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800301a:	d828      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800301c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003020:	d01a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003026:	d822      	bhi.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003030:	d007      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003032:	e01c      	b.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003034:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	4a4a      	ldr	r2, [pc, #296]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800303a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003040:	e01c      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003042:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003046:	3308      	adds	r3, #8
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fff0 	bl	8004030 <RCCEx_PLL2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003056:	e011      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003058:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800305c:	3328      	adds	r3, #40	; 0x28
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f001 f897 	bl	8004194 <RCCEx_PLL3_Config>
 8003066:	4603      	mov	r3, r0
 8003068:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800306c:	e006      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003074:	e002      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800307a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800307c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003084:	4b37      	ldr	r3, [pc, #220]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003088:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800308c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003092:	4a34      	ldr	r2, [pc, #208]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003094:	430b      	orrs	r3, r1
 8003096:	6513      	str	r3, [r2, #80]	; 0x50
 8003098:	e003      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800309e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80030ae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80030b2:	2300      	movs	r3, #0
 80030b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80030b8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80030bc:	460b      	mov	r3, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	d056      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80030c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d033      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80030ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d2:	d82c      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030d8:	d02f      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80030da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030de:	d826      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030e4:	d02b      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80030e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030ea:	d820      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f0:	d012      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80030f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030f6:	d81a      	bhi.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d022      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80030fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003100:	d115      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003106:	3308      	adds	r3, #8
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f000 ff90 	bl	8004030 <RCCEx_PLL2_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003116:	e015      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003118:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800311c:	3328      	adds	r3, #40	; 0x28
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f001 f837 	bl	8004194 <RCCEx_PLL3_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800312c:	e00a      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003134:	e006      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003136:	bf00      	nop
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800313a:	bf00      	nop
 800313c:	e002      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800313e:	bf00      	nop
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10d      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003154:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315a:	4a02      	ldr	r2, [pc, #8]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800315c:	430b      	orrs	r3, r1
 800315e:	6513      	str	r3, [r2, #80]	; 0x50
 8003160:	e006      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003162:	bf00      	nop
 8003164:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800316c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003170:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800317c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003186:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800318a:	460b      	mov	r3, r1
 800318c:	4313      	orrs	r3, r2
 800318e:	d055      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003190:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800319c:	d033      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800319e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031a2:	d82c      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d02f      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d826      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031b4:	d02b      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80031b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ba:	d820      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c0:	d012      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80031c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c6:	d81a      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x662>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d022      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80031cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d0:	d115      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031d6:	3308      	adds	r3, #8
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 ff28 	bl	8004030 <RCCEx_PLL2_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031e6:	e015      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031ec:	3328      	adds	r3, #40	; 0x28
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 ffcf 	bl	8004194 <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80031fc:	e00a      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003204:	e006      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003206:	bf00      	nop
 8003208:	e004      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800320a:	bf00      	nop
 800320c:	e002      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003212:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003214:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800321c:	4bb6      	ldr	r3, [pc, #728]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003224:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003228:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800322c:	4ab2      	ldr	r2, [pc, #712]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800322e:	430b      	orrs	r3, r1
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
 8003232:	e003      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003234:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003238:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800323c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003252:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003256:	460b      	mov	r3, r1
 8003258:	4313      	orrs	r3, r2
 800325a:	d02a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800325c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	2b00      	cmp	r3, #0
 8003264:	d011      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800326a:	d10a      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800326c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003270:	3308      	adds	r3, #8
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fedb 	bl	8004030 <RCCEx_PLL2_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003280:	e004      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003288:	e000      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800328a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003294:	4b98      	ldr	r3, [pc, #608]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800329c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a2:	4a95      	ldr	r2, [pc, #596]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032a8:	e003      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80032ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ba:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80032be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80032c2:	2300      	movs	r3, #0
 80032c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80032c8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80032cc:	460b      	mov	r3, r1
 80032ce:	4313      	orrs	r3, r2
 80032d0:	d037      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80032d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032dc:	d00e      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80032de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032e2:	d816      	bhi.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d018      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80032e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032ec:	d111      	bne.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ee:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	4a81      	ldr	r2, [pc, #516]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80032f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80032fa:	e00f      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003300:	3308      	adds	r3, #8
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fe93 	bl	8004030 <RCCEx_PLL2_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003310:	e004      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800331a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800331c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003324:	4b74      	ldr	r3, [pc, #464]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003328:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800332c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4a71      	ldr	r2, [pc, #452]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003334:	430b      	orrs	r3, r1
 8003336:	6513      	str	r3, [r2, #80]	; 0x50
 8003338:	e003      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800333a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800333e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003342:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800334e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003352:	2300      	movs	r3, #0
 8003354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003358:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800335c:	460b      	mov	r3, r1
 800335e:	4313      	orrs	r3, r2
 8003360:	d03a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003362:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003368:	2b03      	cmp	r3, #3
 800336a:	d81d      	bhi.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800336c:	a201      	add	r2, pc, #4	; (adr r2, 8003374 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800336e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003372:	bf00      	nop
 8003374:	080033b1 	.word	0x080033b1
 8003378:	08003385 	.word	0x08003385
 800337c:	08003393 	.word	0x08003393
 8003380:	080033b1 	.word	0x080033b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003384:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003390:	e00f      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003392:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003396:	3308      	adds	r3, #8
 8003398:	2102      	movs	r1, #2
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fe48 	bl	8004030 <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80033a6:	e004      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80033ae:	e000      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 80033b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10a      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80033ba:	4b4f      	ldr	r3, [pc, #316]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033be:	f023 0103 	bic.w	r1, r3, #3
 80033c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c8:	4a4b      	ldr	r2, [pc, #300]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80033ca:	430b      	orrs	r3, r1
 80033cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033ce:	e003      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80033e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033e8:	2300      	movs	r3, #0
 80033ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80033ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80033f2:	460b      	mov	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f000 80a0 	beq.w	800353a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fa:	4b40      	ldr	r3, [pc, #256]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a3f      	ldr	r2, [pc, #252]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003404:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003406:	f7fd fe7b 	bl	8001100 <HAL_GetTick>
 800340a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340e:	e00b      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003410:	f7fd fe76 	bl	8001100 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b64      	cmp	r3, #100	; 0x64
 800341e:	d903      	bls.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003426:	e005      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003428:	4b34      	ldr	r3, [pc, #208]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ed      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003434:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003438:	2b00      	cmp	r3, #0
 800343a:	d17a      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800343e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003444:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003448:	4053      	eors	r3, r2
 800344a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344e:	2b00      	cmp	r3, #0
 8003450:	d015      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003452:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003462:	4a25      	ldr	r2, [pc, #148]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800346a:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003470:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003476:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003478:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800347e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003482:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d118      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fd fe38 	bl	8001100 <HAL_GetTick>
 8003490:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003494:	e00d      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003496:	f7fd fe33 	bl	8001100 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034a0:	1ad2      	subs	r2, r2, r3
 80034a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d903      	bls.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 80034b0:	e005      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0eb      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80034be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d130      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d6:	d115      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80034d8:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80034e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034e8:	091a      	lsrs	r2, r3, #4
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80034ec:	4013      	ands	r3, r2
 80034ee:	4a02      	ldr	r2, [pc, #8]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	6113      	str	r3, [r2, #16]
 80034f4:	e00c      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80034f6:	bf00      	nop
 80034f8:	58024400 	.word	0x58024400
 80034fc:	58024800 	.word	0x58024800
 8003500:	00ffffcf 	.word	0x00ffffcf
 8003504:	4bd4      	ldr	r3, [pc, #848]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	4ad3      	ldr	r2, [pc, #844]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800350a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800350e:	6113      	str	r3, [r2, #16]
 8003510:	4bd1      	ldr	r3, [pc, #836]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003512:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003514:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003518:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	4acd      	ldr	r2, [pc, #820]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003522:	430b      	orrs	r3, r1
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
 8003526:	e008      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003528:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800352c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8003530:	e003      	b.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003532:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003536:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800353a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f002 0301 	and.w	r3, r2, #1
 8003546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003550:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003554:	460b      	mov	r3, r1
 8003556:	4313      	orrs	r3, r2
 8003558:	f000 808b 	beq.w	8003672 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800355c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003564:	2b28      	cmp	r3, #40	; 0x28
 8003566:	d86b      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003568:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	08003649 	.word	0x08003649
 8003574:	08003641 	.word	0x08003641
 8003578:	08003641 	.word	0x08003641
 800357c:	08003641 	.word	0x08003641
 8003580:	08003641 	.word	0x08003641
 8003584:	08003641 	.word	0x08003641
 8003588:	08003641 	.word	0x08003641
 800358c:	08003641 	.word	0x08003641
 8003590:	08003615 	.word	0x08003615
 8003594:	08003641 	.word	0x08003641
 8003598:	08003641 	.word	0x08003641
 800359c:	08003641 	.word	0x08003641
 80035a0:	08003641 	.word	0x08003641
 80035a4:	08003641 	.word	0x08003641
 80035a8:	08003641 	.word	0x08003641
 80035ac:	08003641 	.word	0x08003641
 80035b0:	0800362b 	.word	0x0800362b
 80035b4:	08003641 	.word	0x08003641
 80035b8:	08003641 	.word	0x08003641
 80035bc:	08003641 	.word	0x08003641
 80035c0:	08003641 	.word	0x08003641
 80035c4:	08003641 	.word	0x08003641
 80035c8:	08003641 	.word	0x08003641
 80035cc:	08003641 	.word	0x08003641
 80035d0:	08003649 	.word	0x08003649
 80035d4:	08003641 	.word	0x08003641
 80035d8:	08003641 	.word	0x08003641
 80035dc:	08003641 	.word	0x08003641
 80035e0:	08003641 	.word	0x08003641
 80035e4:	08003641 	.word	0x08003641
 80035e8:	08003641 	.word	0x08003641
 80035ec:	08003641 	.word	0x08003641
 80035f0:	08003649 	.word	0x08003649
 80035f4:	08003641 	.word	0x08003641
 80035f8:	08003641 	.word	0x08003641
 80035fc:	08003641 	.word	0x08003641
 8003600:	08003641 	.word	0x08003641
 8003604:	08003641 	.word	0x08003641
 8003608:	08003641 	.word	0x08003641
 800360c:	08003641 	.word	0x08003641
 8003610:	08003649 	.word	0x08003649
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003614:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003618:	3308      	adds	r3, #8
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fd07 	bl	8004030 <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003628:	e00f      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800362a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800362e:	3328      	adds	r3, #40	; 0x28
 8003630:	2101      	movs	r1, #1
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fdae 	bl	8004194 <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003652:	4b81      	ldr	r3, [pc, #516]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003656:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800365a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800365e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003662:	4a7d      	ldr	r2, [pc, #500]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003664:	430b      	orrs	r3, r1
 8003666:	6553      	str	r3, [r2, #84]	; 0x54
 8003668:	e003      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800366e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003672:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f002 0302 	and.w	r3, r2, #2
 800367e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003682:	2300      	movs	r3, #0
 8003684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003688:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800368c:	460b      	mov	r3, r1
 800368e:	4313      	orrs	r3, r2
 8003690:	d042      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003698:	2b05      	cmp	r3, #5
 800369a:	d825      	bhi.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800369c:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800369e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a2:	bf00      	nop
 80036a4:	080036f1 	.word	0x080036f1
 80036a8:	080036bd 	.word	0x080036bd
 80036ac:	080036d3 	.word	0x080036d3
 80036b0:	080036f1 	.word	0x080036f1
 80036b4:	080036f1 	.word	0x080036f1
 80036b8:	080036f1 	.word	0x080036f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c0:	3308      	adds	r3, #8
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fcb3 	bl	8004030 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036d0:	e00f      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036d6:	3328      	adds	r3, #40	; 0x28
 80036d8:	2101      	movs	r1, #1
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fd5a 	bl	8004194 <RCCEx_PLL3_Config>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80036e6:	e004      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80036ee:	e000      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80036f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10a      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036fa:	4b57      	ldr	r3, [pc, #348]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	f023 0107 	bic.w	r1, r3, #7
 8003702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003708:	4a53      	ldr	r2, [pc, #332]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800370a:	430b      	orrs	r3, r1
 800370c:	6553      	str	r3, [r2, #84]	; 0x54
 800370e:	e003      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003710:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003714:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003718:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003720:	f002 0304 	and.w	r3, r2, #4
 8003724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003728:	2300      	movs	r3, #0
 800372a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800372e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003732:	460b      	mov	r3, r1
 8003734:	4313      	orrs	r3, r2
 8003736:	d044      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003738:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800373c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003740:	2b05      	cmp	r3, #5
 8003742:	d825      	bhi.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003744:	a201      	add	r2, pc, #4	; (adr r2, 800374c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374a:	bf00      	nop
 800374c:	08003799 	.word	0x08003799
 8003750:	08003765 	.word	0x08003765
 8003754:	0800377b 	.word	0x0800377b
 8003758:	08003799 	.word	0x08003799
 800375c:	08003799 	.word	0x08003799
 8003760:	08003799 	.word	0x08003799
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003764:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003768:	3308      	adds	r3, #8
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 fc5f 	bl	8004030 <RCCEx_PLL2_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003778:	e00f      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800377a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800377e:	3328      	adds	r3, #40	; 0x28
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fd06 	bl	8004194 <RCCEx_PLL3_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800378e:	e004      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003796:	e000      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800379a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037a2:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	f023 0107 	bic.w	r1, r3, #7
 80037aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b2:	4a29      	ldr	r2, [pc, #164]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6593      	str	r3, [r2, #88]	; 0x58
 80037b8:	e003      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f002 0320 	and.w	r3, r2, #32
 80037ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037d2:	2300      	movs	r3, #0
 80037d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037dc:	460b      	mov	r3, r1
 80037de:	4313      	orrs	r3, r2
 80037e0:	d057      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80037e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ee:	d035      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80037f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037f4:	d82c      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d031      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80037fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003800:	d826      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003806:	d02d      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003808:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800380c:	d820      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800380e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003812:	d012      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003818:	d81a      	bhi.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d024      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800381e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003822:	d115      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003824:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003828:	3308      	adds	r3, #8
 800382a:	2100      	movs	r1, #0
 800382c:	4618      	mov	r0, r3
 800382e:	f000 fbff 	bl	8004030 <RCCEx_PLL2_Config>
 8003832:	4603      	mov	r3, r0
 8003834:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003838:	e017      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800383a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800383e:	3328      	adds	r3, #40	; 0x28
 8003840:	2102      	movs	r1, #2
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fca6 	bl	8004194 <RCCEx_PLL3_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800384e:	e00c      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003856:	e008      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003858:	58024400 	.word	0x58024400
        break;
 800385c:	bf00      	nop
 800385e:	e004      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003872:	4bc2      	ldr	r3, [pc, #776]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800387a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	4abe      	ldr	r2, [pc, #760]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003884:	430b      	orrs	r3, r1
 8003886:	6553      	str	r3, [r2, #84]	; 0x54
 8003888:	e003      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800388e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800389e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80038a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4313      	orrs	r3, r2
 80038b0:	d055      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80038b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038be:	d033      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80038c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80038c4:	d82c      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80038c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ca:	d02f      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80038cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d0:	d826      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80038d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038d6:	d02b      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80038d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038dc:	d820      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e2:	d012      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80038e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e8:	d81a      	bhi.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d022      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d115      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038f8:	3308      	adds	r3, #8
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fb97 	bl	8004030 <RCCEx_PLL2_Config>
 8003902:	4603      	mov	r3, r0
 8003904:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003908:	e015      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800390a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800390e:	3328      	adds	r3, #40	; 0x28
 8003910:	2102      	movs	r1, #2
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fc3e 	bl	8004194 <RCCEx_PLL3_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800391e:	e00a      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003926:	e006      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003928:	bf00      	nop
 800392a:	e004      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800392c:	bf00      	nop
 800392e:	e002      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003930:	bf00      	nop
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003936:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800393e:	4b8f      	ldr	r3, [pc, #572]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003946:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800394a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800394e:	4a8b      	ldr	r2, [pc, #556]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003950:	430b      	orrs	r3, r1
 8003952:	6593      	str	r3, [r2, #88]	; 0x58
 8003954:	e003      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003956:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800395a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800395e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800396a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003974:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003978:	460b      	mov	r3, r1
 800397a:	4313      	orrs	r3, r2
 800397c:	d055      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800397e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003986:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800398a:	d033      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800398c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003990:	d82c      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003996:	d02f      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399c:	d826      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800399e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039a2:	d02b      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80039a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80039a8:	d820      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80039aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039ae:	d012      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80039b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039b4:	d81a      	bhi.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d022      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80039ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039be:	d115      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039c4:	3308      	adds	r3, #8
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f000 fb31 	bl	8004030 <RCCEx_PLL2_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039d4:	e015      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039da:	3328      	adds	r3, #40	; 0x28
 80039dc:	2102      	movs	r1, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fbd8 	bl	8004194 <RCCEx_PLL3_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80039ea:	e00a      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80039f2:	e006      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039f4:	bf00      	nop
 80039f6:	e004      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10b      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a1a:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a1c:	430b      	orrs	r3, r1
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a20:	e003      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f002 0308 	and.w	r3, r2, #8
 8003a36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a40:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003a44:	460b      	mov	r3, r1
 8003a46:	4313      	orrs	r3, r2
 8003a48:	d01e      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a5c:	3328      	adds	r3, #40	; 0x28
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f000 fb97 	bl	8004194 <RCCEx_PLL3_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003a72:	4b42      	ldr	r3, [pc, #264]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	4a3e      	ldr	r2, [pc, #248]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	f002 0310 	and.w	r3, r2, #16
 8003a94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003a9e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	d01e      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ab0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aba:	3328      	adds	r3, #40	; 0x28
 8003abc:	2102      	movs	r1, #2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fb68 	bl	8004194 <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ad0:	4b2a      	ldr	r3, [pc, #168]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003adc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ae0:	4a26      	ldr	r2, [pc, #152]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aee:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003af2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003af6:	2300      	movs	r3, #0
 8003af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003afc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b00:	460b      	mov	r3, r1
 8003b02:	4313      	orrs	r3, r2
 8003b04:	d040      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b12:	d022      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003b14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b18:	d81b      	bhi.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8003b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b22:	d00b      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003b24:	e015      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa7e 	bl	8004030 <RCCEx_PLL2_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b3a:	e00f      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b40:	3328      	adds	r3, #40	; 0x28
 8003b42:	2102      	movs	r1, #2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fb25 	bl	8004194 <RCCEx_PLL3_Config>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003b50:	e004      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b58:	e000      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10d      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b64:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b74:	4a01      	ldr	r2, [pc, #4]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003b76:	430b      	orrs	r3, r1
 8003b78:	6593      	str	r3, [r2, #88]	; 0x58
 8003b7a:	e005      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b80:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b84:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b90:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b96:	2300      	movs	r3, #0
 8003b98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b9a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	d03b      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ba4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bb0:	d01f      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003bb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003bb6:	d818      	bhi.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbc:	d003      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc2:	d007      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003bc4:	e011      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bc6:	4b64      	ldr	r3, [pc, #400]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	4a63      	ldr	r2, [pc, #396]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003bd2:	e00f      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bd8:	3328      	adds	r3, #40	; 0x28
 8003bda:	2101      	movs	r1, #1
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 fad9 	bl	8004194 <RCCEx_PLL3_Config>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003be8:	e004      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10b      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003bfc:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c0c:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6553      	str	r3, [r2, #84]	; 0x54
 8003c12:	e003      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c18:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003c28:	673b      	str	r3, [r7, #112]	; 0x70
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	677b      	str	r3, [r7, #116]	; 0x74
 8003c2e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003c32:	460b      	mov	r3, r1
 8003c34:	4313      	orrs	r3, r2
 8003c36:	d031      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c46:	d007      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003c48:	e011      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c4a:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	4a42      	ldr	r2, [pc, #264]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c56:	e00e      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	2102      	movs	r1, #2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f000 f9e5 	bl	8004030 <RCCEx_PLL2_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003c6c:	e003      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c76:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10a      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003c7e:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8c:	4a32      	ldr	r2, [pc, #200]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c92:	e003      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c98:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003ca8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003caa:	2300      	movs	r3, #0
 8003cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	d00c      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cbc:	3328      	adds	r3, #40	; 0x28
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 fa67 	bl	8004194 <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003cde:	663b      	str	r3, [r7, #96]	; 0x60
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	667b      	str	r3, [r7, #100]	; 0x64
 8003ce4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	d03a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cfa:	d018      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003cfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d00:	d811      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d06:	d014      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0c:	d80b      	bhi.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d011      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d16:	d106      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d18:	4b0f      	ldr	r3, [pc, #60]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a0e      	ldr	r2, [pc, #56]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003d24:	e008      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003d2c:	e004      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003d2e:	bf00      	nop
 8003d30:	e002      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003d32:	bf00      	nop
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003d36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10d      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d40:	4b05      	ldr	r3, [pc, #20]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d50:	4a01      	ldr	r2, [pc, #4]	; (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003d52:	430b      	orrs	r3, r1
 8003d54:	6553      	str	r3, [r2, #84]	; 0x54
 8003d56:	e005      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d60:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003d70:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d72:	2300      	movs	r3, #0
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d76:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d80:	4baa      	ldr	r3, [pc, #680]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8e:	4aa7      	ldr	r2, [pc, #668]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003da0:	653b      	str	r3, [r7, #80]	; 0x50
 8003da2:	2300      	movs	r3, #0
 8003da4:	657b      	str	r3, [r7, #84]	; 0x54
 8003da6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003daa:	460b      	mov	r3, r1
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003db0:	4b9e      	ldr	r3, [pc, #632]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003dc0:	4a9a      	ldr	r2, [pc, #616]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4313      	orrs	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003de2:	4b92      	ldr	r3, [pc, #584]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	4a8e      	ldr	r2, [pc, #568]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003df2:	430b      	orrs	r3, r1
 8003df4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003e02:	643b      	str	r3, [r7, #64]	; 0x40
 8003e04:	2300      	movs	r3, #0
 8003e06:	647b      	str	r3, [r7, #68]	; 0x44
 8003e08:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	d00e      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e12:	4b86      	ldr	r3, [pc, #536]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	4a85      	ldr	r2, [pc, #532]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e1c:	6113      	str	r3, [r2, #16]
 8003e1e:	4b83      	ldr	r3, [pc, #524]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e20:	6919      	ldr	r1, [r3, #16]
 8003e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e2a:	4a80      	ldr	r2, [pc, #512]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003e3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e3e:	2300      	movs	r3, #0
 8003e40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e42:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003e46:	460b      	mov	r3, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e4c:	4b77      	ldr	r3, [pc, #476]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e50:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	4a74      	ldr	r2, [pc, #464]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e6e:	2300      	movs	r3, #0
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
 8003e72:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003e76:	460b      	mov	r3, r1
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	d00a      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e7c:	4b6b      	ldr	r3, [pc, #428]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e80:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	4a67      	ldr	r2, [pc, #412]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003e92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ea4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d011      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f8ba 	bl	8004030 <RCCEx_PLL2_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003ec2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ece:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eda:	2100      	movs	r1, #0
 8003edc:	6239      	str	r1, [r7, #32]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4313      	orrs	r3, r2
 8003eec:	d011      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 f89a 	bl	8004030 <RCCEx_PLL2_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003f02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f0e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	61b9      	str	r1, [r7, #24]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	d011      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f32:	3308      	adds	r3, #8
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 f87a 	bl	8004030 <RCCEx_PLL2_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003f42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d003      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	6139      	str	r1, [r7, #16]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	d011      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f72:	3328      	adds	r3, #40	; 0x28
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 f90c 	bl	8004194 <RCCEx_PLL3_Config>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8003f82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f8e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d011      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fb2:	3328      	adds	r3, #40	; 0x28
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f8ec 	bl	8004194 <RCCEx_PLL3_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8003fc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003fce:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fda:	2100      	movs	r1, #0
 8003fdc:	6039      	str	r1, [r7, #0]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d011      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ff2:	3328      	adds	r3, #40	; 0x28
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f000 f8cc 	bl	8004194 <RCCEx_PLL3_Config>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004002:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800400e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8004012:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800401a:	2300      	movs	r3, #0
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
}
 8004020:	4618      	mov	r0, r3
 8004022:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004026:	46bd      	mov	sp, r7
 8004028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800402c:	58024400 	.word	0x58024400

08004030 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800403e:	4b53      	ldr	r3, [pc, #332]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b03      	cmp	r3, #3
 8004048:	d101      	bne.n	800404e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e099      	b.n	8004182 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800404e:	4b4f      	ldr	r3, [pc, #316]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a4e      	ldr	r2, [pc, #312]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004054:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fd f851 	bl	8001100 <HAL_GetTick>
 800405e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004060:	e008      	b.n	8004074 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004062:	f7fd f84d 	bl	8001100 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e086      	b.n	8004182 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004074:	4b45      	ldr	r3, [pc, #276]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004080:	4b42      	ldr	r3, [pc, #264]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	031b      	lsls	r3, r3, #12
 800408e:	493f      	ldr	r1, [pc, #252]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	628b      	str	r3, [r1, #40]	; 0x28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	3b01      	subs	r3, #1
 800409a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	3b01      	subs	r3, #1
 80040a4:	025b      	lsls	r3, r3, #9
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	3b01      	subs	r3, #1
 80040be:	061b      	lsls	r3, r3, #24
 80040c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80040c4:	4931      	ldr	r1, [pc, #196]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80040ca:	4b30      	ldr	r3, [pc, #192]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	492d      	ldr	r1, [pc, #180]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80040dc:	4b2b      	ldr	r3, [pc, #172]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	f023 0220 	bic.w	r2, r3, #32
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	4928      	ldr	r1, [pc, #160]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	4a26      	ldr	r2, [pc, #152]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040f4:	f023 0310 	bic.w	r3, r3, #16
 80040f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 80040fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040fe:	4b24      	ldr	r3, [pc, #144]	; (8004190 <RCCEx_PLL2_Config+0x160>)
 8004100:	4013      	ands	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	69d2      	ldr	r2, [r2, #28]
 8004106:	00d2      	lsls	r2, r2, #3
 8004108:	4920      	ldr	r1, [pc, #128]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800410e:	4b1f      	ldr	r3, [pc, #124]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	4a1e      	ldr	r2, [pc, #120]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004114:	f043 0310 	orr.w	r3, r3, #16
 8004118:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d106      	bne.n	800412e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	4a19      	ldr	r2, [pc, #100]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800412a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800412c:	e00f      	b.n	800414e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d106      	bne.n	8004142 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004134:	4b15      	ldr	r3, [pc, #84]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	4a14      	ldr	r2, [pc, #80]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 800413a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800413e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004140:	e005      	b.n	800414e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004142:	4b12      	ldr	r3, [pc, #72]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004146:	4a11      	ldr	r2, [pc, #68]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800414c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a0e      	ldr	r2, [pc, #56]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004154:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415a:	f7fc ffd1 	bl	8001100 <HAL_GetTick>
 800415e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004160:	e008      	b.n	8004174 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004162:	f7fc ffcd 	bl	8001100 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e006      	b.n	8004182 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <RCCEx_PLL2_Config+0x15c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0f0      	beq.n	8004162 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	58024400 	.word	0x58024400
 8004190:	ffff0007 	.word	0xffff0007

08004194 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80041a2:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	d101      	bne.n	80041b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e099      	b.n	80042e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80041b2:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a4e      	ldr	r2, [pc, #312]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80041b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041be:	f7fc ff9f 	bl	8001100 <HAL_GetTick>
 80041c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80041c6:	f7fc ff9b 	bl	8001100 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e086      	b.n	80042e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80041d8:	4b45      	ldr	r3, [pc, #276]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1f0      	bne.n	80041c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80041e4:	4b42      	ldr	r3, [pc, #264]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	051b      	lsls	r3, r3, #20
 80041f2:	493f      	ldr	r1, [pc, #252]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	628b      	str	r3, [r1, #40]	; 0x28
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	3b01      	subs	r3, #1
 8004208:	025b      	lsls	r3, r3, #9
 800420a:	b29b      	uxth	r3, r3
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	3b01      	subs	r3, #1
 8004214:	041b      	lsls	r3, r3, #16
 8004216:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	3b01      	subs	r3, #1
 8004222:	061b      	lsls	r3, r3, #24
 8004224:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004228:	4931      	ldr	r1, [pc, #196]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	492d      	ldr	r1, [pc, #180]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	4928      	ldr	r1, [pc, #160]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004252:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004256:	4a26      	ldr	r2, [pc, #152]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004258:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800425c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <RCCEx_PLL3_Config+0x160>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	69d2      	ldr	r2, [r2, #28]
 800426a:	00d2      	lsls	r2, r2, #3
 800426c:	4920      	ldr	r1, [pc, #128]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 800426e:	4313      	orrs	r3, r2
 8004270:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004276:	4a1e      	ldr	r2, [pc, #120]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004284:	4b1a      	ldr	r3, [pc, #104]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	4a19      	ldr	r2, [pc, #100]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 800428a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800428e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004290:	e00f      	b.n	80042b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004298:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	4a14      	ldr	r2, [pc, #80]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 800429e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80042a4:	e005      	b.n	80042b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80042a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042aa:	4a11      	ldr	r2, [pc, #68]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80042ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80042b2:	4b0f      	ldr	r3, [pc, #60]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042be:	f7fc ff1f 	bl	8001100 <HAL_GetTick>
 80042c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042c4:	e008      	b.n	80042d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80042c6:	f7fc ff1b 	bl	8001100 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d901      	bls.n	80042d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <RCCEx_PLL3_Config+0x15c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f0      	beq.n	80042c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	58024400 	.word	0x58024400
 80042f4:	ffff0007 	.word	0xffff0007

080042f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e049      	b.n	800439e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f841 	bl	80043a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 fa00 	bl	800473c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
	...

080043bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e054      	b.n	800447e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0201 	orr.w	r2, r2, #1
 80043ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a26      	ldr	r2, [pc, #152]	; (800448c <HAL_TIM_Base_Start_IT+0xd0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d022      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x80>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fe:	d01d      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x80>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a22      	ldr	r2, [pc, #136]	; (8004490 <HAL_TIM_Base_Start_IT+0xd4>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d018      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x80>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a21      	ldr	r2, [pc, #132]	; (8004494 <HAL_TIM_Base_Start_IT+0xd8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x80>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <HAL_TIM_Base_Start_IT+0xdc>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x80>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <HAL_TIM_Base_Start_IT+0xe0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d009      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x80>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a1c      	ldr	r2, [pc, #112]	; (80044a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_TIM_Base_Start_IT+0x80>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a1b      	ldr	r2, [pc, #108]	; (80044a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d115      	bne.n	8004468 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689a      	ldr	r2, [r3, #8]
 8004442:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_TIM_Base_Start_IT+0xec>)
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b06      	cmp	r3, #6
 800444c:	d015      	beq.n	800447a <HAL_TIM_Base_Start_IT+0xbe>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d011      	beq.n	800447a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004466:	e008      	b.n	800447a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	e000      	b.n	800447c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800447a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800447c:	2300      	movs	r3, #0
}
 800447e:	4618      	mov	r0, r3
 8004480:	3714      	adds	r7, #20
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40010400 	.word	0x40010400
 80044a0:	40001800 	.word	0x40001800
 80044a4:	40014000 	.word	0x40014000
 80044a8:	00010007 	.word	0x00010007

080044ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	f003 0302 	and.w	r3, r3, #2
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d122      	bne.n	8004508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d11b      	bne.n	8004508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f06f 0202 	mvn.w	r2, #2
 80044d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f905 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 80044f4:	e005      	b.n	8004502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f8f7 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f908 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b04      	cmp	r3, #4
 8004514:	d122      	bne.n	800455c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b04      	cmp	r3, #4
 8004522:	d11b      	bne.n	800455c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f06f 0204 	mvn.w	r2, #4
 800452c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2202      	movs	r2, #2
 8004532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699b      	ldr	r3, [r3, #24]
 800453a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f8db 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 8004548:	e005      	b.n	8004556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 f8cd 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f8de 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b08      	cmp	r3, #8
 8004568:	d122      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b08      	cmp	r3, #8
 8004576:	d11b      	bne.n	80045b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0208 	mvn.w	r2, #8
 8004580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2204      	movs	r2, #4
 8004586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f8b1 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 800459c:	e005      	b.n	80045aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8a3 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f8b4 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0310 	and.w	r3, r3, #16
 80045ba:	2b10      	cmp	r3, #16
 80045bc:	d122      	bne.n	8004604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b10      	cmp	r3, #16
 80045ca:	d11b      	bne.n	8004604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0210 	mvn.w	r2, #16
 80045d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2208      	movs	r2, #8
 80045da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f887 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f879 	bl	80046ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f88a 	bl	8004712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10e      	bne.n	8004630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d107      	bne.n	8004630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0201 	mvn.w	r2, #1
 8004628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fb4a 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d10e      	bne.n	800465c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d107      	bne.n	800465c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f914 	bl	8004884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466a:	d10e      	bne.n	800468a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004676:	2b80      	cmp	r3, #128	; 0x80
 8004678:	d107      	bne.n	800468a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f907 	bl	8004898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d10e      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a2:	2b40      	cmp	r3, #64	; 0x40
 80046a4:	d107      	bne.n	80046b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f838 	bl	8004726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d10e      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f003 0320 	and.w	r3, r3, #32
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d107      	bne.n	80046e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f06f 0220 	mvn.w	r2, #32
 80046da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f8c7 	bl	8004870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
	...

0800473c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a40      	ldr	r2, [pc, #256]	; (8004850 <TIM_Base_SetConfig+0x114>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d013      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800475a:	d00f      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3d      	ldr	r2, [pc, #244]	; (8004854 <TIM_Base_SetConfig+0x118>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00b      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3c      	ldr	r2, [pc, #240]	; (8004858 <TIM_Base_SetConfig+0x11c>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3b      	ldr	r2, [pc, #236]	; (800485c <TIM_Base_SetConfig+0x120>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <TIM_Base_SetConfig+0x124>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d108      	bne.n	800478e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2f      	ldr	r2, [pc, #188]	; (8004850 <TIM_Base_SetConfig+0x114>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d01f      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479c:	d01b      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2c      	ldr	r2, [pc, #176]	; (8004854 <TIM_Base_SetConfig+0x118>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d017      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2b      	ldr	r2, [pc, #172]	; (8004858 <TIM_Base_SetConfig+0x11c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2a      	ldr	r2, [pc, #168]	; (800485c <TIM_Base_SetConfig+0x120>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00f      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a29      	ldr	r2, [pc, #164]	; (8004860 <TIM_Base_SetConfig+0x124>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a28      	ldr	r2, [pc, #160]	; (8004864 <TIM_Base_SetConfig+0x128>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a27      	ldr	r2, [pc, #156]	; (8004868 <TIM_Base_SetConfig+0x12c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x9a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a26      	ldr	r2, [pc, #152]	; (800486c <TIM_Base_SetConfig+0x130>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a10      	ldr	r2, [pc, #64]	; (8004850 <TIM_Base_SetConfig+0x114>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d00f      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a12      	ldr	r2, [pc, #72]	; (8004860 <TIM_Base_SetConfig+0x124>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a11      	ldr	r2, [pc, #68]	; (8004864 <TIM_Base_SetConfig+0x128>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a10      	ldr	r2, [pc, #64]	; (8004868 <TIM_Base_SetConfig+0x12c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0xf8>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0f      	ldr	r2, [pc, #60]	; (800486c <TIM_Base_SetConfig+0x130>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d103      	bne.n	800483c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	615a      	str	r2, [r3, #20]
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	40010000 	.word	0x40010000
 8004854:	40000400 	.word	0x40000400
 8004858:	40000800 	.word	0x40000800
 800485c:	40000c00 	.word	0x40000c00
 8004860:	40010400 	.word	0x40010400
 8004864:	40014000 	.word	0x40014000
 8004868:	40014400 	.word	0x40014400
 800486c:	40014800 	.word	0x40014800

08004870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <HAL_ETH_RxCpltCallback+0x1c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f000 f941 	bl	8004b40 <osSemaphoreRelease>
}
 80048be:	bf00      	nop
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	24000a9c 	.word	0x24000a9c

080048cc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <HAL_ETH_TxCpltCallback+0x1c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 f931 	bl	8004b40 <osSemaphoreRelease>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	24000aa0 	.word	0x24000aa0

080048ec <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fc fecd 	bl	8001694 <HAL_ETH_GetDMAError>
 80048fa:	4603      	mov	r3, r0
 80048fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004900:	2b80      	cmp	r3, #128	; 0x80
 8004902:	d104      	bne.n	800490e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004904:	4b04      	ldr	r3, [pc, #16]	; (8004918 <HAL_ETH_ErrorCallback+0x2c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 f919 	bl	8004b40 <osSemaphoreRelease>
  }
}
 800490e:	bf00      	nop
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	24000a9c 	.word	0x24000a9c

0800491c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800492a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800492e:	2b84      	cmp	r3, #132	; 0x84
 8004930:	d005      	beq.n	800493e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004932:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4413      	add	r3, r2
 800493a:	3303      	adds	r3, #3
 800493c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800493e:	68fb      	ldr	r3, [r7, #12]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004952:	f3ef 8305 	mrs	r3, IPSR
 8004956:	607b      	str	r3, [r7, #4]
  return(result);
 8004958:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800495a:	2b00      	cmp	r3, #0
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004974:	f001 fd60 	bl	8006438 <vTaskStartScheduler>
  
  return osOK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	bd80      	pop	{r7, pc}

0800497e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800497e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004980:	b089      	sub	sp, #36	; 0x24
 8004982:	af04      	add	r7, sp, #16
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d020      	beq.n	80049d2 <osThreadCreate+0x54>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01c      	beq.n	80049d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685c      	ldr	r4, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681d      	ldr	r5, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691e      	ldr	r6, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff ffb6 	bl	800491c <makeFreeRtosPriority>
 80049b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049ba:	9202      	str	r2, [sp, #8]
 80049bc:	9301      	str	r3, [sp, #4]
 80049be:	9100      	str	r1, [sp, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	4632      	mov	r2, r6
 80049c4:	4629      	mov	r1, r5
 80049c6:	4620      	mov	r0, r4
 80049c8:	f001 fb58 	bl	800607c <xTaskCreateStatic>
 80049cc:	4603      	mov	r3, r0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e01c      	b.n	8004a0c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685c      	ldr	r4, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049de:	b29e      	uxth	r6, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff ff98 	bl	800491c <makeFreeRtosPriority>
 80049ec:	4602      	mov	r2, r0
 80049ee:	f107 030c 	add.w	r3, r7, #12
 80049f2:	9301      	str	r3, [sp, #4]
 80049f4:	9200      	str	r2, [sp, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	4632      	mov	r2, r6
 80049fa:	4629      	mov	r1, r5
 80049fc:	4620      	mov	r0, r4
 80049fe:	f001 fb9a 	bl	8006136 <xTaskCreate>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d001      	beq.n	8004a0c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <osDelay+0x16>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	e000      	b.n	8004a2e <osDelay+0x18>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 fcce 	bl	80063d0 <vTaskDelay>
  
  return osOK;
 8004a34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af02      	add	r7, sp, #8
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00f      	beq.n	8004a70 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d10a      	bne.n	8004a6c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	9200      	str	r2, [sp, #0]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2100      	movs	r1, #0
 8004a62:	2001      	movs	r0, #1
 8004a64:	f000 fdf8 	bl	8005658 <xQueueGenericCreateStatic>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	e016      	b.n	8004a9a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	e014      	b.n	8004a9a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d110      	bne.n	8004a98 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8004a76:	2203      	movs	r2, #3
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2001      	movs	r0, #1
 8004a7c:	f000 fe64 	bl	8005748 <xQueueGenericCreate>
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <osSemaphoreCreate+0x56>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 feb4 	bl	80057fc <xQueueGenericSend>
      return sema;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	e000      	b.n	8004a9a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004a98:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	e03a      	b.n	8004b32 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ac6:	d103      	bne.n	8004ad0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e009      	b.n	8004ae4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d006      	beq.n	8004ae4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <osSemaphoreWait+0x40>
      ticks = 1;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004ae4:	f7ff ff32 	bl	800494c <inHandlerMode>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d017      	beq.n	8004b1e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004aee:	f107 0308 	add.w	r3, r7, #8
 8004af2:	461a      	mov	r2, r3
 8004af4:	2100      	movs	r1, #0
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f918 	bl	8005d2c <xQueueReceiveFromISR>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004b02:	23ff      	movs	r3, #255	; 0xff
 8004b04:	e015      	b.n	8004b32 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d011      	beq.n	8004b30 <osSemaphoreWait+0x8c>
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <osSemaphoreWait+0x98>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	e008      	b.n	8004b30 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fff7 	bl	8005b14 <xQueueSemaphoreTake>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d001      	beq.n	8004b30 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004b2c:	23ff      	movs	r3, #255	; 0xff
 8004b2e:	e000      	b.n	8004b32 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004b50:	f7ff fefc 	bl	800494c <inHandlerMode>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 ff49 	bl	80059f8 <xQueueGiveFromISR>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d001      	beq.n	8004b70 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004b6c:	23ff      	movs	r3, #255	; 0xff
 8004b6e:	e017      	b.n	8004ba0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d013      	beq.n	8004b9e <osSemaphoreRelease+0x5e>
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <osSemaphoreRelease+0x68>)
 8004b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b7c:	601a      	str	r2, [r3, #0]
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	f3bf 8f6f 	isb	sy
 8004b86:	e00a      	b.n	8004b9e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004b88:	2300      	movs	r3, #0
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fe34 	bl	80057fc <xQueueGenericSend>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d001      	beq.n	8004b9e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004b9a:	23ff      	movs	r3, #255	; 0xff
 8004b9c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	e000ed04 	.word	0xe000ed04

08004bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bb8:	f001 fca8 	bl	800650c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004bbc:	4b5b      	ldr	r3, [pc, #364]	; (8004d2c <pvPortMalloc+0x180>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004bc4:	f000 f920 	bl	8004e08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004bc8:	4b59      	ldr	r3, [pc, #356]	; (8004d30 <pvPortMalloc+0x184>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f040 8093 	bne.w	8004cfc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01d      	beq.n	8004c18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004bdc:	2208      	movs	r2, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4413      	add	r3, r2
 8004be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f003 0307 	and.w	r3, r3, #7
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d014      	beq.n	8004c18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f023 0307 	bic.w	r3, r3, #7
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c06:	f383 8811 	msr	BASEPRI, r3
 8004c0a:	f3bf 8f6f 	isb	sy
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c14:	bf00      	nop
 8004c16:	e7fe      	b.n	8004c16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d06e      	beq.n	8004cfc <pvPortMalloc+0x150>
 8004c1e:	4b45      	ldr	r3, [pc, #276]	; (8004d34 <pvPortMalloc+0x188>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d869      	bhi.n	8004cfc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c28:	4b43      	ldr	r3, [pc, #268]	; (8004d38 <pvPortMalloc+0x18c>)
 8004c2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c2c:	4b42      	ldr	r3, [pc, #264]	; (8004d38 <pvPortMalloc+0x18c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c32:	e004      	b.n	8004c3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d903      	bls.n	8004c50 <pvPortMalloc+0xa4>
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1f1      	bne.n	8004c34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c50:	4b36      	ldr	r3, [pc, #216]	; (8004d2c <pvPortMalloc+0x180>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d050      	beq.n	8004cfc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2208      	movs	r2, #8
 8004c60:	4413      	add	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	2308      	movs	r3, #8
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d91f      	bls.n	8004cbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4413      	add	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <pvPortMalloc+0xf8>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	613b      	str	r3, [r7, #16]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	1ad2      	subs	r2, r2, r3
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cb6:	69b8      	ldr	r0, [r7, #24]
 8004cb8:	f000 f908 	bl	8004ecc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cbc:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <pvPortMalloc+0x188>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <pvPortMalloc+0x188>)
 8004cc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004cca:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <pvPortMalloc+0x188>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b1b      	ldr	r3, [pc, #108]	; (8004d3c <pvPortMalloc+0x190>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d203      	bcs.n	8004cde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <pvPortMalloc+0x188>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a18      	ldr	r2, [pc, #96]	; (8004d3c <pvPortMalloc+0x190>)
 8004cdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <pvPortMalloc+0x184>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004cf2:	4b13      	ldr	r3, [pc, #76]	; (8004d40 <pvPortMalloc+0x194>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <pvPortMalloc+0x194>)
 8004cfa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004cfc:	f001 fc14 	bl	8006528 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <pvPortMalloc+0x174>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60fb      	str	r3, [r7, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	e7fe      	b.n	8004d1e <pvPortMalloc+0x172>
	return pvReturn;
 8004d20:	69fb      	ldr	r3, [r7, #28]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	2400835c 	.word	0x2400835c
 8004d30:	24008370 	.word	0x24008370
 8004d34:	24008360 	.word	0x24008360
 8004d38:	24008354 	.word	0x24008354
 8004d3c:	24008364 	.word	0x24008364
 8004d40:	24008368 	.word	0x24008368

08004d44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04d      	beq.n	8004df2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d56:	2308      	movs	r3, #8
 8004d58:	425b      	negs	r3, r3
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <vPortFree+0xb8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <vPortFree+0x44>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60fb      	str	r3, [r7, #12]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <vPortFree+0x62>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	60bb      	str	r3, [r7, #8]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <vPortFree+0xb8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01e      	beq.n	8004df2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d11a      	bne.n	8004df2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <vPortFree+0xb8>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004dcc:	f001 fb9e 	bl	800650c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	; (8004e00 <vPortFree+0xbc>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4413      	add	r3, r2
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <vPortFree+0xbc>)
 8004ddc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004dde:	6938      	ldr	r0, [r7, #16]
 8004de0:	f000 f874 	bl	8004ecc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004de4:	4b07      	ldr	r3, [pc, #28]	; (8004e04 <vPortFree+0xc0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4a06      	ldr	r2, [pc, #24]	; (8004e04 <vPortFree+0xc0>)
 8004dec:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004dee:	f001 fb9b 	bl	8006528 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004df2:	bf00      	nop
 8004df4:	3718      	adds	r7, #24
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	24008370 	.word	0x24008370
 8004e00:	24008360 	.word	0x24008360
 8004e04:	2400836c 	.word	0x2400836c

08004e08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e0e:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8004e12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e14:	4b27      	ldr	r3, [pc, #156]	; (8004eb4 <prvHeapInit+0xac>)
 8004e16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00c      	beq.n	8004e3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3307      	adds	r3, #7
 8004e26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0307 	bic.w	r3, r3, #7
 8004e2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <prvHeapInit+0xac>)
 8004e38:	4413      	add	r3, r2
 8004e3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e40:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <prvHeapInit+0xb0>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e46:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <prvHeapInit+0xb0>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68ba      	ldr	r2, [r7, #8]
 8004e50:	4413      	add	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e54:	2208      	movs	r2, #8
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f023 0307 	bic.w	r3, r3, #7
 8004e62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a15      	ldr	r2, [pc, #84]	; (8004ebc <prvHeapInit+0xb4>)
 8004e68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <prvHeapInit+0xb4>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e72:	4b12      	ldr	r3, [pc, #72]	; (8004ebc <prvHeapInit+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004e88:	4b0c      	ldr	r3, [pc, #48]	; (8004ebc <prvHeapInit+0xb4>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <prvHeapInit+0xb8>)
 8004e96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	4a09      	ldr	r2, [pc, #36]	; (8004ec4 <prvHeapInit+0xbc>)
 8004e9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ea0:	4b09      	ldr	r3, [pc, #36]	; (8004ec8 <prvHeapInit+0xc0>)
 8004ea2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	3714      	adds	r7, #20
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	24000b54 	.word	0x24000b54
 8004eb8:	24008354 	.word	0x24008354
 8004ebc:	2400835c 	.word	0x2400835c
 8004ec0:	24008364 	.word	0x24008364
 8004ec4:	24008360 	.word	0x24008360
 8004ec8:	24008370 	.word	0x24008370

08004ecc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ed4:	4b28      	ldr	r3, [pc, #160]	; (8004f78 <prvInsertBlockIntoFreeList+0xac>)
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e002      	b.n	8004ee0 <prvInsertBlockIntoFreeList+0x14>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d8f7      	bhi.n	8004eda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d108      	bne.n	8004f0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	441a      	add	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	441a      	add	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d118      	bne.n	8004f54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <prvInsertBlockIntoFreeList+0xb0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d00d      	beq.n	8004f4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	441a      	add	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e008      	b.n	8004f5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <prvInsertBlockIntoFreeList+0xb0>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	e003      	b.n	8004f5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d002      	beq.n	8004f6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f6a:	bf00      	nop
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	24008354 	.word	0x24008354
 8004f7c:	2400835c 	.word	0x2400835c

08004f80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f103 0208 	add.w	r2, r3, #8
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f103 0208 	add.w	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f103 0208 	add.w	r2, r3, #8
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b085      	sub	sp, #20
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005038:	d103      	bne.n	8005042 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e00c      	b.n	800505c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3308      	adds	r3, #8
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	e002      	b.n	8005050 <vListInsert+0x2e>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d2f6      	bcs.n	800504a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	601a      	str	r2, [r3, #0]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6852      	ldr	r2, [r2, #4]
 80050b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d103      	bne.n	80050c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	1e5a      	subs	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3b04      	subs	r3, #4
 80050f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b04      	subs	r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b04      	subs	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005118:	4a0c      	ldr	r2, [pc, #48]	; (800514c <pxPortInitialiseStack+0x64>)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b14      	subs	r3, #20
 8005122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3b04      	subs	r3, #4
 800512e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f06f 0202 	mvn.w	r2, #2
 8005136:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	3b20      	subs	r3, #32
 800513c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800513e:	68fb      	ldr	r3, [r7, #12]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	08005151 	.word	0x08005151

08005150 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800515a:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <prvTaskExitError+0x54>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005162:	d00a      	beq.n	800517a <prvTaskExitError+0x2a>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	60fb      	str	r3, [r7, #12]
}
 8005176:	bf00      	nop
 8005178:	e7fe      	b.n	8005178 <prvTaskExitError+0x28>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	60bb      	str	r3, [r7, #8]
}
 800518c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800518e:	bf00      	nop
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0fc      	beq.n	8005190 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr
 80051a4:	24000010 	.word	0x24000010
	...

080051b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051b0:	4b07      	ldr	r3, [pc, #28]	; (80051d0 <pxCurrentTCBConst2>)
 80051b2:	6819      	ldr	r1, [r3, #0]
 80051b4:	6808      	ldr	r0, [r1, #0]
 80051b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ba:	f380 8809 	msr	PSP, r0
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	4770      	bx	lr
 80051cc:	f3af 8000 	nop.w

080051d0 <pxCurrentTCBConst2>:
 80051d0:	2400837c 	.word	0x2400837c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop

080051d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80051d8:	4808      	ldr	r0, [pc, #32]	; (80051fc <prvPortStartFirstTask+0x24>)
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	6800      	ldr	r0, [r0, #0]
 80051de:	f380 8808 	msr	MSP, r0
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8814 	msr	CONTROL, r0
 80051ea:	b662      	cpsie	i
 80051ec:	b661      	cpsie	f
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	df00      	svc	0
 80051f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051fa:	bf00      	nop
 80051fc:	e000ed08 	.word	0xe000ed08

08005200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005206:	4b46      	ldr	r3, [pc, #280]	; (8005320 <xPortStartScheduler+0x120>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a46      	ldr	r2, [pc, #280]	; (8005324 <xPortStartScheduler+0x124>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d10a      	bne.n	8005226 <xPortStartScheduler+0x26>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	613b      	str	r3, [r7, #16]
}
 8005222:	bf00      	nop
 8005224:	e7fe      	b.n	8005224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005226:	4b3e      	ldr	r3, [pc, #248]	; (8005320 <xPortStartScheduler+0x120>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a3f      	ldr	r2, [pc, #252]	; (8005328 <xPortStartScheduler+0x128>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10a      	bne.n	8005246 <xPortStartScheduler+0x46>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005246:	4b39      	ldr	r3, [pc, #228]	; (800532c <xPortStartScheduler+0x12c>)
 8005248:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	22ff      	movs	r2, #255	; 0xff
 8005256:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005268:	b2da      	uxtb	r2, r3
 800526a:	4b31      	ldr	r3, [pc, #196]	; (8005330 <xPortStartScheduler+0x130>)
 800526c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <xPortStartScheduler+0x134>)
 8005270:	2207      	movs	r2, #7
 8005272:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005274:	e009      	b.n	800528a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005276:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <xPortStartScheduler+0x134>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3b01      	subs	r3, #1
 800527c:	4a2d      	ldr	r2, [pc, #180]	; (8005334 <xPortStartScheduler+0x134>)
 800527e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800528a:	78fb      	ldrb	r3, [r7, #3]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d0ef      	beq.n	8005276 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005296:	4b27      	ldr	r3, [pc, #156]	; (8005334 <xPortStartScheduler+0x134>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f1c3 0307 	rsb	r3, r3, #7
 800529e:	2b04      	cmp	r3, #4
 80052a0:	d00a      	beq.n	80052b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	60bb      	str	r3, [r7, #8]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052b8:	4b1e      	ldr	r3, [pc, #120]	; (8005334 <xPortStartScheduler+0x134>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	4a1d      	ldr	r2, [pc, #116]	; (8005334 <xPortStartScheduler+0x134>)
 80052c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <xPortStartScheduler+0x134>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052ca:	4a1a      	ldr	r2, [pc, #104]	; (8005334 <xPortStartScheduler+0x134>)
 80052cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052d6:	4b18      	ldr	r3, [pc, #96]	; (8005338 <xPortStartScheduler+0x138>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a17      	ldr	r2, [pc, #92]	; (8005338 <xPortStartScheduler+0x138>)
 80052dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80052e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052e2:	4b15      	ldr	r3, [pc, #84]	; (8005338 <xPortStartScheduler+0x138>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a14      	ldr	r2, [pc, #80]	; (8005338 <xPortStartScheduler+0x138>)
 80052e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80052ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052ee:	f000 f8dd 	bl	80054ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <xPortStartScheduler+0x13c>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052f8:	f000 f8fc 	bl	80054f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <xPortStartScheduler+0x140>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <xPortStartScheduler+0x140>)
 8005302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005306:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005308:	f7ff ff66 	bl	80051d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800530c:	f001 fa60 	bl	80067d0 <vTaskSwitchContext>
	prvTaskExitError();
 8005310:	f7ff ff1e 	bl	8005150 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	e000ed00 	.word	0xe000ed00
 8005324:	410fc271 	.word	0x410fc271
 8005328:	410fc270 	.word	0x410fc270
 800532c:	e000e400 	.word	0xe000e400
 8005330:	24008374 	.word	0x24008374
 8005334:	24008378 	.word	0x24008378
 8005338:	e000ed20 	.word	0xe000ed20
 800533c:	24000010 	.word	0x24000010
 8005340:	e000ef34 	.word	0xe000ef34

08005344 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	607b      	str	r3, [r7, #4]
}
 800535c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800535e:	4b0f      	ldr	r3, [pc, #60]	; (800539c <vPortEnterCritical+0x58>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	4a0d      	ldr	r2, [pc, #52]	; (800539c <vPortEnterCritical+0x58>)
 8005366:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005368:	4b0c      	ldr	r3, [pc, #48]	; (800539c <vPortEnterCritical+0x58>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10f      	bne.n	8005390 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005370:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <vPortEnterCritical+0x5c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00a      	beq.n	8005390 <vPortEnterCritical+0x4c>
	__asm volatile
 800537a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537e:	f383 8811 	msr	BASEPRI, r3
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	603b      	str	r3, [r7, #0]
}
 800538c:	bf00      	nop
 800538e:	e7fe      	b.n	800538e <vPortEnterCritical+0x4a>
	}
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	24000010 	.word	0x24000010
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053aa:	4b12      	ldr	r3, [pc, #72]	; (80053f4 <vPortExitCritical+0x50>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <vPortExitCritical+0x24>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b6:	f383 8811 	msr	BASEPRI, r3
 80053ba:	f3bf 8f6f 	isb	sy
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	607b      	str	r3, [r7, #4]
}
 80053c4:	bf00      	nop
 80053c6:	e7fe      	b.n	80053c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053c8:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <vPortExitCritical+0x50>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	4a09      	ldr	r2, [pc, #36]	; (80053f4 <vPortExitCritical+0x50>)
 80053d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053d2:	4b08      	ldr	r3, [pc, #32]	; (80053f4 <vPortExitCritical+0x50>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <vPortExitCritical+0x42>
 80053da:	2300      	movs	r3, #0
 80053dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	24000010 	.word	0x24000010
	...

08005400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005400:	f3ef 8009 	mrs	r0, PSP
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	4b15      	ldr	r3, [pc, #84]	; (8005460 <pxCurrentTCBConst>)
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	f01e 0f10 	tst.w	lr, #16
 8005410:	bf08      	it	eq
 8005412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541a:	6010      	str	r0, [r2, #0]
 800541c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005420:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005424:	f380 8811 	msr	BASEPRI, r0
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	f3bf 8f6f 	isb	sy
 8005430:	f001 f9ce 	bl	80067d0 <vTaskSwitchContext>
 8005434:	f04f 0000 	mov.w	r0, #0
 8005438:	f380 8811 	msr	BASEPRI, r0
 800543c:	bc09      	pop	{r0, r3}
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	6808      	ldr	r0, [r1, #0]
 8005442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005446:	f01e 0f10 	tst.w	lr, #16
 800544a:	bf08      	it	eq
 800544c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005450:	f380 8809 	msr	PSP, r0
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	f3af 8000 	nop.w

08005460 <pxCurrentTCBConst>:
 8005460:	2400837c 	.word	0x2400837c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005482:	f001 f8ed 	bl	8006660 <xTaskIncrementTick>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <SysTick_Handler+0x40>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054b0:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <vPortSetupTimerInterrupt+0x34>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054b6:	4b0b      	ldr	r3, [pc, #44]	; (80054e4 <vPortSetupTimerInterrupt+0x38>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054bc:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <vPortSetupTimerInterrupt+0x3c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <vPortSetupTimerInterrupt+0x40>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	4a09      	ldr	r2, [pc, #36]	; (80054f0 <vPortSetupTimerInterrupt+0x44>)
 80054ca:	3b01      	subs	r3, #1
 80054cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ce:	4b04      	ldr	r3, [pc, #16]	; (80054e0 <vPortSetupTimerInterrupt+0x34>)
 80054d0:	2207      	movs	r2, #7
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	e000e010 	.word	0xe000e010
 80054e4:	e000e018 	.word	0xe000e018
 80054e8:	24000000 	.word	0x24000000
 80054ec:	10624dd3 	.word	0x10624dd3
 80054f0:	e000e014 	.word	0xe000e014

080054f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005504 <vPortEnableVFP+0x10>
 80054f8:	6801      	ldr	r1, [r0, #0]
 80054fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80054fe:	6001      	str	r1, [r0, #0]
 8005500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005502:	bf00      	nop
 8005504:	e000ed88 	.word	0xe000ed88

08005508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800550e:	f3ef 8305 	mrs	r3, IPSR
 8005512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b0f      	cmp	r3, #15
 8005518:	d914      	bls.n	8005544 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800551a:	4a17      	ldr	r2, [pc, #92]	; (8005578 <vPortValidateInterruptPriority+0x70>)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005524:	4b15      	ldr	r3, [pc, #84]	; (800557c <vPortValidateInterruptPriority+0x74>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	7afa      	ldrb	r2, [r7, #11]
 800552a:	429a      	cmp	r2, r3
 800552c:	d20a      	bcs.n	8005544 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
}
 8005540:	bf00      	nop
 8005542:	e7fe      	b.n	8005542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <vPortValidateInterruptPriority+0x78>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800554c:	4b0d      	ldr	r3, [pc, #52]	; (8005584 <vPortValidateInterruptPriority+0x7c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d90a      	bls.n	800556a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	603b      	str	r3, [r7, #0]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <vPortValidateInterruptPriority+0x60>
	}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	e000e3f0 	.word	0xe000e3f0
 800557c:	24008374 	.word	0x24008374
 8005580:	e000ed0c 	.word	0xe000ed0c
 8005584:	24008378 	.word	0x24008378

08005588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xQueueGenericReset+0x2a>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60bb      	str	r3, [r7, #8]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055b2:	f7ff fec7 	bl	8005344 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055be:	68f9      	ldr	r1, [r7, #12]
 80055c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	441a      	add	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e2:	3b01      	subs	r3, #1
 80055e4:	68f9      	ldr	r1, [r7, #12]
 80055e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	441a      	add	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	22ff      	movs	r2, #255	; 0xff
 80055f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	22ff      	movs	r2, #255	; 0xff
 80055fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d114      	bne.n	8005632 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3310      	adds	r3, #16
 8005614:	4618      	mov	r0, r3
 8005616:	f001 f971 	bl	80068fc <xTaskRemoveFromEventList>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d012      	beq.n	8005646 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005620:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <xQueueGenericReset+0xcc>)
 8005622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	e009      	b.n	8005646 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3310      	adds	r3, #16
 8005636:	4618      	mov	r0, r3
 8005638:	f7ff fca2 	bl	8004f80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3324      	adds	r3, #36	; 0x24
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fc9d 	bl	8004f80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005646:	f7ff fead 	bl	80053a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800564a:	2301      	movs	r3, #1
}
 800564c:	4618      	mov	r0, r3
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08e      	sub	sp, #56	; 0x38
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
 8005664:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d10a      	bne.n	8005682 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800567e:	bf00      	nop
 8005680:	e7fe      	b.n	8005680 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10a      	bne.n	800569e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
}
 800569a:	bf00      	nop
 800569c:	e7fe      	b.n	800569c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <xQueueGenericCreateStatic+0x52>
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <xQueueGenericCreateStatic+0x56>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <xQueueGenericCreateStatic+0x58>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	623b      	str	r3, [r7, #32]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d102      	bne.n	80056d6 <xQueueGenericCreateStatic+0x7e>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <xQueueGenericCreateStatic+0x82>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <xQueueGenericCreateStatic+0x84>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	61fb      	str	r3, [r7, #28]
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056f6:	2348      	movs	r3, #72	; 0x48
 80056f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2b48      	cmp	r3, #72	; 0x48
 80056fe:	d00a      	beq.n	8005716 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	61bb      	str	r3, [r7, #24]
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005716:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00d      	beq.n	800573e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800572a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f83f 	bl	80057bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005740:	4618      	mov	r0, r3
 8005742:	3730      	adds	r7, #48	; 0x30
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xQueueGenericCreate+0x2a>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	613b      	str	r3, [r7, #16]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	fb02 f303 	mul.w	r3, r2, r3
 800577a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	3348      	adds	r3, #72	; 0x48
 8005780:	4618      	mov	r0, r3
 8005782:	f7ff fa13 	bl	8004bac <pvPortMalloc>
 8005786:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d011      	beq.n	80057b2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	3348      	adds	r3, #72	; 0x48
 8005796:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057a0:	79fa      	ldrb	r2, [r7, #7]
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	4613      	mov	r3, r2
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f805 	bl	80057bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057b2:	69bb      	ldr	r3, [r7, #24]
	}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	e002      	b.n	80057de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80057e4:	69bb      	ldr	r3, [r7, #24]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057ea:	2101      	movs	r1, #1
 80057ec:	69b8      	ldr	r0, [r7, #24]
 80057ee:	f7ff fecb 	bl	8005588 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80057f2:	bf00      	nop
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08e      	sub	sp, #56	; 0x38
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800580a:	2300      	movs	r3, #0
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <xQueueGenericSend+0x32>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <xQueueGenericSend+0x40>
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <xQueueGenericSend+0x44>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <xQueueGenericSend+0x46>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <xQueueGenericSend+0x60>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d103      	bne.n	800586a <xQueueGenericSend+0x6e>
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <xQueueGenericSend+0x72>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <xQueueGenericSend+0x74>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xQueueGenericSend+0x8e>
	__asm volatile
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	623b      	str	r3, [r7, #32]
}
 8005886:	bf00      	nop
 8005888:	e7fe      	b.n	8005888 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800588a:	f001 f9f7 	bl	8006c7c <xTaskGetSchedulerState>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <xQueueGenericSend+0x9e>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <xQueueGenericSend+0xa2>
 800589a:	2301      	movs	r3, #1
 800589c:	e000      	b.n	80058a0 <xQueueGenericSend+0xa4>
 800589e:	2300      	movs	r3, #0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10a      	bne.n	80058ba <xQueueGenericSend+0xbe>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	61fb      	str	r3, [r7, #28]
}
 80058b6:	bf00      	nop
 80058b8:	e7fe      	b.n	80058b8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058ba:	f7ff fd43 	bl	8005344 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d302      	bcc.n	80058d0 <xQueueGenericSend+0xd4>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d129      	bne.n	8005924 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	68b9      	ldr	r1, [r7, #8]
 80058d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058d6:	f000 fac1 	bl	8005e5c <prvCopyDataToQueue>
 80058da:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d010      	beq.n	8005906 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	3324      	adds	r3, #36	; 0x24
 80058e8:	4618      	mov	r0, r3
 80058ea:	f001 f807 	bl	80068fc <xTaskRemoveFromEventList>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d013      	beq.n	800591c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80058f4:	4b3f      	ldr	r3, [pc, #252]	; (80059f4 <xQueueGenericSend+0x1f8>)
 80058f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fa:	601a      	str	r2, [r3, #0]
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	e00a      	b.n	800591c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d007      	beq.n	800591c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800590c:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <xQueueGenericSend+0x1f8>)
 800590e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800591c:	f7ff fd42 	bl	80053a4 <vPortExitCritical>
				return pdPASS;
 8005920:	2301      	movs	r3, #1
 8005922:	e063      	b.n	80059ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800592a:	f7ff fd3b 	bl	80053a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800592e:	2300      	movs	r3, #0
 8005930:	e05c      	b.n	80059ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005938:	f107 0314 	add.w	r3, r7, #20
 800593c:	4618      	mov	r0, r3
 800593e:	f001 f83f 	bl	80069c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005942:	2301      	movs	r3, #1
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005946:	f7ff fd2d 	bl	80053a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800594a:	f000 fddf 	bl	800650c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800594e:	f7ff fcf9 	bl	8005344 <vPortEnterCritical>
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005958:	b25b      	sxtb	r3, r3
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800595e:	d103      	bne.n	8005968 <xQueueGenericSend+0x16c>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	2200      	movs	r2, #0
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800596e:	b25b      	sxtb	r3, r3
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005974:	d103      	bne.n	800597e <xQueueGenericSend+0x182>
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800597e:	f7ff fd11 	bl	80053a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005982:	1d3a      	adds	r2, r7, #4
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f001 f82e 	bl	80069ec <xTaskCheckForTimeOut>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d124      	bne.n	80059e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005996:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005998:	f000 fb58 	bl	800604c <prvIsQueueFull>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d018      	beq.n	80059d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a4:	3310      	adds	r3, #16
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 ff82 	bl	80068b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80059b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059b2:	f000 fae3 	bl	8005f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80059b6:	f000 fdb7 	bl	8006528 <xTaskResumeAll>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f af7c 	bne.w	80058ba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80059c2:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <xQueueGenericSend+0x1f8>)
 80059c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	e772      	b.n	80058ba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80059d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059d6:	f000 fad1 	bl	8005f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059da:	f000 fda5 	bl	8006528 <xTaskResumeAll>
 80059de:	e76c      	b.n	80058ba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80059e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059e2:	f000 facb 	bl	8005f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059e6:	f000 fd9f 	bl	8006528 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80059ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3738      	adds	r7, #56	; 0x38
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	e000ed04 	.word	0xe000ed04

080059f8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b08e      	sub	sp, #56	; 0x38
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	623b      	str	r3, [r7, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	61fb      	str	r3, [r7, #28]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d103      	bne.n	8005a50 <xQueueGiveFromISR+0x58>
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <xQueueGiveFromISR+0x5c>
 8005a50:	2301      	movs	r3, #1
 8005a52:	e000      	b.n	8005a56 <xQueueGiveFromISR+0x5e>
 8005a54:	2300      	movs	r3, #0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10a      	bne.n	8005a70 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	61bb      	str	r3, [r7, #24]
}
 8005a6c:	bf00      	nop
 8005a6e:	e7fe      	b.n	8005a6e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a70:	f7ff fd4a 	bl	8005508 <vPortValidateInterruptPriority>
	__asm volatile
 8005a74:	f3ef 8211 	mrs	r2, BASEPRI
 8005a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7c:	f383 8811 	msr	BASEPRI, r3
 8005a80:	f3bf 8f6f 	isb	sy
 8005a84:	f3bf 8f4f 	dsb	sy
 8005a88:	617a      	str	r2, [r7, #20]
 8005a8a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005a8c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a94:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d22b      	bcs.n	8005af8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ab2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005aba:	d112      	bne.n	8005ae2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d016      	beq.n	8005af2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac6:	3324      	adds	r3, #36	; 0x24
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 ff17 	bl	80068fc <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00b      	beq.n	8005af2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	e007      	b.n	8005af2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	b25a      	sxtb	r2, r3
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005af2:	2301      	movs	r3, #1
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
 8005af6:	e001      	b.n	8005afc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005af8:	2300      	movs	r3, #0
 8005afa:	637b      	str	r3, [r7, #52]	; 0x34
 8005afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f383 8811 	msr	BASEPRI, r3
}
 8005b06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3738      	adds	r7, #56	; 0x38
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	623b      	str	r3, [r7, #32]
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	61fb      	str	r3, [r7, #28]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b64:	f001 f88a 	bl	8006c7c <xTaskGetSchedulerState>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d102      	bne.n	8005b74 <xQueueSemaphoreTake+0x60>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <xQueueSemaphoreTake+0x64>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <xQueueSemaphoreTake+0x66>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	61bb      	str	r3, [r7, #24]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b94:	f7ff fbd6 	bl	8005344 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d024      	beq.n	8005bee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	1e5a      	subs	r2, r3, #1
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d104      	bne.n	8005bbe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005bb4:	f001 fa0a 	bl	8006fcc <pvTaskIncrementMutexHeldCount>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00f      	beq.n	8005be6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	3310      	adds	r3, #16
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fe96 	bl	80068fc <xTaskRemoveFromEventList>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bd6:	4b54      	ldr	r3, [pc, #336]	; (8005d28 <xQueueSemaphoreTake+0x214>)
 8005bd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005be6:	f7ff fbdd 	bl	80053a4 <vPortExitCritical>
				return pdPASS;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e097      	b.n	8005d1e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d111      	bne.n	8005c18 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	617b      	str	r3, [r7, #20]
}
 8005c0c:	bf00      	nop
 8005c0e:	e7fe      	b.n	8005c0e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005c10:	f7ff fbc8 	bl	80053a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c14:	2300      	movs	r3, #0
 8005c16:	e082      	b.n	8005d1e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c1e:	f107 030c 	add.w	r3, r7, #12
 8005c22:	4618      	mov	r0, r3
 8005c24:	f000 fecc 	bl	80069c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c2c:	f7ff fbba 	bl	80053a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c30:	f000 fc6c 	bl	800650c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c34:	f7ff fb86 	bl	8005344 <vPortEnterCritical>
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c3e:	b25b      	sxtb	r3, r3
 8005c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c44:	d103      	bne.n	8005c4e <xQueueSemaphoreTake+0x13a>
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c54:	b25b      	sxtb	r3, r3
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c5a:	d103      	bne.n	8005c64 <xQueueSemaphoreTake+0x150>
 8005c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c64:	f7ff fb9e 	bl	80053a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c68:	463a      	mov	r2, r7
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 febb 	bl	80069ec <xTaskCheckForTimeOut>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d132      	bne.n	8005ce2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c7e:	f000 f9cf 	bl	8006020 <prvIsQueueEmpty>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d026      	beq.n	8005cd6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005c90:	f7ff fb58 	bl	8005344 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f001 f80d 	bl	8006cb8 <xTaskPriorityInherit>
 8005c9e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ca0:	f7ff fb80 	bl	80053a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	3324      	adds	r3, #36	; 0x24
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	4611      	mov	r1, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fe01 	bl	80068b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cb4:	f000 f962 	bl	8005f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005cb8:	f000 fc36 	bl	8006528 <xTaskResumeAll>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f47f af68 	bne.w	8005b94 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005cc4:	4b18      	ldr	r3, [pc, #96]	; (8005d28 <xQueueSemaphoreTake+0x214>)
 8005cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	e75e      	b.n	8005b94 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cd8:	f000 f950 	bl	8005f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cdc:	f000 fc24 	bl	8006528 <xTaskResumeAll>
 8005ce0:	e758      	b.n	8005b94 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005ce2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ce4:	f000 f94a 	bl	8005f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ce8:	f000 fc1e 	bl	8006528 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005cee:	f000 f997 	bl	8006020 <prvIsQueueEmpty>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f43f af4d 	beq.w	8005b94 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00d      	beq.n	8005d1c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005d00:	f7ff fb20 	bl	8005344 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005d04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d06:	f000 f891 	bl	8005e2c <prvGetDisinheritPriorityAfterTimeout>
 8005d0a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d12:	4618      	mov	r0, r3
 8005d14:	f001 f8cc 	bl	8006eb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005d18:	f7ff fb44 	bl	80053a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3738      	adds	r7, #56	; 0x38
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08e      	sub	sp, #56	; 0x38
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	623b      	str	r3, [r7, #32]
}
 8005d54:	bf00      	nop
 8005d56:	e7fe      	b.n	8005d56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <xQueueReceiveFromISR+0x3a>
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <xQueueReceiveFromISR+0x3e>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <xQueueReceiveFromISR+0x40>
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	61fb      	str	r3, [r7, #28]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d86:	f7ff fbbf 	bl	8005508 <vPortValidateInterruptPriority>
	__asm volatile
 8005d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61ba      	str	r2, [r7, #24]
 8005da0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005da2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d02f      	beq.n	8005e12 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dbc:	68b9      	ldr	r1, [r7, #8]
 8005dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dc0:	f000 f8b6 	bl	8005f30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	1e5a      	subs	r2, r3, #1
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005dd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dd4:	d112      	bne.n	8005dfc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d016      	beq.n	8005e0c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	3310      	adds	r3, #16
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fd8a 	bl	80068fc <xTaskRemoveFromEventList>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00b      	beq.n	8005e0c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e007      	b.n	8005e0c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e00:	3301      	adds	r3, #1
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	b25a      	sxtb	r2, r3
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e10:	e001      	b.n	8005e16 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005e12:	2300      	movs	r3, #0
 8005e14:	637b      	str	r3, [r7, #52]	; 0x34
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f383 8811 	msr	BASEPRI, r3
}
 8005e20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3738      	adds	r7, #56	; 0x38
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d006      	beq.n	8005e4a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1c3 0307 	rsb	r3, r3, #7
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e001      	b.n	8005e4e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10d      	bne.n	8005e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d14d      	bne.n	8005f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 ff8c 	bl	8006da4 <xTaskPriorityDisinherit>
 8005e8c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
 8005e94:	e043      	b.n	8005f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d119      	bne.n	8005ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6858      	ldr	r0, [r3, #4]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	f004 f93c 	bl	800a124 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb4:	441a      	add	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d32b      	bcc.n	8005f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]
 8005ece:	e026      	b.n	8005f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68d8      	ldr	r0, [r3, #12]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	461a      	mov	r2, r3
 8005eda:	68b9      	ldr	r1, [r7, #8]
 8005edc:	f004 f922 	bl	800a124 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	425b      	negs	r3, r3
 8005eea:	441a      	add	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d207      	bcs.n	8005f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f04:	425b      	negs	r3, r3
 8005f06:	441a      	add	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d105      	bne.n	8005f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d002      	beq.n	8005f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005f26:	697b      	ldr	r3, [r7, #20]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	441a      	add	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d303      	bcc.n	8005f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	68d9      	ldr	r1, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6838      	ldr	r0, [r7, #0]
 8005f70:	f004 f8d8 	bl	800a124 <memcpy>
	}
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f84:	f7ff f9de 	bl	8005344 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f90:	e011      	b.n	8005fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d012      	beq.n	8005fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3324      	adds	r3, #36	; 0x24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fcac 	bl	80068fc <xTaskRemoveFromEventList>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005faa:	f000 fd81 	bl	8006ab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dce9      	bgt.n	8005f92 <prvUnlockQueue+0x16>
 8005fbe:	e000      	b.n	8005fc2 <prvUnlockQueue+0x46>
					break;
 8005fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	22ff      	movs	r2, #255	; 0xff
 8005fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005fca:	f7ff f9eb 	bl	80053a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fce:	f7ff f9b9 	bl	8005344 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fda:	e011      	b.n	8006000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3310      	adds	r3, #16
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f000 fc87 	bl	80068fc <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff4:	f000 fd5c 	bl	8006ab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006004:	2b00      	cmp	r3, #0
 8006006:	dce9      	bgt.n	8005fdc <prvUnlockQueue+0x60>
 8006008:	e000      	b.n	800600c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800600a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	22ff      	movs	r2, #255	; 0xff
 8006010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006014:	f7ff f9c6 	bl	80053a4 <vPortExitCritical>
}
 8006018:	bf00      	nop
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006028:	f7ff f98c 	bl	8005344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	2b00      	cmp	r3, #0
 8006032:	d102      	bne.n	800603a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006034:	2301      	movs	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	e001      	b.n	800603e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800603e:	f7ff f9b1 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 8006042:	68fb      	ldr	r3, [r7, #12]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006054:	f7ff f976 	bl	8005344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	429a      	cmp	r2, r3
 8006062:	d102      	bne.n	800606a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006064:	2301      	movs	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e001      	b.n	800606e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800606e:	f7ff f999 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 8006072:	68fb      	ldr	r3, [r7, #12]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08e      	sub	sp, #56	; 0x38
 8006080:	af04      	add	r7, sp, #16
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800608a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	623b      	str	r3, [r7, #32]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	61fb      	str	r3, [r7, #28]
}
 80060be:	bf00      	nop
 80060c0:	e7fe      	b.n	80060c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060c2:	23b4      	movs	r3, #180	; 0xb4
 80060c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2bb4      	cmp	r3, #180	; 0xb4
 80060ca:	d00a      	beq.n	80060e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	61bb      	str	r3, [r7, #24]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01e      	beq.n	8006128 <xTaskCreateStatic+0xac>
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01b      	beq.n	8006128 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	2202      	movs	r2, #2
 80060fe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006102:	2300      	movs	r3, #0
 8006104:	9303      	str	r3, [sp, #12]
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	9302      	str	r3, [sp, #8]
 800610a:	f107 0314 	add.w	r3, r7, #20
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	68b9      	ldr	r1, [r7, #8]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 f850 	bl	80061c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006120:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006122:	f000 f8eb 	bl	80062fc <prvAddNewTaskToReadyList>
 8006126:	e001      	b.n	800612c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006128:	2300      	movs	r3, #0
 800612a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800612c:	697b      	ldr	r3, [r7, #20]
	}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08c      	sub	sp, #48	; 0x30
 800613a:	af04      	add	r7, sp, #16
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	603b      	str	r3, [r7, #0]
 8006142:	4613      	mov	r3, r2
 8006144:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4618      	mov	r0, r3
 800614c:	f7fe fd2e 	bl	8004bac <pvPortMalloc>
 8006150:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00e      	beq.n	8006176 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006158:	20b4      	movs	r0, #180	; 0xb4
 800615a:	f7fe fd27 	bl	8004bac <pvPortMalloc>
 800615e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	631a      	str	r2, [r3, #48]	; 0x30
 800616c:	e005      	b.n	800617a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800616e:	6978      	ldr	r0, [r7, #20]
 8006170:	f7fe fde8 	bl	8004d44 <vPortFree>
 8006174:	e001      	b.n	800617a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d017      	beq.n	80061b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006188:	88fa      	ldrh	r2, [r7, #6]
 800618a:	2300      	movs	r3, #0
 800618c:	9303      	str	r3, [sp, #12]
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	9302      	str	r3, [sp, #8]
 8006192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006194:	9301      	str	r3, [sp, #4]
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	68b9      	ldr	r1, [r7, #8]
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f80e 	bl	80061c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061a4:	69f8      	ldr	r0, [r7, #28]
 80061a6:	f000 f8a9 	bl	80062fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061aa:	2301      	movs	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	e002      	b.n	80061b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061b6:	69bb      	ldr	r3, [r7, #24]
	}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80061d8:	440b      	add	r3, r1
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	f023 0307 	bic.w	r3, r3, #7
 80061e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <prvInitialiseNewTask+0x48>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	617b      	str	r3, [r7, #20]
}
 8006204:	bf00      	nop
 8006206:	e7fe      	b.n	8006206 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d01f      	beq.n	800624e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e012      	b.n	800623a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006214:	68ba      	ldr	r2, [r7, #8]
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	7819      	ldrb	r1, [r3, #0]
 800621c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	4413      	add	r3, r2
 8006222:	3334      	adds	r3, #52	; 0x34
 8006224:	460a      	mov	r2, r1
 8006226:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	4413      	add	r3, r2
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d006      	beq.n	8006242 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	3301      	adds	r3, #1
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2b0f      	cmp	r3, #15
 800623e:	d9e9      	bls.n	8006214 <prvInitialiseNewTask+0x54>
 8006240:	e000      	b.n	8006244 <prvInitialiseNewTask+0x84>
			{
				break;
 8006242:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	2200      	movs	r2, #0
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800624c:	e003      	b.n	8006256 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	2200      	movs	r2, #0
 8006252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	2b06      	cmp	r3, #6
 800625a:	d901      	bls.n	8006260 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800625c:	2306      	movs	r3, #6
 800625e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006264:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800626a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	2200      	movs	r2, #0
 8006270:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	3304      	adds	r3, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fea2 	bl	8004fc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800627c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627e:	3318      	adds	r3, #24
 8006280:	4618      	mov	r0, r3
 8006282:	f7fe fe9d 	bl	8004fc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	f1c3 0207 	rsb	r2, r3, #7
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800629a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ae:	334c      	adds	r3, #76	; 0x4c
 80062b0:	2260      	movs	r2, #96	; 0x60
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f003 ff43 	bl	800a140 <memset>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062bc:	4a0c      	ldr	r2, [pc, #48]	; (80062f0 <prvInitialiseNewTask+0x130>)
 80062be:	651a      	str	r2, [r3, #80]	; 0x50
 80062c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c2:	4a0c      	ldr	r2, [pc, #48]	; (80062f4 <prvInitialiseNewTask+0x134>)
 80062c4:	655a      	str	r2, [r3, #84]	; 0x54
 80062c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c8:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <prvInitialiseNewTask+0x138>)
 80062ca:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	68f9      	ldr	r1, [r7, #12]
 80062d0:	69b8      	ldr	r0, [r7, #24]
 80062d2:	f7fe ff09 	bl	80050e8 <pxPortInitialiseStack>
 80062d6:	4602      	mov	r2, r0
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062e8:	bf00      	nop
 80062ea:	3720      	adds	r7, #32
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	0800b358 	.word	0x0800b358
 80062f4:	0800b378 	.word	0x0800b378
 80062f8:	0800b338 	.word	0x0800b338

080062fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006304:	f7ff f81e 	bl	8005344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006308:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <prvAddNewTaskToReadyList+0xb8>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3301      	adds	r3, #1
 800630e:	4a29      	ldr	r2, [pc, #164]	; (80063b4 <prvAddNewTaskToReadyList+0xb8>)
 8006310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006312:	4b29      	ldr	r3, [pc, #164]	; (80063b8 <prvAddNewTaskToReadyList+0xbc>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d109      	bne.n	800632e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800631a:	4a27      	ldr	r2, [pc, #156]	; (80063b8 <prvAddNewTaskToReadyList+0xbc>)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006320:	4b24      	ldr	r3, [pc, #144]	; (80063b4 <prvAddNewTaskToReadyList+0xb8>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d110      	bne.n	800634a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006328:	f000 fbe6 	bl	8006af8 <prvInitialiseTaskLists>
 800632c:	e00d      	b.n	800634a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800632e:	4b23      	ldr	r3, [pc, #140]	; (80063bc <prvAddNewTaskToReadyList+0xc0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <prvAddNewTaskToReadyList+0xbc>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d802      	bhi.n	800634a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006344:	4a1c      	ldr	r2, [pc, #112]	; (80063b8 <prvAddNewTaskToReadyList+0xbc>)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800634a:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	3301      	adds	r3, #1
 8006350:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <prvAddNewTaskToReadyList+0xc4>)
 8006352:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	2201      	movs	r2, #1
 800635a:	409a      	lsls	r2, r3
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4313      	orrs	r3, r2
 8006362:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <prvAddNewTaskToReadyList+0xc8>)
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <prvAddNewTaskToReadyList+0xcc>)
 8006374:	441a      	add	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3304      	adds	r3, #4
 800637a:	4619      	mov	r1, r3
 800637c:	4610      	mov	r0, r2
 800637e:	f7fe fe2c 	bl	8004fda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006382:	f7ff f80f 	bl	80053a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <prvAddNewTaskToReadyList+0xc0>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00e      	beq.n	80063ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800638e:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <prvAddNewTaskToReadyList+0xbc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	429a      	cmp	r2, r3
 800639a:	d207      	bcs.n	80063ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <prvAddNewTaskToReadyList+0xd0>)
 800639e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ac:	bf00      	nop
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2400847c 	.word	0x2400847c
 80063b8:	2400837c 	.word	0x2400837c
 80063bc:	24008488 	.word	0x24008488
 80063c0:	24008498 	.word	0x24008498
 80063c4:	24008484 	.word	0x24008484
 80063c8:	24008380 	.word	0x24008380
 80063cc:	e000ed04 	.word	0xe000ed04

080063d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d017      	beq.n	8006412 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80063e2:	4b13      	ldr	r3, [pc, #76]	; (8006430 <vTaskDelay+0x60>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00a      	beq.n	8006400 <vTaskDelay+0x30>
	__asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60bb      	str	r3, [r7, #8]
}
 80063fc:	bf00      	nop
 80063fe:	e7fe      	b.n	80063fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006400:	f000 f884 	bl	800650c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006404:	2100      	movs	r1, #0
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fdf4 	bl	8006ff4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800640c:	f000 f88c 	bl	8006528 <xTaskResumeAll>
 8006410:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d107      	bne.n	8006428 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006418:	4b06      	ldr	r3, [pc, #24]	; (8006434 <vTaskDelay+0x64>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006428:	bf00      	nop
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	240084a4 	.word	0x240084a4
 8006434:	e000ed04 	.word	0xe000ed04

08006438 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800643e:	2300      	movs	r3, #0
 8006440:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006446:	463a      	mov	r2, r7
 8006448:	1d39      	adds	r1, r7, #4
 800644a:	f107 0308 	add.w	r3, r7, #8
 800644e:	4618      	mov	r0, r3
 8006450:	f7fa f98c 	bl	800076c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006454:	6839      	ldr	r1, [r7, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68ba      	ldr	r2, [r7, #8]
 800645a:	9202      	str	r2, [sp, #8]
 800645c:	9301      	str	r3, [sp, #4]
 800645e:	2300      	movs	r3, #0
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	2300      	movs	r3, #0
 8006464:	460a      	mov	r2, r1
 8006466:	4921      	ldr	r1, [pc, #132]	; (80064ec <vTaskStartScheduler+0xb4>)
 8006468:	4821      	ldr	r0, [pc, #132]	; (80064f0 <vTaskStartScheduler+0xb8>)
 800646a:	f7ff fe07 	bl	800607c <xTaskCreateStatic>
 800646e:	4603      	mov	r3, r0
 8006470:	4a20      	ldr	r2, [pc, #128]	; (80064f4 <vTaskStartScheduler+0xbc>)
 8006472:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006474:	4b1f      	ldr	r3, [pc, #124]	; (80064f4 <vTaskStartScheduler+0xbc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d002      	beq.n	8006482 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800647c:	2301      	movs	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	e001      	b.n	8006486 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d11b      	bne.n	80064c4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	613b      	str	r3, [r7, #16]
}
 800649e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064a0:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <vTaskStartScheduler+0xc0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	334c      	adds	r3, #76	; 0x4c
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <vTaskStartScheduler+0xc4>)
 80064a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064aa:	4b15      	ldr	r3, [pc, #84]	; (8006500 <vTaskStartScheduler+0xc8>)
 80064ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80064b2:	4b14      	ldr	r3, [pc, #80]	; (8006504 <vTaskStartScheduler+0xcc>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80064b8:	4b13      	ldr	r3, [pc, #76]	; (8006508 <vTaskStartScheduler+0xd0>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80064be:	f7fe fe9f 	bl	8005200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80064c2:	e00e      	b.n	80064e2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064ca:	d10a      	bne.n	80064e2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	60fb      	str	r3, [r7, #12]
}
 80064de:	bf00      	nop
 80064e0:	e7fe      	b.n	80064e0 <vTaskStartScheduler+0xa8>
}
 80064e2:	bf00      	nop
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	0800b084 	.word	0x0800b084
 80064f0:	08006ac9 	.word	0x08006ac9
 80064f4:	240084a0 	.word	0x240084a0
 80064f8:	2400837c 	.word	0x2400837c
 80064fc:	240000bc 	.word	0x240000bc
 8006500:	2400849c 	.word	0x2400849c
 8006504:	24008488 	.word	0x24008488
 8006508:	24008480 	.word	0x24008480

0800650c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006510:	4b04      	ldr	r3, [pc, #16]	; (8006524 <vTaskSuspendAll+0x18>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	4a03      	ldr	r2, [pc, #12]	; (8006524 <vTaskSuspendAll+0x18>)
 8006518:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800651a:	bf00      	nop
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	240084a4 	.word	0x240084a4

08006528 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006532:	2300      	movs	r3, #0
 8006534:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006536:	4b41      	ldr	r3, [pc, #260]	; (800663c <xTaskResumeAll+0x114>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <xTaskResumeAll+0x2c>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	603b      	str	r3, [r7, #0]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006554:	f7fe fef6 	bl	8005344 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006558:	4b38      	ldr	r3, [pc, #224]	; (800663c <xTaskResumeAll+0x114>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a37      	ldr	r2, [pc, #220]	; (800663c <xTaskResumeAll+0x114>)
 8006560:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006562:	4b36      	ldr	r3, [pc, #216]	; (800663c <xTaskResumeAll+0x114>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d161      	bne.n	800662e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800656a:	4b35      	ldr	r3, [pc, #212]	; (8006640 <xTaskResumeAll+0x118>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d05d      	beq.n	800662e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006572:	e02e      	b.n	80065d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006574:	4b33      	ldr	r3, [pc, #204]	; (8006644 <xTaskResumeAll+0x11c>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	3318      	adds	r3, #24
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fd87 	bl	8005094 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3304      	adds	r3, #4
 800658a:	4618      	mov	r0, r3
 800658c:	f7fe fd82 	bl	8005094 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006594:	2201      	movs	r2, #1
 8006596:	409a      	lsls	r2, r3
 8006598:	4b2b      	ldr	r3, [pc, #172]	; (8006648 <xTaskResumeAll+0x120>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4313      	orrs	r3, r2
 800659e:	4a2a      	ldr	r2, [pc, #168]	; (8006648 <xTaskResumeAll+0x120>)
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4a27      	ldr	r2, [pc, #156]	; (800664c <xTaskResumeAll+0x124>)
 80065b0:	441a      	add	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3304      	adds	r3, #4
 80065b6:	4619      	mov	r1, r3
 80065b8:	4610      	mov	r0, r2
 80065ba:	f7fe fd0e 	bl	8004fda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c2:	4b23      	ldr	r3, [pc, #140]	; (8006650 <xTaskResumeAll+0x128>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d302      	bcc.n	80065d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <xTaskResumeAll+0x12c>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <xTaskResumeAll+0x11c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1cc      	bne.n	8006574 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80065e0:	f000 fb2c 	bl	8006c3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065e4:	4b1c      	ldr	r3, [pc, #112]	; (8006658 <xTaskResumeAll+0x130>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d010      	beq.n	8006612 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80065f0:	f000 f836 	bl	8006660 <xTaskIncrementTick>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d002      	beq.n	8006600 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80065fa:	4b16      	ldr	r3, [pc, #88]	; (8006654 <xTaskResumeAll+0x12c>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3b01      	subs	r3, #1
 8006604:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1f1      	bne.n	80065f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800660c:	4b12      	ldr	r3, [pc, #72]	; (8006658 <xTaskResumeAll+0x130>)
 800660e:	2200      	movs	r2, #0
 8006610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006612:	4b10      	ldr	r3, [pc, #64]	; (8006654 <xTaskResumeAll+0x12c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800661a:	2301      	movs	r3, #1
 800661c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800661e:	4b0f      	ldr	r3, [pc, #60]	; (800665c <xTaskResumeAll+0x134>)
 8006620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800662e:	f7fe feb9 	bl	80053a4 <vPortExitCritical>

	return xAlreadyYielded;
 8006632:	68bb      	ldr	r3, [r7, #8]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	240084a4 	.word	0x240084a4
 8006640:	2400847c 	.word	0x2400847c
 8006644:	2400843c 	.word	0x2400843c
 8006648:	24008484 	.word	0x24008484
 800664c:	24008380 	.word	0x24008380
 8006650:	2400837c 	.word	0x2400837c
 8006654:	24008490 	.word	0x24008490
 8006658:	2400848c 	.word	0x2400848c
 800665c:	e000ed04 	.word	0xe000ed04

08006660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666a:	4b4e      	ldr	r3, [pc, #312]	; (80067a4 <xTaskIncrementTick+0x144>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 808e 	bne.w	8006790 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006674:	4b4c      	ldr	r3, [pc, #304]	; (80067a8 <xTaskIncrementTick+0x148>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800667c:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <xTaskIncrementTick+0x148>)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d120      	bne.n	80066ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006688:	4b48      	ldr	r3, [pc, #288]	; (80067ac <xTaskIncrementTick+0x14c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	603b      	str	r3, [r7, #0]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <xTaskIncrementTick+0x46>
 80066a8:	4b40      	ldr	r3, [pc, #256]	; (80067ac <xTaskIncrementTick+0x14c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	4b40      	ldr	r3, [pc, #256]	; (80067b0 <xTaskIncrementTick+0x150>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a3e      	ldr	r2, [pc, #248]	; (80067ac <xTaskIncrementTick+0x14c>)
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4a3e      	ldr	r2, [pc, #248]	; (80067b0 <xTaskIncrementTick+0x150>)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	4b3d      	ldr	r3, [pc, #244]	; (80067b4 <xTaskIncrementTick+0x154>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3301      	adds	r3, #1
 80066c2:	4a3c      	ldr	r2, [pc, #240]	; (80067b4 <xTaskIncrementTick+0x154>)
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	f000 fab9 	bl	8006c3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80066ca:	4b3b      	ldr	r3, [pc, #236]	; (80067b8 <xTaskIncrementTick+0x158>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d348      	bcc.n	8006766 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d4:	4b35      	ldr	r3, [pc, #212]	; (80067ac <xTaskIncrementTick+0x14c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066de:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <xTaskIncrementTick+0x158>)
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066e4:	601a      	str	r2, [r3, #0]
					break;
 80066e6:	e03e      	b.n	8006766 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e8:	4b30      	ldr	r3, [pc, #192]	; (80067ac <xTaskIncrementTick+0x14c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d203      	bcs.n	8006708 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006700:	4a2d      	ldr	r2, [pc, #180]	; (80067b8 <xTaskIncrementTick+0x158>)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006706:	e02e      	b.n	8006766 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	3304      	adds	r3, #4
 800670c:	4618      	mov	r0, r3
 800670e:	f7fe fcc1 	bl	8005094 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	3318      	adds	r3, #24
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fcb8 	bl	8005094 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	2201      	movs	r2, #1
 800672a:	409a      	lsls	r2, r3
 800672c:	4b23      	ldr	r3, [pc, #140]	; (80067bc <xTaskIncrementTick+0x15c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4313      	orrs	r3, r2
 8006732:	4a22      	ldr	r2, [pc, #136]	; (80067bc <xTaskIncrementTick+0x15c>)
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <xTaskIncrementTick+0x160>)
 8006744:	441a      	add	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	3304      	adds	r3, #4
 800674a:	4619      	mov	r1, r3
 800674c:	4610      	mov	r0, r2
 800674e:	f7fe fc44 	bl	8004fda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006756:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <xTaskIncrementTick+0x164>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	429a      	cmp	r2, r3
 800675e:	d3b9      	bcc.n	80066d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006760:	2301      	movs	r3, #1
 8006762:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006764:	e7b6      	b.n	80066d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006766:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <xTaskIncrementTick+0x164>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	4914      	ldr	r1, [pc, #80]	; (80067c0 <xTaskIncrementTick+0x160>)
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d901      	bls.n	8006782 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006782:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <xTaskIncrementTick+0x168>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800678a:	2301      	movs	r3, #1
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e004      	b.n	800679a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006790:	4b0e      	ldr	r3, [pc, #56]	; (80067cc <xTaskIncrementTick+0x16c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a0d      	ldr	r2, [pc, #52]	; (80067cc <xTaskIncrementTick+0x16c>)
 8006798:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800679a:	697b      	ldr	r3, [r7, #20]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	240084a4 	.word	0x240084a4
 80067a8:	24008480 	.word	0x24008480
 80067ac:	24008434 	.word	0x24008434
 80067b0:	24008438 	.word	0x24008438
 80067b4:	24008494 	.word	0x24008494
 80067b8:	2400849c 	.word	0x2400849c
 80067bc:	24008484 	.word	0x24008484
 80067c0:	24008380 	.word	0x24008380
 80067c4:	2400837c 	.word	0x2400837c
 80067c8:	24008490 	.word	0x24008490
 80067cc:	2400848c 	.word	0x2400848c

080067d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067d6:	4b31      	ldr	r3, [pc, #196]	; (800689c <vTaskSwitchContext+0xcc>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d003      	beq.n	80067e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80067de:	4b30      	ldr	r3, [pc, #192]	; (80068a0 <vTaskSwitchContext+0xd0>)
 80067e0:	2201      	movs	r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80067e4:	e055      	b.n	8006892 <vTaskSwitchContext+0xc2>
		xYieldPending = pdFALSE;
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <vTaskSwitchContext+0xd0>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80067ec:	4b2d      	ldr	r3, [pc, #180]	; (80068a4 <vTaskSwitchContext+0xd4>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <vTaskSwitchContext+0xd4>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d808      	bhi.n	800680e <vTaskSwitchContext+0x3e>
 80067fc:	4b29      	ldr	r3, [pc, #164]	; (80068a4 <vTaskSwitchContext+0xd4>)
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	4b28      	ldr	r3, [pc, #160]	; (80068a4 <vTaskSwitchContext+0xd4>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3334      	adds	r3, #52	; 0x34
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f7f9 ffa3 	bl	8000754 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <vTaskSwitchContext+0xd8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	fab3 f383 	clz	r3, r3
 800681a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800681c:	7afb      	ldrb	r3, [r7, #11]
 800681e:	f1c3 031f 	rsb	r3, r3, #31
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	4921      	ldr	r1, [pc, #132]	; (80068ac <vTaskSwitchContext+0xdc>)
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <vTaskSwitchContext+0x7e>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	607b      	str	r3, [r7, #4]
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <vTaskSwitchContext+0x7c>
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	4a14      	ldr	r2, [pc, #80]	; (80068ac <vTaskSwitchContext+0xdc>)
 800685a:	4413      	add	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	3308      	adds	r3, #8
 8006870:	429a      	cmp	r2, r3
 8006872:	d104      	bne.n	800687e <vTaskSwitchContext+0xae>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <vTaskSwitchContext+0xd4>)
 8006886:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006888:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <vTaskSwitchContext+0xd4>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	334c      	adds	r3, #76	; 0x4c
 800688e:	4a08      	ldr	r2, [pc, #32]	; (80068b0 <vTaskSwitchContext+0xe0>)
 8006890:	6013      	str	r3, [r2, #0]
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	240084a4 	.word	0x240084a4
 80068a0:	24008490 	.word	0x24008490
 80068a4:	2400837c 	.word	0x2400837c
 80068a8:	24008484 	.word	0x24008484
 80068ac:	24008380 	.word	0x24008380
 80068b0:	240000bc 	.word	0x240000bc

080068b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	60fb      	str	r3, [r7, #12]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068da:	4b07      	ldr	r3, [pc, #28]	; (80068f8 <vTaskPlaceOnEventList+0x44>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	3318      	adds	r3, #24
 80068e0:	4619      	mov	r1, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f7fe fb9d 	bl	8005022 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068e8:	2101      	movs	r1, #1
 80068ea:	6838      	ldr	r0, [r7, #0]
 80068ec:	f000 fb82 	bl	8006ff4 <prvAddCurrentTaskToDelayedList>
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	2400837c 	.word	0x2400837c

080068fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60fb      	str	r3, [r7, #12]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	3318      	adds	r3, #24
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fbb1 	bl	8005094 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006932:	4b1d      	ldr	r3, [pc, #116]	; (80069a8 <xTaskRemoveFromEventList+0xac>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d11c      	bne.n	8006974 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	3304      	adds	r3, #4
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fba8 	bl	8005094 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	2201      	movs	r2, #1
 800694a:	409a      	lsls	r2, r3
 800694c:	4b17      	ldr	r3, [pc, #92]	; (80069ac <xTaskRemoveFromEventList+0xb0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4313      	orrs	r3, r2
 8006952:	4a16      	ldr	r2, [pc, #88]	; (80069ac <xTaskRemoveFromEventList+0xb0>)
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4a13      	ldr	r2, [pc, #76]	; (80069b0 <xTaskRemoveFromEventList+0xb4>)
 8006964:	441a      	add	r2, r3
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	3304      	adds	r3, #4
 800696a:	4619      	mov	r1, r3
 800696c:	4610      	mov	r0, r2
 800696e:	f7fe fb34 	bl	8004fda <vListInsertEnd>
 8006972:	e005      	b.n	8006980 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	3318      	adds	r3, #24
 8006978:	4619      	mov	r1, r3
 800697a:	480e      	ldr	r0, [pc, #56]	; (80069b4 <xTaskRemoveFromEventList+0xb8>)
 800697c:	f7fe fb2d 	bl	8004fda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006984:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <xTaskRemoveFromEventList+0xbc>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698a:	429a      	cmp	r2, r3
 800698c:	d905      	bls.n	800699a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800698e:	2301      	movs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006992:	4b0a      	ldr	r3, [pc, #40]	; (80069bc <xTaskRemoveFromEventList+0xc0>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	e001      	b.n	800699e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800699e:	697b      	ldr	r3, [r7, #20]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	240084a4 	.word	0x240084a4
 80069ac:	24008484 	.word	0x24008484
 80069b0:	24008380 	.word	0x24008380
 80069b4:	2400843c 	.word	0x2400843c
 80069b8:	2400837c 	.word	0x2400837c
 80069bc:	24008490 	.word	0x24008490

080069c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80069c8:	4b06      	ldr	r3, [pc, #24]	; (80069e4 <vTaskInternalSetTimeOutState+0x24>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80069d0:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <vTaskInternalSetTimeOutState+0x28>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	605a      	str	r2, [r3, #4]
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	24008494 	.word	0x24008494
 80069e8:	24008480 	.word	0x24008480

080069ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b088      	sub	sp, #32
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	613b      	str	r3, [r7, #16]
}
 8006a0e:	bf00      	nop
 8006a10:	e7fe      	b.n	8006a10 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	60fb      	str	r3, [r7, #12]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006a2e:	f7fe fc89 	bl	8005344 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <xTaskCheckForTimeOut+0xbc>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	69ba      	ldr	r2, [r7, #24]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4a:	d102      	bne.n	8006a52 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
 8006a50:	e023      	b.n	8006a9a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	4b15      	ldr	r3, [pc, #84]	; (8006aac <xTaskCheckForTimeOut+0xc0>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d007      	beq.n	8006a6e <xTaskCheckForTimeOut+0x82>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d302      	bcc.n	8006a6e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
 8006a6c:	e015      	b.n	8006a9a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d20b      	bcs.n	8006a90 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ff9b 	bl	80069c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	61fb      	str	r3, [r7, #28]
 8006a8e:	e004      	b.n	8006a9a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006a9a:	f7fe fc83 	bl	80053a4 <vPortExitCritical>

	return xReturn;
 8006a9e:	69fb      	ldr	r3, [r7, #28]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	24008480 	.word	0x24008480
 8006aac:	24008494 	.word	0x24008494

08006ab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ab4:	4b03      	ldr	r3, [pc, #12]	; (8006ac4 <vTaskMissedYield+0x14>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
}
 8006aba:	bf00      	nop
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	24008490 	.word	0x24008490

08006ac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ad0:	f000 f852 	bl	8006b78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ad4:	4b06      	ldr	r3, [pc, #24]	; (8006af0 <prvIdleTask+0x28>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d9f9      	bls.n	8006ad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006adc:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <prvIdleTask+0x2c>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006aec:	e7f0      	b.n	8006ad0 <prvIdleTask+0x8>
 8006aee:	bf00      	nop
 8006af0:	24008380 	.word	0x24008380
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	e00c      	b.n	8006b1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <prvInitialiseTaskLists+0x60>)
 8006b10:	4413      	add	r3, r2
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fa34 	bl	8004f80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	607b      	str	r3, [r7, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b06      	cmp	r3, #6
 8006b22:	d9ef      	bls.n	8006b04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006b24:	480d      	ldr	r0, [pc, #52]	; (8006b5c <prvInitialiseTaskLists+0x64>)
 8006b26:	f7fe fa2b 	bl	8004f80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006b2a:	480d      	ldr	r0, [pc, #52]	; (8006b60 <prvInitialiseTaskLists+0x68>)
 8006b2c:	f7fe fa28 	bl	8004f80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006b30:	480c      	ldr	r0, [pc, #48]	; (8006b64 <prvInitialiseTaskLists+0x6c>)
 8006b32:	f7fe fa25 	bl	8004f80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006b36:	480c      	ldr	r0, [pc, #48]	; (8006b68 <prvInitialiseTaskLists+0x70>)
 8006b38:	f7fe fa22 	bl	8004f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006b3c:	480b      	ldr	r0, [pc, #44]	; (8006b6c <prvInitialiseTaskLists+0x74>)
 8006b3e:	f7fe fa1f 	bl	8004f80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006b42:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <prvInitialiseTaskLists+0x78>)
 8006b44:	4a05      	ldr	r2, [pc, #20]	; (8006b5c <prvInitialiseTaskLists+0x64>)
 8006b46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <prvInitialiseTaskLists+0x7c>)
 8006b4a:	4a05      	ldr	r2, [pc, #20]	; (8006b60 <prvInitialiseTaskLists+0x68>)
 8006b4c:	601a      	str	r2, [r3, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	24008380 	.word	0x24008380
 8006b5c:	2400840c 	.word	0x2400840c
 8006b60:	24008420 	.word	0x24008420
 8006b64:	2400843c 	.word	0x2400843c
 8006b68:	24008450 	.word	0x24008450
 8006b6c:	24008468 	.word	0x24008468
 8006b70:	24008434 	.word	0x24008434
 8006b74:	24008438 	.word	0x24008438

08006b78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006b7e:	e019      	b.n	8006bb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006b80:	f7fe fbe0 	bl	8005344 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <prvCheckTasksWaitingTermination+0x50>)
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3304      	adds	r3, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7fe fa7f 	bl	8005094 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006b96:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <prvCheckTasksWaitingTermination+0x54>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <prvCheckTasksWaitingTermination+0x54>)
 8006b9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <prvCheckTasksWaitingTermination+0x58>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	4a0a      	ldr	r2, [pc, #40]	; (8006bd0 <prvCheckTasksWaitingTermination+0x58>)
 8006ba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006baa:	f7fe fbfb 	bl	80053a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 f810 	bl	8006bd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bb4:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <prvCheckTasksWaitingTermination+0x58>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d1e1      	bne.n	8006b80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	24008450 	.word	0x24008450
 8006bcc:	2400847c 	.word	0x2400847c
 8006bd0:	24008464 	.word	0x24008464

08006bd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	334c      	adds	r3, #76	; 0x4c
 8006be0:	4618      	mov	r0, r3
 8006be2:	f003 fe91 	bl	800a908 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d108      	bne.n	8006c02 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fe f8a5 	bl	8004d44 <vPortFree>
				vPortFree( pxTCB );
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fe f8a2 	bl	8004d44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006c00:	e018      	b.n	8006c34 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d103      	bne.n	8006c14 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fe f899 	bl	8004d44 <vPortFree>
	}
 8006c12:	e00f      	b.n	8006c34 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d00a      	beq.n	8006c34 <prvDeleteTCB+0x60>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60fb      	str	r3, [r7, #12]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <prvDeleteTCB+0x5e>
	}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b083      	sub	sp, #12
 8006c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c42:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <prvResetNextTaskUnblockTime+0x38>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006c4c:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <prvResetNextTaskUnblockTime+0x3c>)
 8006c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006c54:	e008      	b.n	8006c68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c56:	4b07      	ldr	r3, [pc, #28]	; (8006c74 <prvResetNextTaskUnblockTime+0x38>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	4a04      	ldr	r2, [pc, #16]	; (8006c78 <prvResetNextTaskUnblockTime+0x3c>)
 8006c66:	6013      	str	r3, [r2, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	24008434 	.word	0x24008434
 8006c78:	2400849c 	.word	0x2400849c

08006c7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006c82:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <xTaskGetSchedulerState+0x34>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	607b      	str	r3, [r7, #4]
 8006c8e:	e008      	b.n	8006ca2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c90:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <xTaskGetSchedulerState+0x38>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d102      	bne.n	8006c9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006c98:	2302      	movs	r3, #2
 8006c9a:	607b      	str	r3, [r7, #4]
 8006c9c:	e001      	b.n	8006ca2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006ca2:	687b      	ldr	r3, [r7, #4]
	}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr
 8006cb0:	24008488 	.word	0x24008488
 8006cb4:	240084a4 	.word	0x240084a4

08006cb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d05e      	beq.n	8006d8c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd2:	4b31      	ldr	r3, [pc, #196]	; (8006d98 <xTaskPriorityInherit+0xe0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d24e      	bcs.n	8006d7a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	db06      	blt.n	8006cf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ce4:	4b2c      	ldr	r3, [pc, #176]	; (8006d98 <xTaskPriorityInherit+0xe0>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	f1c3 0207 	rsb	r2, r3, #7
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6959      	ldr	r1, [r3, #20]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4a26      	ldr	r2, [pc, #152]	; (8006d9c <xTaskPriorityInherit+0xe4>)
 8006d04:	4413      	add	r3, r2
 8006d06:	4299      	cmp	r1, r3
 8006d08:	d12f      	bne.n	8006d6a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe f9c0 	bl	8005094 <uxListRemove>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1e:	2201      	movs	r2, #1
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43da      	mvns	r2, r3
 8006d26:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <xTaskPriorityInherit+0xe8>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <xTaskPriorityInherit+0xe8>)
 8006d2e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d30:	4b19      	ldr	r3, [pc, #100]	; (8006d98 <xTaskPriorityInherit+0xe0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	2201      	movs	r2, #1
 8006d40:	409a      	lsls	r2, r3
 8006d42:	4b17      	ldr	r3, [pc, #92]	; (8006da0 <xTaskPriorityInherit+0xe8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	4a15      	ldr	r2, [pc, #84]	; (8006da0 <xTaskPriorityInherit+0xe8>)
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <xTaskPriorityInherit+0xe4>)
 8006d5a:	441a      	add	r2, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f7fe f939 	bl	8004fda <vListInsertEnd>
 8006d68:	e004      	b.n	8006d74 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	; (8006d98 <xTaskPriorityInherit+0xe0>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e008      	b.n	8006d8c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <xTaskPriorityInherit+0xe0>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d201      	bcs.n	8006d8c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
	}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	2400837c 	.word	0x2400837c
 8006d9c:	24008380 	.word	0x24008380
 8006da0:	24008484 	.word	0x24008484

08006da4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d06e      	beq.n	8006e98 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006dba:	4b3a      	ldr	r3, [pc, #232]	; (8006ea4 <xTaskPriorityDisinherit+0x100>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d00a      	beq.n	8006dda <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	60fb      	str	r3, [r7, #12]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	60bb      	str	r3, [r7, #8]
}
 8006df4:	bf00      	nop
 8006df6:	e7fe      	b.n	8006df6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dfc:	1e5a      	subs	r2, r3, #1
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d044      	beq.n	8006e98 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d140      	bne.n	8006e98 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3304      	adds	r3, #4
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fe f93a 	bl	8005094 <uxListRemove>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d115      	bne.n	8006e52 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	491f      	ldr	r1, [pc, #124]	; (8006ea8 <xTaskPriorityDisinherit+0x104>)
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <xTaskPriorityDisinherit+0xae>
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e40:	2201      	movs	r2, #1
 8006e42:	fa02 f303 	lsl.w	r3, r2, r3
 8006e46:	43da      	mvns	r2, r3
 8006e48:	4b18      	ldr	r3, [pc, #96]	; (8006eac <xTaskPriorityDisinherit+0x108>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	4a17      	ldr	r2, [pc, #92]	; (8006eac <xTaskPriorityDisinherit+0x108>)
 8006e50:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	f1c3 0207 	rsb	r2, r3, #7
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	409a      	lsls	r2, r3
 8006e6e:	4b0f      	ldr	r3, [pc, #60]	; (8006eac <xTaskPriorityDisinherit+0x108>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <xTaskPriorityDisinherit+0x108>)
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	4a08      	ldr	r2, [pc, #32]	; (8006ea8 <xTaskPriorityDisinherit+0x104>)
 8006e86:	441a      	add	r2, r3
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4610      	mov	r0, r2
 8006e90:	f7fe f8a3 	bl	8004fda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006e94:	2301      	movs	r3, #1
 8006e96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e98:	697b      	ldr	r3, [r7, #20]
	}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	2400837c 	.word	0x2400837c
 8006ea8:	24008380 	.word	0x24008380
 8006eac:	24008484 	.word	0x24008484

08006eb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b088      	sub	sp, #32
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d077      	beq.n	8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	60fb      	str	r3, [r7, #12]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	683a      	ldr	r2, [r7, #0]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d902      	bls.n	8006ef6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	61fb      	str	r3, [r7, #28]
 8006ef4:	e002      	b.n	8006efc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d058      	beq.n	8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d153      	bne.n	8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f10:	4b2b      	ldr	r3, [pc, #172]	; (8006fc0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d10a      	bne.n	8006f30 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	60bb      	str	r3, [r7, #8]
}
 8006f2c:	bf00      	nop
 8006f2e:	e7fe      	b.n	8006f2e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	69fa      	ldr	r2, [r7, #28]
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	db04      	blt.n	8006f4e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	f1c3 0207 	rsb	r2, r3, #7
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	6959      	ldr	r1, [r3, #20]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4a19      	ldr	r2, [pc, #100]	; (8006fc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006f5e:	4413      	add	r3, r2
 8006f60:	4299      	cmp	r1, r3
 8006f62:	d129      	bne.n	8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	3304      	adds	r3, #4
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f7fe f893 	bl	8005094 <uxListRemove>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f78:	2201      	movs	r2, #1
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	43da      	mvns	r2, r3
 8006f80:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4013      	ands	r3, r2
 8006f86:	4a10      	ldr	r2, [pc, #64]	; (8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f88:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8e:	2201      	movs	r2, #1
 8006f90:	409a      	lsls	r2, r3
 8006f92:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4313      	orrs	r3, r2
 8006f98:	4a0b      	ldr	r2, [pc, #44]	; (8006fc8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4a06      	ldr	r2, [pc, #24]	; (8006fc4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006faa:	441a      	add	r2, r3
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	3304      	adds	r3, #4
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f7fe f811 	bl	8004fda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006fb8:	bf00      	nop
 8006fba:	3720      	adds	r7, #32
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	2400837c 	.word	0x2400837c
 8006fc4:	24008380 	.word	0x24008380
 8006fc8:	24008484 	.word	0x24008484

08006fcc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d004      	beq.n	8006fe2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006fd8:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fde:	3201      	adds	r2, #1
 8006fe0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006fe2:	4b03      	ldr	r3, [pc, #12]	; (8006ff0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
	}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	2400837c 	.word	0x2400837c

08006ff4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006ffe:	4b29      	ldr	r3, [pc, #164]	; (80070a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007004:	4b28      	ldr	r3, [pc, #160]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3304      	adds	r3, #4
 800700a:	4618      	mov	r0, r3
 800700c:	f7fe f842 	bl	8005094 <uxListRemove>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10b      	bne.n	800702e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007016:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	2201      	movs	r2, #1
 800701e:	fa02 f303 	lsl.w	r3, r2, r3
 8007022:	43da      	mvns	r2, r3
 8007024:	4b21      	ldr	r3, [pc, #132]	; (80070ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4013      	ands	r3, r2
 800702a:	4a20      	ldr	r2, [pc, #128]	; (80070ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800702c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007034:	d10a      	bne.n	800704c <prvAddCurrentTaskToDelayedList+0x58>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d007      	beq.n	800704c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800703c:	4b1a      	ldr	r3, [pc, #104]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3304      	adds	r3, #4
 8007042:	4619      	mov	r1, r3
 8007044:	481a      	ldr	r0, [pc, #104]	; (80070b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007046:	f7fd ffc8 	bl	8004fda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800704a:	e026      	b.n	800709a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4413      	add	r3, r2
 8007052:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007054:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	429a      	cmp	r2, r3
 8007062:	d209      	bcs.n	8007078 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007064:	4b13      	ldr	r3, [pc, #76]	; (80070b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	4b0f      	ldr	r3, [pc, #60]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7fd ffd6 	bl	8005022 <vListInsert>
}
 8007076:	e010      	b.n	800709a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007078:	4b0f      	ldr	r3, [pc, #60]	; (80070b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3304      	adds	r3, #4
 8007082:	4619      	mov	r1, r3
 8007084:	4610      	mov	r0, r2
 8007086:	f7fd ffcc 	bl	8005022 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800708a:	4b0c      	ldr	r3, [pc, #48]	; (80070bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	429a      	cmp	r2, r3
 8007092:	d202      	bcs.n	800709a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007094:	4a09      	ldr	r2, [pc, #36]	; (80070bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	6013      	str	r3, [r2, #0]
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	24008480 	.word	0x24008480
 80070a8:	2400837c 	.word	0x2400837c
 80070ac:	24008484 	.word	0x24008484
 80070b0:	24008468 	.word	0x24008468
 80070b4:	24008438 	.word	0x24008438
 80070b8:	24008434 	.word	0x24008434
 80070bc:	2400849c 	.word	0x2400849c

080070c0 <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	605a      	str	r2, [r3, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	601a      	str	r2, [r3, #0]
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
 80070ea:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	601a      	str	r2, [r3, #0]
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff ffdd 	bl	80070e2 <metal_list_add_before>
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}

08007130 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6852      	ldr	r2, [r2, #4]
 8007140:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6812      	ldr	r2, [r2, #0]
 800714a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	601a      	str	r2, [r3, #0]
}
 800715a:	bf00      	nop
 800715c:	370c      	adds	r7, #12
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b082      	sub	sp, #8
 800716a:	af00      	add	r7, sp, #0
 800716c:	6078      	str	r0, [r7, #4]
 800716e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f002 f846 	bl	8009204 <metal_machine_cache_flush>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f002 f844 	bl	800921a <metal_machine_cache_invalidate>
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}

0800719a <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff ffdd 	bl	8007166 <__metal_cache_flush>
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff ffdd 	bl	8007180 <__metal_cache_invalidate>
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d008      	beq.n	80071f0 <metal_bus_register+0x20>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <metal_bus_register+0x20>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d102      	bne.n	80071f6 <metal_bus_register+0x26>
		return -EINVAL;
 80071f0:	f06f 0315 	mvn.w	r3, #21
 80071f4:	e026      	b.n	8007244 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2100      	movs	r1, #0
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f855 	bl	80072ac <metal_bus_find>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d102      	bne.n	800720e <metal_bus_register+0x3e>
		return -EEXIST;
 8007208:	f06f 0310 	mvn.w	r3, #16
 800720c:	e01a      	b.n	8007244 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	331c      	adds	r3, #28
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff ff54 	bl	80070c0 <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3324      	adds	r3, #36	; 0x24
 800721c:	4619      	mov	r1, r3
 800721e:	480b      	ldr	r0, [pc, #44]	; (800724c <metal_bus_register+0x7c>)
 8007220:	f7ff ff79 	bl	8007116 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 8007224:	4b0a      	ldr	r3, [pc, #40]	; (8007250 <metal_bus_register+0x80>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d90a      	bls.n	8007242 <metal_bus_register+0x72>
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <metal_bus_register+0x80>)
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d006      	beq.n	8007242 <metal_bus_register+0x72>
 8007234:	4b06      	ldr	r3, [pc, #24]	; (8007250 <metal_bus_register+0x80>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	4905      	ldr	r1, [pc, #20]	; (8007254 <metal_bus_register+0x84>)
 800723e:	2007      	movs	r0, #7
 8007240:	4798      	blx	r3
	return 0;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	240084b0 	.word	0x240084b0
 8007250:	240084a8 	.word	0x240084a8
 8007254:	0800b08c 	.word	0x0800b08c

08007258 <metal_bus_unregister>:

int metal_bus_unregister(struct metal_bus *bus)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	metal_list_del(&bus->node);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	3324      	adds	r3, #36	; 0x24
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff ff63 	bl	8007130 <metal_list_del>
	if (bus->ops.bus_close)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <metal_bus_unregister+0x22>
		bus->ops.bus_close(bus);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	4798      	blx	r3
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <metal_bus_unregister+0x4c>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	2b06      	cmp	r3, #6
 8007280:	d90a      	bls.n	8007298 <metal_bus_unregister+0x40>
 8007282:	4b08      	ldr	r3, [pc, #32]	; (80072a4 <metal_bus_unregister+0x4c>)
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d006      	beq.n	8007298 <metal_bus_unregister+0x40>
 800728a:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <metal_bus_unregister+0x4c>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	4905      	ldr	r1, [pc, #20]	; (80072a8 <metal_bus_unregister+0x50>)
 8007294:	2007      	movs	r0, #7
 8007296:	4798      	blx	r3
	return 0;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	240084a8 	.word	0x240084a8
 80072a8:	0800b0a0 	.word	0x0800b0a0

080072ac <metal_bus_find>:

int metal_bus_find(const char *name, struct metal_bus **result)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 80072b6:	4b13      	ldr	r3, [pc, #76]	; (8007304 <metal_bus_find+0x58>)
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e017      	b.n	80072ee <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b24      	subs	r3, #36	; 0x24
 80072c2:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7f9 f808 	bl	80002e0 <strcmp>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e007      	b.n	80072ee <metal_bus_find+0x42>
			continue;
		if (result)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <metal_bus_find+0x3e>
			*result = bus;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	68ba      	ldr	r2, [r7, #8]
 80072e8:	601a      	str	r2, [r3, #0]
		return 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	e005      	b.n	80072fa <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4a05      	ldr	r2, [pc, #20]	; (8007308 <metal_bus_find+0x5c>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d1e3      	bne.n	80072be <metal_bus_find+0x12>
	}
	return -ENOENT;
 80072f6:	f06f 0301 	mvn.w	r3, #1
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	240084a8 	.word	0x240084a8
 8007308:	240084b0 	.word	0x240084b0

0800730c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00d      	beq.n	800733a <metal_device_open+0x2e>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <metal_device_open+0x2e>
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d006      	beq.n	800733a <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <metal_device_open+0x2e>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d102      	bne.n	8007340 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 800733a:	f06f 0315 	mvn.w	r3, #21
 800733e:	e01f      	b.n	8007380 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 8007340:	f107 0310 	add.w	r3, r7, #16
 8007344:	4619      	mov	r1, r3
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff ffb0 	bl	80072ac <metal_bus_find>
 800734c:	6178      	str	r0, [r7, #20]
	if (error)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <metal_device_open+0x4c>
		return error;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	e013      	b.n	8007380 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d102      	bne.n	8007366 <metal_device_open+0x5a>
		return -ENODEV;
 8007360:	f06f 0312 	mvn.w	r3, #18
 8007364:	e00c      	b.n	8007380 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	4798      	blx	r3
 8007372:	6178      	str	r0, [r7, #20]
	if (error)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <metal_device_open+0x72>
		return error;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	e000      	b.n	8007380 <metal_device_open+0x74>

	return 0;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d008      	beq.n	80073aa <metal_register_generic_device+0x22>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d902      	bls.n	80073b0 <metal_register_generic_device+0x28>
		return -EINVAL;
 80073aa:	f06f 0315 	mvn.w	r3, #21
 80073ae:	e009      	b.n	80073c4 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a06      	ldr	r2, [pc, #24]	; (80073cc <metal_register_generic_device+0x44>)
 80073b4:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	336c      	adds	r3, #108	; 0x6c
 80073ba:	4619      	mov	r1, r3
 80073bc:	4804      	ldr	r0, [pc, #16]	; (80073d0 <metal_register_generic_device+0x48>)
 80073be:	f7ff feaa 	bl	8007116 <metal_list_add_tail>
			    &device->node);
	return 0;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	24000014 	.word	0x24000014
 80073d0:	240084c0 	.word	0x240084c0

080073d4 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 80073e0:	4b12      	ldr	r3, [pc, #72]	; (800742c <metal_generic_dev_open+0x58>)
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	617b      	str	r3, [r7, #20]
 80073e6:	e017      	b.n	8007418 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	3b6c      	subs	r3, #108	; 0x6c
 80073ec:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7f8 ff73 	bl	80002e0 <strcmp>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	e007      	b.n	8007418 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 800740e:	6938      	ldr	r0, [r7, #16]
 8007410:	f000 f88c 	bl	800752c <metal_generic_dev_sys_open>
 8007414:	4603      	mov	r3, r0
 8007416:	e005      	b.n	8007424 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	4a05      	ldr	r2, [pc, #20]	; (8007430 <metal_generic_dev_open+0x5c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d1e3      	bne.n	80073e8 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 8007420:	f06f 0312 	mvn.w	r3, #18
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	240084a8 	.word	0x240084a8
 8007430:	240084c0 	.word	0x240084c0

08007434 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 8007442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d009      	beq.n	800745e <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 800744a:	6a3a      	ldr	r2, [r7, #32]
 800744c:	4613      	mov	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	461a      	mov	r2, r3
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800745a:	f002 fe63 	bl	800a124 <memcpy>
	for (i = 0; i < nents_in; i++) {
 800745e:	2300      	movs	r3, #0
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	e02f      	b.n	80074c4 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d114      	bne.n	8007494 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	4613      	mov	r3, r2
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	461a      	mov	r2, r3
 8007476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007478:	4413      	add	r3, r2
 800747a:	6818      	ldr	r0, [r3, #0]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	4613      	mov	r3, r2
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	4413      	add	r3, r2
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	461a      	mov	r2, r3
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	4413      	add	r3, r2
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	4619      	mov	r1, r3
 8007490:	f7ff fe83 	bl	800719a <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4613      	mov	r3, r2
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	4413      	add	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	461a      	mov	r2, r3
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	4413      	add	r3, r2
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4613      	mov	r3, r2
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4413      	add	r3, r2
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	461a      	mov	r2, r3
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	4413      	add	r3, r2
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	4619      	mov	r1, r3
 80074ba:	f7ff fe7b 	bl	80071b4 <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	3301      	adds	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	dbcb      	blt.n	8007464 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 80074cc:	6a3b      	ldr	r3, [r7, #32]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b086      	sub	sp, #24
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
 80074e2:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	e017      	b.n	800751a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	4613      	mov	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	461a      	mov	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	4413      	add	r3, r2
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	697a      	ldr	r2, [r7, #20]
 80074fe:	4613      	mov	r3, r2
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	461a      	mov	r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	4413      	add	r3, r2
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	4619      	mov	r1, r3
 8007510:	f7ff fe50 	bl	80071b4 <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	3301      	adds	r3, #1
 8007518:	617b      	str	r3, [r7, #20]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	429a      	cmp	r2, r3
 8007520:	dbe3      	blt.n	80074ea <metal_generic_dev_dma_unmap+0x14>
	}
}
 8007522:	bf00      	nop
 8007524:	bf00      	nop
 8007526:	3718      	adds	r7, #24
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 8007534:	2300      	movs	r3, #0
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	e013      	b.n	8007562 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4613      	mov	r3, r2
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	4413      	add	r3, r2
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	3308      	adds	r3, #8
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	3304      	adds	r3, #4
 800754c:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 8007556:	68b8      	ldr	r0, [r7, #8]
 8007558:	f000 f828 	bl	80075ac <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3301      	adds	r3, #1
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	429a      	cmp	r2, r3
 800756a:	d3e6      	bcc.n	800753a <metal_generic_dev_sys_open+0xe>
 800756c:	e000      	b.n	8007570 <metal_generic_dev_sys_open+0x44>
			break;
 800756e:	bf00      	nop
	}

	return 0;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8007584:	4803      	ldr	r0, [pc, #12]	; (8007594 <metal_sys_init+0x18>)
 8007586:	f7ff fe23 	bl	80071d0 <metal_bus_register>
	return 0;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	24000014 	.word	0x24000014

08007598 <metal_sys_finish>:

void metal_sys_finish(void)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
	metal_bus_unregister(&metal_generic_bus);
 800759c:	4802      	ldr	r0, [pc, #8]	; (80075a8 <metal_sys_finish+0x10>)
 800759e:	f7ff fe5b 	bl	8007258 <metal_bus_unregister>
}
 80075a2:	bf00      	nop
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	24000014 	.word	0x24000014

080075ac <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	613b      	str	r3, [r7, #16]
	if (psize) {
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d02c      	beq.n	8007620 <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	fa22 f303 	lsr.w	r3, r2, r3
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e013      	b.n	800760e <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	6819      	ldr	r1, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f001 fe19 	bl	8009230 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	3301      	adds	r3, #1
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	fa22 f303 	lsr.w	r3, r2, r3
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	429a      	cmp	r2, r3
 800761e:	d9e2      	bls.n	80075e6 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 8007620:	bf00      	nop
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <metal_list_init>:
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
	...

0800764c <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
	int error = 0;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 8007658:	2220      	movs	r2, #32
 800765a:	2100      	movs	r1, #0
 800765c:	4810      	ldr	r0, [pc, #64]	; (80076a0 <metal_init+0x54>)
 800765e:	f002 fd6f 	bl	800a140 <memset>

	_metal.common.log_handler   = params->log_handler;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a0e      	ldr	r2, [pc, #56]	; (80076a0 <metal_init+0x54>)
 8007668:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	791a      	ldrb	r2, [r3, #4]
 800766e:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <metal_init+0x54>)
 8007670:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 8007672:	480c      	ldr	r0, [pc, #48]	; (80076a4 <metal_init+0x58>)
 8007674:	f7ff ffd8 	bl	8007628 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 8007678:	480b      	ldr	r0, [pc, #44]	; (80076a8 <metal_init+0x5c>)
 800767a:	f7ff ffd5 	bl	8007628 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 800767e:	480b      	ldr	r0, [pc, #44]	; (80076ac <metal_init+0x60>)
 8007680:	f7ff ffd2 	bl	8007628 <metal_list_init>

	error = metal_sys_init(params);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff ff79 	bl	800757c <metal_sys_init>
 800768a:	60f8      	str	r0, [r7, #12]
	if (error)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d001      	beq.n	8007696 <metal_init+0x4a>
		return error;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	e000      	b.n	8007698 <metal_init+0x4c>

	return error;
 8007696:	68fb      	ldr	r3, [r7, #12]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	240084a8 	.word	0x240084a8
 80076a4:	240084b0 	.word	0x240084b0
 80076a8:	240084b8 	.word	0x240084b8
 80076ac:	240084c0 	.word	0x240084c0

080076b0 <metal_finish>:

void metal_finish(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
	metal_sys_finish();
 80076b4:	f7ff ff70 	bl	8007598 <metal_sys_finish>
	memset(&_metal, 0, sizeof(_metal));
 80076b8:	2220      	movs	r2, #32
 80076ba:	2100      	movs	r1, #0
 80076bc:	4802      	ldr	r0, [pc, #8]	; (80076c8 <metal_finish+0x18>)
 80076be:	f002 fd3f 	bl	800a140 <memset>
}
 80076c2:	bf00      	nop
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	240084a8 	.word	0x240084a8

080076cc <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076de:	d009      	beq.n	80076f4 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d804      	bhi.n	80076f4 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
		: NULL);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	4413      	add	r3, r2
 80076f2:	e000      	b.n	80076f6 <metal_io_virt+0x2a>
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8007702:	b5b0      	push	{r4, r5, r7, lr}
 8007704:	b08a      	sub	sp, #40	; 0x28
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
 800770e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8007710:	f107 0310 	add.w	r3, r7, #16
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	605a      	str	r2, [r3, #4]
 800771a:	609a      	str	r2, [r3, #8]
 800771c:	60da      	str	r2, [r3, #12]
 800771e:	611a      	str	r2, [r3, #16]
 8007720:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	605a      	str	r2, [r3, #4]
	io->size = size;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007738:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	2b1f      	cmp	r3, #31
 800773e:	d904      	bls.n	800774a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007746:	611a      	str	r2, [r3, #16]
 8007748:	e006      	b.n	8007758 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 800774a:	2201      	movs	r2, #1
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	1e5a      	subs	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800775c:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 800775e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <metal_io_init+0x7a>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007768:	f103 0418 	add.w	r4, r3, #24
 800776c:	4615      	mov	r5, r2
 800776e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007776:	e884 0003 	stmia.w	r4, {r0, r1}
 800777a:	e00a      	b.n	8007792 <metal_io_init+0x90>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f103 0418 	add.w	r4, r3, #24
 8007782:	f107 0510 	add.w	r5, r7, #16
 8007786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800778a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800778e:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff ff0a 	bl	80075ac <metal_sys_io_mem_map>
}
 8007798:	bf00      	nop
 800779a:	3728      	adds	r7, #40	; 0x28
 800779c:	46bd      	mov	sp, r7
 800779e:	bdb0      	pop	{r4, r5, r7, pc}

080077a0 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 80077a0:	b590      	push	{r4, r7, lr}
 80077a2:	b08b      	sub	sp, #44	; 0x2c
 80077a4:	af02      	add	r7, sp, #8
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff ff8b 	bl	80076cc <metal_io_virt>
 80077b6:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d902      	bls.n	80077cc <metal_io_block_read+0x2c>
		return -ERANGE;
 80077c6:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80077ca:	e05c      	b.n	8007886 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	441a      	add	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d904      	bls.n	80077e4 <metal_io_block_read+0x44>
		len = io->size - offset;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	603b      	str	r3, [r7, #0]
	retlen = len;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00a      	beq.n	8007806 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6a1c      	ldr	r4, [r3, #32]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	2305      	movs	r3, #5
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	47a0      	blx	r4
 8007802:	6178      	str	r0, [r7, #20]
 8007804:	e03e      	b.n	8007884 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8007806:	f3bf 8f5b 	dmb	ish
		while ( len && (
 800780a:	e00c      	b.n	8007826 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	701a      	strb	r2, [r3, #0]
			dest++;
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	3301      	adds	r3, #1
 8007818:	61bb      	str	r3, [r7, #24]
			ptr++;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	3301      	adds	r3, #1
 800781e:	61fb      	str	r3, [r7, #28]
			len--;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	3b01      	subs	r3, #1
 8007824:	603b      	str	r3, [r7, #0]
		while ( len && (
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d017      	beq.n	800785c <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1ea      	bne.n	800780c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8007840:	e00c      	b.n	800785c <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	3304      	adds	r3, #4
 800784e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	3304      	adds	r3, #4
 8007854:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	3b04      	subs	r3, #4
 800785a:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b03      	cmp	r3, #3
 8007860:	dcef      	bgt.n	8007842 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 8007862:	e00c      	b.n	800787e <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	3301      	adds	r3, #1
 8007870:	61bb      	str	r3, [r7, #24]
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	61fb      	str	r3, [r7, #28]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	3b01      	subs	r3, #1
 800787c:	603b      	str	r3, [r7, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1ef      	bne.n	8007864 <metal_io_block_read+0xc4>
	}
	return retlen;
 8007884:	697b      	ldr	r3, [r7, #20]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3724      	adds	r7, #36	; 0x24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd90      	pop	{r4, r7, pc}

0800788e <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 800788e:	b590      	push	{r4, r7, lr}
 8007890:	b08b      	sub	sp, #44	; 0x2c
 8007892:	af02      	add	r7, sp, #8
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
 800789a:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff ff14 	bl	80076cc <metal_io_virt>
 80078a4:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d902      	bls.n	80078ba <metal_io_block_write+0x2c>
		return -ERANGE;
 80078b4:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80078b8:	e05b      	b.n	8007972 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	441a      	add	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d904      	bls.n	80078d2 <metal_io_block_write+0x44>
		len = io->size - offset;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	603b      	str	r3, [r7, #0]
	retlen = len;
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d017      	beq.n	800790e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	2305      	movs	r3, #5
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	47a0      	blx	r4
 80078f0:	6178      	str	r0, [r7, #20]
 80078f2:	e03d      	b.n	8007970 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	701a      	strb	r2, [r3, #0]
			ptr++;
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	3301      	adds	r3, #1
 8007900:	61fb      	str	r3, [r7, #28]
			source++;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	3301      	adds	r3, #1
 8007906:	61bb      	str	r3, [r7, #24]
			len--;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	3b01      	subs	r3, #1
 800790c:	603b      	str	r3, [r7, #0]
		while ( len && (
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d017      	beq.n	8007944 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1ea      	bne.n	80078f4 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1e5      	bne.n	80078f4 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007928:	e00c      	b.n	8007944 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	3304      	adds	r3, #4
 8007936:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	3304      	adds	r3, #4
 800793c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	3b04      	subs	r3, #4
 8007942:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	2b03      	cmp	r3, #3
 8007948:	dcef      	bgt.n	800792a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 800794a:	e00c      	b.n	8007966 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	3301      	adds	r3, #1
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	3301      	adds	r3, #1
 800795e:	61bb      	str	r3, [r7, #24]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	3b01      	subs	r3, #1
 8007964:	603b      	str	r3, [r7, #0]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1ef      	bne.n	800794c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 800796c:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8007970:	697b      	ldr	r3, [r7, #20]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3724      	adds	r7, #36	; 0x24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd90      	pop	{r4, r7, pc}

0800797a <metal_io_block_set>:

int metal_io_block_set(struct metal_io_region *io, unsigned long offset,
	       unsigned char value, int len)
{
 800797a:	b590      	push	{r4, r7, lr}
 800797c:	b08b      	sub	sp, #44	; 0x2c
 800797e:	af02      	add	r7, sp, #8
 8007980:	60f8      	str	r0, [r7, #12]
 8007982:	60b9      	str	r1, [r7, #8]
 8007984:	603b      	str	r3, [r7, #0]
 8007986:	4613      	mov	r3, r2
 8007988:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = metal_io_virt(io, offset);
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	68f8      	ldr	r0, [r7, #12]
 800798e:	f7ff fe9d 	bl	80076cc <metal_io_virt>
 8007992:	61f8      	str	r0, [r7, #28]
	int retlen = len;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	613b      	str	r3, [r7, #16]

	if (offset > io->size)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	68ba      	ldr	r2, [r7, #8]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d902      	bls.n	80079a8 <metal_io_block_set+0x2e>
		return -ERANGE;
 80079a2:	f06f 0321 	mvn.w	r3, #33	; 0x21
 80079a6:	e05d      	b.n	8007a64 <metal_io_block_set+0xea>
	if ((offset + len) > io->size)
 80079a8:	683a      	ldr	r2, [r7, #0]
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	441a      	add	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d904      	bls.n	80079c0 <metal_io_block_set+0x46>
		len = io->size - offset;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	603b      	str	r3, [r7, #0]
	retlen = len;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	613b      	str	r3, [r7, #16]
	if (io->ops.block_set) {
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <metal_io_block_set+0x66>
		(*io->ops.block_set)(
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80079d0:	79fa      	ldrb	r2, [r7, #7]
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	2305      	movs	r3, #5
 80079d8:	68b9      	ldr	r1, [r7, #8]
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	47a0      	blx	r4
 80079de:	e040      	b.n	8007a62 <metal_io_block_set+0xe8>
			io, offset, value, memory_order_seq_cst, len);
	} else {
		unsigned int cint = value;
 80079e0:	79fb      	ldrb	r3, [r7, #7]
 80079e2:	61bb      	str	r3, [r7, #24]
		unsigned int i;

		for (i = 1; i < sizeof(int); i++)
 80079e4:	2301      	movs	r3, #1
 80079e6:	617b      	str	r3, [r7, #20]
 80079e8:	e00a      	b.n	8007a00 <metal_io_block_set+0x86>
			cint |= ((unsigned int)value << (8 * i));
 80079ea:	79fa      	ldrb	r2, [r7, #7]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	61bb      	str	r3, [r7, #24]
		for (i = 1; i < sizeof(int); i++)
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	3301      	adds	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d9f1      	bls.n	80079ea <metal_io_block_set+0x70>

		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8007a06:	e008      	b.n	8007a1a <metal_io_block_set+0xa0>
			*(unsigned char *)ptr = (unsigned char) value;
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	79fa      	ldrb	r2, [r7, #7]
 8007a0c:	701a      	strb	r2, [r3, #0]
		for (; len && ((uintptr_t)ptr % sizeof(int)); ptr++, len--)
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	3b01      	subs	r3, #1
 8007a18:	603b      	str	r3, [r7, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <metal_io_block_set+0xc4>
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	f003 0303 	and.w	r3, r3, #3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1ee      	bne.n	8007a08 <metal_io_block_set+0x8e>
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007a2a:	e008      	b.n	8007a3e <metal_io_block_set+0xc4>
						len -= sizeof(int))
			*(unsigned int *)ptr = cint;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3304      	adds	r3, #4
 8007a36:	61fb      	str	r3, [r7, #28]
						len -= sizeof(int))
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	3b04      	subs	r3, #4
 8007a3c:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	dcf3      	bgt.n	8007a2c <metal_io_block_set+0xb2>
		for (; len != 0; ptr++, len--)
 8007a44:	e008      	b.n	8007a58 <metal_io_block_set+0xde>
			*(unsigned char *)ptr = (unsigned char) value;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	79fa      	ldrb	r2, [r7, #7]
 8007a4a:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, len--)
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f3      	bne.n	8007a46 <metal_io_block_set+0xcc>
		atomic_thread_fence(memory_order_seq_cst);
 8007a5e:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 8007a62:	693b      	ldr	r3, [r7, #16]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3724      	adds	r7, #36	; 0x24
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd90      	pop	{r4, r7, pc}

08007a6c <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 8007a6c:	b40e      	push	{r1, r2, r3}
 8007a6e:	b480      	push	{r7}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	4603      	mov	r3, r0
 8007a76:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	b003      	add	sp, #12
 8007a84:	4770      	bx	lr

08007a86 <metal_io_virt>:
{
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
 8007a8e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8007a94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a98:	d009      	beq.n	8007aae <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	683a      	ldr	r2, [r7, #0]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d804      	bhi.n	8007aae <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	4413      	add	r3, r2
 8007aac:	e000      	b.n	8007ab0 <metal_io_virt+0x2a>
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d201      	bcs.n	8007ade <metal_io_virt_to_offset+0x22>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	e001      	b.n	8007ae2 <metal_io_virt_to_offset+0x26>
 8007ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
	...

08007af0 <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8007af0:	b5b0      	push	{r4, r5, r7, lr}
 8007af2:	b08c      	sub	sp, #48	; 0x30
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8007b00:	68b9      	ldr	r1, [r7, #8]
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7ff ffbf 	bl	8007a86 <metal_io_virt>
 8007b08:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	699c      	ldr	r4, [r3, #24]
 8007b16:	79fa      	ldrb	r2, [r7, #7]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	68b9      	ldr	r1, [r7, #8]
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	47a0      	blx	r4
 8007b20:	4604      	mov	r4, r0
 8007b22:	460d      	mov	r5, r1
 8007b24:	e059      	b.n	8007bda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d012      	beq.n	8007b52 <metal_io_read+0x62>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d10f      	bne.n	8007b52 <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b38:	f3bf 8f5b 	dmb	ish
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f3bf 8f5b 	dmb	ish
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	76fb      	strb	r3, [r7, #27]
 8007b46:	7efb      	ldrb	r3, [r7, #27]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	461c      	mov	r4, r3
 8007b4e:	4615      	mov	r5, r2
 8007b50:	e043      	b.n	8007bda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d012      	beq.n	8007b7e <metal_io_read+0x8e>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d10f      	bne.n	8007b7e <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
 8007b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b64:	f3bf 8f5b 	dmb	ish
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	f3bf 8f5b 	dmb	ish
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	833b      	strh	r3, [r7, #24]
 8007b72:	8b3b      	ldrh	r3, [r7, #24]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2200      	movs	r2, #0
 8007b78:	461c      	mov	r4, r3
 8007b7a:	4615      	mov	r5, r2
 8007b7c:	e02d      	b.n	8007bda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d010      	beq.n	8007ba6 <metal_io_read+0xb6>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d10d      	bne.n	8007ba6 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8007b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8c:	623b      	str	r3, [r7, #32]
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f3bf 8f5b 	dmb	ish
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f3bf 8f5b 	dmb	ish
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	461c      	mov	r4, r3
 8007ba2:	4615      	mov	r5, r2
 8007ba4:	e019      	b.n	8007bda <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d010      	beq.n	8007bce <metal_io_read+0xde>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d10d      	bne.n	8007bce <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f3bf 8f5b 	dmb	ish
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f3bf 8f5b 	dmb	ish
 8007bc2:	613b      	str	r3, [r7, #16]
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	461c      	mov	r4, r3
 8007bca:	4615      	mov	r5, r2
 8007bcc:	e005      	b.n	8007bda <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8007bce:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <metal_io_read+0xf8>)
 8007bd0:	4a06      	ldr	r2, [pc, #24]	; (8007bec <metal_io_read+0xfc>)
 8007bd2:	21f0      	movs	r1, #240	; 0xf0
 8007bd4:	4806      	ldr	r0, [pc, #24]	; (8007bf0 <metal_io_read+0x100>)
 8007bd6:	f002 f947 	bl	8009e68 <__assert_func>
	return 0; /* quiet compiler */
}
 8007bda:	4622      	mov	r2, r4
 8007bdc:	462b      	mov	r3, r5
 8007bde:	4610      	mov	r0, r2
 8007be0:	4619      	mov	r1, r3
 8007be2:	3730      	adds	r7, #48	; 0x30
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bdb0      	pop	{r4, r5, r7, pc}
 8007be8:	0800b158 	.word	0x0800b158
 8007bec:	0800b2dc 	.word	0x0800b2dc
 8007bf0:	0800b15c 	.word	0x0800b15c

08007bf4 <metal_io_write>:
 *			to inline cleanly.
 */
static inline void
metal_io_write(struct metal_io_region *io, unsigned long offset,
	       uint64_t value, memory_order order, int width)
{
 8007bf4:	b590      	push	{r4, r7, lr}
 8007bf6:	b08f      	sub	sp, #60	; 0x3c
 8007bf8:	af02      	add	r7, sp, #8
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	e9c7 2300 	strd	r2, r3, [r7]
	void *ptr = metal_io_virt(io, offset);
 8007c02:	68b9      	ldr	r1, [r7, #8]
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f7ff ff3e 	bl	8007a86 <metal_io_virt>
 8007c0a:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (io->ops.write)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <metal_io_write+0x3a>
		(*io->ops.write)(io, offset, value, order, width);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	69dc      	ldr	r4, [r3, #28]
 8007c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	47a0      	blx	r4
	else if (ptr && sizeof(atomic_ullong) == width)
		atomic_store_explicit((atomic_ullong *)ptr, value, order);
#endif
	else
		metal_assert (0);
}
 8007c2c:	e04e      	b.n	8007ccc <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uchar) == width)
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00e      	beq.n	8007c52 <metal_io_write+0x5e>
 8007c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d10b      	bne.n	8007c52 <metal_io_write+0x5e>
		atomic_store_explicit((atomic_uchar *)ptr, value, order);
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c3e:	783b      	ldrb	r3, [r7, #0]
 8007c40:	76fb      	strb	r3, [r7, #27]
 8007c42:	7efa      	ldrb	r2, [r7, #27]
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	f3bf 8f5b 	dmb	ish
 8007c4a:	701a      	strb	r2, [r3, #0]
 8007c4c:	f3bf 8f5b 	dmb	ish
 8007c50:	e03c      	b.n	8007ccc <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ushort) == width)
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00e      	beq.n	8007c76 <metal_io_write+0x82>
 8007c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d10b      	bne.n	8007c76 <metal_io_write+0x82>
		atomic_store_explicit((atomic_ushort *)ptr, value, order);
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
 8007c62:	883b      	ldrh	r3, [r7, #0]
 8007c64:	833b      	strh	r3, [r7, #24]
 8007c66:	8b3a      	ldrh	r2, [r7, #24]
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	f3bf 8f5b 	dmb	ish
 8007c6e:	801a      	strh	r2, [r3, #0]
 8007c70:	f3bf 8f5b 	dmb	ish
 8007c74:	e02a      	b.n	8007ccc <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_uint) == width)
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00e      	beq.n	8007c9a <metal_io_write+0xa6>
 8007c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	d10b      	bne.n	8007c9a <metal_io_write+0xa6>
		atomic_store_explicit((atomic_uint *)ptr, value, order);
 8007c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c84:	623b      	str	r3, [r7, #32]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	617b      	str	r3, [r7, #20]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	6a3b      	ldr	r3, [r7, #32]
 8007c8e:	f3bf 8f5b 	dmb	ish
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	f3bf 8f5b 	dmb	ish
 8007c98:	e018      	b.n	8007ccc <metal_io_write+0xd8>
	else if (ptr && sizeof(atomic_ulong) == width)
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00e      	beq.n	8007cbe <metal_io_write+0xca>
 8007ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca2:	2b04      	cmp	r3, #4
 8007ca4:	d10b      	bne.n	8007cbe <metal_io_write+0xca>
		atomic_store_explicit((atomic_ulong *)ptr, value, order);
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	61fb      	str	r3, [r7, #28]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	613b      	str	r3, [r7, #16]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f3bf 8f5b 	dmb	ish
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	f3bf 8f5b 	dmb	ish
 8007cbc:	e006      	b.n	8007ccc <metal_io_write+0xd8>
		metal_assert (0);
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <metal_io_write+0xe0>)
 8007cc0:	4a05      	ldr	r2, [pc, #20]	; (8007cd8 <metal_io_write+0xe4>)
 8007cc2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8007cc6:	4805      	ldr	r0, [pc, #20]	; (8007cdc <metal_io_write+0xe8>)
 8007cc8:	f002 f8ce 	bl	8009e68 <__assert_func>
}
 8007ccc:	bf00      	nop
 8007cce:	3734      	adds	r7, #52	; 0x34
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd90      	pop	{r4, r7, pc}
 8007cd4:	0800b158 	.word	0x0800b158
 8007cd8:	0800b2ec 	.word	0x0800b2ec
 8007cdc:	0800b15c 	.word	0x0800b15c

08007ce0 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f002 fa0b 	bl	800a104 <malloc>
 8007cee:	4603      	mov	r3, r0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
	free(ptr);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f002 fa07 	bl	800a114 <free>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3307      	adds	r3, #7
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	60fb      	str	r3, [r7, #12]
		// num_desc_extra * sizeof(struct vq_desc_extra);
		num_desc_extra * sizeof(vqs-> vq_descx[0]);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8007d1e:	68f8      	ldr	r0, [r7, #12]
 8007d20:	f7ff ffde 	bl	8007ce0 <metal_allocate_memory>
 8007d24:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d004      	beq.n	8007d36 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	2100      	movs	r1, #0
 8007d30:	68b8      	ldr	r0, [r7, #8]
 8007d32:	f002 fa05 	bl	800a140 <memset>
	}

	return vqs;
 8007d36:	68bb      	ldr	r3, [r7, #8]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	891b      	ldrh	r3, [r3, #8]
 8007d4c:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3b18      	subs	r3, #24
 8007d58:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d905      	bls.n	8007d70 <rproc_virtio_virtqueue_notify+0x30>
 8007d64:	4b0d      	ldr	r3, [pc, #52]	; (8007d9c <rproc_virtio_virtqueue_notify+0x5c>)
 8007d66:	4a0e      	ldr	r2, [pc, #56]	; (8007da0 <rproc_virtio_virtqueue_notify+0x60>)
 8007d68:	2133      	movs	r1, #51	; 0x33
 8007d6a:	480e      	ldr	r0, [pc, #56]	; (8007da4 <rproc_virtio_virtqueue_notify+0x64>)
 8007d6c:	f002 f87c 	bl	8009e68 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	4613      	mov	r3, r2
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	4413      	add	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	440b      	add	r3, r1
 8007d80:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	6810      	ldr	r0, [r2, #0]
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	6912      	ldr	r2, [r2, #16]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4798      	blx	r3
}
 8007d92:	bf00      	nop
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	0800b1a4 	.word	0x0800b1a4
 8007da0:	0800b2bc 	.word	0x0800b2bc
 8007da4:	0800b1c0 	.word	0x0800b1c0

08007da8 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3b18      	subs	r3, #24
 8007db4:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3318      	adds	r3, #24
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fe77 	bl	8007abc <metal_io_virt_to_offset>
 8007dce:	4601      	mov	r1, r0
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	2205      	movs	r2, #5
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7ff fe8b 	bl	8007af0 <metal_io_read>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4613      	mov	r3, r2
 8007de0:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8007de2:	7afb      	ldrb	r3, [r7, #11]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <rproc_virtio_set_status>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_status(struct virtio_device *vdev,
				    unsigned char status)
{
 8007dec:	b5b0      	push	{r4, r5, r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3b18      	subs	r3, #24
 8007dfc:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	60fb      	str	r3, [r7, #12]
	metal_io_write8(io,
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3318      	adds	r3, #24
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff fe53 	bl	8007abc <metal_io_virt_to_offset>
 8007e16:	4601      	mov	r1, r0
 8007e18:	78fb      	ldrb	r3, [r7, #3]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	461c      	mov	r4, r3
 8007e1e:	4615      	mov	r5, r2
 8007e20:	2301      	movs	r3, #1
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	2305      	movs	r3, #5
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	4622      	mov	r2, r4
 8007e2a:	462b      	mov	r3, r5
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff fee1 	bl	8007bf4 <metal_io_write>
			metal_io_virt_to_offset(io, &vdev_rsc->status),
			status);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	6810      	ldr	r0, [r2, #0]
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6812      	ldr	r2, [r2, #0]
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4798      	blx	r3
}
 8007e42:	bf00      	nop
 8007e44:	3718      	adds	r7, #24
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bdb0      	pop	{r4, r5, r7, pc}

08007e4a <rproc_virtio_get_features>:
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b086      	sub	sp, #24
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3b18      	subs	r3, #24
 8007e56:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	330c      	adds	r3, #12
 8007e68:	4619      	mov	r1, r3
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7ff fe26 	bl	8007abc <metal_io_virt_to_offset>
 8007e70:	4601      	mov	r1, r0
 8007e72:	2304      	movs	r3, #4
 8007e74:	2205      	movs	r2, #5
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff fe3a 	bl	8007af0 <metal_io_read>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4613      	mov	r3, r2
 8007e82:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8007e84:	68bb      	ldr	r3, [r7, #8]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <rproc_virtio_set_features>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_set_features(struct virtio_device *vdev,
				      uint32_t features)
{
 8007e8e:	b5b0      	push	{r4, r5, r7, lr}
 8007e90:	b088      	sub	sp, #32
 8007e92:	af02      	add	r7, sp, #8
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3b18      	subs	r3, #24
 8007e9c:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we set features based on the role ? */
	metal_io_write32(io,
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	330c      	adds	r3, #12
 8007eae:	4619      	mov	r1, r3
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f7ff fe03 	bl	8007abc <metal_io_virt_to_offset>
 8007eb6:	4601      	mov	r1, r0
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	461c      	mov	r4, r3
 8007ebe:	4615      	mov	r5, r2
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	9301      	str	r3, [sp, #4]
 8007ec4:	2305      	movs	r3, #5
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4622      	mov	r2, r4
 8007eca:	462b      	mov	r3, r5
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7ff fe91 	bl	8007bf4 <metal_io_write>
			 metal_io_virt_to_offset(io, &vdev_rsc->dfeatures),
			 features);
	rpvdev->notify(rpvdev->priv, vdev->index);
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	6810      	ldr	r0, [r2, #0]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	4798      	blx	r3
}
 8007ee2:	bf00      	nop
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bdb0      	pop	{r4, r5, r7, pc}

08007eea <rproc_virtio_negotiate_features>:
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8007ef4:	2300      	movs	r3, #0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <rproc_virtio_write_config>:

#ifndef VIRTIO_SLAVE_ONLY
static void rproc_virtio_write_config(struct virtio_device *vdev,
				      uint32_t offset, void *src, int length)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)src;
	(void)length;
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <rproc_virtio_reset_device>:

static void rproc_virtio_reset_device(struct virtio_device *vdev)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b082      	sub	sp, #8
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
	if (vdev->role == VIRTIO_DEV_MASTER)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	699b      	ldr	r3, [r3, #24]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <rproc_virtio_reset_device+0x18>
		rproc_virtio_set_status(vdev,
 8007f46:	2140      	movs	r1, #64	; 0x40
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff ff4f 	bl	8007dec <rproc_virtio_set_status>
					VIRTIO_CONFIG_STATUS_NEEDS_RESET);
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
	...

08007f58 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08e      	sub	sp, #56	; 0x38
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	7e5b      	ldrb	r3, [r3, #25]
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8007f70:	2050      	movs	r0, #80	; 0x50
 8007f72:	f7ff feb5 	bl	8007ce0 <metal_allocate_memory>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e092      	b.n	80080a8 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8007f82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f84:	4613      	mov	r3, r2
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	4413      	add	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff fea7 	bl	8007ce0 <metal_allocate_memory>
 8007f92:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	f000 8081 	beq.w	800809e <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8007f9c:	2250      	movs	r2, #80	; 0x50
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007fa2:	f002 f8cd 	bl	800a140 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8007fa6:	2218      	movs	r2, #24
 8007fa8:	2100      	movs	r1, #0
 8007faa:	6a38      	ldr	r0, [r7, #32]
 8007fac:	f002 f8c8 	bl	800a140 <memset>
	vdev = &rpvdev->vdev;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	3318      	adds	r3, #24
 8007fb4:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fba:	e025      	b.n	8008008 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8007fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	3318      	adds	r3, #24
 8007fcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fce:	4413      	add	r3, r2
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d102      	bne.n	8007fe0 <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8007fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fe2:	f7ff fe94 	bl	8007d0e <virtqueue_allocate>
 8007fe6:	6178      	str	r0, [r7, #20]
		if (!vq)
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d031      	beq.n	8008052 <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8007fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	4413      	add	r3, r2
 8007ff6:	00db      	lsls	r3, r3, #3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8008002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008004:	3301      	adds	r3, #1
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
 8008008:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	429a      	cmp	r2, r3
 800800e:	d3d5      	bcc.n	8007fbc <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008014:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800801a:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	6a3a      	ldr	r2, [r7, #32]
 8008020:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008026:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800803e:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008044:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	4a19      	ldr	r2, [pc, #100]	; (80080b0 <rproc_virtio_create_vdev+0x158>)
 800804a:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 800804c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804e:	3318      	adds	r3, #24
 8008050:	e02a      	b.n	80080a8 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8008052:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8008054:	2300      	movs	r3, #0
 8008056:	637b      	str	r3, [r7, #52]	; 0x34
 8008058:	e019      	b.n	800808e <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 800805a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800805c:	4613      	mov	r3, r2
 800805e:	005b      	lsls	r3, r3, #1
 8008060:	4413      	add	r3, r2
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	461a      	mov	r2, r3
 8008066:	6a3b      	ldr	r3, [r7, #32]
 8008068:	4413      	add	r3, r2
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d00b      	beq.n	8008088 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8008070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008072:	4613      	mov	r3, r2
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	4413      	add	r3, r2
 8008078:	00db      	lsls	r3, r3, #3
 800807a:	461a      	mov	r2, r3
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	4413      	add	r3, r2
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fe38 	bl	8007cf8 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	3301      	adds	r3, #1
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
 800808e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	429a      	cmp	r2, r3
 8008094:	d3e1      	bcc.n	800805a <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8008096:	6a38      	ldr	r0, [r7, #32]
 8008098:	f7ff fe2e 	bl	8007cf8 <metal_free_memory>
 800809c:	e000      	b.n	80080a0 <rproc_virtio_create_vdev+0x148>
		goto err0;
 800809e:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 80080a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080a2:	f7ff fe29 	bl	8007cf8 <metal_free_memory>
	return NULL;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3738      	adds	r7, #56	; 0x38
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	0800b298 	.word	0x0800b298

080080b4 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c6:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d302      	bcc.n	80080d6 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 80080d0:	f06f 0301 	mvn.w	r3, #1
 80080d4:	e019      	b.n	800810a <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	4613      	mov	r3, r2
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	4413      	add	r3, r2
 80080e2:	00db      	lsls	r3, r3, #3
 80080e4:	440b      	add	r3, r1
 80080e6:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	6a3a      	ldr	r2, [r7, #32]
 80080ec:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008106:	609a      	str	r2, [r3, #8]

	return 0;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b086      	sub	sp, #24
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d102      	bne.n	800812c <rproc_virtio_notified+0x16>
		return -EINVAL;
 8008126:	f06f 0315 	mvn.w	r3, #21
 800812a:	e02c      	b.n	8008186 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d101      	bne.n	800813a <rproc_virtio_notified+0x24>
		return 0;
 8008136:	2300      	movs	r3, #0
 8008138:	e025      	b.n	8008186 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]
 8008144:	e01a      	b.n	800817c <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4613      	mov	r3, r2
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	4413      	add	r3, r2
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	440b      	add	r3, r1
 8008156:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	429a      	cmp	r2, r3
 8008160:	d003      	beq.n	800816a <rproc_virtio_notified+0x54>
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008168:	d105      	bne.n	8008176 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8008170:	68b8      	ldr	r0, [r7, #8]
 8008172:	f001 fbc8 	bl	8009906 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	3301      	adds	r3, #1
 800817a:	617b      	str	r3, [r7, #20]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	429a      	cmp	r2, r3
 8008182:	d3e0      	bcc.n	8008146 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b084      	sub	sp, #16
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00a      	beq.n	80081b4 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff fe02 	bl	8007da8 <rproc_virtio_get_status>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 80081b2:	e7f4      	b.n	800819e <rproc_virtio_wait_remote_ready+0x10>
		return;
 80081b4:	bf00      	nop
 80081b6:	e000      	b.n	80081ba <rproc_virtio_wait_remote_ready+0x2c>
			return;
 80081b8:	bf00      	nop
	}
}
 80081ba:	3710      	adds	r7, #16
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 80081c8:	bf00      	nop
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	4611      	mov	r1, r2
 80081d0:	f3bf 8f5b 	dmb	ish
 80081d4:	e8d3 2f4f 	ldrexb	r2, [r3]
 80081d8:	e8c3 1f40 	strexb	r0, r1, [r3]
 80081dc:	2800      	cmp	r0, #0
 80081de:	d1f9      	bne.n	80081d4 <__metal_mutex_acquire+0x14>
 80081e0:	f3bf 8f5b 	dmb	ish
 80081e4:	b2d3      	uxtb	r3, r2
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1ef      	bne.n	80081ca <__metal_mutex_acquire+0xa>
		;
	}
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f3bf 8f5b 	dmb	ish
 8008206:	2200      	movs	r2, #0
 8008208:	701a      	strb	r2, [r3, #0]
 800820a:	f3bf 8f5b 	dmb	ish
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff ffcc 	bl	80081c0 <__metal_mutex_acquire>
}
 8008228:	bf00      	nop
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f7ff ffdd 	bl	80081f8 <__metal_mutex_release>
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <metal_list_add_before>:
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	601a      	str	r2, [r3, #0]
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <metal_list_add_tail>:
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f7ff ffdd 	bl	8008246 <metal_list_add_before>
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <metal_list_del>:
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6852      	ldr	r2, [r2, #4]
 80082a4:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	605a      	str	r2, [r3, #4]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	601a      	str	r2, [r3, #0]
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	009a      	lsls	r2, r3, #2
 80082da:	6879      	ldr	r1, [r7, #4]
 80082dc:	440a      	add	r2, r1
 80082de:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	f002 021f 	and.w	r2, r2, #31
 80082e6:	2001      	movs	r0, #1
 80082e8:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	4403      	add	r3, r0
 80082f2:	430a      	orrs	r2, r1
 80082f4:	601a      	str	r2, [r3, #0]
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	f003 031f 	and.w	r3, r3, #31
 800831e:	2101      	movs	r1, #1
 8008320:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8008324:	4013      	ands	r3, r2
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	095b      	lsrs	r3, r3, #5
 8008340:	009a      	lsls	r2, r3, #2
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	440a      	add	r2, r1
 8008346:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	f002 021f 	and.w	r2, r2, #31
 800834e:	2001      	movs	r0, #1
 8008350:	fa00 f202 	lsl.w	r2, r0, r2
 8008354:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	4403      	add	r3, r0
 800835c:	400a      	ands	r2, r1
 800835e:	601a      	str	r2, [r3, #0]
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff ffc2 	bl	8008302 <metal_bitmap_is_bit_set>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	bf0c      	ite	eq
 8008384:	2301      	moveq	r3, #1
 8008386:	2300      	movne	r3, #0
 8008388:	b2db      	uxtb	r3, r3
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b086      	sub	sp, #24
 8008396:	af00      	add	r7, sp, #0
 8008398:	60f8      	str	r0, [r7, #12]
 800839a:	60b9      	str	r1, [r7, #8]
 800839c:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	617b      	str	r3, [r7, #20]
 80083a2:	e002      	b.n	80083aa <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	3301      	adds	r3, #1
 80083a8:	617b      	str	r3, [r7, #20]
	for (bit = start;
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d207      	bcs.n	80083c2 <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	4619      	mov	r1, r3
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f7ff ffd8 	bl	800836c <metal_bitmap_is_bit_clear>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0f0      	beq.n	80083a4 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 80083c2:	697b      	ldr	r3, [r7, #20]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <rpmsg_init_ept>:
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2220      	movs	r2, #32
 80083de:	68b9      	ldr	r1, [r7, #8]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f002 fb54 	bl	800aa8e <strncpy>
	ept->addr = src;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	69fa      	ldr	r2, [r7, #28]
 80083fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80083fe:	bf00      	nop
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
 800840e:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 8008410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008414:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	2100      	movs	r1, #0
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7ff ffb8 	bl	8008392 <metal_bitmap_next_clear_bit>
 8008422:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	429a      	cmp	r2, r3
 800842a:	d206      	bcs.n	800843a <rpmsg_get_address+0x34>
		addr = nextbit;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4619      	mov	r1, r3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f7ff ff48 	bl	80082ca <metal_bitmap_set_bit>
	}

	return addr;
 800843a:	68fb      	ldr	r3, [r7, #12]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	da03      	bge.n	8008460 <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 8008458:	6879      	ldr	r1, [r7, #4]
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f7ff ff69 	bl	8008332 <metal_bitmap_clear_bit>
}
 8008460:	bf00      	nop
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
	if (addr < size)
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	429a      	cmp	r2, r3
 800847a:	da05      	bge.n	8008488 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	f7ff ff3f 	bl	8008302 <metal_bitmap_is_bit_set>
 8008484:	4603      	mov	r3, r0
 8008486:	e000      	b.n	800848a <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8008488:	4b02      	ldr	r3, [pc, #8]	; (8008494 <rpmsg_is_address_set+0x2c>)
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	fffff82d 	.word	0xfffff82d

08008498 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	da05      	bge.n	80084b8 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 80084ac:	6879      	ldr	r1, [r7, #4]
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f7ff ff0b 	bl	80082ca <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 80084b4:	2300      	movs	r3, #0
 80084b6:	e000      	b.n	80084ba <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <rpmsg_set_address+0x2c>)
	}
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3710      	adds	r7, #16
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	fffff82d 	.word	0xfffff82d

080084c8 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 80084c8:	b590      	push	{r4, r7, lr}
 80084ca:	b089      	sub	sp, #36	; 0x24
 80084cc:	af02      	add	r7, sp, #8
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <rpmsg_send_offchannel_raw+0x2a>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d006      	beq.n	80084f2 <rpmsg_send_offchannel_raw+0x2a>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d003      	beq.n	80084f2 <rpmsg_send_offchannel_raw+0x2a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084f0:	d101      	bne.n	80084f6 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 80084f2:	4b0d      	ldr	r3, [pc, #52]	; (8008528 <rpmsg_send_offchannel_raw+0x60>)
 80084f4:	e014      	b.n	8008520 <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00c      	beq.n	800851e <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8008508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800850a:	9301      	str	r3, [sp, #4]
 800850c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	68b9      	ldr	r1, [r7, #8]
 8008516:	6978      	ldr	r0, [r7, #20]
 8008518:	47a0      	blx	r4
 800851a:	4603      	mov	r3, r0
 800851c:	e000      	b.n	8008520 <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 800851e:	4b02      	ldr	r3, [pc, #8]	; (8008528 <rpmsg_send_offchannel_raw+0x60>)
}
 8008520:	4618      	mov	r0, r3
 8008522:	371c      	adds	r7, #28
 8008524:	46bd      	mov	sp, r7
 8008526:	bd90      	pop	{r4, r7, pc}
 8008528:	fffff82d 	.word	0xfffff82d

0800852c <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b090      	sub	sp, #64	; 0x40
 8008530:	af02      	add	r7, sp, #8
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853e:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 8008540:	6879      	ldr	r1, [r7, #4]
 8008542:	f107 030c 	add.w	r3, r7, #12
 8008546:	2220      	movs	r2, #32
 8008548:	4618      	mov	r0, r3
 800854a:	f002 faa0 	bl	800aa8e <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008552:	f107 030c 	add.w	r3, r7, #12
 8008556:	2201      	movs	r2, #1
 8008558:	9201      	str	r2, [sp, #4]
 800855a:	2228      	movs	r2, #40	; 0x28
 800855c:	9200      	str	r2, [sp, #0]
 800855e:	2235      	movs	r2, #53	; 0x35
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff ffb1 	bl	80084c8 <rpmsg_send_offchannel_raw>
 8008566:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 8008568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800856a:	2b00      	cmp	r3, #0
 800856c:	da01      	bge.n	8008572 <rpmsg_send_ns_message+0x46>
		return ret;
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	e000      	b.n	8008574 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3738      	adds	r7, #56	; 0x38
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	61fb      	str	r3, [r7, #28]
 8008590:	e04b      	b.n	800862a <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	3b34      	subs	r3, #52	; 0x34
 800859a:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085a2:	d006      	beq.n	80085b2 <rpmsg_get_endpoint+0x36>
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	687a      	ldr	r2, [r7, #4]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d101      	bne.n	80085b2 <rpmsg_get_endpoint+0x36>
			return ept;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	e040      	b.n	8008634 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d106      	bne.n	80085ca <rpmsg_get_endpoint+0x4e>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	683a      	ldr	r2, [r7, #0]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d101      	bne.n	80085ca <rpmsg_get_endpoint+0x4e>
			return ept;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	e034      	b.n	8008634 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2220      	movs	r2, #32
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f002 fa45 	bl	800aa66 <strncmp>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bf0c      	ite	eq
 80085e2:	2301      	moveq	r3, #1
 80085e4:	2300      	movne	r3, #0
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d018      	beq.n	8008622 <rpmsg_get_endpoint+0xa6>
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d015      	beq.n	8008622 <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085fc:	d006      	beq.n	800860c <rpmsg_get_endpoint+0x90>
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	429a      	cmp	r2, r3
 8008606:	d101      	bne.n	800860c <rpmsg_get_endpoint+0x90>
			return ept;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	e013      	b.n	8008634 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008612:	d107      	bne.n	8008624 <rpmsg_get_endpoint+0xa8>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800861c:	d102      	bne.n	8008624 <rpmsg_get_endpoint+0xa8>
			return ept;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	e008      	b.n	8008634 <rpmsg_get_endpoint+0xb8>
			continue;
 8008622:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	61fb      	str	r3, [r7, #28]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	429a      	cmp	r2, r3
 8008630:	d1af      	bne.n	8008592 <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3720      	adds	r7, #32
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d016      	beq.n	8008678 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008658:	d008      	beq.n	800866c <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8008664:	461a      	mov	r2, r3
 8008666:	2180      	movs	r1, #128	; 0x80
 8008668:	f7ff feec 	bl	8008444 <rpmsg_release_address>
	metal_list_del(&ept->node);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3334      	adds	r3, #52	; 0x34
 8008670:	4618      	mov	r0, r3
 8008672:	f7ff fe0f 	bl	8008294 <metal_list_del>
 8008676:	e000      	b.n	800867a <rpmsg_unregister_endpoint+0x3e>
		return;
 8008678:	bf00      	nop
}
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	3334      	adds	r3, #52	; 0x34
 8008696:	4619      	mov	r1, r3
 8008698:	4610      	mov	r0, r2
 800869a:	f7ff fdee 	bl	800827a <metal_list_add_tail>
	return RPMSG_SUCCESS;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	613b      	str	r3, [r7, #16]

	if (!ept)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 80086c0:	4b37      	ldr	r3, [pc, #220]	; (80087a0 <rpmsg_create_ept+0xf8>)
 80086c2:	e068      	b.n	8008796 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3358      	adds	r3, #88	; 0x58
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7ff fda6 	bl	800821a <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086d4:	d018      	beq.n	8008708 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	3348      	adds	r3, #72	; 0x48
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	2180      	movs	r1, #128	; 0x80
 80086de:	4618      	mov	r0, r3
 80086e0:	f7ff fec2 	bl	8008468 <rpmsg_is_address_set>
 80086e4:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d107      	bne.n	80086fc <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	3348      	adds	r3, #72	; 0x48
 80086f0:	683a      	ldr	r2, [r7, #0]
 80086f2:	2180      	movs	r1, #128	; 0x80
 80086f4:	4618      	mov	r0, r3
 80086f6:	f7ff fecf 	bl	8008498 <rpmsg_set_address>
 80086fa:	e00c      	b.n	8008716 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd40      	ble.n	8008784 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8008706:	e040      	b.n	800878a <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	3348      	adds	r3, #72	; 0x48
 800870c:	2180      	movs	r1, #128	; 0x80
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff fe79 	bl	8008406 <rpmsg_get_address>
 8008714:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8008716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008718:	9301      	str	r3, [sp, #4]
 800871a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871c:	9300      	str	r3, [sp, #0]
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	693a      	ldr	r2, [r7, #16]
 8008722:	6879      	ldr	r1, [r7, #4]
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7ff fe51 	bl	80083cc <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	68b8      	ldr	r0, [r7, #8]
 800872e:	f7ff ffa7 	bl	8008680 <rpmsg_register_endpoint>
 8008732:	6178      	str	r0, [r7, #20]
	if (status < 0)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2b00      	cmp	r3, #0
 8008738:	da06      	bge.n	8008748 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	3348      	adds	r3, #72	; 0x48
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	2180      	movs	r1, #128	; 0x80
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fe7e 	bl	8008444 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d11c      	bne.n	8008788 <rpmsg_create_ept+0xe0>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008756:	d117      	bne.n	8008788 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	3358      	adds	r3, #88	; 0x58
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff fd67 	bl	8008230 <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 8008762:	2100      	movs	r1, #0
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f7ff fee1 	bl	800852c <rpmsg_send_ns_message>
 800876a:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	3358      	adds	r3, #88	; 0x58
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff fd52 	bl	800821a <metal_mutex_acquire>
		if (status)
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f7ff ff5d 	bl	800863c <rpmsg_unregister_endpoint>
 8008782:	e002      	b.n	800878a <rpmsg_create_ept+0xe2>
			goto ret_status;
 8008784:	bf00      	nop
 8008786:	e000      	b.n	800878a <rpmsg_create_ept+0xe2>
	}

ret_status:
 8008788:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	3358      	adds	r3, #88	; 0x58
 800878e:	4618      	mov	r0, r3
 8008790:	f7ff fd4e 	bl	8008230 <metal_mutex_release>
	return status;
 8008794:	697b      	ldr	r3, [r7, #20]
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	fffff82d 	.word	0xfffff82d

080087a4 <rpmsg_destroy_ept>:
 *
 * @param ept - pointer to endpoint to destroy
 *
 */
void rpmsg_destroy_ept(struct rpmsg_endpoint *ept)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d018      	beq.n	80087e4 <rpmsg_destroy_ept+0x40>
		return;

	rdev = ept->rdev;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	60fb      	str	r3, [r7, #12]
	if (ept->addr != RPMSG_NS_EPT_ADDR)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	2b35      	cmp	r3, #53	; 0x35
 80087be:	d003      	beq.n	80087c8 <rpmsg_destroy_ept+0x24>
		(void)rpmsg_send_ns_message(ept, RPMSG_NS_DESTROY);
 80087c0:	2101      	movs	r1, #1
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff feb2 	bl	800852c <rpmsg_send_ns_message>
	metal_mutex_acquire(&rdev->lock);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	3358      	adds	r3, #88	; 0x58
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fd24 	bl	800821a <metal_mutex_acquire>
	rpmsg_unregister_endpoint(ept);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f7ff ff32 	bl	800863c <rpmsg_unregister_endpoint>
	metal_mutex_release(&rdev->lock);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3358      	adds	r3, #88	; 0x58
 80087dc:	4618      	mov	r0, r3
 80087de:	f7ff fd27 	bl	8008230 <metal_mutex_release>
 80087e2:	e000      	b.n	80087e6 <rpmsg_destroy_ept+0x42>
		return;
 80087e4:	bf00      	nop
}
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <__metal_cache_invalidate>:
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 fd0e 	bl	800921a <metal_machine_cache_invalidate>
}
 80087fe:	bf00      	nop
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <metal_cache_invalidate>:
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff ffea 	bl	80087ec <__metal_cache_invalidate>
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 8008836:	b580      	push	{r7, lr}
 8008838:	b082      	sub	sp, #8
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff ffee 	bl	8008820 <__metal_sleep_usec>
 8008844:	4603      	mov	r3, r0
}
 8008846:	4618      	mov	r0, r3
 8008848:	3708      	adds	r7, #8
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <metal_list_init>:
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	605a      	str	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	601a      	str	r2, [r3, #0]
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <metal_list_is_empty>:
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	return list->next == list;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	429a      	cmp	r2, r3
 8008880:	bf0c      	ite	eq
 8008882:	2301      	moveq	r3, #1
 8008884:	2300      	movne	r3, #0
 8008886:	b2db      	uxtb	r3, r3
}
 8008888:	4618      	mov	r0, r3
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <metal_io_virt_to_offset>:
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d201      	bcs.n	80088b6 <metal_io_virt_to_offset+0x22>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	e001      	b.n	80088ba <metal_io_virt_to_offset+0x26>
 80088b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <__metal_mutex_init>:
{
 80088c6:	b480      	push	{r7}
 80088c8:	b085      	sub	sp, #20
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	60fb      	str	r3, [r7, #12]
 80088d2:	2300      	movs	r3, #0
 80088d4:	60bb      	str	r3, [r7, #8]
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	461a      	mov	r2, r3
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f3bf 8f5b 	dmb	ish
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	f3bf 8f5b 	dmb	ish
}
 80088e6:	bf00      	nop
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <__metal_mutex_deinit>:
{
 80088f2:	b480      	push	{r7}
 80088f4:	b083      	sub	sp, #12
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
}
 80088fa:	bf00      	nop
 80088fc:	370c      	adds	r7, #12
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr

08008906 <__metal_mutex_acquire>:
{
 8008906:	b480      	push	{r7}
 8008908:	b083      	sub	sp, #12
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 800890e:	bf00      	nop
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	4611      	mov	r1, r2
 8008916:	f3bf 8f5b 	dmb	ish
 800891a:	e8d3 2f4f 	ldrexb	r2, [r3]
 800891e:	e8c3 1f40 	strexb	r0, r1, [r3]
 8008922:	2800      	cmp	r0, #0
 8008924:	d1f9      	bne.n	800891a <__metal_mutex_acquire+0x14>
 8008926:	f3bf 8f5b 	dmb	ish
 800892a:	b2d3      	uxtb	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1ef      	bne.n	8008910 <__metal_mutex_acquire+0xa>
}
 8008930:	bf00      	nop
 8008932:	bf00      	nop
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <__metal_mutex_release>:
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f3bf 8f5b 	dmb	ish
 800894c:	2200      	movs	r2, #0
 800894e:	701a      	strb	r2, [r3, #0]
 8008950:	f3bf 8f5b 	dmb	ish
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <metal_mutex_init>:
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ffac 	bl	80088c6 <__metal_mutex_init>
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <metal_mutex_deinit>:
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b082      	sub	sp, #8
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
	__metal_mutex_deinit(mutex);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7ff ffb7 	bl	80088f2 <__metal_mutex_deinit>
}
 8008984:	bf00      	nop
 8008986:	3708      	adds	r7, #8
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <metal_mutex_acquire>:
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f7ff ffb6 	bl	8008906 <__metal_mutex_acquire>
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <metal_mutex_release>:
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff ffc7 	bl	800893e <__metal_mutex_release>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <rpmsg_init_ept>:
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
 80089c4:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2220      	movs	r2, #32
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f002 f85e 	bl	800aa8e <strncpy>
	ept->addr = src;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089fe:	699b      	ldr	r3, [r3, #24]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1c:	6a1b      	ldr	r3, [r3, #32]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008a24:	78f9      	ldrb	r1, [r7, #3]
 8008a26:	4610      	mov	r0, r2
 8008a28:	4798      	blx	r3
}
 8008a2a:	bf00      	nop
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b082      	sub	sp, #8
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008a46:	4610      	mov	r0, r2
 8008a48:	4798      	blx	r3
 8008a4a:	4603      	mov	r3, r0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3708      	adds	r7, #8
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a60:	6a1b      	ldr	r3, [r3, #32]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008a68:	4610      	mov	r0, r2
 8008a6a:	4798      	blx	r3
 8008a6c:	4603      	mov	r3, r0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af02      	add	r7, sp, #8
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	607a      	str	r2, [r7, #4]
 8008a82:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	9300      	str	r3, [sp, #0]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	f000 fc17 	bl	80092c4 <virtio_create_virtqueues>
 8008a96:	4603      	mov	r3, r0
					callbacks);
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8008aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008aae:	683a      	ldr	r2, [r7, #0]
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fd62 	bl	800857c <rpmsg_get_endpoint>
 8008ab8:	4603      	mov	r3, r0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <rpmsg_virtio_shm_pool_get_buffer>:

#ifndef VIRTIO_SLAVE_ONLY
metal_weak void *
rpmsg_virtio_shm_pool_get_buffer(struct rpmsg_virtio_shm_pool *shpool,
				 size_t size)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
	void *buffer;

	if (shpool->avail < size)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	683a      	ldr	r2, [r7, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d901      	bls.n	8008ada <rpmsg_virtio_shm_pool_get_buffer+0x18>
		return NULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e00f      	b.n	8008afa <rpmsg_virtio_shm_pool_get_buffer+0x38>
	buffer =  (void *)((char *)shpool->base + shpool->size - shpool->avail);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6899      	ldr	r1, [r3, #8]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	1acb      	subs	r3, r1, r3
 8008ae8:	4413      	add	r3, r2
 8008aea:	60fb      	str	r3, [r7, #12]
	shpool->avail -= size;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	1ad2      	subs	r2, r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	605a      	str	r2, [r3, #4]

	return buffer;
 8008af8:	68fb      	ldr	r3, [r7, #12]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <rpmsg_virtio_init_shm_pool>:
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b085      	sub	sp, #20
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	60f8      	str	r0, [r7, #12]
 8008b0e:	60b9      	str	r1, [r7, #8]
 8008b10:	607a      	str	r2, [r7, #4]
	if (!shpool)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01d      	beq.n	8008b54 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f003 0303 	and.w	r3, r3, #3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <rpmsg_virtio_init_shm_pool+0x2c>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f023 0303 	bic.w	r3, r3, #3
 8008b2e:	3304      	adds	r3, #4
 8008b30:	e000      	b.n	8008b34 <rpmsg_virtio_init_shm_pool+0x2e>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68fa      	ldr	r2, [r7, #12]
 8008b36:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f003 0303 	and.w	r3, r3, #3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d004      	beq.n	8008b4c <rpmsg_virtio_init_shm_pool+0x46>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	3304      	adds	r3, #4
 8008b4a:	e000      	b.n	8008b4e <rpmsg_virtio_init_shm_pool+0x48>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	6053      	str	r3, [r2, #4]
 8008b52:	e000      	b.n	8008b56 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 8008b54:	bf00      	nop
}
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	; 0x28
 8008b64:	af02      	add	r7, sp, #8
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff ff3f 	bl	80089f2 <rpmsg_virtio_get_role>
 8008b74:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10d      	bne.n	8008b98 <rpmsg_virtio_return_buffer+0x38>
		struct virtqueue_buf vqbuf;

		(void)idx;
		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	61bb      	str	r3, [r7, #24]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008b88:	f107 0114 	add.w	r1, r7, #20
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	2301      	movs	r3, #1
 8008b92:	2200      	movs	r2, #0
 8008b94:	f000 fce5 	bl	8009562 <virtqueue_add_buffer>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 8008b98:	bf00      	nop
 8008b9a:	3720      	adds	r7, #32
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08a      	sub	sp, #40	; 0x28
 8008ba4:	af02      	add	r7, sp, #8
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff ff1f 	bl	80089f2 <rpmsg_virtio_get_role>
 8008bb4:	61f8      	str	r0, [r7, #28]
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10f      	bne.n	8008bdc <rpmsg_virtio_enqueue_buffer+0x3c>
		struct virtqueue_buf vqbuf;
		(void)idx;

		/* Initialize buffer node */
		vqbuf.buf = buffer;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	617b      	str	r3, [r7, #20]
		vqbuf.len = len;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	61bb      	str	r3, [r7, #24]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008bc8:	f107 0114 	add.w	r1, r7, #20
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	9300      	str	r3, [sp, #0]
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f000 fcc5 	bl	8009562 <virtqueue_add_buffer>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	e000      	b.n	8008bde <rpmsg_virtio_enqueue_buffer+0x3e>
	if (role == RPMSG_REMOTE) {
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3720      	adds	r7, #32
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b086      	sub	sp, #24
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	60f8      	str	r0, [r7, #12]
 8008bee:	60b9      	str	r1, [r7, #8]
 8008bf0:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f7ff fefd 	bl	80089f2 <rpmsg_virtio_get_role>
 8008bf8:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d116      	bne.n	8008c32 <rpmsg_virtio_get_tx_buffer+0x4c>
		data = virtqueue_get_buffer(rvdev->svq, (uint32_t *)len, idx);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	68b9      	ldr	r1, [r7, #8]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fcec 	bl	80095ea <virtqueue_get_buffer>
 8008c12:	6178      	str	r0, [r7, #20]
		if (data == NULL) {
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10b      	bne.n	8008c32 <rpmsg_virtio_get_tx_buffer+0x4c>
			data = rpmsg_virtio_shm_pool_get_buffer(rvdev->shpool,
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff ff4d 	bl	8008ac2 <rpmsg_virtio_shm_pool_get_buffer>
 8008c28:	6178      	str	r0, [r7, #20]
							RPMSG_BUFFER_SIZE);
			*len = RPMSG_BUFFER_SIZE;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c30:	601a      	str	r2, [r3, #0]
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 8008c32:	697b      	ldr	r3, [r7, #20]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7ff fed2 	bl	80089f2 <rpmsg_virtio_get_role>
 8008c4e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d107      	bne.n	8008c6a <rpmsg_virtio_get_rx_buffer+0x2e>
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fcc1 	bl	80095ea <virtqueue_get_buffer>
 8008c68:	6178      	str	r0, [r7, #20]
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d005      	beq.n	8008c7c <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4619      	mov	r1, r3
 8008c76:	6978      	ldr	r0, [r7, #20]
 8008c78:	f7ff fdc5 	bl	8008806 <metal_cache_invalidate>
	}

	return data;
 8008c7c:	697b      	ldr	r3, [r7, #20]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3718      	adds	r7, #24
 8008c82:	46bd      	mov	sp, r7
 8008c84:	bd80      	pop	{r7, pc}

08008c86 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b084      	sub	sp, #16
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f7ff feaf 	bl	80089f2 <rpmsg_virtio_get_role>
 8008c94:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	60fb      	str	r3, [r7, #12]

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <_rpmsg_virtio_get_buffer_size+0x20>
		/*
		 * If device role is Remote then buffers are provided by us
		 * (RPMSG Master), so just provide the macro.
		 */
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
 8008ca0:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8008ca4:	60fb      	str	r3, [r7, #12]
		    (int)virtqueue_get_desc_size(rvdev->svq) -
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b090      	sub	sp, #64	; 0x40
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	60f8      	str	r0, [r7, #12]
 8008cb8:	60b9      	str	r1, [r7, #8]
 8008cba:	607a      	str	r2, [r7, #4]
 8008cbc:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8008cca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008ccc:	f7ff feb1 	bl	8008a32 <rpmsg_virtio_get_status>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd6:	f003 0304 	and.w	r3, r3, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d101      	bne.n	8008ce2 <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 8008cde:	4b45      	ldr	r3, [pc, #276]	; (8008df4 <rpmsg_virtio_send_offchannel_raw+0x144>)
 8008ce0:	e083      	b.n	8008dea <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 8008ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8008ce8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8008cec:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cee:	e001      	b.n	8008cf4 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	3358      	adds	r3, #88	; 0x58
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff fe47 	bl	800898c <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 8008cfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d00:	f7ff ffc1 	bl	8008c86 <_rpmsg_virtio_get_buffer_size>
 8008d04:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 8008d06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	dc08      	bgt.n	8008d20 <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 8008d0e:	f107 0216 	add.w	r2, r7, #22
 8008d12:	f107 0310 	add.w	r3, r7, #16
 8008d16:	4619      	mov	r1, r3
 8008d18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008d1a:	f7ff ff64 	bl	8008be6 <rpmsg_virtio_get_tx_buffer>
 8008d1e:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3358      	adds	r3, #88	; 0x58
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7ff fe3c 	bl	80089a2 <metal_mutex_release>
		if (buffer || !tick_count)
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10e      	bne.n	8008d4e <rpmsg_virtio_send_offchannel_raw+0x9e>
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00b      	beq.n	8008d4e <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 8008d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d001      	beq.n	8008d40 <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 8008d3c:	4b2e      	ldr	r3, [pc, #184]	; (8008df8 <rpmsg_virtio_send_offchannel_raw+0x148>)
 8008d3e:	e054      	b.n	8008dea <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 8008d40:	200a      	movs	r0, #10
 8008d42:	f7ff fd78 	bl	8008836 <metal_sleep_usec>
		tick_count--;
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	3b01      	subs	r3, #1
 8008d4a:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 8008d4c:	e7d2      	b.n	8008cf4 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 8008d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d101      	bne.n	8008d58 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8008d54:	4b29      	ldr	r3, [pc, #164]	; (8008dfc <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8008d56:	e048      	b.n	8008dea <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8008d60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8008d66:	2300      	movs	r3, #0
 8008d68:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8008d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8008d70:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d74:	f7ff fd8e 	bl	8008894 <metal_io_virt_to_offset>
 8008d78:	4601      	mov	r1, r0
 8008d7a:	f107 0218 	add.w	r2, r7, #24
 8008d7e:	2310      	movs	r3, #16
 8008d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d82:	f7fe fd84 	bl	800788e <metal_io_block_write>
 8008d86:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	2b10      	cmp	r3, #16
 8008d8c:	d000      	beq.n	8008d90 <rpmsg_virtio_send_offchannel_raw+0xe0>
 8008d8e:	e7fe      	b.n	8008d8e <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8008d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d92:	3310      	adds	r3, #16
 8008d94:	4619      	mov	r1, r3
 8008d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d98:	f7ff fd7c 	bl	8008894 <metal_io_virt_to_offset>
 8008d9c:	4601      	mov	r1, r0
 8008d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da0:	683a      	ldr	r2, [r7, #0]
 8008da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008da4:	f7fe fd73 	bl	800788e <metal_io_block_write>
 8008da8:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8008daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d000      	beq.n	8008db4 <rpmsg_virtio_send_offchannel_raw+0x104>
 8008db2:	e7fe      	b.n	8008db2 <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	3358      	adds	r3, #88	; 0x58
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff fde7 	bl	800898c <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	8afb      	ldrh	r3, [r7, #22]
 8008dc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008dc6:	f7ff feeb 	bl	8008ba0 <rpmsg_virtio_enqueue_buffer>
 8008dca:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d000      	beq.n	8008dd4 <rpmsg_virtio_send_offchannel_raw+0x124>
 8008dd2:	e7fe      	b.n	8008dd2 <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8008dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 fc80 	bl	80096de <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	3358      	adds	r3, #88	; 0x58
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fddd 	bl	80089a2 <metal_mutex_release>

	return size;
 8008de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3740      	adds	r7, #64	; 0x40
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	fffff82c 	.word	0xfffff82c
 8008df8:	fffff82b 	.word	0xfffff82b
 8008dfc:	fffff82e 	.word	0xfffff82e

08008e00 <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b08d      	sub	sp, #52	; 0x34
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	3358      	adds	r3, #88	; 0x58
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff fdab 	bl	800898c <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8008e36:	f107 020a 	add.w	r2, r7, #10
 8008e3a:	f107 030c 	add.w	r3, r7, #12
 8008e3e:	4619      	mov	r1, r3
 8008e40:	69f8      	ldr	r0, [r7, #28]
 8008e42:	f7ff fefb 	bl	8008c3c <rpmsg_virtio_get_rx_buffer>
 8008e46:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	3358      	adds	r3, #88	; 0x58
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff fda8 	bl	80089a2 <metal_mutex_release>

	while (rp_hdr) {
 8008e52:	e04c      	b.n	8008eee <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8008e54:	69bb      	ldr	r3, [r7, #24]
 8008e56:	3358      	adds	r3, #88	; 0x58
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7ff fd97 	bl	800898c <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	4619      	mov	r1, r3
 8008e64:	69b8      	ldr	r0, [r7, #24]
 8008e66:	f7ff fe1b 	bl	8008aa0 <rpmsg_get_ept_from_addr>
 8008e6a:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	3358      	adds	r3, #88	; 0x58
 8008e70:	4618      	mov	r0, r3
 8008e72:	f7ff fd96 	bl	80089a2 <metal_mutex_release>

		if (!ept)
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d03c      	beq.n	8008ef6 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e84:	d103      	bne.n	8008e8e <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	899b      	ldrh	r3, [r3, #12]
 8008e9c:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	4602      	mov	r2, r0
 8008eae:	6978      	ldr	r0, [r7, #20]
 8008eb0:	47a0      	blx	r4
 8008eb2:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d000      	beq.n	8008ebc <rpmsg_virtio_rx_callback+0xa8>
 8008eba:	e7fe      	b.n	8008eba <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	3358      	adds	r3, #88	; 0x58
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff fd63 	bl	800898c <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	897b      	ldrh	r3, [r7, #10]
 8008eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ecc:	69f8      	ldr	r0, [r7, #28]
 8008ece:	f7ff fe47 	bl	8008b60 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8008ed2:	f107 020a 	add.w	r2, r7, #10
 8008ed6:	f107 030c 	add.w	r3, r7, #12
 8008eda:	4619      	mov	r1, r3
 8008edc:	69f8      	ldr	r0, [r7, #28]
 8008ede:	f7ff fead 	bl	8008c3c <rpmsg_virtio_get_rx_buffer>
 8008ee2:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	3358      	adds	r3, #88	; 0x58
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fd5a 	bl	80089a2 <metal_mutex_release>
	while (rp_hdr) {
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1af      	bne.n	8008e54 <rpmsg_virtio_rx_callback+0x40>
 8008ef4:	e000      	b.n	8008ef8 <rpmsg_virtio_rx_callback+0xe4>
			return;
 8008ef6:	bf00      	nop
	}
}
 8008ef8:	372c      	adds	r7, #44	; 0x2c
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd90      	pop	{r4, r7, pc}

08008efe <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b092      	sub	sp, #72	; 0x48
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	60b9      	str	r1, [r7, #8]
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	6a1b      	ldr	r3, [r3, #32]
 8008f10:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8008f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f14:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8008f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b28      	cmp	r3, #40	; 0x28
 8008f24:	d001      	beq.n	8008f2a <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8008f26:	2300      	movs	r3, #0
 8008f28:	e057      	b.n	8008fda <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f30:	f7ff fcb0 	bl	8008894 <metal_io_virt_to_offset>
 8008f34:	4601      	mov	r1, r0
 8008f36:	f107 0210 	add.w	r2, r7, #16
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f3e:	f7fe fc2f 	bl	80077a0 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8008f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f4a:	3358      	adds	r3, #88	; 0x58
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff fd1d 	bl	800898c <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8008f52:	f107 0110 	add.w	r1, r7, #16
 8008f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008f5e:	f7ff fb0d 	bl	800857c <rpmsg_get_endpoint>
 8008f62:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f68:	f003 0301 	and.w	r3, r3, #1
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d017      	beq.n	8008fa0 <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f7c:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8008f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f80:	3358      	adds	r3, #88	; 0x58
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7ff fd0d 	bl	80089a2 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d024      	beq.n	8008fd8 <rpmsg_virtio_ns_callback+0xda>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d020      	beq.n	8008fd8 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	4798      	blx	r3
 8008f9e:	e01b      	b.n	8008fd8 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d110      	bne.n	8008fc8 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8008fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fa8:	3358      	adds	r3, #88	; 0x58
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7ff fcf9 	bl	80089a2 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8008fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00f      	beq.n	8008fd8 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8008fb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fbc:	f107 0110 	add.w	r1, r7, #16
 8008fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008fc4:	4798      	blx	r3
 8008fc6:	e007      	b.n	8008fd8 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fcc:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8008fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd0:	3358      	adds	r3, #88	; 0x58
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff fce5 	bl	80089a2 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3748      	adds	r7, #72	; 0x48
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b094      	sub	sp, #80	; 0x50
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
 8008ff0:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	63bb      	str	r3, [r7, #56]	; 0x38
	memset(rdev, 0, sizeof(*rdev));
 8008ff6:	2264      	movs	r2, #100	; 0x64
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ffc:	f001 f8a0 	bl	800a140 <memset>
	metal_mutex_init(&rdev->lock);
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	3358      	adds	r3, #88	; 0x58
 8009004:	4618      	mov	r0, r3
 8009006:	f7ff fcab 	bl	8008960 <metal_mutex_init>
	rvdev->vdev = vdev;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	68ba      	ldr	r2, [r7, #8]
 800900e:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 800901c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901e:	4a5d      	ldr	r2, [pc, #372]	; (8009194 <rpmsg_init_vdev+0x1b0>)
 8009020:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff fce5 	bl	80089f2 <rpmsg_virtio_get_role>
 8009028:	6378      	str	r0, [r7, #52]	; 0x34

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 800902a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800902c:	2b00      	cmp	r3, #0
 800902e:	d120      	bne.n	8009072 <rpmsg_init_vdev+0x8e>
		/*
		 * Since device is RPMSG Remote so we need to manage the
		 * shared buffers. Create shared memory pool to handle buffers.
		 */
		if (!shpool)
 8009030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <rpmsg_init_vdev+0x56>
			return RPMSG_ERR_PARAM;
 8009036:	4b58      	ldr	r3, [pc, #352]	; (8009198 <rpmsg_init_vdev+0x1b4>)
 8009038:	e0a7      	b.n	800918a <rpmsg_init_vdev+0x1a6>
		if (!shpool->size)
 800903a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d101      	bne.n	8009046 <rpmsg_init_vdev+0x62>
			return RPMSG_ERR_NO_BUFF;
 8009042:	4b56      	ldr	r3, [pc, #344]	; (800919c <rpmsg_init_vdev+0x1b8>)
 8009044:	e0a1      	b.n	800918a <rpmsg_init_vdev+0x1a6>
		rvdev->shpool = shpool;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800904a:	675a      	str	r2, [r3, #116]	; 0x74

		vq_names[0] = "rx_vq";
 800904c:	4b54      	ldr	r3, [pc, #336]	; (80091a0 <rpmsg_init_vdev+0x1bc>)
 800904e:	623b      	str	r3, [r7, #32]
		vq_names[1] = "tx_vq";
 8009050:	4b54      	ldr	r3, [pc, #336]	; (80091a4 <rpmsg_init_vdev+0x1c0>)
 8009052:	627b      	str	r3, [r7, #36]	; 0x24
		callback[0] = rpmsg_virtio_rx_callback;
 8009054:	4b54      	ldr	r3, [pc, #336]	; (80091a8 <rpmsg_init_vdev+0x1c4>)
 8009056:	61bb      	str	r3, [r7, #24]
		callback[1] = rpmsg_virtio_tx_callback;
 8009058:	4b54      	ldr	r3, [pc, #336]	; (80091ac <rpmsg_init_vdev+0x1c8>)
 800905a:	61fb      	str	r3, [r7, #28]
		rvdev->rvq  = vdev->vrings_info[0].vq;
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[1].vq;
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906a:	3318      	adds	r3, #24
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	66da      	str	r2, [r3, #108]	; 0x6c
		callback[1] = rpmsg_virtio_rx_callback;
		rvdev->rvq  = vdev->vrings_info[1].vq;
		rvdev->svq  = vdev->vrings_info[0].vq;
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	671a      	str	r2, [r3, #112]	; 0x70
		rpmsg_virtio_wait_remote_ready(rvdev);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8009078:	f107 0220 	add.w	r2, r7, #32
 800907c:	f107 0318 	add.w	r3, r7, #24
 8009080:	9300      	str	r3, [sp, #0]
 8009082:	4613      	mov	r3, r2
 8009084:	2202      	movs	r2, #2
 8009086:	2100      	movs	r1, #0
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f7ff fcf4 	bl	8008a76 <rpmsg_virtio_create_virtqueues>
 800908e:	6478      	str	r0, [r7, #68]	; 0x44
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8009090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <rpmsg_init_vdev+0xb6>
		return status;
 8009096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009098:	e077      	b.n	800918a <rpmsg_init_vdev+0x1a6>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 800909a:	2300      	movs	r3, #0
 800909c:	643b      	str	r3, [r7, #64]	; 0x40
 800909e:	e00f      	b.n	80090c0 <rpmsg_init_vdev+0xdc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80090a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090a6:	4613      	mov	r3, r2
 80090a8:	005b      	lsls	r3, r3, #1
 80090aa:	4413      	add	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	440b      	add	r3, r1
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	62bb      	str	r3, [r7, #40]	; 0x28
		vq->shm_io = shm_io;
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 80090ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090bc:	3301      	adds	r3, #1
 80090be:	643b      	str	r3, [r7, #64]	; 0x40
 80090c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d9ec      	bls.n	80090a0 <rpmsg_init_vdev+0xbc>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER) {
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d137      	bne.n	800913c <rpmsg_init_vdev+0x158>
		struct virtqueue_buf vqbuf;
		unsigned int idx;
		void *buffer;

		vqbuf.len = RPMSG_BUFFER_SIZE;
 80090cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090d0:	617b      	str	r3, [r7, #20]
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 80090d2:	2300      	movs	r3, #0
 80090d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090d6:	e02a      	b.n	800912e <rpmsg_init_vdev+0x14a>
			/* Initialize TX virtqueue buffers for remote device */
			buffer = rpmsg_virtio_shm_pool_get_buffer(shpool,
 80090d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80090de:	f7ff fcf0 	bl	8008ac2 <rpmsg_virtio_shm_pool_get_buffer>
 80090e2:	6338      	str	r0, [r7, #48]	; 0x30
							RPMSG_BUFFER_SIZE);

			if (!buffer) {
 80090e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <rpmsg_init_vdev+0x10a>
				return RPMSG_ERR_NO_BUFF;
 80090ea:	4b2c      	ldr	r3, [pc, #176]	; (800919c <rpmsg_init_vdev+0x1b8>)
 80090ec:	e04d      	b.n	800918a <rpmsg_init_vdev+0x1a6>
			}

			vqbuf.buf = buffer;
 80090ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f0:	613b      	str	r3, [r7, #16]

			metal_io_block_set(shm_io,
 80090f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090f4:	6838      	ldr	r0, [r7, #0]
 80090f6:	f7ff fbcd 	bl	8008894 <metal_io_virt_to_offset>
 80090fa:	4601      	mov	r1, r0
 80090fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009100:	2200      	movs	r2, #0
 8009102:	6838      	ldr	r0, [r7, #0]
 8009104:	f7fe fc39 	bl	800797a <metal_io_block_set>
					   metal_io_virt_to_offset(shm_io,
								   buffer),
					   0x00, RPMSG_BUFFER_SIZE);
			status =
				virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1,
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800910c:	f107 0110 	add.w	r1, r7, #16
 8009110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	2301      	movs	r3, #1
 8009116:	2200      	movs	r2, #0
 8009118:	f000 fa23 	bl	8009562 <virtqueue_add_buffer>
 800911c:	6478      	str	r0, [r7, #68]	; 0x44
						     buffer);

			if (status != RPMSG_SUCCESS) {
 800911e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <rpmsg_init_vdev+0x144>
				return status;
 8009124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009126:	e030      	b.n	800918a <rpmsg_init_vdev+0x1a6>
		for (idx = 0; idx < rvdev->rvq->vq_nentries; idx++) {
 8009128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912a:	3301      	adds	r3, #1
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009132:	895b      	ldrh	r3, [r3, #10]
 8009134:	461a      	mov	r2, r3
 8009136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009138:	4293      	cmp	r3, r2
 800913a:	d3cd      	bcc.n	80090d8 <rpmsg_init_vdev+0xf4>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 800913c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fb85 	bl	800884e <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff fc85 	bl	8008a54 <rpmsg_virtio_get_features>
 800914a:	62f8      	str	r0, [r7, #44]	; 0x2c

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d011      	beq.n	800917a <rpmsg_init_vdev+0x196>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8009156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009158:	f103 0008 	add.w	r0, r3, #8
 800915c:	2300      	movs	r3, #0
 800915e:	9301      	str	r3, [sp, #4]
 8009160:	4b13      	ldr	r3, [pc, #76]	; (80091b0 <rpmsg_init_vdev+0x1cc>)
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	2335      	movs	r3, #53	; 0x35
 8009166:	2235      	movs	r2, #53	; 0x35
 8009168:	4912      	ldr	r1, [pc, #72]	; (80091b4 <rpmsg_init_vdev+0x1d0>)
 800916a:	f7ff fc25 	bl	80089b8 <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	3308      	adds	r3, #8
 8009172:	4619      	mov	r1, r3
 8009174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009176:	f7ff fa83 	bl	8008680 <rpmsg_register_endpoint>
	}

#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
 800917a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800917c:	2b00      	cmp	r3, #0
 800917e:	d103      	bne.n	8009188 <rpmsg_init_vdev+0x1a4>
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
 8009180:	2104      	movs	r1, #4
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff fc42 	bl	8008a0c <rpmsg_virtio_set_status>
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8009188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800918a:	4618      	mov	r0, r3
 800918c:	3748      	adds	r7, #72	; 0x48
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	08008cb1 	.word	0x08008cb1
 8009198:	fffff82d 	.word	0xfffff82d
 800919c:	fffff82e 	.word	0xfffff82e
 80091a0:	0800b254 	.word	0x0800b254
 80091a4:	0800b25c 	.word	0x0800b25c
 80091a8:	08008e15 	.word	0x08008e15
 80091ac:	08008e01 	.word	0x08008e01
 80091b0:	08008eff 	.word	0x08008eff
 80091b4:	0800b264 	.word	0x0800b264

080091b8 <rpmsg_deinit_vdev>:

void rpmsg_deinit_vdev(struct rpmsg_virtio_device *rvdev)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	struct metal_list *node;
	struct rpmsg_device *rdev;
	struct rpmsg_endpoint *ept;

	rdev = &rvdev->rdev;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	617b      	str	r3, [r7, #20]
	while (!metal_list_is_empty(&rdev->endpoints)) {
 80091c4:	e008      	b.n	80091d8 <rpmsg_deinit_vdev+0x20>
		node = rdev->endpoints.next;
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	613b      	str	r3, [r7, #16]
		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	3b34      	subs	r3, #52	; 0x34
 80091d0:	60fb      	str	r3, [r7, #12]
		rpmsg_destroy_ept(ept);
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff fae6 	bl	80087a4 <rpmsg_destroy_ept>
	while (!metal_list_is_empty(&rdev->endpoints)) {
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff fb48 	bl	8008870 <metal_list_is_empty>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0ef      	beq.n	80091c6 <rpmsg_deinit_vdev+0xe>
	}

	rvdev->rvq = 0;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	669a      	str	r2, [r3, #104]	; 0x68
	rvdev->svq = 0;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	66da      	str	r2, [r3, #108]	; 0x6c

	metal_mutex_deinit(&rdev->lock);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	3358      	adds	r3, #88	; 0x58
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff fbbd 	bl	8008976 <metal_mutex_deinit>
}
 80091fc:	bf00      	nop
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 800921a:	b480      	push	{r7}
 800921c:	b083      	sub	sp, #12
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 800923e:	68fb      	ldr	r3, [r7, #12]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr

0800924c <vring_size>:
 */
#define vring_used_event(vr)	((vr)->avail->ring[(vr)->num])
#define vring_avail_event(vr)	((vr)->used->ring[(vr)->num].id & 0xFFFF)

static inline int vring_size(unsigned int num, unsigned long align)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
	int size;

	size = num * sizeof(struct vring_desc);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_avail) + (num * sizeof(uint16_t)) +
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	3303      	adds	r3, #3
 8009260:	005a      	lsls	r2, r3, #1
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	60fb      	str	r3, [r7, #12]
	    sizeof(uint16_t);
	size = (size + align - 1) & ~(align - 1);
 8009268:	68fa      	ldr	r2, [r7, #12]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	4413      	add	r3, r2
 800926e:	1e5a      	subs	r2, r3, #1
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	425b      	negs	r3, r3
 8009274:	4013      	ands	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
	size += sizeof(struct vring_used) +
	    (num * sizeof(struct vring_used_elem)) + sizeof(uint16_t);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	00da      	lsls	r2, r3, #3
	size += sizeof(struct vring_used) +
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4413      	add	r3, r2
 8009280:	3306      	adds	r3, #6
 8009282:	60fb      	str	r3, [r7, #12]

	return size;
 8009284:	68fb      	ldr	r3, [r7, #12]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr

08009292 <metal_io_virt_to_offset>:
{
 8009292:	b480      	push	{r7}
 8009294:	b085      	sub	sp, #20
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d201      	bcs.n	80092b4 <metal_io_virt_to_offset+0x22>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	e001      	b.n	80092b8 <metal_io_virt_to_offset+0x26>
 80092b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 80092c4:	b590      	push	{r4, r7, lr}
 80092c6:	b091      	sub	sp, #68	; 0x44
 80092c8:	af04      	add	r7, sp, #16
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (nvqs > num_vrings)
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092dc:	429a      	cmp	r2, r3
 80092de:	d902      	bls.n	80092e6 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 80092e0:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 80092e4:	e053      	b.n	800938e <virtio_create_virtqueues+0xca>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 80092e6:	2300      	movs	r3, #0
 80092e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ea:	e04b      	b.n	8009384 <virtio_create_virtqueues+0xc0>
		vring_info = &vdev->vrings_info[i];
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092f2:	4613      	mov	r3, r2
 80092f4:	005b      	lsls	r3, r3, #1
 80092f6:	4413      	add	r3, r2
 80092f8:	00db      	lsls	r3, r3, #3
 80092fa:	440b      	add	r3, r1
 80092fc:	627b      	str	r3, [r7, #36]	; 0x24

		vring_alloc = &vring_info->info;
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	3304      	adds	r3, #4
 8009302:	623b      	str	r3, [r7, #32]
#ifndef VIRTIO_SLAVE_ONLY
		if (vdev->role == VIRTIO_DEV_MASTER) {
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d118      	bne.n	800933e <virtio_create_virtqueues+0x7a>
			size_t offset;
			struct metal_io_region *io = vring_info->io;
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	61fb      	str	r3, [r7, #28]

			offset = metal_io_virt_to_offset(io,
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4619      	mov	r1, r3
 8009318:	69f8      	ldr	r0, [r7, #28]
 800931a:	f7ff ffba 	bl	8009292 <metal_io_virt_to_offset>
 800931e:	61b8      	str	r0, [r7, #24]
							 vring_alloc->vaddr);
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	891b      	ldrh	r3, [r3, #8]
			metal_io_block_set(io, offset, 0,
 8009324:	461a      	mov	r2, r3
 8009326:	6a3b      	ldr	r3, [r7, #32]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	4619      	mov	r1, r3
 800932c:	4610      	mov	r0, r2
 800932e:	f7ff ff8d 	bl	800924c <vring_size>
 8009332:	4603      	mov	r3, r0
 8009334:	2200      	movs	r2, #0
 8009336:	69b9      	ldr	r1, [r7, #24]
 8009338:	69f8      	ldr	r0, [r7, #28]
 800933a:	f7fe fb1e 	bl	800797a <metal_io_block_set>
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009340:	b298      	uxth	r0, r3
 8009342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4413      	add	r3, r2
 800934a:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009352:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8009354:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 800935a:	6a12      	ldr	r2, [r2, #32]
 800935c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800935e:	6809      	ldr	r1, [r1, #0]
 8009360:	9102      	str	r1, [sp, #8]
 8009362:	9201      	str	r2, [sp, #4]
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	6a3b      	ldr	r3, [r7, #32]
 8009368:	4622      	mov	r2, r4
 800936a:	4601      	mov	r1, r0
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f000 f8c4 	bl	80094fa <virtqueue_create>
 8009372:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <virtio_create_virtqueues+0xba>
			return ret;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	e007      	b.n	800938e <virtio_create_virtqueues+0xca>
	for (i = 0; i < nvqs; i++) {
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	3301      	adds	r3, #1
 8009382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	429a      	cmp	r2, r3
 800938a:	d3af      	bcc.n	80092ec <virtio_create_virtqueues+0x28>
	}
	return 0;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3734      	adds	r7, #52	; 0x34
 8009392:	46bd      	mov	sp, r7
 8009394:	bd90      	pop	{r4, r7, pc}

08009396 <vring_init>:

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	60f8      	str	r0, [r7, #12]
 800939e:	60b9      	str	r1, [r7, #8]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	603b      	str	r3, [r7, #0]
	vr->num = num;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	441a      	add	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	689a      	ldr	r2, [r3, #8]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	4413      	add	r3, r2
 80093c6:	3304      	adds	r3, #4
 80093c8:	461a      	mov	r2, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	425b      	negs	r3, r3
 80093d4:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 80093d6:	461a      	mov	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	60da      	str	r2, [r3, #12]
}
 80093dc:	bf00      	nop
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	80fb      	strh	r3, [r7, #6]
 80093f2:	460b      	mov	r3, r1
 80093f4:	80bb      	strh	r3, [r7, #4]
 80093f6:	4613      	mov	r3, r2
 80093f8:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 80093fa:	88ba      	ldrh	r2, [r7, #4]
 80093fc:	88fb      	ldrh	r3, [r7, #6]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	b29b      	uxth	r3, r3
 8009402:	3b01      	subs	r3, #1
 8009404:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8009406:	88b9      	ldrh	r1, [r7, #4]
 8009408:	887b      	ldrh	r3, [r7, #2]
 800940a:	1acb      	subs	r3, r1, r3
 800940c:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 800940e:	429a      	cmp	r2, r3
 8009410:	bf34      	ite	cc
 8009412:	2301      	movcc	r3, #1
 8009414:	2300      	movcs	r3, #0
 8009416:	b2db      	uxtb	r3, r3
}
 8009418:	4618      	mov	r0, r3
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <metal_io_virt_to_offset>:
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	429a      	cmp	r2, r3
 8009440:	d201      	bcs.n	8009446 <metal_io_virt_to_offset+0x22>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	e001      	b.n	800944a <metal_io_virt_to_offset+0x26>
 8009446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <metal_io_phys>:
{
 8009456:	b480      	push	{r7}
 8009458:	b085      	sub	sp, #20
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8009464:	2b1f      	cmp	r3, #31
 8009466:	d805      	bhi.n	8009474 <metal_io_phys+0x1e>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	fa22 f303 	lsr.w	r3, r2, r3
 8009472:	e000      	b.n	8009476 <metal_io_phys+0x20>
 8009474:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8009476:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 800947c:	2b00      	cmp	r3, #0
 800947e:	d010      	beq.n	80094a2 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	683a      	ldr	r2, [r7, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d80b      	bhi.n	80094a2 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685a      	ldr	r2, [r3, #4]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	4413      	add	r3, r2
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6919      	ldr	r1, [r3, #16]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 800949e:	4413      	add	r3, r2
 80094a0:	e001      	b.n	80094a6 <metal_io_phys+0x50>
 80094a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <metal_io_virt_to_phys>:
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
	return metal_io_phys(io, metal_io_virt_to_offset(io, virt));
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff ffb0 	bl	8009424 <metal_io_virt_to_offset>
 80094c4:	4603      	mov	r3, r0
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7ff ffc4 	bl	8009456 <metal_io_phys>
 80094ce:	4603      	mov	r3, r0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <virtqueue_virt_to_phys>:
}

/* Default implementation of V2P based on libmetal */
static inline metal_phys_addr_t virtqueue_virt_to_phys(struct virtqueue *vq,
						       void *buf)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e6:	60fb      	str	r3, [r7, #12]

	return metal_io_virt_to_phys(io, buf);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff ffe1 	bl	80094b2 <metal_io_virt_to_phys>
 80094f0:	4603      	mov	r3, r0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b086      	sub	sp, #24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	603b      	str	r3, [r7, #0]
 8009506:	460b      	mov	r3, r1
 8009508:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d121      	bne.n	8009558 <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 800951a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8009520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009522:	897a      	ldrh	r2, [r7, #10]
 8009524:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	891a      	ldrh	r2, [r3, #8]
 800952a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952c:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 800952e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009530:	895a      	ldrh	r2, [r3, #10]
 8009532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009534:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 8009536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009538:	6a3a      	ldr	r2, [r7, #32]
 800953a:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009540:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6819      	ldr	r1, [r3, #0]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	461a      	mov	r2, r3
 800954c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800954e:	f000 f97a 	bl	8009846 <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 8009552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009554:	f000 f899 	bl	800968a <virtqueue_disable_cb>
	}

	return (status);
 8009558:	697b      	ldr	r3, [r7, #20]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <virtqueue_add_buffer>:
 *
 * @return                  - Function status
 */
int virtqueue_add_buffer(struct virtqueue *vq, struct virtqueue_buf *buf_list,
			 int readable, int writable, void *cookie)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b08a      	sub	sp, #40	; 0x28
 8009566:	af02      	add	r7, sp, #8
 8009568:	60f8      	str	r0, [r7, #12]
 800956a:	60b9      	str	r1, [r7, #8]
 800956c:	607a      	str	r2, [r7, #4]
 800956e:	603b      	str	r3, [r7, #0]
	struct vq_desc_extra *dxp = NULL;
 8009570:	2300      	movs	r3, #0
 8009572:	61fb      	str	r3, [r7, #28]
	int status = VQUEUE_SUCCESS;
 8009574:	2300      	movs	r3, #0
 8009576:	61bb      	str	r3, [r7, #24]
	uint16_t head_idx;
	uint16_t idx;
	int needed;

	needed = readable + writable;
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	4413      	add	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(needed < 1, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(vq->vq_free_cnt == 0, status, ERROR_VRING_FULL);

	VQUEUE_BUSY(vq);

	if (status == VQUEUE_SUCCESS) {
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d12c      	bne.n	80095e0 <virtqueue_add_buffer+0x7e>
		VQASSERT(vq, cookie != NULL, "enqueuing with no cookie");

		head_idx = vq->vq_desc_head_idx;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800958a:	827b      	strh	r3, [r7, #18]
		VQ_RING_ASSERT_VALID_IDX(vq, head_idx);
		dxp = &vq->vq_descx[head_idx];
 800958c:	8a7b      	ldrh	r3, [r7, #18]
 800958e:	3307      	adds	r3, #7
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	4413      	add	r3, r2
 8009596:	61fb      	str	r3, [r7, #28]

		VQASSERT(vq, dxp->cookie == NULL,
			 "cookie already exists for index");

		dxp->cookie = cookie;
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800959c:	601a      	str	r2, [r3, #0]
		dxp->ndescs = needed;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	809a      	strh	r2, [r3, #4]

		/* Enqueue buffer onto the ring. */
		idx = vq_ring_add_buffer(vq, vq->vq_ring.desc, head_idx,
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	69d9      	ldr	r1, [r3, #28]
 80095aa:	8a7a      	ldrh	r2, [r7, #18]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	9301      	str	r3, [sp, #4]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f8a7 	bl	800970a <vq_ring_add_buffer>
 80095bc:	4603      	mov	r3, r0
 80095be:	823b      	strh	r3, [r7, #16]
					 buf_list, readable, writable);

		vq->vq_desc_head_idx = idx;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8a3a      	ldrh	r2, [r7, #16]
 80095c4:	861a      	strh	r2, [r3, #48]	; 0x30
		vq->vq_free_cnt -= needed;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	851a      	strh	r2, [r3, #40]	; 0x28

		/*
		 * Update vring_avail control block fields so that other
		 * side can get buffer using it.
		 */
		vq_ring_update_avail(vq, head_idx);
 80095d6:	8a7b      	ldrh	r3, [r7, #18]
 80095d8:	4619      	mov	r1, r3
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 f966 	bl	80098ac <vq_ring_update_avail>
	}

	VQUEUE_IDLE(vq);

	return status;
 80095e0:	69bb      	ldr	r3, [r7, #24]
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3720      	adds	r7, #32
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <virtqueue_get_buffer>:
 * @param idx           - index of the buffer
 *
 * @return              - Pointer to used buffer
 */
void *virtqueue_get_buffer(struct virtqueue *vq, uint32_t *len, uint16_t *idx)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b088      	sub	sp, #32
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	60f8      	str	r0, [r7, #12]
 80095f2:	60b9      	str	r1, [r7, #8]
 80095f4:	607a      	str	r2, [r7, #4]
	struct vring_used_elem *uep;
	void *cookie;
	uint16_t used_idx, desc_idx;

	if (!vq || vq->vq_used_cons_idx == vq->vq_ring.used->idx)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d006      	beq.n	800960a <virtqueue_get_buffer+0x20>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	885b      	ldrh	r3, [r3, #2]
 8009606:	429a      	cmp	r2, r3
 8009608:	d101      	bne.n	800960e <virtqueue_get_buffer+0x24>
		return (NULL);
 800960a:	2300      	movs	r3, #0
 800960c:	e039      	b.n	8009682 <virtqueue_get_buffer+0x98>

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_used_cons_idx++ & (vq->vq_nentries - 1);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	b291      	uxth	r1, r2
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	8651      	strh	r1, [r2, #50]	; 0x32
 800961a:	b21a      	sxth	r2, r3
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	895b      	ldrh	r3, [r3, #10]
 8009620:	3b01      	subs	r3, #1
 8009622:	b29b      	uxth	r3, r3
 8009624:	b21b      	sxth	r3, r3
 8009626:	4013      	ands	r3, r2
 8009628:	b21b      	sxth	r3, r3
 800962a:	83fb      	strh	r3, [r7, #30]
	uep = &vq->vq_ring.used->ring[used_idx];
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009630:	8bfb      	ldrh	r3, [r7, #30]
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	4413      	add	r3, r2
 8009636:	3304      	adds	r3, #4
 8009638:	61bb      	str	r3, [r7, #24]

	atomic_thread_fence(memory_order_seq_cst);
 800963a:	f3bf 8f5b 	dmb	ish

	desc_idx = (uint16_t)uep->id;
 800963e:	69bb      	ldr	r3, [r7, #24]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	82fb      	strh	r3, [r7, #22]
	if (len)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d003      	beq.n	8009652 <virtqueue_get_buffer+0x68>
		*len = uep->len;
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	601a      	str	r2, [r3, #0]

	vq_ring_free_chain(vq, desc_idx);
 8009652:	8afb      	ldrh	r3, [r7, #22]
 8009654:	4619      	mov	r1, r3
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 f8ae 	bl	80097b8 <vq_ring_free_chain>

	cookie = vq->vq_descx[desc_idx].cookie;
 800965c:	8afa      	ldrh	r2, [r7, #22]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3207      	adds	r2, #7
 8009662:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009666:	613b      	str	r3, [r7, #16]
	vq->vq_descx[desc_idx].cookie = NULL;
 8009668:	8afa      	ldrh	r2, [r7, #22]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3207      	adds	r2, #7
 800966e:	2100      	movs	r1, #0
 8009670:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

	if (idx)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <virtqueue_get_buffer+0x96>
		*idx = used_idx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	8bfa      	ldrh	r2, [r7, #30]
 800967e:	801a      	strh	r2, [r3, #0]
	VQUEUE_IDLE(vq);

	return cookie;
 8009680:	693b      	ldr	r3, [r7, #16]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}

0800968a <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 800968a:	b480      	push	{r7}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	f003 0302 	and.w	r3, r3, #2
 800969a:	2b00      	cmp	r3, #0
 800969c:	d010      	beq.n	80096c0 <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	895b      	ldrh	r3, [r3, #10]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6a1a      	ldr	r2, [r3, #32]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 80096b2:	3901      	subs	r1, #1
 80096b4:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	4413      	add	r3, r2
 80096ba:	460a      	mov	r2, r1
 80096bc:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 80096be:	e008      	b.n	80096d2 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	881a      	ldrh	r2, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	f042 0201 	orr.w	r2, r2, #1
 80096ce:	b292      	uxth	r2, r2
 80096d0:	801a      	strh	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	370c      	adds	r7, #12
 80096d6:	46bd      	mov	sp, r7
 80096d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096dc:	4770      	bx	lr

080096de <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 80096e6:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f91d 	bl	800992a <vq_ring_must_notify_host>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f94d 	bl	8009996 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <vq_ring_add_buffer>:
 */
static uint16_t vq_ring_add_buffer(struct virtqueue *vq,
				   struct vring_desc *desc, uint16_t head_idx,
				   struct virtqueue_buf *buf_list, int readable,
				   int writable)
{
 800970a:	b5b0      	push	{r4, r5, r7, lr}
 800970c:	b088      	sub	sp, #32
 800970e:	af00      	add	r7, sp, #0
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	603b      	str	r3, [r7, #0]
 8009716:	4613      	mov	r3, r2
 8009718:	80fb      	strh	r3, [r7, #6]
	int i, needed;
	uint16_t idx;

	(void)vq;

	needed = readable + writable;
 800971a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800971c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800971e:	4413      	add	r3, r2
 8009720:	617b      	str	r3, [r7, #20]

	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 8009722:	2300      	movs	r3, #0
 8009724:	61fb      	str	r3, [r7, #28]
 8009726:	88fb      	ldrh	r3, [r7, #6]
 8009728:	837b      	strh	r3, [r7, #26]
 800972a:	e03c      	b.n	80097a6 <vq_ring_add_buffer+0x9c>
		VQASSERT(vq, idx != VQ_RING_DESC_CHAIN_END,
			 "premature end of free desc chain");

		dp = &desc[idx];
 800972c:	8b7b      	ldrh	r3, [r7, #26]
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	68ba      	ldr	r2, [r7, #8]
 8009732:	4413      	add	r3, r2
 8009734:	613b      	str	r3, [r7, #16]
		dp->addr = virtqueue_virt_to_phys(vq, buf_list[i].buf);
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	00db      	lsls	r3, r3, #3
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	4413      	add	r3, r2
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4619      	mov	r1, r3
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff fec8 	bl	80094d8 <virtqueue_virt_to_phys>
 8009748:	4603      	mov	r3, r0
 800974a:	2200      	movs	r2, #0
 800974c:	461c      	mov	r4, r3
 800974e:	4615      	mov	r5, r2
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	e9c3 4500 	strd	r4, r5, [r3]
		dp->len = buf_list[i].len;
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	4413      	add	r3, r2
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	461a      	mov	r2, r3
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	609a      	str	r2, [r3, #8]
		dp->flags = 0;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	2200      	movs	r2, #0
 800976a:	819a      	strh	r2, [r3, #12]

		if (i < needed - 1)
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	3b01      	subs	r3, #1
 8009770:	69fa      	ldr	r2, [r7, #28]
 8009772:	429a      	cmp	r2, r3
 8009774:	da06      	bge.n	8009784 <vq_ring_add_buffer+0x7a>
			dp->flags |= VRING_DESC_F_NEXT;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	899b      	ldrh	r3, [r3, #12]
 800977a:	f043 0301 	orr.w	r3, r3, #1
 800977e:	b29a      	uxth	r2, r3
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	819a      	strh	r2, [r3, #12]

		/*
		 * Readable buffers are inserted  into vring before the
		 * writable buffers.
		 */
		if (i >= readable)
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	429a      	cmp	r2, r3
 800978a:	db06      	blt.n	800979a <vq_ring_add_buffer+0x90>
			dp->flags |= VRING_DESC_F_WRITE;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	899b      	ldrh	r3, [r3, #12]
 8009790:	f043 0302 	orr.w	r3, r3, #2
 8009794:	b29a      	uxth	r2, r3
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	819a      	strh	r2, [r3, #12]
	for (i = 0, idx = head_idx; i < needed; i++, idx = dp->next) {
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	3301      	adds	r3, #1
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	89db      	ldrh	r3, [r3, #14]
 80097a4:	837b      	strh	r3, [r7, #26]
 80097a6:	69fa      	ldr	r2, [r7, #28]
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	dbbe      	blt.n	800972c <vq_ring_add_buffer+0x22>
	}

	return (idx);
 80097ae:	8b7b      	ldrh	r3, [r7, #26]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3720      	adds	r7, #32
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bdb0      	pop	{r4, r5, r7, pc}

080097b8 <vq_ring_free_chain>:
 *
 * vq_ring_free_chain
 *
 */
static void vq_ring_free_chain(struct virtqueue *vq, uint16_t desc_idx)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	807b      	strh	r3, [r7, #2]
	struct vring_desc *dp;
	struct vq_desc_extra *dxp;

	VQ_RING_ASSERT_VALID_IDX(vq, desc_idx);
	dp = &vq->vq_ring.desc[desc_idx];
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	69da      	ldr	r2, [r3, #28]
 80097c8:	887b      	ldrh	r3, [r7, #2]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	4413      	add	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
	dxp = &vq->vq_descx[desc_idx];
 80097d0:	887b      	ldrh	r3, [r7, #2]
 80097d2:	3307      	adds	r3, #7
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	4413      	add	r3, r2
 80097da:	60bb      	str	r3, [r7, #8]

	if (vq->vq_free_cnt == 0) {
		VQ_RING_ASSERT_CHAIN_TERM(vq);
	}

	vq->vq_free_cnt += dxp->ndescs;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	889b      	ldrh	r3, [r3, #4]
 80097e4:	4413      	add	r3, r2
 80097e6:	b29a      	uxth	r2, r3
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	851a      	strh	r2, [r3, #40]	; 0x28
	dxp->ndescs--;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	889b      	ldrh	r3, [r3, #4]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	809a      	strh	r2, [r3, #4]

	if ((dp->flags & VRING_DESC_F_INDIRECT) == 0) {
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	899b      	ldrh	r3, [r3, #12]
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d113      	bne.n	800982c <vq_ring_free_chain+0x74>
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009804:	e00c      	b.n	8009820 <vq_ring_free_chain+0x68>
			VQ_RING_ASSERT_VALID_IDX(vq, dp->next);
			dp = &vq->vq_ring.desc[dp->next];
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	69da      	ldr	r2, [r3, #28]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	89db      	ldrh	r3, [r3, #14]
 800980e:	011b      	lsls	r3, r3, #4
 8009810:	4413      	add	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
			dxp->ndescs--;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	889b      	ldrh	r3, [r3, #4]
 8009818:	3b01      	subs	r3, #1
 800981a:	b29a      	uxth	r2, r3
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	809a      	strh	r2, [r3, #4]
		while (dp->flags & VRING_DESC_F_NEXT) {
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	899b      	ldrh	r3, [r3, #12]
 8009824:	f003 0301 	and.w	r3, r3, #1
 8009828:	2b00      	cmp	r3, #0
 800982a:	d1ec      	bne.n	8009806 <vq_ring_free_chain+0x4e>
	/*
	 * We must append the existing free chain, if any, to the end of
	 * newly freed chain. If the virtqueue was completely used, then
	 * head would be VQ_RING_DESC_CHAIN_END (ASSERTed above).
	 */
	dp->next = vq->vq_desc_head_idx;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	81da      	strh	r2, [r3, #14]
	vq->vq_desc_head_idx = desc_idx;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	887a      	ldrh	r2, [r7, #2]
 8009838:	861a      	strh	r2, [r3, #48]	; 0x30
}
 800983a:	bf00      	nop
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b088      	sub	sp, #32
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	895b      	ldrh	r3, [r3, #10]
 8009856:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3318      	adds	r3, #24
 800985c:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 800985e:	69b9      	ldr	r1, [r7, #24]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	6978      	ldr	r0, [r7, #20]
 8009866:	f7ff fd96 	bl	8009396 <vring_init>

	for (i = 0; i < size - 1; i++)
 800986a:	2300      	movs	r3, #0
 800986c:	61fb      	str	r3, [r7, #28]
 800986e:	e00c      	b.n	800988a <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	b29a      	uxth	r2, r3
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	6859      	ldr	r1, [r3, #4]
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	011b      	lsls	r3, r3, #4
 800987c:	440b      	add	r3, r1
 800987e:	3201      	adds	r2, #1
 8009880:	b292      	uxth	r2, r2
 8009882:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	3301      	adds	r3, #1
 8009888:	61fb      	str	r3, [r7, #28]
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	3b01      	subs	r3, #1
 800988e:	69fa      	ldr	r2, [r7, #28]
 8009890:	429a      	cmp	r2, r3
 8009892:	dbed      	blt.n	8009870 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	69fb      	ldr	r3, [r7, #28]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	4413      	add	r3, r2
 800989e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80098a2:	81da      	strh	r2, [r3, #14]
}
 80098a4:	bf00      	nop
 80098a6:	3720      	adds	r7, #32
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <vq_ring_update_avail>:
 *
 * vq_ring_update_avail
 *
 */
static void vq_ring_update_avail(struct virtqueue *vq, uint16_t desc_idx)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	807b      	strh	r3, [r7, #2]
	 * it usable to the host. The chain is made available now rather than
	 * deferring to virtqueue_notify() in the hopes that if the host is
	 * currently running on another CPU, we can keep it processing the new
	 * descriptor.
	 */
	avail_idx = vq->vq_ring.avail->idx & (vq->vq_nentries - 1);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6a1b      	ldr	r3, [r3, #32]
 80098bc:	885b      	ldrh	r3, [r3, #2]
 80098be:	b21a      	sxth	r2, r3
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	895b      	ldrh	r3, [r3, #10]
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	b21b      	sxth	r3, r3
 80098ca:	4013      	ands	r3, r2
 80098cc:	b21b      	sxth	r3, r3
 80098ce:	81fb      	strh	r3, [r7, #14]
	vq->vq_ring.avail->ring[avail_idx] = desc_idx;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6a1a      	ldr	r2, [r3, #32]
 80098d4:	89fb      	ldrh	r3, [r7, #14]
 80098d6:	005b      	lsls	r3, r3, #1
 80098d8:	4413      	add	r3, r2
 80098da:	887a      	ldrh	r2, [r7, #2]
 80098dc:	809a      	strh	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 80098de:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.avail->idx++;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	885a      	ldrh	r2, [r3, #2]
 80098e8:	3201      	adds	r2, #1
 80098ea:	b292      	uxth	r2, r2
 80098ec:	805a      	strh	r2, [r3, #2]

	/* Keep pending count until virtqueue_notify(). */
	vq->vq_queued_cnt++;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098f2:	3301      	adds	r3, #1
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 800990e:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <virtqueue_notification+0x1c>
		vq->callback(vq);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	691b      	ldr	r3, [r3, #16]
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	4798      	blx	r3
}
 8009922:	bf00      	nop
 8009924:	3708      	adds	r7, #8
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}

0800992a <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b00      	cmp	r3, #0
 800993c:	d01d      	beq.n	800997a <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	885b      	ldrh	r3, [r3, #2]
 8009944:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800994a:	89fa      	ldrh	r2, [r7, #14]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	00db      	lsls	r3, r3, #3
 800995a:	4413      	add	r3, r2
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 8009960:	89ba      	ldrh	r2, [r7, #12]
 8009962:	89f9      	ldrh	r1, [r7, #14]
 8009964:	897b      	ldrh	r3, [r7, #10]
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff fd3e 	bl	80093e8 <vring_need_event>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	bf14      	ite	ne
 8009972:	2301      	movne	r3, #1
 8009974:	2300      	moveq	r3, #0
 8009976:	b2db      	uxtb	r3, r3
 8009978:	e009      	b.n	800998e <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	f003 0301 	and.w	r3, r3, #1
 8009984:	2b00      	cmp	r3, #0
 8009986:	bf0c      	ite	eq
 8009988:	2301      	moveq	r3, #1
 800998a:	2300      	movne	r3, #0
 800998c:	b2db      	uxtb	r3, r3
}
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d003      	beq.n	80099ae <vq_ring_notify_host+0x18>
		vq->notify(vq);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	695b      	ldr	r3, [r3, #20]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	4798      	blx	r3
}
 80099ae:	bf00      	nop
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 80099c0:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <HAL_HSEM_FreeCallback+0x1c>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM7 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 80099c6:	2002      	movs	r0, #2
 80099c8:	f7f8 f850 	bl	8001a6c <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 80099cc:	bf00      	nop
 80099ce:	3708      	adds	r7, #8
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	240084c8 	.word	0x240084c8

080099d8 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 80099de:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <MAILBOX_Init+0x34>)
 80099e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099e4:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <MAILBOX_Init+0x34>)
 80099e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80099ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80099ee:	4b07      	ldr	r3, [pc, #28]	; (8009a0c <MAILBOX_Init+0x34>)
 80099f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f8:	607b      	str	r3, [r7, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN PRE_MAILBOX_INIT_CM7 */

  /* USER CODE END PRE_MAILBOX_INIT_CM7 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 80099fc:	2002      	movs	r0, #2
 80099fe:	f7f8 f835 	bl	8001a6c <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3708      	adds	r7, #8
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	58024400 	.word	0x58024400

08009a10 <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <MAILBOX_Poll+0x30>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d108      	bne.n	8009a32 <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM7 */

    /* USER CODE END PRE_NEW_MSG_CM7 */

    rproc_virtio_notified(vdev, VRING0_ID);
 8009a20:	2100      	movs	r1, #0
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f7fe fb77 	bl	8008116 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <MAILBOX_Poll+0x30>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	601a      	str	r2, [r3, #0]
    return 0;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	e001      	b.n	8009a36 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 8009a32:	f06f 030a 	mvn.w	r3, #10
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	240084c8 	.word	0x240084c8

08009a44 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
#ifdef CORE_CM7

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM7 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM7 */
  HAL_HSEM_FastTake(HSEM_ID_0);
 8009a4e:	2000      	movs	r0, #0
 8009a50:	f7f7 ffde 	bl	8001a10 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 8009a54:	2100      	movs	r1, #0
 8009a56:	2000      	movs	r0, #0
 8009a58:	f7f7 fff4 	bl	8001a44 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <is_rpmsg_ept_ready>:
 *
 * Returns 1 if the rpmsg endpoint has both local addr and destination
 * addr set, 0 otherwise
 */
static inline unsigned int is_rpmsg_ept_ready(struct rpmsg_endpoint *ept)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a76:	d006      	beq.n	8009a86 <is_rpmsg_ept_ready+0x20>
		ept->addr != RPMSG_ADDR_ANY);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	return (ept->dest_addr != RPMSG_ADDR_ANY &&
 8009a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a80:	d001      	beq.n	8009a86 <is_rpmsg_ept_ready+0x20>
 8009a82:	2301      	movs	r3, #1
 8009a84:	e000      	b.n	8009a88 <is_rpmsg_ept_ready+0x22>
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d209      	bcs.n	8009abc <metal_device_io_region+0x28>
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	005b      	lsls	r3, r3, #1
 8009aae:	4413      	add	r3, r2
 8009ab0:	011b      	lsls	r3, r3, #4
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	3304      	adds	r3, #4
 8009aba:	e000      	b.n	8009abe <metal_device_io_region+0x2a>
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
	...

08009acc <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 8009acc:	b590      	push	{r4, r7, lr}
 8009ace:	b08d      	sub	sp, #52	; 0x34
 8009ad0:	af04      	add	r7, sp, #16
 8009ad2:	6078      	str	r0, [r7, #4]
  int status = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 8009adc:	4a41      	ldr	r2, [pc, #260]	; (8009be4 <OPENAMP_shmem_init+0x118>)
 8009ade:	f107 0310 	add.w	r3, r7, #16
 8009ae2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ae6:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 8009aea:	2300      	movs	r3, #0
 8009aec:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 8009af2:	f107 0310 	add.w	r3, r7, #16
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fd fda8 	bl	800764c <metal_init>

  status = metal_register_generic_device(&shm_device);
 8009afc:	483a      	ldr	r0, [pc, #232]	; (8009be8 <OPENAMP_shmem_init+0x11c>)
 8009afe:	f7fd fc43 	bl	8007388 <metal_register_generic_device>
 8009b02:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <OPENAMP_shmem_init+0x42>
    return status;
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	e066      	b.n	8009bdc <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 8009b0e:	f107 0318 	add.w	r3, r7, #24
 8009b12:	461a      	mov	r2, r3
 8009b14:	4935      	ldr	r1, [pc, #212]	; (8009bec <OPENAMP_shmem_init+0x120>)
 8009b16:	4836      	ldr	r0, [pc, #216]	; (8009bf0 <OPENAMP_shmem_init+0x124>)
 8009b18:	f7fd fbf8 	bl	800730c <metal_device_open>
 8009b1c:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d001      	beq.n	8009b28 <OPENAMP_shmem_init+0x5c>
    return status;
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	e059      	b.n	8009bdc <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8009b28:	4a32      	ldr	r2, [pc, #200]	; (8009bf4 <OPENAMP_shmem_init+0x128>)
 8009b2a:	4b33      	ldr	r3, [pc, #204]	; (8009bf8 <OPENAMP_shmem_init+0x12c>)
 8009b2c:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8009b34:	4a31      	ldr	r2, [pc, #196]	; (8009bfc <OPENAMP_shmem_init+0x130>)
 8009b36:	4b2f      	ldr	r3, [pc, #188]	; (8009bf4 <OPENAMP_shmem_init+0x128>)
 8009b38:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9302      	str	r3, [sp, #8]
 8009b40:	2300      	movs	r3, #0
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	4a2a      	ldr	r2, [pc, #168]	; (8009bf8 <OPENAMP_shmem_init+0x12c>)
 8009b4e:	4929      	ldr	r1, [pc, #164]	; (8009bf4 <OPENAMP_shmem_init+0x128>)
 8009b50:	f7fd fdd7 	bl	8007702 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	2100      	movs	r1, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7ff ff9b 	bl	8009a94 <metal_device_io_region>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	4a27      	ldr	r2, [pc, #156]	; (8009c00 <OPENAMP_shmem_init+0x134>)
 8009b62:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8009b64:	4b26      	ldr	r3, [pc, #152]	; (8009c00 <OPENAMP_shmem_init+0x134>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d102      	bne.n	8009b72 <OPENAMP_shmem_init+0xa6>
    return -1;
 8009b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b70:	e034      	b.n	8009bdc <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 8009b72:	f107 0208 	add.w	r2, r7, #8
 8009b76:	f107 030c 	add.w	r3, r7, #12
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f929 	bl	8009dd4 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	4a1f      	ldr	r2, [pc, #124]	; (8009c04 <OPENAMP_shmem_init+0x138>)
 8009b86:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8009b88:	4b1e      	ldr	r3, [pc, #120]	; (8009c04 <OPENAMP_shmem_init+0x138>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d102      	bne.n	8009b96 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 8009b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b94:	e022      	b.n	8009bdc <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8009b9c:	4b19      	ldr	r3, [pc, #100]	; (8009c04 <OPENAMP_shmem_init+0x138>)
 8009b9e:	6819      	ldr	r1, [r3, #0]
 8009ba0:	4b18      	ldr	r3, [pc, #96]	; (8009c04 <OPENAMP_shmem_init+0x138>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	461c      	mov	r4, r3
 8009ba8:	2300      	movs	r3, #0
 8009baa:	9302      	str	r3, [sp, #8]
 8009bac:	2300      	movs	r3, #0
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	4623      	mov	r3, r4
 8009bb8:	f7fd fda3 	bl	8007702 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	2101      	movs	r1, #1
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff ff67 	bl	8009a94 <metal_device_io_region>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4a0f      	ldr	r2, [pc, #60]	; (8009c08 <OPENAMP_shmem_init+0x13c>)
 8009bca:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 8009bcc:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <OPENAMP_shmem_init+0x13c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <OPENAMP_shmem_init+0x10e>
    return -1;
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bd8:	e000      	b.n	8009bdc <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3724      	adds	r7, #36	; 0x24
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd90      	pop	{r4, r7, pc}
 8009be4:	0800b27c 	.word	0x0800b27c
 8009be8:	24000040 	.word	0x24000040
 8009bec:	0800b268 	.word	0x0800b268
 8009bf0:	0800b274 	.word	0x0800b274
 8009bf4:	38000400 	.word	0x38000400
 8009bf8:	2400855c 	.word	0x2400855c
 8009bfc:	38010000 	.word	0x38010000
 8009c00:	240084cc 	.word	0x240084cc
 8009c04:	240084d4 	.word	0x240084d4
 8009c08:	240084d0 	.word	0x240084d0

08009c0c <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 8009c0c:	b590      	push	{r4, r7, lr}
 8009c0e:	b08b      	sub	sp, #44	; 0x2c
 8009c10:	af04      	add	r7, sp, #16
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	613b      	str	r3, [r7, #16]
  int status = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 8009c22:	f7ff fed9 	bl	80099d8 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f7ff ff50 	bl	8009acc <OPENAMP_shmem_init>
 8009c2c:	60f8      	str	r0, [r7, #12]
  if(status)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	e06a      	b.n	8009d0e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	4b37      	ldr	r3, [pc, #220]	; (8009d18 <MX_OPENAMP_Init+0x10c>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f103 0218 	add.w	r2, r3, #24
 8009c42:	4b36      	ldr	r3, [pc, #216]	; (8009d1c <MX_OPENAMP_Init+0x110>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2100      	movs	r1, #0
 8009c48:	9102      	str	r1, [sp, #8]
 8009c4a:	4935      	ldr	r1, [pc, #212]	; (8009d20 <MX_OPENAMP_Init+0x114>)
 8009c4c:	9101      	str	r1, [sp, #4]
 8009c4e:	2100      	movs	r1, #0
 8009c50:	9100      	str	r1, [sp, #0]
 8009c52:	21ff      	movs	r1, #255	; 0xff
 8009c54:	f7fe f980 	bl	8007f58 <rproc_virtio_create_vdev>
 8009c58:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d102      	bne.n	8009c66 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 8009c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c64:	e053      	b.n	8009d0e <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8009c66:	6938      	ldr	r0, [r7, #16]
 8009c68:	f7fe fa91 	bl	800818e <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8009c6c:	4b2a      	ldr	r3, [pc, #168]	; (8009d18 <MX_OPENAMP_Init+0x10c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	3334      	adds	r3, #52	; 0x34
 8009c72:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8009c7c:	461c      	mov	r4, r3
 8009c7e:	4b29      	ldr	r3, [pc, #164]	; (8009d24 <MX_OPENAMP_Init+0x118>)
 8009c80:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8009c82:	697a      	ldr	r2, [r7, #20]
 8009c84:	6892      	ldr	r2, [r2, #8]
 8009c86:	6979      	ldr	r1, [r7, #20]
 8009c88:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8009c8a:	9102      	str	r1, [sp, #8]
 8009c8c:	9201      	str	r2, [sp, #4]
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	4623      	mov	r3, r4
 8009c92:	4602      	mov	r2, r0
 8009c94:	2100      	movs	r1, #0
 8009c96:	6938      	ldr	r0, [r7, #16]
 8009c98:	f7fe fa0c 	bl	80080b4 <rproc_virtio_init_vring>
 8009c9c:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	e032      	b.n	8009d0e <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8009ca8:	4b1b      	ldr	r3, [pc, #108]	; (8009d18 <MX_OPENAMP_Init+0x10c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3348      	adds	r3, #72	; 0x48
 8009cae:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8009cb8:	461c      	mov	r4, r3
 8009cba:	4b1a      	ldr	r3, [pc, #104]	; (8009d24 <MX_OPENAMP_Init+0x118>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	6892      	ldr	r2, [r2, #8]
 8009cc2:	6979      	ldr	r1, [r7, #20]
 8009cc4:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 8009cc6:	9102      	str	r1, [sp, #8]
 8009cc8:	9201      	str	r2, [sp, #4]
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	4623      	mov	r3, r4
 8009cce:	4602      	mov	r2, r0
 8009cd0:	2101      	movs	r1, #1
 8009cd2:	6938      	ldr	r0, [r7, #16]
 8009cd4:	f7fe f9ee 	bl	80080b4 <rproc_virtio_init_vring>
 8009cd8:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d001      	beq.n	8009ce4 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	e014      	b.n	8009d0e <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8009ce4:	4b10      	ldr	r3, [pc, #64]	; (8009d28 <MX_OPENAMP_Init+0x11c>)
 8009ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cea:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 8009cec:	4a0f      	ldr	r2, [pc, #60]	; (8009d2c <MX_OPENAMP_Init+0x120>)
 8009cee:	4b0e      	ldr	r3, [pc, #56]	; (8009d28 <MX_OPENAMP_Init+0x11c>)
 8009cf0:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	480e      	ldr	r0, [pc, #56]	; (8009d30 <MX_OPENAMP_Init+0x124>)
 8009cf6:	f7fe ff06 	bl	8008b06 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 8009cfa:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <MX_OPENAMP_Init+0x118>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a0c      	ldr	r2, [pc, #48]	; (8009d30 <MX_OPENAMP_Init+0x124>)
 8009d00:	9200      	str	r2, [sp, #0]
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	6939      	ldr	r1, [r7, #16]
 8009d06:	480b      	ldr	r0, [pc, #44]	; (8009d34 <MX_OPENAMP_Init+0x128>)
 8009d08:	f7ff f96c 	bl	8008fe4 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	371c      	adds	r7, #28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd90      	pop	{r4, r7, pc}
 8009d16:	bf00      	nop
 8009d18:	240084d4 	.word	0x240084d4
 8009d1c:	240084d0 	.word	0x240084d0
 8009d20:	08009a45 	.word	0x08009a45
 8009d24:	240084cc 	.word	0x240084cc
 8009d28:	38000400 	.word	0x38000400
 8009d2c:	38010000 	.word	0x38010000
 8009d30:	240084d8 	.word	0x240084d8
 8009d34:	240084e4 	.word	0x240084e4

08009d38 <OPENAMP_DeInit>:

void OPENAMP_DeInit()
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN PRE_OPENAMP_DEINIT */

  /* USER CODE END PRE_OPENAMP_DEINIT */

  rpmsg_deinit_vdev(&rvdev);
 8009d3c:	4803      	ldr	r0, [pc, #12]	; (8009d4c <OPENAMP_DeInit+0x14>)
 8009d3e:	f7ff fa3b 	bl	80091b8 <rpmsg_deinit_vdev>

  metal_finish();
 8009d42:	f7fd fcb5 	bl	80076b0 <metal_finish>

  /* USER CODE BEGIN POST_OPENAMP_DEINIT */

  /* USER CODE END POST_OPENAMP_DEINIT */
}
 8009d46:	bf00      	nop
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	240084e4 	.word	0x240084e4

08009d50 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af04      	add	r7, sp, #16
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
 8009d5c:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	9302      	str	r3, [sp, #8]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	9301      	str	r3, [sp, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d72:	68ba      	ldr	r2, [r7, #8]
 8009d74:	4904      	ldr	r1, [pc, #16]	; (8009d88 <OPENAMP_create_endpoint+0x38>)
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7fe fc96 	bl	80086a8 <rpmsg_create_ept>
 8009d7c:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8009d7e:	697b      	ldr	r3, [r7, #20]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	240084e4 	.word	0x240084e4

08009d8c <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8009d90:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <OPENAMP_check_for_message+0x14>)
 8009d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fe3b 	bl	8009a10 <MAILBOX_Poll>
}
 8009d9a:	bf00      	nop
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	240084e4 	.word	0x240084e4

08009da4 <OPENAMP_Wait_EndPointready>:

void OPENAMP_Wait_EndPointready(struct rpmsg_endpoint *rp_ept)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EP_READY */

  /* USER CODE END EP_READY */

  while(!is_rpmsg_ept_ready(rp_ept))
 8009dac:	e004      	b.n	8009db8 <OPENAMP_Wait_EndPointready+0x14>
  {
    /* USER CODE BEGIN 0 */

    /* USER CODE END 0 */
      MAILBOX_Poll(rvdev.vdev);
 8009dae:	4b08      	ldr	r3, [pc, #32]	; (8009dd0 <OPENAMP_Wait_EndPointready+0x2c>)
 8009db0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7ff fe2c 	bl	8009a10 <MAILBOX_Poll>
  while(!is_rpmsg_ept_ready(rp_ept))
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fe54 	bl	8009a66 <is_rpmsg_ept_ready>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d0f4      	beq.n	8009dae <OPENAMP_Wait_EndPointready+0xa>

    /* USER CODE BEGIN 1 */

    /* USER CODE END 1 */
  }
}
 8009dc4:	bf00      	nop
 8009dc6:	bf00      	nop
 8009dc8:	3708      	adds	r7, #8
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	240084e4 	.word	0x240084e4

08009dd4 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]

    /*
     * Currently the GCC linker doesn't initialize the resource_table global variable at startup
     * it is done here by the master application.
     */
	memset(&resource_table, '\0', sizeof(struct shared_resource_table));
 8009de0:	228c      	movs	r2, #140	; 0x8c
 8009de2:	2100      	movs	r1, #0
 8009de4:	481e      	ldr	r0, [pc, #120]	; (8009e60 <resource_table_init+0x8c>)
 8009de6:	f000 f9ab 	bl	800a140 <memset>
	resource_table.num = 1;
 8009dea:	4b1d      	ldr	r3, [pc, #116]	; (8009e60 <resource_table_init+0x8c>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	605a      	str	r2, [r3, #4]
	resource_table.version = 1;
 8009df0:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <resource_table_init+0x8c>)
 8009df2:	2201      	movs	r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
	resource_table.offset[0] = offsetof(struct shared_resource_table, vdev);
 8009df6:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <resource_table_init+0x8c>)
 8009df8:	2218      	movs	r2, #24
 8009dfa:	611a      	str	r2, [r3, #16]

	resource_table.vring0.da = VRING_TX_ADDRESS;
 8009dfc:	4b19      	ldr	r3, [pc, #100]	; (8009e64 <resource_table_init+0x90>)
 8009dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e02:	4a17      	ldr	r2, [pc, #92]	; (8009e60 <resource_table_init+0x8c>)
 8009e04:	6353      	str	r3, [r2, #52]	; 0x34
	resource_table.vring0.align = VRING_ALIGNMENT;
 8009e06:	4b16      	ldr	r3, [pc, #88]	; (8009e60 <resource_table_init+0x8c>)
 8009e08:	2204      	movs	r2, #4
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38
	resource_table.vring0.num = VRING_NUM_BUFFS;
 8009e0c:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <resource_table_init+0x8c>)
 8009e0e:	2204      	movs	r2, #4
 8009e10:	63da      	str	r2, [r3, #60]	; 0x3c
	resource_table.vring0.notifyid = VRING0_ID;
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <resource_table_init+0x8c>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40

	resource_table.vring1.da = VRING_RX_ADDRESS;
 8009e18:	4a12      	ldr	r2, [pc, #72]	; (8009e64 <resource_table_init+0x90>)
 8009e1a:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <resource_table_init+0x8c>)
 8009e1c:	649a      	str	r2, [r3, #72]	; 0x48
	resource_table.vring1.align = VRING_ALIGNMENT;
 8009e1e:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <resource_table_init+0x8c>)
 8009e20:	2204      	movs	r2, #4
 8009e22:	64da      	str	r2, [r3, #76]	; 0x4c
	resource_table.vring1.num = VRING_NUM_BUFFS;
 8009e24:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <resource_table_init+0x8c>)
 8009e26:	2204      	movs	r2, #4
 8009e28:	651a      	str	r2, [r3, #80]	; 0x50
	resource_table.vring1.notifyid = VRING1_ID;
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <resource_table_init+0x8c>)
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	655a      	str	r2, [r3, #84]	; 0x54

	resource_table.vdev.type = RSC_VDEV;
 8009e30:	4b0b      	ldr	r3, [pc, #44]	; (8009e60 <resource_table_init+0x8c>)
 8009e32:	2203      	movs	r2, #3
 8009e34:	619a      	str	r2, [r3, #24]
	resource_table.vdev.id = VIRTIO_ID_RPMSG_;
 8009e36:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <resource_table_init+0x8c>)
 8009e38:	2207      	movs	r2, #7
 8009e3a:	61da      	str	r2, [r3, #28]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
 8009e3c:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <resource_table_init+0x8c>)
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
 8009e44:	4b06      	ldr	r3, [pc, #24]	; (8009e60 <resource_table_init+0x8c>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	228c      	movs	r2, #140	; 0x8c
 8009e4e:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	4a03      	ldr	r2, [pc, #12]	; (8009e60 <resource_table_init+0x8c>)
 8009e54:	601a      	str	r2, [r3, #0]
}
 8009e56:	bf00      	nop
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	38000000 	.word	0x38000000
 8009e64:	38000400 	.word	0x38000400

08009e68 <__assert_func>:
 8009e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e6a:	4614      	mov	r4, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <__assert_func+0x2c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4605      	mov	r5, r0
 8009e74:	68d8      	ldr	r0, [r3, #12]
 8009e76:	b14c      	cbz	r4, 8009e8c <__assert_func+0x24>
 8009e78:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <__assert_func+0x30>)
 8009e7a:	9100      	str	r1, [sp, #0]
 8009e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e80:	4906      	ldr	r1, [pc, #24]	; (8009e9c <__assert_func+0x34>)
 8009e82:	462b      	mov	r3, r5
 8009e84:	f000 f8e4 	bl	800a050 <fiprintf>
 8009e88:	f000 fee6 	bl	800ac58 <abort>
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <__assert_func+0x38>)
 8009e8e:	461c      	mov	r4, r3
 8009e90:	e7f3      	b.n	8009e7a <__assert_func+0x12>
 8009e92:	bf00      	nop
 8009e94:	240000bc 	.word	0x240000bc
 8009e98:	0800b2fb 	.word	0x0800b2fb
 8009e9c:	0800b308 	.word	0x0800b308
 8009ea0:	0800b336 	.word	0x0800b336

08009ea4 <std>:
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	b510      	push	{r4, lr}
 8009ea8:	4604      	mov	r4, r0
 8009eaa:	e9c0 3300 	strd	r3, r3, [r0]
 8009eae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009eb2:	6083      	str	r3, [r0, #8]
 8009eb4:	8181      	strh	r1, [r0, #12]
 8009eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8009eb8:	81c2      	strh	r2, [r0, #14]
 8009eba:	6183      	str	r3, [r0, #24]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	2208      	movs	r2, #8
 8009ec0:	305c      	adds	r0, #92	; 0x5c
 8009ec2:	f000 f93d 	bl	800a140 <memset>
 8009ec6:	4b05      	ldr	r3, [pc, #20]	; (8009edc <std+0x38>)
 8009ec8:	6263      	str	r3, [r4, #36]	; 0x24
 8009eca:	4b05      	ldr	r3, [pc, #20]	; (8009ee0 <std+0x3c>)
 8009ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ece:	4b05      	ldr	r3, [pc, #20]	; (8009ee4 <std+0x40>)
 8009ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ed2:	4b05      	ldr	r3, [pc, #20]	; (8009ee8 <std+0x44>)
 8009ed4:	6224      	str	r4, [r4, #32]
 8009ed6:	6323      	str	r3, [r4, #48]	; 0x30
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	bf00      	nop
 8009edc:	0800a9e1 	.word	0x0800a9e1
 8009ee0:	0800aa03 	.word	0x0800aa03
 8009ee4:	0800aa3b 	.word	0x0800aa3b
 8009ee8:	0800aa5f 	.word	0x0800aa5f

08009eec <_cleanup_r>:
 8009eec:	4901      	ldr	r1, [pc, #4]	; (8009ef4 <_cleanup_r+0x8>)
 8009eee:	f000 b8c1 	b.w	800a074 <_fwalk_reent>
 8009ef2:	bf00      	nop
 8009ef4:	0800ad95 	.word	0x0800ad95

08009ef8 <__sfmoreglue>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	2268      	movs	r2, #104	; 0x68
 8009efc:	1e4d      	subs	r5, r1, #1
 8009efe:	4355      	muls	r5, r2
 8009f00:	460e      	mov	r6, r1
 8009f02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009f06:	f000 f98f 	bl	800a228 <_malloc_r>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	b140      	cbz	r0, 8009f20 <__sfmoreglue+0x28>
 8009f0e:	2100      	movs	r1, #0
 8009f10:	e9c0 1600 	strd	r1, r6, [r0]
 8009f14:	300c      	adds	r0, #12
 8009f16:	60a0      	str	r0, [r4, #8]
 8009f18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f1c:	f000 f910 	bl	800a140 <memset>
 8009f20:	4620      	mov	r0, r4
 8009f22:	bd70      	pop	{r4, r5, r6, pc}

08009f24 <__sfp_lock_acquire>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__sfp_lock_acquire+0x8>)
 8009f26:	f000 b8ea 	b.w	800a0fe <__retarget_lock_acquire_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	24008561 	.word	0x24008561

08009f30 <__sfp_lock_release>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__sfp_lock_release+0x8>)
 8009f32:	f000 b8e5 	b.w	800a100 <__retarget_lock_release_recursive>
 8009f36:	bf00      	nop
 8009f38:	24008561 	.word	0x24008561

08009f3c <__sinit_lock_acquire>:
 8009f3c:	4801      	ldr	r0, [pc, #4]	; (8009f44 <__sinit_lock_acquire+0x8>)
 8009f3e:	f000 b8de 	b.w	800a0fe <__retarget_lock_acquire_recursive>
 8009f42:	bf00      	nop
 8009f44:	24008562 	.word	0x24008562

08009f48 <__sinit_lock_release>:
 8009f48:	4801      	ldr	r0, [pc, #4]	; (8009f50 <__sinit_lock_release+0x8>)
 8009f4a:	f000 b8d9 	b.w	800a100 <__retarget_lock_release_recursive>
 8009f4e:	bf00      	nop
 8009f50:	24008562 	.word	0x24008562

08009f54 <__sinit>:
 8009f54:	b510      	push	{r4, lr}
 8009f56:	4604      	mov	r4, r0
 8009f58:	f7ff fff0 	bl	8009f3c <__sinit_lock_acquire>
 8009f5c:	69a3      	ldr	r3, [r4, #24]
 8009f5e:	b11b      	cbz	r3, 8009f68 <__sinit+0x14>
 8009f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f64:	f7ff bff0 	b.w	8009f48 <__sinit_lock_release>
 8009f68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f6c:	6523      	str	r3, [r4, #80]	; 0x50
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <__sinit+0x68>)
 8009f70:	4a13      	ldr	r2, [pc, #76]	; (8009fc0 <__sinit+0x6c>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f76:	42a3      	cmp	r3, r4
 8009f78:	bf04      	itt	eq
 8009f7a:	2301      	moveq	r3, #1
 8009f7c:	61a3      	streq	r3, [r4, #24]
 8009f7e:	4620      	mov	r0, r4
 8009f80:	f000 f820 	bl	8009fc4 <__sfp>
 8009f84:	6060      	str	r0, [r4, #4]
 8009f86:	4620      	mov	r0, r4
 8009f88:	f000 f81c 	bl	8009fc4 <__sfp>
 8009f8c:	60a0      	str	r0, [r4, #8]
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 f818 	bl	8009fc4 <__sfp>
 8009f94:	2200      	movs	r2, #0
 8009f96:	60e0      	str	r0, [r4, #12]
 8009f98:	2104      	movs	r1, #4
 8009f9a:	6860      	ldr	r0, [r4, #4]
 8009f9c:	f7ff ff82 	bl	8009ea4 <std>
 8009fa0:	68a0      	ldr	r0, [r4, #8]
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	2109      	movs	r1, #9
 8009fa6:	f7ff ff7d 	bl	8009ea4 <std>
 8009faa:	68e0      	ldr	r0, [r4, #12]
 8009fac:	2202      	movs	r2, #2
 8009fae:	2112      	movs	r1, #18
 8009fb0:	f7ff ff78 	bl	8009ea4 <std>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	61a3      	str	r3, [r4, #24]
 8009fb8:	e7d2      	b.n	8009f60 <__sinit+0xc>
 8009fba:	bf00      	nop
 8009fbc:	0800b398 	.word	0x0800b398
 8009fc0:	08009eed 	.word	0x08009eed

08009fc4 <__sfp>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	f7ff ffac 	bl	8009f24 <__sfp_lock_acquire>
 8009fcc:	4b1e      	ldr	r3, [pc, #120]	; (800a048 <__sfp+0x84>)
 8009fce:	681e      	ldr	r6, [r3, #0]
 8009fd0:	69b3      	ldr	r3, [r6, #24]
 8009fd2:	b913      	cbnz	r3, 8009fda <__sfp+0x16>
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f7ff ffbd 	bl	8009f54 <__sinit>
 8009fda:	3648      	adds	r6, #72	; 0x48
 8009fdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	d503      	bpl.n	8009fec <__sfp+0x28>
 8009fe4:	6833      	ldr	r3, [r6, #0]
 8009fe6:	b30b      	cbz	r3, 800a02c <__sfp+0x68>
 8009fe8:	6836      	ldr	r6, [r6, #0]
 8009fea:	e7f7      	b.n	8009fdc <__sfp+0x18>
 8009fec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ff0:	b9d5      	cbnz	r5, 800a028 <__sfp+0x64>
 8009ff2:	4b16      	ldr	r3, [pc, #88]	; (800a04c <__sfp+0x88>)
 8009ff4:	60e3      	str	r3, [r4, #12]
 8009ff6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ffa:	6665      	str	r5, [r4, #100]	; 0x64
 8009ffc:	f000 f87e 	bl	800a0fc <__retarget_lock_init_recursive>
 800a000:	f7ff ff96 	bl	8009f30 <__sfp_lock_release>
 800a004:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a008:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a00c:	6025      	str	r5, [r4, #0]
 800a00e:	61a5      	str	r5, [r4, #24]
 800a010:	2208      	movs	r2, #8
 800a012:	4629      	mov	r1, r5
 800a014:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a018:	f000 f892 	bl	800a140 <memset>
 800a01c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a020:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a024:	4620      	mov	r0, r4
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	3468      	adds	r4, #104	; 0x68
 800a02a:	e7d9      	b.n	8009fe0 <__sfp+0x1c>
 800a02c:	2104      	movs	r1, #4
 800a02e:	4638      	mov	r0, r7
 800a030:	f7ff ff62 	bl	8009ef8 <__sfmoreglue>
 800a034:	4604      	mov	r4, r0
 800a036:	6030      	str	r0, [r6, #0]
 800a038:	2800      	cmp	r0, #0
 800a03a:	d1d5      	bne.n	8009fe8 <__sfp+0x24>
 800a03c:	f7ff ff78 	bl	8009f30 <__sfp_lock_release>
 800a040:	230c      	movs	r3, #12
 800a042:	603b      	str	r3, [r7, #0]
 800a044:	e7ee      	b.n	800a024 <__sfp+0x60>
 800a046:	bf00      	nop
 800a048:	0800b398 	.word	0x0800b398
 800a04c:	ffff0001 	.word	0xffff0001

0800a050 <fiprintf>:
 800a050:	b40e      	push	{r1, r2, r3}
 800a052:	b503      	push	{r0, r1, lr}
 800a054:	4601      	mov	r1, r0
 800a056:	ab03      	add	r3, sp, #12
 800a058:	4805      	ldr	r0, [pc, #20]	; (800a070 <fiprintf+0x20>)
 800a05a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a05e:	6800      	ldr	r0, [r0, #0]
 800a060:	9301      	str	r3, [sp, #4]
 800a062:	f000 f97f 	bl	800a364 <_vfiprintf_r>
 800a066:	b002      	add	sp, #8
 800a068:	f85d eb04 	ldr.w	lr, [sp], #4
 800a06c:	b003      	add	sp, #12
 800a06e:	4770      	bx	lr
 800a070:	240000bc 	.word	0x240000bc

0800a074 <_fwalk_reent>:
 800a074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a078:	4606      	mov	r6, r0
 800a07a:	4688      	mov	r8, r1
 800a07c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a080:	2700      	movs	r7, #0
 800a082:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a086:	f1b9 0901 	subs.w	r9, r9, #1
 800a08a:	d505      	bpl.n	800a098 <_fwalk_reent+0x24>
 800a08c:	6824      	ldr	r4, [r4, #0]
 800a08e:	2c00      	cmp	r4, #0
 800a090:	d1f7      	bne.n	800a082 <_fwalk_reent+0xe>
 800a092:	4638      	mov	r0, r7
 800a094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a098:	89ab      	ldrh	r3, [r5, #12]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d907      	bls.n	800a0ae <_fwalk_reent+0x3a>
 800a09e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	d003      	beq.n	800a0ae <_fwalk_reent+0x3a>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	47c0      	blx	r8
 800a0ac:	4307      	orrs	r7, r0
 800a0ae:	3568      	adds	r5, #104	; 0x68
 800a0b0:	e7e9      	b.n	800a086 <_fwalk_reent+0x12>
	...

0800a0b4 <__libc_init_array>:
 800a0b4:	b570      	push	{r4, r5, r6, lr}
 800a0b6:	4d0d      	ldr	r5, [pc, #52]	; (800a0ec <__libc_init_array+0x38>)
 800a0b8:	4c0d      	ldr	r4, [pc, #52]	; (800a0f0 <__libc_init_array+0x3c>)
 800a0ba:	1b64      	subs	r4, r4, r5
 800a0bc:	10a4      	asrs	r4, r4, #2
 800a0be:	2600      	movs	r6, #0
 800a0c0:	42a6      	cmp	r6, r4
 800a0c2:	d109      	bne.n	800a0d8 <__libc_init_array+0x24>
 800a0c4:	4d0b      	ldr	r5, [pc, #44]	; (800a0f4 <__libc_init_array+0x40>)
 800a0c6:	4c0c      	ldr	r4, [pc, #48]	; (800a0f8 <__libc_init_array+0x44>)
 800a0c8:	f000 ff9c 	bl	800b004 <_init>
 800a0cc:	1b64      	subs	r4, r4, r5
 800a0ce:	10a4      	asrs	r4, r4, #2
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	42a6      	cmp	r6, r4
 800a0d4:	d105      	bne.n	800a0e2 <__libc_init_array+0x2e>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}
 800a0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0dc:	4798      	blx	r3
 800a0de:	3601      	adds	r6, #1
 800a0e0:	e7ee      	b.n	800a0c0 <__libc_init_array+0xc>
 800a0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0e6:	4798      	blx	r3
 800a0e8:	3601      	adds	r6, #1
 800a0ea:	e7f2      	b.n	800a0d2 <__libc_init_array+0x1e>
 800a0ec:	0800b3d0 	.word	0x0800b3d0
 800a0f0:	0800b3d0 	.word	0x0800b3d0
 800a0f4:	0800b3d0 	.word	0x0800b3d0
 800a0f8:	0800b3d4 	.word	0x0800b3d4

0800a0fc <__retarget_lock_init_recursive>:
 800a0fc:	4770      	bx	lr

0800a0fe <__retarget_lock_acquire_recursive>:
 800a0fe:	4770      	bx	lr

0800a100 <__retarget_lock_release_recursive>:
 800a100:	4770      	bx	lr
	...

0800a104 <malloc>:
 800a104:	4b02      	ldr	r3, [pc, #8]	; (800a110 <malloc+0xc>)
 800a106:	4601      	mov	r1, r0
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	f000 b88d 	b.w	800a228 <_malloc_r>
 800a10e:	bf00      	nop
 800a110:	240000bc 	.word	0x240000bc

0800a114 <free>:
 800a114:	4b02      	ldr	r3, [pc, #8]	; (800a120 <free+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f000 b819 	b.w	800a150 <_free_r>
 800a11e:	bf00      	nop
 800a120:	240000bc 	.word	0x240000bc

0800a124 <memcpy>:
 800a124:	440a      	add	r2, r1
 800a126:	4291      	cmp	r1, r2
 800a128:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a12c:	d100      	bne.n	800a130 <memcpy+0xc>
 800a12e:	4770      	bx	lr
 800a130:	b510      	push	{r4, lr}
 800a132:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a13a:	4291      	cmp	r1, r2
 800a13c:	d1f9      	bne.n	800a132 <memcpy+0xe>
 800a13e:	bd10      	pop	{r4, pc}

0800a140 <memset>:
 800a140:	4402      	add	r2, r0
 800a142:	4603      	mov	r3, r0
 800a144:	4293      	cmp	r3, r2
 800a146:	d100      	bne.n	800a14a <memset+0xa>
 800a148:	4770      	bx	lr
 800a14a:	f803 1b01 	strb.w	r1, [r3], #1
 800a14e:	e7f9      	b.n	800a144 <memset+0x4>

0800a150 <_free_r>:
 800a150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a152:	2900      	cmp	r1, #0
 800a154:	d044      	beq.n	800a1e0 <_free_r+0x90>
 800a156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a15a:	9001      	str	r0, [sp, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f1a1 0404 	sub.w	r4, r1, #4
 800a162:	bfb8      	it	lt
 800a164:	18e4      	addlt	r4, r4, r3
 800a166:	f000 fec9 	bl	800aefc <__malloc_lock>
 800a16a:	4a1e      	ldr	r2, [pc, #120]	; (800a1e4 <_free_r+0x94>)
 800a16c:	9801      	ldr	r0, [sp, #4]
 800a16e:	6813      	ldr	r3, [r2, #0]
 800a170:	b933      	cbnz	r3, 800a180 <_free_r+0x30>
 800a172:	6063      	str	r3, [r4, #4]
 800a174:	6014      	str	r4, [r2, #0]
 800a176:	b003      	add	sp, #12
 800a178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a17c:	f000 bec4 	b.w	800af08 <__malloc_unlock>
 800a180:	42a3      	cmp	r3, r4
 800a182:	d908      	bls.n	800a196 <_free_r+0x46>
 800a184:	6825      	ldr	r5, [r4, #0]
 800a186:	1961      	adds	r1, r4, r5
 800a188:	428b      	cmp	r3, r1
 800a18a:	bf01      	itttt	eq
 800a18c:	6819      	ldreq	r1, [r3, #0]
 800a18e:	685b      	ldreq	r3, [r3, #4]
 800a190:	1949      	addeq	r1, r1, r5
 800a192:	6021      	streq	r1, [r4, #0]
 800a194:	e7ed      	b.n	800a172 <_free_r+0x22>
 800a196:	461a      	mov	r2, r3
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	b10b      	cbz	r3, 800a1a0 <_free_r+0x50>
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	d9fa      	bls.n	800a196 <_free_r+0x46>
 800a1a0:	6811      	ldr	r1, [r2, #0]
 800a1a2:	1855      	adds	r5, r2, r1
 800a1a4:	42a5      	cmp	r5, r4
 800a1a6:	d10b      	bne.n	800a1c0 <_free_r+0x70>
 800a1a8:	6824      	ldr	r4, [r4, #0]
 800a1aa:	4421      	add	r1, r4
 800a1ac:	1854      	adds	r4, r2, r1
 800a1ae:	42a3      	cmp	r3, r4
 800a1b0:	6011      	str	r1, [r2, #0]
 800a1b2:	d1e0      	bne.n	800a176 <_free_r+0x26>
 800a1b4:	681c      	ldr	r4, [r3, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	6053      	str	r3, [r2, #4]
 800a1ba:	4421      	add	r1, r4
 800a1bc:	6011      	str	r1, [r2, #0]
 800a1be:	e7da      	b.n	800a176 <_free_r+0x26>
 800a1c0:	d902      	bls.n	800a1c8 <_free_r+0x78>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	6003      	str	r3, [r0, #0]
 800a1c6:	e7d6      	b.n	800a176 <_free_r+0x26>
 800a1c8:	6825      	ldr	r5, [r4, #0]
 800a1ca:	1961      	adds	r1, r4, r5
 800a1cc:	428b      	cmp	r3, r1
 800a1ce:	bf04      	itt	eq
 800a1d0:	6819      	ldreq	r1, [r3, #0]
 800a1d2:	685b      	ldreq	r3, [r3, #4]
 800a1d4:	6063      	str	r3, [r4, #4]
 800a1d6:	bf04      	itt	eq
 800a1d8:	1949      	addeq	r1, r1, r5
 800a1da:	6021      	streq	r1, [r4, #0]
 800a1dc:	6054      	str	r4, [r2, #4]
 800a1de:	e7ca      	b.n	800a176 <_free_r+0x26>
 800a1e0:	b003      	add	sp, #12
 800a1e2:	bd30      	pop	{r4, r5, pc}
 800a1e4:	24008564 	.word	0x24008564

0800a1e8 <sbrk_aligned>:
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	4e0e      	ldr	r6, [pc, #56]	; (800a224 <sbrk_aligned+0x3c>)
 800a1ec:	460c      	mov	r4, r1
 800a1ee:	6831      	ldr	r1, [r6, #0]
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	b911      	cbnz	r1, 800a1fa <sbrk_aligned+0x12>
 800a1f4:	f000 fbe4 	bl	800a9c0 <_sbrk_r>
 800a1f8:	6030      	str	r0, [r6, #0]
 800a1fa:	4621      	mov	r1, r4
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	f000 fbdf 	bl	800a9c0 <_sbrk_r>
 800a202:	1c43      	adds	r3, r0, #1
 800a204:	d00a      	beq.n	800a21c <sbrk_aligned+0x34>
 800a206:	1cc4      	adds	r4, r0, #3
 800a208:	f024 0403 	bic.w	r4, r4, #3
 800a20c:	42a0      	cmp	r0, r4
 800a20e:	d007      	beq.n	800a220 <sbrk_aligned+0x38>
 800a210:	1a21      	subs	r1, r4, r0
 800a212:	4628      	mov	r0, r5
 800a214:	f000 fbd4 	bl	800a9c0 <_sbrk_r>
 800a218:	3001      	adds	r0, #1
 800a21a:	d101      	bne.n	800a220 <sbrk_aligned+0x38>
 800a21c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a220:	4620      	mov	r0, r4
 800a222:	bd70      	pop	{r4, r5, r6, pc}
 800a224:	24008568 	.word	0x24008568

0800a228 <_malloc_r>:
 800a228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a22c:	1ccd      	adds	r5, r1, #3
 800a22e:	f025 0503 	bic.w	r5, r5, #3
 800a232:	3508      	adds	r5, #8
 800a234:	2d0c      	cmp	r5, #12
 800a236:	bf38      	it	cc
 800a238:	250c      	movcc	r5, #12
 800a23a:	2d00      	cmp	r5, #0
 800a23c:	4607      	mov	r7, r0
 800a23e:	db01      	blt.n	800a244 <_malloc_r+0x1c>
 800a240:	42a9      	cmp	r1, r5
 800a242:	d905      	bls.n	800a250 <_malloc_r+0x28>
 800a244:	230c      	movs	r3, #12
 800a246:	603b      	str	r3, [r7, #0]
 800a248:	2600      	movs	r6, #0
 800a24a:	4630      	mov	r0, r6
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	4e2e      	ldr	r6, [pc, #184]	; (800a30c <_malloc_r+0xe4>)
 800a252:	f000 fe53 	bl	800aefc <__malloc_lock>
 800a256:	6833      	ldr	r3, [r6, #0]
 800a258:	461c      	mov	r4, r3
 800a25a:	bb34      	cbnz	r4, 800a2aa <_malloc_r+0x82>
 800a25c:	4629      	mov	r1, r5
 800a25e:	4638      	mov	r0, r7
 800a260:	f7ff ffc2 	bl	800a1e8 <sbrk_aligned>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	4604      	mov	r4, r0
 800a268:	d14d      	bne.n	800a306 <_malloc_r+0xde>
 800a26a:	6834      	ldr	r4, [r6, #0]
 800a26c:	4626      	mov	r6, r4
 800a26e:	2e00      	cmp	r6, #0
 800a270:	d140      	bne.n	800a2f4 <_malloc_r+0xcc>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	4631      	mov	r1, r6
 800a276:	4638      	mov	r0, r7
 800a278:	eb04 0803 	add.w	r8, r4, r3
 800a27c:	f000 fba0 	bl	800a9c0 <_sbrk_r>
 800a280:	4580      	cmp	r8, r0
 800a282:	d13a      	bne.n	800a2fa <_malloc_r+0xd2>
 800a284:	6821      	ldr	r1, [r4, #0]
 800a286:	3503      	adds	r5, #3
 800a288:	1a6d      	subs	r5, r5, r1
 800a28a:	f025 0503 	bic.w	r5, r5, #3
 800a28e:	3508      	adds	r5, #8
 800a290:	2d0c      	cmp	r5, #12
 800a292:	bf38      	it	cc
 800a294:	250c      	movcc	r5, #12
 800a296:	4629      	mov	r1, r5
 800a298:	4638      	mov	r0, r7
 800a29a:	f7ff ffa5 	bl	800a1e8 <sbrk_aligned>
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d02b      	beq.n	800a2fa <_malloc_r+0xd2>
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	442b      	add	r3, r5
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	e00e      	b.n	800a2c8 <_malloc_r+0xa0>
 800a2aa:	6822      	ldr	r2, [r4, #0]
 800a2ac:	1b52      	subs	r2, r2, r5
 800a2ae:	d41e      	bmi.n	800a2ee <_malloc_r+0xc6>
 800a2b0:	2a0b      	cmp	r2, #11
 800a2b2:	d916      	bls.n	800a2e2 <_malloc_r+0xba>
 800a2b4:	1961      	adds	r1, r4, r5
 800a2b6:	42a3      	cmp	r3, r4
 800a2b8:	6025      	str	r5, [r4, #0]
 800a2ba:	bf18      	it	ne
 800a2bc:	6059      	strne	r1, [r3, #4]
 800a2be:	6863      	ldr	r3, [r4, #4]
 800a2c0:	bf08      	it	eq
 800a2c2:	6031      	streq	r1, [r6, #0]
 800a2c4:	5162      	str	r2, [r4, r5]
 800a2c6:	604b      	str	r3, [r1, #4]
 800a2c8:	4638      	mov	r0, r7
 800a2ca:	f104 060b 	add.w	r6, r4, #11
 800a2ce:	f000 fe1b 	bl	800af08 <__malloc_unlock>
 800a2d2:	f026 0607 	bic.w	r6, r6, #7
 800a2d6:	1d23      	adds	r3, r4, #4
 800a2d8:	1af2      	subs	r2, r6, r3
 800a2da:	d0b6      	beq.n	800a24a <_malloc_r+0x22>
 800a2dc:	1b9b      	subs	r3, r3, r6
 800a2de:	50a3      	str	r3, [r4, r2]
 800a2e0:	e7b3      	b.n	800a24a <_malloc_r+0x22>
 800a2e2:	6862      	ldr	r2, [r4, #4]
 800a2e4:	42a3      	cmp	r3, r4
 800a2e6:	bf0c      	ite	eq
 800a2e8:	6032      	streq	r2, [r6, #0]
 800a2ea:	605a      	strne	r2, [r3, #4]
 800a2ec:	e7ec      	b.n	800a2c8 <_malloc_r+0xa0>
 800a2ee:	4623      	mov	r3, r4
 800a2f0:	6864      	ldr	r4, [r4, #4]
 800a2f2:	e7b2      	b.n	800a25a <_malloc_r+0x32>
 800a2f4:	4634      	mov	r4, r6
 800a2f6:	6876      	ldr	r6, [r6, #4]
 800a2f8:	e7b9      	b.n	800a26e <_malloc_r+0x46>
 800a2fa:	230c      	movs	r3, #12
 800a2fc:	603b      	str	r3, [r7, #0]
 800a2fe:	4638      	mov	r0, r7
 800a300:	f000 fe02 	bl	800af08 <__malloc_unlock>
 800a304:	e7a1      	b.n	800a24a <_malloc_r+0x22>
 800a306:	6025      	str	r5, [r4, #0]
 800a308:	e7de      	b.n	800a2c8 <_malloc_r+0xa0>
 800a30a:	bf00      	nop
 800a30c:	24008564 	.word	0x24008564

0800a310 <__sfputc_r>:
 800a310:	6893      	ldr	r3, [r2, #8]
 800a312:	3b01      	subs	r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	b410      	push	{r4}
 800a318:	6093      	str	r3, [r2, #8]
 800a31a:	da08      	bge.n	800a32e <__sfputc_r+0x1e>
 800a31c:	6994      	ldr	r4, [r2, #24]
 800a31e:	42a3      	cmp	r3, r4
 800a320:	db01      	blt.n	800a326 <__sfputc_r+0x16>
 800a322:	290a      	cmp	r1, #10
 800a324:	d103      	bne.n	800a32e <__sfputc_r+0x1e>
 800a326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a32a:	f000 bbc3 	b.w	800aab4 <__swbuf_r>
 800a32e:	6813      	ldr	r3, [r2, #0]
 800a330:	1c58      	adds	r0, r3, #1
 800a332:	6010      	str	r0, [r2, #0]
 800a334:	7019      	strb	r1, [r3, #0]
 800a336:	4608      	mov	r0, r1
 800a338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <__sfputs_r>:
 800a33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a340:	4606      	mov	r6, r0
 800a342:	460f      	mov	r7, r1
 800a344:	4614      	mov	r4, r2
 800a346:	18d5      	adds	r5, r2, r3
 800a348:	42ac      	cmp	r4, r5
 800a34a:	d101      	bne.n	800a350 <__sfputs_r+0x12>
 800a34c:	2000      	movs	r0, #0
 800a34e:	e007      	b.n	800a360 <__sfputs_r+0x22>
 800a350:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a354:	463a      	mov	r2, r7
 800a356:	4630      	mov	r0, r6
 800a358:	f7ff ffda 	bl	800a310 <__sfputc_r>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d1f3      	bne.n	800a348 <__sfputs_r+0xa>
 800a360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a364 <_vfiprintf_r>:
 800a364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a368:	460d      	mov	r5, r1
 800a36a:	b09d      	sub	sp, #116	; 0x74
 800a36c:	4614      	mov	r4, r2
 800a36e:	4698      	mov	r8, r3
 800a370:	4606      	mov	r6, r0
 800a372:	b118      	cbz	r0, 800a37c <_vfiprintf_r+0x18>
 800a374:	6983      	ldr	r3, [r0, #24]
 800a376:	b90b      	cbnz	r3, 800a37c <_vfiprintf_r+0x18>
 800a378:	f7ff fdec 	bl	8009f54 <__sinit>
 800a37c:	4b89      	ldr	r3, [pc, #548]	; (800a5a4 <_vfiprintf_r+0x240>)
 800a37e:	429d      	cmp	r5, r3
 800a380:	d11b      	bne.n	800a3ba <_vfiprintf_r+0x56>
 800a382:	6875      	ldr	r5, [r6, #4]
 800a384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a386:	07d9      	lsls	r1, r3, #31
 800a388:	d405      	bmi.n	800a396 <_vfiprintf_r+0x32>
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	059a      	lsls	r2, r3, #22
 800a38e:	d402      	bmi.n	800a396 <_vfiprintf_r+0x32>
 800a390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a392:	f7ff feb4 	bl	800a0fe <__retarget_lock_acquire_recursive>
 800a396:	89ab      	ldrh	r3, [r5, #12]
 800a398:	071b      	lsls	r3, r3, #28
 800a39a:	d501      	bpl.n	800a3a0 <_vfiprintf_r+0x3c>
 800a39c:	692b      	ldr	r3, [r5, #16]
 800a39e:	b9eb      	cbnz	r3, 800a3dc <_vfiprintf_r+0x78>
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	f000 fbea 	bl	800ab7c <__swsetup_r>
 800a3a8:	b1c0      	cbz	r0, 800a3dc <_vfiprintf_r+0x78>
 800a3aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3ac:	07dc      	lsls	r4, r3, #31
 800a3ae:	d50e      	bpl.n	800a3ce <_vfiprintf_r+0x6a>
 800a3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b4:	b01d      	add	sp, #116	; 0x74
 800a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ba:	4b7b      	ldr	r3, [pc, #492]	; (800a5a8 <_vfiprintf_r+0x244>)
 800a3bc:	429d      	cmp	r5, r3
 800a3be:	d101      	bne.n	800a3c4 <_vfiprintf_r+0x60>
 800a3c0:	68b5      	ldr	r5, [r6, #8]
 800a3c2:	e7df      	b.n	800a384 <_vfiprintf_r+0x20>
 800a3c4:	4b79      	ldr	r3, [pc, #484]	; (800a5ac <_vfiprintf_r+0x248>)
 800a3c6:	429d      	cmp	r5, r3
 800a3c8:	bf08      	it	eq
 800a3ca:	68f5      	ldreq	r5, [r6, #12]
 800a3cc:	e7da      	b.n	800a384 <_vfiprintf_r+0x20>
 800a3ce:	89ab      	ldrh	r3, [r5, #12]
 800a3d0:	0598      	lsls	r0, r3, #22
 800a3d2:	d4ed      	bmi.n	800a3b0 <_vfiprintf_r+0x4c>
 800a3d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3d6:	f7ff fe93 	bl	800a100 <__retarget_lock_release_recursive>
 800a3da:	e7e9      	b.n	800a3b0 <_vfiprintf_r+0x4c>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	9309      	str	r3, [sp, #36]	; 0x24
 800a3e0:	2320      	movs	r3, #32
 800a3e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ea:	2330      	movs	r3, #48	; 0x30
 800a3ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5b0 <_vfiprintf_r+0x24c>
 800a3f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3f4:	f04f 0901 	mov.w	r9, #1
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	469a      	mov	sl, r3
 800a3fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a400:	b10a      	cbz	r2, 800a406 <_vfiprintf_r+0xa2>
 800a402:	2a25      	cmp	r2, #37	; 0x25
 800a404:	d1f9      	bne.n	800a3fa <_vfiprintf_r+0x96>
 800a406:	ebba 0b04 	subs.w	fp, sl, r4
 800a40a:	d00b      	beq.n	800a424 <_vfiprintf_r+0xc0>
 800a40c:	465b      	mov	r3, fp
 800a40e:	4622      	mov	r2, r4
 800a410:	4629      	mov	r1, r5
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ff93 	bl	800a33e <__sfputs_r>
 800a418:	3001      	adds	r0, #1
 800a41a:	f000 80aa 	beq.w	800a572 <_vfiprintf_r+0x20e>
 800a41e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a420:	445a      	add	r2, fp
 800a422:	9209      	str	r2, [sp, #36]	; 0x24
 800a424:	f89a 3000 	ldrb.w	r3, [sl]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f000 80a2 	beq.w	800a572 <_vfiprintf_r+0x20e>
 800a42e:	2300      	movs	r3, #0
 800a430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a438:	f10a 0a01 	add.w	sl, sl, #1
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	9307      	str	r3, [sp, #28]
 800a440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a444:	931a      	str	r3, [sp, #104]	; 0x68
 800a446:	4654      	mov	r4, sl
 800a448:	2205      	movs	r2, #5
 800a44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a44e:	4858      	ldr	r0, [pc, #352]	; (800a5b0 <_vfiprintf_r+0x24c>)
 800a450:	f7f5 ff56 	bl	8000300 <memchr>
 800a454:	9a04      	ldr	r2, [sp, #16]
 800a456:	b9d8      	cbnz	r0, 800a490 <_vfiprintf_r+0x12c>
 800a458:	06d1      	lsls	r1, r2, #27
 800a45a:	bf44      	itt	mi
 800a45c:	2320      	movmi	r3, #32
 800a45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a462:	0713      	lsls	r3, r2, #28
 800a464:	bf44      	itt	mi
 800a466:	232b      	movmi	r3, #43	; 0x2b
 800a468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a46c:	f89a 3000 	ldrb.w	r3, [sl]
 800a470:	2b2a      	cmp	r3, #42	; 0x2a
 800a472:	d015      	beq.n	800a4a0 <_vfiprintf_r+0x13c>
 800a474:	9a07      	ldr	r2, [sp, #28]
 800a476:	4654      	mov	r4, sl
 800a478:	2000      	movs	r0, #0
 800a47a:	f04f 0c0a 	mov.w	ip, #10
 800a47e:	4621      	mov	r1, r4
 800a480:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a484:	3b30      	subs	r3, #48	; 0x30
 800a486:	2b09      	cmp	r3, #9
 800a488:	d94e      	bls.n	800a528 <_vfiprintf_r+0x1c4>
 800a48a:	b1b0      	cbz	r0, 800a4ba <_vfiprintf_r+0x156>
 800a48c:	9207      	str	r2, [sp, #28]
 800a48e:	e014      	b.n	800a4ba <_vfiprintf_r+0x156>
 800a490:	eba0 0308 	sub.w	r3, r0, r8
 800a494:	fa09 f303 	lsl.w	r3, r9, r3
 800a498:	4313      	orrs	r3, r2
 800a49a:	9304      	str	r3, [sp, #16]
 800a49c:	46a2      	mov	sl, r4
 800a49e:	e7d2      	b.n	800a446 <_vfiprintf_r+0xe2>
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	1d19      	adds	r1, r3, #4
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	9103      	str	r1, [sp, #12]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	bfbb      	ittet	lt
 800a4ac:	425b      	neglt	r3, r3
 800a4ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a4b2:	9307      	strge	r3, [sp, #28]
 800a4b4:	9307      	strlt	r3, [sp, #28]
 800a4b6:	bfb8      	it	lt
 800a4b8:	9204      	strlt	r2, [sp, #16]
 800a4ba:	7823      	ldrb	r3, [r4, #0]
 800a4bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a4be:	d10c      	bne.n	800a4da <_vfiprintf_r+0x176>
 800a4c0:	7863      	ldrb	r3, [r4, #1]
 800a4c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4c4:	d135      	bne.n	800a532 <_vfiprintf_r+0x1ce>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	1d1a      	adds	r2, r3, #4
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	9203      	str	r2, [sp, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	bfb8      	it	lt
 800a4d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4d6:	3402      	adds	r4, #2
 800a4d8:	9305      	str	r3, [sp, #20]
 800a4da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5c0 <_vfiprintf_r+0x25c>
 800a4de:	7821      	ldrb	r1, [r4, #0]
 800a4e0:	2203      	movs	r2, #3
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	f7f5 ff0c 	bl	8000300 <memchr>
 800a4e8:	b140      	cbz	r0, 800a4fc <_vfiprintf_r+0x198>
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	eba0 000a 	sub.w	r0, r0, sl
 800a4f0:	fa03 f000 	lsl.w	r0, r3, r0
 800a4f4:	9b04      	ldr	r3, [sp, #16]
 800a4f6:	4303      	orrs	r3, r0
 800a4f8:	3401      	adds	r4, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	482c      	ldr	r0, [pc, #176]	; (800a5b4 <_vfiprintf_r+0x250>)
 800a502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a506:	2206      	movs	r2, #6
 800a508:	f7f5 fefa 	bl	8000300 <memchr>
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d03f      	beq.n	800a590 <_vfiprintf_r+0x22c>
 800a510:	4b29      	ldr	r3, [pc, #164]	; (800a5b8 <_vfiprintf_r+0x254>)
 800a512:	bb1b      	cbnz	r3, 800a55c <_vfiprintf_r+0x1f8>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	3307      	adds	r3, #7
 800a518:	f023 0307 	bic.w	r3, r3, #7
 800a51c:	3308      	adds	r3, #8
 800a51e:	9303      	str	r3, [sp, #12]
 800a520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a522:	443b      	add	r3, r7
 800a524:	9309      	str	r3, [sp, #36]	; 0x24
 800a526:	e767      	b.n	800a3f8 <_vfiprintf_r+0x94>
 800a528:	fb0c 3202 	mla	r2, ip, r2, r3
 800a52c:	460c      	mov	r4, r1
 800a52e:	2001      	movs	r0, #1
 800a530:	e7a5      	b.n	800a47e <_vfiprintf_r+0x11a>
 800a532:	2300      	movs	r3, #0
 800a534:	3401      	adds	r4, #1
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	4619      	mov	r1, r3
 800a53a:	f04f 0c0a 	mov.w	ip, #10
 800a53e:	4620      	mov	r0, r4
 800a540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a544:	3a30      	subs	r2, #48	; 0x30
 800a546:	2a09      	cmp	r2, #9
 800a548:	d903      	bls.n	800a552 <_vfiprintf_r+0x1ee>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d0c5      	beq.n	800a4da <_vfiprintf_r+0x176>
 800a54e:	9105      	str	r1, [sp, #20]
 800a550:	e7c3      	b.n	800a4da <_vfiprintf_r+0x176>
 800a552:	fb0c 2101 	mla	r1, ip, r1, r2
 800a556:	4604      	mov	r4, r0
 800a558:	2301      	movs	r3, #1
 800a55a:	e7f0      	b.n	800a53e <_vfiprintf_r+0x1da>
 800a55c:	ab03      	add	r3, sp, #12
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	462a      	mov	r2, r5
 800a562:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <_vfiprintf_r+0x258>)
 800a564:	a904      	add	r1, sp, #16
 800a566:	4630      	mov	r0, r6
 800a568:	f3af 8000 	nop.w
 800a56c:	4607      	mov	r7, r0
 800a56e:	1c78      	adds	r0, r7, #1
 800a570:	d1d6      	bne.n	800a520 <_vfiprintf_r+0x1bc>
 800a572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a574:	07d9      	lsls	r1, r3, #31
 800a576:	d405      	bmi.n	800a584 <_vfiprintf_r+0x220>
 800a578:	89ab      	ldrh	r3, [r5, #12]
 800a57a:	059a      	lsls	r2, r3, #22
 800a57c:	d402      	bmi.n	800a584 <_vfiprintf_r+0x220>
 800a57e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a580:	f7ff fdbe 	bl	800a100 <__retarget_lock_release_recursive>
 800a584:	89ab      	ldrh	r3, [r5, #12]
 800a586:	065b      	lsls	r3, r3, #25
 800a588:	f53f af12 	bmi.w	800a3b0 <_vfiprintf_r+0x4c>
 800a58c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a58e:	e711      	b.n	800a3b4 <_vfiprintf_r+0x50>
 800a590:	ab03      	add	r3, sp, #12
 800a592:	9300      	str	r3, [sp, #0]
 800a594:	462a      	mov	r2, r5
 800a596:	4b09      	ldr	r3, [pc, #36]	; (800a5bc <_vfiprintf_r+0x258>)
 800a598:	a904      	add	r1, sp, #16
 800a59a:	4630      	mov	r0, r6
 800a59c:	f000 f880 	bl	800a6a0 <_printf_i>
 800a5a0:	e7e4      	b.n	800a56c <_vfiprintf_r+0x208>
 800a5a2:	bf00      	nop
 800a5a4:	0800b358 	.word	0x0800b358
 800a5a8:	0800b378 	.word	0x0800b378
 800a5ac:	0800b338 	.word	0x0800b338
 800a5b0:	0800b39c 	.word	0x0800b39c
 800a5b4:	0800b3a6 	.word	0x0800b3a6
 800a5b8:	00000000 	.word	0x00000000
 800a5bc:	0800a33f 	.word	0x0800a33f
 800a5c0:	0800b3a2 	.word	0x0800b3a2

0800a5c4 <_printf_common>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	4616      	mov	r6, r2
 800a5ca:	4699      	mov	r9, r3
 800a5cc:	688a      	ldr	r2, [r1, #8]
 800a5ce:	690b      	ldr	r3, [r1, #16]
 800a5d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	bfb8      	it	lt
 800a5d8:	4613      	movlt	r3, r2
 800a5da:	6033      	str	r3, [r6, #0]
 800a5dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	b10a      	cbz	r2, 800a5ea <_printf_common+0x26>
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	6033      	str	r3, [r6, #0]
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	0699      	lsls	r1, r3, #26
 800a5ee:	bf42      	ittt	mi
 800a5f0:	6833      	ldrmi	r3, [r6, #0]
 800a5f2:	3302      	addmi	r3, #2
 800a5f4:	6033      	strmi	r3, [r6, #0]
 800a5f6:	6825      	ldr	r5, [r4, #0]
 800a5f8:	f015 0506 	ands.w	r5, r5, #6
 800a5fc:	d106      	bne.n	800a60c <_printf_common+0x48>
 800a5fe:	f104 0a19 	add.w	sl, r4, #25
 800a602:	68e3      	ldr	r3, [r4, #12]
 800a604:	6832      	ldr	r2, [r6, #0]
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	42ab      	cmp	r3, r5
 800a60a:	dc26      	bgt.n	800a65a <_printf_common+0x96>
 800a60c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a610:	1e13      	subs	r3, r2, #0
 800a612:	6822      	ldr	r2, [r4, #0]
 800a614:	bf18      	it	ne
 800a616:	2301      	movne	r3, #1
 800a618:	0692      	lsls	r2, r2, #26
 800a61a:	d42b      	bmi.n	800a674 <_printf_common+0xb0>
 800a61c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a620:	4649      	mov	r1, r9
 800a622:	4638      	mov	r0, r7
 800a624:	47c0      	blx	r8
 800a626:	3001      	adds	r0, #1
 800a628:	d01e      	beq.n	800a668 <_printf_common+0xa4>
 800a62a:	6823      	ldr	r3, [r4, #0]
 800a62c:	68e5      	ldr	r5, [r4, #12]
 800a62e:	6832      	ldr	r2, [r6, #0]
 800a630:	f003 0306 	and.w	r3, r3, #6
 800a634:	2b04      	cmp	r3, #4
 800a636:	bf08      	it	eq
 800a638:	1aad      	subeq	r5, r5, r2
 800a63a:	68a3      	ldr	r3, [r4, #8]
 800a63c:	6922      	ldr	r2, [r4, #16]
 800a63e:	bf0c      	ite	eq
 800a640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a644:	2500      	movne	r5, #0
 800a646:	4293      	cmp	r3, r2
 800a648:	bfc4      	itt	gt
 800a64a:	1a9b      	subgt	r3, r3, r2
 800a64c:	18ed      	addgt	r5, r5, r3
 800a64e:	2600      	movs	r6, #0
 800a650:	341a      	adds	r4, #26
 800a652:	42b5      	cmp	r5, r6
 800a654:	d11a      	bne.n	800a68c <_printf_common+0xc8>
 800a656:	2000      	movs	r0, #0
 800a658:	e008      	b.n	800a66c <_printf_common+0xa8>
 800a65a:	2301      	movs	r3, #1
 800a65c:	4652      	mov	r2, sl
 800a65e:	4649      	mov	r1, r9
 800a660:	4638      	mov	r0, r7
 800a662:	47c0      	blx	r8
 800a664:	3001      	adds	r0, #1
 800a666:	d103      	bne.n	800a670 <_printf_common+0xac>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a670:	3501      	adds	r5, #1
 800a672:	e7c6      	b.n	800a602 <_printf_common+0x3e>
 800a674:	18e1      	adds	r1, r4, r3
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	2030      	movs	r0, #48	; 0x30
 800a67a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a67e:	4422      	add	r2, r4
 800a680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a688:	3302      	adds	r3, #2
 800a68a:	e7c7      	b.n	800a61c <_printf_common+0x58>
 800a68c:	2301      	movs	r3, #1
 800a68e:	4622      	mov	r2, r4
 800a690:	4649      	mov	r1, r9
 800a692:	4638      	mov	r0, r7
 800a694:	47c0      	blx	r8
 800a696:	3001      	adds	r0, #1
 800a698:	d0e6      	beq.n	800a668 <_printf_common+0xa4>
 800a69a:	3601      	adds	r6, #1
 800a69c:	e7d9      	b.n	800a652 <_printf_common+0x8e>
	...

0800a6a0 <_printf_i>:
 800a6a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	7e0f      	ldrb	r7, [r1, #24]
 800a6a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6a8:	2f78      	cmp	r7, #120	; 0x78
 800a6aa:	4691      	mov	r9, r2
 800a6ac:	4680      	mov	r8, r0
 800a6ae:	460c      	mov	r4, r1
 800a6b0:	469a      	mov	sl, r3
 800a6b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6b6:	d807      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6b8:	2f62      	cmp	r7, #98	; 0x62
 800a6ba:	d80a      	bhi.n	800a6d2 <_printf_i+0x32>
 800a6bc:	2f00      	cmp	r7, #0
 800a6be:	f000 80d8 	beq.w	800a872 <_printf_i+0x1d2>
 800a6c2:	2f58      	cmp	r7, #88	; 0x58
 800a6c4:	f000 80a3 	beq.w	800a80e <_printf_i+0x16e>
 800a6c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6d0:	e03a      	b.n	800a748 <_printf_i+0xa8>
 800a6d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6d6:	2b15      	cmp	r3, #21
 800a6d8:	d8f6      	bhi.n	800a6c8 <_printf_i+0x28>
 800a6da:	a101      	add	r1, pc, #4	; (adr r1, 800a6e0 <_printf_i+0x40>)
 800a6dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6e0:	0800a739 	.word	0x0800a739
 800a6e4:	0800a74d 	.word	0x0800a74d
 800a6e8:	0800a6c9 	.word	0x0800a6c9
 800a6ec:	0800a6c9 	.word	0x0800a6c9
 800a6f0:	0800a6c9 	.word	0x0800a6c9
 800a6f4:	0800a6c9 	.word	0x0800a6c9
 800a6f8:	0800a74d 	.word	0x0800a74d
 800a6fc:	0800a6c9 	.word	0x0800a6c9
 800a700:	0800a6c9 	.word	0x0800a6c9
 800a704:	0800a6c9 	.word	0x0800a6c9
 800a708:	0800a6c9 	.word	0x0800a6c9
 800a70c:	0800a859 	.word	0x0800a859
 800a710:	0800a77d 	.word	0x0800a77d
 800a714:	0800a83b 	.word	0x0800a83b
 800a718:	0800a6c9 	.word	0x0800a6c9
 800a71c:	0800a6c9 	.word	0x0800a6c9
 800a720:	0800a87b 	.word	0x0800a87b
 800a724:	0800a6c9 	.word	0x0800a6c9
 800a728:	0800a77d 	.word	0x0800a77d
 800a72c:	0800a6c9 	.word	0x0800a6c9
 800a730:	0800a6c9 	.word	0x0800a6c9
 800a734:	0800a843 	.word	0x0800a843
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	1d1a      	adds	r2, r3, #4
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	602a      	str	r2, [r5, #0]
 800a740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a748:	2301      	movs	r3, #1
 800a74a:	e0a3      	b.n	800a894 <_printf_i+0x1f4>
 800a74c:	6820      	ldr	r0, [r4, #0]
 800a74e:	6829      	ldr	r1, [r5, #0]
 800a750:	0606      	lsls	r6, r0, #24
 800a752:	f101 0304 	add.w	r3, r1, #4
 800a756:	d50a      	bpl.n	800a76e <_printf_i+0xce>
 800a758:	680e      	ldr	r6, [r1, #0]
 800a75a:	602b      	str	r3, [r5, #0]
 800a75c:	2e00      	cmp	r6, #0
 800a75e:	da03      	bge.n	800a768 <_printf_i+0xc8>
 800a760:	232d      	movs	r3, #45	; 0x2d
 800a762:	4276      	negs	r6, r6
 800a764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a768:	485e      	ldr	r0, [pc, #376]	; (800a8e4 <_printf_i+0x244>)
 800a76a:	230a      	movs	r3, #10
 800a76c:	e019      	b.n	800a7a2 <_printf_i+0x102>
 800a76e:	680e      	ldr	r6, [r1, #0]
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a776:	bf18      	it	ne
 800a778:	b236      	sxthne	r6, r6
 800a77a:	e7ef      	b.n	800a75c <_printf_i+0xbc>
 800a77c:	682b      	ldr	r3, [r5, #0]
 800a77e:	6820      	ldr	r0, [r4, #0]
 800a780:	1d19      	adds	r1, r3, #4
 800a782:	6029      	str	r1, [r5, #0]
 800a784:	0601      	lsls	r1, r0, #24
 800a786:	d501      	bpl.n	800a78c <_printf_i+0xec>
 800a788:	681e      	ldr	r6, [r3, #0]
 800a78a:	e002      	b.n	800a792 <_printf_i+0xf2>
 800a78c:	0646      	lsls	r6, r0, #25
 800a78e:	d5fb      	bpl.n	800a788 <_printf_i+0xe8>
 800a790:	881e      	ldrh	r6, [r3, #0]
 800a792:	4854      	ldr	r0, [pc, #336]	; (800a8e4 <_printf_i+0x244>)
 800a794:	2f6f      	cmp	r7, #111	; 0x6f
 800a796:	bf0c      	ite	eq
 800a798:	2308      	moveq	r3, #8
 800a79a:	230a      	movne	r3, #10
 800a79c:	2100      	movs	r1, #0
 800a79e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7a2:	6865      	ldr	r5, [r4, #4]
 800a7a4:	60a5      	str	r5, [r4, #8]
 800a7a6:	2d00      	cmp	r5, #0
 800a7a8:	bfa2      	ittt	ge
 800a7aa:	6821      	ldrge	r1, [r4, #0]
 800a7ac:	f021 0104 	bicge.w	r1, r1, #4
 800a7b0:	6021      	strge	r1, [r4, #0]
 800a7b2:	b90e      	cbnz	r6, 800a7b8 <_printf_i+0x118>
 800a7b4:	2d00      	cmp	r5, #0
 800a7b6:	d04d      	beq.n	800a854 <_printf_i+0x1b4>
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7be:	fb03 6711 	mls	r7, r3, r1, r6
 800a7c2:	5dc7      	ldrb	r7, [r0, r7]
 800a7c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7c8:	4637      	mov	r7, r6
 800a7ca:	42bb      	cmp	r3, r7
 800a7cc:	460e      	mov	r6, r1
 800a7ce:	d9f4      	bls.n	800a7ba <_printf_i+0x11a>
 800a7d0:	2b08      	cmp	r3, #8
 800a7d2:	d10b      	bne.n	800a7ec <_printf_i+0x14c>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	07de      	lsls	r6, r3, #31
 800a7d8:	d508      	bpl.n	800a7ec <_printf_i+0x14c>
 800a7da:	6923      	ldr	r3, [r4, #16]
 800a7dc:	6861      	ldr	r1, [r4, #4]
 800a7de:	4299      	cmp	r1, r3
 800a7e0:	bfde      	ittt	le
 800a7e2:	2330      	movle	r3, #48	; 0x30
 800a7e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a7ec:	1b52      	subs	r2, r2, r5
 800a7ee:	6122      	str	r2, [r4, #16]
 800a7f0:	f8cd a000 	str.w	sl, [sp]
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	aa03      	add	r2, sp, #12
 800a7f8:	4621      	mov	r1, r4
 800a7fa:	4640      	mov	r0, r8
 800a7fc:	f7ff fee2 	bl	800a5c4 <_printf_common>
 800a800:	3001      	adds	r0, #1
 800a802:	d14c      	bne.n	800a89e <_printf_i+0x1fe>
 800a804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a808:	b004      	add	sp, #16
 800a80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80e:	4835      	ldr	r0, [pc, #212]	; (800a8e4 <_printf_i+0x244>)
 800a810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a814:	6829      	ldr	r1, [r5, #0]
 800a816:	6823      	ldr	r3, [r4, #0]
 800a818:	f851 6b04 	ldr.w	r6, [r1], #4
 800a81c:	6029      	str	r1, [r5, #0]
 800a81e:	061d      	lsls	r5, r3, #24
 800a820:	d514      	bpl.n	800a84c <_printf_i+0x1ac>
 800a822:	07df      	lsls	r7, r3, #31
 800a824:	bf44      	itt	mi
 800a826:	f043 0320 	orrmi.w	r3, r3, #32
 800a82a:	6023      	strmi	r3, [r4, #0]
 800a82c:	b91e      	cbnz	r6, 800a836 <_printf_i+0x196>
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	f023 0320 	bic.w	r3, r3, #32
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	2310      	movs	r3, #16
 800a838:	e7b0      	b.n	800a79c <_printf_i+0xfc>
 800a83a:	6823      	ldr	r3, [r4, #0]
 800a83c:	f043 0320 	orr.w	r3, r3, #32
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	2378      	movs	r3, #120	; 0x78
 800a844:	4828      	ldr	r0, [pc, #160]	; (800a8e8 <_printf_i+0x248>)
 800a846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a84a:	e7e3      	b.n	800a814 <_printf_i+0x174>
 800a84c:	0659      	lsls	r1, r3, #25
 800a84e:	bf48      	it	mi
 800a850:	b2b6      	uxthmi	r6, r6
 800a852:	e7e6      	b.n	800a822 <_printf_i+0x182>
 800a854:	4615      	mov	r5, r2
 800a856:	e7bb      	b.n	800a7d0 <_printf_i+0x130>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	6826      	ldr	r6, [r4, #0]
 800a85c:	6961      	ldr	r1, [r4, #20]
 800a85e:	1d18      	adds	r0, r3, #4
 800a860:	6028      	str	r0, [r5, #0]
 800a862:	0635      	lsls	r5, r6, #24
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	d501      	bpl.n	800a86c <_printf_i+0x1cc>
 800a868:	6019      	str	r1, [r3, #0]
 800a86a:	e002      	b.n	800a872 <_printf_i+0x1d2>
 800a86c:	0670      	lsls	r0, r6, #25
 800a86e:	d5fb      	bpl.n	800a868 <_printf_i+0x1c8>
 800a870:	8019      	strh	r1, [r3, #0]
 800a872:	2300      	movs	r3, #0
 800a874:	6123      	str	r3, [r4, #16]
 800a876:	4615      	mov	r5, r2
 800a878:	e7ba      	b.n	800a7f0 <_printf_i+0x150>
 800a87a:	682b      	ldr	r3, [r5, #0]
 800a87c:	1d1a      	adds	r2, r3, #4
 800a87e:	602a      	str	r2, [r5, #0]
 800a880:	681d      	ldr	r5, [r3, #0]
 800a882:	6862      	ldr	r2, [r4, #4]
 800a884:	2100      	movs	r1, #0
 800a886:	4628      	mov	r0, r5
 800a888:	f7f5 fd3a 	bl	8000300 <memchr>
 800a88c:	b108      	cbz	r0, 800a892 <_printf_i+0x1f2>
 800a88e:	1b40      	subs	r0, r0, r5
 800a890:	6060      	str	r0, [r4, #4]
 800a892:	6863      	ldr	r3, [r4, #4]
 800a894:	6123      	str	r3, [r4, #16]
 800a896:	2300      	movs	r3, #0
 800a898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a89c:	e7a8      	b.n	800a7f0 <_printf_i+0x150>
 800a89e:	6923      	ldr	r3, [r4, #16]
 800a8a0:	462a      	mov	r2, r5
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	47d0      	blx	sl
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	d0ab      	beq.n	800a804 <_printf_i+0x164>
 800a8ac:	6823      	ldr	r3, [r4, #0]
 800a8ae:	079b      	lsls	r3, r3, #30
 800a8b0:	d413      	bmi.n	800a8da <_printf_i+0x23a>
 800a8b2:	68e0      	ldr	r0, [r4, #12]
 800a8b4:	9b03      	ldr	r3, [sp, #12]
 800a8b6:	4298      	cmp	r0, r3
 800a8b8:	bfb8      	it	lt
 800a8ba:	4618      	movlt	r0, r3
 800a8bc:	e7a4      	b.n	800a808 <_printf_i+0x168>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	4649      	mov	r1, r9
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	47d0      	blx	sl
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	d09b      	beq.n	800a804 <_printf_i+0x164>
 800a8cc:	3501      	adds	r5, #1
 800a8ce:	68e3      	ldr	r3, [r4, #12]
 800a8d0:	9903      	ldr	r1, [sp, #12]
 800a8d2:	1a5b      	subs	r3, r3, r1
 800a8d4:	42ab      	cmp	r3, r5
 800a8d6:	dcf2      	bgt.n	800a8be <_printf_i+0x21e>
 800a8d8:	e7eb      	b.n	800a8b2 <_printf_i+0x212>
 800a8da:	2500      	movs	r5, #0
 800a8dc:	f104 0619 	add.w	r6, r4, #25
 800a8e0:	e7f5      	b.n	800a8ce <_printf_i+0x22e>
 800a8e2:	bf00      	nop
 800a8e4:	0800b3ad 	.word	0x0800b3ad
 800a8e8:	0800b3be 	.word	0x0800b3be

0800a8ec <cleanup_glue>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	6809      	ldr	r1, [r1, #0]
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	b109      	cbz	r1, 800a8fa <cleanup_glue+0xe>
 800a8f6:	f7ff fff9 	bl	800a8ec <cleanup_glue>
 800a8fa:	4621      	mov	r1, r4
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a902:	f7ff bc25 	b.w	800a150 <_free_r>
	...

0800a908 <_reclaim_reent>:
 800a908:	4b2c      	ldr	r3, [pc, #176]	; (800a9bc <_reclaim_reent+0xb4>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4283      	cmp	r3, r0
 800a90e:	b570      	push	{r4, r5, r6, lr}
 800a910:	4604      	mov	r4, r0
 800a912:	d051      	beq.n	800a9b8 <_reclaim_reent+0xb0>
 800a914:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a916:	b143      	cbz	r3, 800a92a <_reclaim_reent+0x22>
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d14a      	bne.n	800a9b4 <_reclaim_reent+0xac>
 800a91e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a920:	6819      	ldr	r1, [r3, #0]
 800a922:	b111      	cbz	r1, 800a92a <_reclaim_reent+0x22>
 800a924:	4620      	mov	r0, r4
 800a926:	f7ff fc13 	bl	800a150 <_free_r>
 800a92a:	6961      	ldr	r1, [r4, #20]
 800a92c:	b111      	cbz	r1, 800a934 <_reclaim_reent+0x2c>
 800a92e:	4620      	mov	r0, r4
 800a930:	f7ff fc0e 	bl	800a150 <_free_r>
 800a934:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a936:	b111      	cbz	r1, 800a93e <_reclaim_reent+0x36>
 800a938:	4620      	mov	r0, r4
 800a93a:	f7ff fc09 	bl	800a150 <_free_r>
 800a93e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a940:	b111      	cbz	r1, 800a948 <_reclaim_reent+0x40>
 800a942:	4620      	mov	r0, r4
 800a944:	f7ff fc04 	bl	800a150 <_free_r>
 800a948:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a94a:	b111      	cbz	r1, 800a952 <_reclaim_reent+0x4a>
 800a94c:	4620      	mov	r0, r4
 800a94e:	f7ff fbff 	bl	800a150 <_free_r>
 800a952:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a954:	b111      	cbz	r1, 800a95c <_reclaim_reent+0x54>
 800a956:	4620      	mov	r0, r4
 800a958:	f7ff fbfa 	bl	800a150 <_free_r>
 800a95c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a95e:	b111      	cbz	r1, 800a966 <_reclaim_reent+0x5e>
 800a960:	4620      	mov	r0, r4
 800a962:	f7ff fbf5 	bl	800a150 <_free_r>
 800a966:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a968:	b111      	cbz	r1, 800a970 <_reclaim_reent+0x68>
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7ff fbf0 	bl	800a150 <_free_r>
 800a970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a972:	b111      	cbz	r1, 800a97a <_reclaim_reent+0x72>
 800a974:	4620      	mov	r0, r4
 800a976:	f7ff fbeb 	bl	800a150 <_free_r>
 800a97a:	69a3      	ldr	r3, [r4, #24]
 800a97c:	b1e3      	cbz	r3, 800a9b8 <_reclaim_reent+0xb0>
 800a97e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a980:	4620      	mov	r0, r4
 800a982:	4798      	blx	r3
 800a984:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a986:	b1b9      	cbz	r1, 800a9b8 <_reclaim_reent+0xb0>
 800a988:	4620      	mov	r0, r4
 800a98a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a98e:	f7ff bfad 	b.w	800a8ec <cleanup_glue>
 800a992:	5949      	ldr	r1, [r1, r5]
 800a994:	b941      	cbnz	r1, 800a9a8 <_reclaim_reent+0xa0>
 800a996:	3504      	adds	r5, #4
 800a998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a99a:	2d80      	cmp	r5, #128	; 0x80
 800a99c:	68d9      	ldr	r1, [r3, #12]
 800a99e:	d1f8      	bne.n	800a992 <_reclaim_reent+0x8a>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f7ff fbd5 	bl	800a150 <_free_r>
 800a9a6:	e7ba      	b.n	800a91e <_reclaim_reent+0x16>
 800a9a8:	680e      	ldr	r6, [r1, #0]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7ff fbd0 	bl	800a150 <_free_r>
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	e7ef      	b.n	800a994 <_reclaim_reent+0x8c>
 800a9b4:	2500      	movs	r5, #0
 800a9b6:	e7ef      	b.n	800a998 <_reclaim_reent+0x90>
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	bf00      	nop
 800a9bc:	240000bc 	.word	0x240000bc

0800a9c0 <_sbrk_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d06      	ldr	r5, [pc, #24]	; (800a9dc <_sbrk_r+0x1c>)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	602b      	str	r3, [r5, #0]
 800a9cc:	f7f6 fae6 	bl	8000f9c <_sbrk>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_sbrk_r+0x1a>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_sbrk_r+0x1a>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	2400856c 	.word	0x2400856c

0800a9e0 <__sread>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e8:	f000 fa94 	bl	800af14 <_read_r>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	bfab      	itete	ge
 800a9f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9f2:	89a3      	ldrhlt	r3, [r4, #12]
 800a9f4:	181b      	addge	r3, r3, r0
 800a9f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9fa:	bfac      	ite	ge
 800a9fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9fe:	81a3      	strhlt	r3, [r4, #12]
 800aa00:	bd10      	pop	{r4, pc}

0800aa02 <__swrite>:
 800aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	461f      	mov	r7, r3
 800aa08:	898b      	ldrh	r3, [r1, #12]
 800aa0a:	05db      	lsls	r3, r3, #23
 800aa0c:	4605      	mov	r5, r0
 800aa0e:	460c      	mov	r4, r1
 800aa10:	4616      	mov	r6, r2
 800aa12:	d505      	bpl.n	800aa20 <__swrite+0x1e>
 800aa14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa18:	2302      	movs	r3, #2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f000 f9f6 	bl	800ae0c <_lseek_r>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa2a:	81a3      	strh	r3, [r4, #12]
 800aa2c:	4632      	mov	r2, r6
 800aa2e:	463b      	mov	r3, r7
 800aa30:	4628      	mov	r0, r5
 800aa32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa36:	f000 b88f 	b.w	800ab58 <_write_r>

0800aa3a <__sseek>:
 800aa3a:	b510      	push	{r4, lr}
 800aa3c:	460c      	mov	r4, r1
 800aa3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa42:	f000 f9e3 	bl	800ae0c <_lseek_r>
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	bf15      	itete	ne
 800aa4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa56:	81a3      	strheq	r3, [r4, #12]
 800aa58:	bf18      	it	ne
 800aa5a:	81a3      	strhne	r3, [r4, #12]
 800aa5c:	bd10      	pop	{r4, pc}

0800aa5e <__sclose>:
 800aa5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa62:	f000 b901 	b.w	800ac68 <_close_r>

0800aa66 <strncmp>:
 800aa66:	b510      	push	{r4, lr}
 800aa68:	b17a      	cbz	r2, 800aa8a <strncmp+0x24>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	3901      	subs	r1, #1
 800aa6e:	1884      	adds	r4, r0, r2
 800aa70:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa78:	4290      	cmp	r0, r2
 800aa7a:	d101      	bne.n	800aa80 <strncmp+0x1a>
 800aa7c:	42a3      	cmp	r3, r4
 800aa7e:	d101      	bne.n	800aa84 <strncmp+0x1e>
 800aa80:	1a80      	subs	r0, r0, r2
 800aa82:	bd10      	pop	{r4, pc}
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d1f3      	bne.n	800aa70 <strncmp+0xa>
 800aa88:	e7fa      	b.n	800aa80 <strncmp+0x1a>
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	e7f9      	b.n	800aa82 <strncmp+0x1c>

0800aa8e <strncpy>:
 800aa8e:	b510      	push	{r4, lr}
 800aa90:	3901      	subs	r1, #1
 800aa92:	4603      	mov	r3, r0
 800aa94:	b132      	cbz	r2, 800aaa4 <strncpy+0x16>
 800aa96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800aa9a:	f803 4b01 	strb.w	r4, [r3], #1
 800aa9e:	3a01      	subs	r2, #1
 800aaa0:	2c00      	cmp	r4, #0
 800aaa2:	d1f7      	bne.n	800aa94 <strncpy+0x6>
 800aaa4:	441a      	add	r2, r3
 800aaa6:	2100      	movs	r1, #0
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d100      	bne.n	800aaae <strncpy+0x20>
 800aaac:	bd10      	pop	{r4, pc}
 800aaae:	f803 1b01 	strb.w	r1, [r3], #1
 800aab2:	e7f9      	b.n	800aaa8 <strncpy+0x1a>

0800aab4 <__swbuf_r>:
 800aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab6:	460e      	mov	r6, r1
 800aab8:	4614      	mov	r4, r2
 800aaba:	4605      	mov	r5, r0
 800aabc:	b118      	cbz	r0, 800aac6 <__swbuf_r+0x12>
 800aabe:	6983      	ldr	r3, [r0, #24]
 800aac0:	b90b      	cbnz	r3, 800aac6 <__swbuf_r+0x12>
 800aac2:	f7ff fa47 	bl	8009f54 <__sinit>
 800aac6:	4b21      	ldr	r3, [pc, #132]	; (800ab4c <__swbuf_r+0x98>)
 800aac8:	429c      	cmp	r4, r3
 800aaca:	d12b      	bne.n	800ab24 <__swbuf_r+0x70>
 800aacc:	686c      	ldr	r4, [r5, #4]
 800aace:	69a3      	ldr	r3, [r4, #24]
 800aad0:	60a3      	str	r3, [r4, #8]
 800aad2:	89a3      	ldrh	r3, [r4, #12]
 800aad4:	071a      	lsls	r2, r3, #28
 800aad6:	d52f      	bpl.n	800ab38 <__swbuf_r+0x84>
 800aad8:	6923      	ldr	r3, [r4, #16]
 800aada:	b36b      	cbz	r3, 800ab38 <__swbuf_r+0x84>
 800aadc:	6923      	ldr	r3, [r4, #16]
 800aade:	6820      	ldr	r0, [r4, #0]
 800aae0:	1ac0      	subs	r0, r0, r3
 800aae2:	6963      	ldr	r3, [r4, #20]
 800aae4:	b2f6      	uxtb	r6, r6
 800aae6:	4283      	cmp	r3, r0
 800aae8:	4637      	mov	r7, r6
 800aaea:	dc04      	bgt.n	800aaf6 <__swbuf_r+0x42>
 800aaec:	4621      	mov	r1, r4
 800aaee:	4628      	mov	r0, r5
 800aaf0:	f000 f950 	bl	800ad94 <_fflush_r>
 800aaf4:	bb30      	cbnz	r0, 800ab44 <__swbuf_r+0x90>
 800aaf6:	68a3      	ldr	r3, [r4, #8]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	60a3      	str	r3, [r4, #8]
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	1c5a      	adds	r2, r3, #1
 800ab00:	6022      	str	r2, [r4, #0]
 800ab02:	701e      	strb	r6, [r3, #0]
 800ab04:	6963      	ldr	r3, [r4, #20]
 800ab06:	3001      	adds	r0, #1
 800ab08:	4283      	cmp	r3, r0
 800ab0a:	d004      	beq.n	800ab16 <__swbuf_r+0x62>
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	07db      	lsls	r3, r3, #31
 800ab10:	d506      	bpl.n	800ab20 <__swbuf_r+0x6c>
 800ab12:	2e0a      	cmp	r6, #10
 800ab14:	d104      	bne.n	800ab20 <__swbuf_r+0x6c>
 800ab16:	4621      	mov	r1, r4
 800ab18:	4628      	mov	r0, r5
 800ab1a:	f000 f93b 	bl	800ad94 <_fflush_r>
 800ab1e:	b988      	cbnz	r0, 800ab44 <__swbuf_r+0x90>
 800ab20:	4638      	mov	r0, r7
 800ab22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab24:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <__swbuf_r+0x9c>)
 800ab26:	429c      	cmp	r4, r3
 800ab28:	d101      	bne.n	800ab2e <__swbuf_r+0x7a>
 800ab2a:	68ac      	ldr	r4, [r5, #8]
 800ab2c:	e7cf      	b.n	800aace <__swbuf_r+0x1a>
 800ab2e:	4b09      	ldr	r3, [pc, #36]	; (800ab54 <__swbuf_r+0xa0>)
 800ab30:	429c      	cmp	r4, r3
 800ab32:	bf08      	it	eq
 800ab34:	68ec      	ldreq	r4, [r5, #12]
 800ab36:	e7ca      	b.n	800aace <__swbuf_r+0x1a>
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f000 f81e 	bl	800ab7c <__swsetup_r>
 800ab40:	2800      	cmp	r0, #0
 800ab42:	d0cb      	beq.n	800aadc <__swbuf_r+0x28>
 800ab44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ab48:	e7ea      	b.n	800ab20 <__swbuf_r+0x6c>
 800ab4a:	bf00      	nop
 800ab4c:	0800b358 	.word	0x0800b358
 800ab50:	0800b378 	.word	0x0800b378
 800ab54:	0800b338 	.word	0x0800b338

0800ab58 <_write_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	; (800ab78 <_write_r+0x20>)
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	4608      	mov	r0, r1
 800ab60:	4611      	mov	r1, r2
 800ab62:	2200      	movs	r2, #0
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f7f6 f9c7 	bl	8000efa <_write>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_write_r+0x1e>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_write_r+0x1e>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	2400856c 	.word	0x2400856c

0800ab7c <__swsetup_r>:
 800ab7c:	4b32      	ldr	r3, [pc, #200]	; (800ac48 <__swsetup_r+0xcc>)
 800ab7e:	b570      	push	{r4, r5, r6, lr}
 800ab80:	681d      	ldr	r5, [r3, #0]
 800ab82:	4606      	mov	r6, r0
 800ab84:	460c      	mov	r4, r1
 800ab86:	b125      	cbz	r5, 800ab92 <__swsetup_r+0x16>
 800ab88:	69ab      	ldr	r3, [r5, #24]
 800ab8a:	b913      	cbnz	r3, 800ab92 <__swsetup_r+0x16>
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f7ff f9e1 	bl	8009f54 <__sinit>
 800ab92:	4b2e      	ldr	r3, [pc, #184]	; (800ac4c <__swsetup_r+0xd0>)
 800ab94:	429c      	cmp	r4, r3
 800ab96:	d10f      	bne.n	800abb8 <__swsetup_r+0x3c>
 800ab98:	686c      	ldr	r4, [r5, #4]
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aba0:	0719      	lsls	r1, r3, #28
 800aba2:	d42c      	bmi.n	800abfe <__swsetup_r+0x82>
 800aba4:	06dd      	lsls	r5, r3, #27
 800aba6:	d411      	bmi.n	800abcc <__swsetup_r+0x50>
 800aba8:	2309      	movs	r3, #9
 800abaa:	6033      	str	r3, [r6, #0]
 800abac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800abb0:	81a3      	strh	r3, [r4, #12]
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abb6:	e03e      	b.n	800ac36 <__swsetup_r+0xba>
 800abb8:	4b25      	ldr	r3, [pc, #148]	; (800ac50 <__swsetup_r+0xd4>)
 800abba:	429c      	cmp	r4, r3
 800abbc:	d101      	bne.n	800abc2 <__swsetup_r+0x46>
 800abbe:	68ac      	ldr	r4, [r5, #8]
 800abc0:	e7eb      	b.n	800ab9a <__swsetup_r+0x1e>
 800abc2:	4b24      	ldr	r3, [pc, #144]	; (800ac54 <__swsetup_r+0xd8>)
 800abc4:	429c      	cmp	r4, r3
 800abc6:	bf08      	it	eq
 800abc8:	68ec      	ldreq	r4, [r5, #12]
 800abca:	e7e6      	b.n	800ab9a <__swsetup_r+0x1e>
 800abcc:	0758      	lsls	r0, r3, #29
 800abce:	d512      	bpl.n	800abf6 <__swsetup_r+0x7a>
 800abd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abd2:	b141      	cbz	r1, 800abe6 <__swsetup_r+0x6a>
 800abd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abd8:	4299      	cmp	r1, r3
 800abda:	d002      	beq.n	800abe2 <__swsetup_r+0x66>
 800abdc:	4630      	mov	r0, r6
 800abde:	f7ff fab7 	bl	800a150 <_free_r>
 800abe2:	2300      	movs	r3, #0
 800abe4:	6363      	str	r3, [r4, #52]	; 0x34
 800abe6:	89a3      	ldrh	r3, [r4, #12]
 800abe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abec:	81a3      	strh	r3, [r4, #12]
 800abee:	2300      	movs	r3, #0
 800abf0:	6063      	str	r3, [r4, #4]
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0308 	orr.w	r3, r3, #8
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	b94b      	cbnz	r3, 800ac16 <__swsetup_r+0x9a>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac0c:	d003      	beq.n	800ac16 <__swsetup_r+0x9a>
 800ac0e:	4621      	mov	r1, r4
 800ac10:	4630      	mov	r0, r6
 800ac12:	f000 f933 	bl	800ae7c <__smakebuf_r>
 800ac16:	89a0      	ldrh	r0, [r4, #12]
 800ac18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac1c:	f010 0301 	ands.w	r3, r0, #1
 800ac20:	d00a      	beq.n	800ac38 <__swsetup_r+0xbc>
 800ac22:	2300      	movs	r3, #0
 800ac24:	60a3      	str	r3, [r4, #8]
 800ac26:	6963      	ldr	r3, [r4, #20]
 800ac28:	425b      	negs	r3, r3
 800ac2a:	61a3      	str	r3, [r4, #24]
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	b943      	cbnz	r3, 800ac42 <__swsetup_r+0xc6>
 800ac30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac34:	d1ba      	bne.n	800abac <__swsetup_r+0x30>
 800ac36:	bd70      	pop	{r4, r5, r6, pc}
 800ac38:	0781      	lsls	r1, r0, #30
 800ac3a:	bf58      	it	pl
 800ac3c:	6963      	ldrpl	r3, [r4, #20]
 800ac3e:	60a3      	str	r3, [r4, #8]
 800ac40:	e7f4      	b.n	800ac2c <__swsetup_r+0xb0>
 800ac42:	2000      	movs	r0, #0
 800ac44:	e7f7      	b.n	800ac36 <__swsetup_r+0xba>
 800ac46:	bf00      	nop
 800ac48:	240000bc 	.word	0x240000bc
 800ac4c:	0800b358 	.word	0x0800b358
 800ac50:	0800b378 	.word	0x0800b378
 800ac54:	0800b338 	.word	0x0800b338

0800ac58 <abort>:
 800ac58:	b508      	push	{r3, lr}
 800ac5a:	2006      	movs	r0, #6
 800ac5c:	f000 f994 	bl	800af88 <raise>
 800ac60:	2001      	movs	r0, #1
 800ac62:	f7f6 f923 	bl	8000eac <_exit>
	...

0800ac68 <_close_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d06      	ldr	r5, [pc, #24]	; (800ac84 <_close_r+0x1c>)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	4608      	mov	r0, r1
 800ac72:	602b      	str	r3, [r5, #0]
 800ac74:	f7f6 f95d 	bl	8000f32 <_close>
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	d102      	bne.n	800ac82 <_close_r+0x1a>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	b103      	cbz	r3, 800ac82 <_close_r+0x1a>
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	2400856c 	.word	0x2400856c

0800ac88 <__sflush_r>:
 800ac88:	898a      	ldrh	r2, [r1, #12]
 800ac8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	4605      	mov	r5, r0
 800ac90:	0710      	lsls	r0, r2, #28
 800ac92:	460c      	mov	r4, r1
 800ac94:	d458      	bmi.n	800ad48 <__sflush_r+0xc0>
 800ac96:	684b      	ldr	r3, [r1, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dc05      	bgt.n	800aca8 <__sflush_r+0x20>
 800ac9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	dc02      	bgt.n	800aca8 <__sflush_r+0x20>
 800aca2:	2000      	movs	r0, #0
 800aca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acaa:	2e00      	cmp	r6, #0
 800acac:	d0f9      	beq.n	800aca2 <__sflush_r+0x1a>
 800acae:	2300      	movs	r3, #0
 800acb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acb4:	682f      	ldr	r7, [r5, #0]
 800acb6:	602b      	str	r3, [r5, #0]
 800acb8:	d032      	beq.n	800ad20 <__sflush_r+0x98>
 800acba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	075a      	lsls	r2, r3, #29
 800acc0:	d505      	bpl.n	800acce <__sflush_r+0x46>
 800acc2:	6863      	ldr	r3, [r4, #4]
 800acc4:	1ac0      	subs	r0, r0, r3
 800acc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800acc8:	b10b      	cbz	r3, 800acce <__sflush_r+0x46>
 800acca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800accc:	1ac0      	subs	r0, r0, r3
 800acce:	2300      	movs	r3, #0
 800acd0:	4602      	mov	r2, r0
 800acd2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acd4:	6a21      	ldr	r1, [r4, #32]
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b0      	blx	r6
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	d106      	bne.n	800acee <__sflush_r+0x66>
 800ace0:	6829      	ldr	r1, [r5, #0]
 800ace2:	291d      	cmp	r1, #29
 800ace4:	d82c      	bhi.n	800ad40 <__sflush_r+0xb8>
 800ace6:	4a2a      	ldr	r2, [pc, #168]	; (800ad90 <__sflush_r+0x108>)
 800ace8:	40ca      	lsrs	r2, r1
 800acea:	07d6      	lsls	r6, r2, #31
 800acec:	d528      	bpl.n	800ad40 <__sflush_r+0xb8>
 800acee:	2200      	movs	r2, #0
 800acf0:	6062      	str	r2, [r4, #4]
 800acf2:	04d9      	lsls	r1, r3, #19
 800acf4:	6922      	ldr	r2, [r4, #16]
 800acf6:	6022      	str	r2, [r4, #0]
 800acf8:	d504      	bpl.n	800ad04 <__sflush_r+0x7c>
 800acfa:	1c42      	adds	r2, r0, #1
 800acfc:	d101      	bne.n	800ad02 <__sflush_r+0x7a>
 800acfe:	682b      	ldr	r3, [r5, #0]
 800ad00:	b903      	cbnz	r3, 800ad04 <__sflush_r+0x7c>
 800ad02:	6560      	str	r0, [r4, #84]	; 0x54
 800ad04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad06:	602f      	str	r7, [r5, #0]
 800ad08:	2900      	cmp	r1, #0
 800ad0a:	d0ca      	beq.n	800aca2 <__sflush_r+0x1a>
 800ad0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad10:	4299      	cmp	r1, r3
 800ad12:	d002      	beq.n	800ad1a <__sflush_r+0x92>
 800ad14:	4628      	mov	r0, r5
 800ad16:	f7ff fa1b 	bl	800a150 <_free_r>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad1e:	e7c1      	b.n	800aca4 <__sflush_r+0x1c>
 800ad20:	6a21      	ldr	r1, [r4, #32]
 800ad22:	2301      	movs	r3, #1
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b0      	blx	r6
 800ad28:	1c41      	adds	r1, r0, #1
 800ad2a:	d1c7      	bne.n	800acbc <__sflush_r+0x34>
 800ad2c:	682b      	ldr	r3, [r5, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d0c4      	beq.n	800acbc <__sflush_r+0x34>
 800ad32:	2b1d      	cmp	r3, #29
 800ad34:	d001      	beq.n	800ad3a <__sflush_r+0xb2>
 800ad36:	2b16      	cmp	r3, #22
 800ad38:	d101      	bne.n	800ad3e <__sflush_r+0xb6>
 800ad3a:	602f      	str	r7, [r5, #0]
 800ad3c:	e7b1      	b.n	800aca2 <__sflush_r+0x1a>
 800ad3e:	89a3      	ldrh	r3, [r4, #12]
 800ad40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	e7ad      	b.n	800aca4 <__sflush_r+0x1c>
 800ad48:	690f      	ldr	r7, [r1, #16]
 800ad4a:	2f00      	cmp	r7, #0
 800ad4c:	d0a9      	beq.n	800aca2 <__sflush_r+0x1a>
 800ad4e:	0793      	lsls	r3, r2, #30
 800ad50:	680e      	ldr	r6, [r1, #0]
 800ad52:	bf08      	it	eq
 800ad54:	694b      	ldreq	r3, [r1, #20]
 800ad56:	600f      	str	r7, [r1, #0]
 800ad58:	bf18      	it	ne
 800ad5a:	2300      	movne	r3, #0
 800ad5c:	eba6 0807 	sub.w	r8, r6, r7
 800ad60:	608b      	str	r3, [r1, #8]
 800ad62:	f1b8 0f00 	cmp.w	r8, #0
 800ad66:	dd9c      	ble.n	800aca2 <__sflush_r+0x1a>
 800ad68:	6a21      	ldr	r1, [r4, #32]
 800ad6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad6c:	4643      	mov	r3, r8
 800ad6e:	463a      	mov	r2, r7
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b0      	blx	r6
 800ad74:	2800      	cmp	r0, #0
 800ad76:	dc06      	bgt.n	800ad86 <__sflush_r+0xfe>
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad7e:	81a3      	strh	r3, [r4, #12]
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad84:	e78e      	b.n	800aca4 <__sflush_r+0x1c>
 800ad86:	4407      	add	r7, r0
 800ad88:	eba8 0800 	sub.w	r8, r8, r0
 800ad8c:	e7e9      	b.n	800ad62 <__sflush_r+0xda>
 800ad8e:	bf00      	nop
 800ad90:	20400001 	.word	0x20400001

0800ad94 <_fflush_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	690b      	ldr	r3, [r1, #16]
 800ad98:	4605      	mov	r5, r0
 800ad9a:	460c      	mov	r4, r1
 800ad9c:	b913      	cbnz	r3, 800ada4 <_fflush_r+0x10>
 800ad9e:	2500      	movs	r5, #0
 800ada0:	4628      	mov	r0, r5
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	b118      	cbz	r0, 800adae <_fflush_r+0x1a>
 800ada6:	6983      	ldr	r3, [r0, #24]
 800ada8:	b90b      	cbnz	r3, 800adae <_fflush_r+0x1a>
 800adaa:	f7ff f8d3 	bl	8009f54 <__sinit>
 800adae:	4b14      	ldr	r3, [pc, #80]	; (800ae00 <_fflush_r+0x6c>)
 800adb0:	429c      	cmp	r4, r3
 800adb2:	d11b      	bne.n	800adec <_fflush_r+0x58>
 800adb4:	686c      	ldr	r4, [r5, #4]
 800adb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0ef      	beq.n	800ad9e <_fflush_r+0xa>
 800adbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adc0:	07d0      	lsls	r0, r2, #31
 800adc2:	d404      	bmi.n	800adce <_fflush_r+0x3a>
 800adc4:	0599      	lsls	r1, r3, #22
 800adc6:	d402      	bmi.n	800adce <_fflush_r+0x3a>
 800adc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adca:	f7ff f998 	bl	800a0fe <__retarget_lock_acquire_recursive>
 800adce:	4628      	mov	r0, r5
 800add0:	4621      	mov	r1, r4
 800add2:	f7ff ff59 	bl	800ac88 <__sflush_r>
 800add6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800add8:	07da      	lsls	r2, r3, #31
 800adda:	4605      	mov	r5, r0
 800addc:	d4e0      	bmi.n	800ada0 <_fflush_r+0xc>
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	059b      	lsls	r3, r3, #22
 800ade2:	d4dd      	bmi.n	800ada0 <_fflush_r+0xc>
 800ade4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ade6:	f7ff f98b 	bl	800a100 <__retarget_lock_release_recursive>
 800adea:	e7d9      	b.n	800ada0 <_fflush_r+0xc>
 800adec:	4b05      	ldr	r3, [pc, #20]	; (800ae04 <_fflush_r+0x70>)
 800adee:	429c      	cmp	r4, r3
 800adf0:	d101      	bne.n	800adf6 <_fflush_r+0x62>
 800adf2:	68ac      	ldr	r4, [r5, #8]
 800adf4:	e7df      	b.n	800adb6 <_fflush_r+0x22>
 800adf6:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <_fflush_r+0x74>)
 800adf8:	429c      	cmp	r4, r3
 800adfa:	bf08      	it	eq
 800adfc:	68ec      	ldreq	r4, [r5, #12]
 800adfe:	e7da      	b.n	800adb6 <_fflush_r+0x22>
 800ae00:	0800b358 	.word	0x0800b358
 800ae04:	0800b378 	.word	0x0800b378
 800ae08:	0800b338 	.word	0x0800b338

0800ae0c <_lseek_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4d07      	ldr	r5, [pc, #28]	; (800ae2c <_lseek_r+0x20>)
 800ae10:	4604      	mov	r4, r0
 800ae12:	4608      	mov	r0, r1
 800ae14:	4611      	mov	r1, r2
 800ae16:	2200      	movs	r2, #0
 800ae18:	602a      	str	r2, [r5, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f7f6 f8b0 	bl	8000f80 <_lseek>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_lseek_r+0x1e>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_lseek_r+0x1e>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	2400856c 	.word	0x2400856c

0800ae30 <__swhatbuf_r>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	460e      	mov	r6, r1
 800ae34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae38:	2900      	cmp	r1, #0
 800ae3a:	b096      	sub	sp, #88	; 0x58
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	461d      	mov	r5, r3
 800ae40:	da08      	bge.n	800ae54 <__swhatbuf_r+0x24>
 800ae42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae46:	2200      	movs	r2, #0
 800ae48:	602a      	str	r2, [r5, #0]
 800ae4a:	061a      	lsls	r2, r3, #24
 800ae4c:	d410      	bmi.n	800ae70 <__swhatbuf_r+0x40>
 800ae4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae52:	e00e      	b.n	800ae72 <__swhatbuf_r+0x42>
 800ae54:	466a      	mov	r2, sp
 800ae56:	f000 f8b3 	bl	800afc0 <_fstat_r>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	dbf1      	blt.n	800ae42 <__swhatbuf_r+0x12>
 800ae5e:	9a01      	ldr	r2, [sp, #4]
 800ae60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae68:	425a      	negs	r2, r3
 800ae6a:	415a      	adcs	r2, r3
 800ae6c:	602a      	str	r2, [r5, #0]
 800ae6e:	e7ee      	b.n	800ae4e <__swhatbuf_r+0x1e>
 800ae70:	2340      	movs	r3, #64	; 0x40
 800ae72:	2000      	movs	r0, #0
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	b016      	add	sp, #88	; 0x58
 800ae78:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae7c <__smakebuf_r>:
 800ae7c:	898b      	ldrh	r3, [r1, #12]
 800ae7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae80:	079d      	lsls	r5, r3, #30
 800ae82:	4606      	mov	r6, r0
 800ae84:	460c      	mov	r4, r1
 800ae86:	d507      	bpl.n	800ae98 <__smakebuf_r+0x1c>
 800ae88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	6123      	str	r3, [r4, #16]
 800ae90:	2301      	movs	r3, #1
 800ae92:	6163      	str	r3, [r4, #20]
 800ae94:	b002      	add	sp, #8
 800ae96:	bd70      	pop	{r4, r5, r6, pc}
 800ae98:	ab01      	add	r3, sp, #4
 800ae9a:	466a      	mov	r2, sp
 800ae9c:	f7ff ffc8 	bl	800ae30 <__swhatbuf_r>
 800aea0:	9900      	ldr	r1, [sp, #0]
 800aea2:	4605      	mov	r5, r0
 800aea4:	4630      	mov	r0, r6
 800aea6:	f7ff f9bf 	bl	800a228 <_malloc_r>
 800aeaa:	b948      	cbnz	r0, 800aec0 <__smakebuf_r+0x44>
 800aeac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb0:	059a      	lsls	r2, r3, #22
 800aeb2:	d4ef      	bmi.n	800ae94 <__smakebuf_r+0x18>
 800aeb4:	f023 0303 	bic.w	r3, r3, #3
 800aeb8:	f043 0302 	orr.w	r3, r3, #2
 800aebc:	81a3      	strh	r3, [r4, #12]
 800aebe:	e7e3      	b.n	800ae88 <__smakebuf_r+0xc>
 800aec0:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <__smakebuf_r+0x7c>)
 800aec2:	62b3      	str	r3, [r6, #40]	; 0x28
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	6020      	str	r0, [r4, #0]
 800aec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	9b00      	ldr	r3, [sp, #0]
 800aed0:	6163      	str	r3, [r4, #20]
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	6120      	str	r0, [r4, #16]
 800aed6:	b15b      	cbz	r3, 800aef0 <__smakebuf_r+0x74>
 800aed8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aedc:	4630      	mov	r0, r6
 800aede:	f000 f881 	bl	800afe4 <_isatty_r>
 800aee2:	b128      	cbz	r0, 800aef0 <__smakebuf_r+0x74>
 800aee4:	89a3      	ldrh	r3, [r4, #12]
 800aee6:	f023 0303 	bic.w	r3, r3, #3
 800aeea:	f043 0301 	orr.w	r3, r3, #1
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	89a0      	ldrh	r0, [r4, #12]
 800aef2:	4305      	orrs	r5, r0
 800aef4:	81a5      	strh	r5, [r4, #12]
 800aef6:	e7cd      	b.n	800ae94 <__smakebuf_r+0x18>
 800aef8:	08009eed 	.word	0x08009eed

0800aefc <__malloc_lock>:
 800aefc:	4801      	ldr	r0, [pc, #4]	; (800af04 <__malloc_lock+0x8>)
 800aefe:	f7ff b8fe 	b.w	800a0fe <__retarget_lock_acquire_recursive>
 800af02:	bf00      	nop
 800af04:	24008560 	.word	0x24008560

0800af08 <__malloc_unlock>:
 800af08:	4801      	ldr	r0, [pc, #4]	; (800af10 <__malloc_unlock+0x8>)
 800af0a:	f7ff b8f9 	b.w	800a100 <__retarget_lock_release_recursive>
 800af0e:	bf00      	nop
 800af10:	24008560 	.word	0x24008560

0800af14 <_read_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d07      	ldr	r5, [pc, #28]	; (800af34 <_read_r+0x20>)
 800af18:	4604      	mov	r4, r0
 800af1a:	4608      	mov	r0, r1
 800af1c:	4611      	mov	r1, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	602a      	str	r2, [r5, #0]
 800af22:	461a      	mov	r2, r3
 800af24:	f7f5 ffcc 	bl	8000ec0 <_read>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_read_r+0x1e>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_read_r+0x1e>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	2400856c 	.word	0x2400856c

0800af38 <_raise_r>:
 800af38:	291f      	cmp	r1, #31
 800af3a:	b538      	push	{r3, r4, r5, lr}
 800af3c:	4604      	mov	r4, r0
 800af3e:	460d      	mov	r5, r1
 800af40:	d904      	bls.n	800af4c <_raise_r+0x14>
 800af42:	2316      	movs	r3, #22
 800af44:	6003      	str	r3, [r0, #0]
 800af46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af4e:	b112      	cbz	r2, 800af56 <_raise_r+0x1e>
 800af50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af54:	b94b      	cbnz	r3, 800af6a <_raise_r+0x32>
 800af56:	4620      	mov	r0, r4
 800af58:	f000 f830 	bl	800afbc <_getpid_r>
 800af5c:	462a      	mov	r2, r5
 800af5e:	4601      	mov	r1, r0
 800af60:	4620      	mov	r0, r4
 800af62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af66:	f000 b817 	b.w	800af98 <_kill_r>
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d00a      	beq.n	800af84 <_raise_r+0x4c>
 800af6e:	1c59      	adds	r1, r3, #1
 800af70:	d103      	bne.n	800af7a <_raise_r+0x42>
 800af72:	2316      	movs	r3, #22
 800af74:	6003      	str	r3, [r0, #0]
 800af76:	2001      	movs	r0, #1
 800af78:	e7e7      	b.n	800af4a <_raise_r+0x12>
 800af7a:	2400      	movs	r4, #0
 800af7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af80:	4628      	mov	r0, r5
 800af82:	4798      	blx	r3
 800af84:	2000      	movs	r0, #0
 800af86:	e7e0      	b.n	800af4a <_raise_r+0x12>

0800af88 <raise>:
 800af88:	4b02      	ldr	r3, [pc, #8]	; (800af94 <raise+0xc>)
 800af8a:	4601      	mov	r1, r0
 800af8c:	6818      	ldr	r0, [r3, #0]
 800af8e:	f7ff bfd3 	b.w	800af38 <_raise_r>
 800af92:	bf00      	nop
 800af94:	240000bc 	.word	0x240000bc

0800af98 <_kill_r>:
 800af98:	b538      	push	{r3, r4, r5, lr}
 800af9a:	4d07      	ldr	r5, [pc, #28]	; (800afb8 <_kill_r+0x20>)
 800af9c:	2300      	movs	r3, #0
 800af9e:	4604      	mov	r4, r0
 800afa0:	4608      	mov	r0, r1
 800afa2:	4611      	mov	r1, r2
 800afa4:	602b      	str	r3, [r5, #0]
 800afa6:	f7f5 ff6f 	bl	8000e88 <_kill>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	d102      	bne.n	800afb4 <_kill_r+0x1c>
 800afae:	682b      	ldr	r3, [r5, #0]
 800afb0:	b103      	cbz	r3, 800afb4 <_kill_r+0x1c>
 800afb2:	6023      	str	r3, [r4, #0]
 800afb4:	bd38      	pop	{r3, r4, r5, pc}
 800afb6:	bf00      	nop
 800afb8:	2400856c 	.word	0x2400856c

0800afbc <_getpid_r>:
 800afbc:	f7f5 bf5c 	b.w	8000e78 <_getpid>

0800afc0 <_fstat_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4d07      	ldr	r5, [pc, #28]	; (800afe0 <_fstat_r+0x20>)
 800afc4:	2300      	movs	r3, #0
 800afc6:	4604      	mov	r4, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	4611      	mov	r1, r2
 800afcc:	602b      	str	r3, [r5, #0]
 800afce:	f7f5 ffbc 	bl	8000f4a <_fstat>
 800afd2:	1c43      	adds	r3, r0, #1
 800afd4:	d102      	bne.n	800afdc <_fstat_r+0x1c>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	b103      	cbz	r3, 800afdc <_fstat_r+0x1c>
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	bd38      	pop	{r3, r4, r5, pc}
 800afde:	bf00      	nop
 800afe0:	2400856c 	.word	0x2400856c

0800afe4 <_isatty_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d06      	ldr	r5, [pc, #24]	; (800b000 <_isatty_r+0x1c>)
 800afe8:	2300      	movs	r3, #0
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	f7f5 ffbb 	bl	8000f6a <_isatty>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_isatty_r+0x1a>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_isatty_r+0x1a>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	2400856c 	.word	0x2400856c

0800b004 <_init>:
 800b004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b006:	bf00      	nop
 800b008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00a:	bc08      	pop	{r3}
 800b00c:	469e      	mov	lr, r3
 800b00e:	4770      	bx	lr

0800b010 <_fini>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	bf00      	nop
 800b014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b016:	bc08      	pop	{r3}
 800b018:	469e      	mov	lr, r3
 800b01a:	4770      	bx	lr
