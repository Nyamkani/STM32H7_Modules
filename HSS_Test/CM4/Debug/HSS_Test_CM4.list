
HSS_Test_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045fc  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  0810489c  0810489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08104bd0  08104bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08104bd4  08104bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000011c  10000000  08104bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000188  1000011c  08104cf4  0002011c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  100002a4  08104cf4  000202a4  2**0
                  ALLOC
  8 .openamp_section 0000008c  38000000  08104cf4  00030000  2**2
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f3db  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000041d5  00000000  00000000  0003f527  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec0  00000000  00000000  00043700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d10  00000000  00000000  000445c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000481da  00000000  00000000  000452d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018da8  00000000  00000000  0008d4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001af059  00000000  00000000  000a6252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002552ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000423c  00000000  00000000  002552fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	1000011c 	.word	0x1000011c
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08104884 	.word	0x08104884

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000120 	.word	0x10000120
 81002dc:	08104884 	.word	0x08104884

081002e0 <strcmp>:
 81002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 81002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81002e8:	2a01      	cmp	r2, #1
 81002ea:	bf28      	it	cs
 81002ec:	429a      	cmpcs	r2, r3
 81002ee:	d0f7      	beq.n	81002e0 <strcmp>
 81002f0:	1ad0      	subs	r0, r2, r3
 81002f2:	4770      	bx	lr
	...

08100300 <memchr>:
 8100300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8100304:	2a10      	cmp	r2, #16
 8100306:	db2b      	blt.n	8100360 <memchr+0x60>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	d008      	beq.n	8100320 <memchr+0x20>
 810030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100312:	3a01      	subs	r2, #1
 8100314:	428b      	cmp	r3, r1
 8100316:	d02d      	beq.n	8100374 <memchr+0x74>
 8100318:	f010 0f07 	tst.w	r0, #7
 810031c:	b342      	cbz	r2, 8100370 <memchr+0x70>
 810031e:	d1f6      	bne.n	810030e <memchr+0xe>
 8100320:	b4f0      	push	{r4, r5, r6, r7}
 8100322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810032a:	f022 0407 	bic.w	r4, r2, #7
 810032e:	f07f 0700 	mvns.w	r7, #0
 8100332:	2300      	movs	r3, #0
 8100334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100338:	3c08      	subs	r4, #8
 810033a:	ea85 0501 	eor.w	r5, r5, r1
 810033e:	ea86 0601 	eor.w	r6, r6, r1
 8100342:	fa85 f547 	uadd8	r5, r5, r7
 8100346:	faa3 f587 	sel	r5, r3, r7
 810034a:	fa86 f647 	uadd8	r6, r6, r7
 810034e:	faa5 f687 	sel	r6, r5, r7
 8100352:	b98e      	cbnz	r6, 8100378 <memchr+0x78>
 8100354:	d1ee      	bne.n	8100334 <memchr+0x34>
 8100356:	bcf0      	pop	{r4, r5, r6, r7}
 8100358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810035c:	f002 0207 	and.w	r2, r2, #7
 8100360:	b132      	cbz	r2, 8100370 <memchr+0x70>
 8100362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100366:	3a01      	subs	r2, #1
 8100368:	ea83 0301 	eor.w	r3, r3, r1
 810036c:	b113      	cbz	r3, 8100374 <memchr+0x74>
 810036e:	d1f8      	bne.n	8100362 <memchr+0x62>
 8100370:	2000      	movs	r0, #0
 8100372:	4770      	bx	lr
 8100374:	3801      	subs	r0, #1
 8100376:	4770      	bx	lr
 8100378:	2d00      	cmp	r5, #0
 810037a:	bf06      	itte	eq
 810037c:	4635      	moveq	r5, r6
 810037e:	3803      	subeq	r0, #3
 8100380:	3807      	subne	r0, #7
 8100382:	f015 0f01 	tst.w	r5, #1
 8100386:	d107      	bne.n	8100398 <memchr+0x98>
 8100388:	3001      	adds	r0, #1
 810038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810038e:	bf02      	ittt	eq
 8100390:	3001      	addeq	r0, #1
 8100392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100396:	3001      	addeq	r0, #1
 8100398:	bcf0      	pop	{r4, r5, r6, r7}
 810039a:	3801      	subs	r0, #1
 810039c:	4770      	bx	lr
 810039e:	bf00      	nop

081003a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81003a0:	b480      	push	{r7}
 81003a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81003a4:	4b09      	ldr	r3, [pc, #36]	; (81003cc <SystemInit+0x2c>)
 81003a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81003aa:	4a08      	ldr	r2, [pc, #32]	; (81003cc <SystemInit+0x2c>)
 81003ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81003b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81003b4:	4b05      	ldr	r3, [pc, #20]	; (81003cc <SystemInit+0x2c>)
 81003b6:	691b      	ldr	r3, [r3, #16]
 81003b8:	4a04      	ldr	r2, [pc, #16]	; (81003cc <SystemInit+0x2c>)
 81003ba:	f043 0310 	orr.w	r3, r3, #16
 81003be:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81003c0:	bf00      	nop
 81003c2:	46bd      	mov	sp, r7
 81003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003c8:	4770      	bx	lr
 81003ca:	bf00      	nop
 81003cc:	e000ed00 	.word	0xe000ed00

081003d0 <rpmsg_send>:
 *
 * Returns number of bytes it has sent or negative error value on failure.
 */
static inline int rpmsg_send(struct rpmsg_endpoint *ept, const void *data,
			     int len)
{
 81003d0:	b580      	push	{r7, lr}
 81003d2:	b086      	sub	sp, #24
 81003d4:	af02      	add	r7, sp, #8
 81003d6:	60f8      	str	r0, [r7, #12]
 81003d8:	60b9      	str	r1, [r7, #8]
 81003da:	607a      	str	r2, [r7, #4]
	if (ept->dest_addr == RPMSG_ADDR_ANY)
 81003dc:	68fb      	ldr	r3, [r7, #12]
 81003de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81003e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81003e4:	d101      	bne.n	81003ea <rpmsg_send+0x1a>
		return RPMSG_ERR_ADDR;
 81003e6:	4b0a      	ldr	r3, [pc, #40]	; (8100410 <rpmsg_send+0x40>)
 81003e8:	e00d      	b.n	8100406 <rpmsg_send+0x36>
	return rpmsg_send_offchannel_raw(ept, ept->addr, ept->dest_addr, data,
 81003ea:	68fb      	ldr	r3, [r7, #12]
 81003ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81003ee:	68fb      	ldr	r3, [r7, #12]
 81003f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 81003f2:	2301      	movs	r3, #1
 81003f4:	9301      	str	r3, [sp, #4]
 81003f6:	687b      	ldr	r3, [r7, #4]
 81003f8:	9300      	str	r3, [sp, #0]
 81003fa:	68bb      	ldr	r3, [r7, #8]
 81003fc:	68f8      	ldr	r0, [r7, #12]
 81003fe:	f001 ff21 	bl	8102244 <rpmsg_send_offchannel_raw>
 8100402:	4603      	mov	r3, r0
					 len, true);
 8100404:	bf00      	nop
}
 8100406:	4618      	mov	r0, r3
 8100408:	3710      	adds	r7, #16
 810040a:	46bd      	mov	sp, r7
 810040c:	bd80      	pop	{r7, pc}
 810040e:	bf00      	nop
 8100410:	fffff829 	.word	0xfffff829

08100414 <_ZL19rpmsg_recv_callbackP14rpmsg_endpointPvjmS1_>:
/* Private functions ---------------------------------------------------------*/


static int rpmsg_recv_callback(struct rpmsg_endpoint *ept, void *data,
               size_t len, uint32_t src, void *priv)
{
 8100414:	b4b0      	push	{r4, r5, r7}
 8100416:	b087      	sub	sp, #28
 8100418:	af00      	add	r7, sp, #0
 810041a:	60f8      	str	r0, [r7, #12]
 810041c:	60b9      	str	r1, [r7, #8]
 810041e:	607a      	str	r2, [r7, #4]
 8100420:	603b      	str	r3, [r7, #0]
	  received_data = *((openamp_type*) data);
 8100422:	4a0b      	ldr	r2, [pc, #44]	; (8100450 <_ZL19rpmsg_recv_callbackP14rpmsg_endpointPvjmS1_+0x3c>)
 8100424:	68bb      	ldr	r3, [r7, #8]
 8100426:	4614      	mov	r4, r2
 8100428:	461d      	mov	r5, r3
 810042a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810042c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810042e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100432:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100436:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	  size_t len_=  len;
 810043a:	687b      	ldr	r3, [r7, #4]
 810043c:	617b      	str	r3, [r7, #20]

	  message_received=1;
 810043e:	4b05      	ldr	r3, [pc, #20]	; (8100454 <_ZL19rpmsg_recv_callbackP14rpmsg_endpointPvjmS1_+0x40>)
 8100440:	2201      	movs	r2, #1
 8100442:	601a      	str	r2, [r3, #0]

  return 0;
 8100444:	2300      	movs	r3, #0
}
 8100446:	4618      	mov	r0, r3
 8100448:	371c      	adds	r7, #28
 810044a:	46bd      	mov	sp, r7
 810044c:	bcb0      	pop	{r4, r5, r7}
 810044e:	4770      	bx	lr
 8100450:	10000168 	.word	0x10000168
 8100454:	10000164 	.word	0x10000164

08100458 <_Z15receive_messagev>:

openamp_type receive_message(void)
{
 8100458:	b4b0      	push	{r4, r5, r7}
 810045a:	b083      	sub	sp, #12
 810045c:	af00      	add	r7, sp, #0
 810045e:	6078      	str	r0, [r7, #4]
 //while (message_received == 0)
  //{
   // OPENAMP_check_for_message();
  //}

  return received_data;
 8100460:	687b      	ldr	r3, [r7, #4]
 8100462:	4a08      	ldr	r2, [pc, #32]	; (8100484 <_Z15receive_messagev+0x2c>)
 8100464:	461c      	mov	r4, r3
 8100466:	4615      	mov	r5, r2
 8100468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810046a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810046c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810046e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100470:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8100478:	6878      	ldr	r0, [r7, #4]
 810047a:	370c      	adds	r7, #12
 810047c:	46bd      	mov	sp, r7
 810047e:	bcb0      	pop	{r4, r5, r7}
 8100480:	4770      	bx	lr
 8100482:	bf00      	nop
 8100484:	10000168 	.word	0x10000168

08100488 <_Z11OpenAMPInitv>:

int OpenAMPInit()
{
 8100488:	b580      	push	{r7, lr}
 810048a:	b084      	sub	sp, #16
 810048c:	af02      	add	r7, sp, #8
	int32_t status = 0;
 810048e:	2300      	movs	r3, #0
 8100490:	607b      	str	r3, [r7, #4]

	/* Inilitize the mailbox use notify the other core on new message */
	MAILBOX_Init();
 8100492:	f002 ffaf 	bl	81033f4 <MAILBOX_Init>

	/* Inilitize OpenAmp and libmetal libraries */
	status = MX_OPENAMP_Init(RPMSG_REMOTE, NULL);
 8100496:	2100      	movs	r1, #0
 8100498:	2001      	movs	r0, #1
 810049a:	f003 f8ad 	bl	81035f8 <MX_OPENAMP_Init>
 810049e:	6078      	str	r0, [r7, #4]

	if (status < 0) return status;
 81004a0:	687b      	ldr	r3, [r7, #4]
 81004a2:	2b00      	cmp	r3, #0
 81004a4:	da01      	bge.n	81004aa <_Z11OpenAMPInitv+0x22>
 81004a6:	687b      	ldr	r3, [r7, #4]
 81004a8:	e00a      	b.n	81004c0 <_Z11OpenAMPInitv+0x38>
//	Error_Handler();

	/* create a endpoint for rmpsg communication */
	status = OPENAMP_create_endpoint(&rp_endpoint, RPMSG_SERVICE_NAME, RPMSG_ADDR_ANY,
 81004aa:	2300      	movs	r3, #0
 81004ac:	9300      	str	r3, [sp, #0]
 81004ae:	4b06      	ldr	r3, [pc, #24]	; (81004c8 <_Z11OpenAMPInitv+0x40>)
 81004b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 81004b4:	4905      	ldr	r1, [pc, #20]	; (81004cc <_Z11OpenAMPInitv+0x44>)
 81004b6:	4806      	ldr	r0, [pc, #24]	; (81004d0 <_Z11OpenAMPInitv+0x48>)
 81004b8:	f003 f934 	bl	8103724 <OPENAMP_create_endpoint>
 81004bc:	6078      	str	r0, [r7, #4]
									rpmsg_recv_callback, NULL);

	return status;
 81004be:	687b      	ldr	r3, [r7, #4]
}
 81004c0:	4618      	mov	r0, r3
 81004c2:	3708      	adds	r7, #8
 81004c4:	46bd      	mov	sp, r7
 81004c6:	bd80      	pop	{r7, pc}
 81004c8:	08100415 	.word	0x08100415
 81004cc:	0810489c 	.word	0x0810489c
 81004d0:	10000194 	.word	0x10000194

081004d4 <_Z12OpenAMPDrivev>:

void OpenAMPDrive()
{
 81004d4:	b5b0      	push	{r4, r5, r7, lr}
 81004d6:	b08e      	sub	sp, #56	; 0x38
 81004d8:	af00      	add	r7, sp, #0

	OPENAMP_check_for_message();
 81004da:	f003 f941 	bl	8103760 <OPENAMP_check_for_message>


	if(message_received)
 81004de:	4b13      	ldr	r3, [pc, #76]	; (810052c <_Z12OpenAMPDrivev+0x58>)
 81004e0:	681b      	ldr	r3, [r3, #0]
 81004e2:	2b00      	cmp	r3, #0
 81004e4:	bf14      	ite	ne
 81004e6:	2301      	movne	r3, #1
 81004e8:	2300      	moveq	r3, #0
 81004ea:	b2db      	uxtb	r3, r3
 81004ec:	2b00      	cmp	r3, #0
 81004ee:	d018      	beq.n	8100522 <_Z12OpenAMPDrivev+0x4e>
	{
		message_recv = receive_message();
 81004f0:	4c0f      	ldr	r4, [pc, #60]	; (8100530 <_Z12OpenAMPDrivev+0x5c>)
 81004f2:	463b      	mov	r3, r7
 81004f4:	4618      	mov	r0, r3
 81004f6:	f7ff ffaf 	bl	8100458 <_Z15receive_messagev>
 81004fa:	4625      	mov	r5, r4
 81004fc:	463c      	mov	r4, r7
 81004fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8100502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8100504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8100506:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 810050a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

		//send_buf[msg_leng] = '\0';

		//printf("m4 got msg from m7: %s \r\n", send_buf);

		int32_t status = OPENAMP_send(&rp_endpoint, &message_recv, sizeof(message_recv));
 810050e:	222c      	movs	r2, #44	; 0x2c
 8100510:	4907      	ldr	r1, [pc, #28]	; (8100530 <_Z12OpenAMPDrivev+0x5c>)
 8100512:	4808      	ldr	r0, [pc, #32]	; (8100534 <_Z12OpenAMPDrivev+0x60>)
 8100514:	f7ff ff5c 	bl	81003d0 <rpmsg_send>
 8100518:	6378      	str	r0, [r7, #52]	; 0x34
		if (status < 0)
		{
		//  Error_Handler();
		}
		message_received = 0;
 810051a:	4b04      	ldr	r3, [pc, #16]	; (810052c <_Z12OpenAMPDrivev+0x58>)
 810051c:	2200      	movs	r2, #0
 810051e:	601a      	str	r2, [r3, #0]
	}

	return;
 8100520:	bf00      	nop
 8100522:	bf00      	nop
}
 8100524:	3738      	adds	r7, #56	; 0x38
 8100526:	46bd      	mov	sp, r7
 8100528:	bdb0      	pop	{r4, r5, r7, pc}
 810052a:	bf00      	nop
 810052c:	10000164 	.word	0x10000164
 8100530:	10000138 	.word	0x10000138
 8100534:	10000194 	.word	0x10000194

08100538 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8100538:	b480      	push	{r7}
 810053a:	b083      	sub	sp, #12
 810053c:	af00      	add	r7, sp, #0
 810053e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8100540:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8100544:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8100548:	f003 0301 	and.w	r3, r3, #1
 810054c:	2b00      	cmp	r3, #0
 810054e:	d009      	beq.n	8100564 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8100550:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8100554:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8100558:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 810055c:	2b00      	cmp	r3, #0
 810055e:	d001      	beq.n	8100564 <ITM_SendChar+0x2c>
 8100560:	2301      	movs	r3, #1
 8100562:	e000      	b.n	8100566 <ITM_SendChar+0x2e>
 8100564:	2300      	movs	r3, #0
 8100566:	2b00      	cmp	r3, #0
 8100568:	d010      	beq.n	810058c <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 810056a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 810056e:	681b      	ldr	r3, [r3, #0]
 8100570:	2b00      	cmp	r3, #0
 8100572:	bf0c      	ite	eq
 8100574:	2301      	moveq	r3, #1
 8100576:	2300      	movne	r3, #0
 8100578:	b2db      	uxtb	r3, r3
 810057a:	2b00      	cmp	r3, #0
 810057c:	d001      	beq.n	8100582 <ITM_SendChar+0x4a>
    {
      __NOP();
 810057e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8100580:	e7f3      	b.n	810056a <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8100582:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8100586:	687a      	ldr	r2, [r7, #4]
 8100588:	b2d2      	uxtb	r2, r2
 810058a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 810058c:	687b      	ldr	r3, [r7, #4]
}
 810058e:	4618      	mov	r0, r3
 8100590:	370c      	adds	r7, #12
 8100592:	46bd      	mov	sp, r7
 8100594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100598:	4770      	bx	lr

0810059a <_write>:
extern "C"{
#endif


int _write(int file, char *ptr, int len)
{
 810059a:	b580      	push	{r7, lr}
 810059c:	b086      	sub	sp, #24
 810059e:	af00      	add	r7, sp, #0
 81005a0:	60f8      	str	r0, [r7, #12]
 81005a2:	60b9      	str	r1, [r7, #8]
 81005a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81005a6:	2300      	movs	r3, #0
 81005a8:	617b      	str	r3, [r7, #20]
 81005aa:	697a      	ldr	r2, [r7, #20]
 81005ac:	687b      	ldr	r3, [r7, #4]
 81005ae:	429a      	cmp	r2, r3
 81005b0:	da0a      	bge.n	81005c8 <_write+0x2e>
  {
	  ITM_SendChar(*ptr++);
 81005b2:	68bb      	ldr	r3, [r7, #8]
 81005b4:	1c5a      	adds	r2, r3, #1
 81005b6:	60ba      	str	r2, [r7, #8]
 81005b8:	781b      	ldrb	r3, [r3, #0]
 81005ba:	4618      	mov	r0, r3
 81005bc:	f7ff ffbc 	bl	8100538 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81005c0:	697b      	ldr	r3, [r7, #20]
 81005c2:	3301      	adds	r3, #1
 81005c4:	617b      	str	r3, [r7, #20]
 81005c6:	e7f0      	b.n	81005aa <_write+0x10>
  }
  return len;
 81005c8:	687b      	ldr	r3, [r7, #4]
}
 81005ca:	4618      	mov	r0, r3
 81005cc:	3718      	adds	r7, #24
 81005ce:	46bd      	mov	sp, r7
 81005d0:	bd80      	pop	{r7, pc}
	...

081005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81005d4:	b580      	push	{r7, lr}
 81005d6:	b082      	sub	sp, #8
 81005d8:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
	/* USER CODE BEGIN Boot_Mode_Sequence_1 */



	  __HAL_RCC_HSEM_CLK_ENABLE();
 81005da:	4b1f      	ldr	r3, [pc, #124]	; (8100658 <main+0x84>)
 81005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005e0:	4a1d      	ldr	r2, [pc, #116]	; (8100658 <main+0x84>)
 81005e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81005e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81005ea:	4b1b      	ldr	r3, [pc, #108]	; (8100658 <main+0x84>)
 81005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81005f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81005f4:	603b      	str	r3, [r7, #0]
 81005f6:	683b      	ldr	r3, [r7, #0]
	  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81005f8:	2001      	movs	r0, #1
 81005fa:	f000 fbb9 	bl	8100d70 <HAL_HSEM_ActivateNotification>
	  HAL_PWREx_ClearPendingEvent();
 81005fe:	f000 fc5d 	bl	8100ebc <HAL_PWREx_ClearPendingEvent>
	  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100602:	2201      	movs	r2, #1
 8100604:	2102      	movs	r1, #2
 8100606:	2000      	movs	r0, #0
 8100608:	f000 fbde 	bl	8100dc8 <HAL_PWREx_EnterSTOPMode>



	/* USER CODE END Boot_Mode_Sequence_1 */
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810060c:	f000 f986 	bl	810091c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100610:	4b12      	ldr	r3, [pc, #72]	; (810065c <main+0x88>)
 8100612:	681b      	ldr	r3, [r3, #0]
 8100614:	091b      	lsrs	r3, r3, #4
 8100616:	f003 030f 	and.w	r3, r3, #15
 810061a:	2b07      	cmp	r3, #7
 810061c:	d108      	bne.n	8100630 <main+0x5c>
 810061e:	4b10      	ldr	r3, [pc, #64]	; (8100660 <main+0x8c>)
 8100620:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100624:	4a0e      	ldr	r2, [pc, #56]	; (8100660 <main+0x8c>)
 8100626:	f043 0301 	orr.w	r3, r3, #1
 810062a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810062e:	e007      	b.n	8100640 <main+0x6c>
 8100630:	4b0b      	ldr	r3, [pc, #44]	; (8100660 <main+0x8c>)
 8100632:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100636:	4a0a      	ldr	r2, [pc, #40]	; (8100660 <main+0x8c>)
 8100638:	f043 0301 	orr.w	r3, r3, #1
 810063c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100640:	f000 f810 	bl	8100664 <_ZL12MX_GPIO_Initv>
  //MX_RTC_Init();
  //MX_TIM8_Init();
  //MX_TIM13_Init();
  /* USER CODE BEGIN 2 */
  int i = OpenAMPInit();
 8100644:	f7ff ff20 	bl	8100488 <_Z11OpenAMPInitv>
 8100648:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  OpenAMPDrive();
 810064a:	f7ff ff43 	bl	81004d4 <_Z12OpenAMPDrivev>

	  HAL_Delay(10);
 810064e:	200a      	movs	r0, #10
 8100650:	f000 fa18 	bl	8100a84 <HAL_Delay>
	  OpenAMPDrive();
 8100654:	e7f9      	b.n	810064a <main+0x76>
 8100656:	bf00      	nop
 8100658:	58024400 	.word	0x58024400
 810065c:	e000ed00 	.word	0xe000ed00
 8100660:	58026400 	.word	0x58026400

08100664 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100664:	b480      	push	{r7}
 8100666:	b085      	sub	sp, #20
 8100668:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810066a:	4b19      	ldr	r3, [pc, #100]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 810066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100670:	4a17      	ldr	r2, [pc, #92]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 8100672:	f043 0304 	orr.w	r3, r3, #4
 8100676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810067a:	4b15      	ldr	r3, [pc, #84]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 810067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100680:	f003 0304 	and.w	r3, r3, #4
 8100684:	60fb      	str	r3, [r7, #12]
 8100686:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100688:	4b11      	ldr	r3, [pc, #68]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 810068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810068e:	4a10      	ldr	r2, [pc, #64]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 8100690:	f043 0320 	orr.w	r3, r3, #32
 8100694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100698:	4b0d      	ldr	r3, [pc, #52]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 810069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810069e:	f003 0320 	and.w	r3, r3, #32
 81006a2:	60bb      	str	r3, [r7, #8]
 81006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81006a6:	4b0a      	ldr	r3, [pc, #40]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 81006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006ac:	4a08      	ldr	r2, [pc, #32]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 81006ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006b6:	4b06      	ldr	r3, [pc, #24]	; (81006d0 <_ZL12MX_GPIO_Initv+0x6c>)
 81006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81006c0:	607b      	str	r3, [r7, #4]
 81006c2:	687b      	ldr	r3, [r7, #4]

}
 81006c4:	bf00      	nop
 81006c6:	3714      	adds	r7, #20
 81006c8:	46bd      	mov	sp, r7
 81006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006ce:	4770      	bx	lr
 81006d0:	58024400 	.word	0x58024400

081006d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81006d4:	b580      	push	{r7, lr}
 81006d6:	b082      	sub	sp, #8
 81006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81006da:	4b0d      	ldr	r3, [pc, #52]	; (8100710 <HAL_MspInit+0x3c>)
 81006dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81006e0:	4a0b      	ldr	r2, [pc, #44]	; (8100710 <HAL_MspInit+0x3c>)
 81006e2:	f043 0302 	orr.w	r3, r3, #2
 81006e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81006ea:	4b09      	ldr	r3, [pc, #36]	; (8100710 <HAL_MspInit+0x3c>)
 81006ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81006f0:	f003 0302 	and.w	r3, r3, #2
 81006f4:	607b      	str	r3, [r7, #4]
 81006f6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM2_IRQn, 0, 0);
 81006f8:	2200      	movs	r2, #0
 81006fa:	2100      	movs	r1, #0
 81006fc:	207e      	movs	r0, #126	; 0x7e
 81006fe:	f000 fac0 	bl	8100c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM2_IRQn);
 8100702:	207e      	movs	r0, #126	; 0x7e
 8100704:	f000 fad7 	bl	8100cb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100708:	bf00      	nop
 810070a:	3708      	adds	r7, #8
 810070c:	46bd      	mov	sp, r7
 810070e:	bd80      	pop	{r7, pc}
 8100710:	58024400 	.word	0x58024400

08100714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100714:	b480      	push	{r7}
 8100716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100718:	e7fe      	b.n	8100718 <NMI_Handler+0x4>

0810071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810071a:	b480      	push	{r7}
 810071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810071e:	e7fe      	b.n	810071e <HardFault_Handler+0x4>

08100720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100720:	b480      	push	{r7}
 8100722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100724:	e7fe      	b.n	8100724 <MemManage_Handler+0x4>

08100726 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100726:	b480      	push	{r7}
 8100728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810072a:	e7fe      	b.n	810072a <BusFault_Handler+0x4>

0810072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810072c:	b480      	push	{r7}
 810072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100730:	e7fe      	b.n	8100730 <UsageFault_Handler+0x4>

08100732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100732:	b480      	push	{r7}
 8100734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100736:	bf00      	nop
 8100738:	46bd      	mov	sp, r7
 810073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810073e:	4770      	bx	lr

08100740 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100740:	b480      	push	{r7}
 8100742:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100744:	bf00      	nop
 8100746:	46bd      	mov	sp, r7
 8100748:	f85d 7b04 	ldr.w	r7, [sp], #4
 810074c:	4770      	bx	lr

0810074e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810074e:	b480      	push	{r7}
 8100750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100752:	bf00      	nop
 8100754:	46bd      	mov	sp, r7
 8100756:	f85d 7b04 	ldr.w	r7, [sp], #4
 810075a:	4770      	bx	lr

0810075c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810075c:	b580      	push	{r7, lr}
 810075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100760:	f000 f970 	bl	8100a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100764:	bf00      	nop
 8100766:	bd80      	pop	{r7, pc}

08100768 <HSEM2_IRQHandler>:

/**
  * @brief This function handles HSEM2 global interrupt.
  */
void HSEM2_IRQHandler(void)
{
 8100768:	b580      	push	{r7, lr}
 810076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM2_IRQn 0 */

  /* USER CODE END HSEM2_IRQn 0 */
  HAL_HSEM_IRQHandler();
 810076c:	f000 fb12 	bl	8100d94 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM2_IRQn 1 */

  /* USER CODE END HSEM2_IRQn 1 */
}
 8100770:	bf00      	nop
 8100772:	bd80      	pop	{r7, pc}

08100774 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8100774:	b480      	push	{r7}
 8100776:	af00      	add	r7, sp, #0
  return 1;
 8100778:	2301      	movs	r3, #1
}
 810077a:	4618      	mov	r0, r3
 810077c:	46bd      	mov	sp, r7
 810077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100782:	4770      	bx	lr

08100784 <_kill>:

int _kill(int pid, int sig)
{
 8100784:	b580      	push	{r7, lr}
 8100786:	b082      	sub	sp, #8
 8100788:	af00      	add	r7, sp, #0
 810078a:	6078      	str	r0, [r7, #4]
 810078c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810078e:	f003 f82d 	bl	81037ec <__errno>
 8100792:	4603      	mov	r3, r0
 8100794:	2216      	movs	r2, #22
 8100796:	601a      	str	r2, [r3, #0]
  return -1;
 8100798:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 810079c:	4618      	mov	r0, r3
 810079e:	3708      	adds	r7, #8
 81007a0:	46bd      	mov	sp, r7
 81007a2:	bd80      	pop	{r7, pc}

081007a4 <_exit>:

void _exit (int status)
{
 81007a4:	b580      	push	{r7, lr}
 81007a6:	b082      	sub	sp, #8
 81007a8:	af00      	add	r7, sp, #0
 81007aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81007ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 81007b0:	6878      	ldr	r0, [r7, #4]
 81007b2:	f7ff ffe7 	bl	8100784 <_kill>
  while (1) {}    /* Make sure we hang here */
 81007b6:	e7fe      	b.n	81007b6 <_exit+0x12>

081007b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81007b8:	b580      	push	{r7, lr}
 81007ba:	b086      	sub	sp, #24
 81007bc:	af00      	add	r7, sp, #0
 81007be:	60f8      	str	r0, [r7, #12]
 81007c0:	60b9      	str	r1, [r7, #8]
 81007c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81007c4:	2300      	movs	r3, #0
 81007c6:	617b      	str	r3, [r7, #20]
 81007c8:	e00a      	b.n	81007e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81007ca:	f3af 8000 	nop.w
 81007ce:	4601      	mov	r1, r0
 81007d0:	68bb      	ldr	r3, [r7, #8]
 81007d2:	1c5a      	adds	r2, r3, #1
 81007d4:	60ba      	str	r2, [r7, #8]
 81007d6:	b2ca      	uxtb	r2, r1
 81007d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81007da:	697b      	ldr	r3, [r7, #20]
 81007dc:	3301      	adds	r3, #1
 81007de:	617b      	str	r3, [r7, #20]
 81007e0:	697a      	ldr	r2, [r7, #20]
 81007e2:	687b      	ldr	r3, [r7, #4]
 81007e4:	429a      	cmp	r2, r3
 81007e6:	dbf0      	blt.n	81007ca <_read+0x12>
  }

  return len;
 81007e8:	687b      	ldr	r3, [r7, #4]
}
 81007ea:	4618      	mov	r0, r3
 81007ec:	3718      	adds	r7, #24
 81007ee:	46bd      	mov	sp, r7
 81007f0:	bd80      	pop	{r7, pc}

081007f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 81007f2:	b480      	push	{r7}
 81007f4:	b083      	sub	sp, #12
 81007f6:	af00      	add	r7, sp, #0
 81007f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81007fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 81007fe:	4618      	mov	r0, r3
 8100800:	370c      	adds	r7, #12
 8100802:	46bd      	mov	sp, r7
 8100804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100808:	4770      	bx	lr

0810080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810080a:	b480      	push	{r7}
 810080c:	b083      	sub	sp, #12
 810080e:	af00      	add	r7, sp, #0
 8100810:	6078      	str	r0, [r7, #4]
 8100812:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8100814:	683b      	ldr	r3, [r7, #0]
 8100816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810081a:	605a      	str	r2, [r3, #4]
  return 0;
 810081c:	2300      	movs	r3, #0
}
 810081e:	4618      	mov	r0, r3
 8100820:	370c      	adds	r7, #12
 8100822:	46bd      	mov	sp, r7
 8100824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100828:	4770      	bx	lr

0810082a <_isatty>:

int _isatty(int file)
{
 810082a:	b480      	push	{r7}
 810082c:	b083      	sub	sp, #12
 810082e:	af00      	add	r7, sp, #0
 8100830:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8100832:	2301      	movs	r3, #1
}
 8100834:	4618      	mov	r0, r3
 8100836:	370c      	adds	r7, #12
 8100838:	46bd      	mov	sp, r7
 810083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810083e:	4770      	bx	lr

08100840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100840:	b480      	push	{r7}
 8100842:	b085      	sub	sp, #20
 8100844:	af00      	add	r7, sp, #0
 8100846:	60f8      	str	r0, [r7, #12]
 8100848:	60b9      	str	r1, [r7, #8]
 810084a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810084c:	2300      	movs	r3, #0
}
 810084e:	4618      	mov	r0, r3
 8100850:	3714      	adds	r7, #20
 8100852:	46bd      	mov	sp, r7
 8100854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100858:	4770      	bx	lr
	...

0810085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810085c:	b580      	push	{r7, lr}
 810085e:	b086      	sub	sp, #24
 8100860:	af00      	add	r7, sp, #0
 8100862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100864:	4a14      	ldr	r2, [pc, #80]	; (81008b8 <_sbrk+0x5c>)
 8100866:	4b15      	ldr	r3, [pc, #84]	; (81008bc <_sbrk+0x60>)
 8100868:	1ad3      	subs	r3, r2, r3
 810086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810086c:	697b      	ldr	r3, [r7, #20]
 810086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100870:	4b13      	ldr	r3, [pc, #76]	; (81008c0 <_sbrk+0x64>)
 8100872:	681b      	ldr	r3, [r3, #0]
 8100874:	2b00      	cmp	r3, #0
 8100876:	d102      	bne.n	810087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100878:	4b11      	ldr	r3, [pc, #68]	; (81008c0 <_sbrk+0x64>)
 810087a:	4a12      	ldr	r2, [pc, #72]	; (81008c4 <_sbrk+0x68>)
 810087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810087e:	4b10      	ldr	r3, [pc, #64]	; (81008c0 <_sbrk+0x64>)
 8100880:	681a      	ldr	r2, [r3, #0]
 8100882:	687b      	ldr	r3, [r7, #4]
 8100884:	4413      	add	r3, r2
 8100886:	693a      	ldr	r2, [r7, #16]
 8100888:	429a      	cmp	r2, r3
 810088a:	d207      	bcs.n	810089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810088c:	f002 ffae 	bl	81037ec <__errno>
 8100890:	4603      	mov	r3, r0
 8100892:	220c      	movs	r2, #12
 8100894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810089a:	e009      	b.n	81008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810089c:	4b08      	ldr	r3, [pc, #32]	; (81008c0 <_sbrk+0x64>)
 810089e:	681b      	ldr	r3, [r3, #0]
 81008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81008a2:	4b07      	ldr	r3, [pc, #28]	; (81008c0 <_sbrk+0x64>)
 81008a4:	681a      	ldr	r2, [r3, #0]
 81008a6:	687b      	ldr	r3, [r7, #4]
 81008a8:	4413      	add	r3, r2
 81008aa:	4a05      	ldr	r2, [pc, #20]	; (81008c0 <_sbrk+0x64>)
 81008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81008ae:	68fb      	ldr	r3, [r7, #12]
}
 81008b0:	4618      	mov	r0, r3
 81008b2:	3718      	adds	r7, #24
 81008b4:	46bd      	mov	sp, r7
 81008b6:	bd80      	pop	{r7, pc}
 81008b8:	10048000 	.word	0x10048000
 81008bc:	00000400 	.word	0x00000400
 81008c0:	100001d4 	.word	0x100001d4
 81008c4:	100002a8 	.word	0x100002a8

081008c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81008c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100900 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81008cc:	f7ff fd68 	bl	81003a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81008d0:	480c      	ldr	r0, [pc, #48]	; (8100904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81008d2:	490d      	ldr	r1, [pc, #52]	; (8100908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81008d4:	4a0d      	ldr	r2, [pc, #52]	; (810090c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81008d8:	e002      	b.n	81008e0 <LoopCopyDataInit>

081008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81008de:	3304      	adds	r3, #4

081008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81008e4:	d3f9      	bcc.n	81008da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81008e6:	4a0a      	ldr	r2, [pc, #40]	; (8100910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81008e8:	4c0a      	ldr	r4, [pc, #40]	; (8100914 <LoopFillZerobss+0x22>)
  movs r3, #0
 81008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 81008ec:	e001      	b.n	81008f2 <LoopFillZerobss>

081008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81008f0:	3204      	adds	r2, #4

081008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81008f4:	d3fb      	bcc.n	81008ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81008f6:	f002 ff91 	bl	810381c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81008fa:	f7ff fe6b 	bl	81005d4 <main>
  bx  lr
 81008fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100900:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100904:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100908:	1000011c 	.word	0x1000011c
  ldr r2, =_sidata
 810090c:	08104bd8 	.word	0x08104bd8
  ldr r2, =_sbss
 8100910:	1000011c 	.word	0x1000011c
  ldr r4, =_ebss
 8100914:	100002a4 	.word	0x100002a4

08100918 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100918:	e7fe      	b.n	8100918 <ADC3_IRQHandler>
	...

0810091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810091c:	b580      	push	{r7, lr}
 810091e:	b082      	sub	sp, #8
 8100920:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100922:	4b28      	ldr	r3, [pc, #160]	; (81009c4 <HAL_Init+0xa8>)
 8100924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100928:	4a26      	ldr	r2, [pc, #152]	; (81009c4 <HAL_Init+0xa8>)
 810092a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810092e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100932:	4b24      	ldr	r3, [pc, #144]	; (81009c4 <HAL_Init+0xa8>)
 8100934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810093c:	603b      	str	r3, [r7, #0]
 810093e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100940:	4b21      	ldr	r3, [pc, #132]	; (81009c8 <HAL_Init+0xac>)
 8100942:	681b      	ldr	r3, [r3, #0]
 8100944:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100948:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810094c:	4a1e      	ldr	r2, [pc, #120]	; (81009c8 <HAL_Init+0xac>)
 810094e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100952:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100954:	4b1c      	ldr	r3, [pc, #112]	; (81009c8 <HAL_Init+0xac>)
 8100956:	681b      	ldr	r3, [r3, #0]
 8100958:	4a1b      	ldr	r2, [pc, #108]	; (81009c8 <HAL_Init+0xac>)
 810095a:	f043 0301 	orr.w	r3, r3, #1
 810095e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100960:	2003      	movs	r0, #3
 8100962:	f000 f983 	bl	8100c6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100966:	f000 fab7 	bl	8100ed8 <HAL_RCC_GetSysClockFreq>
 810096a:	4602      	mov	r2, r0
 810096c:	4b15      	ldr	r3, [pc, #84]	; (81009c4 <HAL_Init+0xa8>)
 810096e:	699b      	ldr	r3, [r3, #24]
 8100970:	0a1b      	lsrs	r3, r3, #8
 8100972:	f003 030f 	and.w	r3, r3, #15
 8100976:	4915      	ldr	r1, [pc, #84]	; (81009cc <HAL_Init+0xb0>)
 8100978:	5ccb      	ldrb	r3, [r1, r3]
 810097a:	f003 031f 	and.w	r3, r3, #31
 810097e:	fa22 f303 	lsr.w	r3, r2, r3
 8100982:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100984:	4b0f      	ldr	r3, [pc, #60]	; (81009c4 <HAL_Init+0xa8>)
 8100986:	699b      	ldr	r3, [r3, #24]
 8100988:	f003 030f 	and.w	r3, r3, #15
 810098c:	4a0f      	ldr	r2, [pc, #60]	; (81009cc <HAL_Init+0xb0>)
 810098e:	5cd3      	ldrb	r3, [r2, r3]
 8100990:	f003 031f 	and.w	r3, r3, #31
 8100994:	687a      	ldr	r2, [r7, #4]
 8100996:	fa22 f303 	lsr.w	r3, r2, r3
 810099a:	4a0d      	ldr	r2, [pc, #52]	; (81009d0 <HAL_Init+0xb4>)
 810099c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810099e:	4b0c      	ldr	r3, [pc, #48]	; (81009d0 <HAL_Init+0xb4>)
 81009a0:	681b      	ldr	r3, [r3, #0]
 81009a2:	4a0c      	ldr	r2, [pc, #48]	; (81009d4 <HAL_Init+0xb8>)
 81009a4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81009a6:	2000      	movs	r0, #0
 81009a8:	f000 f816 	bl	81009d8 <HAL_InitTick>
 81009ac:	4603      	mov	r3, r0
 81009ae:	2b00      	cmp	r3, #0
 81009b0:	d001      	beq.n	81009b6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81009b2:	2301      	movs	r3, #1
 81009b4:	e002      	b.n	81009bc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81009b6:	f7ff fe8d 	bl	81006d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81009ba:	2300      	movs	r3, #0
}
 81009bc:	4618      	mov	r0, r3
 81009be:	3708      	adds	r7, #8
 81009c0:	46bd      	mov	sp, r7
 81009c2:	bd80      	pop	{r7, pc}
 81009c4:	58024400 	.word	0x58024400
 81009c8:	40024400 	.word	0x40024400
 81009cc:	08104a98 	.word	0x08104a98
 81009d0:	10000004 	.word	0x10000004
 81009d4:	10000000 	.word	0x10000000

081009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81009d8:	b580      	push	{r7, lr}
 81009da:	b082      	sub	sp, #8
 81009dc:	af00      	add	r7, sp, #0
 81009de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81009e0:	4b15      	ldr	r3, [pc, #84]	; (8100a38 <HAL_InitTick+0x60>)
 81009e2:	781b      	ldrb	r3, [r3, #0]
 81009e4:	2b00      	cmp	r3, #0
 81009e6:	d101      	bne.n	81009ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81009e8:	2301      	movs	r3, #1
 81009ea:	e021      	b.n	8100a30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81009ec:	4b13      	ldr	r3, [pc, #76]	; (8100a3c <HAL_InitTick+0x64>)
 81009ee:	681a      	ldr	r2, [r3, #0]
 81009f0:	4b11      	ldr	r3, [pc, #68]	; (8100a38 <HAL_InitTick+0x60>)
 81009f2:	781b      	ldrb	r3, [r3, #0]
 81009f4:	4619      	mov	r1, r3
 81009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 81009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a02:	4618      	mov	r0, r3
 8100a04:	f000 f965 	bl	8100cd2 <HAL_SYSTICK_Config>
 8100a08:	4603      	mov	r3, r0
 8100a0a:	2b00      	cmp	r3, #0
 8100a0c:	d001      	beq.n	8100a12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100a0e:	2301      	movs	r3, #1
 8100a10:	e00e      	b.n	8100a30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100a12:	687b      	ldr	r3, [r7, #4]
 8100a14:	2b0f      	cmp	r3, #15
 8100a16:	d80a      	bhi.n	8100a2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100a18:	2200      	movs	r2, #0
 8100a1a:	6879      	ldr	r1, [r7, #4]
 8100a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100a20:	f000 f92f 	bl	8100c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100a24:	4a06      	ldr	r2, [pc, #24]	; (8100a40 <HAL_InitTick+0x68>)
 8100a26:	687b      	ldr	r3, [r7, #4]
 8100a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100a2a:	2300      	movs	r3, #0
 8100a2c:	e000      	b.n	8100a30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100a2e:	2301      	movs	r3, #1
}
 8100a30:	4618      	mov	r0, r3
 8100a32:	3708      	adds	r7, #8
 8100a34:	46bd      	mov	sp, r7
 8100a36:	bd80      	pop	{r7, pc}
 8100a38:	1000000c 	.word	0x1000000c
 8100a3c:	10000000 	.word	0x10000000
 8100a40:	10000008 	.word	0x10000008

08100a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100a44:	b480      	push	{r7}
 8100a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100a48:	4b06      	ldr	r3, [pc, #24]	; (8100a64 <HAL_IncTick+0x20>)
 8100a4a:	781b      	ldrb	r3, [r3, #0]
 8100a4c:	461a      	mov	r2, r3
 8100a4e:	4b06      	ldr	r3, [pc, #24]	; (8100a68 <HAL_IncTick+0x24>)
 8100a50:	681b      	ldr	r3, [r3, #0]
 8100a52:	4413      	add	r3, r2
 8100a54:	4a04      	ldr	r2, [pc, #16]	; (8100a68 <HAL_IncTick+0x24>)
 8100a56:	6013      	str	r3, [r2, #0]
}
 8100a58:	bf00      	nop
 8100a5a:	46bd      	mov	sp, r7
 8100a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a60:	4770      	bx	lr
 8100a62:	bf00      	nop
 8100a64:	1000000c 	.word	0x1000000c
 8100a68:	100001d8 	.word	0x100001d8

08100a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100a6c:	b480      	push	{r7}
 8100a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8100a70:	4b03      	ldr	r3, [pc, #12]	; (8100a80 <HAL_GetTick+0x14>)
 8100a72:	681b      	ldr	r3, [r3, #0]
}
 8100a74:	4618      	mov	r0, r3
 8100a76:	46bd      	mov	sp, r7
 8100a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a7c:	4770      	bx	lr
 8100a7e:	bf00      	nop
 8100a80:	100001d8 	.word	0x100001d8

08100a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8100a84:	b580      	push	{r7, lr}
 8100a86:	b084      	sub	sp, #16
 8100a88:	af00      	add	r7, sp, #0
 8100a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8100a8c:	f7ff ffee 	bl	8100a6c <HAL_GetTick>
 8100a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8100a92:	687b      	ldr	r3, [r7, #4]
 8100a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8100a96:	68fb      	ldr	r3, [r7, #12]
 8100a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8100a9c:	d005      	beq.n	8100aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8100a9e:	4b0a      	ldr	r3, [pc, #40]	; (8100ac8 <HAL_Delay+0x44>)
 8100aa0:	781b      	ldrb	r3, [r3, #0]
 8100aa2:	461a      	mov	r2, r3
 8100aa4:	68fb      	ldr	r3, [r7, #12]
 8100aa6:	4413      	add	r3, r2
 8100aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100aaa:	bf00      	nop
 8100aac:	f7ff ffde 	bl	8100a6c <HAL_GetTick>
 8100ab0:	4602      	mov	r2, r0
 8100ab2:	68bb      	ldr	r3, [r7, #8]
 8100ab4:	1ad3      	subs	r3, r2, r3
 8100ab6:	68fa      	ldr	r2, [r7, #12]
 8100ab8:	429a      	cmp	r2, r3
 8100aba:	d8f7      	bhi.n	8100aac <HAL_Delay+0x28>
  {
  }
}
 8100abc:	bf00      	nop
 8100abe:	bf00      	nop
 8100ac0:	3710      	adds	r7, #16
 8100ac2:	46bd      	mov	sp, r7
 8100ac4:	bd80      	pop	{r7, pc}
 8100ac6:	bf00      	nop
 8100ac8:	1000000c 	.word	0x1000000c

08100acc <__NVIC_SetPriorityGrouping>:
{
 8100acc:	b480      	push	{r7}
 8100ace:	b085      	sub	sp, #20
 8100ad0:	af00      	add	r7, sp, #0
 8100ad2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100ad4:	687b      	ldr	r3, [r7, #4]
 8100ad6:	f003 0307 	and.w	r3, r3, #7
 8100ada:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100adc:	4b0c      	ldr	r3, [pc, #48]	; (8100b10 <__NVIC_SetPriorityGrouping+0x44>)
 8100ade:	68db      	ldr	r3, [r3, #12]
 8100ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100ae2:	68ba      	ldr	r2, [r7, #8]
 8100ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100ae8:	4013      	ands	r3, r2
 8100aea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100aec:	68fb      	ldr	r3, [r7, #12]
 8100aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100af0:	68bb      	ldr	r3, [r7, #8]
 8100af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100afe:	4a04      	ldr	r2, [pc, #16]	; (8100b10 <__NVIC_SetPriorityGrouping+0x44>)
 8100b00:	68bb      	ldr	r3, [r7, #8]
 8100b02:	60d3      	str	r3, [r2, #12]
}
 8100b04:	bf00      	nop
 8100b06:	3714      	adds	r7, #20
 8100b08:	46bd      	mov	sp, r7
 8100b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b0e:	4770      	bx	lr
 8100b10:	e000ed00 	.word	0xe000ed00

08100b14 <__NVIC_GetPriorityGrouping>:
{
 8100b14:	b480      	push	{r7}
 8100b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b18:	4b04      	ldr	r3, [pc, #16]	; (8100b2c <__NVIC_GetPriorityGrouping+0x18>)
 8100b1a:	68db      	ldr	r3, [r3, #12]
 8100b1c:	0a1b      	lsrs	r3, r3, #8
 8100b1e:	f003 0307 	and.w	r3, r3, #7
}
 8100b22:	4618      	mov	r0, r3
 8100b24:	46bd      	mov	sp, r7
 8100b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b2a:	4770      	bx	lr
 8100b2c:	e000ed00 	.word	0xe000ed00

08100b30 <__NVIC_EnableIRQ>:
{
 8100b30:	b480      	push	{r7}
 8100b32:	b083      	sub	sp, #12
 8100b34:	af00      	add	r7, sp, #0
 8100b36:	4603      	mov	r3, r0
 8100b38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b3e:	2b00      	cmp	r3, #0
 8100b40:	db0b      	blt.n	8100b5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100b42:	88fb      	ldrh	r3, [r7, #6]
 8100b44:	f003 021f 	and.w	r2, r3, #31
 8100b48:	4907      	ldr	r1, [pc, #28]	; (8100b68 <__NVIC_EnableIRQ+0x38>)
 8100b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b4e:	095b      	lsrs	r3, r3, #5
 8100b50:	2001      	movs	r0, #1
 8100b52:	fa00 f202 	lsl.w	r2, r0, r2
 8100b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8100b5a:	bf00      	nop
 8100b5c:	370c      	adds	r7, #12
 8100b5e:	46bd      	mov	sp, r7
 8100b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b64:	4770      	bx	lr
 8100b66:	bf00      	nop
 8100b68:	e000e100 	.word	0xe000e100

08100b6c <__NVIC_SetPriority>:
{
 8100b6c:	b480      	push	{r7}
 8100b6e:	b083      	sub	sp, #12
 8100b70:	af00      	add	r7, sp, #0
 8100b72:	4603      	mov	r3, r0
 8100b74:	6039      	str	r1, [r7, #0]
 8100b76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b7c:	2b00      	cmp	r3, #0
 8100b7e:	db0a      	blt.n	8100b96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b80:	683b      	ldr	r3, [r7, #0]
 8100b82:	b2da      	uxtb	r2, r3
 8100b84:	490c      	ldr	r1, [pc, #48]	; (8100bb8 <__NVIC_SetPriority+0x4c>)
 8100b86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b8a:	0112      	lsls	r2, r2, #4
 8100b8c:	b2d2      	uxtb	r2, r2
 8100b8e:	440b      	add	r3, r1
 8100b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8100b94:	e00a      	b.n	8100bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b96:	683b      	ldr	r3, [r7, #0]
 8100b98:	b2da      	uxtb	r2, r3
 8100b9a:	4908      	ldr	r1, [pc, #32]	; (8100bbc <__NVIC_SetPriority+0x50>)
 8100b9c:	88fb      	ldrh	r3, [r7, #6]
 8100b9e:	f003 030f 	and.w	r3, r3, #15
 8100ba2:	3b04      	subs	r3, #4
 8100ba4:	0112      	lsls	r2, r2, #4
 8100ba6:	b2d2      	uxtb	r2, r2
 8100ba8:	440b      	add	r3, r1
 8100baa:	761a      	strb	r2, [r3, #24]
}
 8100bac:	bf00      	nop
 8100bae:	370c      	adds	r7, #12
 8100bb0:	46bd      	mov	sp, r7
 8100bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bb6:	4770      	bx	lr
 8100bb8:	e000e100 	.word	0xe000e100
 8100bbc:	e000ed00 	.word	0xe000ed00

08100bc0 <NVIC_EncodePriority>:
{
 8100bc0:	b480      	push	{r7}
 8100bc2:	b089      	sub	sp, #36	; 0x24
 8100bc4:	af00      	add	r7, sp, #0
 8100bc6:	60f8      	str	r0, [r7, #12]
 8100bc8:	60b9      	str	r1, [r7, #8]
 8100bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100bcc:	68fb      	ldr	r3, [r7, #12]
 8100bce:	f003 0307 	and.w	r3, r3, #7
 8100bd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100bd4:	69fb      	ldr	r3, [r7, #28]
 8100bd6:	f1c3 0307 	rsb	r3, r3, #7
 8100bda:	2b04      	cmp	r3, #4
 8100bdc:	bf28      	it	cs
 8100bde:	2304      	movcs	r3, #4
 8100be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100be2:	69fb      	ldr	r3, [r7, #28]
 8100be4:	3304      	adds	r3, #4
 8100be6:	2b06      	cmp	r3, #6
 8100be8:	d902      	bls.n	8100bf0 <NVIC_EncodePriority+0x30>
 8100bea:	69fb      	ldr	r3, [r7, #28]
 8100bec:	3b03      	subs	r3, #3
 8100bee:	e000      	b.n	8100bf2 <NVIC_EncodePriority+0x32>
 8100bf0:	2300      	movs	r3, #0
 8100bf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100bf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8100bf8:	69bb      	ldr	r3, [r7, #24]
 8100bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8100bfe:	43da      	mvns	r2, r3
 8100c00:	68bb      	ldr	r3, [r7, #8]
 8100c02:	401a      	ands	r2, r3
 8100c04:	697b      	ldr	r3, [r7, #20]
 8100c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8100c0c:	697b      	ldr	r3, [r7, #20]
 8100c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8100c12:	43d9      	mvns	r1, r3
 8100c14:	687b      	ldr	r3, [r7, #4]
 8100c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c18:	4313      	orrs	r3, r2
}
 8100c1a:	4618      	mov	r0, r3
 8100c1c:	3724      	adds	r7, #36	; 0x24
 8100c1e:	46bd      	mov	sp, r7
 8100c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c24:	4770      	bx	lr
	...

08100c28 <SysTick_Config>:
{
 8100c28:	b580      	push	{r7, lr}
 8100c2a:	b082      	sub	sp, #8
 8100c2c:	af00      	add	r7, sp, #0
 8100c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c30:	687b      	ldr	r3, [r7, #4]
 8100c32:	3b01      	subs	r3, #1
 8100c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100c38:	d301      	bcc.n	8100c3e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8100c3a:	2301      	movs	r3, #1
 8100c3c:	e00f      	b.n	8100c5e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c3e:	4a0a      	ldr	r2, [pc, #40]	; (8100c68 <SysTick_Config+0x40>)
 8100c40:	687b      	ldr	r3, [r7, #4]
 8100c42:	3b01      	subs	r3, #1
 8100c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c46:	210f      	movs	r1, #15
 8100c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8100c4c:	f7ff ff8e 	bl	8100b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c50:	4b05      	ldr	r3, [pc, #20]	; (8100c68 <SysTick_Config+0x40>)
 8100c52:	2200      	movs	r2, #0
 8100c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c56:	4b04      	ldr	r3, [pc, #16]	; (8100c68 <SysTick_Config+0x40>)
 8100c58:	2207      	movs	r2, #7
 8100c5a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8100c5c:	2300      	movs	r3, #0
}
 8100c5e:	4618      	mov	r0, r3
 8100c60:	3708      	adds	r7, #8
 8100c62:	46bd      	mov	sp, r7
 8100c64:	bd80      	pop	{r7, pc}
 8100c66:	bf00      	nop
 8100c68:	e000e010 	.word	0xe000e010

08100c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c6c:	b580      	push	{r7, lr}
 8100c6e:	b082      	sub	sp, #8
 8100c70:	af00      	add	r7, sp, #0
 8100c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100c74:	6878      	ldr	r0, [r7, #4]
 8100c76:	f7ff ff29 	bl	8100acc <__NVIC_SetPriorityGrouping>
}
 8100c7a:	bf00      	nop
 8100c7c:	3708      	adds	r7, #8
 8100c7e:	46bd      	mov	sp, r7
 8100c80:	bd80      	pop	{r7, pc}

08100c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c82:	b580      	push	{r7, lr}
 8100c84:	b086      	sub	sp, #24
 8100c86:	af00      	add	r7, sp, #0
 8100c88:	4603      	mov	r3, r0
 8100c8a:	60b9      	str	r1, [r7, #8]
 8100c8c:	607a      	str	r2, [r7, #4]
 8100c8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100c90:	f7ff ff40 	bl	8100b14 <__NVIC_GetPriorityGrouping>
 8100c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100c96:	687a      	ldr	r2, [r7, #4]
 8100c98:	68b9      	ldr	r1, [r7, #8]
 8100c9a:	6978      	ldr	r0, [r7, #20]
 8100c9c:	f7ff ff90 	bl	8100bc0 <NVIC_EncodePriority>
 8100ca0:	4602      	mov	r2, r0
 8100ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100ca6:	4611      	mov	r1, r2
 8100ca8:	4618      	mov	r0, r3
 8100caa:	f7ff ff5f 	bl	8100b6c <__NVIC_SetPriority>
}
 8100cae:	bf00      	nop
 8100cb0:	3718      	adds	r7, #24
 8100cb2:	46bd      	mov	sp, r7
 8100cb4:	bd80      	pop	{r7, pc}

08100cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100cb6:	b580      	push	{r7, lr}
 8100cb8:	b082      	sub	sp, #8
 8100cba:	af00      	add	r7, sp, #0
 8100cbc:	4603      	mov	r3, r0
 8100cbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cc4:	4618      	mov	r0, r3
 8100cc6:	f7ff ff33 	bl	8100b30 <__NVIC_EnableIRQ>
}
 8100cca:	bf00      	nop
 8100ccc:	3708      	adds	r7, #8
 8100cce:	46bd      	mov	sp, r7
 8100cd0:	bd80      	pop	{r7, pc}

08100cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100cd2:	b580      	push	{r7, lr}
 8100cd4:	b082      	sub	sp, #8
 8100cd6:	af00      	add	r7, sp, #0
 8100cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100cda:	6878      	ldr	r0, [r7, #4]
 8100cdc:	f7ff ffa4 	bl	8100c28 <SysTick_Config>
 8100ce0:	4603      	mov	r3, r0
}
 8100ce2:	4618      	mov	r0, r3
 8100ce4:	3708      	adds	r7, #8
 8100ce6:	46bd      	mov	sp, r7
 8100ce8:	bd80      	pop	{r7, pc}
	...

08100cec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100cec:	b480      	push	{r7}
 8100cee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100cf0:	4b07      	ldr	r3, [pc, #28]	; (8100d10 <HAL_GetCurrentCPUID+0x24>)
 8100cf2:	681b      	ldr	r3, [r3, #0]
 8100cf4:	091b      	lsrs	r3, r3, #4
 8100cf6:	f003 030f 	and.w	r3, r3, #15
 8100cfa:	2b07      	cmp	r3, #7
 8100cfc:	d101      	bne.n	8100d02 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100cfe:	2303      	movs	r3, #3
 8100d00:	e000      	b.n	8100d04 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100d02:	2301      	movs	r3, #1
  }
}
 8100d04:	4618      	mov	r0, r3
 8100d06:	46bd      	mov	sp, r7
 8100d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d0c:	4770      	bx	lr
 8100d0e:	bf00      	nop
 8100d10:	e000ed00 	.word	0xe000ed00

08100d14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8100d14:	b480      	push	{r7}
 8100d16:	b083      	sub	sp, #12
 8100d18:	af00      	add	r7, sp, #0
 8100d1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8100d1c:	4a08      	ldr	r2, [pc, #32]	; (8100d40 <HAL_HSEM_FastTake+0x2c>)
 8100d1e:	687b      	ldr	r3, [r7, #4]
 8100d20:	3320      	adds	r3, #32
 8100d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100d26:	4a07      	ldr	r2, [pc, #28]	; (8100d44 <HAL_HSEM_FastTake+0x30>)
 8100d28:	4293      	cmp	r3, r2
 8100d2a:	d101      	bne.n	8100d30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8100d2c:	2300      	movs	r3, #0
 8100d2e:	e000      	b.n	8100d32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8100d30:	2301      	movs	r3, #1
}
 8100d32:	4618      	mov	r0, r3
 8100d34:	370c      	adds	r7, #12
 8100d36:	46bd      	mov	sp, r7
 8100d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d3c:	4770      	bx	lr
 8100d3e:	bf00      	nop
 8100d40:	58026400 	.word	0x58026400
 8100d44:	80000100 	.word	0x80000100

08100d48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8100d48:	b480      	push	{r7}
 8100d4a:	b083      	sub	sp, #12
 8100d4c:	af00      	add	r7, sp, #0
 8100d4e:	6078      	str	r0, [r7, #4]
 8100d50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8100d52:	4906      	ldr	r1, [pc, #24]	; (8100d6c <HAL_HSEM_Release+0x24>)
 8100d54:	683b      	ldr	r3, [r7, #0]
 8100d56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8100d5a:	687b      	ldr	r3, [r7, #4]
 8100d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8100d60:	bf00      	nop
 8100d62:	370c      	adds	r7, #12
 8100d64:	46bd      	mov	sp, r7
 8100d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d6a:	4770      	bx	lr
 8100d6c:	58026400 	.word	0x58026400

08100d70 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100d70:	b480      	push	{r7}
 8100d72:	b083      	sub	sp, #12
 8100d74:	af00      	add	r7, sp, #0
 8100d76:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8100d78:	4b05      	ldr	r3, [pc, #20]	; (8100d90 <HAL_HSEM_ActivateNotification+0x20>)
 8100d7a:	681a      	ldr	r2, [r3, #0]
 8100d7c:	4904      	ldr	r1, [pc, #16]	; (8100d90 <HAL_HSEM_ActivateNotification+0x20>)
 8100d7e:	687b      	ldr	r3, [r7, #4]
 8100d80:	4313      	orrs	r3, r2
 8100d82:	600b      	str	r3, [r1, #0]
#endif
}
 8100d84:	bf00      	nop
 8100d86:	370c      	adds	r7, #12
 8100d88:	46bd      	mov	sp, r7
 8100d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d8e:	4770      	bx	lr
 8100d90:	58026510 	.word	0x58026510

08100d94 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8100d94:	b580      	push	{r7, lr}
 8100d96:	b082      	sub	sp, #8
 8100d98:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8100d9a:	4b0a      	ldr	r3, [pc, #40]	; (8100dc4 <HAL_HSEM_IRQHandler+0x30>)
 8100d9c:	68db      	ldr	r3, [r3, #12]
 8100d9e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8100da0:	4b08      	ldr	r3, [pc, #32]	; (8100dc4 <HAL_HSEM_IRQHandler+0x30>)
 8100da2:	681a      	ldr	r2, [r3, #0]
 8100da4:	687b      	ldr	r3, [r7, #4]
 8100da6:	43db      	mvns	r3, r3
 8100da8:	4906      	ldr	r1, [pc, #24]	; (8100dc4 <HAL_HSEM_IRQHandler+0x30>)
 8100daa:	4013      	ands	r3, r2
 8100dac:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8100dae:	4a05      	ldr	r2, [pc, #20]	; (8100dc4 <HAL_HSEM_IRQHandler+0x30>)
 8100db0:	687b      	ldr	r3, [r7, #4]
 8100db2:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8100db4:	6878      	ldr	r0, [r7, #4]
 8100db6:	f002 fb0d 	bl	81033d4 <HAL_HSEM_FreeCallback>
}
 8100dba:	bf00      	nop
 8100dbc:	3708      	adds	r7, #8
 8100dbe:	46bd      	mov	sp, r7
 8100dc0:	bd80      	pop	{r7, pc}
 8100dc2:	bf00      	nop
 8100dc4:	58026510 	.word	0x58026510

08100dc8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100dc8:	b580      	push	{r7, lr}
 8100dca:	b084      	sub	sp, #16
 8100dcc:	af00      	add	r7, sp, #0
 8100dce:	60f8      	str	r0, [r7, #12]
 8100dd0:	460b      	mov	r3, r1
 8100dd2:	607a      	str	r2, [r7, #4]
 8100dd4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100dd6:	4b37      	ldr	r3, [pc, #220]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dd8:	681b      	ldr	r3, [r3, #0]
 8100dda:	f023 0201 	bic.w	r2, r3, #1
 8100dde:	4935      	ldr	r1, [pc, #212]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100de0:	68fb      	ldr	r3, [r7, #12]
 8100de2:	4313      	orrs	r3, r2
 8100de4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100de6:	687b      	ldr	r3, [r7, #4]
 8100de8:	2b00      	cmp	r3, #0
 8100dea:	d123      	bne.n	8100e34 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8100dec:	f7ff ff7e 	bl	8100cec <HAL_GetCurrentCPUID>
 8100df0:	4603      	mov	r3, r0
 8100df2:	2b03      	cmp	r3, #3
 8100df4:	d158      	bne.n	8100ea8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100df6:	4b2f      	ldr	r3, [pc, #188]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100df8:	691b      	ldr	r3, [r3, #16]
 8100dfa:	4a2e      	ldr	r2, [pc, #184]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100dfc:	f023 0301 	bic.w	r3, r3, #1
 8100e00:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e02:	4b2d      	ldr	r3, [pc, #180]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e04:	691b      	ldr	r3, [r3, #16]
 8100e06:	4a2c      	ldr	r2, [pc, #176]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e08:	f043 0304 	orr.w	r3, r3, #4
 8100e0c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8100e0e:	f3bf 8f4f 	dsb	sy
}
 8100e12:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100e14:	f3bf 8f6f 	isb	sy
}
 8100e18:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100e1a:	7afb      	ldrb	r3, [r7, #11]
 8100e1c:	2b01      	cmp	r3, #1
 8100e1e:	d101      	bne.n	8100e24 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100e20:	bf30      	wfi
 8100e22:	e000      	b.n	8100e26 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100e24:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e26:	4b24      	ldr	r3, [pc, #144]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e28:	691b      	ldr	r3, [r3, #16]
 8100e2a:	4a23      	ldr	r2, [pc, #140]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e2c:	f023 0304 	bic.w	r3, r3, #4
 8100e30:	6113      	str	r3, [r2, #16]
 8100e32:	e03c      	b.n	8100eae <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8100e34:	687b      	ldr	r3, [r7, #4]
 8100e36:	2b01      	cmp	r3, #1
 8100e38:	d123      	bne.n	8100e82 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8100e3a:	f7ff ff57 	bl	8100cec <HAL_GetCurrentCPUID>
 8100e3e:	4603      	mov	r3, r0
 8100e40:	2b01      	cmp	r3, #1
 8100e42:	d133      	bne.n	8100eac <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8100e44:	4b1b      	ldr	r3, [pc, #108]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e46:	695b      	ldr	r3, [r3, #20]
 8100e48:	4a1a      	ldr	r2, [pc, #104]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e4a:	f023 0302 	bic.w	r3, r3, #2
 8100e4e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e50:	4b19      	ldr	r3, [pc, #100]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e52:	691b      	ldr	r3, [r3, #16]
 8100e54:	4a18      	ldr	r2, [pc, #96]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e56:	f043 0304 	orr.w	r3, r3, #4
 8100e5a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8100e5c:	f3bf 8f4f 	dsb	sy
}
 8100e60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100e62:	f3bf 8f6f 	isb	sy
}
 8100e66:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8100e68:	7afb      	ldrb	r3, [r7, #11]
 8100e6a:	2b01      	cmp	r3, #1
 8100e6c:	d101      	bne.n	8100e72 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100e6e:	bf30      	wfi
 8100e70:	e000      	b.n	8100e74 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100e72:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100e74:	4b10      	ldr	r3, [pc, #64]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e76:	691b      	ldr	r3, [r3, #16]
 8100e78:	4a0f      	ldr	r2, [pc, #60]	; (8100eb8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100e7a:	f023 0304 	bic.w	r3, r3, #4
 8100e7e:	6113      	str	r3, [r2, #16]
 8100e80:	e015      	b.n	8100eae <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100e82:	f7ff ff33 	bl	8100cec <HAL_GetCurrentCPUID>
 8100e86:	4603      	mov	r3, r0
 8100e88:	2b03      	cmp	r3, #3
 8100e8a:	d106      	bne.n	8100e9a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8100e8c:	4b09      	ldr	r3, [pc, #36]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e8e:	691b      	ldr	r3, [r3, #16]
 8100e90:	4a08      	ldr	r2, [pc, #32]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e92:	f023 0304 	bic.w	r3, r3, #4
 8100e96:	6113      	str	r3, [r2, #16]
 8100e98:	e009      	b.n	8100eae <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8100e9a:	4b06      	ldr	r3, [pc, #24]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100e9c:	695b      	ldr	r3, [r3, #20]
 8100e9e:	4a05      	ldr	r2, [pc, #20]	; (8100eb4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100ea0:	f023 0304 	bic.w	r3, r3, #4
 8100ea4:	6153      	str	r3, [r2, #20]
 8100ea6:	e002      	b.n	8100eae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100ea8:	bf00      	nop
 8100eaa:	e000      	b.n	8100eae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100eac:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8100eae:	3710      	adds	r7, #16
 8100eb0:	46bd      	mov	sp, r7
 8100eb2:	bd80      	pop	{r7, pc}
 8100eb4:	58024800 	.word	0x58024800
 8100eb8:	e000ed00 	.word	0xe000ed00

08100ebc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8100ebc:	b580      	push	{r7, lr}
 8100ebe:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100ec0:	f7ff ff14 	bl	8100cec <HAL_GetCurrentCPUID>
 8100ec4:	4603      	mov	r3, r0
 8100ec6:	2b03      	cmp	r3, #3
 8100ec8:	d101      	bne.n	8100ece <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8100eca:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8100ecc:	e001      	b.n	8100ed2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8100ece:	bf40      	sev
    __WFE ();
 8100ed0:	bf20      	wfe
}
 8100ed2:	bf00      	nop
 8100ed4:	bd80      	pop	{r7, pc}
	...

08100ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100ed8:	b480      	push	{r7}
 8100eda:	b089      	sub	sp, #36	; 0x24
 8100edc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8100ede:	4bb3      	ldr	r3, [pc, #716]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ee0:	691b      	ldr	r3, [r3, #16]
 8100ee2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100ee6:	2b18      	cmp	r3, #24
 8100ee8:	f200 8155 	bhi.w	8101196 <HAL_RCC_GetSysClockFreq+0x2be>
 8100eec:	a201      	add	r2, pc, #4	; (adr r2, 8100ef4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8100eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100ef2:	bf00      	nop
 8100ef4:	08100f59 	.word	0x08100f59
 8100ef8:	08101197 	.word	0x08101197
 8100efc:	08101197 	.word	0x08101197
 8100f00:	08101197 	.word	0x08101197
 8100f04:	08101197 	.word	0x08101197
 8100f08:	08101197 	.word	0x08101197
 8100f0c:	08101197 	.word	0x08101197
 8100f10:	08101197 	.word	0x08101197
 8100f14:	08100f7f 	.word	0x08100f7f
 8100f18:	08101197 	.word	0x08101197
 8100f1c:	08101197 	.word	0x08101197
 8100f20:	08101197 	.word	0x08101197
 8100f24:	08101197 	.word	0x08101197
 8100f28:	08101197 	.word	0x08101197
 8100f2c:	08101197 	.word	0x08101197
 8100f30:	08101197 	.word	0x08101197
 8100f34:	08100f85 	.word	0x08100f85
 8100f38:	08101197 	.word	0x08101197
 8100f3c:	08101197 	.word	0x08101197
 8100f40:	08101197 	.word	0x08101197
 8100f44:	08101197 	.word	0x08101197
 8100f48:	08101197 	.word	0x08101197
 8100f4c:	08101197 	.word	0x08101197
 8100f50:	08101197 	.word	0x08101197
 8100f54:	08100f8b 	.word	0x08100f8b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100f58:	4b94      	ldr	r3, [pc, #592]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f5a:	681b      	ldr	r3, [r3, #0]
 8100f5c:	f003 0320 	and.w	r3, r3, #32
 8100f60:	2b00      	cmp	r3, #0
 8100f62:	d009      	beq.n	8100f78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100f64:	4b91      	ldr	r3, [pc, #580]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f66:	681b      	ldr	r3, [r3, #0]
 8100f68:	08db      	lsrs	r3, r3, #3
 8100f6a:	f003 0303 	and.w	r3, r3, #3
 8100f6e:	4a90      	ldr	r2, [pc, #576]	; (81011b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100f70:	fa22 f303 	lsr.w	r3, r2, r3
 8100f74:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8100f76:	e111      	b.n	810119c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8100f78:	4b8d      	ldr	r3, [pc, #564]	; (81011b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100f7a:	61bb      	str	r3, [r7, #24]
      break;
 8100f7c:	e10e      	b.n	810119c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8100f7e:	4b8d      	ldr	r3, [pc, #564]	; (81011b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100f80:	61bb      	str	r3, [r7, #24]
      break;
 8100f82:	e10b      	b.n	810119c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8100f84:	4b8c      	ldr	r3, [pc, #560]	; (81011b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8100f86:	61bb      	str	r3, [r7, #24]
      break;
 8100f88:	e108      	b.n	810119c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8100f8a:	4b88      	ldr	r3, [pc, #544]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100f8e:	f003 0303 	and.w	r3, r3, #3
 8100f92:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100f94:	4b85      	ldr	r3, [pc, #532]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100f98:	091b      	lsrs	r3, r3, #4
 8100f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100f9e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100fa0:	4b82      	ldr	r3, [pc, #520]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100fa4:	f003 0301 	and.w	r3, r3, #1
 8100fa8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100faa:	4b80      	ldr	r3, [pc, #512]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100fae:	08db      	lsrs	r3, r3, #3
 8100fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100fb4:	68fa      	ldr	r2, [r7, #12]
 8100fb6:	fb02 f303 	mul.w	r3, r2, r3
 8100fba:	ee07 3a90 	vmov	s15, r3
 8100fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100fc2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100fc6:	693b      	ldr	r3, [r7, #16]
 8100fc8:	2b00      	cmp	r3, #0
 8100fca:	f000 80e1 	beq.w	8101190 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100fce:	697b      	ldr	r3, [r7, #20]
 8100fd0:	2b02      	cmp	r3, #2
 8100fd2:	f000 8083 	beq.w	81010dc <HAL_RCC_GetSysClockFreq+0x204>
 8100fd6:	697b      	ldr	r3, [r7, #20]
 8100fd8:	2b02      	cmp	r3, #2
 8100fda:	f200 80a1 	bhi.w	8101120 <HAL_RCC_GetSysClockFreq+0x248>
 8100fde:	697b      	ldr	r3, [r7, #20]
 8100fe0:	2b00      	cmp	r3, #0
 8100fe2:	d003      	beq.n	8100fec <HAL_RCC_GetSysClockFreq+0x114>
 8100fe4:	697b      	ldr	r3, [r7, #20]
 8100fe6:	2b01      	cmp	r3, #1
 8100fe8:	d056      	beq.n	8101098 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100fea:	e099      	b.n	8101120 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100fec:	4b6f      	ldr	r3, [pc, #444]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100fee:	681b      	ldr	r3, [r3, #0]
 8100ff0:	f003 0320 	and.w	r3, r3, #32
 8100ff4:	2b00      	cmp	r3, #0
 8100ff6:	d02d      	beq.n	8101054 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100ff8:	4b6c      	ldr	r3, [pc, #432]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ffa:	681b      	ldr	r3, [r3, #0]
 8100ffc:	08db      	lsrs	r3, r3, #3
 8100ffe:	f003 0303 	and.w	r3, r3, #3
 8101002:	4a6b      	ldr	r2, [pc, #428]	; (81011b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101004:	fa22 f303 	lsr.w	r3, r2, r3
 8101008:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810100a:	687b      	ldr	r3, [r7, #4]
 810100c:	ee07 3a90 	vmov	s15, r3
 8101010:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101014:	693b      	ldr	r3, [r7, #16]
 8101016:	ee07 3a90 	vmov	s15, r3
 810101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810101e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101022:	4b62      	ldr	r3, [pc, #392]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810102a:	ee07 3a90 	vmov	s15, r3
 810102e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101032:	ed97 6a02 	vldr	s12, [r7, #8]
 8101036:	eddf 5a61 	vldr	s11, [pc, #388]	; 81011bc <HAL_RCC_GetSysClockFreq+0x2e4>
 810103a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810103e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101042:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810104a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810104e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101052:	e087      	b.n	8101164 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101054:	693b      	ldr	r3, [r7, #16]
 8101056:	ee07 3a90 	vmov	s15, r3
 810105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810105e:	eddf 6a58 	vldr	s13, [pc, #352]	; 81011c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101066:	4b51      	ldr	r3, [pc, #324]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810106a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810106e:	ee07 3a90 	vmov	s15, r3
 8101072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101076:	ed97 6a02 	vldr	s12, [r7, #8]
 810107a:	eddf 5a50 	vldr	s11, [pc, #320]	; 81011bc <HAL_RCC_GetSysClockFreq+0x2e4>
 810107e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810108a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810108e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101096:	e065      	b.n	8101164 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101098:	693b      	ldr	r3, [r7, #16]
 810109a:	ee07 3a90 	vmov	s15, r3
 810109e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 81011c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 81010a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010aa:	4b40      	ldr	r3, [pc, #256]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81010ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010b2:	ee07 3a90 	vmov	s15, r3
 81010b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81010be:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81011bc <HAL_RCC_GetSysClockFreq+0x2e4>
 81010c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81010c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81010ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81010ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81010d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81010d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81010da:	e043      	b.n	8101164 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81010dc:	693b      	ldr	r3, [r7, #16]
 81010de:	ee07 3a90 	vmov	s15, r3
 81010e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81010e6:	eddf 6a38 	vldr	s13, [pc, #224]	; 81011c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 81010ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81010ee:	4b2f      	ldr	r3, [pc, #188]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81010f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81010f6:	ee07 3a90 	vmov	s15, r3
 81010fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81010fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8101102:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81011bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810110a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810110e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101116:	ee67 7a27 	vmul.f32	s15, s14, s15
 810111a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810111e:	e021      	b.n	8101164 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101120:	693b      	ldr	r3, [r7, #16]
 8101122:	ee07 3a90 	vmov	s15, r3
 8101126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810112a:	eddf 6a26 	vldr	s13, [pc, #152]	; 81011c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 810112e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101132:	4b1e      	ldr	r3, [pc, #120]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810113a:	ee07 3a90 	vmov	s15, r3
 810113e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101142:	ed97 6a02 	vldr	s12, [r7, #8]
 8101146:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81011bc <HAL_RCC_GetSysClockFreq+0x2e4>
 810114a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810114e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810115e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101162:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101164:	4b11      	ldr	r3, [pc, #68]	; (81011ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101168:	0a5b      	lsrs	r3, r3, #9
 810116a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810116e:	3301      	adds	r3, #1
 8101170:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101172:	683b      	ldr	r3, [r7, #0]
 8101174:	ee07 3a90 	vmov	s15, r3
 8101178:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810117c:	edd7 6a07 	vldr	s13, [r7, #28]
 8101180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101188:	ee17 3a90 	vmov	r3, s15
 810118c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810118e:	e005      	b.n	810119c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101190:	2300      	movs	r3, #0
 8101192:	61bb      	str	r3, [r7, #24]
      break;
 8101194:	e002      	b.n	810119c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8101196:	4b07      	ldr	r3, [pc, #28]	; (81011b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101198:	61bb      	str	r3, [r7, #24]
      break;
 810119a:	bf00      	nop
  }

  return sysclockfreq;
 810119c:	69bb      	ldr	r3, [r7, #24]
}
 810119e:	4618      	mov	r0, r3
 81011a0:	3724      	adds	r7, #36	; 0x24
 81011a2:	46bd      	mov	sp, r7
 81011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011a8:	4770      	bx	lr
 81011aa:	bf00      	nop
 81011ac:	58024400 	.word	0x58024400
 81011b0:	03d09000 	.word	0x03d09000
 81011b4:	003d0900 	.word	0x003d0900
 81011b8:	017d7840 	.word	0x017d7840
 81011bc:	46000000 	.word	0x46000000
 81011c0:	4c742400 	.word	0x4c742400
 81011c4:	4a742400 	.word	0x4a742400
 81011c8:	4bbebc20 	.word	0x4bbebc20

081011cc <metal_list_init>:
 */
#define METAL_DECLARE_LIST(name)			\
	struct metal_list name = METAL_INIT_LIST(name)

static inline void metal_list_init(struct metal_list *list)
{
 81011cc:	b480      	push	{r7}
 81011ce:	b083      	sub	sp, #12
 81011d0:	af00      	add	r7, sp, #0
 81011d2:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	687a      	ldr	r2, [r7, #4]
 81011d8:	605a      	str	r2, [r3, #4]
 81011da:	687b      	ldr	r3, [r7, #4]
 81011dc:	685a      	ldr	r2, [r3, #4]
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	601a      	str	r2, [r3, #0]
}
 81011e2:	bf00      	nop
 81011e4:	370c      	adds	r7, #12
 81011e6:	46bd      	mov	sp, r7
 81011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011ec:	4770      	bx	lr

081011ee <metal_list_add_before>:

static inline void metal_list_add_before(struct metal_list *node,
					 struct metal_list *new_node)
{
 81011ee:	b480      	push	{r7}
 81011f0:	b083      	sub	sp, #12
 81011f2:	af00      	add	r7, sp, #0
 81011f4:	6078      	str	r0, [r7, #4]
 81011f6:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	685a      	ldr	r2, [r3, #4]
 81011fc:	683b      	ldr	r3, [r7, #0]
 81011fe:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8101200:	683b      	ldr	r3, [r7, #0]
 8101202:	687a      	ldr	r2, [r7, #4]
 8101204:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8101206:	683b      	ldr	r3, [r7, #0]
 8101208:	681b      	ldr	r3, [r3, #0]
 810120a:	683a      	ldr	r2, [r7, #0]
 810120c:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 810120e:	683b      	ldr	r3, [r7, #0]
 8101210:	685b      	ldr	r3, [r3, #4]
 8101212:	683a      	ldr	r2, [r7, #0]
 8101214:	601a      	str	r2, [r3, #0]
}
 8101216:	bf00      	nop
 8101218:	370c      	adds	r7, #12
 810121a:	46bd      	mov	sp, r7
 810121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101220:	4770      	bx	lr

08101222 <metal_list_add_tail>:
	metal_list_add_after(list, node);
}

static inline void metal_list_add_tail(struct metal_list *list,
				       struct metal_list *node)
{
 8101222:	b580      	push	{r7, lr}
 8101224:	b082      	sub	sp, #8
 8101226:	af00      	add	r7, sp, #0
 8101228:	6078      	str	r0, [r7, #4]
 810122a:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 810122c:	6839      	ldr	r1, [r7, #0]
 810122e:	6878      	ldr	r0, [r7, #4]
 8101230:	f7ff ffdd 	bl	81011ee <metal_list_add_before>
}
 8101234:	bf00      	nop
 8101236:	3708      	adds	r7, #8
 8101238:	46bd      	mov	sp, r7
 810123a:	bd80      	pop	{r7, pc}

0810123c <__metal_cache_flush>:

extern void metal_machine_cache_flush(void *addr, unsigned int len);
extern void metal_machine_cache_invalidate(void *addr, unsigned int len);

static inline void __metal_cache_flush(void *addr, unsigned int len)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b082      	sub	sp, #8
 8101240:	af00      	add	r7, sp, #0
 8101242:	6078      	str	r0, [r7, #4]
 8101244:	6039      	str	r1, [r7, #0]
	metal_machine_cache_flush(addr, len);
 8101246:	6839      	ldr	r1, [r7, #0]
 8101248:	6878      	ldr	r0, [r7, #4]
 810124a:	f001 fdbd 	bl	8102dc8 <metal_machine_cache_flush>
}
 810124e:	bf00      	nop
 8101250:	3708      	adds	r7, #8
 8101252:	46bd      	mov	sp, r7
 8101254:	bd80      	pop	{r7, pc}

08101256 <__metal_cache_invalidate>:

static inline void __metal_cache_invalidate(void *addr, unsigned int len)
{
 8101256:	b580      	push	{r7, lr}
 8101258:	b082      	sub	sp, #8
 810125a:	af00      	add	r7, sp, #0
 810125c:	6078      	str	r0, [r7, #4]
 810125e:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 8101260:	6839      	ldr	r1, [r7, #0]
 8101262:	6878      	ldr	r0, [r7, #4]
 8101264:	f001 fdbb 	bl	8102dde <metal_machine_cache_invalidate>
}
 8101268:	bf00      	nop
 810126a:	3708      	adds	r7, #8
 810126c:	46bd      	mov	sp, r7
 810126e:	bd80      	pop	{r7, pc}

08101270 <metal_cache_flush>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will flush the whole data cache.
 */
static inline void metal_cache_flush(void *addr, unsigned int len)
{
 8101270:	b580      	push	{r7, lr}
 8101272:	b082      	sub	sp, #8
 8101274:	af00      	add	r7, sp, #0
 8101276:	6078      	str	r0, [r7, #4]
 8101278:	6039      	str	r1, [r7, #0]
	__metal_cache_flush(addr, len);
 810127a:	6839      	ldr	r1, [r7, #0]
 810127c:	6878      	ldr	r0, [r7, #4]
 810127e:	f7ff ffdd 	bl	810123c <__metal_cache_flush>
}
 8101282:	bf00      	nop
 8101284:	3708      	adds	r7, #8
 8101286:	46bd      	mov	sp, r7
 8101288:	bd80      	pop	{r7, pc}

0810128a <metal_cache_invalidate>:
 * @param[in] len  length of memory
 *                 If addr is NULL, and len is 0,
 *                 It will invalidate the whole data cache.
 */
static inline void metal_cache_invalidate(void *addr, unsigned int len)
{
 810128a:	b580      	push	{r7, lr}
 810128c:	b082      	sub	sp, #8
 810128e:	af00      	add	r7, sp, #0
 8101290:	6078      	str	r0, [r7, #4]
 8101292:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8101294:	6839      	ldr	r1, [r7, #0]
 8101296:	6878      	ldr	r0, [r7, #4]
 8101298:	f7ff ffdd 	bl	8101256 <__metal_cache_invalidate>
}
 810129c:	bf00      	nop
 810129e:	3708      	adds	r7, #8
 81012a0:	46bd      	mov	sp, r7
 81012a2:	bd80      	pop	{r7, pc}

081012a4 <metal_bus_register>:
#include <metal/utilities.h>
#include <metal/dma.h>
#include <metal/cache.h>

int metal_bus_register(struct metal_bus *bus)
{
 81012a4:	b580      	push	{r7, lr}
 81012a6:	b082      	sub	sp, #8
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	6078      	str	r0, [r7, #4]
	if (!bus || !bus->name || !strlen(bus->name))
 81012ac:	687b      	ldr	r3, [r7, #4]
 81012ae:	2b00      	cmp	r3, #0
 81012b0:	d008      	beq.n	81012c4 <metal_bus_register+0x20>
 81012b2:	687b      	ldr	r3, [r7, #4]
 81012b4:	681b      	ldr	r3, [r3, #0]
 81012b6:	2b00      	cmp	r3, #0
 81012b8:	d004      	beq.n	81012c4 <metal_bus_register+0x20>
 81012ba:	687b      	ldr	r3, [r7, #4]
 81012bc:	681b      	ldr	r3, [r3, #0]
 81012be:	781b      	ldrb	r3, [r3, #0]
 81012c0:	2b00      	cmp	r3, #0
 81012c2:	d102      	bne.n	81012ca <metal_bus_register+0x26>
		return -EINVAL;
 81012c4:	f06f 0315 	mvn.w	r3, #21
 81012c8:	e026      	b.n	8101318 <metal_bus_register+0x74>
	if (metal_bus_find(bus->name, NULL) == 0)
 81012ca:	687b      	ldr	r3, [r7, #4]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	2100      	movs	r1, #0
 81012d0:	4618      	mov	r0, r3
 81012d2:	f000 f82b 	bl	810132c <metal_bus_find>
 81012d6:	4603      	mov	r3, r0
 81012d8:	2b00      	cmp	r3, #0
 81012da:	d102      	bne.n	81012e2 <metal_bus_register+0x3e>
		return -EEXIST;
 81012dc:	f06f 0310 	mvn.w	r3, #16
 81012e0:	e01a      	b.n	8101318 <metal_bus_register+0x74>
	metal_list_init(&bus->devices);
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	331c      	adds	r3, #28
 81012e6:	4618      	mov	r0, r3
 81012e8:	f7ff ff70 	bl	81011cc <metal_list_init>
	metal_list_add_tail(&_metal.common.bus_list, &bus->node);
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	3324      	adds	r3, #36	; 0x24
 81012f0:	4619      	mov	r1, r3
 81012f2:	480b      	ldr	r0, [pc, #44]	; (8101320 <metal_bus_register+0x7c>)
 81012f4:	f7ff ff95 	bl	8101222 <metal_list_add_tail>
	metal_log(METAL_LOG_DEBUG, "registered %s bus\n", bus->name);
 81012f8:	4b0a      	ldr	r3, [pc, #40]	; (8101324 <metal_bus_register+0x80>)
 81012fa:	781b      	ldrb	r3, [r3, #0]
 81012fc:	2b06      	cmp	r3, #6
 81012fe:	d90a      	bls.n	8101316 <metal_bus_register+0x72>
 8101300:	4b08      	ldr	r3, [pc, #32]	; (8101324 <metal_bus_register+0x80>)
 8101302:	685b      	ldr	r3, [r3, #4]
 8101304:	2b00      	cmp	r3, #0
 8101306:	d006      	beq.n	8101316 <metal_bus_register+0x72>
 8101308:	4b06      	ldr	r3, [pc, #24]	; (8101324 <metal_bus_register+0x80>)
 810130a:	685b      	ldr	r3, [r3, #4]
 810130c:	687a      	ldr	r2, [r7, #4]
 810130e:	6812      	ldr	r2, [r2, #0]
 8101310:	4905      	ldr	r1, [pc, #20]	; (8101328 <metal_bus_register+0x84>)
 8101312:	2007      	movs	r0, #7
 8101314:	4798      	blx	r3
	return 0;
 8101316:	2300      	movs	r3, #0
}
 8101318:	4618      	mov	r0, r3
 810131a:	3708      	adds	r7, #8
 810131c:	46bd      	mov	sp, r7
 810131e:	bd80      	pop	{r7, pc}
 8101320:	100001e4 	.word	0x100001e4
 8101324:	100001dc 	.word	0x100001dc
 8101328:	081048a4 	.word	0x081048a4

0810132c <metal_bus_find>:
	metal_log(METAL_LOG_DEBUG, "unregistered %s bus\n", bus->name);
	return 0;
}

int metal_bus_find(const char *name, struct metal_bus **result)
{
 810132c:	b580      	push	{r7, lr}
 810132e:	b084      	sub	sp, #16
 8101330:	af00      	add	r7, sp, #0
 8101332:	6078      	str	r0, [r7, #4]
 8101334:	6039      	str	r1, [r7, #0]
	struct metal_list *node;
	struct metal_bus *bus;

	metal_list_for_each(&_metal.common.bus_list, node) {
 8101336:	4b13      	ldr	r3, [pc, #76]	; (8101384 <metal_bus_find+0x58>)
 8101338:	689b      	ldr	r3, [r3, #8]
 810133a:	60fb      	str	r3, [r7, #12]
 810133c:	e017      	b.n	810136e <metal_bus_find+0x42>
		bus = metal_container_of(node, struct metal_bus, node);
 810133e:	68fb      	ldr	r3, [r7, #12]
 8101340:	3b24      	subs	r3, #36	; 0x24
 8101342:	60bb      	str	r3, [r7, #8]
		if (strcmp(bus->name, name) != 0)
 8101344:	68bb      	ldr	r3, [r7, #8]
 8101346:	681b      	ldr	r3, [r3, #0]
 8101348:	6879      	ldr	r1, [r7, #4]
 810134a:	4618      	mov	r0, r3
 810134c:	f7fe ffc8 	bl	81002e0 <strcmp>
 8101350:	4603      	mov	r3, r0
 8101352:	2b00      	cmp	r3, #0
 8101354:	d003      	beq.n	810135e <metal_bus_find+0x32>
	metal_list_for_each(&_metal.common.bus_list, node) {
 8101356:	68fb      	ldr	r3, [r7, #12]
 8101358:	681b      	ldr	r3, [r3, #0]
 810135a:	60fb      	str	r3, [r7, #12]
 810135c:	e007      	b.n	810136e <metal_bus_find+0x42>
			continue;
		if (result)
 810135e:	683b      	ldr	r3, [r7, #0]
 8101360:	2b00      	cmp	r3, #0
 8101362:	d002      	beq.n	810136a <metal_bus_find+0x3e>
			*result = bus;
 8101364:	683b      	ldr	r3, [r7, #0]
 8101366:	68ba      	ldr	r2, [r7, #8]
 8101368:	601a      	str	r2, [r3, #0]
		return 0;
 810136a:	2300      	movs	r3, #0
 810136c:	e005      	b.n	810137a <metal_bus_find+0x4e>
	metal_list_for_each(&_metal.common.bus_list, node) {
 810136e:	68fb      	ldr	r3, [r7, #12]
 8101370:	4a05      	ldr	r2, [pc, #20]	; (8101388 <metal_bus_find+0x5c>)
 8101372:	4293      	cmp	r3, r2
 8101374:	d1e3      	bne.n	810133e <metal_bus_find+0x12>
	}
	return -ENOENT;
 8101376:	f06f 0301 	mvn.w	r3, #1
}
 810137a:	4618      	mov	r0, r3
 810137c:	3710      	adds	r7, #16
 810137e:	46bd      	mov	sp, r7
 8101380:	bd80      	pop	{r7, pc}
 8101382:	bf00      	nop
 8101384:	100001dc 	.word	0x100001dc
 8101388:	100001e4 	.word	0x100001e4

0810138c <metal_device_open>:

int metal_device_open(const char *bus_name, const char *dev_name,
		      struct metal_device **device)
{
 810138c:	b580      	push	{r7, lr}
 810138e:	b086      	sub	sp, #24
 8101390:	af00      	add	r7, sp, #0
 8101392:	60f8      	str	r0, [r7, #12]
 8101394:	60b9      	str	r1, [r7, #8]
 8101396:	607a      	str	r2, [r7, #4]
	struct metal_bus *bus;
	int error;

	if (!bus_name || !strlen(bus_name) ||
 8101398:	68fb      	ldr	r3, [r7, #12]
 810139a:	2b00      	cmp	r3, #0
 810139c:	d00d      	beq.n	81013ba <metal_device_open+0x2e>
 810139e:	68fb      	ldr	r3, [r7, #12]
 81013a0:	781b      	ldrb	r3, [r3, #0]
 81013a2:	2b00      	cmp	r3, #0
 81013a4:	d009      	beq.n	81013ba <metal_device_open+0x2e>
 81013a6:	68bb      	ldr	r3, [r7, #8]
 81013a8:	2b00      	cmp	r3, #0
 81013aa:	d006      	beq.n	81013ba <metal_device_open+0x2e>
	    !dev_name || !strlen(dev_name) ||
 81013ac:	68bb      	ldr	r3, [r7, #8]
 81013ae:	781b      	ldrb	r3, [r3, #0]
 81013b0:	2b00      	cmp	r3, #0
 81013b2:	d002      	beq.n	81013ba <metal_device_open+0x2e>
 81013b4:	687b      	ldr	r3, [r7, #4]
 81013b6:	2b00      	cmp	r3, #0
 81013b8:	d102      	bne.n	81013c0 <metal_device_open+0x34>
	    !device)
		return -EINVAL;
 81013ba:	f06f 0315 	mvn.w	r3, #21
 81013be:	e01f      	b.n	8101400 <metal_device_open+0x74>

	error = metal_bus_find(bus_name, &bus);
 81013c0:	f107 0310 	add.w	r3, r7, #16
 81013c4:	4619      	mov	r1, r3
 81013c6:	68f8      	ldr	r0, [r7, #12]
 81013c8:	f7ff ffb0 	bl	810132c <metal_bus_find>
 81013cc:	6178      	str	r0, [r7, #20]
	if (error)
 81013ce:	697b      	ldr	r3, [r7, #20]
 81013d0:	2b00      	cmp	r3, #0
 81013d2:	d001      	beq.n	81013d8 <metal_device_open+0x4c>
		return error;
 81013d4:	697b      	ldr	r3, [r7, #20]
 81013d6:	e013      	b.n	8101400 <metal_device_open+0x74>

	if (!bus->ops.dev_open)
 81013d8:	693b      	ldr	r3, [r7, #16]
 81013da:	689b      	ldr	r3, [r3, #8]
 81013dc:	2b00      	cmp	r3, #0
 81013de:	d102      	bne.n	81013e6 <metal_device_open+0x5a>
		return -ENODEV;
 81013e0:	f06f 0312 	mvn.w	r3, #18
 81013e4:	e00c      	b.n	8101400 <metal_device_open+0x74>

	error = (*bus->ops.dev_open)(bus, dev_name, device);
 81013e6:	693b      	ldr	r3, [r7, #16]
 81013e8:	689b      	ldr	r3, [r3, #8]
 81013ea:	6938      	ldr	r0, [r7, #16]
 81013ec:	687a      	ldr	r2, [r7, #4]
 81013ee:	68b9      	ldr	r1, [r7, #8]
 81013f0:	4798      	blx	r3
 81013f2:	6178      	str	r0, [r7, #20]
	if (error)
 81013f4:	697b      	ldr	r3, [r7, #20]
 81013f6:	2b00      	cmp	r3, #0
 81013f8:	d001      	beq.n	81013fe <metal_device_open+0x72>
		return error;
 81013fa:	697b      	ldr	r3, [r7, #20]
 81013fc:	e000      	b.n	8101400 <metal_device_open+0x74>

	return 0;
 81013fe:	2300      	movs	r3, #0
}
 8101400:	4618      	mov	r0, r3
 8101402:	3718      	adds	r7, #24
 8101404:	46bd      	mov	sp, r7
 8101406:	bd80      	pop	{r7, pc}

08101408 <metal_register_generic_device>:
	if (device->bus->ops.dev_close)
		device->bus->ops.dev_close(device->bus, device);
}

int metal_register_generic_device(struct metal_device *device)
{
 8101408:	b580      	push	{r7, lr}
 810140a:	b082      	sub	sp, #8
 810140c:	af00      	add	r7, sp, #0
 810140e:	6078      	str	r0, [r7, #4]
	if (!device->name || !strlen(device->name) ||
 8101410:	687b      	ldr	r3, [r7, #4]
 8101412:	681b      	ldr	r3, [r3, #0]
 8101414:	2b00      	cmp	r3, #0
 8101416:	d008      	beq.n	810142a <metal_register_generic_device+0x22>
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	681b      	ldr	r3, [r3, #0]
 810141c:	781b      	ldrb	r3, [r3, #0]
 810141e:	2b00      	cmp	r3, #0
 8101420:	d003      	beq.n	810142a <metal_register_generic_device+0x22>
	    device->num_regions > METAL_MAX_DEVICE_REGIONS)
 8101422:	687b      	ldr	r3, [r7, #4]
 8101424:	689b      	ldr	r3, [r3, #8]
	if (!device->name || !strlen(device->name) ||
 8101426:	2b02      	cmp	r3, #2
 8101428:	d902      	bls.n	8101430 <metal_register_generic_device+0x28>
		return -EINVAL;
 810142a:	f06f 0315 	mvn.w	r3, #21
 810142e:	e009      	b.n	8101444 <metal_register_generic_device+0x3c>

	device->bus = &metal_generic_bus;
 8101430:	687b      	ldr	r3, [r7, #4]
 8101432:	4a06      	ldr	r2, [pc, #24]	; (810144c <metal_register_generic_device+0x44>)
 8101434:	605a      	str	r2, [r3, #4]
	metal_list_add_tail(&_metal.common.generic_device_list,
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	336c      	adds	r3, #108	; 0x6c
 810143a:	4619      	mov	r1, r3
 810143c:	4804      	ldr	r0, [pc, #16]	; (8101450 <metal_register_generic_device+0x48>)
 810143e:	f7ff fef0 	bl	8101222 <metal_list_add_tail>
			    &device->node);
	return 0;
 8101442:	2300      	movs	r3, #0
}
 8101444:	4618      	mov	r0, r3
 8101446:	3708      	adds	r7, #8
 8101448:	46bd      	mov	sp, r7
 810144a:	bd80      	pop	{r7, pc}
 810144c:	10000010 	.word	0x10000010
 8101450:	100001f4 	.word	0x100001f4

08101454 <metal_generic_dev_open>:

int metal_generic_dev_open(struct metal_bus *bus, const char *dev_name,
			   struct metal_device **device)
{
 8101454:	b580      	push	{r7, lr}
 8101456:	b086      	sub	sp, #24
 8101458:	af00      	add	r7, sp, #0
 810145a:	60f8      	str	r0, [r7, #12]
 810145c:	60b9      	str	r1, [r7, #8]
 810145e:	607a      	str	r2, [r7, #4]
	struct metal_list *node;
	struct metal_device *dev;

	(void)bus;

	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8101460:	4b12      	ldr	r3, [pc, #72]	; (81014ac <metal_generic_dev_open+0x58>)
 8101462:	699b      	ldr	r3, [r3, #24]
 8101464:	617b      	str	r3, [r7, #20]
 8101466:	e017      	b.n	8101498 <metal_generic_dev_open+0x44>
		dev = metal_container_of(node, struct metal_device, node);
 8101468:	697b      	ldr	r3, [r7, #20]
 810146a:	3b6c      	subs	r3, #108	; 0x6c
 810146c:	613b      	str	r3, [r7, #16]
		if (strcmp(dev->name, dev_name) != 0)
 810146e:	693b      	ldr	r3, [r7, #16]
 8101470:	681b      	ldr	r3, [r3, #0]
 8101472:	68b9      	ldr	r1, [r7, #8]
 8101474:	4618      	mov	r0, r3
 8101476:	f7fe ff33 	bl	81002e0 <strcmp>
 810147a:	4603      	mov	r3, r0
 810147c:	2b00      	cmp	r3, #0
 810147e:	d003      	beq.n	8101488 <metal_generic_dev_open+0x34>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8101480:	697b      	ldr	r3, [r7, #20]
 8101482:	681b      	ldr	r3, [r3, #0]
 8101484:	617b      	str	r3, [r7, #20]
 8101486:	e007      	b.n	8101498 <metal_generic_dev_open+0x44>
			continue;
		*device = dev;
 8101488:	687b      	ldr	r3, [r7, #4]
 810148a:	693a      	ldr	r2, [r7, #16]
 810148c:	601a      	str	r2, [r3, #0]
		return metal_generic_dev_sys_open(dev);
 810148e:	6938      	ldr	r0, [r7, #16]
 8101490:	f000 f88c 	bl	81015ac <metal_generic_dev_sys_open>
 8101494:	4603      	mov	r3, r0
 8101496:	e005      	b.n	81014a4 <metal_generic_dev_open+0x50>
	metal_list_for_each(&_metal.common.generic_device_list, node) {
 8101498:	697b      	ldr	r3, [r7, #20]
 810149a:	4a05      	ldr	r2, [pc, #20]	; (81014b0 <metal_generic_dev_open+0x5c>)
 810149c:	4293      	cmp	r3, r2
 810149e:	d1e3      	bne.n	8101468 <metal_generic_dev_open+0x14>
	}

	return -ENODEV;
 81014a0:	f06f 0312 	mvn.w	r3, #18
}
 81014a4:	4618      	mov	r0, r3
 81014a6:	3718      	adds	r7, #24
 81014a8:	46bd      	mov	sp, r7
 81014aa:	bd80      	pop	{r7, pc}
 81014ac:	100001dc 	.word	0x100001dc
 81014b0:	100001f4 	.word	0x100001f4

081014b4 <metal_generic_dev_dma_map>:
			     struct metal_device *device,
			     uint32_t dir,
			     struct metal_sg *sg_in,
			     int nents_in,
			     struct metal_sg *sg_out)
{
 81014b4:	b580      	push	{r7, lr}
 81014b6:	b086      	sub	sp, #24
 81014b8:	af00      	add	r7, sp, #0
 81014ba:	60f8      	str	r0, [r7, #12]
 81014bc:	60b9      	str	r1, [r7, #8]
 81014be:	607a      	str	r2, [r7, #4]
 81014c0:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	int i;

	if (sg_out != sg_in)
 81014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81014c4:	683b      	ldr	r3, [r7, #0]
 81014c6:	429a      	cmp	r2, r3
 81014c8:	d009      	beq.n	81014de <metal_generic_dev_dma_map+0x2a>
		memcpy(sg_out, sg_in, nents_in*(sizeof(struct metal_sg)));
 81014ca:	6a3a      	ldr	r2, [r7, #32]
 81014cc:	4613      	mov	r3, r2
 81014ce:	005b      	lsls	r3, r3, #1
 81014d0:	4413      	add	r3, r2
 81014d2:	009b      	lsls	r3, r3, #2
 81014d4:	461a      	mov	r2, r3
 81014d6:	6839      	ldr	r1, [r7, #0]
 81014d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81014da:	f002 f9d3 	bl	8103884 <memcpy>
	for (i = 0; i < nents_in; i++) {
 81014de:	2300      	movs	r3, #0
 81014e0:	617b      	str	r3, [r7, #20]
 81014e2:	e02f      	b.n	8101544 <metal_generic_dev_dma_map+0x90>
		if (dir == METAL_DMA_DEV_W) {
 81014e4:	687b      	ldr	r3, [r7, #4]
 81014e6:	2b02      	cmp	r3, #2
 81014e8:	d114      	bne.n	8101514 <metal_generic_dev_dma_map+0x60>
			metal_cache_flush(sg_out[i].virt, sg_out[i].len);
 81014ea:	697a      	ldr	r2, [r7, #20]
 81014ec:	4613      	mov	r3, r2
 81014ee:	005b      	lsls	r3, r3, #1
 81014f0:	4413      	add	r3, r2
 81014f2:	009b      	lsls	r3, r3, #2
 81014f4:	461a      	mov	r2, r3
 81014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014f8:	4413      	add	r3, r2
 81014fa:	6818      	ldr	r0, [r3, #0]
 81014fc:	697a      	ldr	r2, [r7, #20]
 81014fe:	4613      	mov	r3, r2
 8101500:	005b      	lsls	r3, r3, #1
 8101502:	4413      	add	r3, r2
 8101504:	009b      	lsls	r3, r3, #2
 8101506:	461a      	mov	r2, r3
 8101508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810150a:	4413      	add	r3, r2
 810150c:	689b      	ldr	r3, [r3, #8]
 810150e:	4619      	mov	r1, r3
 8101510:	f7ff feae 	bl	8101270 <metal_cache_flush>
		}
		metal_cache_invalidate(sg_out[i].virt, sg_out[i].len);
 8101514:	697a      	ldr	r2, [r7, #20]
 8101516:	4613      	mov	r3, r2
 8101518:	005b      	lsls	r3, r3, #1
 810151a:	4413      	add	r3, r2
 810151c:	009b      	lsls	r3, r3, #2
 810151e:	461a      	mov	r2, r3
 8101520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101522:	4413      	add	r3, r2
 8101524:	6818      	ldr	r0, [r3, #0]
 8101526:	697a      	ldr	r2, [r7, #20]
 8101528:	4613      	mov	r3, r2
 810152a:	005b      	lsls	r3, r3, #1
 810152c:	4413      	add	r3, r2
 810152e:	009b      	lsls	r3, r3, #2
 8101530:	461a      	mov	r2, r3
 8101532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101534:	4413      	add	r3, r2
 8101536:	689b      	ldr	r3, [r3, #8]
 8101538:	4619      	mov	r1, r3
 810153a:	f7ff fea6 	bl	810128a <metal_cache_invalidate>
	for (i = 0; i < nents_in; i++) {
 810153e:	697b      	ldr	r3, [r7, #20]
 8101540:	3301      	adds	r3, #1
 8101542:	617b      	str	r3, [r7, #20]
 8101544:	697a      	ldr	r2, [r7, #20]
 8101546:	6a3b      	ldr	r3, [r7, #32]
 8101548:	429a      	cmp	r2, r3
 810154a:	dbcb      	blt.n	81014e4 <metal_generic_dev_dma_map+0x30>
	}

	return nents_in;
 810154c:	6a3b      	ldr	r3, [r7, #32]
}
 810154e:	4618      	mov	r0, r3
 8101550:	3718      	adds	r7, #24
 8101552:	46bd      	mov	sp, r7
 8101554:	bd80      	pop	{r7, pc}

08101556 <metal_generic_dev_dma_unmap>:
void metal_generic_dev_dma_unmap(struct metal_bus *bus,
				 struct metal_device *device,
				 uint32_t dir,
				 struct metal_sg *sg,
				 int nents)
{
 8101556:	b580      	push	{r7, lr}
 8101558:	b086      	sub	sp, #24
 810155a:	af00      	add	r7, sp, #0
 810155c:	60f8      	str	r0, [r7, #12]
 810155e:	60b9      	str	r1, [r7, #8]
 8101560:	607a      	str	r2, [r7, #4]
 8101562:	603b      	str	r3, [r7, #0]
	(void)bus;
	(void)device;
	(void)dir;
	int i;

	for (i = 0; i < nents; i++) {
 8101564:	2300      	movs	r3, #0
 8101566:	617b      	str	r3, [r7, #20]
 8101568:	e017      	b.n	810159a <metal_generic_dev_dma_unmap+0x44>
		metal_cache_invalidate(sg[i].virt, sg[i].len);
 810156a:	697a      	ldr	r2, [r7, #20]
 810156c:	4613      	mov	r3, r2
 810156e:	005b      	lsls	r3, r3, #1
 8101570:	4413      	add	r3, r2
 8101572:	009b      	lsls	r3, r3, #2
 8101574:	461a      	mov	r2, r3
 8101576:	683b      	ldr	r3, [r7, #0]
 8101578:	4413      	add	r3, r2
 810157a:	6818      	ldr	r0, [r3, #0]
 810157c:	697a      	ldr	r2, [r7, #20]
 810157e:	4613      	mov	r3, r2
 8101580:	005b      	lsls	r3, r3, #1
 8101582:	4413      	add	r3, r2
 8101584:	009b      	lsls	r3, r3, #2
 8101586:	461a      	mov	r2, r3
 8101588:	683b      	ldr	r3, [r7, #0]
 810158a:	4413      	add	r3, r2
 810158c:	689b      	ldr	r3, [r3, #8]
 810158e:	4619      	mov	r1, r3
 8101590:	f7ff fe7b 	bl	810128a <metal_cache_invalidate>
	for (i = 0; i < nents; i++) {
 8101594:	697b      	ldr	r3, [r7, #20]
 8101596:	3301      	adds	r3, #1
 8101598:	617b      	str	r3, [r7, #20]
 810159a:	697a      	ldr	r2, [r7, #20]
 810159c:	6a3b      	ldr	r3, [r7, #32]
 810159e:	429a      	cmp	r2, r3
 81015a0:	dbe3      	blt.n	810156a <metal_generic_dev_dma_unmap+0x14>
	}
}
 81015a2:	bf00      	nop
 81015a4:	bf00      	nop
 81015a6:	3718      	adds	r7, #24
 81015a8:	46bd      	mov	sp, r7
 81015aa:	bd80      	pop	{r7, pc}

081015ac <metal_generic_dev_sys_open>:
#include <metal/io.h>
#include <metal/sys.h>
#include <metal/utilities.h>

int metal_generic_dev_sys_open(struct metal_device *dev)
{
 81015ac:	b580      	push	{r7, lr}
 81015ae:	b084      	sub	sp, #16
 81015b0:	af00      	add	r7, sp, #0
 81015b2:	6078      	str	r0, [r7, #4]
	struct metal_io_region *io;
	unsigned i;

	/* map I/O memory regions */
	for (i = 0; i < dev->num_regions; i++) {
 81015b4:	2300      	movs	r3, #0
 81015b6:	60fb      	str	r3, [r7, #12]
 81015b8:	e013      	b.n	81015e2 <metal_generic_dev_sys_open+0x36>
		io = &dev->regions[i];
 81015ba:	68fa      	ldr	r2, [r7, #12]
 81015bc:	4613      	mov	r3, r2
 81015be:	005b      	lsls	r3, r3, #1
 81015c0:	4413      	add	r3, r2
 81015c2:	011b      	lsls	r3, r3, #4
 81015c4:	3308      	adds	r3, #8
 81015c6:	687a      	ldr	r2, [r7, #4]
 81015c8:	4413      	add	r3, r2
 81015ca:	3304      	adds	r3, #4
 81015cc:	60bb      	str	r3, [r7, #8]
		if (!io->size)
 81015ce:	68bb      	ldr	r3, [r7, #8]
 81015d0:	689b      	ldr	r3, [r3, #8]
 81015d2:	2b00      	cmp	r3, #0
 81015d4:	d00b      	beq.n	81015ee <metal_generic_dev_sys_open+0x42>
			break;
		metal_sys_io_mem_map(io);
 81015d6:	68b8      	ldr	r0, [r7, #8]
 81015d8:	f000 f81e 	bl	8101618 <metal_sys_io_mem_map>
	for (i = 0; i < dev->num_regions; i++) {
 81015dc:	68fb      	ldr	r3, [r7, #12]
 81015de:	3301      	adds	r3, #1
 81015e0:	60fb      	str	r3, [r7, #12]
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	689b      	ldr	r3, [r3, #8]
 81015e6:	68fa      	ldr	r2, [r7, #12]
 81015e8:	429a      	cmp	r2, r3
 81015ea:	d3e6      	bcc.n	81015ba <metal_generic_dev_sys_open+0xe>
 81015ec:	e000      	b.n	81015f0 <metal_generic_dev_sys_open+0x44>
			break;
 81015ee:	bf00      	nop
	}

	return 0;
 81015f0:	2300      	movs	r3, #0
}
 81015f2:	4618      	mov	r0, r3
 81015f4:	3710      	adds	r7, #16
 81015f6:	46bd      	mov	sp, r7
 81015f8:	bd80      	pop	{r7, pc}
	...

081015fc <metal_sys_init>:
#include <metal/device.h>

struct metal_state _metal;

int metal_sys_init(const struct metal_init_params *params)
{
 81015fc:	b580      	push	{r7, lr}
 81015fe:	b082      	sub	sp, #8
 8101600:	af00      	add	r7, sp, #0
 8101602:	6078      	str	r0, [r7, #4]
	metal_unused(params);
	metal_bus_register(&metal_generic_bus);
 8101604:	4803      	ldr	r0, [pc, #12]	; (8101614 <metal_sys_init+0x18>)
 8101606:	f7ff fe4d 	bl	81012a4 <metal_bus_register>
	return 0;
 810160a:	2300      	movs	r3, #0
}
 810160c:	4618      	mov	r0, r3
 810160e:	3708      	adds	r7, #8
 8101610:	46bd      	mov	sp, r7
 8101612:	bd80      	pop	{r7, pc}
 8101614:	10000010 	.word	0x10000010

08101618 <metal_sys_io_mem_map>:
 */

#include <metal/io.h>

void metal_sys_io_mem_map(struct metal_io_region *io)
{
 8101618:	b580      	push	{r7, lr}
 810161a:	b086      	sub	sp, #24
 810161c:	af00      	add	r7, sp, #0
 810161e:	6078      	str	r0, [r7, #4]
	unsigned long p;
	size_t psize;
	size_t *va;

	va = (size_t *)io->virt;
 8101620:	687b      	ldr	r3, [r7, #4]
 8101622:	681b      	ldr	r3, [r3, #0]
 8101624:	60fb      	str	r3, [r7, #12]
	psize = io->size;
 8101626:	687b      	ldr	r3, [r7, #4]
 8101628:	689b      	ldr	r3, [r3, #8]
 810162a:	613b      	str	r3, [r7, #16]
	if (psize) {
 810162c:	693b      	ldr	r3, [r7, #16]
 810162e:	2b00      	cmp	r3, #0
 8101630:	d02c      	beq.n	810168c <metal_sys_io_mem_map+0x74>
		if (psize >> io->page_shift)
 8101632:	687b      	ldr	r3, [r7, #4]
 8101634:	68db      	ldr	r3, [r3, #12]
 8101636:	693a      	ldr	r2, [r7, #16]
 8101638:	fa22 f303 	lsr.w	r3, r2, r3
 810163c:	2b00      	cmp	r3, #0
 810163e:	d005      	beq.n	810164c <metal_sys_io_mem_map+0x34>
			psize = (size_t)1 << io->page_shift;
 8101640:	687b      	ldr	r3, [r7, #4]
 8101642:	68db      	ldr	r3, [r3, #12]
 8101644:	2201      	movs	r2, #1
 8101646:	fa02 f303 	lsl.w	r3, r2, r3
 810164a:	613b      	str	r3, [r7, #16]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 810164c:	2300      	movs	r3, #0
 810164e:	617b      	str	r3, [r7, #20]
 8101650:	e013      	b.n	810167a <metal_sys_io_mem_map+0x62>
			metal_machine_io_mem_map(va, io->physmap[p],
 8101652:	687b      	ldr	r3, [r7, #4]
 8101654:	685a      	ldr	r2, [r3, #4]
 8101656:	697b      	ldr	r3, [r7, #20]
 8101658:	009b      	lsls	r3, r3, #2
 810165a:	4413      	add	r3, r2
 810165c:	6819      	ldr	r1, [r3, #0]
 810165e:	687b      	ldr	r3, [r7, #4]
 8101660:	695b      	ldr	r3, [r3, #20]
 8101662:	693a      	ldr	r2, [r7, #16]
 8101664:	68f8      	ldr	r0, [r7, #12]
 8101666:	f001 fbc5 	bl	8102df4 <metal_machine_io_mem_map>
						 psize, io->mem_flags);
			va += psize;
 810166a:	693b      	ldr	r3, [r7, #16]
 810166c:	009b      	lsls	r3, r3, #2
 810166e:	68fa      	ldr	r2, [r7, #12]
 8101670:	4413      	add	r3, r2
 8101672:	60fb      	str	r3, [r7, #12]
		for (p = 0; p <= (io->size >> io->page_shift); p++) {
 8101674:	697b      	ldr	r3, [r7, #20]
 8101676:	3301      	adds	r3, #1
 8101678:	617b      	str	r3, [r7, #20]
 810167a:	687b      	ldr	r3, [r7, #4]
 810167c:	689a      	ldr	r2, [r3, #8]
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	68db      	ldr	r3, [r3, #12]
 8101682:	fa22 f303 	lsr.w	r3, r2, r3
 8101686:	697a      	ldr	r2, [r7, #20]
 8101688:	429a      	cmp	r2, r3
 810168a:	d9e2      	bls.n	8101652 <metal_sys_io_mem_map+0x3a>
		}
	}
}
 810168c:	bf00      	nop
 810168e:	3718      	adds	r7, #24
 8101690:	46bd      	mov	sp, r7
 8101692:	bd80      	pop	{r7, pc}

08101694 <metal_list_init>:
{
 8101694:	b480      	push	{r7}
 8101696:	b083      	sub	sp, #12
 8101698:	af00      	add	r7, sp, #0
 810169a:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	687a      	ldr	r2, [r7, #4]
 81016a0:	605a      	str	r2, [r3, #4]
 81016a2:	687b      	ldr	r3, [r7, #4]
 81016a4:	685a      	ldr	r2, [r3, #4]
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	601a      	str	r2, [r3, #0]
}
 81016aa:	bf00      	nop
 81016ac:	370c      	adds	r7, #12
 81016ae:	46bd      	mov	sp, r7
 81016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016b4:	4770      	bx	lr
	...

081016b8 <metal_init>:

#include <string.h>
#include <metal/sys.h>

int metal_init(const struct metal_init_params *params)
{
 81016b8:	b580      	push	{r7, lr}
 81016ba:	b084      	sub	sp, #16
 81016bc:	af00      	add	r7, sp, #0
 81016be:	6078      	str	r0, [r7, #4]
	int error = 0;
 81016c0:	2300      	movs	r3, #0
 81016c2:	60fb      	str	r3, [r7, #12]

	memset(&_metal, 0, sizeof(_metal));
 81016c4:	2220      	movs	r2, #32
 81016c6:	2100      	movs	r1, #0
 81016c8:	4810      	ldr	r0, [pc, #64]	; (810170c <metal_init+0x54>)
 81016ca:	f002 f8e9 	bl	81038a0 <memset>

	_metal.common.log_handler   = params->log_handler;
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	681b      	ldr	r3, [r3, #0]
 81016d2:	4a0e      	ldr	r2, [pc, #56]	; (810170c <metal_init+0x54>)
 81016d4:	6053      	str	r3, [r2, #4]
	_metal.common.log_level     = params->log_level;
 81016d6:	687b      	ldr	r3, [r7, #4]
 81016d8:	791a      	ldrb	r2, [r3, #4]
 81016da:	4b0c      	ldr	r3, [pc, #48]	; (810170c <metal_init+0x54>)
 81016dc:	701a      	strb	r2, [r3, #0]

	metal_list_init(&_metal.common.bus_list);
 81016de:	480c      	ldr	r0, [pc, #48]	; (8101710 <metal_init+0x58>)
 81016e0:	f7ff ffd8 	bl	8101694 <metal_list_init>
	metal_list_init(&_metal.common.generic_shmem_list);
 81016e4:	480b      	ldr	r0, [pc, #44]	; (8101714 <metal_init+0x5c>)
 81016e6:	f7ff ffd5 	bl	8101694 <metal_list_init>
	metal_list_init(&_metal.common.generic_device_list);
 81016ea:	480b      	ldr	r0, [pc, #44]	; (8101718 <metal_init+0x60>)
 81016ec:	f7ff ffd2 	bl	8101694 <metal_list_init>

	error = metal_sys_init(params);
 81016f0:	6878      	ldr	r0, [r7, #4]
 81016f2:	f7ff ff83 	bl	81015fc <metal_sys_init>
 81016f6:	60f8      	str	r0, [r7, #12]
	if (error)
 81016f8:	68fb      	ldr	r3, [r7, #12]
 81016fa:	2b00      	cmp	r3, #0
 81016fc:	d001      	beq.n	8101702 <metal_init+0x4a>
		return error;
 81016fe:	68fb      	ldr	r3, [r7, #12]
 8101700:	e000      	b.n	8101704 <metal_init+0x4c>

	return error;
 8101702:	68fb      	ldr	r3, [r7, #12]
}
 8101704:	4618      	mov	r0, r3
 8101706:	3710      	adds	r7, #16
 8101708:	46bd      	mov	sp, r7
 810170a:	bd80      	pop	{r7, pc}
 810170c:	100001dc 	.word	0x100001dc
 8101710:	100001e4 	.word	0x100001e4
 8101714:	100001ec 	.word	0x100001ec
 8101718:	100001f4 	.word	0x100001f4

0810171c <metal_io_virt>:
 * @param[in]	offset	Offset into shared memory segment.
 * @return	NULL if offset is out of range, or pointer to offset.
 */
static inline void *
metal_io_virt(struct metal_io_region *io, unsigned long offset)
{
 810171c:	b480      	push	{r7}
 810171e:	b083      	sub	sp, #12
 8101720:	af00      	add	r7, sp, #0
 8101722:	6078      	str	r0, [r7, #4]
 8101724:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	681b      	ldr	r3, [r3, #0]
		? (uint8_t *)io->virt + offset
		: NULL);
 810172a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810172e:	d009      	beq.n	8101744 <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8101730:	687b      	ldr	r3, [r7, #4]
 8101732:	689b      	ldr	r3, [r3, #8]
 8101734:	683a      	ldr	r2, [r7, #0]
 8101736:	429a      	cmp	r2, r3
 8101738:	d804      	bhi.n	8101744 <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	681a      	ldr	r2, [r3, #0]
		: NULL);
 810173e:	683b      	ldr	r3, [r7, #0]
 8101740:	4413      	add	r3, r2
 8101742:	e000      	b.n	8101746 <metal_io_virt+0x2a>
 8101744:	2300      	movs	r3, #0
}
 8101746:	4618      	mov	r0, r3
 8101748:	370c      	adds	r7, #12
 810174a:	46bd      	mov	sp, r7
 810174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101750:	4770      	bx	lr

08101752 <metal_io_init>:

void metal_io_init(struct metal_io_region *io, void *virt,
	      const metal_phys_addr_t *physmap, size_t size,
	      unsigned page_shift, unsigned int mem_flags,
	      const struct metal_io_ops *ops)
{
 8101752:	b5b0      	push	{r4, r5, r7, lr}
 8101754:	b08a      	sub	sp, #40	; 0x28
 8101756:	af00      	add	r7, sp, #0
 8101758:	60f8      	str	r0, [r7, #12]
 810175a:	60b9      	str	r1, [r7, #8]
 810175c:	607a      	str	r2, [r7, #4]
 810175e:	603b      	str	r3, [r7, #0]
	const struct metal_io_ops nops = {NULL, NULL, NULL, NULL, NULL, NULL};
 8101760:	f107 0310 	add.w	r3, r7, #16
 8101764:	2200      	movs	r2, #0
 8101766:	601a      	str	r2, [r3, #0]
 8101768:	605a      	str	r2, [r3, #4]
 810176a:	609a      	str	r2, [r3, #8]
 810176c:	60da      	str	r2, [r3, #12]
 810176e:	611a      	str	r2, [r3, #16]
 8101770:	615a      	str	r2, [r3, #20]

	io->virt = virt;
 8101772:	68fb      	ldr	r3, [r7, #12]
 8101774:	68ba      	ldr	r2, [r7, #8]
 8101776:	601a      	str	r2, [r3, #0]
	io->physmap = physmap;
 8101778:	68fb      	ldr	r3, [r7, #12]
 810177a:	687a      	ldr	r2, [r7, #4]
 810177c:	605a      	str	r2, [r3, #4]
	io->size = size;
 810177e:	68fb      	ldr	r3, [r7, #12]
 8101780:	683a      	ldr	r2, [r7, #0]
 8101782:	609a      	str	r2, [r3, #8]
	io->page_shift = page_shift;
 8101784:	68fb      	ldr	r3, [r7, #12]
 8101786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8101788:	60da      	str	r2, [r3, #12]
	if (page_shift >= sizeof(io->page_mask) * CHAR_BIT)
 810178a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810178c:	2b1f      	cmp	r3, #31
 810178e:	d904      	bls.n	810179a <metal_io_init+0x48>
		/* avoid overflow */
		io->page_mask = -1UL;
 8101790:	68fb      	ldr	r3, [r7, #12]
 8101792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8101796:	611a      	str	r2, [r3, #16]
 8101798:	e006      	b.n	81017a8 <metal_io_init+0x56>
	else
		io->page_mask = (1UL << page_shift) - 1UL;
 810179a:	2201      	movs	r2, #1
 810179c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810179e:	fa02 f303 	lsl.w	r3, r2, r3
 81017a2:	1e5a      	subs	r2, r3, #1
 81017a4:	68fb      	ldr	r3, [r7, #12]
 81017a6:	611a      	str	r2, [r3, #16]
	io->mem_flags = mem_flags;
 81017a8:	68fb      	ldr	r3, [r7, #12]
 81017aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81017ac:	615a      	str	r2, [r3, #20]
	io->ops = ops ? *ops : nops;
 81017ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81017b0:	2b00      	cmp	r3, #0
 81017b2:	d00b      	beq.n	81017cc <metal_io_init+0x7a>
 81017b4:	68fb      	ldr	r3, [r7, #12]
 81017b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81017b8:	f103 0418 	add.w	r4, r3, #24
 81017bc:	4615      	mov	r5, r2
 81017be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81017c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81017c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 81017c6:	e884 0003 	stmia.w	r4, {r0, r1}
 81017ca:	e00a      	b.n	81017e2 <metal_io_init+0x90>
 81017cc:	68fb      	ldr	r3, [r7, #12]
 81017ce:	f103 0418 	add.w	r4, r3, #24
 81017d2:	f107 0510 	add.w	r5, r7, #16
 81017d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81017d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81017da:	e895 0003 	ldmia.w	r5, {r0, r1}
 81017de:	e884 0003 	stmia.w	r4, {r0, r1}
	metal_sys_io_mem_map(io);
 81017e2:	68f8      	ldr	r0, [r7, #12]
 81017e4:	f7ff ff18 	bl	8101618 <metal_sys_io_mem_map>
}
 81017e8:	bf00      	nop
 81017ea:	3728      	adds	r7, #40	; 0x28
 81017ec:	46bd      	mov	sp, r7
 81017ee:	bdb0      	pop	{r4, r5, r7, pc}

081017f0 <metal_io_block_read>:

int metal_io_block_read(struct metal_io_region *io, unsigned long offset,
	       void *restrict dst, int len)
{
 81017f0:	b590      	push	{r4, r7, lr}
 81017f2:	b08b      	sub	sp, #44	; 0x2c
 81017f4:	af02      	add	r7, sp, #8
 81017f6:	60f8      	str	r0, [r7, #12]
 81017f8:	60b9      	str	r1, [r7, #8]
 81017fa:	607a      	str	r2, [r7, #4]
 81017fc:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 81017fe:	68b9      	ldr	r1, [r7, #8]
 8101800:	68f8      	ldr	r0, [r7, #12]
 8101802:	f7ff ff8b 	bl	810171c <metal_io_virt>
 8101806:	61f8      	str	r0, [r7, #28]
	unsigned char *dest = dst;
 8101808:	687b      	ldr	r3, [r7, #4]
 810180a:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 810180c:	68fb      	ldr	r3, [r7, #12]
 810180e:	689b      	ldr	r3, [r3, #8]
 8101810:	68ba      	ldr	r2, [r7, #8]
 8101812:	429a      	cmp	r2, r3
 8101814:	d902      	bls.n	810181c <metal_io_block_read+0x2c>
		return -ERANGE;
 8101816:	f06f 0321 	mvn.w	r3, #33	; 0x21
 810181a:	e05c      	b.n	81018d6 <metal_io_block_read+0xe6>
	if ((offset + len) > io->size)
 810181c:	683a      	ldr	r2, [r7, #0]
 810181e:	68bb      	ldr	r3, [r7, #8]
 8101820:	441a      	add	r2, r3
 8101822:	68fb      	ldr	r3, [r7, #12]
 8101824:	689b      	ldr	r3, [r3, #8]
 8101826:	429a      	cmp	r2, r3
 8101828:	d904      	bls.n	8101834 <metal_io_block_read+0x44>
		len = io->size - offset;
 810182a:	68fb      	ldr	r3, [r7, #12]
 810182c:	689a      	ldr	r2, [r3, #8]
 810182e:	68bb      	ldr	r3, [r7, #8]
 8101830:	1ad3      	subs	r3, r2, r3
 8101832:	603b      	str	r3, [r7, #0]
	retlen = len;
 8101834:	683b      	ldr	r3, [r7, #0]
 8101836:	617b      	str	r3, [r7, #20]
	if (io->ops.block_read) {
 8101838:	68fb      	ldr	r3, [r7, #12]
 810183a:	6a1b      	ldr	r3, [r3, #32]
 810183c:	2b00      	cmp	r3, #0
 810183e:	d00a      	beq.n	8101856 <metal_io_block_read+0x66>
		retlen = (*io->ops.block_read)(
 8101840:	68fb      	ldr	r3, [r7, #12]
 8101842:	6a1c      	ldr	r4, [r3, #32]
 8101844:	683b      	ldr	r3, [r7, #0]
 8101846:	9300      	str	r3, [sp, #0]
 8101848:	2305      	movs	r3, #5
 810184a:	687a      	ldr	r2, [r7, #4]
 810184c:	68b9      	ldr	r1, [r7, #8]
 810184e:	68f8      	ldr	r0, [r7, #12]
 8101850:	47a0      	blx	r4
 8101852:	6178      	str	r0, [r7, #20]
 8101854:	e03e      	b.n	81018d4 <metal_io_block_read+0xe4>
			io, offset, dst, memory_order_seq_cst, len);
	} else {
		atomic_thread_fence(memory_order_seq_cst);
 8101856:	f3bf 8f5b 	dmb	ish
		while ( len && (
 810185a:	e00c      	b.n	8101876 <metal_io_block_read+0x86>
			((uintptr_t)dest % sizeof(int)) ||
			((uintptr_t)ptr % sizeof(int)))) {
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 810185c:	69fb      	ldr	r3, [r7, #28]
 810185e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 8101860:	69bb      	ldr	r3, [r7, #24]
 8101862:	701a      	strb	r2, [r3, #0]
			dest++;
 8101864:	69bb      	ldr	r3, [r7, #24]
 8101866:	3301      	adds	r3, #1
 8101868:	61bb      	str	r3, [r7, #24]
			ptr++;
 810186a:	69fb      	ldr	r3, [r7, #28]
 810186c:	3301      	adds	r3, #1
 810186e:	61fb      	str	r3, [r7, #28]
			len--;
 8101870:	683b      	ldr	r3, [r7, #0]
 8101872:	3b01      	subs	r3, #1
 8101874:	603b      	str	r3, [r7, #0]
		while ( len && (
 8101876:	683b      	ldr	r3, [r7, #0]
 8101878:	2b00      	cmp	r3, #0
 810187a:	d017      	beq.n	81018ac <metal_io_block_read+0xbc>
			((uintptr_t)dest % sizeof(int)) ||
 810187c:	69bb      	ldr	r3, [r7, #24]
 810187e:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 8101882:	2b00      	cmp	r3, #0
 8101884:	d1ea      	bne.n	810185c <metal_io_block_read+0x6c>
			((uintptr_t)ptr % sizeof(int)))) {
 8101886:	69fb      	ldr	r3, [r7, #28]
 8101888:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)dest % sizeof(int)) ||
 810188c:	2b00      	cmp	r3, #0
 810188e:	d1e5      	bne.n	810185c <metal_io_block_read+0x6c>
		}
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 8101890:	e00c      	b.n	81018ac <metal_io_block_read+0xbc>
					ptr += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)dest = *(const unsigned int *)ptr;
 8101892:	69fb      	ldr	r3, [r7, #28]
 8101894:	681a      	ldr	r2, [r3, #0]
 8101896:	69bb      	ldr	r3, [r7, #24]
 8101898:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 810189a:	69bb      	ldr	r3, [r7, #24]
 810189c:	3304      	adds	r3, #4
 810189e:	61bb      	str	r3, [r7, #24]
					ptr += sizeof(int),
 81018a0:	69fb      	ldr	r3, [r7, #28]
 81018a2:	3304      	adds	r3, #4
 81018a4:	61fb      	str	r3, [r7, #28]
					len -= sizeof(int))
 81018a6:	683b      	ldr	r3, [r7, #0]
 81018a8:	3b04      	subs	r3, #4
 81018aa:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); dest += sizeof(int),
 81018ac:	683b      	ldr	r3, [r7, #0]
 81018ae:	2b03      	cmp	r3, #3
 81018b0:	dcef      	bgt.n	8101892 <metal_io_block_read+0xa2>
		for (; len != 0; dest++, ptr++, len--)
 81018b2:	e00c      	b.n	81018ce <metal_io_block_read+0xde>
			*(unsigned char *)dest =
				*(const unsigned char *)ptr;
 81018b4:	69fb      	ldr	r3, [r7, #28]
 81018b6:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)dest =
 81018b8:	69bb      	ldr	r3, [r7, #24]
 81018ba:	701a      	strb	r2, [r3, #0]
		for (; len != 0; dest++, ptr++, len--)
 81018bc:	69bb      	ldr	r3, [r7, #24]
 81018be:	3301      	adds	r3, #1
 81018c0:	61bb      	str	r3, [r7, #24]
 81018c2:	69fb      	ldr	r3, [r7, #28]
 81018c4:	3301      	adds	r3, #1
 81018c6:	61fb      	str	r3, [r7, #28]
 81018c8:	683b      	ldr	r3, [r7, #0]
 81018ca:	3b01      	subs	r3, #1
 81018cc:	603b      	str	r3, [r7, #0]
 81018ce:	683b      	ldr	r3, [r7, #0]
 81018d0:	2b00      	cmp	r3, #0
 81018d2:	d1ef      	bne.n	81018b4 <metal_io_block_read+0xc4>
	}
	return retlen;
 81018d4:	697b      	ldr	r3, [r7, #20]
}
 81018d6:	4618      	mov	r0, r3
 81018d8:	3724      	adds	r7, #36	; 0x24
 81018da:	46bd      	mov	sp, r7
 81018dc:	bd90      	pop	{r4, r7, pc}

081018de <metal_io_block_write>:

int metal_io_block_write(struct metal_io_region *io, unsigned long offset,
	       const void *restrict src, int len)
{
 81018de:	b590      	push	{r4, r7, lr}
 81018e0:	b08b      	sub	sp, #44	; 0x2c
 81018e2:	af02      	add	r7, sp, #8
 81018e4:	60f8      	str	r0, [r7, #12]
 81018e6:	60b9      	str	r1, [r7, #8]
 81018e8:	607a      	str	r2, [r7, #4]
 81018ea:	603b      	str	r3, [r7, #0]
	unsigned char *ptr = metal_io_virt(io, offset);
 81018ec:	68b9      	ldr	r1, [r7, #8]
 81018ee:	68f8      	ldr	r0, [r7, #12]
 81018f0:	f7ff ff14 	bl	810171c <metal_io_virt>
 81018f4:	61f8      	str	r0, [r7, #28]
	const unsigned char *source = src;
 81018f6:	687b      	ldr	r3, [r7, #4]
 81018f8:	61bb      	str	r3, [r7, #24]
	int retlen;

	if (offset > io->size)
 81018fa:	68fb      	ldr	r3, [r7, #12]
 81018fc:	689b      	ldr	r3, [r3, #8]
 81018fe:	68ba      	ldr	r2, [r7, #8]
 8101900:	429a      	cmp	r2, r3
 8101902:	d902      	bls.n	810190a <metal_io_block_write+0x2c>
		return -ERANGE;
 8101904:	f06f 0321 	mvn.w	r3, #33	; 0x21
 8101908:	e05b      	b.n	81019c2 <metal_io_block_write+0xe4>
	if ((offset + len) > io->size)
 810190a:	683a      	ldr	r2, [r7, #0]
 810190c:	68bb      	ldr	r3, [r7, #8]
 810190e:	441a      	add	r2, r3
 8101910:	68fb      	ldr	r3, [r7, #12]
 8101912:	689b      	ldr	r3, [r3, #8]
 8101914:	429a      	cmp	r2, r3
 8101916:	d904      	bls.n	8101922 <metal_io_block_write+0x44>
		len = io->size - offset;
 8101918:	68fb      	ldr	r3, [r7, #12]
 810191a:	689a      	ldr	r2, [r3, #8]
 810191c:	68bb      	ldr	r3, [r7, #8]
 810191e:	1ad3      	subs	r3, r2, r3
 8101920:	603b      	str	r3, [r7, #0]
	retlen = len;
 8101922:	683b      	ldr	r3, [r7, #0]
 8101924:	617b      	str	r3, [r7, #20]
	if (io->ops.block_write) {
 8101926:	68fb      	ldr	r3, [r7, #12]
 8101928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810192a:	2b00      	cmp	r3, #0
 810192c:	d017      	beq.n	810195e <metal_io_block_write+0x80>
		retlen = (*io->ops.block_write)(
 810192e:	68fb      	ldr	r3, [r7, #12]
 8101930:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8101932:	683b      	ldr	r3, [r7, #0]
 8101934:	9300      	str	r3, [sp, #0]
 8101936:	2305      	movs	r3, #5
 8101938:	687a      	ldr	r2, [r7, #4]
 810193a:	68b9      	ldr	r1, [r7, #8]
 810193c:	68f8      	ldr	r0, [r7, #12]
 810193e:	47a0      	blx	r4
 8101940:	6178      	str	r0, [r7, #20]
 8101942:	e03d      	b.n	81019c0 <metal_io_block_write+0xe2>
	} else {
		while ( len && (
			((uintptr_t)ptr % sizeof(int)) ||
			((uintptr_t)source % sizeof(int)))) {
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 8101944:	69bb      	ldr	r3, [r7, #24]
 8101946:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 8101948:	69fb      	ldr	r3, [r7, #28]
 810194a:	701a      	strb	r2, [r3, #0]
			ptr++;
 810194c:	69fb      	ldr	r3, [r7, #28]
 810194e:	3301      	adds	r3, #1
 8101950:	61fb      	str	r3, [r7, #28]
			source++;
 8101952:	69bb      	ldr	r3, [r7, #24]
 8101954:	3301      	adds	r3, #1
 8101956:	61bb      	str	r3, [r7, #24]
			len--;
 8101958:	683b      	ldr	r3, [r7, #0]
 810195a:	3b01      	subs	r3, #1
 810195c:	603b      	str	r3, [r7, #0]
		while ( len && (
 810195e:	683b      	ldr	r3, [r7, #0]
 8101960:	2b00      	cmp	r3, #0
 8101962:	d017      	beq.n	8101994 <metal_io_block_write+0xb6>
			((uintptr_t)ptr % sizeof(int)) ||
 8101964:	69fb      	ldr	r3, [r7, #28]
 8101966:	f003 0303 	and.w	r3, r3, #3
		while ( len && (
 810196a:	2b00      	cmp	r3, #0
 810196c:	d1ea      	bne.n	8101944 <metal_io_block_write+0x66>
			((uintptr_t)source % sizeof(int)))) {
 810196e:	69bb      	ldr	r3, [r7, #24]
 8101970:	f003 0303 	and.w	r3, r3, #3
			((uintptr_t)ptr % sizeof(int)) ||
 8101974:	2b00      	cmp	r3, #0
 8101976:	d1e5      	bne.n	8101944 <metal_io_block_write+0x66>
		}
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8101978:	e00c      	b.n	8101994 <metal_io_block_write+0xb6>
					source += sizeof(int),
					len -= sizeof(int))
			*(unsigned int *)ptr = *(const unsigned int *)source;
 810197a:	69bb      	ldr	r3, [r7, #24]
 810197c:	681a      	ldr	r2, [r3, #0]
 810197e:	69fb      	ldr	r3, [r7, #28]
 8101980:	601a      	str	r2, [r3, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8101982:	69fb      	ldr	r3, [r7, #28]
 8101984:	3304      	adds	r3, #4
 8101986:	61fb      	str	r3, [r7, #28]
					source += sizeof(int),
 8101988:	69bb      	ldr	r3, [r7, #24]
 810198a:	3304      	adds	r3, #4
 810198c:	61bb      	str	r3, [r7, #24]
					len -= sizeof(int))
 810198e:	683b      	ldr	r3, [r7, #0]
 8101990:	3b04      	subs	r3, #4
 8101992:	603b      	str	r3, [r7, #0]
		for (; len >= (int)sizeof(int); ptr += sizeof(int),
 8101994:	683b      	ldr	r3, [r7, #0]
 8101996:	2b03      	cmp	r3, #3
 8101998:	dcef      	bgt.n	810197a <metal_io_block_write+0x9c>
		for (; len != 0; ptr++, source++, len--)
 810199a:	e00c      	b.n	81019b6 <metal_io_block_write+0xd8>
			*(unsigned char *)ptr =
				*(const unsigned char *)source;
 810199c:	69bb      	ldr	r3, [r7, #24]
 810199e:	781a      	ldrb	r2, [r3, #0]
			*(unsigned char *)ptr =
 81019a0:	69fb      	ldr	r3, [r7, #28]
 81019a2:	701a      	strb	r2, [r3, #0]
		for (; len != 0; ptr++, source++, len--)
 81019a4:	69fb      	ldr	r3, [r7, #28]
 81019a6:	3301      	adds	r3, #1
 81019a8:	61fb      	str	r3, [r7, #28]
 81019aa:	69bb      	ldr	r3, [r7, #24]
 81019ac:	3301      	adds	r3, #1
 81019ae:	61bb      	str	r3, [r7, #24]
 81019b0:	683b      	ldr	r3, [r7, #0]
 81019b2:	3b01      	subs	r3, #1
 81019b4:	603b      	str	r3, [r7, #0]
 81019b6:	683b      	ldr	r3, [r7, #0]
 81019b8:	2b00      	cmp	r3, #0
 81019ba:	d1ef      	bne.n	810199c <metal_io_block_write+0xbe>
		atomic_thread_fence(memory_order_seq_cst);
 81019bc:	f3bf 8f5b 	dmb	ish
	}
	return retlen;
 81019c0:	697b      	ldr	r3, [r7, #20]
}
 81019c2:	4618      	mov	r0, r3
 81019c4:	3724      	adds	r7, #36	; 0x24
 81019c6:	46bd      	mov	sp, r7
 81019c8:	bd90      	pop	{r4, r7, pc}

081019ca <metal_default_log_handler>:
#include <metal/log.h>
#include <metal/sys.h>

void metal_default_log_handler(enum metal_log_level level,
			       const char *format, ...)
{
 81019ca:	b40e      	push	{r1, r2, r3}
 81019cc:	b480      	push	{r7}
 81019ce:	b082      	sub	sp, #8
 81019d0:	af00      	add	r7, sp, #0
 81019d2:	4603      	mov	r3, r0
 81019d4:	71fb      	strb	r3, [r7, #7]
	fprintf(stderr, "%s%s", level_strs[level], msg);
#else
	(void)level;
	(void)format;
#endif
}
 81019d6:	bf00      	nop
 81019d8:	3708      	adds	r7, #8
 81019da:	46bd      	mov	sp, r7
 81019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e0:	b003      	add	sp, #12
 81019e2:	4770      	bx	lr

081019e4 <metal_io_virt>:
{
 81019e4:	b480      	push	{r7}
 81019e6:	b083      	sub	sp, #12
 81019e8:	af00      	add	r7, sp, #0
 81019ea:	6078      	str	r0, [r7, #4]
 81019ec:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81019ee:	687b      	ldr	r3, [r7, #4]
 81019f0:	681b      	ldr	r3, [r3, #0]
		: NULL);
 81019f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81019f6:	d009      	beq.n	8101a0c <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	689b      	ldr	r3, [r3, #8]
 81019fc:	683a      	ldr	r2, [r7, #0]
 81019fe:	429a      	cmp	r2, r3
 8101a00:	d804      	bhi.n	8101a0c <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8101a06:	683b      	ldr	r3, [r7, #0]
 8101a08:	4413      	add	r3, r2
 8101a0a:	e000      	b.n	8101a0e <metal_io_virt+0x2a>
 8101a0c:	2300      	movs	r3, #0
}
 8101a0e:	4618      	mov	r0, r3
 8101a10:	370c      	adds	r7, #12
 8101a12:	46bd      	mov	sp, r7
 8101a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a18:	4770      	bx	lr

08101a1a <metal_io_virt_to_offset>:
 * @param[in]	virt	Virtual address within segment.
 * @return	METAL_BAD_OFFSET if out of range, or offset.
 */
static inline unsigned long
metal_io_virt_to_offset(struct metal_io_region *io, void *virt)
{
 8101a1a:	b480      	push	{r7}
 8101a1c:	b085      	sub	sp, #20
 8101a1e:	af00      	add	r7, sp, #0
 8101a20:	6078      	str	r0, [r7, #4]
 8101a22:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	681b      	ldr	r3, [r3, #0]
 8101a28:	683a      	ldr	r2, [r7, #0]
 8101a2a:	1ad3      	subs	r3, r2, r3
 8101a2c:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	689b      	ldr	r3, [r3, #8]
 8101a32:	68fa      	ldr	r2, [r7, #12]
 8101a34:	429a      	cmp	r2, r3
 8101a36:	d201      	bcs.n	8101a3c <metal_io_virt_to_offset+0x22>
 8101a38:	68fb      	ldr	r3, [r7, #12]
 8101a3a:	e001      	b.n	8101a40 <metal_io_virt_to_offset+0x26>
 8101a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8101a40:	4618      	mov	r0, r3
 8101a42:	3714      	adds	r7, #20
 8101a44:	46bd      	mov	sp, r7
 8101a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a4a:	4770      	bx	lr

08101a4c <metal_io_read>:
 * @return	Value.
 */
static inline uint64_t
metal_io_read(struct metal_io_region *io, unsigned long offset,
	      memory_order order, int width)
{
 8101a4c:	b5b0      	push	{r4, r5, r7, lr}
 8101a4e:	b08c      	sub	sp, #48	; 0x30
 8101a50:	af00      	add	r7, sp, #0
 8101a52:	60f8      	str	r0, [r7, #12]
 8101a54:	60b9      	str	r1, [r7, #8]
 8101a56:	603b      	str	r3, [r7, #0]
 8101a58:	4613      	mov	r3, r2
 8101a5a:	71fb      	strb	r3, [r7, #7]
	void *ptr = metal_io_virt(io, offset);
 8101a5c:	68b9      	ldr	r1, [r7, #8]
 8101a5e:	68f8      	ldr	r0, [r7, #12]
 8101a60:	f7ff ffc0 	bl	81019e4 <metal_io_virt>
 8101a64:	62f8      	str	r0, [r7, #44]	; 0x2c

	if (io->ops.read)
 8101a66:	68fb      	ldr	r3, [r7, #12]
 8101a68:	699b      	ldr	r3, [r3, #24]
 8101a6a:	2b00      	cmp	r3, #0
 8101a6c:	d009      	beq.n	8101a82 <metal_io_read+0x36>
		return (*io->ops.read)(io, offset, order, width);
 8101a6e:	68fb      	ldr	r3, [r7, #12]
 8101a70:	699c      	ldr	r4, [r3, #24]
 8101a72:	79fa      	ldrb	r2, [r7, #7]
 8101a74:	683b      	ldr	r3, [r7, #0]
 8101a76:	68b9      	ldr	r1, [r7, #8]
 8101a78:	68f8      	ldr	r0, [r7, #12]
 8101a7a:	47a0      	blx	r4
 8101a7c:	4604      	mov	r4, r0
 8101a7e:	460d      	mov	r5, r1
 8101a80:	e059      	b.n	8101b36 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uchar) == width)
 8101a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101a84:	2b00      	cmp	r3, #0
 8101a86:	d012      	beq.n	8101aae <metal_io_read+0x62>
 8101a88:	683b      	ldr	r3, [r7, #0]
 8101a8a:	2b01      	cmp	r3, #1
 8101a8c:	d10f      	bne.n	8101aae <metal_io_read+0x62>
		return atomic_load_explicit((atomic_uchar *)ptr, order);
 8101a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8101a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101a94:	f3bf 8f5b 	dmb	ish
 8101a98:	781b      	ldrb	r3, [r3, #0]
 8101a9a:	f3bf 8f5b 	dmb	ish
 8101a9e:	b2db      	uxtb	r3, r3
 8101aa0:	76fb      	strb	r3, [r7, #27]
 8101aa2:	7efb      	ldrb	r3, [r7, #27]
 8101aa4:	b2db      	uxtb	r3, r3
 8101aa6:	2200      	movs	r2, #0
 8101aa8:	461c      	mov	r4, r3
 8101aaa:	4615      	mov	r5, r2
 8101aac:	e043      	b.n	8101b36 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ushort) == width)
 8101aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101ab0:	2b00      	cmp	r3, #0
 8101ab2:	d012      	beq.n	8101ada <metal_io_read+0x8e>
 8101ab4:	683b      	ldr	r3, [r7, #0]
 8101ab6:	2b02      	cmp	r3, #2
 8101ab8:	d10f      	bne.n	8101ada <metal_io_read+0x8e>
		return atomic_load_explicit((atomic_ushort *)ptr, order);
 8101aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101abc:	627b      	str	r3, [r7, #36]	; 0x24
 8101abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ac0:	f3bf 8f5b 	dmb	ish
 8101ac4:	881b      	ldrh	r3, [r3, #0]
 8101ac6:	f3bf 8f5b 	dmb	ish
 8101aca:	b29b      	uxth	r3, r3
 8101acc:	833b      	strh	r3, [r7, #24]
 8101ace:	8b3b      	ldrh	r3, [r7, #24]
 8101ad0:	b29b      	uxth	r3, r3
 8101ad2:	2200      	movs	r2, #0
 8101ad4:	461c      	mov	r4, r3
 8101ad6:	4615      	mov	r5, r2
 8101ad8:	e02d      	b.n	8101b36 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_uint) == width)
 8101ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101adc:	2b00      	cmp	r3, #0
 8101ade:	d010      	beq.n	8101b02 <metal_io_read+0xb6>
 8101ae0:	683b      	ldr	r3, [r7, #0]
 8101ae2:	2b04      	cmp	r3, #4
 8101ae4:	d10d      	bne.n	8101b02 <metal_io_read+0xb6>
		return atomic_load_explicit((atomic_uint *)ptr, order);
 8101ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101ae8:	623b      	str	r3, [r7, #32]
 8101aea:	6a3b      	ldr	r3, [r7, #32]
 8101aec:	f3bf 8f5b 	dmb	ish
 8101af0:	681b      	ldr	r3, [r3, #0]
 8101af2:	f3bf 8f5b 	dmb	ish
 8101af6:	617b      	str	r3, [r7, #20]
 8101af8:	697b      	ldr	r3, [r7, #20]
 8101afa:	2200      	movs	r2, #0
 8101afc:	461c      	mov	r4, r3
 8101afe:	4615      	mov	r5, r2
 8101b00:	e019      	b.n	8101b36 <metal_io_read+0xea>
	else if (ptr && sizeof(atomic_ulong) == width)
 8101b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d010      	beq.n	8101b2a <metal_io_read+0xde>
 8101b08:	683b      	ldr	r3, [r7, #0]
 8101b0a:	2b04      	cmp	r3, #4
 8101b0c:	d10d      	bne.n	8101b2a <metal_io_read+0xde>
		return atomic_load_explicit((atomic_ulong *)ptr, order);
 8101b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101b10:	61fb      	str	r3, [r7, #28]
 8101b12:	69fb      	ldr	r3, [r7, #28]
 8101b14:	f3bf 8f5b 	dmb	ish
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	f3bf 8f5b 	dmb	ish
 8101b1e:	613b      	str	r3, [r7, #16]
 8101b20:	693b      	ldr	r3, [r7, #16]
 8101b22:	2200      	movs	r2, #0
 8101b24:	461c      	mov	r4, r3
 8101b26:	4615      	mov	r5, r2
 8101b28:	e005      	b.n	8101b36 <metal_io_read+0xea>
#ifndef NO_ATOMIC_64_SUPPORT
	else if (ptr && sizeof(atomic_ullong) == width)
		return atomic_load_explicit((atomic_ullong *)ptr, order);
#endif
	metal_assert(0);
 8101b2a:	4b06      	ldr	r3, [pc, #24]	; (8101b44 <metal_io_read+0xf8>)
 8101b2c:	4a06      	ldr	r2, [pc, #24]	; (8101b48 <metal_io_read+0xfc>)
 8101b2e:	21f0      	movs	r1, #240	; 0xf0
 8101b30:	4806      	ldr	r0, [pc, #24]	; (8101b4c <metal_io_read+0x100>)
 8101b32:	f001 fe3d 	bl	81037b0 <__assert_func>
	return 0; /* quiet compiler */
}
 8101b36:	4622      	mov	r2, r4
 8101b38:	462b      	mov	r3, r5
 8101b3a:	4610      	mov	r0, r2
 8101b3c:	4619      	mov	r1, r3
 8101b3e:	3730      	adds	r7, #48	; 0x30
 8101b40:	46bd      	mov	sp, r7
 8101b42:	bdb0      	pop	{r4, r5, r7, pc}
 8101b44:	0810496c 	.word	0x0810496c
 8101b48:	08104aec 	.word	0x08104aec
 8101b4c:	08104970 	.word	0x08104970

08101b50 <metal_allocate_memory>:
#ifdef __cplusplus
extern "C" {
#endif

static inline void *metal_allocate_memory(unsigned int size)
{
 8101b50:	b580      	push	{r7, lr}
 8101b52:	b082      	sub	sp, #8
 8101b54:	af00      	add	r7, sp, #0
 8101b56:	6078      	str	r0, [r7, #4]
	return (malloc(size));
 8101b58:	6878      	ldr	r0, [r7, #4]
 8101b5a:	f001 fe83 	bl	8103864 <malloc>
 8101b5e:	4603      	mov	r3, r0
}
 8101b60:	4618      	mov	r0, r3
 8101b62:	3708      	adds	r7, #8
 8101b64:	46bd      	mov	sp, r7
 8101b66:	bd80      	pop	{r7, pc}

08101b68 <metal_free_memory>:

static inline void metal_free_memory(void *ptr)
{
 8101b68:	b580      	push	{r7, lr}
 8101b6a:	b082      	sub	sp, #8
 8101b6c:	af00      	add	r7, sp, #0
 8101b6e:	6078      	str	r0, [r7, #4]
	free(ptr);
 8101b70:	6878      	ldr	r0, [r7, #4]
 8101b72:	f001 fe7f 	bl	8103874 <free>
}
 8101b76:	bf00      	nop
 8101b78:	3708      	adds	r7, #8
 8101b7a:	46bd      	mov	sp, r7
 8101b7c:	bd80      	pop	{r7, pc}

08101b7e <virtqueue_allocate>:
int virtqueue_enable_cb(struct virtqueue *vq);

void virtqueue_kick(struct virtqueue *vq);

static inline struct virtqueue *virtqueue_allocate(unsigned int num_desc_extra)
{
 8101b7e:	b580      	push	{r7, lr}
 8101b80:	b084      	sub	sp, #16
 8101b82:	af00      	add	r7, sp, #0
 8101b84:	6078      	str	r0, [r7, #4]
	struct virtqueue *vqs;
	uint32_t vq_size = sizeof(struct virtqueue) +
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	3307      	adds	r3, #7
 8101b8a:	00db      	lsls	r3, r3, #3
 8101b8c:	60fb      	str	r3, [r7, #12]
		// num_desc_extra * sizeof(struct vq_desc_extra);
		num_desc_extra * sizeof(vqs-> vq_descx[0]);

	vqs = (struct virtqueue *)metal_allocate_memory(vq_size);
 8101b8e:	68f8      	ldr	r0, [r7, #12]
 8101b90:	f7ff ffde 	bl	8101b50 <metal_allocate_memory>
 8101b94:	60b8      	str	r0, [r7, #8]

	if (vqs) {
 8101b96:	68bb      	ldr	r3, [r7, #8]
 8101b98:	2b00      	cmp	r3, #0
 8101b9a:	d004      	beq.n	8101ba6 <virtqueue_allocate+0x28>
		memset(vqs, 0x00, vq_size);
 8101b9c:	68fa      	ldr	r2, [r7, #12]
 8101b9e:	2100      	movs	r1, #0
 8101ba0:	68b8      	ldr	r0, [r7, #8]
 8101ba2:	f001 fe7d 	bl	81038a0 <memset>
	}

	return vqs;
 8101ba6:	68bb      	ldr	r3, [r7, #8]
}
 8101ba8:	4618      	mov	r0, r3
 8101baa:	3710      	adds	r7, #16
 8101bac:	46bd      	mov	sp, r7
 8101bae:	bd80      	pop	{r7, pc}

08101bb0 <rproc_virtio_virtqueue_notify>:
#include <openamp/virtqueue.h>
#include <metal/utilities.h>
#include <metal/alloc.h>

static void rproc_virtio_virtqueue_notify(struct virtqueue *vq)
{
 8101bb0:	b580      	push	{r7, lr}
 8101bb2:	b086      	sub	sp, #24
 8101bb4:	af00      	add	r7, sp, #0
 8101bb6:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vring_info;
	struct virtio_device *vdev;
	unsigned int vq_id = vq->vq_queue_index;
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	891b      	ldrh	r3, [r3, #8]
 8101bbc:	617b      	str	r3, [r7, #20]

	vdev = vq->vq_dev;
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	681b      	ldr	r3, [r3, #0]
 8101bc2:	613b      	str	r3, [r7, #16]
	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8101bc4:	693b      	ldr	r3, [r7, #16]
 8101bc6:	3b18      	subs	r3, #24
 8101bc8:	60fb      	str	r3, [r7, #12]
	metal_assert(vq_id <= vdev->vrings_num);
 8101bca:	693b      	ldr	r3, [r7, #16]
 8101bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101bce:	697a      	ldr	r2, [r7, #20]
 8101bd0:	429a      	cmp	r2, r3
 8101bd2:	d905      	bls.n	8101be0 <rproc_virtio_virtqueue_notify+0x30>
 8101bd4:	4b0d      	ldr	r3, [pc, #52]	; (8101c0c <rproc_virtio_virtqueue_notify+0x5c>)
 8101bd6:	4a0e      	ldr	r2, [pc, #56]	; (8101c10 <rproc_virtio_virtqueue_notify+0x60>)
 8101bd8:	2133      	movs	r1, #51	; 0x33
 8101bda:	480e      	ldr	r0, [pc, #56]	; (8101c14 <rproc_virtio_virtqueue_notify+0x64>)
 8101bdc:	f001 fde8 	bl	81037b0 <__assert_func>
	vring_info = &vdev->vrings_info[vq_id];
 8101be0:	693b      	ldr	r3, [r7, #16]
 8101be2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8101be4:	697a      	ldr	r2, [r7, #20]
 8101be6:	4613      	mov	r3, r2
 8101be8:	005b      	lsls	r3, r3, #1
 8101bea:	4413      	add	r3, r2
 8101bec:	00db      	lsls	r3, r3, #3
 8101bee:	440b      	add	r3, r1
 8101bf0:	60bb      	str	r3, [r7, #8]
	rpvdev->notify(rpvdev->priv, vring_info->notifyid);
 8101bf2:	68fb      	ldr	r3, [r7, #12]
 8101bf4:	691b      	ldr	r3, [r3, #16]
 8101bf6:	68fa      	ldr	r2, [r7, #12]
 8101bf8:	6810      	ldr	r0, [r2, #0]
 8101bfa:	68ba      	ldr	r2, [r7, #8]
 8101bfc:	6912      	ldr	r2, [r2, #16]
 8101bfe:	4611      	mov	r1, r2
 8101c00:	4798      	blx	r3
}
 8101c02:	bf00      	nop
 8101c04:	3718      	adds	r7, #24
 8101c06:	46bd      	mov	sp, r7
 8101c08:	bd80      	pop	{r7, pc}
 8101c0a:	bf00      	nop
 8101c0c:	081049b8 	.word	0x081049b8
 8101c10:	08104acc 	.word	0x08104acc
 8101c14:	081049d4 	.word	0x081049d4

08101c18 <rproc_virtio_get_status>:

static unsigned char rproc_virtio_get_status(struct virtio_device *vdev)
{
 8101c18:	b580      	push	{r7, lr}
 8101c1a:	b086      	sub	sp, #24
 8101c1c:	af00      	add	r7, sp, #0
 8101c1e:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	char status;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	3b18      	subs	r3, #24
 8101c24:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8101c26:	697b      	ldr	r3, [r7, #20]
 8101c28:	689b      	ldr	r3, [r3, #8]
 8101c2a:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8101c2c:	697b      	ldr	r3, [r7, #20]
 8101c2e:	68db      	ldr	r3, [r3, #12]
 8101c30:	60fb      	str	r3, [r7, #12]
	status = metal_io_read8(io,
 8101c32:	693b      	ldr	r3, [r7, #16]
 8101c34:	3318      	adds	r3, #24
 8101c36:	4619      	mov	r1, r3
 8101c38:	68f8      	ldr	r0, [r7, #12]
 8101c3a:	f7ff feee 	bl	8101a1a <metal_io_virt_to_offset>
 8101c3e:	4601      	mov	r1, r0
 8101c40:	2301      	movs	r3, #1
 8101c42:	2205      	movs	r2, #5
 8101c44:	68f8      	ldr	r0, [r7, #12]
 8101c46:	f7ff ff01 	bl	8101a4c <metal_io_read>
 8101c4a:	4602      	mov	r2, r0
 8101c4c:	460b      	mov	r3, r1
 8101c4e:	4613      	mov	r3, r2
 8101c50:	72fb      	strb	r3, [r7, #11]
				metal_io_virt_to_offset(io, &vdev_rsc->status));
	return status;
 8101c52:	7afb      	ldrb	r3, [r7, #11]
}
 8101c54:	4618      	mov	r0, r3
 8101c56:	3718      	adds	r7, #24
 8101c58:	46bd      	mov	sp, r7
 8101c5a:	bd80      	pop	{r7, pc}

08101c5c <rproc_virtio_get_features>:
	rpvdev->notify(rpvdev->priv, vdev->index);
}
#endif

static uint32_t rproc_virtio_get_features(struct virtio_device *vdev)
{
 8101c5c:	b580      	push	{r7, lr}
 8101c5e:	b086      	sub	sp, #24
 8101c60:	af00      	add	r7, sp, #0
 8101c62:	6078      	str	r0, [r7, #4]
	struct remoteproc_virtio *rpvdev;
	struct fw_rsc_vdev *vdev_rsc;
	struct metal_io_region *io;
	uint32_t features;

	rpvdev = metal_container_of(vdev, struct remoteproc_virtio, vdev);
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	3b18      	subs	r3, #24
 8101c68:	617b      	str	r3, [r7, #20]
	vdev_rsc = rpvdev->vdev_rsc;
 8101c6a:	697b      	ldr	r3, [r7, #20]
 8101c6c:	689b      	ldr	r3, [r3, #8]
 8101c6e:	613b      	str	r3, [r7, #16]
	io = rpvdev->vdev_rsc_io;
 8101c70:	697b      	ldr	r3, [r7, #20]
 8101c72:	68db      	ldr	r3, [r3, #12]
 8101c74:	60fb      	str	r3, [r7, #12]
	/* TODO: shall we get features based on the role ? */
	features = metal_io_read32(io,
 8101c76:	693b      	ldr	r3, [r7, #16]
 8101c78:	330c      	adds	r3, #12
 8101c7a:	4619      	mov	r1, r3
 8101c7c:	68f8      	ldr	r0, [r7, #12]
 8101c7e:	f7ff fecc 	bl	8101a1a <metal_io_virt_to_offset>
 8101c82:	4601      	mov	r1, r0
 8101c84:	2304      	movs	r3, #4
 8101c86:	2205      	movs	r2, #5
 8101c88:	68f8      	ldr	r0, [r7, #12]
 8101c8a:	f7ff fedf 	bl	8101a4c <metal_io_read>
 8101c8e:	4602      	mov	r2, r0
 8101c90:	460b      	mov	r3, r1
 8101c92:	4613      	mov	r3, r2
 8101c94:	60bb      	str	r3, [r7, #8]
			metal_io_virt_to_offset(io, &vdev_rsc->dfeatures));

	return features;
 8101c96:	68bb      	ldr	r3, [r7, #8]
}
 8101c98:	4618      	mov	r0, r3
 8101c9a:	3718      	adds	r7, #24
 8101c9c:	46bd      	mov	sp, r7
 8101c9e:	bd80      	pop	{r7, pc}

08101ca0 <rproc_virtio_negotiate_features>:
}
#endif

static uint32_t rproc_virtio_negotiate_features(struct virtio_device *vdev,
						uint32_t features)
{
 8101ca0:	b480      	push	{r7}
 8101ca2:	b083      	sub	sp, #12
 8101ca4:	af00      	add	r7, sp, #0
 8101ca6:	6078      	str	r0, [r7, #4]
 8101ca8:	6039      	str	r1, [r7, #0]
	(void)vdev;
	(void)features;

	return 0;
 8101caa:	2300      	movs	r3, #0
}
 8101cac:	4618      	mov	r0, r3
 8101cae:	370c      	adds	r7, #12
 8101cb0:	46bd      	mov	sp, r7
 8101cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cb6:	4770      	bx	lr

08101cb8 <rproc_virtio_read_config>:

static void rproc_virtio_read_config(struct virtio_device *vdev,
				     uint32_t offset, void *dst, int length)
{
 8101cb8:	b480      	push	{r7}
 8101cba:	b085      	sub	sp, #20
 8101cbc:	af00      	add	r7, sp, #0
 8101cbe:	60f8      	str	r0, [r7, #12]
 8101cc0:	60b9      	str	r1, [r7, #8]
 8101cc2:	607a      	str	r2, [r7, #4]
 8101cc4:	603b      	str	r3, [r7, #0]
	(void)vdev;
	(void)offset;
	(void)dst;
	(void)length;
}
 8101cc6:	bf00      	nop
 8101cc8:	3714      	adds	r7, #20
 8101cca:	46bd      	mov	sp, r7
 8101ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cd0:	4770      	bx	lr
	...

08101cd4 <rproc_virtio_create_vdev>:
rproc_virtio_create_vdev(unsigned int role, unsigned int notifyid,
			 void *rsc, struct metal_io_region *rsc_io,
			 void *priv,
			 rpvdev_notify_func notify,
			 virtio_dev_reset_cb rst_cb)
{
 8101cd4:	b580      	push	{r7, lr}
 8101cd6:	b08e      	sub	sp, #56	; 0x38
 8101cd8:	af00      	add	r7, sp, #0
 8101cda:	60f8      	str	r0, [r7, #12]
 8101cdc:	60b9      	str	r1, [r7, #8]
 8101cde:	607a      	str	r2, [r7, #4]
 8101ce0:	603b      	str	r3, [r7, #0]
	struct remoteproc_virtio *rpvdev;
	struct virtio_vring_info *vrings_info;
	struct fw_rsc_vdev *vdev_rsc = rsc;
 8101ce2:	687b      	ldr	r3, [r7, #4]
 8101ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct virtio_device *vdev;
	unsigned int num_vrings = vdev_rsc->num_of_vrings;
 8101ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101ce8:	7e5b      	ldrb	r3, [r3, #25]
 8101cea:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned int i;

	rpvdev = metal_allocate_memory(sizeof(*rpvdev));
 8101cec:	2050      	movs	r0, #80	; 0x50
 8101cee:	f7ff ff2f 	bl	8101b50 <metal_allocate_memory>
 8101cf2:	6278      	str	r0, [r7, #36]	; 0x24
	if (!rpvdev)
 8101cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101cf6:	2b00      	cmp	r3, #0
 8101cf8:	d101      	bne.n	8101cfe <rproc_virtio_create_vdev+0x2a>
		return NULL;
 8101cfa:	2300      	movs	r3, #0
 8101cfc:	e092      	b.n	8101e24 <rproc_virtio_create_vdev+0x150>
	vrings_info = metal_allocate_memory(sizeof(*vrings_info) * num_vrings);
 8101cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101d00:	4613      	mov	r3, r2
 8101d02:	005b      	lsls	r3, r3, #1
 8101d04:	4413      	add	r3, r2
 8101d06:	00db      	lsls	r3, r3, #3
 8101d08:	4618      	mov	r0, r3
 8101d0a:	f7ff ff21 	bl	8101b50 <metal_allocate_memory>
 8101d0e:	6238      	str	r0, [r7, #32]
	if (!vrings_info)
 8101d10:	6a3b      	ldr	r3, [r7, #32]
 8101d12:	2b00      	cmp	r3, #0
 8101d14:	f000 8081 	beq.w	8101e1a <rproc_virtio_create_vdev+0x146>
		goto err0;
	memset(rpvdev, 0, sizeof(*rpvdev));
 8101d18:	2250      	movs	r2, #80	; 0x50
 8101d1a:	2100      	movs	r1, #0
 8101d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101d1e:	f001 fdbf 	bl	81038a0 <memset>
	memset(vrings_info, 0, sizeof(*vrings_info));
 8101d22:	2218      	movs	r2, #24
 8101d24:	2100      	movs	r1, #0
 8101d26:	6a38      	ldr	r0, [r7, #32]
 8101d28:	f001 fdba 	bl	81038a0 <memset>
	vdev = &rpvdev->vdev;
 8101d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d2e:	3318      	adds	r3, #24
 8101d30:	61fb      	str	r3, [r7, #28]

	for (i = 0; i < num_vrings; i++) {
 8101d32:	2300      	movs	r3, #0
 8101d34:	637b      	str	r3, [r7, #52]	; 0x34
 8101d36:	e025      	b.n	8101d84 <rproc_virtio_create_vdev+0xb0>
		struct virtqueue *vq;
		struct fw_rsc_vdev_vring *vring_rsc;
		unsigned int num_extra_desc = 0;
 8101d38:	2300      	movs	r3, #0
 8101d3a:	633b      	str	r3, [r7, #48]	; 0x30

		vring_rsc = &vdev_rsc->vring[i];
 8101d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101d3e:	4613      	mov	r3, r2
 8101d40:	009b      	lsls	r3, r3, #2
 8101d42:	4413      	add	r3, r2
 8101d44:	009b      	lsls	r3, r3, #2
 8101d46:	3318      	adds	r3, #24
 8101d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101d4a:	4413      	add	r3, r2
 8101d4c:	3304      	adds	r3, #4
 8101d4e:	61bb      	str	r3, [r7, #24]
		if (role == VIRTIO_DEV_MASTER) {
 8101d50:	68fb      	ldr	r3, [r7, #12]
 8101d52:	2b00      	cmp	r3, #0
 8101d54:	d102      	bne.n	8101d5c <rproc_virtio_create_vdev+0x88>
			num_extra_desc = vring_rsc->num;
 8101d56:	69bb      	ldr	r3, [r7, #24]
 8101d58:	689b      	ldr	r3, [r3, #8]
 8101d5a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		vq = virtqueue_allocate(num_extra_desc);
 8101d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8101d5e:	f7ff ff0e 	bl	8101b7e <virtqueue_allocate>
 8101d62:	6178      	str	r0, [r7, #20]
		if (!vq)
 8101d64:	697b      	ldr	r3, [r7, #20]
 8101d66:	2b00      	cmp	r3, #0
 8101d68:	d031      	beq.n	8101dce <rproc_virtio_create_vdev+0xfa>
			goto err1;
		vrings_info[i].vq = vq;
 8101d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101d6c:	4613      	mov	r3, r2
 8101d6e:	005b      	lsls	r3, r3, #1
 8101d70:	4413      	add	r3, r2
 8101d72:	00db      	lsls	r3, r3, #3
 8101d74:	461a      	mov	r2, r3
 8101d76:	6a3b      	ldr	r3, [r7, #32]
 8101d78:	4413      	add	r3, r2
 8101d7a:	697a      	ldr	r2, [r7, #20]
 8101d7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < num_vrings; i++) {
 8101d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d80:	3301      	adds	r3, #1
 8101d82:	637b      	str	r3, [r7, #52]	; 0x34
 8101d84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101d88:	429a      	cmp	r2, r3
 8101d8a:	d3d5      	bcc.n	8101d38 <rproc_virtio_create_vdev+0x64>
	}

	/* FIXME commended as seems not nedded, already stored in vdev */
	//rpvdev->notifyid = notifyid;
	rpvdev->notify = notify;
 8101d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101d90:	611a      	str	r2, [r3, #16]
	rpvdev->priv = priv;
 8101d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8101d96:	601a      	str	r2, [r3, #0]
	vdev->vrings_info = vrings_info;
 8101d98:	69fb      	ldr	r3, [r7, #28]
 8101d9a:	6a3a      	ldr	r2, [r7, #32]
 8101d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Assuming the shared memory has been mapped and registered if
	 * necessary
	 */
	rpvdev->vdev_rsc = vdev_rsc;
 8101d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101da2:	609a      	str	r2, [r3, #8]
	rpvdev->vdev_rsc_io = rsc_io;
 8101da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101da6:	683a      	ldr	r2, [r7, #0]
 8101da8:	60da      	str	r2, [r3, #12]

	vdev->index = notifyid;
 8101daa:	69fb      	ldr	r3, [r7, #28]
 8101dac:	68ba      	ldr	r2, [r7, #8]
 8101dae:	601a      	str	r2, [r3, #0]
	vdev->role = role;
 8101db0:	69fb      	ldr	r3, [r7, #28]
 8101db2:	68fa      	ldr	r2, [r7, #12]
 8101db4:	619a      	str	r2, [r3, #24]
	vdev->reset_cb = rst_cb;
 8101db6:	69fb      	ldr	r3, [r7, #28]
 8101db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8101dba:	61da      	str	r2, [r3, #28]
	vdev->vrings_num = num_vrings;
 8101dbc:	69fb      	ldr	r3, [r7, #28]
 8101dbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101dc0:	629a      	str	r2, [r3, #40]	; 0x28
	vdev->func = &remoteproc_virtio_dispatch_funcs;
 8101dc2:	69fb      	ldr	r3, [r7, #28]
 8101dc4:	4a19      	ldr	r2, [pc, #100]	; (8101e2c <rproc_virtio_create_vdev+0x158>)
 8101dc6:	621a      	str	r2, [r3, #32]
	/* TODO: Shall we set features here ? */

	return &rpvdev->vdev;
 8101dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101dca:	3318      	adds	r3, #24
 8101dcc:	e02a      	b.n	8101e24 <rproc_virtio_create_vdev+0x150>
			goto err1;
 8101dce:	bf00      	nop

err1:
	for (i = 0; i < num_vrings; i++) {
 8101dd0:	2300      	movs	r3, #0
 8101dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8101dd4:	e019      	b.n	8101e0a <rproc_virtio_create_vdev+0x136>
		if (vrings_info[i].vq)
 8101dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101dd8:	4613      	mov	r3, r2
 8101dda:	005b      	lsls	r3, r3, #1
 8101ddc:	4413      	add	r3, r2
 8101dde:	00db      	lsls	r3, r3, #3
 8101de0:	461a      	mov	r2, r3
 8101de2:	6a3b      	ldr	r3, [r7, #32]
 8101de4:	4413      	add	r3, r2
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	2b00      	cmp	r3, #0
 8101dea:	d00b      	beq.n	8101e04 <rproc_virtio_create_vdev+0x130>
			metal_free_memory(vrings_info[i].vq);
 8101dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101dee:	4613      	mov	r3, r2
 8101df0:	005b      	lsls	r3, r3, #1
 8101df2:	4413      	add	r3, r2
 8101df4:	00db      	lsls	r3, r3, #3
 8101df6:	461a      	mov	r2, r3
 8101df8:	6a3b      	ldr	r3, [r7, #32]
 8101dfa:	4413      	add	r3, r2
 8101dfc:	681b      	ldr	r3, [r3, #0]
 8101dfe:	4618      	mov	r0, r3
 8101e00:	f7ff feb2 	bl	8101b68 <metal_free_memory>
	for (i = 0; i < num_vrings; i++) {
 8101e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101e06:	3301      	adds	r3, #1
 8101e08:	637b      	str	r3, [r7, #52]	; 0x34
 8101e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101e0e:	429a      	cmp	r2, r3
 8101e10:	d3e1      	bcc.n	8101dd6 <rproc_virtio_create_vdev+0x102>
	}
	metal_free_memory(vrings_info);
 8101e12:	6a38      	ldr	r0, [r7, #32]
 8101e14:	f7ff fea8 	bl	8101b68 <metal_free_memory>
 8101e18:	e000      	b.n	8101e1c <rproc_virtio_create_vdev+0x148>
		goto err0;
 8101e1a:	bf00      	nop
err0:
	metal_free_memory(rpvdev);
 8101e1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101e1e:	f7ff fea3 	bl	8101b68 <metal_free_memory>
	return NULL;
 8101e22:	2300      	movs	r3, #0
}
 8101e24:	4618      	mov	r0, r3
 8101e26:	3738      	adds	r7, #56	; 0x38
 8101e28:	46bd      	mov	sp, r7
 8101e2a:	bd80      	pop	{r7, pc}
 8101e2c:	08104aa8 	.word	0x08104aa8

08101e30 <rproc_virtio_init_vring>:

int rproc_virtio_init_vring(struct virtio_device *vdev, unsigned int index,
			    unsigned int notifyid, void *va,
			    struct metal_io_region *io,
			    unsigned int num_descs, unsigned int align)
{
 8101e30:	b480      	push	{r7}
 8101e32:	b087      	sub	sp, #28
 8101e34:	af00      	add	r7, sp, #0
 8101e36:	60f8      	str	r0, [r7, #12]
 8101e38:	60b9      	str	r1, [r7, #8]
 8101e3a:	607a      	str	r2, [r7, #4]
 8101e3c:	603b      	str	r3, [r7, #0]
	struct virtio_vring_info *vring_info;
	unsigned int num_vrings;

	num_vrings = vdev->vrings_num;
 8101e3e:	68fb      	ldr	r3, [r7, #12]
 8101e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e42:	617b      	str	r3, [r7, #20]
	if (index >= num_vrings)
 8101e44:	68ba      	ldr	r2, [r7, #8]
 8101e46:	697b      	ldr	r3, [r7, #20]
 8101e48:	429a      	cmp	r2, r3
 8101e4a:	d302      	bcc.n	8101e52 <rproc_virtio_init_vring+0x22>
		return -RPROC_EINVAL;
 8101e4c:	f06f 0301 	mvn.w	r3, #1
 8101e50:	e019      	b.n	8101e86 <rproc_virtio_init_vring+0x56>
	vring_info = &vdev->vrings_info[index];
 8101e52:	68fb      	ldr	r3, [r7, #12]
 8101e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8101e56:	68ba      	ldr	r2, [r7, #8]
 8101e58:	4613      	mov	r3, r2
 8101e5a:	005b      	lsls	r3, r3, #1
 8101e5c:	4413      	add	r3, r2
 8101e5e:	00db      	lsls	r3, r3, #3
 8101e60:	440b      	add	r3, r1
 8101e62:	613b      	str	r3, [r7, #16]
	vring_info->io = io;
 8101e64:	693b      	ldr	r3, [r7, #16]
 8101e66:	6a3a      	ldr	r2, [r7, #32]
 8101e68:	615a      	str	r2, [r3, #20]
	vring_info->notifyid = notifyid;
 8101e6a:	693b      	ldr	r3, [r7, #16]
 8101e6c:	687a      	ldr	r2, [r7, #4]
 8101e6e:	611a      	str	r2, [r3, #16]
	vring_info->info.vaddr = va;
 8101e70:	693b      	ldr	r3, [r7, #16]
 8101e72:	683a      	ldr	r2, [r7, #0]
 8101e74:	605a      	str	r2, [r3, #4]
	vring_info->info.num_descs = num_descs;
 8101e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e78:	b29a      	uxth	r2, r3
 8101e7a:	693b      	ldr	r3, [r7, #16]
 8101e7c:	819a      	strh	r2, [r3, #12]
	vring_info->info.align = align;
 8101e7e:	693b      	ldr	r3, [r7, #16]
 8101e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101e82:	609a      	str	r2, [r3, #8]

	return 0;
 8101e84:	2300      	movs	r3, #0
}
 8101e86:	4618      	mov	r0, r3
 8101e88:	371c      	adds	r7, #28
 8101e8a:	46bd      	mov	sp, r7
 8101e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e90:	4770      	bx	lr

08101e92 <rproc_virtio_notified>:

int rproc_virtio_notified(struct virtio_device *vdev, uint32_t notifyid)
{
 8101e92:	b580      	push	{r7, lr}
 8101e94:	b086      	sub	sp, #24
 8101e96:	af00      	add	r7, sp, #0
 8101e98:	6078      	str	r0, [r7, #4]
 8101e9a:	6039      	str	r1, [r7, #0]
	unsigned int num_vrings, i;
	struct virtio_vring_info *vring_info;
	struct virtqueue *vq;

	if (!vdev)
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	2b00      	cmp	r3, #0
 8101ea0:	d102      	bne.n	8101ea8 <rproc_virtio_notified+0x16>
		return -EINVAL;
 8101ea2:	f06f 0315 	mvn.w	r3, #21
 8101ea6:	e02c      	b.n	8101f02 <rproc_virtio_notified+0x70>
	/* We do nothing for vdev notification in this implementation */
	if (vdev->index == notifyid)
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	681b      	ldr	r3, [r3, #0]
 8101eac:	683a      	ldr	r2, [r7, #0]
 8101eae:	429a      	cmp	r2, r3
 8101eb0:	d101      	bne.n	8101eb6 <rproc_virtio_notified+0x24>
		return 0;
 8101eb2:	2300      	movs	r3, #0
 8101eb4:	e025      	b.n	8101f02 <rproc_virtio_notified+0x70>
	num_vrings = vdev->vrings_num;
 8101eb6:	687b      	ldr	r3, [r7, #4]
 8101eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101eba:	613b      	str	r3, [r7, #16]
	for (i = 0; i < num_vrings; i++) {
 8101ebc:	2300      	movs	r3, #0
 8101ebe:	617b      	str	r3, [r7, #20]
 8101ec0:	e01a      	b.n	8101ef8 <rproc_virtio_notified+0x66>
		vring_info = &vdev->vrings_info[i];
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8101ec6:	697a      	ldr	r2, [r7, #20]
 8101ec8:	4613      	mov	r3, r2
 8101eca:	005b      	lsls	r3, r3, #1
 8101ecc:	4413      	add	r3, r2
 8101ece:	00db      	lsls	r3, r3, #3
 8101ed0:	440b      	add	r3, r1
 8101ed2:	60fb      	str	r3, [r7, #12]
		if (vring_info->notifyid == notifyid ||
 8101ed4:	68fb      	ldr	r3, [r7, #12]
 8101ed6:	691b      	ldr	r3, [r3, #16]
 8101ed8:	683a      	ldr	r2, [r7, #0]
 8101eda:	429a      	cmp	r2, r3
 8101edc:	d003      	beq.n	8101ee6 <rproc_virtio_notified+0x54>
 8101ede:	683b      	ldr	r3, [r7, #0]
 8101ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8101ee4:	d105      	bne.n	8101ef2 <rproc_virtio_notified+0x60>
		    notifyid == RSC_NOTIFY_ID_ANY) {
			vq = vring_info->vq;
 8101ee6:	68fb      	ldr	r3, [r7, #12]
 8101ee8:	681b      	ldr	r3, [r3, #0]
 8101eea:	60bb      	str	r3, [r7, #8]
			virtqueue_notification(vq);
 8101eec:	68b8      	ldr	r0, [r7, #8]
 8101eee:	f001 fa19 	bl	8103324 <virtqueue_notification>
	for (i = 0; i < num_vrings; i++) {
 8101ef2:	697b      	ldr	r3, [r7, #20]
 8101ef4:	3301      	adds	r3, #1
 8101ef6:	617b      	str	r3, [r7, #20]
 8101ef8:	697a      	ldr	r2, [r7, #20]
 8101efa:	693b      	ldr	r3, [r7, #16]
 8101efc:	429a      	cmp	r2, r3
 8101efe:	d3e0      	bcc.n	8101ec2 <rproc_virtio_notified+0x30>
		}
	}
	return 0;
 8101f00:	2300      	movs	r3, #0
}
 8101f02:	4618      	mov	r0, r3
 8101f04:	3718      	adds	r7, #24
 8101f06:	46bd      	mov	sp, r7
 8101f08:	bd80      	pop	{r7, pc}

08101f0a <rproc_virtio_wait_remote_ready>:

void rproc_virtio_wait_remote_ready(struct virtio_device *vdev)
{
 8101f0a:	b580      	push	{r7, lr}
 8101f0c:	b084      	sub	sp, #16
 8101f0e:	af00      	add	r7, sp, #0
 8101f10:	6078      	str	r0, [r7, #4]
	/*
	 * No status available for slave. As Master has not to wait
	 * slave action, we can return. Behavior should be updated
	 * in future if a slave status is added.
	 */
	if (vdev->role == VIRTIO_DEV_MASTER)
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	699b      	ldr	r3, [r3, #24]
 8101f16:	2b00      	cmp	r3, #0
 8101f18:	d00a      	beq.n	8101f30 <rproc_virtio_wait_remote_ready+0x26>
		return;

	while (1) {
		status = rproc_virtio_get_status(vdev);
 8101f1a:	6878      	ldr	r0, [r7, #4]
 8101f1c:	f7ff fe7c 	bl	8101c18 <rproc_virtio_get_status>
 8101f20:	4603      	mov	r3, r0
 8101f22:	73fb      	strb	r3, [r7, #15]
		if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK)
 8101f24:	7bfb      	ldrb	r3, [r7, #15]
 8101f26:	f003 0304 	and.w	r3, r3, #4
 8101f2a:	2b00      	cmp	r3, #0
 8101f2c:	d102      	bne.n	8101f34 <rproc_virtio_wait_remote_ready+0x2a>
		status = rproc_virtio_get_status(vdev);
 8101f2e:	e7f4      	b.n	8101f1a <rproc_virtio_wait_remote_ready+0x10>
		return;
 8101f30:	bf00      	nop
 8101f32:	e000      	b.n	8101f36 <rproc_virtio_wait_remote_ready+0x2c>
			return;
 8101f34:	bf00      	nop
	}
}
 8101f36:	3710      	adds	r7, #16
 8101f38:	46bd      	mov	sp, r7
 8101f3a:	bd80      	pop	{r7, pc}

08101f3c <__metal_mutex_acquire>:
{
	return 1 - atomic_flag_test_and_set(&mutex->w);
}

static inline void __metal_mutex_acquire(metal_mutex_t *mutex)
{
 8101f3c:	b480      	push	{r7}
 8101f3e:	b083      	sub	sp, #12
 8101f40:	af00      	add	r7, sp, #0
 8101f42:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 8101f44:	bf00      	nop
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	2201      	movs	r2, #1
 8101f4a:	4611      	mov	r1, r2
 8101f4c:	f3bf 8f5b 	dmb	ish
 8101f50:	e8d3 2f4f 	ldrexb	r2, [r3]
 8101f54:	e8c3 1f40 	strexb	r0, r1, [r3]
 8101f58:	2800      	cmp	r0, #0
 8101f5a:	d1f9      	bne.n	8101f50 <__metal_mutex_acquire+0x14>
 8101f5c:	f3bf 8f5b 	dmb	ish
 8101f60:	b2d3      	uxtb	r3, r2
 8101f62:	2b00      	cmp	r3, #0
 8101f64:	d1ef      	bne.n	8101f46 <__metal_mutex_acquire+0xa>
		;
	}
}
 8101f66:	bf00      	nop
 8101f68:	bf00      	nop
 8101f6a:	370c      	adds	r7, #12
 8101f6c:	46bd      	mov	sp, r7
 8101f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f72:	4770      	bx	lr

08101f74 <__metal_mutex_release>:

static inline void __metal_mutex_release(metal_mutex_t *mutex)
{
 8101f74:	b480      	push	{r7}
 8101f76:	b083      	sub	sp, #12
 8101f78:	af00      	add	r7, sp, #0
 8101f7a:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	f3bf 8f5b 	dmb	ish
 8101f82:	2200      	movs	r2, #0
 8101f84:	701a      	strb	r2, [r3, #0]
 8101f86:	f3bf 8f5b 	dmb	ish
}
 8101f8a:	bf00      	nop
 8101f8c:	370c      	adds	r7, #12
 8101f8e:	46bd      	mov	sp, r7
 8101f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f94:	4770      	bx	lr

08101f96 <metal_mutex_acquire>:
/**
 * @brief	Acquire a mutex
 * @param[in]	mutex	Mutex to mutex.
 */
static inline void metal_mutex_acquire(metal_mutex_t *mutex)
{
 8101f96:	b580      	push	{r7, lr}
 8101f98:	b082      	sub	sp, #8
 8101f9a:	af00      	add	r7, sp, #0
 8101f9c:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 8101f9e:	6878      	ldr	r0, [r7, #4]
 8101fa0:	f7ff ffcc 	bl	8101f3c <__metal_mutex_acquire>
}
 8101fa4:	bf00      	nop
 8101fa6:	3708      	adds	r7, #8
 8101fa8:	46bd      	mov	sp, r7
 8101faa:	bd80      	pop	{r7, pc}

08101fac <metal_mutex_release>:
 * @brief	Release a previously acquired mutex.
 * @param[in]	mutex	Mutex to mutex.
 * @see metal_mutex_try_acquire, metal_mutex_acquire
 */
static inline void metal_mutex_release(metal_mutex_t *mutex)
{
 8101fac:	b580      	push	{r7, lr}
 8101fae:	b082      	sub	sp, #8
 8101fb0:	af00      	add	r7, sp, #0
 8101fb2:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8101fb4:	6878      	ldr	r0, [r7, #4]
 8101fb6:	f7ff ffdd 	bl	8101f74 <__metal_mutex_release>
}
 8101fba:	bf00      	nop
 8101fbc:	3708      	adds	r7, #8
 8101fbe:	46bd      	mov	sp, r7
 8101fc0:	bd80      	pop	{r7, pc}

08101fc2 <metal_list_add_before>:
{
 8101fc2:	b480      	push	{r7}
 8101fc4:	b083      	sub	sp, #12
 8101fc6:	af00      	add	r7, sp, #0
 8101fc8:	6078      	str	r0, [r7, #4]
 8101fca:	6039      	str	r1, [r7, #0]
	new_node->prev = node->prev;
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	685a      	ldr	r2, [r3, #4]
 8101fd0:	683b      	ldr	r3, [r7, #0]
 8101fd2:	605a      	str	r2, [r3, #4]
	new_node->next = node;
 8101fd4:	683b      	ldr	r3, [r7, #0]
 8101fd6:	687a      	ldr	r2, [r7, #4]
 8101fd8:	601a      	str	r2, [r3, #0]
	new_node->next->prev = new_node;
 8101fda:	683b      	ldr	r3, [r7, #0]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	683a      	ldr	r2, [r7, #0]
 8101fe0:	605a      	str	r2, [r3, #4]
	new_node->prev->next = new_node;
 8101fe2:	683b      	ldr	r3, [r7, #0]
 8101fe4:	685b      	ldr	r3, [r3, #4]
 8101fe6:	683a      	ldr	r2, [r7, #0]
 8101fe8:	601a      	str	r2, [r3, #0]
}
 8101fea:	bf00      	nop
 8101fec:	370c      	adds	r7, #12
 8101fee:	46bd      	mov	sp, r7
 8101ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ff4:	4770      	bx	lr

08101ff6 <metal_list_add_tail>:
{
 8101ff6:	b580      	push	{r7, lr}
 8101ff8:	b082      	sub	sp, #8
 8101ffa:	af00      	add	r7, sp, #0
 8101ffc:	6078      	str	r0, [r7, #4]
 8101ffe:	6039      	str	r1, [r7, #0]
	metal_list_add_before(list, node);
 8102000:	6839      	ldr	r1, [r7, #0]
 8102002:	6878      	ldr	r0, [r7, #4]
 8102004:	f7ff ffdd 	bl	8101fc2 <metal_list_add_before>
}
 8102008:	bf00      	nop
 810200a:	3708      	adds	r7, #8
 810200c:	46bd      	mov	sp, r7
 810200e:	bd80      	pop	{r7, pc}

08102010 <metal_list_del>:
{
	return list->next == list;
}

static inline void metal_list_del(struct metal_list *node)
{
 8102010:	b480      	push	{r7}
 8102012:	b083      	sub	sp, #12
 8102014:	af00      	add	r7, sp, #0
 8102016:	6078      	str	r0, [r7, #4]
	node->next->prev = node->prev;
 8102018:	687b      	ldr	r3, [r7, #4]
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	687a      	ldr	r2, [r7, #4]
 810201e:	6852      	ldr	r2, [r2, #4]
 8102020:	605a      	str	r2, [r3, #4]
	node->prev->next = node->next;
 8102022:	687b      	ldr	r3, [r7, #4]
 8102024:	685b      	ldr	r3, [r3, #4]
 8102026:	687a      	ldr	r2, [r7, #4]
 8102028:	6812      	ldr	r2, [r2, #0]
 810202a:	601a      	str	r2, [r3, #0]
	node->next = node->prev = node;
 810202c:	687b      	ldr	r3, [r7, #4]
 810202e:	687a      	ldr	r2, [r7, #4]
 8102030:	605a      	str	r2, [r3, #4]
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	685a      	ldr	r2, [r3, #4]
 8102036:	687b      	ldr	r3, [r7, #4]
 8102038:	601a      	str	r2, [r3, #0]
}
 810203a:	bf00      	nop
 810203c:	370c      	adds	r7, #12
 810203e:	46bd      	mov	sp, r7
 8102040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102044:	4770      	bx	lr

08102046 <metal_bitmap_set_bit>:
#define metal_bit(bit)		(1UL << (bit))

#define metal_bitmap_longs(x)	metal_div_round_up((x), METAL_BITS_PER_ULONG)

static inline void metal_bitmap_set_bit(unsigned long *bitmap, int bit)
{
 8102046:	b480      	push	{r7}
 8102048:	b083      	sub	sp, #12
 810204a:	af00      	add	r7, sp, #0
 810204c:	6078      	str	r0, [r7, #4]
 810204e:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8102050:	683b      	ldr	r3, [r7, #0]
 8102052:	095b      	lsrs	r3, r3, #5
 8102054:	009a      	lsls	r2, r3, #2
 8102056:	6879      	ldr	r1, [r7, #4]
 8102058:	440a      	add	r2, r1
 810205a:	6811      	ldr	r1, [r2, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 810205c:	683a      	ldr	r2, [r7, #0]
 810205e:	f002 021f 	and.w	r2, r2, #31
 8102062:	2001      	movs	r0, #1
 8102064:	fa00 f202 	lsl.w	r2, r0, r2
	bitmap[bit / METAL_BITS_PER_ULONG] |=
 8102068:	009b      	lsls	r3, r3, #2
 810206a:	6878      	ldr	r0, [r7, #4]
 810206c:	4403      	add	r3, r0
 810206e:	430a      	orrs	r2, r1
 8102070:	601a      	str	r2, [r3, #0]
}
 8102072:	bf00      	nop
 8102074:	370c      	adds	r7, #12
 8102076:	46bd      	mov	sp, r7
 8102078:	f85d 7b04 	ldr.w	r7, [sp], #4
 810207c:	4770      	bx	lr

0810207e <metal_bitmap_is_bit_set>:

static inline int metal_bitmap_is_bit_set(unsigned long *bitmap, int bit)
{
 810207e:	b480      	push	{r7}
 8102080:	b083      	sub	sp, #12
 8102082:	af00      	add	r7, sp, #0
 8102084:	6078      	str	r0, [r7, #4]
 8102086:	6039      	str	r1, [r7, #0]
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 8102088:	683b      	ldr	r3, [r7, #0]
 810208a:	095b      	lsrs	r3, r3, #5
 810208c:	009b      	lsls	r3, r3, #2
 810208e:	687a      	ldr	r2, [r7, #4]
 8102090:	4413      	add	r3, r2
 8102092:	681a      	ldr	r2, [r3, #0]
		metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 8102094:	683b      	ldr	r3, [r7, #0]
 8102096:	f003 031f 	and.w	r3, r3, #31
 810209a:	2101      	movs	r1, #1
 810209c:	fa01 f303 	lsl.w	r3, r1, r3
	return bitmap[bit / METAL_BITS_PER_ULONG] &
 81020a0:	4013      	ands	r3, r2
}
 81020a2:	4618      	mov	r0, r3
 81020a4:	370c      	adds	r7, #12
 81020a6:	46bd      	mov	sp, r7
 81020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ac:	4770      	bx	lr

081020ae <metal_bitmap_clear_bit>:

static inline void metal_bitmap_clear_bit(unsigned long *bitmap, int bit)
{
 81020ae:	b480      	push	{r7}
 81020b0:	b083      	sub	sp, #12
 81020b2:	af00      	add	r7, sp, #0
 81020b4:	6078      	str	r0, [r7, #4]
 81020b6:	6039      	str	r1, [r7, #0]
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 81020b8:	683b      	ldr	r3, [r7, #0]
 81020ba:	095b      	lsrs	r3, r3, #5
 81020bc:	009a      	lsls	r2, r3, #2
 81020be:	6879      	ldr	r1, [r7, #4]
 81020c0:	440a      	add	r2, r1
 81020c2:	6811      	ldr	r1, [r2, #0]
		~metal_bit(bit & (METAL_BITS_PER_ULONG - 1));
 81020c4:	683a      	ldr	r2, [r7, #0]
 81020c6:	f002 021f 	and.w	r2, r2, #31
 81020ca:	2001      	movs	r0, #1
 81020cc:	fa00 f202 	lsl.w	r2, r0, r2
 81020d0:	43d2      	mvns	r2, r2
	bitmap[bit / METAL_BITS_PER_ULONG] &=
 81020d2:	009b      	lsls	r3, r3, #2
 81020d4:	6878      	ldr	r0, [r7, #4]
 81020d6:	4403      	add	r3, r0
 81020d8:	400a      	ands	r2, r1
 81020da:	601a      	str	r2, [r3, #0]
}
 81020dc:	bf00      	nop
 81020de:	370c      	adds	r7, #12
 81020e0:	46bd      	mov	sp, r7
 81020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e6:	4770      	bx	lr

081020e8 <metal_bitmap_is_bit_clear>:

static inline int metal_bitmap_is_bit_clear(unsigned long *bitmap, int bit)
{
 81020e8:	b580      	push	{r7, lr}
 81020ea:	b082      	sub	sp, #8
 81020ec:	af00      	add	r7, sp, #0
 81020ee:	6078      	str	r0, [r7, #4]
 81020f0:	6039      	str	r1, [r7, #0]
	return !metal_bitmap_is_bit_set(bitmap, bit);
 81020f2:	6839      	ldr	r1, [r7, #0]
 81020f4:	6878      	ldr	r0, [r7, #4]
 81020f6:	f7ff ffc2 	bl	810207e <metal_bitmap_is_bit_set>
 81020fa:	4603      	mov	r3, r0
 81020fc:	2b00      	cmp	r3, #0
 81020fe:	bf0c      	ite	eq
 8102100:	2301      	moveq	r3, #1
 8102102:	2300      	movne	r3, #0
 8102104:	b2db      	uxtb	r3, r3
}
 8102106:	4618      	mov	r0, r3
 8102108:	3708      	adds	r7, #8
 810210a:	46bd      	mov	sp, r7
 810210c:	bd80      	pop	{r7, pc}

0810210e <metal_bitmap_next_clear_bit>:
	     (bit) = metal_bitmap_next_set_bit((bitmap), (bit), (max)))

static inline unsigned int
metal_bitmap_next_clear_bit(unsigned long *bitmap, unsigned int start,
			    unsigned int max)
{
 810210e:	b580      	push	{r7, lr}
 8102110:	b086      	sub	sp, #24
 8102112:	af00      	add	r7, sp, #0
 8102114:	60f8      	str	r0, [r7, #12]
 8102116:	60b9      	str	r1, [r7, #8]
 8102118:	607a      	str	r2, [r7, #4]
	unsigned int bit;
	for (bit = start;
 810211a:	68bb      	ldr	r3, [r7, #8]
 810211c:	617b      	str	r3, [r7, #20]
 810211e:	e002      	b.n	8102126 <metal_bitmap_next_clear_bit+0x18>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
	     bit ++)
 8102120:	697b      	ldr	r3, [r7, #20]
 8102122:	3301      	adds	r3, #1
 8102124:	617b      	str	r3, [r7, #20]
	for (bit = start;
 8102126:	697a      	ldr	r2, [r7, #20]
 8102128:	687b      	ldr	r3, [r7, #4]
 810212a:	429a      	cmp	r2, r3
 810212c:	d207      	bcs.n	810213e <metal_bitmap_next_clear_bit+0x30>
	     bit < max && !metal_bitmap_is_bit_clear(bitmap, bit);
 810212e:	697b      	ldr	r3, [r7, #20]
 8102130:	4619      	mov	r1, r3
 8102132:	68f8      	ldr	r0, [r7, #12]
 8102134:	f7ff ffd8 	bl	81020e8 <metal_bitmap_is_bit_clear>
 8102138:	4603      	mov	r3, r0
 810213a:	2b00      	cmp	r3, #0
 810213c:	d0f0      	beq.n	8102120 <metal_bitmap_next_clear_bit+0x12>
		;
	return bit;
 810213e:	697b      	ldr	r3, [r7, #20]
}
 8102140:	4618      	mov	r0, r3
 8102142:	3718      	adds	r7, #24
 8102144:	46bd      	mov	sp, r7
 8102146:	bd80      	pop	{r7, pc}

08102148 <rpmsg_init_ept>:
static inline void rpmsg_init_ept(struct rpmsg_endpoint *ept,
				  const char *name,
				  uint32_t src, uint32_t dest,
				  rpmsg_ept_cb cb,
				  rpmsg_ns_unbind_cb ns_unbind_cb)
{
 8102148:	b580      	push	{r7, lr}
 810214a:	b084      	sub	sp, #16
 810214c:	af00      	add	r7, sp, #0
 810214e:	60f8      	str	r0, [r7, #12]
 8102150:	60b9      	str	r1, [r7, #8]
 8102152:	607a      	str	r2, [r7, #4]
 8102154:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 8102156:	68fb      	ldr	r3, [r7, #12]
 8102158:	2220      	movs	r2, #32
 810215a:	68b9      	ldr	r1, [r7, #8]
 810215c:	4618      	mov	r0, r3
 810215e:	f001 ff99 	bl	8104094 <strncpy>
	ept->addr = src;
 8102162:	68fb      	ldr	r3, [r7, #12]
 8102164:	687a      	ldr	r2, [r7, #4]
 8102166:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 8102168:	68fb      	ldr	r3, [r7, #12]
 810216a:	683a      	ldr	r2, [r7, #0]
 810216c:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 810216e:	68fb      	ldr	r3, [r7, #12]
 8102170:	69ba      	ldr	r2, [r7, #24]
 8102172:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 8102174:	68fb      	ldr	r3, [r7, #12]
 8102176:	69fa      	ldr	r2, [r7, #28]
 8102178:	631a      	str	r2, [r3, #48]	; 0x30
}
 810217a:	bf00      	nop
 810217c:	3710      	adds	r7, #16
 810217e:	46bd      	mov	sp, r7
 8102180:	bd80      	pop	{r7, pc}

08102182 <rpmsg_get_address>:
 * @param size   - size of bitmap
 *
 * return - a unique address
 */
static uint32_t rpmsg_get_address(unsigned long *bitmap, int size)
{
 8102182:	b580      	push	{r7, lr}
 8102184:	b084      	sub	sp, #16
 8102186:	af00      	add	r7, sp, #0
 8102188:	6078      	str	r0, [r7, #4]
 810218a:	6039      	str	r1, [r7, #0]
	unsigned int addr = RPMSG_ADDR_ANY;
 810218c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8102190:	60fb      	str	r3, [r7, #12]
	unsigned int nextbit;

	nextbit = metal_bitmap_next_clear_bit(bitmap, 0, size);
 8102192:	683b      	ldr	r3, [r7, #0]
 8102194:	461a      	mov	r2, r3
 8102196:	2100      	movs	r1, #0
 8102198:	6878      	ldr	r0, [r7, #4]
 810219a:	f7ff ffb8 	bl	810210e <metal_bitmap_next_clear_bit>
 810219e:	60b8      	str	r0, [r7, #8]
	if (nextbit < (uint32_t)size) {
 81021a0:	683b      	ldr	r3, [r7, #0]
 81021a2:	68ba      	ldr	r2, [r7, #8]
 81021a4:	429a      	cmp	r2, r3
 81021a6:	d206      	bcs.n	81021b6 <rpmsg_get_address+0x34>
		addr = nextbit;
 81021a8:	68bb      	ldr	r3, [r7, #8]
 81021aa:	60fb      	str	r3, [r7, #12]
		metal_bitmap_set_bit(bitmap, nextbit);
 81021ac:	68bb      	ldr	r3, [r7, #8]
 81021ae:	4619      	mov	r1, r3
 81021b0:	6878      	ldr	r0, [r7, #4]
 81021b2:	f7ff ff48 	bl	8102046 <metal_bitmap_set_bit>
	}

	return addr;
 81021b6:	68fb      	ldr	r3, [r7, #12]
}
 81021b8:	4618      	mov	r0, r3
 81021ba:	3710      	adds	r7, #16
 81021bc:	46bd      	mov	sp, r7
 81021be:	bd80      	pop	{r7, pc}

081021c0 <rpmsg_release_address>:
 * @param size   - size of bitmap
 * @param addr   - address to free
 */
static void rpmsg_release_address(unsigned long *bitmap, int size,
				  int addr)
{
 81021c0:	b580      	push	{r7, lr}
 81021c2:	b084      	sub	sp, #16
 81021c4:	af00      	add	r7, sp, #0
 81021c6:	60f8      	str	r0, [r7, #12]
 81021c8:	60b9      	str	r1, [r7, #8]
 81021ca:	607a      	str	r2, [r7, #4]
	if (addr < size)
 81021cc:	687a      	ldr	r2, [r7, #4]
 81021ce:	68bb      	ldr	r3, [r7, #8]
 81021d0:	429a      	cmp	r2, r3
 81021d2:	da03      	bge.n	81021dc <rpmsg_release_address+0x1c>
		metal_bitmap_clear_bit(bitmap, addr);
 81021d4:	6879      	ldr	r1, [r7, #4]
 81021d6:	68f8      	ldr	r0, [r7, #12]
 81021d8:	f7ff ff69 	bl	81020ae <metal_bitmap_clear_bit>
}
 81021dc:	bf00      	nop
 81021de:	3710      	adds	r7, #16
 81021e0:	46bd      	mov	sp, r7
 81021e2:	bd80      	pop	{r7, pc}

081021e4 <rpmsg_is_address_set>:
 * @param addr   - address to free
 *
 * return - TRUE/FALSE
 */
static int rpmsg_is_address_set(unsigned long *bitmap, int size, int addr)
{
 81021e4:	b580      	push	{r7, lr}
 81021e6:	b084      	sub	sp, #16
 81021e8:	af00      	add	r7, sp, #0
 81021ea:	60f8      	str	r0, [r7, #12]
 81021ec:	60b9      	str	r1, [r7, #8]
 81021ee:	607a      	str	r2, [r7, #4]
	if (addr < size)
 81021f0:	687a      	ldr	r2, [r7, #4]
 81021f2:	68bb      	ldr	r3, [r7, #8]
 81021f4:	429a      	cmp	r2, r3
 81021f6:	da05      	bge.n	8102204 <rpmsg_is_address_set+0x20>
		return metal_bitmap_is_bit_set(bitmap, addr);
 81021f8:	6879      	ldr	r1, [r7, #4]
 81021fa:	68f8      	ldr	r0, [r7, #12]
 81021fc:	f7ff ff3f 	bl	810207e <metal_bitmap_is_bit_set>
 8102200:	4603      	mov	r3, r0
 8102202:	e000      	b.n	8102206 <rpmsg_is_address_set+0x22>
	else
		return RPMSG_ERR_PARAM;
 8102204:	4b02      	ldr	r3, [pc, #8]	; (8102210 <rpmsg_is_address_set+0x2c>)
}
 8102206:	4618      	mov	r0, r3
 8102208:	3710      	adds	r7, #16
 810220a:	46bd      	mov	sp, r7
 810220c:	bd80      	pop	{r7, pc}
 810220e:	bf00      	nop
 8102210:	fffff82d 	.word	0xfffff82d

08102214 <rpmsg_set_address>:
 * @param addr   - address to free
 *
 * return - none
 */
static int rpmsg_set_address(unsigned long *bitmap, int size, int addr)
{
 8102214:	b580      	push	{r7, lr}
 8102216:	b084      	sub	sp, #16
 8102218:	af00      	add	r7, sp, #0
 810221a:	60f8      	str	r0, [r7, #12]
 810221c:	60b9      	str	r1, [r7, #8]
 810221e:	607a      	str	r2, [r7, #4]
	if (addr < size) {
 8102220:	687a      	ldr	r2, [r7, #4]
 8102222:	68bb      	ldr	r3, [r7, #8]
 8102224:	429a      	cmp	r2, r3
 8102226:	da05      	bge.n	8102234 <rpmsg_set_address+0x20>
		metal_bitmap_set_bit(bitmap, addr);
 8102228:	6879      	ldr	r1, [r7, #4]
 810222a:	68f8      	ldr	r0, [r7, #12]
 810222c:	f7ff ff0b 	bl	8102046 <metal_bitmap_set_bit>
		return RPMSG_SUCCESS;
 8102230:	2300      	movs	r3, #0
 8102232:	e000      	b.n	8102236 <rpmsg_set_address+0x22>
	} else {
		return RPMSG_ERR_PARAM;
 8102234:	4b02      	ldr	r3, [pc, #8]	; (8102240 <rpmsg_set_address+0x2c>)
	}
}
 8102236:	4618      	mov	r0, r3
 8102238:	3710      	adds	r7, #16
 810223a:	46bd      	mov	sp, r7
 810223c:	bd80      	pop	{r7, pc}
 810223e:	bf00      	nop
 8102240:	fffff82d 	.word	0xfffff82d

08102244 <rpmsg_send_offchannel_raw>:
 *
 */
int rpmsg_send_offchannel_raw(struct rpmsg_endpoint *ept, uint32_t src,
			      uint32_t dst, const void *data, int size,
			      int wait)
{
 8102244:	b590      	push	{r4, r7, lr}
 8102246:	b089      	sub	sp, #36	; 0x24
 8102248:	af02      	add	r7, sp, #8
 810224a:	60f8      	str	r0, [r7, #12]
 810224c:	60b9      	str	r1, [r7, #8]
 810224e:	607a      	str	r2, [r7, #4]
 8102250:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev;

	if (!ept || !ept->rdev || !data || dst == RPMSG_ADDR_ANY)
 8102252:	68fb      	ldr	r3, [r7, #12]
 8102254:	2b00      	cmp	r3, #0
 8102256:	d00a      	beq.n	810226e <rpmsg_send_offchannel_raw+0x2a>
 8102258:	68fb      	ldr	r3, [r7, #12]
 810225a:	6a1b      	ldr	r3, [r3, #32]
 810225c:	2b00      	cmp	r3, #0
 810225e:	d006      	beq.n	810226e <rpmsg_send_offchannel_raw+0x2a>
 8102260:	683b      	ldr	r3, [r7, #0]
 8102262:	2b00      	cmp	r3, #0
 8102264:	d003      	beq.n	810226e <rpmsg_send_offchannel_raw+0x2a>
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810226c:	d101      	bne.n	8102272 <rpmsg_send_offchannel_raw+0x2e>
		return RPMSG_ERR_PARAM;
 810226e:	4b0d      	ldr	r3, [pc, #52]	; (81022a4 <rpmsg_send_offchannel_raw+0x60>)
 8102270:	e014      	b.n	810229c <rpmsg_send_offchannel_raw+0x58>

	rdev = ept->rdev;
 8102272:	68fb      	ldr	r3, [r7, #12]
 8102274:	6a1b      	ldr	r3, [r3, #32]
 8102276:	617b      	str	r3, [r7, #20]

	if (rdev->ops.send_offchannel_raw)
 8102278:	697b      	ldr	r3, [r7, #20]
 810227a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810227c:	2b00      	cmp	r3, #0
 810227e:	d00c      	beq.n	810229a <rpmsg_send_offchannel_raw+0x56>
		return rdev->ops.send_offchannel_raw(rdev, src, dst, data,
 8102280:	697b      	ldr	r3, [r7, #20]
 8102282:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8102284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102286:	9301      	str	r3, [sp, #4]
 8102288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810228a:	9300      	str	r3, [sp, #0]
 810228c:	683b      	ldr	r3, [r7, #0]
 810228e:	687a      	ldr	r2, [r7, #4]
 8102290:	68b9      	ldr	r1, [r7, #8]
 8102292:	6978      	ldr	r0, [r7, #20]
 8102294:	47a0      	blx	r4
 8102296:	4603      	mov	r3, r0
 8102298:	e000      	b.n	810229c <rpmsg_send_offchannel_raw+0x58>
						      size, wait);

	return RPMSG_ERR_PARAM;
 810229a:	4b02      	ldr	r3, [pc, #8]	; (81022a4 <rpmsg_send_offchannel_raw+0x60>)
}
 810229c:	4618      	mov	r0, r3
 810229e:	371c      	adds	r7, #28
 81022a0:	46bd      	mov	sp, r7
 81022a2:	bd90      	pop	{r4, r7, pc}
 81022a4:	fffff82d 	.word	0xfffff82d

081022a8 <rpmsg_send_ns_message>:

int rpmsg_send_ns_message(struct rpmsg_endpoint *ept, unsigned long flags)
{
 81022a8:	b580      	push	{r7, lr}
 81022aa:	b090      	sub	sp, #64	; 0x40
 81022ac:	af02      	add	r7, sp, #8
 81022ae:	6078      	str	r0, [r7, #4]
 81022b0:	6039      	str	r1, [r7, #0]
	struct rpmsg_ns_msg ns_msg;
	int ret;

	ns_msg.flags = flags;
 81022b2:	683b      	ldr	r3, [r7, #0]
 81022b4:	633b      	str	r3, [r7, #48]	; 0x30
	ns_msg.addr = ept->addr;
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	strncpy(ns_msg.name, ept->name, sizeof(ns_msg.name));
 81022bc:	6879      	ldr	r1, [r7, #4]
 81022be:	f107 030c 	add.w	r3, r7, #12
 81022c2:	2220      	movs	r2, #32
 81022c4:	4618      	mov	r0, r3
 81022c6:	f001 fee5 	bl	8104094 <strncpy>
	ret = rpmsg_send_offchannel_raw(ept, ept->addr,
 81022ca:	687b      	ldr	r3, [r7, #4]
 81022cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 81022ce:	f107 030c 	add.w	r3, r7, #12
 81022d2:	2201      	movs	r2, #1
 81022d4:	9201      	str	r2, [sp, #4]
 81022d6:	2228      	movs	r2, #40	; 0x28
 81022d8:	9200      	str	r2, [sp, #0]
 81022da:	2235      	movs	r2, #53	; 0x35
 81022dc:	6878      	ldr	r0, [r7, #4]
 81022de:	f7ff ffb1 	bl	8102244 <rpmsg_send_offchannel_raw>
 81022e2:	6378      	str	r0, [r7, #52]	; 0x34
					RPMSG_NS_EPT_ADDR,
					&ns_msg, sizeof(ns_msg), true);
	if (ret < 0)
 81022e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81022e6:	2b00      	cmp	r3, #0
 81022e8:	da01      	bge.n	81022ee <rpmsg_send_ns_message+0x46>
		return ret;
 81022ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81022ec:	e000      	b.n	81022f0 <rpmsg_send_ns_message+0x48>
	else
		return RPMSG_SUCCESS;
 81022ee:	2300      	movs	r3, #0
}
 81022f0:	4618      	mov	r0, r3
 81022f2:	3738      	adds	r7, #56	; 0x38
 81022f4:	46bd      	mov	sp, r7
 81022f6:	bd80      	pop	{r7, pc}

081022f8 <rpmsg_get_endpoint>:

struct rpmsg_endpoint *rpmsg_get_endpoint(struct rpmsg_device *rdev,
					  const char *name, uint32_t addr,
					  uint32_t dest_addr)
{
 81022f8:	b580      	push	{r7, lr}
 81022fa:	b088      	sub	sp, #32
 81022fc:	af00      	add	r7, sp, #0
 81022fe:	60f8      	str	r0, [r7, #12]
 8102300:	60b9      	str	r1, [r7, #8]
 8102302:	607a      	str	r2, [r7, #4]
 8102304:	603b      	str	r3, [r7, #0]
	struct metal_list *node;
	struct rpmsg_endpoint *ept;

	metal_list_for_each(&rdev->endpoints, node) {
 8102306:	68fb      	ldr	r3, [r7, #12]
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	61fb      	str	r3, [r7, #28]
 810230c:	e04b      	b.n	81023a6 <rpmsg_get_endpoint+0xae>
		int name_match = 0;
 810230e:	2300      	movs	r3, #0
 8102310:	61bb      	str	r3, [r7, #24]

		ept = metal_container_of(node, struct rpmsg_endpoint, node);
 8102312:	69fb      	ldr	r3, [r7, #28]
 8102314:	3b34      	subs	r3, #52	; 0x34
 8102316:	617b      	str	r3, [r7, #20]
		/* try to get by local address only */
		if (addr != RPMSG_ADDR_ANY && ept->addr == addr)
 8102318:	687b      	ldr	r3, [r7, #4]
 810231a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810231e:	d006      	beq.n	810232e <rpmsg_get_endpoint+0x36>
 8102320:	697b      	ldr	r3, [r7, #20]
 8102322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102324:	687a      	ldr	r2, [r7, #4]
 8102326:	429a      	cmp	r2, r3
 8102328:	d101      	bne.n	810232e <rpmsg_get_endpoint+0x36>
			return ept;
 810232a:	697b      	ldr	r3, [r7, #20]
 810232c:	e040      	b.n	81023b0 <rpmsg_get_endpoint+0xb8>
		/* try to find match on local end remote address */
		if (addr == ept->addr && dest_addr == ept->dest_addr)
 810232e:	697b      	ldr	r3, [r7, #20]
 8102330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102332:	687a      	ldr	r2, [r7, #4]
 8102334:	429a      	cmp	r2, r3
 8102336:	d106      	bne.n	8102346 <rpmsg_get_endpoint+0x4e>
 8102338:	697b      	ldr	r3, [r7, #20]
 810233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810233c:	683a      	ldr	r2, [r7, #0]
 810233e:	429a      	cmp	r2, r3
 8102340:	d101      	bne.n	8102346 <rpmsg_get_endpoint+0x4e>
			return ept;
 8102342:	697b      	ldr	r3, [r7, #20]
 8102344:	e034      	b.n	81023b0 <rpmsg_get_endpoint+0xb8>
		/* else use name service and destination address */
		if (name)
 8102346:	68bb      	ldr	r3, [r7, #8]
 8102348:	2b00      	cmp	r3, #0
 810234a:	d00c      	beq.n	8102366 <rpmsg_get_endpoint+0x6e>
			name_match = !strncmp(ept->name, name,
 810234c:	697b      	ldr	r3, [r7, #20]
 810234e:	2220      	movs	r2, #32
 8102350:	68b9      	ldr	r1, [r7, #8]
 8102352:	4618      	mov	r0, r3
 8102354:	f001 fe8a 	bl	810406c <strncmp>
 8102358:	4603      	mov	r3, r0
 810235a:	2b00      	cmp	r3, #0
 810235c:	bf0c      	ite	eq
 810235e:	2301      	moveq	r3, #1
 8102360:	2300      	movne	r3, #0
 8102362:	b2db      	uxtb	r3, r3
 8102364:	61bb      	str	r3, [r7, #24]
					      sizeof(ept->name));
		if (!name || !name_match)
 8102366:	68bb      	ldr	r3, [r7, #8]
 8102368:	2b00      	cmp	r3, #0
 810236a:	d018      	beq.n	810239e <rpmsg_get_endpoint+0xa6>
 810236c:	69bb      	ldr	r3, [r7, #24]
 810236e:	2b00      	cmp	r3, #0
 8102370:	d015      	beq.n	810239e <rpmsg_get_endpoint+0xa6>
			continue;
		/* destination address is known, equal to ept remote address*/
		if (dest_addr != RPMSG_ADDR_ANY && ept->dest_addr == dest_addr)
 8102372:	683b      	ldr	r3, [r7, #0]
 8102374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102378:	d006      	beq.n	8102388 <rpmsg_get_endpoint+0x90>
 810237a:	697b      	ldr	r3, [r7, #20]
 810237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810237e:	683a      	ldr	r2, [r7, #0]
 8102380:	429a      	cmp	r2, r3
 8102382:	d101      	bne.n	8102388 <rpmsg_get_endpoint+0x90>
			return ept;
 8102384:	697b      	ldr	r3, [r7, #20]
 8102386:	e013      	b.n	81023b0 <rpmsg_get_endpoint+0xb8>
		/* ept is registered but not associated to remote ept*/
		if (addr == RPMSG_ADDR_ANY && ept->dest_addr == RPMSG_ADDR_ANY)
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 810238e:	d107      	bne.n	81023a0 <rpmsg_get_endpoint+0xa8>
 8102390:	697b      	ldr	r3, [r7, #20]
 8102392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102398:	d102      	bne.n	81023a0 <rpmsg_get_endpoint+0xa8>
			return ept;
 810239a:	697b      	ldr	r3, [r7, #20]
 810239c:	e008      	b.n	81023b0 <rpmsg_get_endpoint+0xb8>
			continue;
 810239e:	bf00      	nop
	metal_list_for_each(&rdev->endpoints, node) {
 81023a0:	69fb      	ldr	r3, [r7, #28]
 81023a2:	681b      	ldr	r3, [r3, #0]
 81023a4:	61fb      	str	r3, [r7, #28]
 81023a6:	68fb      	ldr	r3, [r7, #12]
 81023a8:	69fa      	ldr	r2, [r7, #28]
 81023aa:	429a      	cmp	r2, r3
 81023ac:	d1af      	bne.n	810230e <rpmsg_get_endpoint+0x16>
	}
	return NULL;
 81023ae:	2300      	movs	r3, #0
}
 81023b0:	4618      	mov	r0, r3
 81023b2:	3720      	adds	r7, #32
 81023b4:	46bd      	mov	sp, r7
 81023b6:	bd80      	pop	{r7, pc}

081023b8 <rpmsg_unregister_endpoint>:

static void rpmsg_unregister_endpoint(struct rpmsg_endpoint *ept)
{
 81023b8:	b580      	push	{r7, lr}
 81023ba:	b084      	sub	sp, #16
 81023bc:	af00      	add	r7, sp, #0
 81023be:	6078      	str	r0, [r7, #4]
	struct rpmsg_device *rdev;

	if (!ept)
 81023c0:	687b      	ldr	r3, [r7, #4]
 81023c2:	2b00      	cmp	r3, #0
 81023c4:	d016      	beq.n	81023f4 <rpmsg_unregister_endpoint+0x3c>
		return;

	rdev = ept->rdev;
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	6a1b      	ldr	r3, [r3, #32]
 81023ca:	60fb      	str	r3, [r7, #12]

	if (ept->addr != RPMSG_ADDR_ANY)
 81023cc:	687b      	ldr	r3, [r7, #4]
 81023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81023d4:	d008      	beq.n	81023e8 <rpmsg_unregister_endpoint+0x30>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 81023d6:	68fb      	ldr	r3, [r7, #12]
 81023d8:	f103 0048 	add.w	r0, r3, #72	; 0x48
				      ept->addr);
 81023dc:	687b      	ldr	r3, [r7, #4]
 81023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 81023e0:	461a      	mov	r2, r3
 81023e2:	2180      	movs	r1, #128	; 0x80
 81023e4:	f7ff feec 	bl	81021c0 <rpmsg_release_address>
	metal_list_del(&ept->node);
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	3334      	adds	r3, #52	; 0x34
 81023ec:	4618      	mov	r0, r3
 81023ee:	f7ff fe0f 	bl	8102010 <metal_list_del>
 81023f2:	e000      	b.n	81023f6 <rpmsg_unregister_endpoint+0x3e>
		return;
 81023f4:	bf00      	nop
}
 81023f6:	3710      	adds	r7, #16
 81023f8:	46bd      	mov	sp, r7
 81023fa:	bd80      	pop	{r7, pc}

081023fc <rpmsg_register_endpoint>:

int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept)
{
 81023fc:	b580      	push	{r7, lr}
 81023fe:	b082      	sub	sp, #8
 8102400:	af00      	add	r7, sp, #0
 8102402:	6078      	str	r0, [r7, #4]
 8102404:	6039      	str	r1, [r7, #0]
	ept->rdev = rdev;
 8102406:	683b      	ldr	r3, [r7, #0]
 8102408:	687a      	ldr	r2, [r7, #4]
 810240a:	621a      	str	r2, [r3, #32]

	metal_list_add_tail(&rdev->endpoints, &ept->node);
 810240c:	687a      	ldr	r2, [r7, #4]
 810240e:	683b      	ldr	r3, [r7, #0]
 8102410:	3334      	adds	r3, #52	; 0x34
 8102412:	4619      	mov	r1, r3
 8102414:	4610      	mov	r0, r2
 8102416:	f7ff fdee 	bl	8101ff6 <metal_list_add_tail>
	return RPMSG_SUCCESS;
 810241a:	2300      	movs	r3, #0
}
 810241c:	4618      	mov	r0, r3
 810241e:	3708      	adds	r7, #8
 8102420:	46bd      	mov	sp, r7
 8102422:	bd80      	pop	{r7, pc}

08102424 <rpmsg_create_ept>:

int rpmsg_create_ept(struct rpmsg_endpoint *ept, struct rpmsg_device *rdev,
		     const char *name, uint32_t src, uint32_t dest,
		     rpmsg_ept_cb cb, rpmsg_ns_unbind_cb unbind_cb)
{
 8102424:	b580      	push	{r7, lr}
 8102426:	b088      	sub	sp, #32
 8102428:	af02      	add	r7, sp, #8
 810242a:	60f8      	str	r0, [r7, #12]
 810242c:	60b9      	str	r1, [r7, #8]
 810242e:	607a      	str	r2, [r7, #4]
 8102430:	603b      	str	r3, [r7, #0]
	int status;
	uint32_t addr = src;
 8102432:	683b      	ldr	r3, [r7, #0]
 8102434:	613b      	str	r3, [r7, #16]

	if (!ept)
 8102436:	68fb      	ldr	r3, [r7, #12]
 8102438:	2b00      	cmp	r3, #0
 810243a:	d101      	bne.n	8102440 <rpmsg_create_ept+0x1c>
		return RPMSG_ERR_PARAM;
 810243c:	4b37      	ldr	r3, [pc, #220]	; (810251c <rpmsg_create_ept+0xf8>)
 810243e:	e068      	b.n	8102512 <rpmsg_create_ept+0xee>

	metal_mutex_acquire(&rdev->lock);
 8102440:	68bb      	ldr	r3, [r7, #8]
 8102442:	3358      	adds	r3, #88	; 0x58
 8102444:	4618      	mov	r0, r3
 8102446:	f7ff fda6 	bl	8101f96 <metal_mutex_acquire>
	if (src != RPMSG_ADDR_ANY) {
 810244a:	683b      	ldr	r3, [r7, #0]
 810244c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102450:	d018      	beq.n	8102484 <rpmsg_create_ept+0x60>
		status = rpmsg_is_address_set(rdev->bitmap,
 8102452:	68bb      	ldr	r3, [r7, #8]
 8102454:	3348      	adds	r3, #72	; 0x48
 8102456:	683a      	ldr	r2, [r7, #0]
 8102458:	2180      	movs	r1, #128	; 0x80
 810245a:	4618      	mov	r0, r3
 810245c:	f7ff fec2 	bl	81021e4 <rpmsg_is_address_set>
 8102460:	6178      	str	r0, [r7, #20]
					      RPMSG_ADDR_BMP_SIZE, src);
		if (!status) {
 8102462:	697b      	ldr	r3, [r7, #20]
 8102464:	2b00      	cmp	r3, #0
 8102466:	d107      	bne.n	8102478 <rpmsg_create_ept+0x54>
			/* Mark the address as used in the address bitmap. */
			rpmsg_set_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE,
 8102468:	68bb      	ldr	r3, [r7, #8]
 810246a:	3348      	adds	r3, #72	; 0x48
 810246c:	683a      	ldr	r2, [r7, #0]
 810246e:	2180      	movs	r1, #128	; 0x80
 8102470:	4618      	mov	r0, r3
 8102472:	f7ff fecf 	bl	8102214 <rpmsg_set_address>
 8102476:	e00c      	b.n	8102492 <rpmsg_create_ept+0x6e>
					  src);
		} else if (status > 0) {
 8102478:	697b      	ldr	r3, [r7, #20]
 810247a:	2b00      	cmp	r3, #0
 810247c:	dd40      	ble.n	8102500 <rpmsg_create_ept+0xdc>
			status = RPMSG_SUCCESS;
 810247e:	2300      	movs	r3, #0
 8102480:	617b      	str	r3, [r7, #20]
			goto ret_status;
 8102482:	e040      	b.n	8102506 <rpmsg_create_ept+0xe2>
		} else {
			goto ret_status;
		}
	} else {
		addr = rpmsg_get_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE);
 8102484:	68bb      	ldr	r3, [r7, #8]
 8102486:	3348      	adds	r3, #72	; 0x48
 8102488:	2180      	movs	r1, #128	; 0x80
 810248a:	4618      	mov	r0, r3
 810248c:	f7ff fe79 	bl	8102182 <rpmsg_get_address>
 8102490:	6138      	str	r0, [r7, #16]
	}

	rpmsg_init_ept(ept, name, addr, dest, cb, unbind_cb);
 8102492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102494:	9301      	str	r3, [sp, #4]
 8102496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102498:	9300      	str	r3, [sp, #0]
 810249a:	6a3b      	ldr	r3, [r7, #32]
 810249c:	693a      	ldr	r2, [r7, #16]
 810249e:	6879      	ldr	r1, [r7, #4]
 81024a0:	68f8      	ldr	r0, [r7, #12]
 81024a2:	f7ff fe51 	bl	8102148 <rpmsg_init_ept>

	status = rpmsg_register_endpoint(rdev, ept);
 81024a6:	68f9      	ldr	r1, [r7, #12]
 81024a8:	68b8      	ldr	r0, [r7, #8]
 81024aa:	f7ff ffa7 	bl	81023fc <rpmsg_register_endpoint>
 81024ae:	6178      	str	r0, [r7, #20]
	if (status < 0)
 81024b0:	697b      	ldr	r3, [r7, #20]
 81024b2:	2b00      	cmp	r3, #0
 81024b4:	da06      	bge.n	81024c4 <rpmsg_create_ept+0xa0>
		rpmsg_release_address(rdev->bitmap, RPMSG_ADDR_BMP_SIZE, addr);
 81024b6:	68bb      	ldr	r3, [r7, #8]
 81024b8:	3348      	adds	r3, #72	; 0x48
 81024ba:	693a      	ldr	r2, [r7, #16]
 81024bc:	2180      	movs	r1, #128	; 0x80
 81024be:	4618      	mov	r0, r3
 81024c0:	f7ff fe7e 	bl	81021c0 <rpmsg_release_address>

	if (!status  && ept->dest_addr == RPMSG_ADDR_ANY) {
 81024c4:	697b      	ldr	r3, [r7, #20]
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	d11c      	bne.n	8102504 <rpmsg_create_ept+0xe0>
 81024ca:	68fb      	ldr	r3, [r7, #12]
 81024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81024ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 81024d2:	d117      	bne.n	8102504 <rpmsg_create_ept+0xe0>
		/* Send NS announcement to remote processor */
		metal_mutex_release(&rdev->lock);
 81024d4:	68bb      	ldr	r3, [r7, #8]
 81024d6:	3358      	adds	r3, #88	; 0x58
 81024d8:	4618      	mov	r0, r3
 81024da:	f7ff fd67 	bl	8101fac <metal_mutex_release>
		status = rpmsg_send_ns_message(ept, RPMSG_NS_CREATE);
 81024de:	2100      	movs	r1, #0
 81024e0:	68f8      	ldr	r0, [r7, #12]
 81024e2:	f7ff fee1 	bl	81022a8 <rpmsg_send_ns_message>
 81024e6:	6178      	str	r0, [r7, #20]
		metal_mutex_acquire(&rdev->lock);
 81024e8:	68bb      	ldr	r3, [r7, #8]
 81024ea:	3358      	adds	r3, #88	; 0x58
 81024ec:	4618      	mov	r0, r3
 81024ee:	f7ff fd52 	bl	8101f96 <metal_mutex_acquire>
		if (status)
 81024f2:	697b      	ldr	r3, [r7, #20]
 81024f4:	2b00      	cmp	r3, #0
 81024f6:	d005      	beq.n	8102504 <rpmsg_create_ept+0xe0>
			rpmsg_unregister_endpoint(ept);
 81024f8:	68f8      	ldr	r0, [r7, #12]
 81024fa:	f7ff ff5d 	bl	81023b8 <rpmsg_unregister_endpoint>
 81024fe:	e002      	b.n	8102506 <rpmsg_create_ept+0xe2>
			goto ret_status;
 8102500:	bf00      	nop
 8102502:	e000      	b.n	8102506 <rpmsg_create_ept+0xe2>
	}

ret_status:
 8102504:	bf00      	nop
	metal_mutex_release(&rdev->lock);
 8102506:	68bb      	ldr	r3, [r7, #8]
 8102508:	3358      	adds	r3, #88	; 0x58
 810250a:	4618      	mov	r0, r3
 810250c:	f7ff fd4e 	bl	8101fac <metal_mutex_release>
	return status;
 8102510:	697b      	ldr	r3, [r7, #20]
}
 8102512:	4618      	mov	r0, r3
 8102514:	3718      	adds	r7, #24
 8102516:	46bd      	mov	sp, r7
 8102518:	bd80      	pop	{r7, pc}
 810251a:	bf00      	nop
 810251c:	fffff82d 	.word	0xfffff82d

08102520 <__metal_cache_invalidate>:
{
 8102520:	b580      	push	{r7, lr}
 8102522:	b082      	sub	sp, #8
 8102524:	af00      	add	r7, sp, #0
 8102526:	6078      	str	r0, [r7, #4]
 8102528:	6039      	str	r1, [r7, #0]
	metal_machine_cache_invalidate(addr, len);
 810252a:	6839      	ldr	r1, [r7, #0]
 810252c:	6878      	ldr	r0, [r7, #4]
 810252e:	f000 fc56 	bl	8102dde <metal_machine_cache_invalidate>
}
 8102532:	bf00      	nop
 8102534:	3708      	adds	r7, #8
 8102536:	46bd      	mov	sp, r7
 8102538:	bd80      	pop	{r7, pc}

0810253a <metal_cache_invalidate>:
{
 810253a:	b580      	push	{r7, lr}
 810253c:	b082      	sub	sp, #8
 810253e:	af00      	add	r7, sp, #0
 8102540:	6078      	str	r0, [r7, #4]
 8102542:	6039      	str	r1, [r7, #0]
	__metal_cache_invalidate(addr, len);
 8102544:	6839      	ldr	r1, [r7, #0]
 8102546:	6878      	ldr	r0, [r7, #4]
 8102548:	f7ff ffea 	bl	8102520 <__metal_cache_invalidate>
}
 810254c:	bf00      	nop
 810254e:	3708      	adds	r7, #8
 8102550:	46bd      	mov	sp, r7
 8102552:	bd80      	pop	{r7, pc}

08102554 <__metal_sleep_usec>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int __metal_sleep_usec(unsigned int usec)
{
 8102554:	b480      	push	{r7}
 8102556:	b083      	sub	sp, #12
 8102558:	af00      	add	r7, sp, #0
 810255a:	6078      	str	r0, [r7, #4]
	metal_unused(usec);
	/* Fix me */
	return 0;
 810255c:	2300      	movs	r3, #0
}
 810255e:	4618      	mov	r0, r3
 8102560:	370c      	adds	r7, #12
 8102562:	46bd      	mov	sp, r7
 8102564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102568:	4770      	bx	lr

0810256a <metal_sleep_usec>:
 *
 * @param[in]  usec      microsecond intervals
 * @return     0 on success, non-zero for failures
 */
static inline int metal_sleep_usec(unsigned int usec)
{
 810256a:	b580      	push	{r7, lr}
 810256c:	b082      	sub	sp, #8
 810256e:	af00      	add	r7, sp, #0
 8102570:	6078      	str	r0, [r7, #4]
	return __metal_sleep_usec(usec);
 8102572:	6878      	ldr	r0, [r7, #4]
 8102574:	f7ff ffee 	bl	8102554 <__metal_sleep_usec>
 8102578:	4603      	mov	r3, r0
}
 810257a:	4618      	mov	r0, r3
 810257c:	3708      	adds	r7, #8
 810257e:	46bd      	mov	sp, r7
 8102580:	bd80      	pop	{r7, pc}

08102582 <metal_list_init>:
{
 8102582:	b480      	push	{r7}
 8102584:	b083      	sub	sp, #12
 8102586:	af00      	add	r7, sp, #0
 8102588:	6078      	str	r0, [r7, #4]
	list->next = list->prev = list;
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	687a      	ldr	r2, [r7, #4]
 810258e:	605a      	str	r2, [r3, #4]
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	685a      	ldr	r2, [r3, #4]
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	601a      	str	r2, [r3, #0]
}
 8102598:	bf00      	nop
 810259a:	370c      	adds	r7, #12
 810259c:	46bd      	mov	sp, r7
 810259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a2:	4770      	bx	lr

081025a4 <metal_io_virt_to_offset>:
{
 81025a4:	b480      	push	{r7}
 81025a6:	b085      	sub	sp, #20
 81025a8:	af00      	add	r7, sp, #0
 81025aa:	6078      	str	r0, [r7, #4]
 81025ac:	6039      	str	r1, [r7, #0]
	size_t offset = (uint8_t *)virt - (uint8_t *)io->virt;
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	681b      	ldr	r3, [r3, #0]
 81025b2:	683a      	ldr	r2, [r7, #0]
 81025b4:	1ad3      	subs	r3, r2, r3
 81025b6:	60fb      	str	r3, [r7, #12]
	return (offset < io->size ? offset : METAL_BAD_OFFSET);
 81025b8:	687b      	ldr	r3, [r7, #4]
 81025ba:	689b      	ldr	r3, [r3, #8]
 81025bc:	68fa      	ldr	r2, [r7, #12]
 81025be:	429a      	cmp	r2, r3
 81025c0:	d201      	bcs.n	81025c6 <metal_io_virt_to_offset+0x22>
 81025c2:	68fb      	ldr	r3, [r7, #12]
 81025c4:	e001      	b.n	81025ca <metal_io_virt_to_offset+0x26>
 81025c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 81025ca:	4618      	mov	r0, r3
 81025cc:	3714      	adds	r7, #20
 81025ce:	46bd      	mov	sp, r7
 81025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d4:	4770      	bx	lr

081025d6 <__metal_mutex_init>:
{
 81025d6:	b480      	push	{r7}
 81025d8:	b085      	sub	sp, #20
 81025da:	af00      	add	r7, sp, #0
 81025dc:	6078      	str	r0, [r7, #4]
	atomic_store(&mutex->v, 0);
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	60fb      	str	r3, [r7, #12]
 81025e2:	2300      	movs	r3, #0
 81025e4:	60bb      	str	r3, [r7, #8]
 81025e6:	68bb      	ldr	r3, [r7, #8]
 81025e8:	461a      	mov	r2, r3
 81025ea:	68fb      	ldr	r3, [r7, #12]
 81025ec:	f3bf 8f5b 	dmb	ish
 81025f0:	601a      	str	r2, [r3, #0]
 81025f2:	f3bf 8f5b 	dmb	ish
}
 81025f6:	bf00      	nop
 81025f8:	3714      	adds	r7, #20
 81025fa:	46bd      	mov	sp, r7
 81025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102600:	4770      	bx	lr

08102602 <__metal_mutex_acquire>:
{
 8102602:	b480      	push	{r7}
 8102604:	b083      	sub	sp, #12
 8102606:	af00      	add	r7, sp, #0
 8102608:	6078      	str	r0, [r7, #4]
	while (atomic_flag_test_and_set(&mutex->w)) {
 810260a:	bf00      	nop
 810260c:	687b      	ldr	r3, [r7, #4]
 810260e:	2201      	movs	r2, #1
 8102610:	4611      	mov	r1, r2
 8102612:	f3bf 8f5b 	dmb	ish
 8102616:	e8d3 2f4f 	ldrexb	r2, [r3]
 810261a:	e8c3 1f40 	strexb	r0, r1, [r3]
 810261e:	2800      	cmp	r0, #0
 8102620:	d1f9      	bne.n	8102616 <__metal_mutex_acquire+0x14>
 8102622:	f3bf 8f5b 	dmb	ish
 8102626:	b2d3      	uxtb	r3, r2
 8102628:	2b00      	cmp	r3, #0
 810262a:	d1ef      	bne.n	810260c <__metal_mutex_acquire+0xa>
}
 810262c:	bf00      	nop
 810262e:	bf00      	nop
 8102630:	370c      	adds	r7, #12
 8102632:	46bd      	mov	sp, r7
 8102634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102638:	4770      	bx	lr

0810263a <__metal_mutex_release>:
{
 810263a:	b480      	push	{r7}
 810263c:	b083      	sub	sp, #12
 810263e:	af00      	add	r7, sp, #0
 8102640:	6078      	str	r0, [r7, #4]
	atomic_flag_clear(&mutex->w);
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	f3bf 8f5b 	dmb	ish
 8102648:	2200      	movs	r2, #0
 810264a:	701a      	strb	r2, [r3, #0]
 810264c:	f3bf 8f5b 	dmb	ish
}
 8102650:	bf00      	nop
 8102652:	370c      	adds	r7, #12
 8102654:	46bd      	mov	sp, r7
 8102656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810265a:	4770      	bx	lr

0810265c <metal_mutex_init>:
{
 810265c:	b580      	push	{r7, lr}
 810265e:	b082      	sub	sp, #8
 8102660:	af00      	add	r7, sp, #0
 8102662:	6078      	str	r0, [r7, #4]
	__metal_mutex_init(mutex);
 8102664:	6878      	ldr	r0, [r7, #4]
 8102666:	f7ff ffb6 	bl	81025d6 <__metal_mutex_init>
}
 810266a:	bf00      	nop
 810266c:	3708      	adds	r7, #8
 810266e:	46bd      	mov	sp, r7
 8102670:	bd80      	pop	{r7, pc}

08102672 <metal_mutex_acquire>:
{
 8102672:	b580      	push	{r7, lr}
 8102674:	b082      	sub	sp, #8
 8102676:	af00      	add	r7, sp, #0
 8102678:	6078      	str	r0, [r7, #4]
	__metal_mutex_acquire(mutex);
 810267a:	6878      	ldr	r0, [r7, #4]
 810267c:	f7ff ffc1 	bl	8102602 <__metal_mutex_acquire>
}
 8102680:	bf00      	nop
 8102682:	3708      	adds	r7, #8
 8102684:	46bd      	mov	sp, r7
 8102686:	bd80      	pop	{r7, pc}

08102688 <metal_mutex_release>:
{
 8102688:	b580      	push	{r7, lr}
 810268a:	b082      	sub	sp, #8
 810268c:	af00      	add	r7, sp, #0
 810268e:	6078      	str	r0, [r7, #4]
	__metal_mutex_release(mutex);
 8102690:	6878      	ldr	r0, [r7, #4]
 8102692:	f7ff ffd2 	bl	810263a <__metal_mutex_release>
}
 8102696:	bf00      	nop
 8102698:	3708      	adds	r7, #8
 810269a:	46bd      	mov	sp, r7
 810269c:	bd80      	pop	{r7, pc}

0810269e <rpmsg_init_ept>:
{
 810269e:	b580      	push	{r7, lr}
 81026a0:	b084      	sub	sp, #16
 81026a2:	af00      	add	r7, sp, #0
 81026a4:	60f8      	str	r0, [r7, #12]
 81026a6:	60b9      	str	r1, [r7, #8]
 81026a8:	607a      	str	r2, [r7, #4]
 81026aa:	603b      	str	r3, [r7, #0]
	strncpy(ept->name, name, sizeof(ept->name));
 81026ac:	68fb      	ldr	r3, [r7, #12]
 81026ae:	2220      	movs	r2, #32
 81026b0:	68b9      	ldr	r1, [r7, #8]
 81026b2:	4618      	mov	r0, r3
 81026b4:	f001 fcee 	bl	8104094 <strncpy>
	ept->addr = src;
 81026b8:	68fb      	ldr	r3, [r7, #12]
 81026ba:	687a      	ldr	r2, [r7, #4]
 81026bc:	625a      	str	r2, [r3, #36]	; 0x24
	ept->dest_addr = dest;
 81026be:	68fb      	ldr	r3, [r7, #12]
 81026c0:	683a      	ldr	r2, [r7, #0]
 81026c2:	629a      	str	r2, [r3, #40]	; 0x28
	ept->cb = cb;
 81026c4:	68fb      	ldr	r3, [r7, #12]
 81026c6:	69ba      	ldr	r2, [r7, #24]
 81026c8:	62da      	str	r2, [r3, #44]	; 0x2c
	ept->ns_unbind_cb = ns_unbind_cb;
 81026ca:	68fb      	ldr	r3, [r7, #12]
 81026cc:	69fa      	ldr	r2, [r7, #28]
 81026ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 81026d0:	bf00      	nop
 81026d2:	3710      	adds	r7, #16
 81026d4:	46bd      	mov	sp, r7
 81026d6:	bd80      	pop	{r7, pc}

081026d8 <rpmsg_virtio_get_role>:

#define RPMSG_REMOTE	VIRTIO_DEV_SLAVE
#define RPMSG_MASTER	VIRTIO_DEV_MASTER
static inline unsigned int
	rpmsg_virtio_get_role(struct rpmsg_virtio_device *rvdev)
{
 81026d8:	b480      	push	{r7}
 81026da:	b083      	sub	sp, #12
 81026dc:	af00      	add	r7, sp, #0
 81026de:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->role;
 81026e0:	687b      	ldr	r3, [r7, #4]
 81026e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81026e4:	699b      	ldr	r3, [r3, #24]
}
 81026e6:	4618      	mov	r0, r3
 81026e8:	370c      	adds	r7, #12
 81026ea:	46bd      	mov	sp, r7
 81026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026f0:	4770      	bx	lr

081026f2 <rpmsg_virtio_set_status>:

static inline void rpmsg_virtio_set_status(struct rpmsg_virtio_device *rvdev,
					   uint8_t status)
{
 81026f2:	b580      	push	{r7, lr}
 81026f4:	b082      	sub	sp, #8
 81026f6:	af00      	add	r7, sp, #0
 81026f8:	6078      	str	r0, [r7, #4]
 81026fa:	460b      	mov	r3, r1
 81026fc:	70fb      	strb	r3, [r7, #3]
	rvdev->vdev->func->set_status(rvdev->vdev, status);
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102702:	6a1b      	ldr	r3, [r3, #32]
 8102704:	685b      	ldr	r3, [r3, #4]
 8102706:	687a      	ldr	r2, [r7, #4]
 8102708:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810270a:	78f9      	ldrb	r1, [r7, #3]
 810270c:	4610      	mov	r0, r2
 810270e:	4798      	blx	r3
}
 8102710:	bf00      	nop
 8102712:	3708      	adds	r7, #8
 8102714:	46bd      	mov	sp, r7
 8102716:	bd80      	pop	{r7, pc}

08102718 <rpmsg_virtio_get_status>:

static inline uint8_t rpmsg_virtio_get_status(struct rpmsg_virtio_device *rvdev)
{
 8102718:	b580      	push	{r7, lr}
 810271a:	b082      	sub	sp, #8
 810271c:	af00      	add	r7, sp, #0
 810271e:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_status(rvdev->vdev);
 8102720:	687b      	ldr	r3, [r7, #4]
 8102722:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102724:	6a1b      	ldr	r3, [r3, #32]
 8102726:	681b      	ldr	r3, [r3, #0]
 8102728:	687a      	ldr	r2, [r7, #4]
 810272a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810272c:	4610      	mov	r0, r2
 810272e:	4798      	blx	r3
 8102730:	4603      	mov	r3, r0
}
 8102732:	4618      	mov	r0, r3
 8102734:	3708      	adds	r7, #8
 8102736:	46bd      	mov	sp, r7
 8102738:	bd80      	pop	{r7, pc}

0810273a <rpmsg_virtio_get_features>:

static inline uint32_t
	rpmsg_virtio_get_features(struct rpmsg_virtio_device *rvdev)
{
 810273a:	b580      	push	{r7, lr}
 810273c:	b082      	sub	sp, #8
 810273e:	af00      	add	r7, sp, #0
 8102740:	6078      	str	r0, [r7, #4]
	return rvdev->vdev->func->get_features(rvdev->vdev);
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102746:	6a1b      	ldr	r3, [r3, #32]
 8102748:	689b      	ldr	r3, [r3, #8]
 810274a:	687a      	ldr	r2, [r7, #4]
 810274c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 810274e:	4610      	mov	r0, r2
 8102750:	4798      	blx	r3
 8102752:	4603      	mov	r3, r0
}
 8102754:	4618      	mov	r0, r3
 8102756:	3708      	adds	r7, #8
 8102758:	46bd      	mov	sp, r7
 810275a:	bd80      	pop	{r7, pc}

0810275c <rpmsg_virtio_create_virtqueues>:
static inline int
	rpmsg_virtio_create_virtqueues(struct rpmsg_virtio_device *rvdev,
				       int flags, unsigned int nvqs,
				       const char *names[],
				       vq_callback * callbacks[])
{
 810275c:	b580      	push	{r7, lr}
 810275e:	b086      	sub	sp, #24
 8102760:	af02      	add	r7, sp, #8
 8102762:	60f8      	str	r0, [r7, #12]
 8102764:	60b9      	str	r1, [r7, #8]
 8102766:	607a      	str	r2, [r7, #4]
 8102768:	603b      	str	r3, [r7, #0]
	return virtio_create_virtqueues(rvdev->vdev, flags, nvqs, names,
 810276a:	68fb      	ldr	r3, [r7, #12]
 810276c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 810276e:	68b9      	ldr	r1, [r7, #8]
 8102770:	69bb      	ldr	r3, [r7, #24]
 8102772:	9300      	str	r3, [sp, #0]
 8102774:	683b      	ldr	r3, [r7, #0]
 8102776:	687a      	ldr	r2, [r7, #4]
 8102778:	f000 fb4a 	bl	8102e10 <virtio_create_virtqueues>
 810277c:	4603      	mov	r3, r0
					callbacks);
}
 810277e:	4618      	mov	r0, r3
 8102780:	3710      	adds	r7, #16
 8102782:	46bd      	mov	sp, r7
 8102784:	bd80      	pop	{r7, pc}

08102786 <rpmsg_get_ept_from_addr>:
int rpmsg_register_endpoint(struct rpmsg_device *rdev,
			    struct rpmsg_endpoint *ept);

static inline struct rpmsg_endpoint *
rpmsg_get_ept_from_addr(struct rpmsg_device *rdev, uint32_t addr)
{
 8102786:	b580      	push	{r7, lr}
 8102788:	b082      	sub	sp, #8
 810278a:	af00      	add	r7, sp, #0
 810278c:	6078      	str	r0, [r7, #4]
 810278e:	6039      	str	r1, [r7, #0]
	return rpmsg_get_endpoint(rdev, NULL, addr, RPMSG_ADDR_ANY);
 8102790:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8102794:	683a      	ldr	r2, [r7, #0]
 8102796:	2100      	movs	r1, #0
 8102798:	6878      	ldr	r0, [r7, #4]
 810279a:	f7ff fdad 	bl	81022f8 <rpmsg_get_endpoint>
 810279e:	4603      	mov	r3, r0
}
 81027a0:	4618      	mov	r0, r3
 81027a2:	3708      	adds	r7, #8
 81027a4:	46bd      	mov	sp, r7
 81027a6:	bd80      	pop	{r7, pc}

081027a8 <rpmsg_virtio_init_shm_pool>:
}
#endif /*!VIRTIO_SLAVE_ONLY*/

void rpmsg_virtio_init_shm_pool(struct rpmsg_virtio_shm_pool *shpool,
				void *shb, size_t size)
{
 81027a8:	b480      	push	{r7}
 81027aa:	b085      	sub	sp, #20
 81027ac:	af00      	add	r7, sp, #0
 81027ae:	60f8      	str	r0, [r7, #12]
 81027b0:	60b9      	str	r1, [r7, #8]
 81027b2:	607a      	str	r2, [r7, #4]
	if (!shpool)
 81027b4:	68fb      	ldr	r3, [r7, #12]
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	d01d      	beq.n	81027f6 <rpmsg_virtio_init_shm_pool+0x4e>
		return;
	shpool->base = shb;
 81027ba:	68fb      	ldr	r3, [r7, #12]
 81027bc:	68ba      	ldr	r2, [r7, #8]
 81027be:	601a      	str	r2, [r3, #0]
	shpool->size = WORD_ALIGN(size);
 81027c0:	687b      	ldr	r3, [r7, #4]
 81027c2:	f003 0303 	and.w	r3, r3, #3
 81027c6:	2b00      	cmp	r3, #0
 81027c8:	d004      	beq.n	81027d4 <rpmsg_virtio_init_shm_pool+0x2c>
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	f023 0303 	bic.w	r3, r3, #3
 81027d0:	3304      	adds	r3, #4
 81027d2:	e000      	b.n	81027d6 <rpmsg_virtio_init_shm_pool+0x2e>
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	68fa      	ldr	r2, [r7, #12]
 81027d8:	6093      	str	r3, [r2, #8]
	shpool->avail = WORD_ALIGN(size);
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	f003 0303 	and.w	r3, r3, #3
 81027e0:	2b00      	cmp	r3, #0
 81027e2:	d004      	beq.n	81027ee <rpmsg_virtio_init_shm_pool+0x46>
 81027e4:	687b      	ldr	r3, [r7, #4]
 81027e6:	f023 0303 	bic.w	r3, r3, #3
 81027ea:	3304      	adds	r3, #4
 81027ec:	e000      	b.n	81027f0 <rpmsg_virtio_init_shm_pool+0x48>
 81027ee:	687b      	ldr	r3, [r7, #4]
 81027f0:	68fa      	ldr	r2, [r7, #12]
 81027f2:	6053      	str	r3, [r2, #4]
 81027f4:	e000      	b.n	81027f8 <rpmsg_virtio_init_shm_pool+0x50>
		return;
 81027f6:	bf00      	nop
}
 81027f8:	3714      	adds	r7, #20
 81027fa:	46bd      	mov	sp, r7
 81027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102800:	4770      	bx	lr

08102802 <rpmsg_virtio_return_buffer>:
 *
 */
static void rpmsg_virtio_return_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8102802:	b580      	push	{r7, lr}
 8102804:	b086      	sub	sp, #24
 8102806:	af00      	add	r7, sp, #0
 8102808:	60f8      	str	r0, [r7, #12]
 810280a:	60b9      	str	r1, [r7, #8]
 810280c:	607a      	str	r2, [r7, #4]
 810280e:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8102810:	68f8      	ldr	r0, [r7, #12]
 8102812:	f7ff ff61 	bl	81026d8 <rpmsg_virtio_get_role>
 8102816:	6178      	str	r0, [r7, #20]
		virtqueue_add_buffer(rvdev->rvq, &vqbuf, 0, 1, buffer);
	}
#endif /*VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8102818:	697b      	ldr	r3, [r7, #20]
 810281a:	2b01      	cmp	r3, #1
 810281c:	d106      	bne.n	810282c <rpmsg_virtio_return_buffer+0x2a>
		(void)buffer;
		virtqueue_add_consumed_buffer(rvdev->rvq, idx, len);
 810281e:	68fb      	ldr	r3, [r7, #12]
 8102820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102822:	8879      	ldrh	r1, [r7, #2]
 8102824:	687a      	ldr	r2, [r7, #4]
 8102826:	4618      	mov	r0, r3
 8102828:	f000 fc9c 	bl	8103164 <virtqueue_add_consumed_buffer>
	}
#endif /*VIRTIO_MASTER_ONLY*/
}
 810282c:	bf00      	nop
 810282e:	3718      	adds	r7, #24
 8102830:	46bd      	mov	sp, r7
 8102832:	bd80      	pop	{r7, pc}

08102834 <rpmsg_virtio_enqueue_buffer>:
 * @return - status of function execution
 */
static int rpmsg_virtio_enqueue_buffer(struct rpmsg_virtio_device *rvdev,
				       void *buffer, unsigned long len,
				       unsigned short idx)
{
 8102834:	b580      	push	{r7, lr}
 8102836:	b086      	sub	sp, #24
 8102838:	af00      	add	r7, sp, #0
 810283a:	60f8      	str	r0, [r7, #12]
 810283c:	60b9      	str	r1, [r7, #8]
 810283e:	607a      	str	r2, [r7, #4]
 8102840:	807b      	strh	r3, [r7, #2]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8102842:	68f8      	ldr	r0, [r7, #12]
 8102844:	f7ff ff48 	bl	81026d8 <rpmsg_virtio_get_role>
 8102848:	6178      	str	r0, [r7, #20]
		return virtqueue_add_buffer(rvdev->svq, &vqbuf, 0, 1, buffer);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810284a:	697b      	ldr	r3, [r7, #20]
 810284c:	2b01      	cmp	r3, #1
 810284e:	d108      	bne.n	8102862 <rpmsg_virtio_enqueue_buffer+0x2e>
		(void)buffer;
		return virtqueue_add_consumed_buffer(rvdev->svq, idx, len);
 8102850:	68fb      	ldr	r3, [r7, #12]
 8102852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102854:	8879      	ldrh	r1, [r7, #2]
 8102856:	687a      	ldr	r2, [r7, #4]
 8102858:	4618      	mov	r0, r3
 810285a:	f000 fc83 	bl	8103164 <virtqueue_add_consumed_buffer>
 810285e:	4603      	mov	r3, r0
 8102860:	e000      	b.n	8102864 <rpmsg_virtio_enqueue_buffer+0x30>
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	return 0;
 8102862:	2300      	movs	r3, #0
}
 8102864:	4618      	mov	r0, r3
 8102866:	3718      	adds	r7, #24
 8102868:	46bd      	mov	sp, r7
 810286a:	bd80      	pop	{r7, pc}

0810286c <rpmsg_virtio_get_tx_buffer>:
 * return - pointer to buffer.
 */
static void *rpmsg_virtio_get_tx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 810286c:	b580      	push	{r7, lr}
 810286e:	b086      	sub	sp, #24
 8102870:	af00      	add	r7, sp, #0
 8102872:	60f8      	str	r0, [r7, #12]
 8102874:	60b9      	str	r1, [r7, #8]
 8102876:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8102878:	68f8      	ldr	r0, [r7, #12]
 810287a:	f7ff ff2d 	bl	81026d8 <rpmsg_virtio_get_role>
 810287e:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 8102880:	2300      	movs	r3, #0
 8102882:	617b      	str	r3, [r7, #20]
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8102884:	693b      	ldr	r3, [r7, #16]
 8102886:	2b01      	cmp	r3, #1
 8102888:	d107      	bne.n	810289a <rpmsg_virtio_get_tx_buffer+0x2e>
		data = virtqueue_get_available_buffer(rvdev->svq, idx,
 810288a:	68fb      	ldr	r3, [r7, #12]
 810288c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810288e:	68ba      	ldr	r2, [r7, #8]
 8102890:	6879      	ldr	r1, [r7, #4]
 8102892:	4618      	mov	r0, r3
 8102894:	f000 fc20 	bl	81030d8 <virtqueue_get_available_buffer>
 8102898:	6178      	str	r0, [r7, #20]
						      (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return data;
 810289a:	697b      	ldr	r3, [r7, #20]
}
 810289c:	4618      	mov	r0, r3
 810289e:	3718      	adds	r7, #24
 81028a0:	46bd      	mov	sp, r7
 81028a2:	bd80      	pop	{r7, pc}

081028a4 <rpmsg_virtio_get_rx_buffer>:
 *
 */
static void *rpmsg_virtio_get_rx_buffer(struct rpmsg_virtio_device *rvdev,
					unsigned long *len,
					unsigned short *idx)
{
 81028a4:	b580      	push	{r7, lr}
 81028a6:	b086      	sub	sp, #24
 81028a8:	af00      	add	r7, sp, #0
 81028aa:	60f8      	str	r0, [r7, #12]
 81028ac:	60b9      	str	r1, [r7, #8]
 81028ae:	607a      	str	r2, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 81028b0:	68f8      	ldr	r0, [r7, #12]
 81028b2:	f7ff ff11 	bl	81026d8 <rpmsg_virtio_get_role>
 81028b6:	6138      	str	r0, [r7, #16]
	void *data = NULL;
 81028b8:	2300      	movs	r3, #0
 81028ba:	617b      	str	r3, [r7, #20]
		data = virtqueue_get_buffer(rvdev->rvq, (uint32_t *)len, idx);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 81028bc:	693b      	ldr	r3, [r7, #16]
 81028be:	2b01      	cmp	r3, #1
 81028c0:	d107      	bne.n	81028d2 <rpmsg_virtio_get_rx_buffer+0x2e>
		data =
		    virtqueue_get_available_buffer(rvdev->rvq, idx,
 81028c2:	68fb      	ldr	r3, [r7, #12]
 81028c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81028c6:	68ba      	ldr	r2, [r7, #8]
 81028c8:	6879      	ldr	r1, [r7, #4]
 81028ca:	4618      	mov	r0, r3
 81028cc:	f000 fc04 	bl	81030d8 <virtqueue_get_available_buffer>
 81028d0:	6178      	str	r0, [r7, #20]
						   (uint32_t *)len);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	if (data) {
 81028d2:	697b      	ldr	r3, [r7, #20]
 81028d4:	2b00      	cmp	r3, #0
 81028d6:	d005      	beq.n	81028e4 <rpmsg_virtio_get_rx_buffer+0x40>
		/* FIX ME: library should not worry about if it needs
		 * to flush/invalidate cache, it is shared memory.
		 * The shared memory should be mapped properly before
		 * using it.
		 */
		metal_cache_invalidate(data, (unsigned int)(*len));
 81028d8:	68bb      	ldr	r3, [r7, #8]
 81028da:	681b      	ldr	r3, [r3, #0]
 81028dc:	4619      	mov	r1, r3
 81028de:	6978      	ldr	r0, [r7, #20]
 81028e0:	f7ff fe2b 	bl	810253a <metal_cache_invalidate>
	}

	return data;
 81028e4:	697b      	ldr	r3, [r7, #20]
}
 81028e6:	4618      	mov	r0, r3
 81028e8:	3718      	adds	r7, #24
 81028ea:	46bd      	mov	sp, r7
 81028ec:	bd80      	pop	{r7, pc}

081028ee <rpmsg_virtio_wait_remote_ready>:
#ifndef VIRTIO_MASTER_ONLY
/**
 * check if the remote is ready to start RPMsg communication
 */
static int rpmsg_virtio_wait_remote_ready(struct rpmsg_virtio_device *rvdev)
{
 81028ee:	b580      	push	{r7, lr}
 81028f0:	b084      	sub	sp, #16
 81028f2:	af00      	add	r7, sp, #0
 81028f4:	6078      	str	r0, [r7, #4]
	uint8_t status;

	while (1) {
		status = rpmsg_virtio_get_status(rvdev);
 81028f6:	6878      	ldr	r0, [r7, #4]
 81028f8:	f7ff ff0e 	bl	8102718 <rpmsg_virtio_get_status>
 81028fc:	4603      	mov	r3, r0
 81028fe:	73fb      	strb	r3, [r7, #15]
		/* Busy wait until the remote is ready */
		if (status & VIRTIO_CONFIG_STATUS_NEEDS_RESET) {
 8102900:	7bfb      	ldrb	r3, [r7, #15]
 8102902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102906:	2b00      	cmp	r3, #0
 8102908:	d004      	beq.n	8102914 <rpmsg_virtio_wait_remote_ready+0x26>
			rpmsg_virtio_set_status(rvdev, 0);
 810290a:	2100      	movs	r1, #0
 810290c:	6878      	ldr	r0, [r7, #4]
 810290e:	f7ff fef0 	bl	81026f2 <rpmsg_virtio_set_status>
 8102912:	e7f0      	b.n	81028f6 <rpmsg_virtio_wait_remote_ready+0x8>
			/* TODO notify remote processor */
		} else if (status & VIRTIO_CONFIG_STATUS_DRIVER_OK) {
 8102914:	7bfb      	ldrb	r3, [r7, #15]
 8102916:	f003 0304 	and.w	r3, r3, #4
 810291a:	2b00      	cmp	r3, #0
 810291c:	d0eb      	beq.n	81028f6 <rpmsg_virtio_wait_remote_ready+0x8>
			return true;
 810291e:	2301      	movs	r3, #1
		/* TODO: clarify metal_cpu_yield usage*/
		metal_cpu_yield();
	}

	return false;
}
 8102920:	4618      	mov	r0, r3
 8102922:	3710      	adds	r7, #16
 8102924:	46bd      	mov	sp, r7
 8102926:	bd80      	pop	{r7, pc}

08102928 <_rpmsg_virtio_get_buffer_size>:
 *
 * @return - buffer size
 *
 */
static int _rpmsg_virtio_get_buffer_size(struct rpmsg_virtio_device *rvdev)
{
 8102928:	b580      	push	{r7, lr}
 810292a:	b084      	sub	sp, #16
 810292c:	af00      	add	r7, sp, #0
 810292e:	6078      	str	r0, [r7, #4]
	unsigned int role = rpmsg_virtio_get_role(rvdev);
 8102930:	6878      	ldr	r0, [r7, #4]
 8102932:	f7ff fed1 	bl	81026d8 <rpmsg_virtio_get_role>
 8102936:	60b8      	str	r0, [r7, #8]
	int length = 0;
 8102938:	2300      	movs	r3, #0
 810293a:	60fb      	str	r3, [r7, #12]
		length = RPMSG_BUFFER_SIZE - sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 810293c:	68bb      	ldr	r3, [r7, #8]
 810293e:	2b01      	cmp	r3, #1
 8102940:	d107      	bne.n	8102952 <_rpmsg_virtio_get_buffer_size+0x2a>
		/*
		 * If other core is Master then buffers are provided by it,
		 * so get the buffer size from the virtqueue.
		 */
		length =
		    (int)virtqueue_get_desc_size(rvdev->svq) -
 8102942:	687b      	ldr	r3, [r7, #4]
 8102944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102946:	4618      	mov	r0, r3
 8102948:	f000 fc86 	bl	8103258 <virtqueue_get_desc_size>
 810294c:	4603      	mov	r3, r0
 810294e:	3b10      	subs	r3, #16
		length =
 8102950:	60fb      	str	r3, [r7, #12]
		    sizeof(struct rpmsg_hdr);
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	return length;
 8102952:	68fb      	ldr	r3, [r7, #12]
}
 8102954:	4618      	mov	r0, r3
 8102956:	3710      	adds	r7, #16
 8102958:	46bd      	mov	sp, r7
 810295a:	bd80      	pop	{r7, pc}

0810295c <rpmsg_virtio_send_offchannel_raw>:
 */
static int rpmsg_virtio_send_offchannel_raw(struct rpmsg_device *rdev,
					    uint32_t src, uint32_t dst,
					    const void *data,
					    int size, int wait)
{
 810295c:	b580      	push	{r7, lr}
 810295e:	b090      	sub	sp, #64	; 0x40
 8102960:	af00      	add	r7, sp, #0
 8102962:	60f8      	str	r0, [r7, #12]
 8102964:	60b9      	str	r1, [r7, #8]
 8102966:	607a      	str	r2, [r7, #4]
 8102968:	603b      	str	r3, [r7, #0]
	struct rpmsg_virtio_device *rvdev;
	struct rpmsg_hdr rp_hdr;
	void *buffer = NULL;
 810296a:	2300      	movs	r3, #0
 810296c:	63fb      	str	r3, [r7, #60]	; 0x3c
	unsigned short idx;
	int tick_count = 0;
 810296e:	2300      	movs	r3, #0
 8102970:	63bb      	str	r3, [r7, #56]	; 0x38
	unsigned long buff_len;
	int status;
	struct metal_io_region *io;

	/* Get the associated remote device for channel. */
	rvdev = metal_container_of(rdev, struct rpmsg_virtio_device, rdev);
 8102972:	68fb      	ldr	r3, [r7, #12]
 8102974:	637b      	str	r3, [r7, #52]	; 0x34

	status = rpmsg_virtio_get_status(rvdev);
 8102976:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8102978:	f7ff fece 	bl	8102718 <rpmsg_virtio_get_status>
 810297c:	4603      	mov	r3, r0
 810297e:	633b      	str	r3, [r7, #48]	; 0x30
	/* Validate device state */
	if (!(status & VIRTIO_CONFIG_STATUS_DRIVER_OK)) {
 8102980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102982:	f003 0304 	and.w	r3, r3, #4
 8102986:	2b00      	cmp	r3, #0
 8102988:	d101      	bne.n	810298e <rpmsg_virtio_send_offchannel_raw+0x32>
		return RPMSG_ERR_DEV_STATE;
 810298a:	4b45      	ldr	r3, [pc, #276]	; (8102aa0 <rpmsg_virtio_send_offchannel_raw+0x144>)
 810298c:	e083      	b.n	8102a96 <rpmsg_virtio_send_offchannel_raw+0x13a>
	}

	if (wait)
 810298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102990:	2b00      	cmp	r3, #0
 8102992:	d003      	beq.n	810299c <rpmsg_virtio_send_offchannel_raw+0x40>
		tick_count = RPMSG_TICK_COUNT / RPMSG_TICKS_PER_INTERVAL;
 8102994:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8102998:	63bb      	str	r3, [r7, #56]	; 0x38
 810299a:	e001      	b.n	81029a0 <rpmsg_virtio_send_offchannel_raw+0x44>
	else
		tick_count = 0;
 810299c:	2300      	movs	r3, #0
 810299e:	63bb      	str	r3, [r7, #56]	; 0x38

	while (1) {
		int avail_size;

		/* Lock the device to enable exclusive access to virtqueues */
		metal_mutex_acquire(&rdev->lock);
 81029a0:	68fb      	ldr	r3, [r7, #12]
 81029a2:	3358      	adds	r3, #88	; 0x58
 81029a4:	4618      	mov	r0, r3
 81029a6:	f7ff fe64 	bl	8102672 <metal_mutex_acquire>
		avail_size = _rpmsg_virtio_get_buffer_size(rvdev);
 81029aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81029ac:	f7ff ffbc 	bl	8102928 <_rpmsg_virtio_get_buffer_size>
 81029b0:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (size <= avail_size)
 81029b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81029b6:	429a      	cmp	r2, r3
 81029b8:	dc08      	bgt.n	81029cc <rpmsg_virtio_send_offchannel_raw+0x70>
			buffer = rpmsg_virtio_get_tx_buffer(rvdev, &buff_len,
 81029ba:	f107 0216 	add.w	r2, r7, #22
 81029be:	f107 0310 	add.w	r3, r7, #16
 81029c2:	4619      	mov	r1, r3
 81029c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81029c6:	f7ff ff51 	bl	810286c <rpmsg_virtio_get_tx_buffer>
 81029ca:	63f8      	str	r0, [r7, #60]	; 0x3c
							    &idx);
		metal_mutex_release(&rdev->lock);
 81029cc:	68fb      	ldr	r3, [r7, #12]
 81029ce:	3358      	adds	r3, #88	; 0x58
 81029d0:	4618      	mov	r0, r3
 81029d2:	f7ff fe59 	bl	8102688 <metal_mutex_release>
		if (buffer || !tick_count)
 81029d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81029d8:	2b00      	cmp	r3, #0
 81029da:	d10e      	bne.n	81029fa <rpmsg_virtio_send_offchannel_raw+0x9e>
 81029dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029de:	2b00      	cmp	r3, #0
 81029e0:	d00b      	beq.n	81029fa <rpmsg_virtio_send_offchannel_raw+0x9e>
			break;
		if (avail_size != 0)
 81029e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81029e4:	2b00      	cmp	r3, #0
 81029e6:	d001      	beq.n	81029ec <rpmsg_virtio_send_offchannel_raw+0x90>
			return RPMSG_ERR_BUFF_SIZE;
 81029e8:	4b2e      	ldr	r3, [pc, #184]	; (8102aa4 <rpmsg_virtio_send_offchannel_raw+0x148>)
 81029ea:	e054      	b.n	8102a96 <rpmsg_virtio_send_offchannel_raw+0x13a>
		metal_sleep_usec(RPMSG_TICKS_PER_INTERVAL);
 81029ec:	200a      	movs	r0, #10
 81029ee:	f7ff fdbc 	bl	810256a <metal_sleep_usec>
		tick_count--;
 81029f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029f4:	3b01      	subs	r3, #1
 81029f6:	63bb      	str	r3, [r7, #56]	; 0x38
	while (1) {
 81029f8:	e7d2      	b.n	81029a0 <rpmsg_virtio_send_offchannel_raw+0x44>
	}
	if (!buffer)
 81029fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81029fc:	2b00      	cmp	r3, #0
 81029fe:	d101      	bne.n	8102a04 <rpmsg_virtio_send_offchannel_raw+0xa8>
		return RPMSG_ERR_NO_BUFF;
 8102a00:	4b29      	ldr	r3, [pc, #164]	; (8102aa8 <rpmsg_virtio_send_offchannel_raw+0x14c>)
 8102a02:	e048      	b.n	8102a96 <rpmsg_virtio_send_offchannel_raw+0x13a>

	/* Initialize RPMSG header. */
	rp_hdr.dst = dst;
 8102a04:	687b      	ldr	r3, [r7, #4]
 8102a06:	61fb      	str	r3, [r7, #28]
	rp_hdr.src = src;
 8102a08:	68bb      	ldr	r3, [r7, #8]
 8102a0a:	61bb      	str	r3, [r7, #24]
	rp_hdr.len = size;
 8102a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102a0e:	b29b      	uxth	r3, r3
 8102a10:	84bb      	strh	r3, [r7, #36]	; 0x24
	rp_hdr.reserved = 0;
 8102a12:	2300      	movs	r3, #0
 8102a14:	623b      	str	r3, [r7, #32]

	/* Copy data to rpmsg buffer. */
	io = rvdev->shbuf_io;
 8102a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	status = metal_io_block_write(io, metal_io_virt_to_offset(io, buffer),
 8102a1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8102a1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102a20:	f7ff fdc0 	bl	81025a4 <metal_io_virt_to_offset>
 8102a24:	4601      	mov	r1, r0
 8102a26:	f107 0218 	add.w	r2, r7, #24
 8102a2a:	2310      	movs	r3, #16
 8102a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102a2e:	f7fe ff56 	bl	81018de <metal_io_block_write>
 8102a32:	6338      	str	r0, [r7, #48]	; 0x30
				      &rp_hdr, sizeof(rp_hdr));
	RPMSG_ASSERT(status == sizeof(rp_hdr), "failed to write header\n");
 8102a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a36:	2b10      	cmp	r3, #16
 8102a38:	d000      	beq.n	8102a3c <rpmsg_virtio_send_offchannel_raw+0xe0>
 8102a3a:	e7fe      	b.n	8102a3a <rpmsg_virtio_send_offchannel_raw+0xde>

	status = metal_io_block_write(io,
 8102a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102a3e:	3310      	adds	r3, #16
 8102a40:	4619      	mov	r1, r3
 8102a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102a44:	f7ff fdae 	bl	81025a4 <metal_io_virt_to_offset>
 8102a48:	4601      	mov	r1, r0
 8102a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102a4c:	683a      	ldr	r2, [r7, #0]
 8102a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102a50:	f7fe ff45 	bl	81018de <metal_io_block_write>
 8102a54:	6338      	str	r0, [r7, #48]	; 0x30
				      metal_io_virt_to_offset(io,
				      RPMSG_LOCATE_DATA(buffer)),
				      data, size);
	RPMSG_ASSERT(status == size, "failed to write buffer\n");
 8102a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102a58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102a5a:	429a      	cmp	r2, r3
 8102a5c:	d000      	beq.n	8102a60 <rpmsg_virtio_send_offchannel_raw+0x104>
 8102a5e:	e7fe      	b.n	8102a5e <rpmsg_virtio_send_offchannel_raw+0x102>
	metal_mutex_acquire(&rdev->lock);
 8102a60:	68fb      	ldr	r3, [r7, #12]
 8102a62:	3358      	adds	r3, #88	; 0x58
 8102a64:	4618      	mov	r0, r3
 8102a66:	f7ff fe04 	bl	8102672 <metal_mutex_acquire>

	/* Enqueue buffer on virtqueue. */
	status = rpmsg_virtio_enqueue_buffer(rvdev, buffer, buff_len, idx);
 8102a6a:	693a      	ldr	r2, [r7, #16]
 8102a6c:	8afb      	ldrh	r3, [r7, #22]
 8102a6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8102a70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8102a72:	f7ff fedf 	bl	8102834 <rpmsg_virtio_enqueue_buffer>
 8102a76:	6338      	str	r0, [r7, #48]	; 0x30
	RPMSG_ASSERT(status == VQUEUE_SUCCESS, "failed to enqueue buffer\n");
 8102a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a7a:	2b00      	cmp	r3, #0
 8102a7c:	d000      	beq.n	8102a80 <rpmsg_virtio_send_offchannel_raw+0x124>
 8102a7e:	e7fe      	b.n	8102a7e <rpmsg_virtio_send_offchannel_raw+0x122>
	/* Let the other side know that there is a job to process. */
	virtqueue_kick(rvdev->svq);
 8102a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102a84:	4618      	mov	r0, r3
 8102a86:	f000 fbd1 	bl	810322c <virtqueue_kick>

	metal_mutex_release(&rdev->lock);
 8102a8a:	68fb      	ldr	r3, [r7, #12]
 8102a8c:	3358      	adds	r3, #88	; 0x58
 8102a8e:	4618      	mov	r0, r3
 8102a90:	f7ff fdfa 	bl	8102688 <metal_mutex_release>

	return size;
 8102a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8102a96:	4618      	mov	r0, r3
 8102a98:	3740      	adds	r7, #64	; 0x40
 8102a9a:	46bd      	mov	sp, r7
 8102a9c:	bd80      	pop	{r7, pc}
 8102a9e:	bf00      	nop
 8102aa0:	fffff82c 	.word	0xfffff82c
 8102aa4:	fffff82b 	.word	0xfffff82b
 8102aa8:	fffff82e 	.word	0xfffff82e

08102aac <rpmsg_virtio_tx_callback>:
 * @param vq - pointer to virtqueue on which Tx is has been
 *             completed.
 *
 */
static void rpmsg_virtio_tx_callback(struct virtqueue *vq)
{
 8102aac:	b480      	push	{r7}
 8102aae:	b083      	sub	sp, #12
 8102ab0:	af00      	add	r7, sp, #0
 8102ab2:	6078      	str	r0, [r7, #4]
	(void)vq;
}
 8102ab4:	bf00      	nop
 8102ab6:	370c      	adds	r7, #12
 8102ab8:	46bd      	mov	sp, r7
 8102aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102abe:	4770      	bx	lr

08102ac0 <rpmsg_virtio_rx_callback>:
 *
 * @param vq - pointer to virtqueue on which messages is received
 *
 */
static void rpmsg_virtio_rx_callback(struct virtqueue *vq)
{
 8102ac0:	b590      	push	{r4, r7, lr}
 8102ac2:	b08d      	sub	sp, #52	; 0x34
 8102ac4:	af02      	add	r7, sp, #8
 8102ac6:	6078      	str	r0, [r7, #4]
	struct virtio_device *vdev = vq->vq_dev;
 8102ac8:	687b      	ldr	r3, [r7, #4]
 8102aca:	681b      	ldr	r3, [r3, #0]
 8102acc:	623b      	str	r3, [r7, #32]
	struct rpmsg_virtio_device *rvdev = vdev->priv;
 8102ace:	6a3b      	ldr	r3, [r7, #32]
 8102ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102ad2:	61fb      	str	r3, [r7, #28]
	struct rpmsg_device *rdev = &rvdev->rdev;
 8102ad4:	69fb      	ldr	r3, [r7, #28]
 8102ad6:	61bb      	str	r3, [r7, #24]
	struct rpmsg_hdr *rp_hdr;
	unsigned long len;
	unsigned short idx;
	int status;

	metal_mutex_acquire(&rdev->lock);
 8102ad8:	69bb      	ldr	r3, [r7, #24]
 8102ada:	3358      	adds	r3, #88	; 0x58
 8102adc:	4618      	mov	r0, r3
 8102ade:	f7ff fdc8 	bl	8102672 <metal_mutex_acquire>

	/* Process the received data from remote node */
	rp_hdr = (struct rpmsg_hdr *)rpmsg_virtio_get_rx_buffer(rvdev,
 8102ae2:	f107 020a 	add.w	r2, r7, #10
 8102ae6:	f107 030c 	add.w	r3, r7, #12
 8102aea:	4619      	mov	r1, r3
 8102aec:	69f8      	ldr	r0, [r7, #28]
 8102aee:	f7ff fed9 	bl	81028a4 <rpmsg_virtio_get_rx_buffer>
 8102af2:	6278      	str	r0, [r7, #36]	; 0x24
								&len, &idx);

	metal_mutex_release(&rdev->lock);
 8102af4:	69bb      	ldr	r3, [r7, #24]
 8102af6:	3358      	adds	r3, #88	; 0x58
 8102af8:	4618      	mov	r0, r3
 8102afa:	f7ff fdc5 	bl	8102688 <metal_mutex_release>

	while (rp_hdr) {
 8102afe:	e04c      	b.n	8102b9a <rpmsg_virtio_rx_callback+0xda>
		/* Get the channel node from the remote device channels list. */
		metal_mutex_acquire(&rdev->lock);
 8102b00:	69bb      	ldr	r3, [r7, #24]
 8102b02:	3358      	adds	r3, #88	; 0x58
 8102b04:	4618      	mov	r0, r3
 8102b06:	f7ff fdb4 	bl	8102672 <metal_mutex_acquire>
		ept = rpmsg_get_ept_from_addr(rdev, rp_hdr->dst);
 8102b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102b0c:	685b      	ldr	r3, [r3, #4]
 8102b0e:	4619      	mov	r1, r3
 8102b10:	69b8      	ldr	r0, [r7, #24]
 8102b12:	f7ff fe38 	bl	8102786 <rpmsg_get_ept_from_addr>
 8102b16:	6178      	str	r0, [r7, #20]
		metal_mutex_release(&rdev->lock);
 8102b18:	69bb      	ldr	r3, [r7, #24]
 8102b1a:	3358      	adds	r3, #88	; 0x58
 8102b1c:	4618      	mov	r0, r3
 8102b1e:	f7ff fdb3 	bl	8102688 <metal_mutex_release>

		if (!ept)
 8102b22:	697b      	ldr	r3, [r7, #20]
 8102b24:	2b00      	cmp	r3, #0
 8102b26:	d03c      	beq.n	8102ba2 <rpmsg_virtio_rx_callback+0xe2>
			/* Fatal error no endpoint for the given dst addr. */
			return;

		if (ept->dest_addr == RPMSG_ADDR_ANY) {
 8102b28:	697b      	ldr	r3, [r7, #20]
 8102b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102b30:	d103      	bne.n	8102b3a <rpmsg_virtio_rx_callback+0x7a>
			/*
			 * First message received from the remote side,
			 * update channel destination address
			 */
			ept->dest_addr = rp_hdr->src;
 8102b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102b34:	681a      	ldr	r2, [r3, #0]
 8102b36:	697b      	ldr	r3, [r7, #20]
 8102b38:	629a      	str	r2, [r3, #40]	; 0x28
		}
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8102b3a:	697b      	ldr	r3, [r7, #20]
 8102b3c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8102b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102b40:	f103 0110 	add.w	r1, r3, #16
				   rp_hdr->len, ept->addr, ept->priv);
 8102b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102b46:	899b      	ldrh	r3, [r3, #12]
 8102b48:	b29b      	uxth	r3, r3
		status = ept->cb(ept, (void *)RPMSG_LOCATE_DATA(rp_hdr),
 8102b4a:	4618      	mov	r0, r3
 8102b4c:	697b      	ldr	r3, [r7, #20]
 8102b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8102b50:	697b      	ldr	r3, [r7, #20]
 8102b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b54:	9300      	str	r3, [sp, #0]
 8102b56:	4613      	mov	r3, r2
 8102b58:	4602      	mov	r2, r0
 8102b5a:	6978      	ldr	r0, [r7, #20]
 8102b5c:	47a0      	blx	r4
 8102b5e:	6138      	str	r0, [r7, #16]

		RPMSG_ASSERT(status == RPMSG_SUCCESS,
 8102b60:	693b      	ldr	r3, [r7, #16]
 8102b62:	2b00      	cmp	r3, #0
 8102b64:	d000      	beq.n	8102b68 <rpmsg_virtio_rx_callback+0xa8>
 8102b66:	e7fe      	b.n	8102b66 <rpmsg_virtio_rx_callback+0xa6>
			     "unexpected callback status\n");
		metal_mutex_acquire(&rdev->lock);
 8102b68:	69bb      	ldr	r3, [r7, #24]
 8102b6a:	3358      	adds	r3, #88	; 0x58
 8102b6c:	4618      	mov	r0, r3
 8102b6e:	f7ff fd80 	bl	8102672 <metal_mutex_acquire>

		/* Return used buffers. */
		rpmsg_virtio_return_buffer(rvdev, rp_hdr, len, idx);
 8102b72:	68fa      	ldr	r2, [r7, #12]
 8102b74:	897b      	ldrh	r3, [r7, #10]
 8102b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8102b78:	69f8      	ldr	r0, [r7, #28]
 8102b7a:	f7ff fe42 	bl	8102802 <rpmsg_virtio_return_buffer>

		rp_hdr = (struct rpmsg_hdr *)
			 rpmsg_virtio_get_rx_buffer(rvdev, &len, &idx);
 8102b7e:	f107 020a 	add.w	r2, r7, #10
 8102b82:	f107 030c 	add.w	r3, r7, #12
 8102b86:	4619      	mov	r1, r3
 8102b88:	69f8      	ldr	r0, [r7, #28]
 8102b8a:	f7ff fe8b 	bl	81028a4 <rpmsg_virtio_get_rx_buffer>
 8102b8e:	6278      	str	r0, [r7, #36]	; 0x24
		metal_mutex_release(&rdev->lock);
 8102b90:	69bb      	ldr	r3, [r7, #24]
 8102b92:	3358      	adds	r3, #88	; 0x58
 8102b94:	4618      	mov	r0, r3
 8102b96:	f7ff fd77 	bl	8102688 <metal_mutex_release>
	while (rp_hdr) {
 8102b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102b9c:	2b00      	cmp	r3, #0
 8102b9e:	d1af      	bne.n	8102b00 <rpmsg_virtio_rx_callback+0x40>
 8102ba0:	e000      	b.n	8102ba4 <rpmsg_virtio_rx_callback+0xe4>
			return;
 8102ba2:	bf00      	nop
	}
}
 8102ba4:	372c      	adds	r7, #44	; 0x2c
 8102ba6:	46bd      	mov	sp, r7
 8102ba8:	bd90      	pop	{r4, r7, pc}

08102baa <rpmsg_virtio_ns_callback>:
#pragma push
#pragma O0
#endif
static int rpmsg_virtio_ns_callback(struct rpmsg_endpoint *ept, void *data,
				    size_t len, uint32_t src, void *priv)
{
 8102baa:	b580      	push	{r7, lr}
 8102bac:	b092      	sub	sp, #72	; 0x48
 8102bae:	af00      	add	r7, sp, #0
 8102bb0:	60f8      	str	r0, [r7, #12]
 8102bb2:	60b9      	str	r1, [r7, #8]
 8102bb4:	607a      	str	r2, [r7, #4]
 8102bb6:	603b      	str	r3, [r7, #0]
	struct rpmsg_device *rdev = ept->rdev;
 8102bb8:	68fb      	ldr	r3, [r7, #12]
 8102bba:	6a1b      	ldr	r3, [r3, #32]
 8102bbc:	647b      	str	r3, [r7, #68]	; 0x44
	struct rpmsg_virtio_device *rvdev = (struct rpmsg_virtio_device *)rdev;
 8102bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102bc0:	643b      	str	r3, [r7, #64]	; 0x40
	struct metal_io_region *io = rvdev->shbuf_io;
 8102bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
	char name[RPMSG_NAME_SIZE];

	(void)priv;
	(void)src;

	ns_msg = (struct rpmsg_ns_msg *)data;
 8102bc8:	68bb      	ldr	r3, [r7, #8]
 8102bca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (len != sizeof(*ns_msg))
 8102bcc:	687b      	ldr	r3, [r7, #4]
 8102bce:	2b28      	cmp	r3, #40	; 0x28
 8102bd0:	d001      	beq.n	8102bd6 <rpmsg_virtio_ns_callback+0x2c>
		/* Returns as the message is corrupted */
		return RPMSG_SUCCESS;
 8102bd2:	2300      	movs	r3, #0
 8102bd4:	e057      	b.n	8102c86 <rpmsg_virtio_ns_callback+0xdc>
	metal_io_block_read(io,
			    metal_io_virt_to_offset(io, ns_msg->name),
 8102bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	metal_io_block_read(io,
 8102bd8:	4619      	mov	r1, r3
 8102bda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8102bdc:	f7ff fce2 	bl	81025a4 <metal_io_virt_to_offset>
 8102be0:	4601      	mov	r1, r0
 8102be2:	f107 0210 	add.w	r2, r7, #16
 8102be6:	2320      	movs	r3, #32
 8102be8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8102bea:	f7fe fe01 	bl	81017f0 <metal_io_block_read>
			    &name, sizeof(name));
	dest = ns_msg->addr;
 8102bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102bf0:	6a1b      	ldr	r3, [r3, #32]
 8102bf2:	637b      	str	r3, [r7, #52]	; 0x34

	/* check if a Ept has been locally registered */
	metal_mutex_acquire(&rdev->lock);
 8102bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102bf6:	3358      	adds	r3, #88	; 0x58
 8102bf8:	4618      	mov	r0, r3
 8102bfa:	f7ff fd3a 	bl	8102672 <metal_mutex_acquire>
	_ept = rpmsg_get_endpoint(rdev, name, RPMSG_ADDR_ANY, dest);
 8102bfe:	f107 0110 	add.w	r1, r7, #16
 8102c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102c08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8102c0a:	f7ff fb75 	bl	81022f8 <rpmsg_get_endpoint>
 8102c0e:	6338      	str	r0, [r7, #48]	; 0x30

	if (ns_msg->flags & RPMSG_NS_DESTROY) {
 8102c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102c14:	f003 0301 	and.w	r3, r3, #1
 8102c18:	2b00      	cmp	r3, #0
 8102c1a:	d017      	beq.n	8102c4c <rpmsg_virtio_ns_callback+0xa2>
		if (_ept)
 8102c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102c1e:	2b00      	cmp	r3, #0
 8102c20:	d003      	beq.n	8102c2a <rpmsg_virtio_ns_callback+0x80>
			_ept->dest_addr = RPMSG_ADDR_ANY;
 8102c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102c24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8102c28:	629a      	str	r2, [r3, #40]	; 0x28
		metal_mutex_release(&rdev->lock);
 8102c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c2c:	3358      	adds	r3, #88	; 0x58
 8102c2e:	4618      	mov	r0, r3
 8102c30:	f7ff fd2a 	bl	8102688 <metal_mutex_release>
		if (_ept && _ept->ns_unbind_cb)
 8102c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102c36:	2b00      	cmp	r3, #0
 8102c38:	d024      	beq.n	8102c84 <rpmsg_virtio_ns_callback+0xda>
 8102c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c3e:	2b00      	cmp	r3, #0
 8102c40:	d020      	beq.n	8102c84 <rpmsg_virtio_ns_callback+0xda>
			_ept->ns_unbind_cb(ept);
 8102c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102c46:	68f8      	ldr	r0, [r7, #12]
 8102c48:	4798      	blx	r3
 8102c4a:	e01b      	b.n	8102c84 <rpmsg_virtio_ns_callback+0xda>
	} else {
		if (!_ept) {
 8102c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102c4e:	2b00      	cmp	r3, #0
 8102c50:	d110      	bne.n	8102c74 <rpmsg_virtio_ns_callback+0xca>
			 * send callback to application, that can
			 * - create the associated endpoints.
			 * - store information for future use.
			 * - just ignore the request as service not supported.
			 */
			metal_mutex_release(&rdev->lock);
 8102c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c54:	3358      	adds	r3, #88	; 0x58
 8102c56:	4618      	mov	r0, r3
 8102c58:	f7ff fd16 	bl	8102688 <metal_mutex_release>
			if (rdev->ns_bind_cb)
 8102c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c60:	2b00      	cmp	r3, #0
 8102c62:	d00f      	beq.n	8102c84 <rpmsg_virtio_ns_callback+0xda>
				rdev->ns_bind_cb(rdev, name, dest);
 8102c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102c68:	f107 0110 	add.w	r1, r7, #16
 8102c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102c6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8102c70:	4798      	blx	r3
 8102c72:	e007      	b.n	8102c84 <rpmsg_virtio_ns_callback+0xda>
		} else {
			_ept->dest_addr = dest;
 8102c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102c78:	629a      	str	r2, [r3, #40]	; 0x28
			metal_mutex_release(&rdev->lock);
 8102c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102c7c:	3358      	adds	r3, #88	; 0x58
 8102c7e:	4618      	mov	r0, r3
 8102c80:	f7ff fd02 	bl	8102688 <metal_mutex_release>
		}
	}

	return RPMSG_SUCCESS;
 8102c84:	2300      	movs	r3, #0
}
 8102c86:	4618      	mov	r0, r3
 8102c88:	3748      	adds	r7, #72	; 0x48
 8102c8a:	46bd      	mov	sp, r7
 8102c8c:	bd80      	pop	{r7, pc}
	...

08102c90 <rpmsg_init_vdev>:
int rpmsg_init_vdev(struct rpmsg_virtio_device *rvdev,
		    struct virtio_device *vdev,
		    rpmsg_ns_bind_cb ns_bind_cb,
		    struct metal_io_region *shm_io,
		    struct rpmsg_virtio_shm_pool *shpool)
{
 8102c90:	b580      	push	{r7, lr}
 8102c92:	b090      	sub	sp, #64	; 0x40
 8102c94:	af02      	add	r7, sp, #8
 8102c96:	60f8      	str	r0, [r7, #12]
 8102c98:	60b9      	str	r1, [r7, #8]
 8102c9a:	607a      	str	r2, [r7, #4]
 8102c9c:	603b      	str	r3, [r7, #0]
	vqcallback callback[RPMSG_NUM_VRINGS];
	unsigned long dev_features;
	int status;
	unsigned int i, role;

	rdev = &rvdev->rdev;
 8102c9e:	68fb      	ldr	r3, [r7, #12]
 8102ca0:	633b      	str	r3, [r7, #48]	; 0x30
	memset(rdev, 0, sizeof(*rdev));
 8102ca2:	2264      	movs	r2, #100	; 0x64
 8102ca4:	2100      	movs	r1, #0
 8102ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102ca8:	f000 fdfa 	bl	81038a0 <memset>
	metal_mutex_init(&rdev->lock);
 8102cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102cae:	3358      	adds	r3, #88	; 0x58
 8102cb0:	4618      	mov	r0, r3
 8102cb2:	f7ff fcd3 	bl	810265c <metal_mutex_init>
	rvdev->vdev = vdev;
 8102cb6:	68fb      	ldr	r3, [r7, #12]
 8102cb8:	68ba      	ldr	r2, [r7, #8]
 8102cba:	665a      	str	r2, [r3, #100]	; 0x64
	rdev->ns_bind_cb = ns_bind_cb;
 8102cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102cbe:	687a      	ldr	r2, [r7, #4]
 8102cc0:	65da      	str	r2, [r3, #92]	; 0x5c
	vdev->priv = rvdev;
 8102cc2:	68bb      	ldr	r3, [r7, #8]
 8102cc4:	68fa      	ldr	r2, [r7, #12]
 8102cc6:	625a      	str	r2, [r3, #36]	; 0x24
	rdev->ops.send_offchannel_raw = rpmsg_virtio_send_offchannel_raw;
 8102cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102cca:	4a38      	ldr	r2, [pc, #224]	; (8102dac <rpmsg_init_vdev+0x11c>)
 8102ccc:	661a      	str	r2, [r3, #96]	; 0x60
	role = rpmsg_virtio_get_role(rvdev);
 8102cce:	68f8      	ldr	r0, [r7, #12]
 8102cd0:	f7ff fd02 	bl	81026d8 <rpmsg_virtio_get_role>
 8102cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

#ifndef VIRTIO_MASTER_ONLY
	(void)shpool;
	if (role == RPMSG_REMOTE) {
 8102cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102cd8:	2b01      	cmp	r3, #1
 8102cda:	d112      	bne.n	8102d02 <rpmsg_init_vdev+0x72>
		vq_names[0] = "tx_vq";
 8102cdc:	4b34      	ldr	r3, [pc, #208]	; (8102db0 <rpmsg_init_vdev+0x120>)
 8102cde:	61bb      	str	r3, [r7, #24]
		vq_names[1] = "rx_vq";
 8102ce0:	4b34      	ldr	r3, [pc, #208]	; (8102db4 <rpmsg_init_vdev+0x124>)
 8102ce2:	61fb      	str	r3, [r7, #28]
		callback[0] = rpmsg_virtio_tx_callback;
 8102ce4:	4b34      	ldr	r3, [pc, #208]	; (8102db8 <rpmsg_init_vdev+0x128>)
 8102ce6:	613b      	str	r3, [r7, #16]
		callback[1] = rpmsg_virtio_rx_callback;
 8102ce8:	4b34      	ldr	r3, [pc, #208]	; (8102dbc <rpmsg_init_vdev+0x12c>)
 8102cea:	617b      	str	r3, [r7, #20]
		rvdev->rvq  = vdev->vrings_info[1].vq;
 8102cec:	68bb      	ldr	r3, [r7, #8]
 8102cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cf0:	3318      	adds	r3, #24
 8102cf2:	681a      	ldr	r2, [r3, #0]
 8102cf4:	68fb      	ldr	r3, [r7, #12]
 8102cf6:	669a      	str	r2, [r3, #104]	; 0x68
		rvdev->svq  = vdev->vrings_info[0].vq;
 8102cf8:	68bb      	ldr	r3, [r7, #8]
 8102cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102cfc:	681a      	ldr	r2, [r3, #0]
 8102cfe:	68fb      	ldr	r3, [r7, #12]
 8102d00:	66da      	str	r2, [r3, #108]	; 0x6c
	}
#endif /*!VIRTIO_MASTER_ONLY*/
	rvdev->shbuf_io = shm_io;
 8102d02:	68fb      	ldr	r3, [r7, #12]
 8102d04:	683a      	ldr	r2, [r7, #0]
 8102d06:	671a      	str	r2, [r3, #112]	; 0x70

#ifndef VIRTIO_MASTER_ONLY
	if (role == RPMSG_REMOTE) {
 8102d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d0a:	2b01      	cmp	r3, #1
 8102d0c:	d102      	bne.n	8102d14 <rpmsg_init_vdev+0x84>
		/* wait synchro with the master */
		rpmsg_virtio_wait_remote_ready(rvdev);
 8102d0e:	68f8      	ldr	r0, [r7, #12]
 8102d10:	f7ff fded 	bl	81028ee <rpmsg_virtio_wait_remote_ready>
	}
#endif /*!VIRTIO_MASTER_ONLY*/

	/* Create virtqueues for remote device */
	status = rpmsg_virtio_create_virtqueues(rvdev, 0, RPMSG_NUM_VRINGS,
 8102d14:	f107 0218 	add.w	r2, r7, #24
 8102d18:	f107 0310 	add.w	r3, r7, #16
 8102d1c:	9300      	str	r3, [sp, #0]
 8102d1e:	4613      	mov	r3, r2
 8102d20:	2202      	movs	r2, #2
 8102d22:	2100      	movs	r1, #0
 8102d24:	68f8      	ldr	r0, [r7, #12]
 8102d26:	f7ff fd19 	bl	810275c <rpmsg_virtio_create_virtqueues>
 8102d2a:	62b8      	str	r0, [r7, #40]	; 0x28
						vq_names, callback);
	if (status != RPMSG_SUCCESS)
 8102d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d2e:	2b00      	cmp	r3, #0
 8102d30:	d001      	beq.n	8102d36 <rpmsg_init_vdev+0xa6>
		return status;
 8102d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102d34:	e035      	b.n	8102da2 <rpmsg_init_vdev+0x112>

	/* TODO: can have a virtio function to set the shared memory I/O */
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8102d36:	2300      	movs	r3, #0
 8102d38:	637b      	str	r3, [r7, #52]	; 0x34
 8102d3a:	e00f      	b.n	8102d5c <rpmsg_init_vdev+0xcc>
		struct virtqueue *vq;

		vq = vdev->vrings_info[i].vq;
 8102d3c:	68bb      	ldr	r3, [r7, #8]
 8102d3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8102d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102d42:	4613      	mov	r3, r2
 8102d44:	005b      	lsls	r3, r3, #1
 8102d46:	4413      	add	r3, r2
 8102d48:	00db      	lsls	r3, r3, #3
 8102d4a:	440b      	add	r3, r1
 8102d4c:	681b      	ldr	r3, [r3, #0]
 8102d4e:	623b      	str	r3, [r7, #32]
		vq->shm_io = shm_io;
 8102d50:	6a3b      	ldr	r3, [r7, #32]
 8102d52:	683a      	ldr	r2, [r7, #0]
 8102d54:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < RPMSG_NUM_VRINGS; i++) {
 8102d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d58:	3301      	adds	r3, #1
 8102d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8102d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d5e:	2b01      	cmp	r3, #1
 8102d60:	d9ec      	bls.n	8102d3c <rpmsg_init_vdev+0xac>
		}
	}
#endif /*!VIRTIO_SLAVE_ONLY*/

	/* Initialize channels and endpoints list */
	metal_list_init(&rdev->endpoints);
 8102d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d64:	4618      	mov	r0, r3
 8102d66:	f7ff fc0c 	bl	8102582 <metal_list_init>

	dev_features = rpmsg_virtio_get_features(rvdev);
 8102d6a:	68f8      	ldr	r0, [r7, #12]
 8102d6c:	f7ff fce5 	bl	810273a <rpmsg_virtio_get_features>
 8102d70:	6278      	str	r0, [r7, #36]	; 0x24

	/*
	 * Create name service announcement endpoint if device supports name
	 * service announcement feature.
	 */
	if ((dev_features & (1 << VIRTIO_RPMSG_F_NS))) {
 8102d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102d74:	f003 0301 	and.w	r3, r3, #1
 8102d78:	2b00      	cmp	r3, #0
 8102d7a:	d011      	beq.n	8102da0 <rpmsg_init_vdev+0x110>
		rpmsg_init_ept(&rdev->ns_ept, "NS",
 8102d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d7e:	f103 0008 	add.w	r0, r3, #8
 8102d82:	2300      	movs	r3, #0
 8102d84:	9301      	str	r3, [sp, #4]
 8102d86:	4b0e      	ldr	r3, [pc, #56]	; (8102dc0 <rpmsg_init_vdev+0x130>)
 8102d88:	9300      	str	r3, [sp, #0]
 8102d8a:	2335      	movs	r3, #53	; 0x35
 8102d8c:	2235      	movs	r2, #53	; 0x35
 8102d8e:	490d      	ldr	r1, [pc, #52]	; (8102dc4 <rpmsg_init_vdev+0x134>)
 8102d90:	f7ff fc85 	bl	810269e <rpmsg_init_ept>
			       RPMSG_NS_EPT_ADDR, RPMSG_NS_EPT_ADDR,
			       rpmsg_virtio_ns_callback, NULL);
		(void)rpmsg_register_endpoint(rdev, &rdev->ns_ept);
 8102d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d96:	3308      	adds	r3, #8
 8102d98:	4619      	mov	r1, r3
 8102d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8102d9c:	f7ff fb2e 	bl	81023fc <rpmsg_register_endpoint>
#ifndef VIRTIO_SLAVE_ONLY
	if (role == RPMSG_MASTER)
		rpmsg_virtio_set_status(rvdev, VIRTIO_CONFIG_STATUS_DRIVER_OK);
#endif /*!VIRTIO_SLAVE_ONLY*/

	return status;
 8102da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8102da2:	4618      	mov	r0, r3
 8102da4:	3738      	adds	r7, #56	; 0x38
 8102da6:	46bd      	mov	sp, r7
 8102da8:	bd80      	pop	{r7, pc}
 8102daa:	bf00      	nop
 8102dac:	0810295d 	.word	0x0810295d
 8102db0:	08104a64 	.word	0x08104a64
 8102db4:	08104a6c 	.word	0x08104a6c
 8102db8:	08102aad 	.word	0x08102aad
 8102dbc:	08102ac1 	.word	0x08102ac1
 8102dc0:	08102bab 	.word	0x08102bab
 8102dc4:	08104a74 	.word	0x08104a74

08102dc8 <metal_machine_cache_flush>:
{
  return 0;
}

void metal_machine_cache_flush(void *addr, unsigned int len)
{
 8102dc8:	b480      	push	{r7}
 8102dca:	b083      	sub	sp, #12
 8102dcc:	af00      	add	r7, sp, #0
 8102dce:	6078      	str	r0, [r7, #4]
 8102dd0:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8102dd2:	bf00      	nop
 8102dd4:	370c      	adds	r7, #12
 8102dd6:	46bd      	mov	sp, r7
 8102dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ddc:	4770      	bx	lr

08102dde <metal_machine_cache_invalidate>:

void metal_machine_cache_invalidate(void *addr, unsigned int len)
{
 8102dde:	b480      	push	{r7}
 8102de0:	b083      	sub	sp, #12
 8102de2:	af00      	add	r7, sp, #0
 8102de4:	6078      	str	r0, [r7, #4]
 8102de6:	6039      	str	r1, [r7, #0]
	(void)addr;
	(void)len;
}
 8102de8:	bf00      	nop
 8102dea:	370c      	adds	r7, #12
 8102dec:	46bd      	mov	sp, r7
 8102dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102df2:	4770      	bx	lr

08102df4 <metal_machine_io_mem_map>:
{
}

void *metal_machine_io_mem_map(void *va, metal_phys_addr_t pa,
			       size_t size, unsigned int flags)
{
 8102df4:	b480      	push	{r7}
 8102df6:	b085      	sub	sp, #20
 8102df8:	af00      	add	r7, sp, #0
 8102dfa:	60f8      	str	r0, [r7, #12]
 8102dfc:	60b9      	str	r1, [r7, #8]
 8102dfe:	607a      	str	r2, [r7, #4]
 8102e00:	603b      	str	r3, [r7, #0]
	(void)va;
	(void)pa;
	(void)size;
	(void)flags;

	return va;
 8102e02:	68fb      	ldr	r3, [r7, #12]
}
 8102e04:	4618      	mov	r0, r3
 8102e06:	3714      	adds	r7, #20
 8102e08:	46bd      	mov	sp, r7
 8102e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e0e:	4770      	bx	lr

08102e10 <virtio_create_virtqueues>:
}

int virtio_create_virtqueues(struct virtio_device *vdev, unsigned int flags,
			     unsigned int nvqs, const char *names[],
			     vq_callback *callbacks[])
{
 8102e10:	b590      	push	{r4, r7, lr}
 8102e12:	b08f      	sub	sp, #60	; 0x3c
 8102e14:	af04      	add	r7, sp, #16
 8102e16:	60f8      	str	r0, [r7, #12]
 8102e18:	60b9      	str	r1, [r7, #8]
 8102e1a:	607a      	str	r2, [r7, #4]
 8102e1c:	603b      	str	r3, [r7, #0]
	struct vring_alloc_info *vring_alloc;
	unsigned int num_vrings, i;
	int ret;
	(void)flags;

	num_vrings = vdev->vrings_num;
 8102e1e:	68fb      	ldr	r3, [r7, #12]
 8102e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102e22:	623b      	str	r3, [r7, #32]
	if (nvqs > num_vrings)
 8102e24:	687a      	ldr	r2, [r7, #4]
 8102e26:	6a3b      	ldr	r3, [r7, #32]
 8102e28:	429a      	cmp	r2, r3
 8102e2a:	d902      	bls.n	8102e32 <virtio_create_virtqueues+0x22>
		return -ERROR_VQUEUE_INVLD_PARAM;
 8102e2c:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8102e30:	e036      	b.n	8102ea0 <virtio_create_virtqueues+0x90>
	/* Initialize virtqueue for each vring */
	for (i = 0; i < nvqs; i++) {
 8102e32:	2300      	movs	r3, #0
 8102e34:	627b      	str	r3, [r7, #36]	; 0x24
 8102e36:	e02e      	b.n	8102e96 <virtio_create_virtqueues+0x86>
		vring_info = &vdev->vrings_info[i];
 8102e38:	68fb      	ldr	r3, [r7, #12]
 8102e3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8102e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102e3e:	4613      	mov	r3, r2
 8102e40:	005b      	lsls	r3, r3, #1
 8102e42:	4413      	add	r3, r2
 8102e44:	00db      	lsls	r3, r3, #3
 8102e46:	440b      	add	r3, r1
 8102e48:	61fb      	str	r3, [r7, #28]

		vring_alloc = &vring_info->info;
 8102e4a:	69fb      	ldr	r3, [r7, #28]
 8102e4c:	3304      	adds	r3, #4
 8102e4e:	61bb      	str	r3, [r7, #24]
			metal_io_block_set(io, offset, 0,
					   vring_size(vring_alloc->num_descs,
						      vring_alloc->align));
		}
#endif
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8102e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102e52:	b298      	uxth	r0, r3
 8102e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102e56:	009b      	lsls	r3, r3, #2
 8102e58:	683a      	ldr	r2, [r7, #0]
 8102e5a:	4413      	add	r3, r2
 8102e5c:	681c      	ldr	r4, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8102e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102e60:	009b      	lsls	r3, r3, #2
 8102e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8102e64:	4413      	add	r3, r2
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8102e66:	681b      	ldr	r3, [r3, #0]
				       callbacks[i], vdev->func->notify,
 8102e68:	68fa      	ldr	r2, [r7, #12]
 8102e6a:	6a12      	ldr	r2, [r2, #32]
		ret = virtqueue_create(vdev, i, names[i], vring_alloc,
 8102e6c:	6a12      	ldr	r2, [r2, #32]
 8102e6e:	69f9      	ldr	r1, [r7, #28]
 8102e70:	6809      	ldr	r1, [r1, #0]
 8102e72:	9102      	str	r1, [sp, #8]
 8102e74:	9201      	str	r2, [sp, #4]
 8102e76:	9300      	str	r3, [sp, #0]
 8102e78:	69bb      	ldr	r3, [r7, #24]
 8102e7a:	4622      	mov	r2, r4
 8102e7c:	4601      	mov	r1, r0
 8102e7e:	68f8      	ldr	r0, [r7, #12]
 8102e80:	f000 f8f6 	bl	8103070 <virtqueue_create>
 8102e84:	6178      	str	r0, [r7, #20]
				       vring_info->vq);
		if (ret)
 8102e86:	697b      	ldr	r3, [r7, #20]
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d001      	beq.n	8102e90 <virtio_create_virtqueues+0x80>
			return ret;
 8102e8c:	697b      	ldr	r3, [r7, #20]
 8102e8e:	e007      	b.n	8102ea0 <virtio_create_virtqueues+0x90>
	for (i = 0; i < nvqs; i++) {
 8102e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102e92:	3301      	adds	r3, #1
 8102e94:	627b      	str	r3, [r7, #36]	; 0x24
 8102e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	429a      	cmp	r2, r3
 8102e9c:	d3cc      	bcc.n	8102e38 <virtio_create_virtqueues+0x28>
	}
	return 0;
 8102e9e:	2300      	movs	r3, #0
}
 8102ea0:	4618      	mov	r0, r3
 8102ea2:	372c      	adds	r7, #44	; 0x2c
 8102ea4:	46bd      	mov	sp, r7
 8102ea6:	bd90      	pop	{r4, r7, pc}

08102ea8 <vring_init>:
	return size;
}

static inline void
vring_init(struct vring *vr, unsigned int num, uint8_t *p, unsigned long align)
{
 8102ea8:	b480      	push	{r7}
 8102eaa:	b085      	sub	sp, #20
 8102eac:	af00      	add	r7, sp, #0
 8102eae:	60f8      	str	r0, [r7, #12]
 8102eb0:	60b9      	str	r1, [r7, #8]
 8102eb2:	607a      	str	r2, [r7, #4]
 8102eb4:	603b      	str	r3, [r7, #0]
	vr->num = num;
 8102eb6:	68fb      	ldr	r3, [r7, #12]
 8102eb8:	68ba      	ldr	r2, [r7, #8]
 8102eba:	601a      	str	r2, [r3, #0]
	vr->desc = (struct vring_desc *)p;
 8102ebc:	68fb      	ldr	r3, [r7, #12]
 8102ebe:	687a      	ldr	r2, [r7, #4]
 8102ec0:	605a      	str	r2, [r3, #4]
	vr->avail = (struct vring_avail *)(p + num * sizeof(struct vring_desc));
 8102ec2:	68bb      	ldr	r3, [r7, #8]
 8102ec4:	011b      	lsls	r3, r3, #4
 8102ec6:	687a      	ldr	r2, [r7, #4]
 8102ec8:	441a      	add	r2, r3
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	609a      	str	r2, [r3, #8]
	vr->used = (struct vring_used *)
	    (((unsigned long)&vr->avail->ring[num] + sizeof(uint16_t) +
 8102ece:	68fb      	ldr	r3, [r7, #12]
 8102ed0:	689a      	ldr	r2, [r3, #8]
 8102ed2:	68bb      	ldr	r3, [r7, #8]
 8102ed4:	005b      	lsls	r3, r3, #1
 8102ed6:	4413      	add	r3, r2
 8102ed8:	3304      	adds	r3, #4
 8102eda:	461a      	mov	r2, r3
 8102edc:	683b      	ldr	r3, [r7, #0]
 8102ede:	4413      	add	r3, r2
	      align - 1) & ~(align - 1));
 8102ee0:	1c5a      	adds	r2, r3, #1
 8102ee2:	683b      	ldr	r3, [r7, #0]
 8102ee4:	425b      	negs	r3, r3
 8102ee6:	4013      	ands	r3, r2
	vr->used = (struct vring_used *)
 8102ee8:	461a      	mov	r2, r3
 8102eea:	68fb      	ldr	r3, [r7, #12]
 8102eec:	60da      	str	r2, [r3, #12]
}
 8102eee:	bf00      	nop
 8102ef0:	3714      	adds	r7, #20
 8102ef2:	46bd      	mov	sp, r7
 8102ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ef8:	4770      	bx	lr

08102efa <vring_need_event>:
 * just incremented index from old to new_idx, should we trigger an
 * event?
 */
static inline int
vring_need_event(uint16_t event_idx, uint16_t new_idx, uint16_t old)
{
 8102efa:	b480      	push	{r7}
 8102efc:	b083      	sub	sp, #12
 8102efe:	af00      	add	r7, sp, #0
 8102f00:	4603      	mov	r3, r0
 8102f02:	80fb      	strh	r3, [r7, #6]
 8102f04:	460b      	mov	r3, r1
 8102f06:	80bb      	strh	r3, [r7, #4]
 8102f08:	4613      	mov	r3, r2
 8102f0a:	807b      	strh	r3, [r7, #2]
	return (uint16_t)(new_idx - event_idx - 1) <
 8102f0c:	88ba      	ldrh	r2, [r7, #4]
 8102f0e:	88fb      	ldrh	r3, [r7, #6]
 8102f10:	1ad3      	subs	r3, r2, r3
 8102f12:	b29b      	uxth	r3, r3
 8102f14:	3b01      	subs	r3, #1
 8102f16:	b29a      	uxth	r2, r3
	    (uint16_t)(new_idx - old);
 8102f18:	88b9      	ldrh	r1, [r7, #4]
 8102f1a:	887b      	ldrh	r3, [r7, #2]
 8102f1c:	1acb      	subs	r3, r1, r3
 8102f1e:	b29b      	uxth	r3, r3
	return (uint16_t)(new_idx - event_idx - 1) <
 8102f20:	429a      	cmp	r2, r3
 8102f22:	bf34      	ite	cc
 8102f24:	2301      	movcc	r3, #1
 8102f26:	2300      	movcs	r3, #0
 8102f28:	b2db      	uxtb	r3, r3
}
 8102f2a:	4618      	mov	r0, r3
 8102f2c:	370c      	adds	r7, #12
 8102f2e:	46bd      	mov	sp, r7
 8102f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f34:	4770      	bx	lr

08102f36 <metal_io_virt>:
{
 8102f36:	b480      	push	{r7}
 8102f38:	b083      	sub	sp, #12
 8102f3a:	af00      	add	r7, sp, #0
 8102f3c:	6078      	str	r0, [r7, #4]
 8102f3e:	6039      	str	r1, [r7, #0]
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	681b      	ldr	r3, [r3, #0]
		: NULL);
 8102f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102f48:	d009      	beq.n	8102f5e <metal_io_virt+0x28>
	return (io->virt != METAL_BAD_VA && offset <= io->size
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	689b      	ldr	r3, [r3, #8]
 8102f4e:	683a      	ldr	r2, [r7, #0]
 8102f50:	429a      	cmp	r2, r3
 8102f52:	d804      	bhi.n	8102f5e <metal_io_virt+0x28>
		? (uint8_t *)io->virt + offset
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681a      	ldr	r2, [r3, #0]
		: NULL);
 8102f58:	683b      	ldr	r3, [r7, #0]
 8102f5a:	4413      	add	r3, r2
 8102f5c:	e000      	b.n	8102f60 <metal_io_virt+0x2a>
 8102f5e:	2300      	movs	r3, #0
}
 8102f60:	4618      	mov	r0, r3
 8102f62:	370c      	adds	r7, #12
 8102f64:	46bd      	mov	sp, r7
 8102f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f6a:	4770      	bx	lr

08102f6c <metal_io_phys>:
{
 8102f6c:	b480      	push	{r7}
 8102f6e:	b085      	sub	sp, #20
 8102f70:	af00      	add	r7, sp, #0
 8102f72:	6078      	str	r0, [r7, #4]
 8102f74:	6039      	str	r1, [r7, #0]
	unsigned long page = (io->page_shift >=
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	68db      	ldr	r3, [r3, #12]
			     0 : offset >> io->page_shift);
 8102f7a:	2b1f      	cmp	r3, #31
 8102f7c:	d805      	bhi.n	8102f8a <metal_io_phys+0x1e>
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	68db      	ldr	r3, [r3, #12]
 8102f82:	683a      	ldr	r2, [r7, #0]
 8102f84:	fa22 f303 	lsr.w	r3, r2, r3
 8102f88:	e000      	b.n	8102f8c <metal_io_phys+0x20>
 8102f8a:	2300      	movs	r3, #0
	unsigned long page = (io->page_shift >=
 8102f8c:	60fb      	str	r3, [r7, #12]
	return (io->physmap != NULL && offset <= io->size
 8102f8e:	687b      	ldr	r3, [r7, #4]
 8102f90:	685b      	ldr	r3, [r3, #4]
		: METAL_BAD_PHYS);
 8102f92:	2b00      	cmp	r3, #0
 8102f94:	d010      	beq.n	8102fb8 <metal_io_phys+0x4c>
	return (io->physmap != NULL && offset <= io->size
 8102f96:	687b      	ldr	r3, [r7, #4]
 8102f98:	689b      	ldr	r3, [r3, #8]
 8102f9a:	683a      	ldr	r2, [r7, #0]
 8102f9c:	429a      	cmp	r2, r3
 8102f9e:	d80b      	bhi.n	8102fb8 <metal_io_phys+0x4c>
		? io->physmap[page] + (offset & io->page_mask)
 8102fa0:	687b      	ldr	r3, [r7, #4]
 8102fa2:	685a      	ldr	r2, [r3, #4]
 8102fa4:	68fb      	ldr	r3, [r7, #12]
 8102fa6:	009b      	lsls	r3, r3, #2
 8102fa8:	4413      	add	r3, r2
 8102faa:	681a      	ldr	r2, [r3, #0]
 8102fac:	687b      	ldr	r3, [r7, #4]
 8102fae:	6919      	ldr	r1, [r3, #16]
 8102fb0:	683b      	ldr	r3, [r7, #0]
 8102fb2:	400b      	ands	r3, r1
		: METAL_BAD_PHYS);
 8102fb4:	4413      	add	r3, r2
 8102fb6:	e001      	b.n	8102fbc <metal_io_phys+0x50>
 8102fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	3714      	adds	r7, #20
 8102fc0:	46bd      	mov	sp, r7
 8102fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fc6:	4770      	bx	lr

08102fc8 <metal_io_phys_to_offset>:
{
 8102fc8:	b580      	push	{r7, lr}
 8102fca:	b084      	sub	sp, #16
 8102fcc:	af00      	add	r7, sp, #0
 8102fce:	6078      	str	r0, [r7, #4]
 8102fd0:	6039      	str	r1, [r7, #0]
		(io->page_mask == (metal_phys_addr_t)(-1) ?
 8102fd2:	687b      	ldr	r3, [r7, #4]
 8102fd4:	691b      	ldr	r3, [r3, #16]
		phys - io->physmap[0] :  phys & io->page_mask);
 8102fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8102fda:	d105      	bne.n	8102fe8 <metal_io_phys_to_offset+0x20>
 8102fdc:	687b      	ldr	r3, [r7, #4]
 8102fde:	685b      	ldr	r3, [r3, #4]
 8102fe0:	681b      	ldr	r3, [r3, #0]
 8102fe2:	683a      	ldr	r2, [r7, #0]
 8102fe4:	1ad3      	subs	r3, r2, r3
 8102fe6:	e003      	b.n	8102ff0 <metal_io_phys_to_offset+0x28>
 8102fe8:	687b      	ldr	r3, [r7, #4]
 8102fea:	691a      	ldr	r2, [r3, #16]
 8102fec:	683b      	ldr	r3, [r7, #0]
 8102fee:	4013      	ands	r3, r2
	unsigned long offset =
 8102ff0:	60fb      	str	r3, [r7, #12]
		if (metal_io_phys(io, offset) == phys)
 8102ff2:	68f9      	ldr	r1, [r7, #12]
 8102ff4:	6878      	ldr	r0, [r7, #4]
 8102ff6:	f7ff ffb9 	bl	8102f6c <metal_io_phys>
 8102ffa:	4602      	mov	r2, r0
 8102ffc:	683b      	ldr	r3, [r7, #0]
 8102ffe:	4293      	cmp	r3, r2
 8103000:	d101      	bne.n	8103006 <metal_io_phys_to_offset+0x3e>
			return offset;
 8103002:	68fb      	ldr	r3, [r7, #12]
 8103004:	e00c      	b.n	8103020 <metal_io_phys_to_offset+0x58>
		offset += io->page_mask + 1;
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	691a      	ldr	r2, [r3, #16]
 810300a:	68fb      	ldr	r3, [r7, #12]
 810300c:	4413      	add	r3, r2
 810300e:	3301      	adds	r3, #1
 8103010:	60fb      	str	r3, [r7, #12]
	} while (offset < io->size);
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	689b      	ldr	r3, [r3, #8]
 8103016:	68fa      	ldr	r2, [r7, #12]
 8103018:	429a      	cmp	r2, r3
 810301a:	d3ea      	bcc.n	8102ff2 <metal_io_phys_to_offset+0x2a>
	return METAL_BAD_OFFSET;
 810301c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8103020:	4618      	mov	r0, r3
 8103022:	3710      	adds	r7, #16
 8103024:	46bd      	mov	sp, r7
 8103026:	bd80      	pop	{r7, pc}

08103028 <metal_io_phys_to_virt>:
{
 8103028:	b580      	push	{r7, lr}
 810302a:	b082      	sub	sp, #8
 810302c:	af00      	add	r7, sp, #0
 810302e:	6078      	str	r0, [r7, #4]
 8103030:	6039      	str	r1, [r7, #0]
	return metal_io_virt(io, metal_io_phys_to_offset(io, phys));
 8103032:	6839      	ldr	r1, [r7, #0]
 8103034:	6878      	ldr	r0, [r7, #4]
 8103036:	f7ff ffc7 	bl	8102fc8 <metal_io_phys_to_offset>
 810303a:	4603      	mov	r3, r0
 810303c:	4619      	mov	r1, r3
 810303e:	6878      	ldr	r0, [r7, #4]
 8103040:	f7ff ff79 	bl	8102f36 <metal_io_virt>
 8103044:	4603      	mov	r3, r0
}
 8103046:	4618      	mov	r0, r3
 8103048:	3708      	adds	r7, #8
 810304a:	46bd      	mov	sp, r7
 810304c:	bd80      	pop	{r7, pc}

0810304e <virtqueue_phys_to_virt>:
static int virtqueue_nused(struct virtqueue *vq);

/* Default implementation of P2V based on libmetal */
static inline void *virtqueue_phys_to_virt(struct virtqueue *vq,
					   metal_phys_addr_t phys)
{
 810304e:	b580      	push	{r7, lr}
 8103050:	b084      	sub	sp, #16
 8103052:	af00      	add	r7, sp, #0
 8103054:	6078      	str	r0, [r7, #4]
 8103056:	6039      	str	r1, [r7, #0]
	struct metal_io_region *io = vq->shm_io;
 8103058:	687b      	ldr	r3, [r7, #4]
 810305a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810305c:	60fb      	str	r3, [r7, #12]

	return metal_io_phys_to_virt(io, phys);
 810305e:	6839      	ldr	r1, [r7, #0]
 8103060:	68f8      	ldr	r0, [r7, #12]
 8103062:	f7ff ffe1 	bl	8103028 <metal_io_phys_to_virt>
 8103066:	4603      	mov	r3, r0
}
 8103068:	4618      	mov	r0, r3
 810306a:	3710      	adds	r7, #16
 810306c:	46bd      	mov	sp, r7
 810306e:	bd80      	pop	{r7, pc}

08103070 <virtqueue_create>:
int virtqueue_create(struct virtio_device *virt_dev, unsigned short id,
		     const char *name, struct vring_alloc_info *ring,
		     void (*callback)(struct virtqueue *vq),
		     void (*notify)(struct virtqueue *vq),
		     struct virtqueue *vq)
{
 8103070:	b580      	push	{r7, lr}
 8103072:	b086      	sub	sp, #24
 8103074:	af00      	add	r7, sp, #0
 8103076:	60f8      	str	r0, [r7, #12]
 8103078:	607a      	str	r2, [r7, #4]
 810307a:	603b      	str	r3, [r7, #0]
 810307c:	460b      	mov	r3, r1
 810307e:	817b      	strh	r3, [r7, #10]
	int status = VQUEUE_SUCCESS;
 8103080:	2300      	movs	r3, #0
 8103082:	617b      	str	r3, [r7, #20]
	VQ_PARAM_CHK(ring->num_descs == 0, status, ERROR_VQUEUE_INVLD_PARAM);
	VQ_PARAM_CHK(ring->num_descs & (ring->num_descs - 1), status,
		     ERROR_VRING_ALIGN);
	VQ_PARAM_CHK(vq == NULL, status, ERROR_NO_MEM);

	if (status == VQUEUE_SUCCESS) {
 8103084:	697b      	ldr	r3, [r7, #20]
 8103086:	2b00      	cmp	r3, #0
 8103088:	d121      	bne.n	81030ce <virtqueue_create+0x5e>
		vq->vq_dev = virt_dev;
 810308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810308c:	68fa      	ldr	r2, [r7, #12]
 810308e:	601a      	str	r2, [r3, #0]
		vq->vq_name =  name;
 8103090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103092:	687a      	ldr	r2, [r7, #4]
 8103094:	605a      	str	r2, [r3, #4]
		vq->vq_queue_index = id;
 8103096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103098:	897a      	ldrh	r2, [r7, #10]
 810309a:	811a      	strh	r2, [r3, #8]
		vq->vq_nentries = ring->num_descs;
 810309c:	683b      	ldr	r3, [r7, #0]
 810309e:	891a      	ldrh	r2, [r3, #8]
 81030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030a2:	815a      	strh	r2, [r3, #10]
		vq->vq_free_cnt = vq->vq_nentries;
 81030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030a6:	895a      	ldrh	r2, [r3, #10]
 81030a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030aa:	851a      	strh	r2, [r3, #40]	; 0x28
		vq->callback = callback;
 81030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030ae:	6a3a      	ldr	r2, [r7, #32]
 81030b0:	611a      	str	r2, [r3, #16]
		vq->notify = notify;
 81030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81030b6:	615a      	str	r2, [r3, #20]

		/* Initialize vring control block in virtqueue. */
		vq_ring_init(vq, (void *)ring->vaddr, ring->align);
 81030b8:	683b      	ldr	r3, [r7, #0]
 81030ba:	6819      	ldr	r1, [r3, #0]
 81030bc:	683b      	ldr	r3, [r7, #0]
 81030be:	685b      	ldr	r3, [r3, #4]
 81030c0:	461a      	mov	r2, r3
 81030c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81030c4:	f000 f8fb 	bl	81032be <vq_ring_init>

		/* Disable callbacks - will be enabled by the application
		 * once initialization is completed.
		 */
		virtqueue_disable_cb(vq);
 81030c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81030ca:	f000 f885 	bl	81031d8 <virtqueue_disable_cb>
	}

	return (status);
 81030ce:	697b      	ldr	r3, [r7, #20]
}
 81030d0:	4618      	mov	r0, r3
 81030d2:	3718      	adds	r7, #24
 81030d4:	46bd      	mov	sp, r7
 81030d6:	bd80      	pop	{r7, pc}

081030d8 <virtqueue_get_available_buffer>:
 *
 * @return                          - Pointer to available buffer
 */
void *virtqueue_get_available_buffer(struct virtqueue *vq, uint16_t *avail_idx,
				     uint32_t *len)
{
 81030d8:	b580      	push	{r7, lr}
 81030da:	b086      	sub	sp, #24
 81030dc:	af00      	add	r7, sp, #0
 81030de:	60f8      	str	r0, [r7, #12]
 81030e0:	60b9      	str	r1, [r7, #8]
 81030e2:	607a      	str	r2, [r7, #4]
	uint16_t head_idx = 0;
 81030e4:	2300      	movs	r3, #0
 81030e6:	82fb      	strh	r3, [r7, #22]
	void *buffer;

	atomic_thread_fence(memory_order_seq_cst);
 81030e8:	f3bf 8f5b 	dmb	ish
	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 81030ec:	68fb      	ldr	r3, [r7, #12]
 81030ee:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 81030f0:	68fb      	ldr	r3, [r7, #12]
 81030f2:	6a1b      	ldr	r3, [r3, #32]
 81030f4:	885b      	ldrh	r3, [r3, #2]
 81030f6:	429a      	cmp	r2, r3
 81030f8:	d101      	bne.n	81030fe <virtqueue_get_available_buffer+0x26>
		return NULL;
 81030fa:	2300      	movs	r3, #0
 81030fc:	e02e      	b.n	810315c <virtqueue_get_available_buffer+0x84>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx++ & (vq->vq_nentries - 1);
 81030fe:	68fb      	ldr	r3, [r7, #12]
 8103100:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8103102:	1c5a      	adds	r2, r3, #1
 8103104:	b291      	uxth	r1, r2
 8103106:	68fa      	ldr	r2, [r7, #12]
 8103108:	8691      	strh	r1, [r2, #52]	; 0x34
 810310a:	b21a      	sxth	r2, r3
 810310c:	68fb      	ldr	r3, [r7, #12]
 810310e:	895b      	ldrh	r3, [r3, #10]
 8103110:	3b01      	subs	r3, #1
 8103112:	b29b      	uxth	r3, r3
 8103114:	b21b      	sxth	r3, r3
 8103116:	4013      	ands	r3, r2
 8103118:	b21b      	sxth	r3, r3
 810311a:	82fb      	strh	r3, [r7, #22]
	*avail_idx = vq->vq_ring.avail->ring[head_idx];
 810311c:	68fb      	ldr	r3, [r7, #12]
 810311e:	6a1a      	ldr	r2, [r3, #32]
 8103120:	8afb      	ldrh	r3, [r7, #22]
 8103122:	005b      	lsls	r3, r3, #1
 8103124:	4413      	add	r3, r2
 8103126:	889a      	ldrh	r2, [r3, #4]
 8103128:	68bb      	ldr	r3, [r7, #8]
 810312a:	801a      	strh	r2, [r3, #0]

	buffer = virtqueue_phys_to_virt(vq, vq->vq_ring.desc[*avail_idx].addr);
 810312c:	68fb      	ldr	r3, [r7, #12]
 810312e:	69da      	ldr	r2, [r3, #28]
 8103130:	68bb      	ldr	r3, [r7, #8]
 8103132:	881b      	ldrh	r3, [r3, #0]
 8103134:	011b      	lsls	r3, r3, #4
 8103136:	4413      	add	r3, r2
 8103138:	e9d3 2300 	ldrd	r2, r3, [r3]
 810313c:	4613      	mov	r3, r2
 810313e:	4619      	mov	r1, r3
 8103140:	68f8      	ldr	r0, [r7, #12]
 8103142:	f7ff ff84 	bl	810304e <virtqueue_phys_to_virt>
 8103146:	6138      	str	r0, [r7, #16]
	*len = vq->vq_ring.desc[*avail_idx].len;
 8103148:	68fb      	ldr	r3, [r7, #12]
 810314a:	69da      	ldr	r2, [r3, #28]
 810314c:	68bb      	ldr	r3, [r7, #8]
 810314e:	881b      	ldrh	r3, [r3, #0]
 8103150:	011b      	lsls	r3, r3, #4
 8103152:	4413      	add	r3, r2
 8103154:	689a      	ldr	r2, [r3, #8]
 8103156:	687b      	ldr	r3, [r7, #4]
 8103158:	601a      	str	r2, [r3, #0]

	VQUEUE_IDLE(vq);

	return buffer;
 810315a:	693b      	ldr	r3, [r7, #16]
}
 810315c:	4618      	mov	r0, r3
 810315e:	3718      	adds	r7, #24
 8103160:	46bd      	mov	sp, r7
 8103162:	bd80      	pop	{r7, pc}

08103164 <virtqueue_add_consumed_buffer>:
 *
 * @return                       - Function status
 */
int virtqueue_add_consumed_buffer(struct virtqueue *vq, uint16_t head_idx,
				  uint32_t len)
{
 8103164:	b480      	push	{r7}
 8103166:	b087      	sub	sp, #28
 8103168:	af00      	add	r7, sp, #0
 810316a:	60f8      	str	r0, [r7, #12]
 810316c:	460b      	mov	r3, r1
 810316e:	607a      	str	r2, [r7, #4]
 8103170:	817b      	strh	r3, [r7, #10]
	struct vring_used_elem *used_desc = NULL;
 8103172:	2300      	movs	r3, #0
 8103174:	617b      	str	r3, [r7, #20]
	uint16_t used_idx;

	if (head_idx > vq->vq_nentries) {
 8103176:	68fb      	ldr	r3, [r7, #12]
 8103178:	895b      	ldrh	r3, [r3, #10]
 810317a:	897a      	ldrh	r2, [r7, #10]
 810317c:	429a      	cmp	r2, r3
 810317e:	d901      	bls.n	8103184 <virtqueue_add_consumed_buffer+0x20>
		return ERROR_VRING_NO_BUFF;
 8103180:	4b14      	ldr	r3, [pc, #80]	; (81031d4 <virtqueue_add_consumed_buffer+0x70>)
 8103182:	e021      	b.n	81031c8 <virtqueue_add_consumed_buffer+0x64>
	}

	VQUEUE_BUSY(vq);

	used_idx = vq->vq_ring.used->idx & (vq->vq_nentries - 1);
 8103184:	68fb      	ldr	r3, [r7, #12]
 8103186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103188:	885b      	ldrh	r3, [r3, #2]
 810318a:	b21a      	sxth	r2, r3
 810318c:	68fb      	ldr	r3, [r7, #12]
 810318e:	895b      	ldrh	r3, [r3, #10]
 8103190:	3b01      	subs	r3, #1
 8103192:	b29b      	uxth	r3, r3
 8103194:	b21b      	sxth	r3, r3
 8103196:	4013      	ands	r3, r2
 8103198:	b21b      	sxth	r3, r3
 810319a:	827b      	strh	r3, [r7, #18]
	used_desc = &vq->vq_ring.used->ring[used_idx];
 810319c:	68fb      	ldr	r3, [r7, #12]
 810319e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81031a0:	8a7b      	ldrh	r3, [r7, #18]
 81031a2:	00db      	lsls	r3, r3, #3
 81031a4:	4413      	add	r3, r2
 81031a6:	3304      	adds	r3, #4
 81031a8:	617b      	str	r3, [r7, #20]
	used_desc->id = head_idx;
 81031aa:	897a      	ldrh	r2, [r7, #10]
 81031ac:	697b      	ldr	r3, [r7, #20]
 81031ae:	601a      	str	r2, [r3, #0]
	used_desc->len = len;
 81031b0:	697b      	ldr	r3, [r7, #20]
 81031b2:	687a      	ldr	r2, [r7, #4]
 81031b4:	605a      	str	r2, [r3, #4]

	atomic_thread_fence(memory_order_seq_cst);
 81031b6:	f3bf 8f5b 	dmb	ish

	vq->vq_ring.used->idx++;
 81031ba:	68fb      	ldr	r3, [r7, #12]
 81031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81031be:	885a      	ldrh	r2, [r3, #2]
 81031c0:	3201      	adds	r2, #1
 81031c2:	b292      	uxth	r2, r2
 81031c4:	805a      	strh	r2, [r3, #2]

	VQUEUE_IDLE(vq);

	return VQUEUE_SUCCESS;
 81031c6:	2300      	movs	r3, #0
}
 81031c8:	4618      	mov	r0, r3
 81031ca:	371c      	adds	r7, #28
 81031cc:	46bd      	mov	sp, r7
 81031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031d2:	4770      	bx	lr
 81031d4:	fffff441 	.word	0xfffff441

081031d8 <virtqueue_disable_cb>:
 *
 * @param vq           - Pointer to VirtIO queue control block
 *
 */
void virtqueue_disable_cb(struct virtqueue *vq)
{
 81031d8:	b480      	push	{r7}
 81031da:	b083      	sub	sp, #12
 81031dc:	af00      	add	r7, sp, #0
 81031de:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 81031e0:	687b      	ldr	r3, [r7, #4]
 81031e2:	68db      	ldr	r3, [r3, #12]
 81031e4:	f003 0302 	and.w	r3, r3, #2
 81031e8:	2b00      	cmp	r3, #0
 81031ea:	d010      	beq.n	810320e <virtqueue_disable_cb+0x36>
		vring_used_event(&vq->vq_ring) =
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 81031ec:	687b      	ldr	r3, [r7, #4]
 81031ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	895b      	ldrh	r3, [r3, #10]
 81031f4:	1ad3      	subs	r3, r2, r3
 81031f6:	b299      	uxth	r1, r3
		vring_used_event(&vq->vq_ring) =
 81031f8:	687b      	ldr	r3, [r7, #4]
 81031fa:	6a1a      	ldr	r2, [r3, #32]
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	699b      	ldr	r3, [r3, #24]
		    vq->vq_used_cons_idx - vq->vq_nentries - 1;
 8103200:	3901      	subs	r1, #1
 8103202:	b289      	uxth	r1, r1
		vring_used_event(&vq->vq_ring) =
 8103204:	005b      	lsls	r3, r3, #1
 8103206:	4413      	add	r3, r2
 8103208:	460a      	mov	r2, r1
 810320a:	809a      	strh	r2, [r3, #4]
	} else {
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
	}

	VQUEUE_IDLE(vq);
}
 810320c:	e008      	b.n	8103220 <virtqueue_disable_cb+0x48>
		vq->vq_ring.avail->flags |= VRING_AVAIL_F_NO_INTERRUPT;
 810320e:	687b      	ldr	r3, [r7, #4]
 8103210:	6a1b      	ldr	r3, [r3, #32]
 8103212:	881a      	ldrh	r2, [r3, #0]
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	6a1b      	ldr	r3, [r3, #32]
 8103218:	f042 0201 	orr.w	r2, r2, #1
 810321c:	b292      	uxth	r2, r2
 810321e:	801a      	strh	r2, [r3, #0]
}
 8103220:	bf00      	nop
 8103222:	370c      	adds	r7, #12
 8103224:	46bd      	mov	sp, r7
 8103226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810322a:	4770      	bx	lr

0810322c <virtqueue_kick>:
 * virtqueue_kick - Notifies other side that there is buffer available for it.
 *
 * @param vq      - Pointer to VirtIO queue control block
 */
void virtqueue_kick(struct virtqueue *vq)
{
 810322c:	b580      	push	{r7, lr}
 810322e:	b082      	sub	sp, #8
 8103230:	af00      	add	r7, sp, #0
 8103232:	6078      	str	r0, [r7, #4]
	VQUEUE_BUSY(vq);

	/* Ensure updated avail->idx is visible to host. */
	atomic_thread_fence(memory_order_seq_cst);
 8103234:	f3bf 8f5b 	dmb	ish

	if (vq_ring_must_notify_host(vq))
 8103238:	6878      	ldr	r0, [r7, #4]
 810323a:	f000 f885 	bl	8103348 <vq_ring_must_notify_host>
 810323e:	4603      	mov	r3, r0
 8103240:	2b00      	cmp	r3, #0
 8103242:	d002      	beq.n	810324a <virtqueue_kick+0x1e>
		vq_ring_notify_host(vq);
 8103244:	6878      	ldr	r0, [r7, #4]
 8103246:	f000 f8b5 	bl	81033b4 <vq_ring_notify_host>

	vq->vq_queued_cnt = 0;
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	2200      	movs	r2, #0
 810324e:	855a      	strh	r2, [r3, #42]	; 0x2a

	VQUEUE_IDLE(vq);
}
 8103250:	bf00      	nop
 8103252:	3708      	adds	r7, #8
 8103254:	46bd      	mov	sp, r7
 8103256:	bd80      	pop	{r7, pc}

08103258 <virtqueue_get_desc_size>:
 * @param vq            - Pointer to VirtIO queue control block
 *
 * @return              - Descriptor length
 */
uint32_t virtqueue_get_desc_size(struct virtqueue *vq)
{
 8103258:	b480      	push	{r7}
 810325a:	b085      	sub	sp, #20
 810325c:	af00      	add	r7, sp, #0
 810325e:	6078      	str	r0, [r7, #4]
	uint16_t head_idx = 0;
 8103260:	2300      	movs	r3, #0
 8103262:	81fb      	strh	r3, [r7, #14]
	uint16_t avail_idx = 0;
 8103264:	2300      	movs	r3, #0
 8103266:	81bb      	strh	r3, [r7, #12]
	uint32_t len = 0;
 8103268:	2300      	movs	r3, #0
 810326a:	60bb      	str	r3, [r7, #8]

	if (vq->vq_available_idx == vq->vq_ring.avail->idx) {
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	6a1b      	ldr	r3, [r3, #32]
 8103274:	885b      	ldrh	r3, [r3, #2]
 8103276:	429a      	cmp	r2, r3
 8103278:	d101      	bne.n	810327e <virtqueue_get_desc_size+0x26>
		return 0;
 810327a:	2300      	movs	r3, #0
 810327c:	e019      	b.n	81032b2 <virtqueue_get_desc_size+0x5a>
	}

	VQUEUE_BUSY(vq);

	head_idx = vq->vq_available_idx & (vq->vq_nentries - 1);
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8103282:	b21a      	sxth	r2, r3
 8103284:	687b      	ldr	r3, [r7, #4]
 8103286:	895b      	ldrh	r3, [r3, #10]
 8103288:	3b01      	subs	r3, #1
 810328a:	b29b      	uxth	r3, r3
 810328c:	b21b      	sxth	r3, r3
 810328e:	4013      	ands	r3, r2
 8103290:	b21b      	sxth	r3, r3
 8103292:	81fb      	strh	r3, [r7, #14]
	avail_idx = vq->vq_ring.avail->ring[head_idx];
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	6a1a      	ldr	r2, [r3, #32]
 8103298:	89fb      	ldrh	r3, [r7, #14]
 810329a:	005b      	lsls	r3, r3, #1
 810329c:	4413      	add	r3, r2
 810329e:	889b      	ldrh	r3, [r3, #4]
 81032a0:	81bb      	strh	r3, [r7, #12]
	len = vq->vq_ring.desc[avail_idx].len;
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	69da      	ldr	r2, [r3, #28]
 81032a6:	89bb      	ldrh	r3, [r7, #12]
 81032a8:	011b      	lsls	r3, r3, #4
 81032aa:	4413      	add	r3, r2
 81032ac:	689b      	ldr	r3, [r3, #8]
 81032ae:	60bb      	str	r3, [r7, #8]

	VQUEUE_IDLE(vq);

	return len;
 81032b0:	68bb      	ldr	r3, [r7, #8]
}
 81032b2:	4618      	mov	r0, r3
 81032b4:	3714      	adds	r7, #20
 81032b6:	46bd      	mov	sp, r7
 81032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032bc:	4770      	bx	lr

081032be <vq_ring_init>:
 *
 * vq_ring_init
 *
 */
static void vq_ring_init(struct virtqueue *vq, void *ring_mem, int alignment)
{
 81032be:	b580      	push	{r7, lr}
 81032c0:	b088      	sub	sp, #32
 81032c2:	af00      	add	r7, sp, #0
 81032c4:	60f8      	str	r0, [r7, #12]
 81032c6:	60b9      	str	r1, [r7, #8]
 81032c8:	607a      	str	r2, [r7, #4]
	struct vring *vr;
	int i, size;

	size = vq->vq_nentries;
 81032ca:	68fb      	ldr	r3, [r7, #12]
 81032cc:	895b      	ldrh	r3, [r3, #10]
 81032ce:	61bb      	str	r3, [r7, #24]
	vr = &vq->vq_ring;
 81032d0:	68fb      	ldr	r3, [r7, #12]
 81032d2:	3318      	adds	r3, #24
 81032d4:	617b      	str	r3, [r7, #20]

	vring_init(vr, size, (unsigned char *)ring_mem, alignment);
 81032d6:	69b9      	ldr	r1, [r7, #24]
 81032d8:	687b      	ldr	r3, [r7, #4]
 81032da:	68ba      	ldr	r2, [r7, #8]
 81032dc:	6978      	ldr	r0, [r7, #20]
 81032de:	f7ff fde3 	bl	8102ea8 <vring_init>

	for (i = 0; i < size - 1; i++)
 81032e2:	2300      	movs	r3, #0
 81032e4:	61fb      	str	r3, [r7, #28]
 81032e6:	e00c      	b.n	8103302 <vq_ring_init+0x44>
		vr->desc[i].next = i + 1;
 81032e8:	69fb      	ldr	r3, [r7, #28]
 81032ea:	b29a      	uxth	r2, r3
 81032ec:	697b      	ldr	r3, [r7, #20]
 81032ee:	6859      	ldr	r1, [r3, #4]
 81032f0:	69fb      	ldr	r3, [r7, #28]
 81032f2:	011b      	lsls	r3, r3, #4
 81032f4:	440b      	add	r3, r1
 81032f6:	3201      	adds	r2, #1
 81032f8:	b292      	uxth	r2, r2
 81032fa:	81da      	strh	r2, [r3, #14]
	for (i = 0; i < size - 1; i++)
 81032fc:	69fb      	ldr	r3, [r7, #28]
 81032fe:	3301      	adds	r3, #1
 8103300:	61fb      	str	r3, [r7, #28]
 8103302:	69bb      	ldr	r3, [r7, #24]
 8103304:	3b01      	subs	r3, #1
 8103306:	69fa      	ldr	r2, [r7, #28]
 8103308:	429a      	cmp	r2, r3
 810330a:	dbed      	blt.n	81032e8 <vq_ring_init+0x2a>
	vr->desc[i].next = VQ_RING_DESC_CHAIN_END;
 810330c:	697b      	ldr	r3, [r7, #20]
 810330e:	685a      	ldr	r2, [r3, #4]
 8103310:	69fb      	ldr	r3, [r7, #28]
 8103312:	011b      	lsls	r3, r3, #4
 8103314:	4413      	add	r3, r2
 8103316:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 810331a:	81da      	strh	r2, [r3, #14]
}
 810331c:	bf00      	nop
 810331e:	3720      	adds	r7, #32
 8103320:	46bd      	mov	sp, r7
 8103322:	bd80      	pop	{r7, pc}

08103324 <virtqueue_notification>:
 *
 * virtqueue_interrupt
 *
 */
void virtqueue_notification(struct virtqueue *vq)
{
 8103324:	b580      	push	{r7, lr}
 8103326:	b082      	sub	sp, #8
 8103328:	af00      	add	r7, sp, #0
 810332a:	6078      	str	r0, [r7, #4]
	atomic_thread_fence(memory_order_seq_cst);
 810332c:	f3bf 8f5b 	dmb	ish
	if (vq->callback)
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	691b      	ldr	r3, [r3, #16]
 8103334:	2b00      	cmp	r3, #0
 8103336:	d003      	beq.n	8103340 <virtqueue_notification+0x1c>
		vq->callback(vq);
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	691b      	ldr	r3, [r3, #16]
 810333c:	6878      	ldr	r0, [r7, #4]
 810333e:	4798      	blx	r3
}
 8103340:	bf00      	nop
 8103342:	3708      	adds	r7, #8
 8103344:	46bd      	mov	sp, r7
 8103346:	bd80      	pop	{r7, pc}

08103348 <vq_ring_must_notify_host>:
 *
 * vq_ring_must_notify_host
 *
 */
static int vq_ring_must_notify_host(struct virtqueue *vq)
{
 8103348:	b580      	push	{r7, lr}
 810334a:	b084      	sub	sp, #16
 810334c:	af00      	add	r7, sp, #0
 810334e:	6078      	str	r0, [r7, #4]
	uint16_t new_idx, prev_idx, event_idx;

	if (vq->vq_flags & VIRTQUEUE_FLAG_EVENT_IDX) {
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	68db      	ldr	r3, [r3, #12]
 8103354:	f003 0302 	and.w	r3, r3, #2
 8103358:	2b00      	cmp	r3, #0
 810335a:	d01d      	beq.n	8103398 <vq_ring_must_notify_host+0x50>
		new_idx = vq->vq_ring.avail->idx;
 810335c:	687b      	ldr	r3, [r7, #4]
 810335e:	6a1b      	ldr	r3, [r3, #32]
 8103360:	885b      	ldrh	r3, [r3, #2]
 8103362:	81fb      	strh	r3, [r7, #14]
		prev_idx = new_idx - vq->vq_queued_cnt;
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103368:	89fa      	ldrh	r2, [r7, #14]
 810336a:	1ad3      	subs	r3, r2, r3
 810336c:	81bb      	strh	r3, [r7, #12]
		event_idx = vring_avail_event(&vq->vq_ring);
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	699b      	ldr	r3, [r3, #24]
 8103376:	00db      	lsls	r3, r3, #3
 8103378:	4413      	add	r3, r2
 810337a:	685b      	ldr	r3, [r3, #4]
 810337c:	817b      	strh	r3, [r7, #10]

		return (vring_need_event(event_idx, new_idx, prev_idx) != 0);
 810337e:	89ba      	ldrh	r2, [r7, #12]
 8103380:	89f9      	ldrh	r1, [r7, #14]
 8103382:	897b      	ldrh	r3, [r7, #10]
 8103384:	4618      	mov	r0, r3
 8103386:	f7ff fdb8 	bl	8102efa <vring_need_event>
 810338a:	4603      	mov	r3, r0
 810338c:	2b00      	cmp	r3, #0
 810338e:	bf14      	ite	ne
 8103390:	2301      	movne	r3, #1
 8103392:	2300      	moveq	r3, #0
 8103394:	b2db      	uxtb	r3, r3
 8103396:	e009      	b.n	81033ac <vq_ring_must_notify_host+0x64>
	}

	return ((vq->vq_ring.used->flags & VRING_USED_F_NO_NOTIFY) == 0);
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810339c:	881b      	ldrh	r3, [r3, #0]
 810339e:	f003 0301 	and.w	r3, r3, #1
 81033a2:	2b00      	cmp	r3, #0
 81033a4:	bf0c      	ite	eq
 81033a6:	2301      	moveq	r3, #1
 81033a8:	2300      	movne	r3, #0
 81033aa:	b2db      	uxtb	r3, r3
}
 81033ac:	4618      	mov	r0, r3
 81033ae:	3710      	adds	r7, #16
 81033b0:	46bd      	mov	sp, r7
 81033b2:	bd80      	pop	{r7, pc}

081033b4 <vq_ring_notify_host>:
 *
 * vq_ring_notify_host
 *
 */
static void vq_ring_notify_host(struct virtqueue *vq)
{
 81033b4:	b580      	push	{r7, lr}
 81033b6:	b082      	sub	sp, #8
 81033b8:	af00      	add	r7, sp, #0
 81033ba:	6078      	str	r0, [r7, #4]
	if (vq->notify)
 81033bc:	687b      	ldr	r3, [r7, #4]
 81033be:	695b      	ldr	r3, [r3, #20]
 81033c0:	2b00      	cmp	r3, #0
 81033c2:	d003      	beq.n	81033cc <vq_ring_notify_host+0x18>
		vq->notify(vq);
 81033c4:	687b      	ldr	r3, [r7, #4]
 81033c6:	695b      	ldr	r3, [r3, #20]
 81033c8:	6878      	ldr	r0, [r7, #4]
 81033ca:	4798      	blx	r3
}
 81033cc:	bf00      	nop
 81033ce:	3708      	adds	r7, #8
 81033d0:	46bd      	mov	sp, r7
 81033d2:	bd80      	pop	{r7, pc}

081033d4 <HAL_HSEM_FreeCallback>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 81033d4:	b580      	push	{r7, lr}
 81033d6:	b082      	sub	sp, #8
 81033d8:	af00      	add	r7, sp, #0
 81033da:	6078      	str	r0, [r7, #4]

  /* USER CODE END HSEM_FREE_CALLBACK */

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SemMask);
  msg_received = RX_NEW_MSG;
 81033dc:	4b04      	ldr	r3, [pc, #16]	; (81033f0 <HAL_HSEM_FreeCallback+0x1c>)
 81033de:	2201      	movs	r2, #1
 81033e0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN PRE_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END PRE_HSEM_FREE_CALLBACK_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81033e2:	2001      	movs	r0, #1
 81033e4:	f7fd fcc4 	bl	8100d70 <HAL_HSEM_ActivateNotification>

  /* USER CODE BEGIN POST_HSEM_FREE_CALLBACK_CM4 */

  /* USER CODE END POST_HSEM_FREE_CALLBACK_CM4 */
#endif
}
 81033e8:	bf00      	nop
 81033ea:	3708      	adds	r7, #8
 81033ec:	46bd      	mov	sp, r7
 81033ee:	bd80      	pop	{r7, pc}
 81033f0:	100001fc 	.word	0x100001fc

081033f4 <MAILBOX_Init>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  None
  * @retval : Operation result
  */
int MAILBOX_Init(void)
{
 81033f4:	b580      	push	{r7, lr}
 81033f6:	b082      	sub	sp, #8
 81033f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MAILBOX_INIT */

  /* USER CODE END MAILBOX_INIT */
  __HAL_RCC_HSEM_CLK_ENABLE();
 81033fa:	4b0b      	ldr	r3, [pc, #44]	; (8103428 <MAILBOX_Init+0x34>)
 81033fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103400:	4a09      	ldr	r2, [pc, #36]	; (8103428 <MAILBOX_Init+0x34>)
 8103402:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810340a:	4b07      	ldr	r3, [pc, #28]	; (8103428 <MAILBOX_Init+0x34>)
 810340c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103414:	607b      	str	r3, [r7, #4]
 8103416:	687b      	ldr	r3, [r7, #4]

    /* USER CODE BEGIN MAILBOX_INIT_CM4 */

    /* USER CODE END MAILBOX_INIT_CM4 */

  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8103418:	2001      	movs	r0, #1
 810341a:	f7fd fca9 	bl	8100d70 <HAL_HSEM_ActivateNotification>
  /* USER CODE BEGIN POST_MAILBOX_INIT_CM4 */

  /* USER CODE END POST_MAILBOX_INIT_CM4 */
#endif

  return 0;
 810341e:	2300      	movs	r3, #0
}
 8103420:	4618      	mov	r0, r3
 8103422:	3708      	adds	r7, #8
 8103424:	46bd      	mov	sp, r7
 8103426:	bd80      	pop	{r7, pc}
 8103428:	58024400 	.word	0x58024400

0810342c <MAILBOX_Poll>:
  * @brief  Initialize MAILBOX with HSEM peripheral
  * @param  virtio device
  * @retval : Operation result
  */
int MAILBOX_Poll(struct virtio_device *vdev)
{
 810342c:	b580      	push	{r7, lr}
 810342e:	b082      	sub	sp, #8
 8103430:	af00      	add	r7, sp, #0
 8103432:	6078      	str	r0, [r7, #4]
  /* If we got an interrupt, ask for the corresponding virtqueue processing */

  if (msg_received == RX_NEW_MSG)
 8103434:	4b09      	ldr	r3, [pc, #36]	; (810345c <MAILBOX_Poll+0x30>)
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	2b01      	cmp	r3, #1
 810343a:	d108      	bne.n	810344e <MAILBOX_Poll+0x22>

    /* USER CODE BEGIN PRE_NEW_MSG_CM4 */

    /* USER CODE END PRE_NEW_MSG_CM4 */

    rproc_virtio_notified(vdev, VRING1_ID);
 810343c:	2101      	movs	r1, #1
 810343e:	6878      	ldr	r0, [r7, #4]
 8103440:	f7fe fd27 	bl	8101e92 <rproc_virtio_notified>

    /* USER CODE BEGIN POST_NEW_MSG_CM4 */

    /* USER CODE END POST_NEW_MSG_CM4 */
#endif
    msg_received = RX_NO_MSG;
 8103444:	4b05      	ldr	r3, [pc, #20]	; (810345c <MAILBOX_Poll+0x30>)
 8103446:	2200      	movs	r2, #0
 8103448:	601a      	str	r2, [r3, #0]
    return 0;
 810344a:	2300      	movs	r3, #0
 810344c:	e001      	b.n	8103452 <MAILBOX_Poll+0x26>
  }

    /* USER CODE BEGIN NO_MSG */

    /* USER CODE END NO_MSG */
  return -EAGAIN;
 810344e:	f06f 030a 	mvn.w	r3, #10
}
 8103452:	4618      	mov	r0, r3
 8103454:	3708      	adds	r7, #8
 8103456:	46bd      	mov	sp, r7
 8103458:	bd80      	pop	{r7, pc}
 810345a:	bf00      	nop
 810345c:	100001fc 	.word	0x100001fc

08103460 <MAILBOX_Notify>:
  * @brief  Callback function called by OpenAMP MW to notify message processing
  * @param  VRING id
  * @retval Operation result
  */
int MAILBOX_Notify(void *priv, uint32_t id)
{
 8103460:	b580      	push	{r7, lr}
 8103462:	b082      	sub	sp, #8
 8103464:	af00      	add	r7, sp, #0
 8103466:	6078      	str	r0, [r7, #4]
 8103468:	6039      	str	r1, [r7, #0]

  /* USER CODE BEGIN  PRE_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END PRE_MAILBOX_NOTIFY_CM4 */

  HAL_HSEM_FastTake(HSEM_ID_1);
 810346a:	2001      	movs	r0, #1
 810346c:	f7fd fc52 	bl	8100d14 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_1,0);
 8103470:	2100      	movs	r1, #0
 8103472:	2001      	movs	r0, #1
 8103474:	f7fd fc68 	bl	8100d48 <HAL_HSEM_Release>
  /* USER CODE BEGIN  POST_MAILBOX_NOTIFY_CM4 */

  /* USER CODE END POST_MAILBOX_NOTIFY_CM4 */
#endif

  return 0;
 8103478:	2300      	movs	r3, #0
}
 810347a:	4618      	mov	r0, r3
 810347c:	3708      	adds	r7, #8
 810347e:	46bd      	mov	sp, r7
 8103480:	bd80      	pop	{r7, pc}

08103482 <metal_device_io_region>:
 * @param[in]	index		Region index.
 * @return I/O accessor handle, or NULL on failure.
 */
static inline struct metal_io_region *
metal_device_io_region(struct metal_device *device, unsigned index)
{
 8103482:	b480      	push	{r7}
 8103484:	b083      	sub	sp, #12
 8103486:	af00      	add	r7, sp, #0
 8103488:	6078      	str	r0, [r7, #4]
 810348a:	6039      	str	r1, [r7, #0]
	return (index < device->num_regions
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	689b      	ldr	r3, [r3, #8]
		? &device->regions[index]
		: NULL);
 8103490:	683a      	ldr	r2, [r7, #0]
 8103492:	429a      	cmp	r2, r3
 8103494:	d209      	bcs.n	81034aa <metal_device_io_region+0x28>
 8103496:	683a      	ldr	r2, [r7, #0]
 8103498:	4613      	mov	r3, r2
 810349a:	005b      	lsls	r3, r3, #1
 810349c:	4413      	add	r3, r2
 810349e:	011b      	lsls	r3, r3, #4
 81034a0:	3308      	adds	r3, #8
 81034a2:	687a      	ldr	r2, [r7, #4]
 81034a4:	4413      	add	r3, r2
 81034a6:	3304      	adds	r3, #4
 81034a8:	e000      	b.n	81034ac <metal_device_io_region+0x2a>
 81034aa:	2300      	movs	r3, #0
}
 81034ac:	4618      	mov	r0, r3
 81034ae:	370c      	adds	r7, #12
 81034b0:	46bd      	mov	sp, r7
 81034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b6:	4770      	bx	lr

081034b8 <OPENAMP_shmem_init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

static int OPENAMP_shmem_init(int RPMsgRole)
{
 81034b8:	b590      	push	{r4, r7, lr}
 81034ba:	b08d      	sub	sp, #52	; 0x34
 81034bc:	af04      	add	r7, sp, #16
 81034be:	6078      	str	r0, [r7, #4]
  int status = 0;
 81034c0:	2300      	movs	r3, #0
 81034c2:	61fb      	str	r3, [r7, #28]
  struct metal_device *device = NULL;
 81034c4:	2300      	movs	r3, #0
 81034c6:	61bb      	str	r3, [r7, #24]
  struct metal_init_params metal_params = METAL_INIT_DEFAULTS;
 81034c8:	4a41      	ldr	r2, [pc, #260]	; (81035d0 <OPENAMP_shmem_init+0x118>)
 81034ca:	f107 0310 	add.w	r3, r7, #16
 81034ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 81034d2:	e883 0003 	stmia.w	r3, {r0, r1}
  void* rsc_tab_addr = NULL;
 81034d6:	2300      	movs	r3, #0
 81034d8:	60fb      	str	r3, [r7, #12]
  int rsc_size = 0;
 81034da:	2300      	movs	r3, #0
 81034dc:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN PRE_LIB_METAL_INIT */

  /* USER CODE END  PRE_LIB_METAL_INIT */
  metal_init(&metal_params);
 81034de:	f107 0310 	add.w	r3, r7, #16
 81034e2:	4618      	mov	r0, r3
 81034e4:	f7fe f8e8 	bl	81016b8 <metal_init>

  status = metal_register_generic_device(&shm_device);
 81034e8:	483a      	ldr	r0, [pc, #232]	; (81035d4 <OPENAMP_shmem_init+0x11c>)
 81034ea:	f7fd ff8d 	bl	8101408 <metal_register_generic_device>
 81034ee:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 81034f0:	69fb      	ldr	r3, [r7, #28]
 81034f2:	2b00      	cmp	r3, #0
 81034f4:	d001      	beq.n	81034fa <OPENAMP_shmem_init+0x42>
    return status;
 81034f6:	69fb      	ldr	r3, [r7, #28]
 81034f8:	e066      	b.n	81035c8 <OPENAMP_shmem_init+0x110>
  }

  status = metal_device_open("generic", SHM_DEVICE_NAME, &device);
 81034fa:	f107 0318 	add.w	r3, r7, #24
 81034fe:	461a      	mov	r2, r3
 8103500:	4935      	ldr	r1, [pc, #212]	; (81035d8 <OPENAMP_shmem_init+0x120>)
 8103502:	4836      	ldr	r0, [pc, #216]	; (81035dc <OPENAMP_shmem_init+0x124>)
 8103504:	f7fd ff42 	bl	810138c <metal_device_open>
 8103508:	61f8      	str	r0, [r7, #28]
  if (status != 0) {
 810350a:	69fb      	ldr	r3, [r7, #28]
 810350c:	2b00      	cmp	r3, #0
 810350e:	d001      	beq.n	8103514 <OPENAMP_shmem_init+0x5c>
    return status;
 8103510:	69fb      	ldr	r3, [r7, #28]
 8103512:	e059      	b.n	81035c8 <OPENAMP_shmem_init+0x110>
  }

  shm_physmap = SHM_START_ADDRESS;
 8103514:	4a32      	ldr	r2, [pc, #200]	; (81035e0 <OPENAMP_shmem_init+0x128>)
 8103516:	4b33      	ldr	r3, [pc, #204]	; (81035e4 <OPENAMP_shmem_init+0x12c>)
 8103518:	601a      	str	r2, [r3, #0]
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 810351a:	69bb      	ldr	r3, [r7, #24]
 810351c:	f103 000c 	add.w	r0, r3, #12
                SHM_SIZE, -1, 0, NULL);
 8103520:	4a31      	ldr	r2, [pc, #196]	; (81035e8 <OPENAMP_shmem_init+0x130>)
 8103522:	4b2f      	ldr	r3, [pc, #188]	; (81035e0 <OPENAMP_shmem_init+0x128>)
 8103524:	1ad3      	subs	r3, r2, r3
  metal_io_init(&device->regions[0], (void *)SHM_START_ADDRESS, &shm_physmap,
 8103526:	461a      	mov	r2, r3
 8103528:	2300      	movs	r3, #0
 810352a:	9302      	str	r3, [sp, #8]
 810352c:	2300      	movs	r3, #0
 810352e:	9301      	str	r3, [sp, #4]
 8103530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8103534:	9300      	str	r3, [sp, #0]
 8103536:	4613      	mov	r3, r2
 8103538:	4a2a      	ldr	r2, [pc, #168]	; (81035e4 <OPENAMP_shmem_init+0x12c>)
 810353a:	4929      	ldr	r1, [pc, #164]	; (81035e0 <OPENAMP_shmem_init+0x128>)
 810353c:	f7fe f909 	bl	8101752 <metal_io_init>

  /* USER CODE BEGIN PRE_SHM_IO_INIT */

  /* USER CODE END PRE_SHM_IO_INIT */
  shm_io = metal_device_io_region(device, 0);
 8103540:	69bb      	ldr	r3, [r7, #24]
 8103542:	2100      	movs	r1, #0
 8103544:	4618      	mov	r0, r3
 8103546:	f7ff ff9c 	bl	8103482 <metal_device_io_region>
 810354a:	4603      	mov	r3, r0
 810354c:	4a27      	ldr	r2, [pc, #156]	; (81035ec <OPENAMP_shmem_init+0x134>)
 810354e:	6013      	str	r3, [r2, #0]
  if (shm_io == NULL) {
 8103550:	4b26      	ldr	r3, [pc, #152]	; (81035ec <OPENAMP_shmem_init+0x134>)
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	2b00      	cmp	r3, #0
 8103556:	d102      	bne.n	810355e <OPENAMP_shmem_init+0xa6>
    return -1;
 8103558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 810355c:	e034      	b.n	81035c8 <OPENAMP_shmem_init+0x110>
  /* USER CODE BEGIN POST_SHM_IO_INIT */

  /* USER CODE END POST_SHM_IO_INIT */

  /* Initialize resources table variables */
  resource_table_init(RPMsgRole, &rsc_tab_addr, &rsc_size);
 810355e:	f107 0208 	add.w	r2, r7, #8
 8103562:	f107 030c 	add.w	r3, r7, #12
 8103566:	4619      	mov	r1, r3
 8103568:	6878      	ldr	r0, [r7, #4]
 810356a:	f000 f905 	bl	8103778 <resource_table_init>
  rsc_table = (struct shared_resource_table *)rsc_tab_addr;
 810356e:	68fb      	ldr	r3, [r7, #12]
 8103570:	4a1f      	ldr	r2, [pc, #124]	; (81035f0 <OPENAMP_shmem_init+0x138>)
 8103572:	6013      	str	r3, [r2, #0]
  if (!rsc_table)
 8103574:	4b1e      	ldr	r3, [pc, #120]	; (81035f0 <OPENAMP_shmem_init+0x138>)
 8103576:	681b      	ldr	r3, [r3, #0]
 8103578:	2b00      	cmp	r3, #0
 810357a:	d102      	bne.n	8103582 <OPENAMP_shmem_init+0xca>
  {
    return -1;
 810357c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8103580:	e022      	b.n	81035c8 <OPENAMP_shmem_init+0x110>

  /* USER CODE BEGIN POST_RSC_TABLE_INIT */

  /* USER CODE END  POST_RSC_TABLE_INIT */

  metal_io_init(&device->regions[1], rsc_table,
 8103582:	69bb      	ldr	r3, [r7, #24]
 8103584:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8103588:	4b19      	ldr	r3, [pc, #100]	; (81035f0 <OPENAMP_shmem_init+0x138>)
 810358a:	6819      	ldr	r1, [r3, #0]
 810358c:	4b18      	ldr	r3, [pc, #96]	; (81035f0 <OPENAMP_shmem_init+0x138>)
 810358e:	681a      	ldr	r2, [r3, #0]
 8103590:	68bb      	ldr	r3, [r7, #8]
 8103592:	461c      	mov	r4, r3
 8103594:	2300      	movs	r3, #0
 8103596:	9302      	str	r3, [sp, #8]
 8103598:	2300      	movs	r3, #0
 810359a:	9301      	str	r3, [sp, #4]
 810359c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81035a0:	9300      	str	r3, [sp, #0]
 81035a2:	4623      	mov	r3, r4
 81035a4:	f7fe f8d5 	bl	8101752 <metal_io_init>
               (metal_phys_addr_t *)rsc_table, rsc_size, -1U, 0, NULL);

  /* USER CODE BEGIN POST_METAL_IO_INIT */

  /* USER CODE END  POST_METAL_IO_INIT */
  rsc_io = metal_device_io_region(device, 1);
 81035a8:	69bb      	ldr	r3, [r7, #24]
 81035aa:	2101      	movs	r1, #1
 81035ac:	4618      	mov	r0, r3
 81035ae:	f7ff ff68 	bl	8103482 <metal_device_io_region>
 81035b2:	4603      	mov	r3, r0
 81035b4:	4a0f      	ldr	r2, [pc, #60]	; (81035f4 <OPENAMP_shmem_init+0x13c>)
 81035b6:	6013      	str	r3, [r2, #0]
  if (rsc_io == NULL) {
 81035b8:	4b0e      	ldr	r3, [pc, #56]	; (81035f4 <OPENAMP_shmem_init+0x13c>)
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	2b00      	cmp	r3, #0
 81035be:	d102      	bne.n	81035c6 <OPENAMP_shmem_init+0x10e>
    return -1;
 81035c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 81035c4:	e000      	b.n	81035c8 <OPENAMP_shmem_init+0x110>
  }

  /* USER CODE BEGIN POST_RSC_IO_INIT */

  /* USER CODE END  POST_RSC_IO_INIT */
  return 0;
 81035c6:	2300      	movs	r3, #0
}
 81035c8:	4618      	mov	r0, r3
 81035ca:	3724      	adds	r7, #36	; 0x24
 81035cc:	46bd      	mov	sp, r7
 81035ce:	bd90      	pop	{r4, r7, pc}
 81035d0:	08104a8c 	.word	0x08104a8c
 81035d4:	1000003c 	.word	0x1000003c
 81035d8:	08104a78 	.word	0x08104a78
 81035dc:	08104a84 	.word	0x08104a84
 81035e0:	38000400 	.word	0x38000400
 81035e4:	10000290 	.word	0x10000290
 81035e8:	38010000 	.word	0x38010000
 81035ec:	10000200 	.word	0x10000200
 81035f0:	10000208 	.word	0x10000208
 81035f4:	10000204 	.word	0x10000204

081035f8 <MX_OPENAMP_Init>:

int MX_OPENAMP_Init(int RPMsgRole, rpmsg_ns_bind_cb ns_bind_cb)
{
 81035f8:	b590      	push	{r4, r7, lr}
 81035fa:	b08b      	sub	sp, #44	; 0x2c
 81035fc:	af04      	add	r7, sp, #16
 81035fe:	6078      	str	r0, [r7, #4]
 8103600:	6039      	str	r1, [r7, #0]
  struct fw_rsc_vdev_vring *vring_rsc = NULL;
 8103602:	2300      	movs	r3, #0
 8103604:	617b      	str	r3, [r7, #20]
  struct virtio_device *vdev = NULL;
 8103606:	2300      	movs	r3, #0
 8103608:	613b      	str	r3, [r7, #16]
  int status = 0;
 810360a:	2300      	movs	r3, #0
 810360c:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN MAILBOX_Init */

  /* USER CODE END MAIL_BOX_Init */

  MAILBOX_Init();
 810360e:	f7ff fef1 	bl	81033f4 <MAILBOX_Init>

  /* Libmetal Initilalization */
  status = OPENAMP_shmem_init(RPMsgRole);
 8103612:	6878      	ldr	r0, [r7, #4]
 8103614:	f7ff ff50 	bl	81034b8 <OPENAMP_shmem_init>
 8103618:	60f8      	str	r0, [r7, #12]
  if(status)
 810361a:	68fb      	ldr	r3, [r7, #12]
 810361c:	2b00      	cmp	r3, #0
 810361e:	d001      	beq.n	8103624 <MX_OPENAMP_Init+0x2c>
  {
    return status;
 8103620:	68fb      	ldr	r3, [r7, #12]
 8103622:	e06a      	b.n	81036fa <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  PRE_VIRTIO_INIT */

  /* USER CODE END PRE_VIRTIO_INIT */
  vdev = rproc_virtio_create_vdev(RPMsgRole, VDEV_ID, &rsc_table->vdev,
 8103624:	6878      	ldr	r0, [r7, #4]
 8103626:	4b37      	ldr	r3, [pc, #220]	; (8103704 <MX_OPENAMP_Init+0x10c>)
 8103628:	681b      	ldr	r3, [r3, #0]
 810362a:	f103 0218 	add.w	r2, r3, #24
 810362e:	4b36      	ldr	r3, [pc, #216]	; (8103708 <MX_OPENAMP_Init+0x110>)
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	2100      	movs	r1, #0
 8103634:	9102      	str	r1, [sp, #8]
 8103636:	4935      	ldr	r1, [pc, #212]	; (810370c <MX_OPENAMP_Init+0x114>)
 8103638:	9101      	str	r1, [sp, #4]
 810363a:	2100      	movs	r1, #0
 810363c:	9100      	str	r1, [sp, #0]
 810363e:	21ff      	movs	r1, #255	; 0xff
 8103640:	f7fe fb48 	bl	8101cd4 <rproc_virtio_create_vdev>
 8103644:	6138      	str	r0, [r7, #16]
                                  rsc_io, NULL, MAILBOX_Notify, NULL);
  if (vdev == NULL)
 8103646:	693b      	ldr	r3, [r7, #16]
 8103648:	2b00      	cmp	r3, #0
 810364a:	d102      	bne.n	8103652 <MX_OPENAMP_Init+0x5a>
  {
    return -1;
 810364c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8103650:	e053      	b.n	81036fa <MX_OPENAMP_Init+0x102>
  }

  rproc_virtio_wait_remote_ready(vdev);
 8103652:	6938      	ldr	r0, [r7, #16]
 8103654:	f7fe fc59 	bl	8101f0a <rproc_virtio_wait_remote_ready>

  /* USER CODE BEGIN  POST_VIRTIO_INIT */

  /* USER CODE END POST_VIRTIO_INIT */
  vring_rsc = &rsc_table->vring0;
 8103658:	4b2a      	ldr	r3, [pc, #168]	; (8103704 <MX_OPENAMP_Init+0x10c>)
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	3334      	adds	r3, #52	; 0x34
 810365e:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8103660:	697b      	ldr	r3, [r7, #20]
 8103662:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 8103664:	697b      	ldr	r3, [r7, #20]
 8103666:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8103668:	461c      	mov	r4, r3
 810366a:	4b29      	ldr	r3, [pc, #164]	; (8103710 <MX_OPENAMP_Init+0x118>)
 810366c:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 810366e:	697a      	ldr	r2, [r7, #20]
 8103670:	6892      	ldr	r2, [r2, #8]
 8103672:	6979      	ldr	r1, [r7, #20]
 8103674:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 0, vring_rsc->notifyid,
 8103676:	9102      	str	r1, [sp, #8]
 8103678:	9201      	str	r2, [sp, #4]
 810367a:	9300      	str	r3, [sp, #0]
 810367c:	4623      	mov	r3, r4
 810367e:	4602      	mov	r2, r0
 8103680:	2100      	movs	r1, #0
 8103682:	6938      	ldr	r0, [r7, #16]
 8103684:	f7fe fbd4 	bl	8101e30 <rproc_virtio_init_vring>
 8103688:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 810368a:	68fb      	ldr	r3, [r7, #12]
 810368c:	2b00      	cmp	r3, #0
 810368e:	d001      	beq.n	8103694 <MX_OPENAMP_Init+0x9c>
  {
    return status;
 8103690:	68fb      	ldr	r3, [r7, #12]
 8103692:	e032      	b.n	81036fa <MX_OPENAMP_Init+0x102>
  }

  /* USER CODE BEGIN  POST_VRING0_INIT */

  /* USER CODE END POST_VRING0_INIT */
  vring_rsc = &rsc_table->vring1;
 8103694:	4b1b      	ldr	r3, [pc, #108]	; (8103704 <MX_OPENAMP_Init+0x10c>)
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	3348      	adds	r3, #72	; 0x48
 810369a:	617b      	str	r3, [r7, #20]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 810369c:	697b      	ldr	r3, [r7, #20]
 810369e:	68d8      	ldr	r0, [r3, #12]
                                   (void *)vring_rsc->da, shm_io,
 81036a0:	697b      	ldr	r3, [r7, #20]
 81036a2:	681b      	ldr	r3, [r3, #0]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81036a4:	461c      	mov	r4, r3
 81036a6:	4b1a      	ldr	r3, [pc, #104]	; (8103710 <MX_OPENAMP_Init+0x118>)
 81036a8:	681b      	ldr	r3, [r3, #0]
                                   vring_rsc->num, vring_rsc->align);
 81036aa:	697a      	ldr	r2, [r7, #20]
 81036ac:	6892      	ldr	r2, [r2, #8]
 81036ae:	6979      	ldr	r1, [r7, #20]
 81036b0:	6849      	ldr	r1, [r1, #4]
  status = rproc_virtio_init_vring(vdev, 1, vring_rsc->notifyid,
 81036b2:	9102      	str	r1, [sp, #8]
 81036b4:	9201      	str	r2, [sp, #4]
 81036b6:	9300      	str	r3, [sp, #0]
 81036b8:	4623      	mov	r3, r4
 81036ba:	4602      	mov	r2, r0
 81036bc:	2101      	movs	r1, #1
 81036be:	6938      	ldr	r0, [r7, #16]
 81036c0:	f7fe fbb6 	bl	8101e30 <rproc_virtio_init_vring>
 81036c4:	60f8      	str	r0, [r7, #12]
  if (status != 0)
 81036c6:	68fb      	ldr	r3, [r7, #12]
 81036c8:	2b00      	cmp	r3, #0
 81036ca:	d001      	beq.n	81036d0 <MX_OPENAMP_Init+0xd8>
  {
    return status;
 81036cc:	68fb      	ldr	r3, [r7, #12]
 81036ce:	e014      	b.n	81036fa <MX_OPENAMP_Init+0x102>

  /* USER CODE BEGIN  POST_VRING1_INIT */

  /* USER CODE END POST_VRING1_INIT */

  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 81036d0:	4b10      	ldr	r3, [pc, #64]	; (8103714 <MX_OPENAMP_Init+0x11c>)
 81036d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 81036d6:	4619      	mov	r1, r3
                             (size_t)SHM_SIZE);
 81036d8:	4a0f      	ldr	r2, [pc, #60]	; (8103718 <MX_OPENAMP_Init+0x120>)
 81036da:	4b0e      	ldr	r3, [pc, #56]	; (8103714 <MX_OPENAMP_Init+0x11c>)
 81036dc:	1ad3      	subs	r3, r2, r3
  rpmsg_virtio_init_shm_pool(&shpool, (void *)VRING_BUFF_ADDRESS,
 81036de:	461a      	mov	r2, r3
 81036e0:	480e      	ldr	r0, [pc, #56]	; (810371c <MX_OPENAMP_Init+0x124>)
 81036e2:	f7ff f861 	bl	81027a8 <rpmsg_virtio_init_shm_pool>
  rpmsg_init_vdev(&rvdev, vdev, ns_bind_cb, shm_io, &shpool);
 81036e6:	4b0a      	ldr	r3, [pc, #40]	; (8103710 <MX_OPENAMP_Init+0x118>)
 81036e8:	681b      	ldr	r3, [r3, #0]
 81036ea:	4a0c      	ldr	r2, [pc, #48]	; (810371c <MX_OPENAMP_Init+0x124>)
 81036ec:	9200      	str	r2, [sp, #0]
 81036ee:	683a      	ldr	r2, [r7, #0]
 81036f0:	6939      	ldr	r1, [r7, #16]
 81036f2:	480b      	ldr	r0, [pc, #44]	; (8103720 <MX_OPENAMP_Init+0x128>)
 81036f4:	f7ff facc 	bl	8102c90 <rpmsg_init_vdev>

  /* USER CODE BEGIN POST_RPMSG_INIT */

  /* USER CODE END POST_RPMSG_INIT */

  return 0;
 81036f8:	2300      	movs	r3, #0
}
 81036fa:	4618      	mov	r0, r3
 81036fc:	371c      	adds	r7, #28
 81036fe:	46bd      	mov	sp, r7
 8103700:	bd90      	pop	{r4, r7, pc}
 8103702:	bf00      	nop
 8103704:	10000208 	.word	0x10000208
 8103708:	10000204 	.word	0x10000204
 810370c:	08103461 	.word	0x08103461
 8103710:	10000200 	.word	0x10000200
 8103714:	38000400 	.word	0x38000400
 8103718:	38010000 	.word	0x38010000
 810371c:	1000020c 	.word	0x1000020c
 8103720:	10000218 	.word	0x10000218

08103724 <OPENAMP_create_endpoint>:
}

int OPENAMP_create_endpoint(struct rpmsg_endpoint *ept, const char *name,
                            uint32_t dest, rpmsg_ept_cb cb,
                            rpmsg_ns_unbind_cb unbind_cb)
{
 8103724:	b580      	push	{r7, lr}
 8103726:	b08a      	sub	sp, #40	; 0x28
 8103728:	af04      	add	r7, sp, #16
 810372a:	60f8      	str	r0, [r7, #12]
 810372c:	60b9      	str	r1, [r7, #8]
 810372e:	607a      	str	r2, [r7, #4]
 8103730:	603b      	str	r3, [r7, #0]
  int ret = 0;
 8103732:	2300      	movs	r3, #0
 8103734:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_EP_CREATE */

  /* USER CODE END PRE_EP_CREATE */

  ret = rpmsg_create_ept(ept, &rvdev.rdev, name, RPMSG_ADDR_ANY, dest, cb,
 8103736:	6a3b      	ldr	r3, [r7, #32]
 8103738:	9302      	str	r3, [sp, #8]
 810373a:	683b      	ldr	r3, [r7, #0]
 810373c:	9301      	str	r3, [sp, #4]
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	9300      	str	r3, [sp, #0]
 8103742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8103746:	68ba      	ldr	r2, [r7, #8]
 8103748:	4904      	ldr	r1, [pc, #16]	; (810375c <OPENAMP_create_endpoint+0x38>)
 810374a:	68f8      	ldr	r0, [r7, #12]
 810374c:	f7fe fe6a 	bl	8102424 <rpmsg_create_ept>
 8103750:	6178      	str	r0, [r7, #20]
		          unbind_cb);

  /* USER CODE BEGIN POST_EP_CREATE */

  /* USER CODE END POST_EP_CREATE */
  return ret;
 8103752:	697b      	ldr	r3, [r7, #20]
}
 8103754:	4618      	mov	r0, r3
 8103756:	3718      	adds	r7, #24
 8103758:	46bd      	mov	sp, r7
 810375a:	bd80      	pop	{r7, pc}
 810375c:	10000218 	.word	0x10000218

08103760 <OPENAMP_check_for_message>:

void OPENAMP_check_for_message(void)
{
 8103760:	b580      	push	{r7, lr}
 8103762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MSG_CHECK */

  /* USER CODE END MSG_CHECK */
  MAILBOX_Poll(rvdev.vdev);
 8103764:	4b03      	ldr	r3, [pc, #12]	; (8103774 <OPENAMP_check_for_message+0x14>)
 8103766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103768:	4618      	mov	r0, r3
 810376a:	f7ff fe5f 	bl	810342c <MAILBOX_Poll>
}
 810376e:	bf00      	nop
 8103770:	bd80      	pop	{r7, pc}
 8103772:	bf00      	nop
 8103774:	10000218 	.word	0x10000218

08103778 <resource_table_init>:
#endif
} ;
#endif

void resource_table_init(int RPMsgRole, void **table_ptr, int *length)
{
 8103778:	b480      	push	{r7}
 810377a:	b085      	sub	sp, #20
 810377c:	af00      	add	r7, sp, #0
 810377e:	60f8      	str	r0, [r7, #12]
 8103780:	60b9      	str	r1, [r7, #8]
 8103782:	607a      	str	r2, [r7, #4]
	resource_table.vdev.num_of_vrings=VRING_COUNT;
	resource_table.vdev.dfeatures = RPMSG_IPU_C0_FEATURES;
#else

	/* For the slave application let's wait until the resource_table is correctly initialized */
	while(resource_table.vring1.da != VRING_RX_ADDRESS)
 8103784:	bf00      	nop
 8103786:	4b08      	ldr	r3, [pc, #32]	; (81037a8 <resource_table_init+0x30>)
 8103788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810378a:	4a08      	ldr	r2, [pc, #32]	; (81037ac <resource_table_init+0x34>)
 810378c:	4293      	cmp	r3, r2
 810378e:	d1fa      	bne.n	8103786 <resource_table_init+0xe>
#endif
#endif
#endif

  (void)RPMsgRole;
  *length = sizeof(resource_table);
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	228c      	movs	r2, #140	; 0x8c
 8103794:	601a      	str	r2, [r3, #0]
  *table_ptr = (void *)&resource_table;
 8103796:	68bb      	ldr	r3, [r7, #8]
 8103798:	4a03      	ldr	r2, [pc, #12]	; (81037a8 <resource_table_init+0x30>)
 810379a:	601a      	str	r2, [r3, #0]
}
 810379c:	bf00      	nop
 810379e:	3714      	adds	r7, #20
 81037a0:	46bd      	mov	sp, r7
 81037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037a6:	4770      	bx	lr
 81037a8:	38000000 	.word	0x38000000
 81037ac:	38000400 	.word	0x38000400

081037b0 <__assert_func>:
 81037b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 81037b2:	4614      	mov	r4, r2
 81037b4:	461a      	mov	r2, r3
 81037b6:	4b09      	ldr	r3, [pc, #36]	; (81037dc <__assert_func+0x2c>)
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4605      	mov	r5, r0
 81037bc:	68d8      	ldr	r0, [r3, #12]
 81037be:	b14c      	cbz	r4, 81037d4 <__assert_func+0x24>
 81037c0:	4b07      	ldr	r3, [pc, #28]	; (81037e0 <__assert_func+0x30>)
 81037c2:	9100      	str	r1, [sp, #0]
 81037c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 81037c8:	4906      	ldr	r1, [pc, #24]	; (81037e4 <__assert_func+0x34>)
 81037ca:	462b      	mov	r3, r5
 81037cc:	f000 f814 	bl	81037f8 <fiprintf>
 81037d0:	f000 fd34 	bl	810423c <abort>
 81037d4:	4b04      	ldr	r3, [pc, #16]	; (81037e8 <__assert_func+0x38>)
 81037d6:	461c      	mov	r4, r3
 81037d8:	e7f3      	b.n	81037c2 <__assert_func+0x12>
 81037da:	bf00      	nop
 81037dc:	100000b8 	.word	0x100000b8
 81037e0:	08104afa 	.word	0x08104afa
 81037e4:	08104b07 	.word	0x08104b07
 81037e8:	08104b35 	.word	0x08104b35

081037ec <__errno>:
 81037ec:	4b01      	ldr	r3, [pc, #4]	; (81037f4 <__errno+0x8>)
 81037ee:	6818      	ldr	r0, [r3, #0]
 81037f0:	4770      	bx	lr
 81037f2:	bf00      	nop
 81037f4:	100000b8 	.word	0x100000b8

081037f8 <fiprintf>:
 81037f8:	b40e      	push	{r1, r2, r3}
 81037fa:	b503      	push	{r0, r1, lr}
 81037fc:	4601      	mov	r1, r0
 81037fe:	ab03      	add	r3, sp, #12
 8103800:	4805      	ldr	r0, [pc, #20]	; (8103818 <fiprintf+0x20>)
 8103802:	f853 2b04 	ldr.w	r2, [r3], #4
 8103806:	6800      	ldr	r0, [r0, #0]
 8103808:	9301      	str	r3, [sp, #4]
 810380a:	f000 f95b 	bl	8103ac4 <_vfiprintf_r>
 810380e:	b002      	add	sp, #8
 8103810:	f85d eb04 	ldr.w	lr, [sp], #4
 8103814:	b003      	add	sp, #12
 8103816:	4770      	bx	lr
 8103818:	100000b8 	.word	0x100000b8

0810381c <__libc_init_array>:
 810381c:	b570      	push	{r4, r5, r6, lr}
 810381e:	4d0d      	ldr	r5, [pc, #52]	; (8103854 <__libc_init_array+0x38>)
 8103820:	4c0d      	ldr	r4, [pc, #52]	; (8103858 <__libc_init_array+0x3c>)
 8103822:	1b64      	subs	r4, r4, r5
 8103824:	10a4      	asrs	r4, r4, #2
 8103826:	2600      	movs	r6, #0
 8103828:	42a6      	cmp	r6, r4
 810382a:	d109      	bne.n	8103840 <__libc_init_array+0x24>
 810382c:	4d0b      	ldr	r5, [pc, #44]	; (810385c <__libc_init_array+0x40>)
 810382e:	4c0c      	ldr	r4, [pc, #48]	; (8103860 <__libc_init_array+0x44>)
 8103830:	f001 f828 	bl	8104884 <_init>
 8103834:	1b64      	subs	r4, r4, r5
 8103836:	10a4      	asrs	r4, r4, #2
 8103838:	2600      	movs	r6, #0
 810383a:	42a6      	cmp	r6, r4
 810383c:	d105      	bne.n	810384a <__libc_init_array+0x2e>
 810383e:	bd70      	pop	{r4, r5, r6, pc}
 8103840:	f855 3b04 	ldr.w	r3, [r5], #4
 8103844:	4798      	blx	r3
 8103846:	3601      	adds	r6, #1
 8103848:	e7ee      	b.n	8103828 <__libc_init_array+0xc>
 810384a:	f855 3b04 	ldr.w	r3, [r5], #4
 810384e:	4798      	blx	r3
 8103850:	3601      	adds	r6, #1
 8103852:	e7f2      	b.n	810383a <__libc_init_array+0x1e>
 8103854:	08104bd0 	.word	0x08104bd0
 8103858:	08104bd0 	.word	0x08104bd0
 810385c:	08104bd0 	.word	0x08104bd0
 8103860:	08104bd4 	.word	0x08104bd4

08103864 <malloc>:
 8103864:	4b02      	ldr	r3, [pc, #8]	; (8103870 <malloc+0xc>)
 8103866:	4601      	mov	r1, r0
 8103868:	6818      	ldr	r0, [r3, #0]
 810386a:	f000 b88d 	b.w	8103988 <_malloc_r>
 810386e:	bf00      	nop
 8103870:	100000b8 	.word	0x100000b8

08103874 <free>:
 8103874:	4b02      	ldr	r3, [pc, #8]	; (8103880 <free+0xc>)
 8103876:	4601      	mov	r1, r0
 8103878:	6818      	ldr	r0, [r3, #0]
 810387a:	f000 b819 	b.w	81038b0 <_free_r>
 810387e:	bf00      	nop
 8103880:	100000b8 	.word	0x100000b8

08103884 <memcpy>:
 8103884:	440a      	add	r2, r1
 8103886:	4291      	cmp	r1, r2
 8103888:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 810388c:	d100      	bne.n	8103890 <memcpy+0xc>
 810388e:	4770      	bx	lr
 8103890:	b510      	push	{r4, lr}
 8103892:	f811 4b01 	ldrb.w	r4, [r1], #1
 8103896:	f803 4f01 	strb.w	r4, [r3, #1]!
 810389a:	4291      	cmp	r1, r2
 810389c:	d1f9      	bne.n	8103892 <memcpy+0xe>
 810389e:	bd10      	pop	{r4, pc}

081038a0 <memset>:
 81038a0:	4402      	add	r2, r0
 81038a2:	4603      	mov	r3, r0
 81038a4:	4293      	cmp	r3, r2
 81038a6:	d100      	bne.n	81038aa <memset+0xa>
 81038a8:	4770      	bx	lr
 81038aa:	f803 1b01 	strb.w	r1, [r3], #1
 81038ae:	e7f9      	b.n	81038a4 <memset+0x4>

081038b0 <_free_r>:
 81038b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81038b2:	2900      	cmp	r1, #0
 81038b4:	d044      	beq.n	8103940 <_free_r+0x90>
 81038b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81038ba:	9001      	str	r0, [sp, #4]
 81038bc:	2b00      	cmp	r3, #0
 81038be:	f1a1 0404 	sub.w	r4, r1, #4
 81038c2:	bfb8      	it	lt
 81038c4:	18e4      	addlt	r4, r4, r3
 81038c6:	f000 fee1 	bl	810468c <__malloc_lock>
 81038ca:	4a1e      	ldr	r2, [pc, #120]	; (8103944 <_free_r+0x94>)
 81038cc:	9801      	ldr	r0, [sp, #4]
 81038ce:	6813      	ldr	r3, [r2, #0]
 81038d0:	b933      	cbnz	r3, 81038e0 <_free_r+0x30>
 81038d2:	6063      	str	r3, [r4, #4]
 81038d4:	6014      	str	r4, [r2, #0]
 81038d6:	b003      	add	sp, #12
 81038d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81038dc:	f000 bedc 	b.w	8104698 <__malloc_unlock>
 81038e0:	42a3      	cmp	r3, r4
 81038e2:	d908      	bls.n	81038f6 <_free_r+0x46>
 81038e4:	6825      	ldr	r5, [r4, #0]
 81038e6:	1961      	adds	r1, r4, r5
 81038e8:	428b      	cmp	r3, r1
 81038ea:	bf01      	itttt	eq
 81038ec:	6819      	ldreq	r1, [r3, #0]
 81038ee:	685b      	ldreq	r3, [r3, #4]
 81038f0:	1949      	addeq	r1, r1, r5
 81038f2:	6021      	streq	r1, [r4, #0]
 81038f4:	e7ed      	b.n	81038d2 <_free_r+0x22>
 81038f6:	461a      	mov	r2, r3
 81038f8:	685b      	ldr	r3, [r3, #4]
 81038fa:	b10b      	cbz	r3, 8103900 <_free_r+0x50>
 81038fc:	42a3      	cmp	r3, r4
 81038fe:	d9fa      	bls.n	81038f6 <_free_r+0x46>
 8103900:	6811      	ldr	r1, [r2, #0]
 8103902:	1855      	adds	r5, r2, r1
 8103904:	42a5      	cmp	r5, r4
 8103906:	d10b      	bne.n	8103920 <_free_r+0x70>
 8103908:	6824      	ldr	r4, [r4, #0]
 810390a:	4421      	add	r1, r4
 810390c:	1854      	adds	r4, r2, r1
 810390e:	42a3      	cmp	r3, r4
 8103910:	6011      	str	r1, [r2, #0]
 8103912:	d1e0      	bne.n	81038d6 <_free_r+0x26>
 8103914:	681c      	ldr	r4, [r3, #0]
 8103916:	685b      	ldr	r3, [r3, #4]
 8103918:	6053      	str	r3, [r2, #4]
 810391a:	4421      	add	r1, r4
 810391c:	6011      	str	r1, [r2, #0]
 810391e:	e7da      	b.n	81038d6 <_free_r+0x26>
 8103920:	d902      	bls.n	8103928 <_free_r+0x78>
 8103922:	230c      	movs	r3, #12
 8103924:	6003      	str	r3, [r0, #0]
 8103926:	e7d6      	b.n	81038d6 <_free_r+0x26>
 8103928:	6825      	ldr	r5, [r4, #0]
 810392a:	1961      	adds	r1, r4, r5
 810392c:	428b      	cmp	r3, r1
 810392e:	bf04      	itt	eq
 8103930:	6819      	ldreq	r1, [r3, #0]
 8103932:	685b      	ldreq	r3, [r3, #4]
 8103934:	6063      	str	r3, [r4, #4]
 8103936:	bf04      	itt	eq
 8103938:	1949      	addeq	r1, r1, r5
 810393a:	6021      	streq	r1, [r4, #0]
 810393c:	6054      	str	r4, [r2, #4]
 810393e:	e7ca      	b.n	81038d6 <_free_r+0x26>
 8103940:	b003      	add	sp, #12
 8103942:	bd30      	pop	{r4, r5, pc}
 8103944:	10000294 	.word	0x10000294

08103948 <sbrk_aligned>:
 8103948:	b570      	push	{r4, r5, r6, lr}
 810394a:	4e0e      	ldr	r6, [pc, #56]	; (8103984 <sbrk_aligned+0x3c>)
 810394c:	460c      	mov	r4, r1
 810394e:	6831      	ldr	r1, [r6, #0]
 8103950:	4605      	mov	r5, r0
 8103952:	b911      	cbnz	r1, 810395a <sbrk_aligned+0x12>
 8103954:	f000 fb7a 	bl	810404c <_sbrk_r>
 8103958:	6030      	str	r0, [r6, #0]
 810395a:	4621      	mov	r1, r4
 810395c:	4628      	mov	r0, r5
 810395e:	f000 fb75 	bl	810404c <_sbrk_r>
 8103962:	1c43      	adds	r3, r0, #1
 8103964:	d00a      	beq.n	810397c <sbrk_aligned+0x34>
 8103966:	1cc4      	adds	r4, r0, #3
 8103968:	f024 0403 	bic.w	r4, r4, #3
 810396c:	42a0      	cmp	r0, r4
 810396e:	d007      	beq.n	8103980 <sbrk_aligned+0x38>
 8103970:	1a21      	subs	r1, r4, r0
 8103972:	4628      	mov	r0, r5
 8103974:	f000 fb6a 	bl	810404c <_sbrk_r>
 8103978:	3001      	adds	r0, #1
 810397a:	d101      	bne.n	8103980 <sbrk_aligned+0x38>
 810397c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8103980:	4620      	mov	r0, r4
 8103982:	bd70      	pop	{r4, r5, r6, pc}
 8103984:	10000298 	.word	0x10000298

08103988 <_malloc_r>:
 8103988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810398c:	1ccd      	adds	r5, r1, #3
 810398e:	f025 0503 	bic.w	r5, r5, #3
 8103992:	3508      	adds	r5, #8
 8103994:	2d0c      	cmp	r5, #12
 8103996:	bf38      	it	cc
 8103998:	250c      	movcc	r5, #12
 810399a:	2d00      	cmp	r5, #0
 810399c:	4607      	mov	r7, r0
 810399e:	db01      	blt.n	81039a4 <_malloc_r+0x1c>
 81039a0:	42a9      	cmp	r1, r5
 81039a2:	d905      	bls.n	81039b0 <_malloc_r+0x28>
 81039a4:	230c      	movs	r3, #12
 81039a6:	603b      	str	r3, [r7, #0]
 81039a8:	2600      	movs	r6, #0
 81039aa:	4630      	mov	r0, r6
 81039ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81039b0:	4e2e      	ldr	r6, [pc, #184]	; (8103a6c <_malloc_r+0xe4>)
 81039b2:	f000 fe6b 	bl	810468c <__malloc_lock>
 81039b6:	6833      	ldr	r3, [r6, #0]
 81039b8:	461c      	mov	r4, r3
 81039ba:	bb34      	cbnz	r4, 8103a0a <_malloc_r+0x82>
 81039bc:	4629      	mov	r1, r5
 81039be:	4638      	mov	r0, r7
 81039c0:	f7ff ffc2 	bl	8103948 <sbrk_aligned>
 81039c4:	1c43      	adds	r3, r0, #1
 81039c6:	4604      	mov	r4, r0
 81039c8:	d14d      	bne.n	8103a66 <_malloc_r+0xde>
 81039ca:	6834      	ldr	r4, [r6, #0]
 81039cc:	4626      	mov	r6, r4
 81039ce:	2e00      	cmp	r6, #0
 81039d0:	d140      	bne.n	8103a54 <_malloc_r+0xcc>
 81039d2:	6823      	ldr	r3, [r4, #0]
 81039d4:	4631      	mov	r1, r6
 81039d6:	4638      	mov	r0, r7
 81039d8:	eb04 0803 	add.w	r8, r4, r3
 81039dc:	f000 fb36 	bl	810404c <_sbrk_r>
 81039e0:	4580      	cmp	r8, r0
 81039e2:	d13a      	bne.n	8103a5a <_malloc_r+0xd2>
 81039e4:	6821      	ldr	r1, [r4, #0]
 81039e6:	3503      	adds	r5, #3
 81039e8:	1a6d      	subs	r5, r5, r1
 81039ea:	f025 0503 	bic.w	r5, r5, #3
 81039ee:	3508      	adds	r5, #8
 81039f0:	2d0c      	cmp	r5, #12
 81039f2:	bf38      	it	cc
 81039f4:	250c      	movcc	r5, #12
 81039f6:	4629      	mov	r1, r5
 81039f8:	4638      	mov	r0, r7
 81039fa:	f7ff ffa5 	bl	8103948 <sbrk_aligned>
 81039fe:	3001      	adds	r0, #1
 8103a00:	d02b      	beq.n	8103a5a <_malloc_r+0xd2>
 8103a02:	6823      	ldr	r3, [r4, #0]
 8103a04:	442b      	add	r3, r5
 8103a06:	6023      	str	r3, [r4, #0]
 8103a08:	e00e      	b.n	8103a28 <_malloc_r+0xa0>
 8103a0a:	6822      	ldr	r2, [r4, #0]
 8103a0c:	1b52      	subs	r2, r2, r5
 8103a0e:	d41e      	bmi.n	8103a4e <_malloc_r+0xc6>
 8103a10:	2a0b      	cmp	r2, #11
 8103a12:	d916      	bls.n	8103a42 <_malloc_r+0xba>
 8103a14:	1961      	adds	r1, r4, r5
 8103a16:	42a3      	cmp	r3, r4
 8103a18:	6025      	str	r5, [r4, #0]
 8103a1a:	bf18      	it	ne
 8103a1c:	6059      	strne	r1, [r3, #4]
 8103a1e:	6863      	ldr	r3, [r4, #4]
 8103a20:	bf08      	it	eq
 8103a22:	6031      	streq	r1, [r6, #0]
 8103a24:	5162      	str	r2, [r4, r5]
 8103a26:	604b      	str	r3, [r1, #4]
 8103a28:	4638      	mov	r0, r7
 8103a2a:	f104 060b 	add.w	r6, r4, #11
 8103a2e:	f000 fe33 	bl	8104698 <__malloc_unlock>
 8103a32:	f026 0607 	bic.w	r6, r6, #7
 8103a36:	1d23      	adds	r3, r4, #4
 8103a38:	1af2      	subs	r2, r6, r3
 8103a3a:	d0b6      	beq.n	81039aa <_malloc_r+0x22>
 8103a3c:	1b9b      	subs	r3, r3, r6
 8103a3e:	50a3      	str	r3, [r4, r2]
 8103a40:	e7b3      	b.n	81039aa <_malloc_r+0x22>
 8103a42:	6862      	ldr	r2, [r4, #4]
 8103a44:	42a3      	cmp	r3, r4
 8103a46:	bf0c      	ite	eq
 8103a48:	6032      	streq	r2, [r6, #0]
 8103a4a:	605a      	strne	r2, [r3, #4]
 8103a4c:	e7ec      	b.n	8103a28 <_malloc_r+0xa0>
 8103a4e:	4623      	mov	r3, r4
 8103a50:	6864      	ldr	r4, [r4, #4]
 8103a52:	e7b2      	b.n	81039ba <_malloc_r+0x32>
 8103a54:	4634      	mov	r4, r6
 8103a56:	6876      	ldr	r6, [r6, #4]
 8103a58:	e7b9      	b.n	81039ce <_malloc_r+0x46>
 8103a5a:	230c      	movs	r3, #12
 8103a5c:	603b      	str	r3, [r7, #0]
 8103a5e:	4638      	mov	r0, r7
 8103a60:	f000 fe1a 	bl	8104698 <__malloc_unlock>
 8103a64:	e7a1      	b.n	81039aa <_malloc_r+0x22>
 8103a66:	6025      	str	r5, [r4, #0]
 8103a68:	e7de      	b.n	8103a28 <_malloc_r+0xa0>
 8103a6a:	bf00      	nop
 8103a6c:	10000294 	.word	0x10000294

08103a70 <__sfputc_r>:
 8103a70:	6893      	ldr	r3, [r2, #8]
 8103a72:	3b01      	subs	r3, #1
 8103a74:	2b00      	cmp	r3, #0
 8103a76:	b410      	push	{r4}
 8103a78:	6093      	str	r3, [r2, #8]
 8103a7a:	da08      	bge.n	8103a8e <__sfputc_r+0x1e>
 8103a7c:	6994      	ldr	r4, [r2, #24]
 8103a7e:	42a3      	cmp	r3, r4
 8103a80:	db01      	blt.n	8103a86 <__sfputc_r+0x16>
 8103a82:	290a      	cmp	r1, #10
 8103a84:	d103      	bne.n	8103a8e <__sfputc_r+0x1e>
 8103a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8103a8a:	f000 bb17 	b.w	81040bc <__swbuf_r>
 8103a8e:	6813      	ldr	r3, [r2, #0]
 8103a90:	1c58      	adds	r0, r3, #1
 8103a92:	6010      	str	r0, [r2, #0]
 8103a94:	7019      	strb	r1, [r3, #0]
 8103a96:	4608      	mov	r0, r1
 8103a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8103a9c:	4770      	bx	lr

08103a9e <__sfputs_r>:
 8103a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103aa0:	4606      	mov	r6, r0
 8103aa2:	460f      	mov	r7, r1
 8103aa4:	4614      	mov	r4, r2
 8103aa6:	18d5      	adds	r5, r2, r3
 8103aa8:	42ac      	cmp	r4, r5
 8103aaa:	d101      	bne.n	8103ab0 <__sfputs_r+0x12>
 8103aac:	2000      	movs	r0, #0
 8103aae:	e007      	b.n	8103ac0 <__sfputs_r+0x22>
 8103ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8103ab4:	463a      	mov	r2, r7
 8103ab6:	4630      	mov	r0, r6
 8103ab8:	f7ff ffda 	bl	8103a70 <__sfputc_r>
 8103abc:	1c43      	adds	r3, r0, #1
 8103abe:	d1f3      	bne.n	8103aa8 <__sfputs_r+0xa>
 8103ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08103ac4 <_vfiprintf_r>:
 8103ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8103ac8:	460d      	mov	r5, r1
 8103aca:	b09d      	sub	sp, #116	; 0x74
 8103acc:	4614      	mov	r4, r2
 8103ace:	4698      	mov	r8, r3
 8103ad0:	4606      	mov	r6, r0
 8103ad2:	b118      	cbz	r0, 8103adc <_vfiprintf_r+0x18>
 8103ad4:	6983      	ldr	r3, [r0, #24]
 8103ad6:	b90b      	cbnz	r3, 8103adc <_vfiprintf_r+0x18>
 8103ad8:	f000 fcd2 	bl	8104480 <__sinit>
 8103adc:	4b89      	ldr	r3, [pc, #548]	; (8103d04 <_vfiprintf_r+0x240>)
 8103ade:	429d      	cmp	r5, r3
 8103ae0:	d11b      	bne.n	8103b1a <_vfiprintf_r+0x56>
 8103ae2:	6875      	ldr	r5, [r6, #4]
 8103ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8103ae6:	07d9      	lsls	r1, r3, #31
 8103ae8:	d405      	bmi.n	8103af6 <_vfiprintf_r+0x32>
 8103aea:	89ab      	ldrh	r3, [r5, #12]
 8103aec:	059a      	lsls	r2, r3, #22
 8103aee:	d402      	bmi.n	8103af6 <_vfiprintf_r+0x32>
 8103af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8103af2:	f000 fd63 	bl	81045bc <__retarget_lock_acquire_recursive>
 8103af6:	89ab      	ldrh	r3, [r5, #12]
 8103af8:	071b      	lsls	r3, r3, #28
 8103afa:	d501      	bpl.n	8103b00 <_vfiprintf_r+0x3c>
 8103afc:	692b      	ldr	r3, [r5, #16]
 8103afe:	b9eb      	cbnz	r3, 8103b3c <_vfiprintf_r+0x78>
 8103b00:	4629      	mov	r1, r5
 8103b02:	4630      	mov	r0, r6
 8103b04:	f000 fb2c 	bl	8104160 <__swsetup_r>
 8103b08:	b1c0      	cbz	r0, 8103b3c <_vfiprintf_r+0x78>
 8103b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8103b0c:	07dc      	lsls	r4, r3, #31
 8103b0e:	d50e      	bpl.n	8103b2e <_vfiprintf_r+0x6a>
 8103b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8103b14:	b01d      	add	sp, #116	; 0x74
 8103b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8103b1a:	4b7b      	ldr	r3, [pc, #492]	; (8103d08 <_vfiprintf_r+0x244>)
 8103b1c:	429d      	cmp	r5, r3
 8103b1e:	d101      	bne.n	8103b24 <_vfiprintf_r+0x60>
 8103b20:	68b5      	ldr	r5, [r6, #8]
 8103b22:	e7df      	b.n	8103ae4 <_vfiprintf_r+0x20>
 8103b24:	4b79      	ldr	r3, [pc, #484]	; (8103d0c <_vfiprintf_r+0x248>)
 8103b26:	429d      	cmp	r5, r3
 8103b28:	bf08      	it	eq
 8103b2a:	68f5      	ldreq	r5, [r6, #12]
 8103b2c:	e7da      	b.n	8103ae4 <_vfiprintf_r+0x20>
 8103b2e:	89ab      	ldrh	r3, [r5, #12]
 8103b30:	0598      	lsls	r0, r3, #22
 8103b32:	d4ed      	bmi.n	8103b10 <_vfiprintf_r+0x4c>
 8103b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8103b36:	f000 fd42 	bl	81045be <__retarget_lock_release_recursive>
 8103b3a:	e7e9      	b.n	8103b10 <_vfiprintf_r+0x4c>
 8103b3c:	2300      	movs	r3, #0
 8103b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8103b40:	2320      	movs	r3, #32
 8103b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8103b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8103b4a:	2330      	movs	r3, #48	; 0x30
 8103b4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8103d10 <_vfiprintf_r+0x24c>
 8103b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8103b54:	f04f 0901 	mov.w	r9, #1
 8103b58:	4623      	mov	r3, r4
 8103b5a:	469a      	mov	sl, r3
 8103b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8103b60:	b10a      	cbz	r2, 8103b66 <_vfiprintf_r+0xa2>
 8103b62:	2a25      	cmp	r2, #37	; 0x25
 8103b64:	d1f9      	bne.n	8103b5a <_vfiprintf_r+0x96>
 8103b66:	ebba 0b04 	subs.w	fp, sl, r4
 8103b6a:	d00b      	beq.n	8103b84 <_vfiprintf_r+0xc0>
 8103b6c:	465b      	mov	r3, fp
 8103b6e:	4622      	mov	r2, r4
 8103b70:	4629      	mov	r1, r5
 8103b72:	4630      	mov	r0, r6
 8103b74:	f7ff ff93 	bl	8103a9e <__sfputs_r>
 8103b78:	3001      	adds	r0, #1
 8103b7a:	f000 80aa 	beq.w	8103cd2 <_vfiprintf_r+0x20e>
 8103b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8103b80:	445a      	add	r2, fp
 8103b82:	9209      	str	r2, [sp, #36]	; 0x24
 8103b84:	f89a 3000 	ldrb.w	r3, [sl]
 8103b88:	2b00      	cmp	r3, #0
 8103b8a:	f000 80a2 	beq.w	8103cd2 <_vfiprintf_r+0x20e>
 8103b8e:	2300      	movs	r3, #0
 8103b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8103b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8103b98:	f10a 0a01 	add.w	sl, sl, #1
 8103b9c:	9304      	str	r3, [sp, #16]
 8103b9e:	9307      	str	r3, [sp, #28]
 8103ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8103ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8103ba6:	4654      	mov	r4, sl
 8103ba8:	2205      	movs	r2, #5
 8103baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8103bae:	4858      	ldr	r0, [pc, #352]	; (8103d10 <_vfiprintf_r+0x24c>)
 8103bb0:	f7fc fba6 	bl	8100300 <memchr>
 8103bb4:	9a04      	ldr	r2, [sp, #16]
 8103bb6:	b9d8      	cbnz	r0, 8103bf0 <_vfiprintf_r+0x12c>
 8103bb8:	06d1      	lsls	r1, r2, #27
 8103bba:	bf44      	itt	mi
 8103bbc:	2320      	movmi	r3, #32
 8103bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8103bc2:	0713      	lsls	r3, r2, #28
 8103bc4:	bf44      	itt	mi
 8103bc6:	232b      	movmi	r3, #43	; 0x2b
 8103bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8103bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8103bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8103bd2:	d015      	beq.n	8103c00 <_vfiprintf_r+0x13c>
 8103bd4:	9a07      	ldr	r2, [sp, #28]
 8103bd6:	4654      	mov	r4, sl
 8103bd8:	2000      	movs	r0, #0
 8103bda:	f04f 0c0a 	mov.w	ip, #10
 8103bde:	4621      	mov	r1, r4
 8103be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8103be4:	3b30      	subs	r3, #48	; 0x30
 8103be6:	2b09      	cmp	r3, #9
 8103be8:	d94e      	bls.n	8103c88 <_vfiprintf_r+0x1c4>
 8103bea:	b1b0      	cbz	r0, 8103c1a <_vfiprintf_r+0x156>
 8103bec:	9207      	str	r2, [sp, #28]
 8103bee:	e014      	b.n	8103c1a <_vfiprintf_r+0x156>
 8103bf0:	eba0 0308 	sub.w	r3, r0, r8
 8103bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8103bf8:	4313      	orrs	r3, r2
 8103bfa:	9304      	str	r3, [sp, #16]
 8103bfc:	46a2      	mov	sl, r4
 8103bfe:	e7d2      	b.n	8103ba6 <_vfiprintf_r+0xe2>
 8103c00:	9b03      	ldr	r3, [sp, #12]
 8103c02:	1d19      	adds	r1, r3, #4
 8103c04:	681b      	ldr	r3, [r3, #0]
 8103c06:	9103      	str	r1, [sp, #12]
 8103c08:	2b00      	cmp	r3, #0
 8103c0a:	bfbb      	ittet	lt
 8103c0c:	425b      	neglt	r3, r3
 8103c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8103c12:	9307      	strge	r3, [sp, #28]
 8103c14:	9307      	strlt	r3, [sp, #28]
 8103c16:	bfb8      	it	lt
 8103c18:	9204      	strlt	r2, [sp, #16]
 8103c1a:	7823      	ldrb	r3, [r4, #0]
 8103c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8103c1e:	d10c      	bne.n	8103c3a <_vfiprintf_r+0x176>
 8103c20:	7863      	ldrb	r3, [r4, #1]
 8103c22:	2b2a      	cmp	r3, #42	; 0x2a
 8103c24:	d135      	bne.n	8103c92 <_vfiprintf_r+0x1ce>
 8103c26:	9b03      	ldr	r3, [sp, #12]
 8103c28:	1d1a      	adds	r2, r3, #4
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	9203      	str	r2, [sp, #12]
 8103c2e:	2b00      	cmp	r3, #0
 8103c30:	bfb8      	it	lt
 8103c32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8103c36:	3402      	adds	r4, #2
 8103c38:	9305      	str	r3, [sp, #20]
 8103c3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8103d20 <_vfiprintf_r+0x25c>
 8103c3e:	7821      	ldrb	r1, [r4, #0]
 8103c40:	2203      	movs	r2, #3
 8103c42:	4650      	mov	r0, sl
 8103c44:	f7fc fb5c 	bl	8100300 <memchr>
 8103c48:	b140      	cbz	r0, 8103c5c <_vfiprintf_r+0x198>
 8103c4a:	2340      	movs	r3, #64	; 0x40
 8103c4c:	eba0 000a 	sub.w	r0, r0, sl
 8103c50:	fa03 f000 	lsl.w	r0, r3, r0
 8103c54:	9b04      	ldr	r3, [sp, #16]
 8103c56:	4303      	orrs	r3, r0
 8103c58:	3401      	adds	r4, #1
 8103c5a:	9304      	str	r3, [sp, #16]
 8103c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8103c60:	482c      	ldr	r0, [pc, #176]	; (8103d14 <_vfiprintf_r+0x250>)
 8103c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8103c66:	2206      	movs	r2, #6
 8103c68:	f7fc fb4a 	bl	8100300 <memchr>
 8103c6c:	2800      	cmp	r0, #0
 8103c6e:	d03f      	beq.n	8103cf0 <_vfiprintf_r+0x22c>
 8103c70:	4b29      	ldr	r3, [pc, #164]	; (8103d18 <_vfiprintf_r+0x254>)
 8103c72:	bb1b      	cbnz	r3, 8103cbc <_vfiprintf_r+0x1f8>
 8103c74:	9b03      	ldr	r3, [sp, #12]
 8103c76:	3307      	adds	r3, #7
 8103c78:	f023 0307 	bic.w	r3, r3, #7
 8103c7c:	3308      	adds	r3, #8
 8103c7e:	9303      	str	r3, [sp, #12]
 8103c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8103c82:	443b      	add	r3, r7
 8103c84:	9309      	str	r3, [sp, #36]	; 0x24
 8103c86:	e767      	b.n	8103b58 <_vfiprintf_r+0x94>
 8103c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8103c8c:	460c      	mov	r4, r1
 8103c8e:	2001      	movs	r0, #1
 8103c90:	e7a5      	b.n	8103bde <_vfiprintf_r+0x11a>
 8103c92:	2300      	movs	r3, #0
 8103c94:	3401      	adds	r4, #1
 8103c96:	9305      	str	r3, [sp, #20]
 8103c98:	4619      	mov	r1, r3
 8103c9a:	f04f 0c0a 	mov.w	ip, #10
 8103c9e:	4620      	mov	r0, r4
 8103ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8103ca4:	3a30      	subs	r2, #48	; 0x30
 8103ca6:	2a09      	cmp	r2, #9
 8103ca8:	d903      	bls.n	8103cb2 <_vfiprintf_r+0x1ee>
 8103caa:	2b00      	cmp	r3, #0
 8103cac:	d0c5      	beq.n	8103c3a <_vfiprintf_r+0x176>
 8103cae:	9105      	str	r1, [sp, #20]
 8103cb0:	e7c3      	b.n	8103c3a <_vfiprintf_r+0x176>
 8103cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8103cb6:	4604      	mov	r4, r0
 8103cb8:	2301      	movs	r3, #1
 8103cba:	e7f0      	b.n	8103c9e <_vfiprintf_r+0x1da>
 8103cbc:	ab03      	add	r3, sp, #12
 8103cbe:	9300      	str	r3, [sp, #0]
 8103cc0:	462a      	mov	r2, r5
 8103cc2:	4b16      	ldr	r3, [pc, #88]	; (8103d1c <_vfiprintf_r+0x258>)
 8103cc4:	a904      	add	r1, sp, #16
 8103cc6:	4630      	mov	r0, r6
 8103cc8:	f3af 8000 	nop.w
 8103ccc:	4607      	mov	r7, r0
 8103cce:	1c78      	adds	r0, r7, #1
 8103cd0:	d1d6      	bne.n	8103c80 <_vfiprintf_r+0x1bc>
 8103cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8103cd4:	07d9      	lsls	r1, r3, #31
 8103cd6:	d405      	bmi.n	8103ce4 <_vfiprintf_r+0x220>
 8103cd8:	89ab      	ldrh	r3, [r5, #12]
 8103cda:	059a      	lsls	r2, r3, #22
 8103cdc:	d402      	bmi.n	8103ce4 <_vfiprintf_r+0x220>
 8103cde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8103ce0:	f000 fc6d 	bl	81045be <__retarget_lock_release_recursive>
 8103ce4:	89ab      	ldrh	r3, [r5, #12]
 8103ce6:	065b      	lsls	r3, r3, #25
 8103ce8:	f53f af12 	bmi.w	8103b10 <_vfiprintf_r+0x4c>
 8103cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8103cee:	e711      	b.n	8103b14 <_vfiprintf_r+0x50>
 8103cf0:	ab03      	add	r3, sp, #12
 8103cf2:	9300      	str	r3, [sp, #0]
 8103cf4:	462a      	mov	r2, r5
 8103cf6:	4b09      	ldr	r3, [pc, #36]	; (8103d1c <_vfiprintf_r+0x258>)
 8103cf8:	a904      	add	r1, sp, #16
 8103cfa:	4630      	mov	r0, r6
 8103cfc:	f000 f880 	bl	8103e00 <_printf_i>
 8103d00:	e7e4      	b.n	8103ccc <_vfiprintf_r+0x208>
 8103d02:	bf00      	nop
 8103d04:	08104b90 	.word	0x08104b90
 8103d08:	08104bb0 	.word	0x08104bb0
 8103d0c:	08104b70 	.word	0x08104b70
 8103d10:	08104b3c 	.word	0x08104b3c
 8103d14:	08104b46 	.word	0x08104b46
 8103d18:	00000000 	.word	0x00000000
 8103d1c:	08103a9f 	.word	0x08103a9f
 8103d20:	08104b42 	.word	0x08104b42

08103d24 <_printf_common>:
 8103d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8103d28:	4616      	mov	r6, r2
 8103d2a:	4699      	mov	r9, r3
 8103d2c:	688a      	ldr	r2, [r1, #8]
 8103d2e:	690b      	ldr	r3, [r1, #16]
 8103d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8103d34:	4293      	cmp	r3, r2
 8103d36:	bfb8      	it	lt
 8103d38:	4613      	movlt	r3, r2
 8103d3a:	6033      	str	r3, [r6, #0]
 8103d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8103d40:	4607      	mov	r7, r0
 8103d42:	460c      	mov	r4, r1
 8103d44:	b10a      	cbz	r2, 8103d4a <_printf_common+0x26>
 8103d46:	3301      	adds	r3, #1
 8103d48:	6033      	str	r3, [r6, #0]
 8103d4a:	6823      	ldr	r3, [r4, #0]
 8103d4c:	0699      	lsls	r1, r3, #26
 8103d4e:	bf42      	ittt	mi
 8103d50:	6833      	ldrmi	r3, [r6, #0]
 8103d52:	3302      	addmi	r3, #2
 8103d54:	6033      	strmi	r3, [r6, #0]
 8103d56:	6825      	ldr	r5, [r4, #0]
 8103d58:	f015 0506 	ands.w	r5, r5, #6
 8103d5c:	d106      	bne.n	8103d6c <_printf_common+0x48>
 8103d5e:	f104 0a19 	add.w	sl, r4, #25
 8103d62:	68e3      	ldr	r3, [r4, #12]
 8103d64:	6832      	ldr	r2, [r6, #0]
 8103d66:	1a9b      	subs	r3, r3, r2
 8103d68:	42ab      	cmp	r3, r5
 8103d6a:	dc26      	bgt.n	8103dba <_printf_common+0x96>
 8103d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8103d70:	1e13      	subs	r3, r2, #0
 8103d72:	6822      	ldr	r2, [r4, #0]
 8103d74:	bf18      	it	ne
 8103d76:	2301      	movne	r3, #1
 8103d78:	0692      	lsls	r2, r2, #26
 8103d7a:	d42b      	bmi.n	8103dd4 <_printf_common+0xb0>
 8103d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8103d80:	4649      	mov	r1, r9
 8103d82:	4638      	mov	r0, r7
 8103d84:	47c0      	blx	r8
 8103d86:	3001      	adds	r0, #1
 8103d88:	d01e      	beq.n	8103dc8 <_printf_common+0xa4>
 8103d8a:	6823      	ldr	r3, [r4, #0]
 8103d8c:	68e5      	ldr	r5, [r4, #12]
 8103d8e:	6832      	ldr	r2, [r6, #0]
 8103d90:	f003 0306 	and.w	r3, r3, #6
 8103d94:	2b04      	cmp	r3, #4
 8103d96:	bf08      	it	eq
 8103d98:	1aad      	subeq	r5, r5, r2
 8103d9a:	68a3      	ldr	r3, [r4, #8]
 8103d9c:	6922      	ldr	r2, [r4, #16]
 8103d9e:	bf0c      	ite	eq
 8103da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8103da4:	2500      	movne	r5, #0
 8103da6:	4293      	cmp	r3, r2
 8103da8:	bfc4      	itt	gt
 8103daa:	1a9b      	subgt	r3, r3, r2
 8103dac:	18ed      	addgt	r5, r5, r3
 8103dae:	2600      	movs	r6, #0
 8103db0:	341a      	adds	r4, #26
 8103db2:	42b5      	cmp	r5, r6
 8103db4:	d11a      	bne.n	8103dec <_printf_common+0xc8>
 8103db6:	2000      	movs	r0, #0
 8103db8:	e008      	b.n	8103dcc <_printf_common+0xa8>
 8103dba:	2301      	movs	r3, #1
 8103dbc:	4652      	mov	r2, sl
 8103dbe:	4649      	mov	r1, r9
 8103dc0:	4638      	mov	r0, r7
 8103dc2:	47c0      	blx	r8
 8103dc4:	3001      	adds	r0, #1
 8103dc6:	d103      	bne.n	8103dd0 <_printf_common+0xac>
 8103dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8103dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8103dd0:	3501      	adds	r5, #1
 8103dd2:	e7c6      	b.n	8103d62 <_printf_common+0x3e>
 8103dd4:	18e1      	adds	r1, r4, r3
 8103dd6:	1c5a      	adds	r2, r3, #1
 8103dd8:	2030      	movs	r0, #48	; 0x30
 8103dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8103dde:	4422      	add	r2, r4
 8103de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8103de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8103de8:	3302      	adds	r3, #2
 8103dea:	e7c7      	b.n	8103d7c <_printf_common+0x58>
 8103dec:	2301      	movs	r3, #1
 8103dee:	4622      	mov	r2, r4
 8103df0:	4649      	mov	r1, r9
 8103df2:	4638      	mov	r0, r7
 8103df4:	47c0      	blx	r8
 8103df6:	3001      	adds	r0, #1
 8103df8:	d0e6      	beq.n	8103dc8 <_printf_common+0xa4>
 8103dfa:	3601      	adds	r6, #1
 8103dfc:	e7d9      	b.n	8103db2 <_printf_common+0x8e>
	...

08103e00 <_printf_i>:
 8103e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8103e04:	7e0f      	ldrb	r7, [r1, #24]
 8103e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8103e08:	2f78      	cmp	r7, #120	; 0x78
 8103e0a:	4691      	mov	r9, r2
 8103e0c:	4680      	mov	r8, r0
 8103e0e:	460c      	mov	r4, r1
 8103e10:	469a      	mov	sl, r3
 8103e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8103e16:	d807      	bhi.n	8103e28 <_printf_i+0x28>
 8103e18:	2f62      	cmp	r7, #98	; 0x62
 8103e1a:	d80a      	bhi.n	8103e32 <_printf_i+0x32>
 8103e1c:	2f00      	cmp	r7, #0
 8103e1e:	f000 80d8 	beq.w	8103fd2 <_printf_i+0x1d2>
 8103e22:	2f58      	cmp	r7, #88	; 0x58
 8103e24:	f000 80a3 	beq.w	8103f6e <_printf_i+0x16e>
 8103e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8103e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8103e30:	e03a      	b.n	8103ea8 <_printf_i+0xa8>
 8103e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8103e36:	2b15      	cmp	r3, #21
 8103e38:	d8f6      	bhi.n	8103e28 <_printf_i+0x28>
 8103e3a:	a101      	add	r1, pc, #4	; (adr r1, 8103e40 <_printf_i+0x40>)
 8103e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8103e40:	08103e99 	.word	0x08103e99
 8103e44:	08103ead 	.word	0x08103ead
 8103e48:	08103e29 	.word	0x08103e29
 8103e4c:	08103e29 	.word	0x08103e29
 8103e50:	08103e29 	.word	0x08103e29
 8103e54:	08103e29 	.word	0x08103e29
 8103e58:	08103ead 	.word	0x08103ead
 8103e5c:	08103e29 	.word	0x08103e29
 8103e60:	08103e29 	.word	0x08103e29
 8103e64:	08103e29 	.word	0x08103e29
 8103e68:	08103e29 	.word	0x08103e29
 8103e6c:	08103fb9 	.word	0x08103fb9
 8103e70:	08103edd 	.word	0x08103edd
 8103e74:	08103f9b 	.word	0x08103f9b
 8103e78:	08103e29 	.word	0x08103e29
 8103e7c:	08103e29 	.word	0x08103e29
 8103e80:	08103fdb 	.word	0x08103fdb
 8103e84:	08103e29 	.word	0x08103e29
 8103e88:	08103edd 	.word	0x08103edd
 8103e8c:	08103e29 	.word	0x08103e29
 8103e90:	08103e29 	.word	0x08103e29
 8103e94:	08103fa3 	.word	0x08103fa3
 8103e98:	682b      	ldr	r3, [r5, #0]
 8103e9a:	1d1a      	adds	r2, r3, #4
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	602a      	str	r2, [r5, #0]
 8103ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8103ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8103ea8:	2301      	movs	r3, #1
 8103eaa:	e0a3      	b.n	8103ff4 <_printf_i+0x1f4>
 8103eac:	6820      	ldr	r0, [r4, #0]
 8103eae:	6829      	ldr	r1, [r5, #0]
 8103eb0:	0606      	lsls	r6, r0, #24
 8103eb2:	f101 0304 	add.w	r3, r1, #4
 8103eb6:	d50a      	bpl.n	8103ece <_printf_i+0xce>
 8103eb8:	680e      	ldr	r6, [r1, #0]
 8103eba:	602b      	str	r3, [r5, #0]
 8103ebc:	2e00      	cmp	r6, #0
 8103ebe:	da03      	bge.n	8103ec8 <_printf_i+0xc8>
 8103ec0:	232d      	movs	r3, #45	; 0x2d
 8103ec2:	4276      	negs	r6, r6
 8103ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8103ec8:	485e      	ldr	r0, [pc, #376]	; (8104044 <_printf_i+0x244>)
 8103eca:	230a      	movs	r3, #10
 8103ecc:	e019      	b.n	8103f02 <_printf_i+0x102>
 8103ece:	680e      	ldr	r6, [r1, #0]
 8103ed0:	602b      	str	r3, [r5, #0]
 8103ed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8103ed6:	bf18      	it	ne
 8103ed8:	b236      	sxthne	r6, r6
 8103eda:	e7ef      	b.n	8103ebc <_printf_i+0xbc>
 8103edc:	682b      	ldr	r3, [r5, #0]
 8103ede:	6820      	ldr	r0, [r4, #0]
 8103ee0:	1d19      	adds	r1, r3, #4
 8103ee2:	6029      	str	r1, [r5, #0]
 8103ee4:	0601      	lsls	r1, r0, #24
 8103ee6:	d501      	bpl.n	8103eec <_printf_i+0xec>
 8103ee8:	681e      	ldr	r6, [r3, #0]
 8103eea:	e002      	b.n	8103ef2 <_printf_i+0xf2>
 8103eec:	0646      	lsls	r6, r0, #25
 8103eee:	d5fb      	bpl.n	8103ee8 <_printf_i+0xe8>
 8103ef0:	881e      	ldrh	r6, [r3, #0]
 8103ef2:	4854      	ldr	r0, [pc, #336]	; (8104044 <_printf_i+0x244>)
 8103ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8103ef6:	bf0c      	ite	eq
 8103ef8:	2308      	moveq	r3, #8
 8103efa:	230a      	movne	r3, #10
 8103efc:	2100      	movs	r1, #0
 8103efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8103f02:	6865      	ldr	r5, [r4, #4]
 8103f04:	60a5      	str	r5, [r4, #8]
 8103f06:	2d00      	cmp	r5, #0
 8103f08:	bfa2      	ittt	ge
 8103f0a:	6821      	ldrge	r1, [r4, #0]
 8103f0c:	f021 0104 	bicge.w	r1, r1, #4
 8103f10:	6021      	strge	r1, [r4, #0]
 8103f12:	b90e      	cbnz	r6, 8103f18 <_printf_i+0x118>
 8103f14:	2d00      	cmp	r5, #0
 8103f16:	d04d      	beq.n	8103fb4 <_printf_i+0x1b4>
 8103f18:	4615      	mov	r5, r2
 8103f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8103f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8103f22:	5dc7      	ldrb	r7, [r0, r7]
 8103f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8103f28:	4637      	mov	r7, r6
 8103f2a:	42bb      	cmp	r3, r7
 8103f2c:	460e      	mov	r6, r1
 8103f2e:	d9f4      	bls.n	8103f1a <_printf_i+0x11a>
 8103f30:	2b08      	cmp	r3, #8
 8103f32:	d10b      	bne.n	8103f4c <_printf_i+0x14c>
 8103f34:	6823      	ldr	r3, [r4, #0]
 8103f36:	07de      	lsls	r6, r3, #31
 8103f38:	d508      	bpl.n	8103f4c <_printf_i+0x14c>
 8103f3a:	6923      	ldr	r3, [r4, #16]
 8103f3c:	6861      	ldr	r1, [r4, #4]
 8103f3e:	4299      	cmp	r1, r3
 8103f40:	bfde      	ittt	le
 8103f42:	2330      	movle	r3, #48	; 0x30
 8103f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8103f48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8103f4c:	1b52      	subs	r2, r2, r5
 8103f4e:	6122      	str	r2, [r4, #16]
 8103f50:	f8cd a000 	str.w	sl, [sp]
 8103f54:	464b      	mov	r3, r9
 8103f56:	aa03      	add	r2, sp, #12
 8103f58:	4621      	mov	r1, r4
 8103f5a:	4640      	mov	r0, r8
 8103f5c:	f7ff fee2 	bl	8103d24 <_printf_common>
 8103f60:	3001      	adds	r0, #1
 8103f62:	d14c      	bne.n	8103ffe <_printf_i+0x1fe>
 8103f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8103f68:	b004      	add	sp, #16
 8103f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8103f6e:	4835      	ldr	r0, [pc, #212]	; (8104044 <_printf_i+0x244>)
 8103f70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8103f74:	6829      	ldr	r1, [r5, #0]
 8103f76:	6823      	ldr	r3, [r4, #0]
 8103f78:	f851 6b04 	ldr.w	r6, [r1], #4
 8103f7c:	6029      	str	r1, [r5, #0]
 8103f7e:	061d      	lsls	r5, r3, #24
 8103f80:	d514      	bpl.n	8103fac <_printf_i+0x1ac>
 8103f82:	07df      	lsls	r7, r3, #31
 8103f84:	bf44      	itt	mi
 8103f86:	f043 0320 	orrmi.w	r3, r3, #32
 8103f8a:	6023      	strmi	r3, [r4, #0]
 8103f8c:	b91e      	cbnz	r6, 8103f96 <_printf_i+0x196>
 8103f8e:	6823      	ldr	r3, [r4, #0]
 8103f90:	f023 0320 	bic.w	r3, r3, #32
 8103f94:	6023      	str	r3, [r4, #0]
 8103f96:	2310      	movs	r3, #16
 8103f98:	e7b0      	b.n	8103efc <_printf_i+0xfc>
 8103f9a:	6823      	ldr	r3, [r4, #0]
 8103f9c:	f043 0320 	orr.w	r3, r3, #32
 8103fa0:	6023      	str	r3, [r4, #0]
 8103fa2:	2378      	movs	r3, #120	; 0x78
 8103fa4:	4828      	ldr	r0, [pc, #160]	; (8104048 <_printf_i+0x248>)
 8103fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8103faa:	e7e3      	b.n	8103f74 <_printf_i+0x174>
 8103fac:	0659      	lsls	r1, r3, #25
 8103fae:	bf48      	it	mi
 8103fb0:	b2b6      	uxthmi	r6, r6
 8103fb2:	e7e6      	b.n	8103f82 <_printf_i+0x182>
 8103fb4:	4615      	mov	r5, r2
 8103fb6:	e7bb      	b.n	8103f30 <_printf_i+0x130>
 8103fb8:	682b      	ldr	r3, [r5, #0]
 8103fba:	6826      	ldr	r6, [r4, #0]
 8103fbc:	6961      	ldr	r1, [r4, #20]
 8103fbe:	1d18      	adds	r0, r3, #4
 8103fc0:	6028      	str	r0, [r5, #0]
 8103fc2:	0635      	lsls	r5, r6, #24
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	d501      	bpl.n	8103fcc <_printf_i+0x1cc>
 8103fc8:	6019      	str	r1, [r3, #0]
 8103fca:	e002      	b.n	8103fd2 <_printf_i+0x1d2>
 8103fcc:	0670      	lsls	r0, r6, #25
 8103fce:	d5fb      	bpl.n	8103fc8 <_printf_i+0x1c8>
 8103fd0:	8019      	strh	r1, [r3, #0]
 8103fd2:	2300      	movs	r3, #0
 8103fd4:	6123      	str	r3, [r4, #16]
 8103fd6:	4615      	mov	r5, r2
 8103fd8:	e7ba      	b.n	8103f50 <_printf_i+0x150>
 8103fda:	682b      	ldr	r3, [r5, #0]
 8103fdc:	1d1a      	adds	r2, r3, #4
 8103fde:	602a      	str	r2, [r5, #0]
 8103fe0:	681d      	ldr	r5, [r3, #0]
 8103fe2:	6862      	ldr	r2, [r4, #4]
 8103fe4:	2100      	movs	r1, #0
 8103fe6:	4628      	mov	r0, r5
 8103fe8:	f7fc f98a 	bl	8100300 <memchr>
 8103fec:	b108      	cbz	r0, 8103ff2 <_printf_i+0x1f2>
 8103fee:	1b40      	subs	r0, r0, r5
 8103ff0:	6060      	str	r0, [r4, #4]
 8103ff2:	6863      	ldr	r3, [r4, #4]
 8103ff4:	6123      	str	r3, [r4, #16]
 8103ff6:	2300      	movs	r3, #0
 8103ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8103ffc:	e7a8      	b.n	8103f50 <_printf_i+0x150>
 8103ffe:	6923      	ldr	r3, [r4, #16]
 8104000:	462a      	mov	r2, r5
 8104002:	4649      	mov	r1, r9
 8104004:	4640      	mov	r0, r8
 8104006:	47d0      	blx	sl
 8104008:	3001      	adds	r0, #1
 810400a:	d0ab      	beq.n	8103f64 <_printf_i+0x164>
 810400c:	6823      	ldr	r3, [r4, #0]
 810400e:	079b      	lsls	r3, r3, #30
 8104010:	d413      	bmi.n	810403a <_printf_i+0x23a>
 8104012:	68e0      	ldr	r0, [r4, #12]
 8104014:	9b03      	ldr	r3, [sp, #12]
 8104016:	4298      	cmp	r0, r3
 8104018:	bfb8      	it	lt
 810401a:	4618      	movlt	r0, r3
 810401c:	e7a4      	b.n	8103f68 <_printf_i+0x168>
 810401e:	2301      	movs	r3, #1
 8104020:	4632      	mov	r2, r6
 8104022:	4649      	mov	r1, r9
 8104024:	4640      	mov	r0, r8
 8104026:	47d0      	blx	sl
 8104028:	3001      	adds	r0, #1
 810402a:	d09b      	beq.n	8103f64 <_printf_i+0x164>
 810402c:	3501      	adds	r5, #1
 810402e:	68e3      	ldr	r3, [r4, #12]
 8104030:	9903      	ldr	r1, [sp, #12]
 8104032:	1a5b      	subs	r3, r3, r1
 8104034:	42ab      	cmp	r3, r5
 8104036:	dcf2      	bgt.n	810401e <_printf_i+0x21e>
 8104038:	e7eb      	b.n	8104012 <_printf_i+0x212>
 810403a:	2500      	movs	r5, #0
 810403c:	f104 0619 	add.w	r6, r4, #25
 8104040:	e7f5      	b.n	810402e <_printf_i+0x22e>
 8104042:	bf00      	nop
 8104044:	08104b4d 	.word	0x08104b4d
 8104048:	08104b5e 	.word	0x08104b5e

0810404c <_sbrk_r>:
 810404c:	b538      	push	{r3, r4, r5, lr}
 810404e:	4d06      	ldr	r5, [pc, #24]	; (8104068 <_sbrk_r+0x1c>)
 8104050:	2300      	movs	r3, #0
 8104052:	4604      	mov	r4, r0
 8104054:	4608      	mov	r0, r1
 8104056:	602b      	str	r3, [r5, #0]
 8104058:	f7fc fc00 	bl	810085c <_sbrk>
 810405c:	1c43      	adds	r3, r0, #1
 810405e:	d102      	bne.n	8104066 <_sbrk_r+0x1a>
 8104060:	682b      	ldr	r3, [r5, #0]
 8104062:	b103      	cbz	r3, 8104066 <_sbrk_r+0x1a>
 8104064:	6023      	str	r3, [r4, #0]
 8104066:	bd38      	pop	{r3, r4, r5, pc}
 8104068:	100002a0 	.word	0x100002a0

0810406c <strncmp>:
 810406c:	b510      	push	{r4, lr}
 810406e:	b17a      	cbz	r2, 8104090 <strncmp+0x24>
 8104070:	4603      	mov	r3, r0
 8104072:	3901      	subs	r1, #1
 8104074:	1884      	adds	r4, r0, r2
 8104076:	f813 0b01 	ldrb.w	r0, [r3], #1
 810407a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810407e:	4290      	cmp	r0, r2
 8104080:	d101      	bne.n	8104086 <strncmp+0x1a>
 8104082:	42a3      	cmp	r3, r4
 8104084:	d101      	bne.n	810408a <strncmp+0x1e>
 8104086:	1a80      	subs	r0, r0, r2
 8104088:	bd10      	pop	{r4, pc}
 810408a:	2800      	cmp	r0, #0
 810408c:	d1f3      	bne.n	8104076 <strncmp+0xa>
 810408e:	e7fa      	b.n	8104086 <strncmp+0x1a>
 8104090:	4610      	mov	r0, r2
 8104092:	e7f9      	b.n	8104088 <strncmp+0x1c>

08104094 <strncpy>:
 8104094:	b510      	push	{r4, lr}
 8104096:	3901      	subs	r1, #1
 8104098:	4603      	mov	r3, r0
 810409a:	b132      	cbz	r2, 81040aa <strncpy+0x16>
 810409c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81040a0:	f803 4b01 	strb.w	r4, [r3], #1
 81040a4:	3a01      	subs	r2, #1
 81040a6:	2c00      	cmp	r4, #0
 81040a8:	d1f7      	bne.n	810409a <strncpy+0x6>
 81040aa:	441a      	add	r2, r3
 81040ac:	2100      	movs	r1, #0
 81040ae:	4293      	cmp	r3, r2
 81040b0:	d100      	bne.n	81040b4 <strncpy+0x20>
 81040b2:	bd10      	pop	{r4, pc}
 81040b4:	f803 1b01 	strb.w	r1, [r3], #1
 81040b8:	e7f9      	b.n	81040ae <strncpy+0x1a>
	...

081040bc <__swbuf_r>:
 81040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81040be:	460e      	mov	r6, r1
 81040c0:	4614      	mov	r4, r2
 81040c2:	4605      	mov	r5, r0
 81040c4:	b118      	cbz	r0, 81040ce <__swbuf_r+0x12>
 81040c6:	6983      	ldr	r3, [r0, #24]
 81040c8:	b90b      	cbnz	r3, 81040ce <__swbuf_r+0x12>
 81040ca:	f000 f9d9 	bl	8104480 <__sinit>
 81040ce:	4b21      	ldr	r3, [pc, #132]	; (8104154 <__swbuf_r+0x98>)
 81040d0:	429c      	cmp	r4, r3
 81040d2:	d12b      	bne.n	810412c <__swbuf_r+0x70>
 81040d4:	686c      	ldr	r4, [r5, #4]
 81040d6:	69a3      	ldr	r3, [r4, #24]
 81040d8:	60a3      	str	r3, [r4, #8]
 81040da:	89a3      	ldrh	r3, [r4, #12]
 81040dc:	071a      	lsls	r2, r3, #28
 81040de:	d52f      	bpl.n	8104140 <__swbuf_r+0x84>
 81040e0:	6923      	ldr	r3, [r4, #16]
 81040e2:	b36b      	cbz	r3, 8104140 <__swbuf_r+0x84>
 81040e4:	6923      	ldr	r3, [r4, #16]
 81040e6:	6820      	ldr	r0, [r4, #0]
 81040e8:	1ac0      	subs	r0, r0, r3
 81040ea:	6963      	ldr	r3, [r4, #20]
 81040ec:	b2f6      	uxtb	r6, r6
 81040ee:	4283      	cmp	r3, r0
 81040f0:	4637      	mov	r7, r6
 81040f2:	dc04      	bgt.n	81040fe <__swbuf_r+0x42>
 81040f4:	4621      	mov	r1, r4
 81040f6:	4628      	mov	r0, r5
 81040f8:	f000 f92e 	bl	8104358 <_fflush_r>
 81040fc:	bb30      	cbnz	r0, 810414c <__swbuf_r+0x90>
 81040fe:	68a3      	ldr	r3, [r4, #8]
 8104100:	3b01      	subs	r3, #1
 8104102:	60a3      	str	r3, [r4, #8]
 8104104:	6823      	ldr	r3, [r4, #0]
 8104106:	1c5a      	adds	r2, r3, #1
 8104108:	6022      	str	r2, [r4, #0]
 810410a:	701e      	strb	r6, [r3, #0]
 810410c:	6963      	ldr	r3, [r4, #20]
 810410e:	3001      	adds	r0, #1
 8104110:	4283      	cmp	r3, r0
 8104112:	d004      	beq.n	810411e <__swbuf_r+0x62>
 8104114:	89a3      	ldrh	r3, [r4, #12]
 8104116:	07db      	lsls	r3, r3, #31
 8104118:	d506      	bpl.n	8104128 <__swbuf_r+0x6c>
 810411a:	2e0a      	cmp	r6, #10
 810411c:	d104      	bne.n	8104128 <__swbuf_r+0x6c>
 810411e:	4621      	mov	r1, r4
 8104120:	4628      	mov	r0, r5
 8104122:	f000 f919 	bl	8104358 <_fflush_r>
 8104126:	b988      	cbnz	r0, 810414c <__swbuf_r+0x90>
 8104128:	4638      	mov	r0, r7
 810412a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810412c:	4b0a      	ldr	r3, [pc, #40]	; (8104158 <__swbuf_r+0x9c>)
 810412e:	429c      	cmp	r4, r3
 8104130:	d101      	bne.n	8104136 <__swbuf_r+0x7a>
 8104132:	68ac      	ldr	r4, [r5, #8]
 8104134:	e7cf      	b.n	81040d6 <__swbuf_r+0x1a>
 8104136:	4b09      	ldr	r3, [pc, #36]	; (810415c <__swbuf_r+0xa0>)
 8104138:	429c      	cmp	r4, r3
 810413a:	bf08      	it	eq
 810413c:	68ec      	ldreq	r4, [r5, #12]
 810413e:	e7ca      	b.n	81040d6 <__swbuf_r+0x1a>
 8104140:	4621      	mov	r1, r4
 8104142:	4628      	mov	r0, r5
 8104144:	f000 f80c 	bl	8104160 <__swsetup_r>
 8104148:	2800      	cmp	r0, #0
 810414a:	d0cb      	beq.n	81040e4 <__swbuf_r+0x28>
 810414c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8104150:	e7ea      	b.n	8104128 <__swbuf_r+0x6c>
 8104152:	bf00      	nop
 8104154:	08104b90 	.word	0x08104b90
 8104158:	08104bb0 	.word	0x08104bb0
 810415c:	08104b70 	.word	0x08104b70

08104160 <__swsetup_r>:
 8104160:	4b32      	ldr	r3, [pc, #200]	; (810422c <__swsetup_r+0xcc>)
 8104162:	b570      	push	{r4, r5, r6, lr}
 8104164:	681d      	ldr	r5, [r3, #0]
 8104166:	4606      	mov	r6, r0
 8104168:	460c      	mov	r4, r1
 810416a:	b125      	cbz	r5, 8104176 <__swsetup_r+0x16>
 810416c:	69ab      	ldr	r3, [r5, #24]
 810416e:	b913      	cbnz	r3, 8104176 <__swsetup_r+0x16>
 8104170:	4628      	mov	r0, r5
 8104172:	f000 f985 	bl	8104480 <__sinit>
 8104176:	4b2e      	ldr	r3, [pc, #184]	; (8104230 <__swsetup_r+0xd0>)
 8104178:	429c      	cmp	r4, r3
 810417a:	d10f      	bne.n	810419c <__swsetup_r+0x3c>
 810417c:	686c      	ldr	r4, [r5, #4]
 810417e:	89a3      	ldrh	r3, [r4, #12]
 8104180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8104184:	0719      	lsls	r1, r3, #28
 8104186:	d42c      	bmi.n	81041e2 <__swsetup_r+0x82>
 8104188:	06dd      	lsls	r5, r3, #27
 810418a:	d411      	bmi.n	81041b0 <__swsetup_r+0x50>
 810418c:	2309      	movs	r3, #9
 810418e:	6033      	str	r3, [r6, #0]
 8104190:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8104194:	81a3      	strh	r3, [r4, #12]
 8104196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 810419a:	e03e      	b.n	810421a <__swsetup_r+0xba>
 810419c:	4b25      	ldr	r3, [pc, #148]	; (8104234 <__swsetup_r+0xd4>)
 810419e:	429c      	cmp	r4, r3
 81041a0:	d101      	bne.n	81041a6 <__swsetup_r+0x46>
 81041a2:	68ac      	ldr	r4, [r5, #8]
 81041a4:	e7eb      	b.n	810417e <__swsetup_r+0x1e>
 81041a6:	4b24      	ldr	r3, [pc, #144]	; (8104238 <__swsetup_r+0xd8>)
 81041a8:	429c      	cmp	r4, r3
 81041aa:	bf08      	it	eq
 81041ac:	68ec      	ldreq	r4, [r5, #12]
 81041ae:	e7e6      	b.n	810417e <__swsetup_r+0x1e>
 81041b0:	0758      	lsls	r0, r3, #29
 81041b2:	d512      	bpl.n	81041da <__swsetup_r+0x7a>
 81041b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81041b6:	b141      	cbz	r1, 81041ca <__swsetup_r+0x6a>
 81041b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81041bc:	4299      	cmp	r1, r3
 81041be:	d002      	beq.n	81041c6 <__swsetup_r+0x66>
 81041c0:	4630      	mov	r0, r6
 81041c2:	f7ff fb75 	bl	81038b0 <_free_r>
 81041c6:	2300      	movs	r3, #0
 81041c8:	6363      	str	r3, [r4, #52]	; 0x34
 81041ca:	89a3      	ldrh	r3, [r4, #12]
 81041cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81041d0:	81a3      	strh	r3, [r4, #12]
 81041d2:	2300      	movs	r3, #0
 81041d4:	6063      	str	r3, [r4, #4]
 81041d6:	6923      	ldr	r3, [r4, #16]
 81041d8:	6023      	str	r3, [r4, #0]
 81041da:	89a3      	ldrh	r3, [r4, #12]
 81041dc:	f043 0308 	orr.w	r3, r3, #8
 81041e0:	81a3      	strh	r3, [r4, #12]
 81041e2:	6923      	ldr	r3, [r4, #16]
 81041e4:	b94b      	cbnz	r3, 81041fa <__swsetup_r+0x9a>
 81041e6:	89a3      	ldrh	r3, [r4, #12]
 81041e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81041ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81041f0:	d003      	beq.n	81041fa <__swsetup_r+0x9a>
 81041f2:	4621      	mov	r1, r4
 81041f4:	4630      	mov	r0, r6
 81041f6:	f000 fa09 	bl	810460c <__smakebuf_r>
 81041fa:	89a0      	ldrh	r0, [r4, #12]
 81041fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8104200:	f010 0301 	ands.w	r3, r0, #1
 8104204:	d00a      	beq.n	810421c <__swsetup_r+0xbc>
 8104206:	2300      	movs	r3, #0
 8104208:	60a3      	str	r3, [r4, #8]
 810420a:	6963      	ldr	r3, [r4, #20]
 810420c:	425b      	negs	r3, r3
 810420e:	61a3      	str	r3, [r4, #24]
 8104210:	6923      	ldr	r3, [r4, #16]
 8104212:	b943      	cbnz	r3, 8104226 <__swsetup_r+0xc6>
 8104214:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8104218:	d1ba      	bne.n	8104190 <__swsetup_r+0x30>
 810421a:	bd70      	pop	{r4, r5, r6, pc}
 810421c:	0781      	lsls	r1, r0, #30
 810421e:	bf58      	it	pl
 8104220:	6963      	ldrpl	r3, [r4, #20]
 8104222:	60a3      	str	r3, [r4, #8]
 8104224:	e7f4      	b.n	8104210 <__swsetup_r+0xb0>
 8104226:	2000      	movs	r0, #0
 8104228:	e7f7      	b.n	810421a <__swsetup_r+0xba>
 810422a:	bf00      	nop
 810422c:	100000b8 	.word	0x100000b8
 8104230:	08104b90 	.word	0x08104b90
 8104234:	08104bb0 	.word	0x08104bb0
 8104238:	08104b70 	.word	0x08104b70

0810423c <abort>:
 810423c:	b508      	push	{r3, lr}
 810423e:	2006      	movs	r0, #6
 8104240:	f000 fa58 	bl	81046f4 <raise>
 8104244:	2001      	movs	r0, #1
 8104246:	f7fc faad 	bl	81007a4 <_exit>
	...

0810424c <__sflush_r>:
 810424c:	898a      	ldrh	r2, [r1, #12]
 810424e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104252:	4605      	mov	r5, r0
 8104254:	0710      	lsls	r0, r2, #28
 8104256:	460c      	mov	r4, r1
 8104258:	d458      	bmi.n	810430c <__sflush_r+0xc0>
 810425a:	684b      	ldr	r3, [r1, #4]
 810425c:	2b00      	cmp	r3, #0
 810425e:	dc05      	bgt.n	810426c <__sflush_r+0x20>
 8104260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8104262:	2b00      	cmp	r3, #0
 8104264:	dc02      	bgt.n	810426c <__sflush_r+0x20>
 8104266:	2000      	movs	r0, #0
 8104268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810426c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810426e:	2e00      	cmp	r6, #0
 8104270:	d0f9      	beq.n	8104266 <__sflush_r+0x1a>
 8104272:	2300      	movs	r3, #0
 8104274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8104278:	682f      	ldr	r7, [r5, #0]
 810427a:	602b      	str	r3, [r5, #0]
 810427c:	d032      	beq.n	81042e4 <__sflush_r+0x98>
 810427e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8104280:	89a3      	ldrh	r3, [r4, #12]
 8104282:	075a      	lsls	r2, r3, #29
 8104284:	d505      	bpl.n	8104292 <__sflush_r+0x46>
 8104286:	6863      	ldr	r3, [r4, #4]
 8104288:	1ac0      	subs	r0, r0, r3
 810428a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810428c:	b10b      	cbz	r3, 8104292 <__sflush_r+0x46>
 810428e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8104290:	1ac0      	subs	r0, r0, r3
 8104292:	2300      	movs	r3, #0
 8104294:	4602      	mov	r2, r0
 8104296:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8104298:	6a21      	ldr	r1, [r4, #32]
 810429a:	4628      	mov	r0, r5
 810429c:	47b0      	blx	r6
 810429e:	1c43      	adds	r3, r0, #1
 81042a0:	89a3      	ldrh	r3, [r4, #12]
 81042a2:	d106      	bne.n	81042b2 <__sflush_r+0x66>
 81042a4:	6829      	ldr	r1, [r5, #0]
 81042a6:	291d      	cmp	r1, #29
 81042a8:	d82c      	bhi.n	8104304 <__sflush_r+0xb8>
 81042aa:	4a2a      	ldr	r2, [pc, #168]	; (8104354 <__sflush_r+0x108>)
 81042ac:	40ca      	lsrs	r2, r1
 81042ae:	07d6      	lsls	r6, r2, #31
 81042b0:	d528      	bpl.n	8104304 <__sflush_r+0xb8>
 81042b2:	2200      	movs	r2, #0
 81042b4:	6062      	str	r2, [r4, #4]
 81042b6:	04d9      	lsls	r1, r3, #19
 81042b8:	6922      	ldr	r2, [r4, #16]
 81042ba:	6022      	str	r2, [r4, #0]
 81042bc:	d504      	bpl.n	81042c8 <__sflush_r+0x7c>
 81042be:	1c42      	adds	r2, r0, #1
 81042c0:	d101      	bne.n	81042c6 <__sflush_r+0x7a>
 81042c2:	682b      	ldr	r3, [r5, #0]
 81042c4:	b903      	cbnz	r3, 81042c8 <__sflush_r+0x7c>
 81042c6:	6560      	str	r0, [r4, #84]	; 0x54
 81042c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81042ca:	602f      	str	r7, [r5, #0]
 81042cc:	2900      	cmp	r1, #0
 81042ce:	d0ca      	beq.n	8104266 <__sflush_r+0x1a>
 81042d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81042d4:	4299      	cmp	r1, r3
 81042d6:	d002      	beq.n	81042de <__sflush_r+0x92>
 81042d8:	4628      	mov	r0, r5
 81042da:	f7ff fae9 	bl	81038b0 <_free_r>
 81042de:	2000      	movs	r0, #0
 81042e0:	6360      	str	r0, [r4, #52]	; 0x34
 81042e2:	e7c1      	b.n	8104268 <__sflush_r+0x1c>
 81042e4:	6a21      	ldr	r1, [r4, #32]
 81042e6:	2301      	movs	r3, #1
 81042e8:	4628      	mov	r0, r5
 81042ea:	47b0      	blx	r6
 81042ec:	1c41      	adds	r1, r0, #1
 81042ee:	d1c7      	bne.n	8104280 <__sflush_r+0x34>
 81042f0:	682b      	ldr	r3, [r5, #0]
 81042f2:	2b00      	cmp	r3, #0
 81042f4:	d0c4      	beq.n	8104280 <__sflush_r+0x34>
 81042f6:	2b1d      	cmp	r3, #29
 81042f8:	d001      	beq.n	81042fe <__sflush_r+0xb2>
 81042fa:	2b16      	cmp	r3, #22
 81042fc:	d101      	bne.n	8104302 <__sflush_r+0xb6>
 81042fe:	602f      	str	r7, [r5, #0]
 8104300:	e7b1      	b.n	8104266 <__sflush_r+0x1a>
 8104302:	89a3      	ldrh	r3, [r4, #12]
 8104304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8104308:	81a3      	strh	r3, [r4, #12]
 810430a:	e7ad      	b.n	8104268 <__sflush_r+0x1c>
 810430c:	690f      	ldr	r7, [r1, #16]
 810430e:	2f00      	cmp	r7, #0
 8104310:	d0a9      	beq.n	8104266 <__sflush_r+0x1a>
 8104312:	0793      	lsls	r3, r2, #30
 8104314:	680e      	ldr	r6, [r1, #0]
 8104316:	bf08      	it	eq
 8104318:	694b      	ldreq	r3, [r1, #20]
 810431a:	600f      	str	r7, [r1, #0]
 810431c:	bf18      	it	ne
 810431e:	2300      	movne	r3, #0
 8104320:	eba6 0807 	sub.w	r8, r6, r7
 8104324:	608b      	str	r3, [r1, #8]
 8104326:	f1b8 0f00 	cmp.w	r8, #0
 810432a:	dd9c      	ble.n	8104266 <__sflush_r+0x1a>
 810432c:	6a21      	ldr	r1, [r4, #32]
 810432e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8104330:	4643      	mov	r3, r8
 8104332:	463a      	mov	r2, r7
 8104334:	4628      	mov	r0, r5
 8104336:	47b0      	blx	r6
 8104338:	2800      	cmp	r0, #0
 810433a:	dc06      	bgt.n	810434a <__sflush_r+0xfe>
 810433c:	89a3      	ldrh	r3, [r4, #12]
 810433e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8104342:	81a3      	strh	r3, [r4, #12]
 8104344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8104348:	e78e      	b.n	8104268 <__sflush_r+0x1c>
 810434a:	4407      	add	r7, r0
 810434c:	eba8 0800 	sub.w	r8, r8, r0
 8104350:	e7e9      	b.n	8104326 <__sflush_r+0xda>
 8104352:	bf00      	nop
 8104354:	20400001 	.word	0x20400001

08104358 <_fflush_r>:
 8104358:	b538      	push	{r3, r4, r5, lr}
 810435a:	690b      	ldr	r3, [r1, #16]
 810435c:	4605      	mov	r5, r0
 810435e:	460c      	mov	r4, r1
 8104360:	b913      	cbnz	r3, 8104368 <_fflush_r+0x10>
 8104362:	2500      	movs	r5, #0
 8104364:	4628      	mov	r0, r5
 8104366:	bd38      	pop	{r3, r4, r5, pc}
 8104368:	b118      	cbz	r0, 8104372 <_fflush_r+0x1a>
 810436a:	6983      	ldr	r3, [r0, #24]
 810436c:	b90b      	cbnz	r3, 8104372 <_fflush_r+0x1a>
 810436e:	f000 f887 	bl	8104480 <__sinit>
 8104372:	4b14      	ldr	r3, [pc, #80]	; (81043c4 <_fflush_r+0x6c>)
 8104374:	429c      	cmp	r4, r3
 8104376:	d11b      	bne.n	81043b0 <_fflush_r+0x58>
 8104378:	686c      	ldr	r4, [r5, #4]
 810437a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810437e:	2b00      	cmp	r3, #0
 8104380:	d0ef      	beq.n	8104362 <_fflush_r+0xa>
 8104382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8104384:	07d0      	lsls	r0, r2, #31
 8104386:	d404      	bmi.n	8104392 <_fflush_r+0x3a>
 8104388:	0599      	lsls	r1, r3, #22
 810438a:	d402      	bmi.n	8104392 <_fflush_r+0x3a>
 810438c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810438e:	f000 f915 	bl	81045bc <__retarget_lock_acquire_recursive>
 8104392:	4628      	mov	r0, r5
 8104394:	4621      	mov	r1, r4
 8104396:	f7ff ff59 	bl	810424c <__sflush_r>
 810439a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810439c:	07da      	lsls	r2, r3, #31
 810439e:	4605      	mov	r5, r0
 81043a0:	d4e0      	bmi.n	8104364 <_fflush_r+0xc>
 81043a2:	89a3      	ldrh	r3, [r4, #12]
 81043a4:	059b      	lsls	r3, r3, #22
 81043a6:	d4dd      	bmi.n	8104364 <_fflush_r+0xc>
 81043a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81043aa:	f000 f908 	bl	81045be <__retarget_lock_release_recursive>
 81043ae:	e7d9      	b.n	8104364 <_fflush_r+0xc>
 81043b0:	4b05      	ldr	r3, [pc, #20]	; (81043c8 <_fflush_r+0x70>)
 81043b2:	429c      	cmp	r4, r3
 81043b4:	d101      	bne.n	81043ba <_fflush_r+0x62>
 81043b6:	68ac      	ldr	r4, [r5, #8]
 81043b8:	e7df      	b.n	810437a <_fflush_r+0x22>
 81043ba:	4b04      	ldr	r3, [pc, #16]	; (81043cc <_fflush_r+0x74>)
 81043bc:	429c      	cmp	r4, r3
 81043be:	bf08      	it	eq
 81043c0:	68ec      	ldreq	r4, [r5, #12]
 81043c2:	e7da      	b.n	810437a <_fflush_r+0x22>
 81043c4:	08104b90 	.word	0x08104b90
 81043c8:	08104bb0 	.word	0x08104bb0
 81043cc:	08104b70 	.word	0x08104b70

081043d0 <std>:
 81043d0:	2300      	movs	r3, #0
 81043d2:	b510      	push	{r4, lr}
 81043d4:	4604      	mov	r4, r0
 81043d6:	e9c0 3300 	strd	r3, r3, [r0]
 81043da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81043de:	6083      	str	r3, [r0, #8]
 81043e0:	8181      	strh	r1, [r0, #12]
 81043e2:	6643      	str	r3, [r0, #100]	; 0x64
 81043e4:	81c2      	strh	r2, [r0, #14]
 81043e6:	6183      	str	r3, [r0, #24]
 81043e8:	4619      	mov	r1, r3
 81043ea:	2208      	movs	r2, #8
 81043ec:	305c      	adds	r0, #92	; 0x5c
 81043ee:	f7ff fa57 	bl	81038a0 <memset>
 81043f2:	4b05      	ldr	r3, [pc, #20]	; (8104408 <std+0x38>)
 81043f4:	6263      	str	r3, [r4, #36]	; 0x24
 81043f6:	4b05      	ldr	r3, [pc, #20]	; (810440c <std+0x3c>)
 81043f8:	62a3      	str	r3, [r4, #40]	; 0x28
 81043fa:	4b05      	ldr	r3, [pc, #20]	; (8104410 <std+0x40>)
 81043fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 81043fe:	4b05      	ldr	r3, [pc, #20]	; (8104414 <std+0x44>)
 8104400:	6224      	str	r4, [r4, #32]
 8104402:	6323      	str	r3, [r4, #48]	; 0x30
 8104404:	bd10      	pop	{r4, pc}
 8104406:	bf00      	nop
 8104408:	0810472d 	.word	0x0810472d
 810440c:	0810474f 	.word	0x0810474f
 8104410:	08104787 	.word	0x08104787
 8104414:	081047ab 	.word	0x081047ab

08104418 <_cleanup_r>:
 8104418:	4901      	ldr	r1, [pc, #4]	; (8104420 <_cleanup_r+0x8>)
 810441a:	f000 b8af 	b.w	810457c <_fwalk_reent>
 810441e:	bf00      	nop
 8104420:	08104359 	.word	0x08104359

08104424 <__sfmoreglue>:
 8104424:	b570      	push	{r4, r5, r6, lr}
 8104426:	2268      	movs	r2, #104	; 0x68
 8104428:	1e4d      	subs	r5, r1, #1
 810442a:	4355      	muls	r5, r2
 810442c:	460e      	mov	r6, r1
 810442e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8104432:	f7ff faa9 	bl	8103988 <_malloc_r>
 8104436:	4604      	mov	r4, r0
 8104438:	b140      	cbz	r0, 810444c <__sfmoreglue+0x28>
 810443a:	2100      	movs	r1, #0
 810443c:	e9c0 1600 	strd	r1, r6, [r0]
 8104440:	300c      	adds	r0, #12
 8104442:	60a0      	str	r0, [r4, #8]
 8104444:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8104448:	f7ff fa2a 	bl	81038a0 <memset>
 810444c:	4620      	mov	r0, r4
 810444e:	bd70      	pop	{r4, r5, r6, pc}

08104450 <__sfp_lock_acquire>:
 8104450:	4801      	ldr	r0, [pc, #4]	; (8104458 <__sfp_lock_acquire+0x8>)
 8104452:	f000 b8b3 	b.w	81045bc <__retarget_lock_acquire_recursive>
 8104456:	bf00      	nop
 8104458:	1000029d 	.word	0x1000029d

0810445c <__sfp_lock_release>:
 810445c:	4801      	ldr	r0, [pc, #4]	; (8104464 <__sfp_lock_release+0x8>)
 810445e:	f000 b8ae 	b.w	81045be <__retarget_lock_release_recursive>
 8104462:	bf00      	nop
 8104464:	1000029d 	.word	0x1000029d

08104468 <__sinit_lock_acquire>:
 8104468:	4801      	ldr	r0, [pc, #4]	; (8104470 <__sinit_lock_acquire+0x8>)
 810446a:	f000 b8a7 	b.w	81045bc <__retarget_lock_acquire_recursive>
 810446e:	bf00      	nop
 8104470:	1000029e 	.word	0x1000029e

08104474 <__sinit_lock_release>:
 8104474:	4801      	ldr	r0, [pc, #4]	; (810447c <__sinit_lock_release+0x8>)
 8104476:	f000 b8a2 	b.w	81045be <__retarget_lock_release_recursive>
 810447a:	bf00      	nop
 810447c:	1000029e 	.word	0x1000029e

08104480 <__sinit>:
 8104480:	b510      	push	{r4, lr}
 8104482:	4604      	mov	r4, r0
 8104484:	f7ff fff0 	bl	8104468 <__sinit_lock_acquire>
 8104488:	69a3      	ldr	r3, [r4, #24]
 810448a:	b11b      	cbz	r3, 8104494 <__sinit+0x14>
 810448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8104490:	f7ff bff0 	b.w	8104474 <__sinit_lock_release>
 8104494:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8104498:	6523      	str	r3, [r4, #80]	; 0x50
 810449a:	4b13      	ldr	r3, [pc, #76]	; (81044e8 <__sinit+0x68>)
 810449c:	4a13      	ldr	r2, [pc, #76]	; (81044ec <__sinit+0x6c>)
 810449e:	681b      	ldr	r3, [r3, #0]
 81044a0:	62a2      	str	r2, [r4, #40]	; 0x28
 81044a2:	42a3      	cmp	r3, r4
 81044a4:	bf04      	itt	eq
 81044a6:	2301      	moveq	r3, #1
 81044a8:	61a3      	streq	r3, [r4, #24]
 81044aa:	4620      	mov	r0, r4
 81044ac:	f000 f820 	bl	81044f0 <__sfp>
 81044b0:	6060      	str	r0, [r4, #4]
 81044b2:	4620      	mov	r0, r4
 81044b4:	f000 f81c 	bl	81044f0 <__sfp>
 81044b8:	60a0      	str	r0, [r4, #8]
 81044ba:	4620      	mov	r0, r4
 81044bc:	f000 f818 	bl	81044f0 <__sfp>
 81044c0:	2200      	movs	r2, #0
 81044c2:	60e0      	str	r0, [r4, #12]
 81044c4:	2104      	movs	r1, #4
 81044c6:	6860      	ldr	r0, [r4, #4]
 81044c8:	f7ff ff82 	bl	81043d0 <std>
 81044cc:	68a0      	ldr	r0, [r4, #8]
 81044ce:	2201      	movs	r2, #1
 81044d0:	2109      	movs	r1, #9
 81044d2:	f7ff ff7d 	bl	81043d0 <std>
 81044d6:	68e0      	ldr	r0, [r4, #12]
 81044d8:	2202      	movs	r2, #2
 81044da:	2112      	movs	r1, #18
 81044dc:	f7ff ff78 	bl	81043d0 <std>
 81044e0:	2301      	movs	r3, #1
 81044e2:	61a3      	str	r3, [r4, #24]
 81044e4:	e7d2      	b.n	810448c <__sinit+0xc>
 81044e6:	bf00      	nop
 81044e8:	08104b38 	.word	0x08104b38
 81044ec:	08104419 	.word	0x08104419

081044f0 <__sfp>:
 81044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81044f2:	4607      	mov	r7, r0
 81044f4:	f7ff ffac 	bl	8104450 <__sfp_lock_acquire>
 81044f8:	4b1e      	ldr	r3, [pc, #120]	; (8104574 <__sfp+0x84>)
 81044fa:	681e      	ldr	r6, [r3, #0]
 81044fc:	69b3      	ldr	r3, [r6, #24]
 81044fe:	b913      	cbnz	r3, 8104506 <__sfp+0x16>
 8104500:	4630      	mov	r0, r6
 8104502:	f7ff ffbd 	bl	8104480 <__sinit>
 8104506:	3648      	adds	r6, #72	; 0x48
 8104508:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810450c:	3b01      	subs	r3, #1
 810450e:	d503      	bpl.n	8104518 <__sfp+0x28>
 8104510:	6833      	ldr	r3, [r6, #0]
 8104512:	b30b      	cbz	r3, 8104558 <__sfp+0x68>
 8104514:	6836      	ldr	r6, [r6, #0]
 8104516:	e7f7      	b.n	8104508 <__sfp+0x18>
 8104518:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810451c:	b9d5      	cbnz	r5, 8104554 <__sfp+0x64>
 810451e:	4b16      	ldr	r3, [pc, #88]	; (8104578 <__sfp+0x88>)
 8104520:	60e3      	str	r3, [r4, #12]
 8104522:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8104526:	6665      	str	r5, [r4, #100]	; 0x64
 8104528:	f000 f847 	bl	81045ba <__retarget_lock_init_recursive>
 810452c:	f7ff ff96 	bl	810445c <__sfp_lock_release>
 8104530:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8104534:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8104538:	6025      	str	r5, [r4, #0]
 810453a:	61a5      	str	r5, [r4, #24]
 810453c:	2208      	movs	r2, #8
 810453e:	4629      	mov	r1, r5
 8104540:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8104544:	f7ff f9ac 	bl	81038a0 <memset>
 8104548:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810454c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8104550:	4620      	mov	r0, r4
 8104552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8104554:	3468      	adds	r4, #104	; 0x68
 8104556:	e7d9      	b.n	810450c <__sfp+0x1c>
 8104558:	2104      	movs	r1, #4
 810455a:	4638      	mov	r0, r7
 810455c:	f7ff ff62 	bl	8104424 <__sfmoreglue>
 8104560:	4604      	mov	r4, r0
 8104562:	6030      	str	r0, [r6, #0]
 8104564:	2800      	cmp	r0, #0
 8104566:	d1d5      	bne.n	8104514 <__sfp+0x24>
 8104568:	f7ff ff78 	bl	810445c <__sfp_lock_release>
 810456c:	230c      	movs	r3, #12
 810456e:	603b      	str	r3, [r7, #0]
 8104570:	e7ee      	b.n	8104550 <__sfp+0x60>
 8104572:	bf00      	nop
 8104574:	08104b38 	.word	0x08104b38
 8104578:	ffff0001 	.word	0xffff0001

0810457c <_fwalk_reent>:
 810457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8104580:	4606      	mov	r6, r0
 8104582:	4688      	mov	r8, r1
 8104584:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8104588:	2700      	movs	r7, #0
 810458a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810458e:	f1b9 0901 	subs.w	r9, r9, #1
 8104592:	d505      	bpl.n	81045a0 <_fwalk_reent+0x24>
 8104594:	6824      	ldr	r4, [r4, #0]
 8104596:	2c00      	cmp	r4, #0
 8104598:	d1f7      	bne.n	810458a <_fwalk_reent+0xe>
 810459a:	4638      	mov	r0, r7
 810459c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81045a0:	89ab      	ldrh	r3, [r5, #12]
 81045a2:	2b01      	cmp	r3, #1
 81045a4:	d907      	bls.n	81045b6 <_fwalk_reent+0x3a>
 81045a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81045aa:	3301      	adds	r3, #1
 81045ac:	d003      	beq.n	81045b6 <_fwalk_reent+0x3a>
 81045ae:	4629      	mov	r1, r5
 81045b0:	4630      	mov	r0, r6
 81045b2:	47c0      	blx	r8
 81045b4:	4307      	orrs	r7, r0
 81045b6:	3568      	adds	r5, #104	; 0x68
 81045b8:	e7e9      	b.n	810458e <_fwalk_reent+0x12>

081045ba <__retarget_lock_init_recursive>:
 81045ba:	4770      	bx	lr

081045bc <__retarget_lock_acquire_recursive>:
 81045bc:	4770      	bx	lr

081045be <__retarget_lock_release_recursive>:
 81045be:	4770      	bx	lr

081045c0 <__swhatbuf_r>:
 81045c0:	b570      	push	{r4, r5, r6, lr}
 81045c2:	460e      	mov	r6, r1
 81045c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81045c8:	2900      	cmp	r1, #0
 81045ca:	b096      	sub	sp, #88	; 0x58
 81045cc:	4614      	mov	r4, r2
 81045ce:	461d      	mov	r5, r3
 81045d0:	da08      	bge.n	81045e4 <__swhatbuf_r+0x24>
 81045d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 81045d6:	2200      	movs	r2, #0
 81045d8:	602a      	str	r2, [r5, #0]
 81045da:	061a      	lsls	r2, r3, #24
 81045dc:	d410      	bmi.n	8104600 <__swhatbuf_r+0x40>
 81045de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 81045e2:	e00e      	b.n	8104602 <__swhatbuf_r+0x42>
 81045e4:	466a      	mov	r2, sp
 81045e6:	f000 f907 	bl	81047f8 <_fstat_r>
 81045ea:	2800      	cmp	r0, #0
 81045ec:	dbf1      	blt.n	81045d2 <__swhatbuf_r+0x12>
 81045ee:	9a01      	ldr	r2, [sp, #4]
 81045f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 81045f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 81045f8:	425a      	negs	r2, r3
 81045fa:	415a      	adcs	r2, r3
 81045fc:	602a      	str	r2, [r5, #0]
 81045fe:	e7ee      	b.n	81045de <__swhatbuf_r+0x1e>
 8104600:	2340      	movs	r3, #64	; 0x40
 8104602:	2000      	movs	r0, #0
 8104604:	6023      	str	r3, [r4, #0]
 8104606:	b016      	add	sp, #88	; 0x58
 8104608:	bd70      	pop	{r4, r5, r6, pc}
	...

0810460c <__smakebuf_r>:
 810460c:	898b      	ldrh	r3, [r1, #12]
 810460e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8104610:	079d      	lsls	r5, r3, #30
 8104612:	4606      	mov	r6, r0
 8104614:	460c      	mov	r4, r1
 8104616:	d507      	bpl.n	8104628 <__smakebuf_r+0x1c>
 8104618:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810461c:	6023      	str	r3, [r4, #0]
 810461e:	6123      	str	r3, [r4, #16]
 8104620:	2301      	movs	r3, #1
 8104622:	6163      	str	r3, [r4, #20]
 8104624:	b002      	add	sp, #8
 8104626:	bd70      	pop	{r4, r5, r6, pc}
 8104628:	ab01      	add	r3, sp, #4
 810462a:	466a      	mov	r2, sp
 810462c:	f7ff ffc8 	bl	81045c0 <__swhatbuf_r>
 8104630:	9900      	ldr	r1, [sp, #0]
 8104632:	4605      	mov	r5, r0
 8104634:	4630      	mov	r0, r6
 8104636:	f7ff f9a7 	bl	8103988 <_malloc_r>
 810463a:	b948      	cbnz	r0, 8104650 <__smakebuf_r+0x44>
 810463c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8104640:	059a      	lsls	r2, r3, #22
 8104642:	d4ef      	bmi.n	8104624 <__smakebuf_r+0x18>
 8104644:	f023 0303 	bic.w	r3, r3, #3
 8104648:	f043 0302 	orr.w	r3, r3, #2
 810464c:	81a3      	strh	r3, [r4, #12]
 810464e:	e7e3      	b.n	8104618 <__smakebuf_r+0xc>
 8104650:	4b0d      	ldr	r3, [pc, #52]	; (8104688 <__smakebuf_r+0x7c>)
 8104652:	62b3      	str	r3, [r6, #40]	; 0x28
 8104654:	89a3      	ldrh	r3, [r4, #12]
 8104656:	6020      	str	r0, [r4, #0]
 8104658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810465c:	81a3      	strh	r3, [r4, #12]
 810465e:	9b00      	ldr	r3, [sp, #0]
 8104660:	6163      	str	r3, [r4, #20]
 8104662:	9b01      	ldr	r3, [sp, #4]
 8104664:	6120      	str	r0, [r4, #16]
 8104666:	b15b      	cbz	r3, 8104680 <__smakebuf_r+0x74>
 8104668:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810466c:	4630      	mov	r0, r6
 810466e:	f000 f8d5 	bl	810481c <_isatty_r>
 8104672:	b128      	cbz	r0, 8104680 <__smakebuf_r+0x74>
 8104674:	89a3      	ldrh	r3, [r4, #12]
 8104676:	f023 0303 	bic.w	r3, r3, #3
 810467a:	f043 0301 	orr.w	r3, r3, #1
 810467e:	81a3      	strh	r3, [r4, #12]
 8104680:	89a0      	ldrh	r0, [r4, #12]
 8104682:	4305      	orrs	r5, r0
 8104684:	81a5      	strh	r5, [r4, #12]
 8104686:	e7cd      	b.n	8104624 <__smakebuf_r+0x18>
 8104688:	08104419 	.word	0x08104419

0810468c <__malloc_lock>:
 810468c:	4801      	ldr	r0, [pc, #4]	; (8104694 <__malloc_lock+0x8>)
 810468e:	f7ff bf95 	b.w	81045bc <__retarget_lock_acquire_recursive>
 8104692:	bf00      	nop
 8104694:	1000029c 	.word	0x1000029c

08104698 <__malloc_unlock>:
 8104698:	4801      	ldr	r0, [pc, #4]	; (81046a0 <__malloc_unlock+0x8>)
 810469a:	f7ff bf90 	b.w	81045be <__retarget_lock_release_recursive>
 810469e:	bf00      	nop
 81046a0:	1000029c 	.word	0x1000029c

081046a4 <_raise_r>:
 81046a4:	291f      	cmp	r1, #31
 81046a6:	b538      	push	{r3, r4, r5, lr}
 81046a8:	4604      	mov	r4, r0
 81046aa:	460d      	mov	r5, r1
 81046ac:	d904      	bls.n	81046b8 <_raise_r+0x14>
 81046ae:	2316      	movs	r3, #22
 81046b0:	6003      	str	r3, [r0, #0]
 81046b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 81046b6:	bd38      	pop	{r3, r4, r5, pc}
 81046b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 81046ba:	b112      	cbz	r2, 81046c2 <_raise_r+0x1e>
 81046bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 81046c0:	b94b      	cbnz	r3, 81046d6 <_raise_r+0x32>
 81046c2:	4620      	mov	r0, r4
 81046c4:	f000 f830 	bl	8104728 <_getpid_r>
 81046c8:	462a      	mov	r2, r5
 81046ca:	4601      	mov	r1, r0
 81046cc:	4620      	mov	r0, r4
 81046ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81046d2:	f000 b817 	b.w	8104704 <_kill_r>
 81046d6:	2b01      	cmp	r3, #1
 81046d8:	d00a      	beq.n	81046f0 <_raise_r+0x4c>
 81046da:	1c59      	adds	r1, r3, #1
 81046dc:	d103      	bne.n	81046e6 <_raise_r+0x42>
 81046de:	2316      	movs	r3, #22
 81046e0:	6003      	str	r3, [r0, #0]
 81046e2:	2001      	movs	r0, #1
 81046e4:	e7e7      	b.n	81046b6 <_raise_r+0x12>
 81046e6:	2400      	movs	r4, #0
 81046e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 81046ec:	4628      	mov	r0, r5
 81046ee:	4798      	blx	r3
 81046f0:	2000      	movs	r0, #0
 81046f2:	e7e0      	b.n	81046b6 <_raise_r+0x12>

081046f4 <raise>:
 81046f4:	4b02      	ldr	r3, [pc, #8]	; (8104700 <raise+0xc>)
 81046f6:	4601      	mov	r1, r0
 81046f8:	6818      	ldr	r0, [r3, #0]
 81046fa:	f7ff bfd3 	b.w	81046a4 <_raise_r>
 81046fe:	bf00      	nop
 8104700:	100000b8 	.word	0x100000b8

08104704 <_kill_r>:
 8104704:	b538      	push	{r3, r4, r5, lr}
 8104706:	4d07      	ldr	r5, [pc, #28]	; (8104724 <_kill_r+0x20>)
 8104708:	2300      	movs	r3, #0
 810470a:	4604      	mov	r4, r0
 810470c:	4608      	mov	r0, r1
 810470e:	4611      	mov	r1, r2
 8104710:	602b      	str	r3, [r5, #0]
 8104712:	f7fc f837 	bl	8100784 <_kill>
 8104716:	1c43      	adds	r3, r0, #1
 8104718:	d102      	bne.n	8104720 <_kill_r+0x1c>
 810471a:	682b      	ldr	r3, [r5, #0]
 810471c:	b103      	cbz	r3, 8104720 <_kill_r+0x1c>
 810471e:	6023      	str	r3, [r4, #0]
 8104720:	bd38      	pop	{r3, r4, r5, pc}
 8104722:	bf00      	nop
 8104724:	100002a0 	.word	0x100002a0

08104728 <_getpid_r>:
 8104728:	f7fc b824 	b.w	8100774 <_getpid>

0810472c <__sread>:
 810472c:	b510      	push	{r4, lr}
 810472e:	460c      	mov	r4, r1
 8104730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8104734:	f000 f894 	bl	8104860 <_read_r>
 8104738:	2800      	cmp	r0, #0
 810473a:	bfab      	itete	ge
 810473c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810473e:	89a3      	ldrhlt	r3, [r4, #12]
 8104740:	181b      	addge	r3, r3, r0
 8104742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8104746:	bfac      	ite	ge
 8104748:	6563      	strge	r3, [r4, #84]	; 0x54
 810474a:	81a3      	strhlt	r3, [r4, #12]
 810474c:	bd10      	pop	{r4, pc}

0810474e <__swrite>:
 810474e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8104752:	461f      	mov	r7, r3
 8104754:	898b      	ldrh	r3, [r1, #12]
 8104756:	05db      	lsls	r3, r3, #23
 8104758:	4605      	mov	r5, r0
 810475a:	460c      	mov	r4, r1
 810475c:	4616      	mov	r6, r2
 810475e:	d505      	bpl.n	810476c <__swrite+0x1e>
 8104760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8104764:	2302      	movs	r3, #2
 8104766:	2200      	movs	r2, #0
 8104768:	f000 f868 	bl	810483c <_lseek_r>
 810476c:	89a3      	ldrh	r3, [r4, #12]
 810476e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8104772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8104776:	81a3      	strh	r3, [r4, #12]
 8104778:	4632      	mov	r2, r6
 810477a:	463b      	mov	r3, r7
 810477c:	4628      	mov	r0, r5
 810477e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8104782:	f000 b817 	b.w	81047b4 <_write_r>

08104786 <__sseek>:
 8104786:	b510      	push	{r4, lr}
 8104788:	460c      	mov	r4, r1
 810478a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810478e:	f000 f855 	bl	810483c <_lseek_r>
 8104792:	1c43      	adds	r3, r0, #1
 8104794:	89a3      	ldrh	r3, [r4, #12]
 8104796:	bf15      	itete	ne
 8104798:	6560      	strne	r0, [r4, #84]	; 0x54
 810479a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810479e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 81047a2:	81a3      	strheq	r3, [r4, #12]
 81047a4:	bf18      	it	ne
 81047a6:	81a3      	strhne	r3, [r4, #12]
 81047a8:	bd10      	pop	{r4, pc}

081047aa <__sclose>:
 81047aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81047ae:	f000 b813 	b.w	81047d8 <_close_r>
	...

081047b4 <_write_r>:
 81047b4:	b538      	push	{r3, r4, r5, lr}
 81047b6:	4d07      	ldr	r5, [pc, #28]	; (81047d4 <_write_r+0x20>)
 81047b8:	4604      	mov	r4, r0
 81047ba:	4608      	mov	r0, r1
 81047bc:	4611      	mov	r1, r2
 81047be:	2200      	movs	r2, #0
 81047c0:	602a      	str	r2, [r5, #0]
 81047c2:	461a      	mov	r2, r3
 81047c4:	f7fb fee9 	bl	810059a <_write>
 81047c8:	1c43      	adds	r3, r0, #1
 81047ca:	d102      	bne.n	81047d2 <_write_r+0x1e>
 81047cc:	682b      	ldr	r3, [r5, #0]
 81047ce:	b103      	cbz	r3, 81047d2 <_write_r+0x1e>
 81047d0:	6023      	str	r3, [r4, #0]
 81047d2:	bd38      	pop	{r3, r4, r5, pc}
 81047d4:	100002a0 	.word	0x100002a0

081047d8 <_close_r>:
 81047d8:	b538      	push	{r3, r4, r5, lr}
 81047da:	4d06      	ldr	r5, [pc, #24]	; (81047f4 <_close_r+0x1c>)
 81047dc:	2300      	movs	r3, #0
 81047de:	4604      	mov	r4, r0
 81047e0:	4608      	mov	r0, r1
 81047e2:	602b      	str	r3, [r5, #0]
 81047e4:	f7fc f805 	bl	81007f2 <_close>
 81047e8:	1c43      	adds	r3, r0, #1
 81047ea:	d102      	bne.n	81047f2 <_close_r+0x1a>
 81047ec:	682b      	ldr	r3, [r5, #0]
 81047ee:	b103      	cbz	r3, 81047f2 <_close_r+0x1a>
 81047f0:	6023      	str	r3, [r4, #0]
 81047f2:	bd38      	pop	{r3, r4, r5, pc}
 81047f4:	100002a0 	.word	0x100002a0

081047f8 <_fstat_r>:
 81047f8:	b538      	push	{r3, r4, r5, lr}
 81047fa:	4d07      	ldr	r5, [pc, #28]	; (8104818 <_fstat_r+0x20>)
 81047fc:	2300      	movs	r3, #0
 81047fe:	4604      	mov	r4, r0
 8104800:	4608      	mov	r0, r1
 8104802:	4611      	mov	r1, r2
 8104804:	602b      	str	r3, [r5, #0]
 8104806:	f7fc f800 	bl	810080a <_fstat>
 810480a:	1c43      	adds	r3, r0, #1
 810480c:	d102      	bne.n	8104814 <_fstat_r+0x1c>
 810480e:	682b      	ldr	r3, [r5, #0]
 8104810:	b103      	cbz	r3, 8104814 <_fstat_r+0x1c>
 8104812:	6023      	str	r3, [r4, #0]
 8104814:	bd38      	pop	{r3, r4, r5, pc}
 8104816:	bf00      	nop
 8104818:	100002a0 	.word	0x100002a0

0810481c <_isatty_r>:
 810481c:	b538      	push	{r3, r4, r5, lr}
 810481e:	4d06      	ldr	r5, [pc, #24]	; (8104838 <_isatty_r+0x1c>)
 8104820:	2300      	movs	r3, #0
 8104822:	4604      	mov	r4, r0
 8104824:	4608      	mov	r0, r1
 8104826:	602b      	str	r3, [r5, #0]
 8104828:	f7fb ffff 	bl	810082a <_isatty>
 810482c:	1c43      	adds	r3, r0, #1
 810482e:	d102      	bne.n	8104836 <_isatty_r+0x1a>
 8104830:	682b      	ldr	r3, [r5, #0]
 8104832:	b103      	cbz	r3, 8104836 <_isatty_r+0x1a>
 8104834:	6023      	str	r3, [r4, #0]
 8104836:	bd38      	pop	{r3, r4, r5, pc}
 8104838:	100002a0 	.word	0x100002a0

0810483c <_lseek_r>:
 810483c:	b538      	push	{r3, r4, r5, lr}
 810483e:	4d07      	ldr	r5, [pc, #28]	; (810485c <_lseek_r+0x20>)
 8104840:	4604      	mov	r4, r0
 8104842:	4608      	mov	r0, r1
 8104844:	4611      	mov	r1, r2
 8104846:	2200      	movs	r2, #0
 8104848:	602a      	str	r2, [r5, #0]
 810484a:	461a      	mov	r2, r3
 810484c:	f7fb fff8 	bl	8100840 <_lseek>
 8104850:	1c43      	adds	r3, r0, #1
 8104852:	d102      	bne.n	810485a <_lseek_r+0x1e>
 8104854:	682b      	ldr	r3, [r5, #0]
 8104856:	b103      	cbz	r3, 810485a <_lseek_r+0x1e>
 8104858:	6023      	str	r3, [r4, #0]
 810485a:	bd38      	pop	{r3, r4, r5, pc}
 810485c:	100002a0 	.word	0x100002a0

08104860 <_read_r>:
 8104860:	b538      	push	{r3, r4, r5, lr}
 8104862:	4d07      	ldr	r5, [pc, #28]	; (8104880 <_read_r+0x20>)
 8104864:	4604      	mov	r4, r0
 8104866:	4608      	mov	r0, r1
 8104868:	4611      	mov	r1, r2
 810486a:	2200      	movs	r2, #0
 810486c:	602a      	str	r2, [r5, #0]
 810486e:	461a      	mov	r2, r3
 8104870:	f7fb ffa2 	bl	81007b8 <_read>
 8104874:	1c43      	adds	r3, r0, #1
 8104876:	d102      	bne.n	810487e <_read_r+0x1e>
 8104878:	682b      	ldr	r3, [r5, #0]
 810487a:	b103      	cbz	r3, 810487e <_read_r+0x1e>
 810487c:	6023      	str	r3, [r4, #0]
 810487e:	bd38      	pop	{r3, r4, r5, pc}
 8104880:	100002a0 	.word	0x100002a0

08104884 <_init>:
 8104884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104886:	bf00      	nop
 8104888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810488a:	bc08      	pop	{r3}
 810488c:	469e      	mov	lr, r3
 810488e:	4770      	bx	lr

08104890 <_fini>:
 8104890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8104892:	bf00      	nop
 8104894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8104896:	bc08      	pop	{r3}
 8104898:	469e      	mov	lr, r3
 810489a:	4770      	bx	lr
